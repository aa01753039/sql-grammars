### TaskGenerate a SQL query to answer [QUESTION]How many clubs are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many clubs are there?[/QUESTION][SQL]SELECT club.Country FROM club;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of clubs.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of clubs.[/QUESTION][SQL]SELECT Country FROM club;
### TaskGenerate a SQL query to answer [QUESTION]List the name of clubs in ascending alphabetical order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the name of clubs in ascending alphabetical order.[/QUESTION][SQL]SELECT club.Name FROM club WHERE club.Name IS NOT NULL ORDER BY club.Name ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of clubs, ordered alphabetically?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of clubs, ordered alphabetically?[/QUESTION][SQL]SELECT club.Name FROM club WHERE club.Name IS NOT NULL ORDER BY club.Name ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the managers and captains of clubs?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the managers and captains of clubs?[/QUESTION][SQL]SELECT club.Name, club.Manager, club.Captain FROM club ORDER BY club.Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return the managers and captains of all clubs.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the managers and captains of all clubs.[/QUESTION][SQL]SELECT club.Name, club.Manager, club.Captain FROM club ORDER BY club.Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the name of clubs whose manufacturer is not "Nike"[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the name of clubs whose manufacturer is not "Nike"[/QUESTION][SQL]SELECT club.Name FROM club WHERE club.Manufacturer!= 'Nike' ORDER BY club.Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of clubs who do not have the manufacturer Nike?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of clubs who do not have the manufacturer Nike?[/QUESTION][SQL]SELECT club.Name FROM club WHERE club.Manufacturer!= 'Nike' ORDER BY club.Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of players in ascending order of wins count?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of players in ascending order of wins count?[/QUESTION][SQL]SELECT player.Name, playeR.Wins_count FROM player ORDER BY playeR.Wins_count ASC;
### TaskGenerate a SQL query to answer [QUESTION]Return the names of players in order of count of wins, ascending.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the names of players in order of count of wins, ascending.[/QUESTION][SQL]SELECT player.Name FROM player WHERE player.Wins_count IS NOT NULL ORDER BY player.Wins_count ASC;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the player with the highest earnings?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the player with the highest earnings?[/QUESTION][SQL]SELECT player.Name FROM player WHERE player.Earnings = (SELECT MAX(Earnings) FROM player);
### TaskGenerate a SQL query to answer [QUESTION]Return the name of the player who earns the most money.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the name of the player who earns the most money.[/QUESTION][SQL]SELECT player.Name FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player);
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct countries of players with earnings higher than 1200000?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct countries of players with earnings higher than 1200000?[/QUESTION][SQL]SELECT player.Country FROM player WHERE player.Earnings > 1200000 GROUP BY player.Country ORDER BY player.Country NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]From which countries are players who make more than 1200000 from?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]From which countries are players who make more than 1200000 from?[/QUESTION][SQL]SELECT player.Country FROM player WHERE player.Earnings > 1200000;
### TaskGenerate a SQL query to answer [QUESTION]What is the country of the player with the highest earnings among players that have more than 2 win counts?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the country of the player with the highest earnings among players that have more than 2 win counts?[/QUESTION][SQL]SELECT player.Country FROM player WHERE player.Wins_count > 2 ORDER BY player.Earnings DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Of players who have more than 2 wins, what is the country of the player who makes the most?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Of players who have more than 2 wins, what is the country of the player who makes the most?[/QUESTION][SQL]SELECT player.Country FROM player WHERE player.Wins_count > 2 ORDER BY player.Earnings DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show names of players and names of clubs they are in.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show names of players and names of clubs they are in.[/QUESTION][SQL]SELECT player.Name, c.Name AS Club FROM player player JOIN club c ON player.Club_ID = c.Club_ID;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of players and the corresponding clubs that they are in?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of players and the corresponding clubs that they are in?[/QUESTION][SQL]SELECT player.Name, c.Name AS Club FROM player player JOIN club c ON player.Club_ID = c.Club_ID;
### TaskGenerate a SQL query to answer [QUESTION]Show names of clubs that have players with more than 2 win counts.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show names of clubs that have players with more than 2 win counts.[/QUESTION][SQL]SELECT club.Name FROM club WHERE club.Club_ID IN (SELECT player.Club_ID FROM player WHERE player.Wins_count > 2) GROUP BY club.Name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of clubs that have players who have won more than twice?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of clubs that have players who have won more than twice?[/QUESTION][SQL]SELECT club.Name FROM club WHERE club.Club_ID IN (SELECT player.Club_ID FROM player WHERE player.Wins_count > 2) GROUP BY club.Name;
### TaskGenerate a SQL query to answer [QUESTION]Show names of players from the club with manager "Sam Allardyce".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show names of players from the club with manager "Sam Allardyce".[/QUESTION][SQL]SELECT player.Name FROM player WHERE player.Club_ID IN (SELECT Club_ID FROM club WHERE Manager = 'Sam Allardyce');
### TaskGenerate a SQL query to answer [QUESTION]What are the names of players from the club managed by Sam Allardyce?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of players from the club managed by Sam Allardyce?[/QUESTION][SQL]SELECT player.Name FROM player WHERE player.Club_ID IN (SELECT Club_ID FROM club WHERE Manager = 'Sam Allardyce');
### TaskGenerate a SQL query to answer [QUESTION]Show names of clubs in descending order of average earnings of players belonging.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show names of clubs in descending order of average earnings of players belonging.[/QUESTION][SQL]SELECT club.Name, AVG(player.Earnings) AS avg_earnings FROM player JOIN club ON player.Club_ID = club.Club_ID GROUP BY club.Name ORDER BY avg_earnings DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of clubs, ordered descending by the average earnings of players within each?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of clubs, ordered descending by the average earnings of players within each?[/QUESTION][SQL]SELECT club.Name, AVG(player.Earnings) AS avg_earnings FROM player JOIN club ON player.Club_ID = club.Club_ID GROUP BY club.Name ORDER BY avg_earnings DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show different manufacturers and the number of clubs they are associated with.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show different manufacturers and the number of clubs they are associated with.[/QUESTION][SQL]SELECT club.Club_ID, COUNT(*) AS manufacturer_clubs FROM club JOIN player ON club.Club_ID = player.Club_ID GROUP BY club.Club_ID
### TaskGenerate a SQL query to answer [QUESTION]How many clubs use each manufacturer?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many clubs use each manufacturer?[/QUESTION][SQL]SELECT club.Club_ID, club.Manufacturer, COUNT(club.Club_ID) AS number_of_clubs FROM club GROUP BY club.Club_ID, club.Manufacturer ORDER BY number_of_clubs DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Please show the most common manufacturer of clubs.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please show the most common manufacturer of clubs.[/QUESTION][SQL]SELECT club.Club_ID, club.Manufacturer FROM club GROUP BY Club_ID, Manufacturer ORDER BY COUNT(Club_ID) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which manufacturer is most common among clubs?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which manufacturer is most common among clubs?[/QUESTION][SQL]SELECT club.Name, COUNT(*) AS count_clubs FROM club GROUP BY club.Name ORDER BY count_clubs DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List the manufacturers that are associated with more than one club.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the manufacturers that are associated with more than one club.[/QUESTION][SQL]SELECT club.Club_ID, COUNT(DISTINCT player.Player_ID) AS number_of_players FROM club JOIN player ON club.Club_ID = player.Club_ID GROUP BY club.Club_ID HAVING COUNT(DISTINCT player.Player_ID) > 1;
### TaskGenerate a SQL query to answer [QUESTION]Which manufacturers work for more than 1 club?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which manufacturers work for more than 1 club?[/QUESTION][SQL]SELECT club.Club_ID, club.Name, COUNT(DISTINCT club.Manufacturer) AS manufacturer_count FROM club GROUP BY club.Club_ID, club.Name HAVING COUNT(DISTINCT club.Manufacturer) > 1 ORDER BY manufacturer_count DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the country that have more than one player.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the country that have more than one player.[/QUESTION][SQL]SELECT player.Country FROM player WHERE (SELECT COUNT(*) FROM player WHERE Country = plaeer.Country) > 1 GROUP BY plaeer.Country;
### TaskGenerate a SQL query to answer [QUESTION]Which countries have produced more than one player?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which countries have produced more than one player?[/QUESTION][SQL]SELECT player.Country FROM player WHERE (SELECT COUNT(*) FROM player WHERE Country = plaeer.Country) > 1 GROUP BY plaeer.Country;
### TaskGenerate a SQL query to answer [QUESTION]List the name of clubs that do not have players.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the name of clubs that do not have players.[/QUESTION][SQL]SELECT club.Name FROM club WHERE club.Club_ID NOT IN (SELECT player.Club_ID FROM player)
### TaskGenerate a SQL query to answer [QUESTION]What are the names of clubs that do not have any players?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of clubs that do not have any players?[/QUESTION][SQL]SELECT club.Name FROM club WHERE club.Club_ID NOT IN (SELECT player.Club_ID FROM player) ORDER BY club.Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the country of players with earnings more than 1400000 and players with earnings less than 1100000.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the country of players with earnings more than 1400000 and players with earnings less than 1100000.[/QUESTION][SQL]SELECT player.Country FROM player WHERE playeR.Earnings > 1400000 OR playeR.Earnings < 1100000;
### TaskGenerate a SQL query to answer [QUESTION]Which country has produced both players with earnings over 1400000 and players with earnings below 1100000?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which country has produced both players with earnings over 1400000 and players with earnings below 1100000?[/QUESTION][SQL]SELECT player.Country FROM player WHERE player.Earnings > 1400000 AND player.Earnings < 1100000 GROUP BY player.Country;
### TaskGenerate a SQL query to answer [QUESTION]What is the number of distinct countries of all players?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the number of distinct countries of all players?[/QUESTION][SQL]SELECT Country FROM player WHERE Country IS NOT NULL GROUP BY Country;
### TaskGenerate a SQL query to answer [QUESTION]How many different countries are players from?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different countries are players from?[/QUESTION][SQL]SELECT player.Country FROM player WHERE player.Country IS NOT NULL GROUP BY player.Country ORDER BY player.Country;
### TaskGenerate a SQL query to answer [QUESTION]Show the earnings of players from country "Australia" or "Zimbabwe".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the earnings of players from country "Australia" or "Zimbabwe".[/QUESTION][SQL]SELECT player.Earnings FROM player WHERE player.Country IN ('Australia', 'Zimbabwe');
### TaskGenerate a SQL query to answer [QUESTION]What are the earnings of players from either of the countries of Australia or Zimbabwe?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the earnings of players from either of the countries of Australia or Zimbabwe?[/QUESTION][SQL]SELECT player.Earnings FROM player WHERE player.Country IN ('Australia', 'Zimbabwe');
### TaskGenerate a SQL query to answer [QUESTION]List the id, first name and last name of the customers who both have placed more than 2 orders and have bought at least 3 items.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the id, first name and last name of the customers who both have placed more than 2 orders and have bought at least 3 items.[/QUESTION][SQL]SELECT order_item_id, product_id FROM Order_Items;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids, first and last names of the customers who have ordered more than twice and have bought at least 3 items?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids, first and last names of the customers who have ordered more than twice and have bought at least 3 items?[/QUESTION][SQL]SELECT order_item_id, customer_id, customer_first_name, customer_last_name FROM Order_Items JOIN Orders ON Order_Items.order_id = Orders.order_id JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(order_item_id) >= 3) AND customer_id IN (SELECT customer_id FROM Orders GROUP BY customer_id HAVING COUNT(order_id) > 2);
### TaskGenerate a SQL query to answer [QUESTION]For the orders with any produts, how many products does each orders contain? List the order id, status and the number.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For the orders with any produts, how many products does each orders contain? List the order id, status and the number.[/QUESTION][SQL]SELECT order_item_id, COUNT(*) AS product_count FROM Order_Items GROUP BY order_id ORDER BY product_count DESC;
### TaskGenerate a SQL query to answer [QUESTION]For every order, how many products does it contain, and what are the orders' statuses and ids?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For every order, how many products does it contain, and what are the orders' statuses and ids?[/QUESTION][SQL]SELECT order_item_id, COUNT(*) AS product_count, o.order_status_code, o.order_id FROM Order_Items oi JOIN Orders o ON oi.order_id = o.order_id GROUP BY oi.order_id, o.order_status_code, o.order_id ORDER BY oi.order_id;
### TaskGenerate a SQL query to answer [QUESTION]List the dates of the orders which were placed at the earliest time or have more than 1 items.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the dates of the orders which were placed at the earliest time or have more than 1 items.[/QUESTION][SQL]SELECT order_item_id FROM Order_Items WHERE order_id IN (SELECT order_id FROM Orders ORDER BY date_order_placed ASC LIMIT 1 UNION SELECT order_id FROM Orders GROUP BY order_id HAVING COUNT(order_item_id) > 1);
### TaskGenerate a SQL query to answer [QUESTION]What are the dates of the earliest order and the dates of all orders with more than 1 item?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the dates of the earliest order and the dates of all orders with more than 1 item?[/QUESTION][SQL]SELECT order_item_id, COUNT(*) AS number_of_items FROM Order_Items GROUP BY order_item_id HAVING COUNT(*) > 1;
### TaskGenerate a SQL query to answer [QUESTION]Which customers did not make any orders? List the first name, middle initial and last name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which customers did not make any orders? List the first name, middle initial and last name.[/QUESTION][SQL]SELECT Customer_Payment_Methods.order_item_id FROM Customers WHERE Customer_ Payment_Methods.customer_id NOT IN (SELECT Orders.customer_id FROM Orders);
### TaskGenerate a SQL query to answer [QUESTION]WHat are the first and last names, and middle initials of all customers who did not make any orders?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]WHat are the first and last names, and middle initials of all customers who did not make any orders?[/QUESTION][SQL]SELECT Customer_Payment_Methods.order_item_id, Products.product_name, Customers.customer_first_name, Customers.customer_middle_initial, Customers.customer_last_name FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id LEFT JOIN Orders ON Customers.customer_id = Orders.customer_id LEFT JOIN Order_Items ON Orders.order_id = Order_Items.order_id LEFT JOIN Products ON Order_Items.product_id = Products.product_id WHERE Orders.customer_id IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What are the id, name, price and color of the products which have not been ordered for at least twice?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the id, name, price and color of the products which have not been ordered for at least twice?[/QUESTION][SQL]SELECT order_item_id, product_id, product_name, product_price, product_color FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id WHERE product_id NOT IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(order_item_id) >= 2);
### TaskGenerate a SQL query to answer [QUESTION]What are the ids, names, prices, and colors of all products that have been listed in less than two orders?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids, names, prices, and colors of all products that have been listed in less than two orders?[/QUESTION][SQL]SELECT order_item_id, product_id, product_name, product_price, product_color FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id WHERE product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(order_id) < 2);
### TaskGenerate a SQL query to answer [QUESTION]Which orders have at least 2 products on it? List the order id and date.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which orders have at least 2 products on it? List the order id and date.[/QUESTION][SQL]SELECT order_item_id, COUNT(*) AS product_count FROM Order_Items GROUP BY order_id HAVING COUNT(*) >= 2;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids and dates of the orders with at least two products?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids and dates of the orders with at least two products?[/QUESTION][SQL]SELECT order_item_id, order_id, date_order_placed FROM Order_Items GROUP BY order_id, date_order_placed HAVING COUNT(order_item_id) >= 2;
### TaskGenerate a SQL query to answer [QUESTION]Which product are listed in orders most frequently? List the id, product name and price.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which product are listed in orders most frequently? List the id, product name and price.[/QUESTION][SQL]SELECT order_item_id, p.product_name, p.product_price FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id GROUP BY oider_item_id, p.product_name, p.product_price ORDER BY COUNT(oi.order_item_id) DESC LIMIT 5;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids, names, and prices of all products that are ordered most frequently?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids, names, and prices of all products that are ordered most frequently?[/QUESTION][SQL]SELECT order_item_id, product_id, product_name, product_price FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY order_item_id, product_id, product_name, product_price ORDER BY COUNT(order_item_id) DESC;
### TaskGenerate a SQL query to answer [QUESTION]Which order have the least sum of the product prices. List the order id and sum.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which order have the least sum of the product prices. List the order id and sum.[/QUESTION][SQL]SELECT order_item_id, SUM(product_price) AS total_price FROM Order_Items GROUP BY order_id ORDER BY total_price ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the order that total cost the least, and how much is the total cost?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the order that total cost the least, and how much is the total cost?[/QUESTION][SQL]SELECT order_item_id FROM Order_Items WHERE product_id IN (SELECT product_id FROM Products ORDER BY product_price ASC LIMIT 1);
### TaskGenerate a SQL query to answer [QUESTION]What is the most popular payment method?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the most popular payment method?[/QUESTION][SQL]SELECT Customer_Payment_Methods.order_item_id, COUNT(Customer_Payment_Methods.payment_method_code) AS total_orders FROM Customer_Payment_Methods GROUP BY Customer_Payment_Methods.order_item_id ORDER BY total_orders DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the payment method that most customers use?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the payment method that most customers use?[/QUESTION][SQL]SELECT Customer_Payment_Methods.order_item_id, COUNT(Customer_Payment_Methods.payment_method_code) AS total_orders FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id GROUP BY Customer_Payment_Methods.payment_method_code ORDER BY total_orders DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How many number of products does each gender of customers buy? List the gender and the number[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many number of products does each gender of customers buy? List the gender and the number[/QUESTION][SQL]SELECT order_item_id, COUNT(*) AS total_products FROM Order_Items GROUP BY order_item_id;
### TaskGenerate a SQL query to answer [QUESTION]How many products does each gender buy?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many products does each gender buy?[/QUESTION][SQL]SELECT order_item_id, COUNT(*) AS total_products_bought FROM Order_Items JOIN Customers ON Order_Items.customer_id = Customers.customer_id GROUP BY order_item_id;
### TaskGenerate a SQL query to answer [QUESTION]How many orders has each gender of customers placed?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many orders has each gender of customers placed?[/QUESTION][SQL]SELECT order_item_id, COUNT(*) AS number_of_orders FROM Orders JOIN Customers ON Orders.customer_id = Customers.customer_id GROUP BY order_item_id;
### TaskGenerate a SQL query to answer [QUESTION]How many orders has each gender placed?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many orders has each gender placed?[/QUESTION][SQL]SELECT order_item_id, COUNT(*) AS number_of_orders FROM Order_Items GROUP BY order_id;
### TaskGenerate a SQL query to answer [QUESTION]List the customers' first name, middle initial, last name and payment methods.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the customers' first name, middle initial, last name and payment methods.[/QUESTION][SQL]SELECT Customer_Payment_Methods.order_item_id, Customers.customer_first_name, Customers.customer_middle_initial, Customers.customer_last_name FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the first names, middle initials, last names, and payment methods of all customers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the first names, middle initials, last names, and payment methods of all customers?[/QUESTION][SQL]SELECT Customer_Payment_Methods.order_item_id, Customers.customer_first_name, Customers.customer_middle_initial, Customers.customer_last_name, Customer_Payment_Methods.payment_method_code FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id;
### TaskGenerate a SQL query to answer [QUESTION]List the invoices' status, date and the date of shipment.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the invoices' status, date and the date of shipment.[/QUESTION][SQL]SELECT shipment_id, invoice_status_code, invoice_date, shipment_date FROM Shipments JOIN Invoices ON Shipments.invoice_number = Invoices.invoice_number;
### TaskGenerate a SQL query to answer [QUESTION]What are the statuses, dates, and shipment dates for all invoices?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the statuses, dates, and shipment dates for all invoices?[/QUESTION][SQL]SELECT shipment_id, invoice_status_code, invoice_date, shipment_date FROM Shipments JOIN Invoices ON Shipments.invoice_number = Invoices.invoice_number;
### TaskGenerate a SQL query to answer [QUESTION]List the names of the products being shipped and the corresponding shipment date.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of the products being shipped and the corresponding shipment date.[/QUESTION][SQL]SELECT shipment_id, product_name, shipment_date FROM Shipments JOIN Shipment_Items ON Shipments.shipment_id = Shipment_Items.shipment_id JOIN Order_Items ON Shipment_Items.order_item_id = Order_Items.order_item_id JOIN Products ON Order_Items.product_id = Products.product_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the products tht have been shipped, and on what days were they shipped?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the products tht have been shipped, and on what days were they shipped?[/QUESTION][SQL]SELECT shipment_id, product_name, shipment_date FROM Shipments si JOIN Shipment_Items shi ON si.shipment_id = shi.shipment_id JOIN Order_Items oi ON shi.order_item_id = oi.order_item_id JOIN Products p ON oi.product_id = p.product_id;
### TaskGenerate a SQL query to answer [QUESTION]What is the status code of the items being ordered and shipped and its corresponding shipment tracking number?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the status code of the items being ordered and shipped and its corresponding shipment tracking number?[/QUESTION][SQL]SELECT order_item_id, order_item_status_code, shipment_tracking_number FROM Order_Items oi JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id JOIN Shipments s ON si.shipment_id = s.shipment_id;
### TaskGenerate a SQL query to answer [QUESTION]What is the status code of the items have been ordered and shipped, and also what are their shipment tracking numbers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the status code of the items have been ordered and shipped, and also what are their shipment tracking numbers?[/QUESTION][SQL]SELECT order_item_id, product_id, order_item_status_code, shipment_tracking_number FROM Order_Items oi JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id JOIN Shipments shp ON si.shipment_id = shp.shipment_id;
### TaskGenerate a SQL query to answer [QUESTION]What is the product name and the color of the ordered items which have been shipped?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the product name and the color of the ordered items which have been shipped?[/QUESTION][SQL]SELECT order_item_id, p.product_name, p.product_color FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id WHERE oi.order_item_status_code ='shipped' ORDER BY oi.order_item_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and colors of all products that have been shipped?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and colors of all products that have been shipped?[/QUESTION][SQL]SELECT order_item_id, product_name, product_color FROM Order_Items oi JOIN Products pr ON oi.product_id = pr.product_id WHERE order_item_status_code ='shipped' ORDER BY order_item_id;
### TaskGenerate a SQL query to answer [QUESTION]List all the distinct product names, price and descriptions which are bought by female customers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all the distinct product names, price and descriptions which are bought by female customers.[/QUESTION][SQL]SELECT order_item_id, p.product_name, p.product_price, p.product_description FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id JOIN Orders ord ON oi.order_id = ord.order_id JOIN Customers cst ON ord.customer_id = cst.customer_id WHERE cst.gender_code = 'F' GROUP BY order_item_id, p.product_name, p.product_price, p.product_description;
### TaskGenerate a SQL query to answer [QUESTION]What are the different names, prices, and descriptions for all products bought by female customers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different names, prices, and descriptions for all products bought by female customers?[/QUESTION][SQL]SELECT order_item_id, product_name, product_price, product_description FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id WHERE EXISTS (SELECT customer_id FROM Customers c WHERE c.gender_code = 'F' AND c.customer_id = oi.order_id);
### TaskGenerate a SQL query to answer [QUESTION]What are invoices status of all the orders which have not been shipped?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are invoices status of all the orders which have not been shipped?[/QUESTION][SQL]SELECT order_item_id FROM Order_Items WHERE order_item_status_code = 'Not Shipped'
### TaskGenerate a SQL query to answer [QUESTION]What are the invoice statuses for all orderes that have not been shipped out yet?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the invoice statuses for all orderes that have not been shipped out yet?[/QUESTION][SQL]SELECT order_item_id, product_id, order_item_status_code FROM Order_Items WHERE order_item_status_code ='shipped'
### TaskGenerate a SQL query to answer [QUESTION]What are the total cost of all the orders? List the order id, date, and total cost.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the total cost of all the orders? List the order id, date, and total cost.[/QUESTION][SQL]SELECT order_item_id, date_order_placed, SUM(product_price) AS total_cost FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY order_id, date_order_placed;
### TaskGenerate a SQL query to answer [QUESTION]For each order, what is its id, date, and total amount paid?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each order, what is its id, date, and total amount paid?[/QUESTION][SQL]SELECT order_item_id, product_id, order_status_code FROM Order_Items;
### TaskGenerate a SQL query to answer [QUESTION]How many customers have placed any order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many customers have placed any order?[/QUESTION][SQL]SELECT order_item_id FROM Order_Items;
### TaskGenerate a SQL query to answer [QUESTION]How many different customers have ordered things?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different customers have ordered things?[/QUESTION][SQL]SELECT order_item_id FROM Order_Items;
### TaskGenerate a SQL query to answer [QUESTION]How many item states are there in the orders?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many item states are there in the orders?[/QUESTION][SQL]SELECT order_item_id, COUNT(DISTINCT order_item_status_code) AS number_of_states FROM Order_Items GROUP BY order_item_id;
### TaskGenerate a SQL query to answer [QUESTION]How many different item status codes are there listed in ordered items?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different item status codes are there listed in ordered items?[/QUESTION][SQL]SELECT order_item_id, COUNT(DISTINCT order_item_status_code) AS distinct_status_codes FROM Order_Items GROUP BY order_item_id ORDER BY order_item_id;
### TaskGenerate a SQL query to answer [QUESTION]How many different payment methods are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different payment methods are there?[/QUESTION][SQL]SELECT Customer_Payment_Methods.order_item_id, COUNT(DISTINCT Customer_Payment_Methods.payment_method_code) AS number_of_payment_methods FROM Customer_Payment_Methods GROUP BY Customer_Payment_Methods.order_item_id;
### TaskGenerate a SQL query to answer [QUESTION]How many different payment methods can customers choose from?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different payment methods can customers choose from?[/QUESTION][SQL]SELECT Customer_Payment_Methods.order_item_id, COUNT(DISTINCT Customer_Payment_Methods.payment_method_code) AS number_of_payment_methods FROM Customer_Payment_Methods GROUP BY Customer_Payment_Methods.order_item_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the login names and passwords of the customers whose phone number have the prefix '+12'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the login names and passwords of the customers whose phone number have the prefix '+12'?[/QUESTION][SQL]SELECT Customer_Payment_Methods.order_item_id, Customers.customer_first_name, Customers.customer_last_name, Customers.login_name, Customers.login_password FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id WHERE Customers.phone_number like '+12%'
### TaskGenerate a SQL query to answer [QUESTION]What are the usernames and passwords of all customers whose phone number starts with '+12'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the usernames and passwords of all customers whose phone number starts with '+12'?[/QUESTION][SQL]SELECT Customer_Payment_Methods.order_item_id, Customers.customer_first_name, Customers.customer_last_name, Customers.login_name, Customers.login_password FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id WHERE Customers.phone_number like '+12%'
### TaskGenerate a SQL query to answer [QUESTION]What are the product sizes of the products whose name has the substring 'Dell'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the product sizes of the products whose name has the substring 'Dell'?[/QUESTION][SQL]SELECT Products.order_item_id, Products.product_size FROM Products WHERE Products.product_name ilike '%Dell%' ORDER BY Products.product_size;
### TaskGenerate a SQL query to answer [QUESTION]What are the sizes of all products whose name includes the word 'Dell'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the sizes of all products whose name includes the word 'Dell'?[/QUESTION][SQL]SELECT shipment_id, product_size FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id WHERE LOWER(p.product_name) LIKE '%dell%' ORDER BY shipment_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the product price and the product size of the products whose price is above average?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the product price and the product size of the products whose price is above average?[/QUESTION][SQL]SELECT shipment_id, order_item_id, product_id, product_price, product_size FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id WHERE product_price > (SELECT AVG(product_price) FROM Products);
### TaskGenerate a SQL query to answer [QUESTION]What are the prices and sizes of all products whose price is above the mean?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the prices and sizes of all products whose price is above the mean?[/QUESTION][SQL]SELECT shipment_id, product_id, product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products);
### TaskGenerate a SQL query to answer [QUESTION]How many kinds of products have not been sold?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many kinds of products have not been sold?[/QUESTION][SQL]SELECT shipment_id FROM Shipments;
### TaskGenerate a SQL query to answer [QUESTION]What is the number of products that have not been ordered yet?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the number of products that have not been ordered yet?[/QUESTION][SQL]SELECT Products.order_item_id FROM Products WHERE Product_id NOT IN (SELECT Order_items.product_id FROM Order_items);
### TaskGenerate a SQL query to answer [QUESTION]How many customers do not have any payment method?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many customers do not have any payment method?[/QUESTION][SQL]SELECT Customer_Payment_Methods.order_item_id FROM Customers WHERE Customer_Payment_Methods.customer_id IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]How many customers do not have a listed payment method?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many customers do not have a listed payment method?[/QUESTION][SQL]SELECT Customer_Payment_Methods.order_item_id FROM Customers WHERE Customer_Payment_Methods.customer_id IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What are all the order status and all the dates of orders?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all the order status and all the dates of orders?[/QUESTION][SQL]SELECT order_item_id, product_id, order_item_status_code FROM Order_Items;
### TaskGenerate a SQL query to answer [QUESTION]What are the status codes and dates placed for all of the orders?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the status codes and dates placed for all of the orders?[/QUESTION][SQL]SELECT order_item_id, product_id, order_item_status_code FROM Order_Items;
### TaskGenerate a SQL query to answer [QUESTION]List the address, town and county information of the customers who live in the USA.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the address, town and county information of the customers who live in the USA.[/QUESTION][SQL]SELECT Customer_Payment_Methods.order_item_id, Customers.customer_id, Customers.address_line_1, Customers.town_city, Customers.county FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id WHERE Customers.country = 'USA'
### TaskGenerate a SQL query to answer [QUESTION]What are the addresses, towns, and county information for all customers who live in the United States?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the addresses, towns, and county information for all customers who live in the United States?[/QUESTION][SQL]SELECT Customer_Payment_Methods.order_item_id, Customers.customer_id, Customers.address_line_1, Customers.town_city, Customers.county FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id WHERE Customers.country = 'United States' ORDER BY Customers.customer_id;
### TaskGenerate a SQL query to answer [QUESTION]List all the pairs of buyer first names and product names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all the pairs of buyer first names and product names.[/QUESTION][SQL]SELECT order_item_id, customer_first_name, product_name FROM Order_Items JOIN Customers ON Order_Items.customer_id = Customers.customer_id JOIN Products ON Order_Items.product_id = Products.product_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the first names of all buyers and what products did they buy? List them in pairs.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the first names of all buyers and what products did they buy? List them in pairs.[/QUESTION][SQL]SELECT order_item_id, product_id FROM Order_Items;
### TaskGenerate a SQL query to answer [QUESTION]How many items are shipped?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many items are shipped?[/QUESTION][SQL]SELECT shipment_id, COUNT(order_item_id) AS total_items_shipped FROM Shipment_Items GROUP BY shipment_id ORDER BY total_items_shipped DESC;
### TaskGenerate a SQL query to answer [QUESTION]How many products have been shipped?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many products have been shipped?[/QUESTION][SQL]SELECT shipment_id, COUNT(DISTINCT order_item_id) AS total_products_shipped FROM Shipment_Items GROUP BY shipment_id ORDER BY total_products_shipped DESC;
### TaskGenerate a SQL query to answer [QUESTION]What is the product average price?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the product average price?[/QUESTION][SQL]SELECT shipment_id, AVG(p.product_price) AS average_product_price FROM Shipments sh JOIN Shipment_Items si ON sh.shipment_id = si.shipment_id JOIN Order_Items oi ON si.order_item_id = oi.order_item_id JOIN Products p ON oi.product_id = p.product_id GROUP BY sh.shipment_id ORDER BY sh.shipment_id;
### TaskGenerate a SQL query to answer [QUESTION]How much do the products cost on average?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How much do the products cost on average?[/QUESTION][SQL]SELECT shipment_id, AVG(p.product_price) AS average_product_price FROM Shipments sh JOIN Shipment_Items si ON sh.shipment_id = si.shipment_id JOIN Order_Items oi ON si.order_item_id = oi.order_item_id JOIN Products p ON oi.product_id = p.product_id GROUP BY sh.shipment_id ORDER BY sh.shipment_id;
### TaskGenerate a SQL query to answer [QUESTION]What is the average price of the products being ordered?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average price of the products being ordered?[/QUESTION][SQL]SELECT order_item_id, AVG(product_price) AS average_product_price FROM Order_Items GROUP BY order_item_id;
### TaskGenerate a SQL query to answer [QUESTION]What is the price of all products being ordered on average?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the price of all products being ordered on average?[/QUESTION][SQL]SELECT order_item_id, AVG(product_price) AS average_product_price FROM Order_Items JOIN Products ON order_items.product_id = products.product_id GROUP BY order_item_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the email address, town and county of the customers who are of the least common gender?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the email address, town and county of the customers who are of the least common gender?[/QUESTION][SQL]SELECT Customer_Payment_Methods.order_item_id, Customers.customer_first_name, Customers.customer_last_name, Customers.email_address, Customers.town_city, Customers.county FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id WHERE Customers.gender_code IN (SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY COUNT(*) ASC LIMIT 1);
### TaskGenerate a SQL query to answer [QUESTION]What are the email addresses, cities, and counties listed for all cusomters who are from the gender that orders less often?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the email addresses, cities, and counties listed for all cusomters who are from the gender that orders less often?[/QUESTION][SQL]SELECT Customer_Payment_Methods.order_item_id, Customers.email_address, Customers.town_city, Customers.county FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id WHERE Customers.gender_code IN (SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY COUNT(Orders.order_id) ASC LIMIT 1);
### TaskGenerate a SQL query to answer [QUESTION]List the order date of the orders who are placed by customers with at least 2 payment methods.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the order date of the orders who are placed by customers with at least 2 payment methods.[/QUESTION][SQL]SELECT order_item_id FROM Order_Items WHERE order_id IN (SELECT order_id FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customers c JOIN Customer_Payment_Methods cp ON c.customer_id = cp.customer_id GROUP BY c.customer_id HAVING COUNT(DISTINCT cp.payment_method_code) >= 2));
### TaskGenerate a SQL query to answer [QUESTION]What is the date of all orders that have been placed by customers with at least 2 payment methods?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the date of all orders that have been placed by customers with at least 2 payment methods?[/QUESTION][SQL]SELECT order_item_id FROM Order_Items WHERE order_id IN (SELECT order_id FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customers c JOIN Customer_Payment_Methods cp ON c.customer_id = cp.customer_id GROUP BY c.customer_id HAVING COUNT(DISTINCT cp.payment_method_code) >= 2));
### TaskGenerate a SQL query to answer [QUESTION]What is the most uncommon order status?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the most uncommon order status?[/QUESTION][SQL]SELECT order_item_id, COUNT(*) AS count FROM Order_Items GROUP BY order_item_id ORDER BY count ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the least common order status?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the least common order status?[/QUESTION][SQL]SELECT order_item_id, COUNT(*) AS count FROM Order_Items GROUP BY order_item_id ORDER BY count ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]For all the products sold for more than 3 times, list their id and description.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For all the products sold for more than 3 times, list their id and description.[/QUESTION][SQL]SELECT order_item_id, product_description FROM Order_Items JOIN Products ON order_item_id = product_id GROUP BY order_item_id, product_description HAVING COUNT(order_item_id) > 3;
### TaskGenerate a SQL query to answer [QUESTION]For all products sold more than 3 times, what are their ids and descriptions?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For all products sold more than 3 times, what are their ids and descriptions?[/QUESTION][SQL]SELECT order_item_id, product_id, product_description FROM Order_Items GROUP BY order_item_id, product_id, product_description HAVING COUNT(order_item_id) > 3;
### TaskGenerate a SQL query to answer [QUESTION]List the invoice dates and ids of the invoices causing at least 2 shipments.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the invoice dates and ids of the invoices causing at least 2 shipments.[/QUESTION][SQL]SELECT shipment_id, COUNT(*) AS number_of_shipments FROM Shipments GROUP BY shipment_id HAVING COUNT(*) >= 2;
### TaskGenerate a SQL query to answer [QUESTION]What are the dates and ids of the invoices that are related to at least 2 shipments?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the dates and ids of the invoices that are related to at least 2 shipments?[/QUESTION][SQL]SELECT shipment_id, invoice_number, shipment_date FROM Shipments GROUP BY shipment_id, invoice_number, shipment_date HAVING COUNT(DISTINCT invoice_number) >= 2;
### TaskGenerate a SQL query to answer [QUESTION]what are all shipment tracking numbers and shipment dates?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]what are all shipment tracking numbers and shipment dates?[/QUESTION][SQL]SELECT shipment_id, shipment_tracking_number, shipment_date FROM Shipments;
### TaskGenerate a SQL query to answer [QUESTION]What are the tracking numbers and dates for all shipments listed?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the tracking numbers and dates for all shipments listed?[/QUESTION][SQL]SELECT shipment_id, shipment_tracking_number, shipment_date FROM Shipments;
### TaskGenerate a SQL query to answer [QUESTION]What are the color, description and size of the products priced below the maximum price.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the color, description and size of the products priced below the maximum price.[/QUESTION][SQL]SELECT Products.order_item_id, Products.product_color, Products.product_description, Products.product_size FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id WHERE Products.product_price < (SELECT MAX(product_price) FROM Products);
### TaskGenerate a SQL query to answer [QUESTION]What are the colors, descriptions, and sizes for all products that are not at the maximum price?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the colors, descriptions, and sizes for all products that are not at the maximum price?[/QUESTION][SQL]SELECT Products.order_item_id, Products.product_color, Products.product_description, Products.product_size FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id WHERE Products.product_price < (SELECT MAX(product_price) FROM Products);
### TaskGenerate a SQL query to answer [QUESTION]Return the names of directors who are older than the average age.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "channel" ("Channel_ID" int,"Name" text,"Analogue_terrestrial_channel" text,"Digital_terrestrial_channel" text,"Internet" text,PRIMARY KEY ("Channel_ID"))CREATE TABLE "director" ("Director_ID" int,"Name" text,"Age" int,PRIMARY KEY ("Director_ID"))CREATE TABLE "program" ("Program_ID" int,"Start_Year" real,"Title" text,"Director_ID" int,"Channel_ID" int,PRIMARY KEY ("Program_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))CREATE TABLE "director_admin" ("Director_ID" int,"Channel_ID" int,"Is_first_director" bool,PRIMARY KEY ("Director_ID","Channel_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the names of directors who are older than the average age.[/QUESTION][SQL]SELECT director.Director_ID, director.Name FROM director WHERE director.Age > (SELECT AVG(Age) FROM director);
### TaskGenerate a SQL query to answer [QUESTION]Find the the name of the oldest director.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "channel" ("Channel_ID" int,"Name" text,"Analogue_terrestrial_channel" text,"Digital_terrestrial_channel" text,"Internet" text,PRIMARY KEY ("Channel_ID"))CREATE TABLE "director" ("Director_ID" int,"Name" text,"Age" int,PRIMARY KEY ("Director_ID"))CREATE TABLE "program" ("Program_ID" int,"Start_Year" real,"Title" text,"Director_ID" int,"Channel_ID" int,PRIMARY KEY ("Program_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))CREATE TABLE "director_admin" ("Director_ID" int,"Channel_ID" int,"Is_first_director" bool,PRIMARY KEY ("Director_ID","Channel_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the the name of the oldest director.[/QUESTION][SQL]SELECT director.Director_ID, director.Name FROM director ORDER BY director.Age ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How many channels have the word 'bbc' in their internet link?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "channel" ("Channel_ID" int,"Name" text,"Analogue_terrestrial_channel" text,"Digital_terrestrial_channel" text,"Internet" text,PRIMARY KEY ("Channel_ID"))CREATE TABLE "director" ("Director_ID" int,"Name" text,"Age" int,PRIMARY KEY ("Director_ID"))CREATE TABLE "program" ("Program_ID" int,"Start_Year" real,"Title" text,"Director_ID" int,"Channel_ID" int,PRIMARY KEY ("Program_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))CREATE TABLE "director_admin" ("Director_ID" int,"Channel_ID" int,"Is_first_director" bool,PRIMARY KEY ("Director_ID","Channel_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many channels have the word 'bbc' in their internet link?[/QUESTION][SQL]SELECT channel.Channel_ID FROM channel WHERE LOWER(channel.Internet) LIKE '%bbc%' GROUP BY Channel_ID;
### TaskGenerate a SQL query to answer [QUESTION]How many different digital terrestrial channels are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "channel" ("Channel_ID" int,"Name" text,"Analogue_terrestrial_channel" text,"Digital_terrestrial_channel" text,"Internet" text,PRIMARY KEY ("Channel_ID"))CREATE TABLE "director" ("Director_ID" int,"Name" text,"Age" int,PRIMARY KEY ("Director_ID"))CREATE TABLE "program" ("Program_ID" int,"Start_Year" real,"Title" text,"Director_ID" int,"Channel_ID" int,PRIMARY KEY ("Program_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))CREATE TABLE "director_admin" ("Director_ID" int,"Channel_ID" int,"Is_first_director" bool,PRIMARY KEY ("Director_ID","Channel_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different digital terrestrial channels are there?[/QUESTION][SQL]SELECT director_admin.Channel_ID, COUNT(DISTINCT director_admin.Channel_ID) AS number_of_channels FROM director_admin WHERE director_admin.Is_first_director = TRUE GROUP BY director_admin.Channel_ID ORDER BY number_of_channels DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List all program titles in the order of starting year. List the most recent one first.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "channel" ("Channel_ID" int,"Name" text,"Analogue_terrestrial_channel" text,"Digital_terrestrial_channel" text,"Internet" text,PRIMARY KEY ("Channel_ID"))CREATE TABLE "director" ("Director_ID" int,"Name" text,"Age" int,PRIMARY KEY ("Director_ID"))CREATE TABLE "program" ("Program_ID" int,"Start_Year" real,"Title" text,"Director_ID" int,"Channel_ID" int,PRIMARY KEY ("Program_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))CREATE TABLE "director_admin" ("Director_ID" int,"Channel_ID" int,"Is_first_director" bool,PRIMARY KEY ("Director_ID","Channel_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all program titles in the order of starting year. List the most recent one first.[/QUESTION][SQL]SELECT program.Director_ID, program.Channel_ID, program.Start_Year, program.Title FROM program ORDER BY program.Start_Year DESC;
### TaskGenerate a SQL query to answer [QUESTION]Which director is in charge of the most programs?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "channel" ("Channel_ID" int,"Name" text,"Analogue_terrestrial_channel" text,"Digital_terrestrial_channel" text,"Internet" text,PRIMARY KEY ("Channel_ID"))CREATE TABLE "director" ("Director_ID" int,"Name" text,"Age" int,PRIMARY KEY ("Director_ID"))CREATE TABLE "program" ("Program_ID" int,"Start_Year" real,"Title" text,"Director_ID" int,"Channel_ID" int,PRIMARY KEY ("Program_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))CREATE TABLE "director_admin" ("Director_ID" int,"Channel_ID" int,"Is_first_director" bool,PRIMARY KEY ("Director_ID","Channel_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which director is in charge of the most programs?[/QUESTION][SQL]SELECT director.Director_ID, COUNT(program.Program_ID) AS program_count FROM director JOIN program ON director.Director_ID = program.Director_ID GROUP BY director.Director_ID ORDER BY program_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the name and age of the director who is in charge of the most programs?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "channel" ("Channel_ID" int,"Name" text,"Analogue_terrestrial_channel" text,"Digital_terrestrial_channel" text,"Internet" text,PRIMARY KEY ("Channel_ID"))CREATE TABLE "director" ("Director_ID" int,"Name" text,"Age" int,PRIMARY KEY ("Director_ID"))CREATE TABLE "program" ("Program_ID" int,"Start_Year" real,"Title" text,"Director_ID" int,"Channel_ID" int,PRIMARY KEY ("Program_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))CREATE TABLE "director_admin" ("Director_ID" int,"Channel_ID" int,"Is_first_director" bool,PRIMARY KEY ("Director_ID","Channel_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name and age of the director who is in charge of the most programs?[/QUESTION][SQL]SELECT director.Director_ID, director.Name, COUNT(program.Program_ID) AS num_programs FROM program JOIN director ON program.Director_ID = director.Director_ID GROUP BY director.Director_ID, director.Name ORDER BY num_programs DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Return the title of the program that began most recently.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "channel" ("Channel_ID" int,"Name" text,"Analogue_terrestrial_channel" text,"Digital_terrestrial_channel" text,"Internet" text,PRIMARY KEY ("Channel_ID"))CREATE TABLE "director" ("Director_ID" int,"Name" text,"Age" int,PRIMARY KEY ("Director_ID"))CREATE TABLE "program" ("Program_ID" int,"Start_Year" real,"Title" text,"Director_ID" int,"Channel_ID" int,PRIMARY KEY ("Program_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))CREATE TABLE "director_admin" ("Director_ID" int,"Channel_ID" int,"Is_first_director" bool,PRIMARY KEY ("Director_ID","Channel_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the title of the program that began most recently.[/QUESTION][SQL]SELECT program.Director_ID, program.Channel_ID, program.Start_Year, program.Title FROM program ORDER BY Start_Year DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the name and website link of the channels that have more than one program.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "channel" ("Channel_ID" int,"Name" text,"Analogue_terrestrial_channel" text,"Digital_terrestrial_channel" text,"Internet" text,PRIMARY KEY ("Channel_ID"))CREATE TABLE "director" ("Director_ID" int,"Name" text,"Age" int,PRIMARY KEY ("Director_ID"))CREATE TABLE "program" ("Program_ID" int,"Start_Year" real,"Title" text,"Director_ID" int,"Channel_ID" int,PRIMARY KEY ("Program_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))CREATE TABLE "director_admin" ("Director_ID" int,"Channel_ID" int,"Is_first_director" bool,PRIMARY KEY ("Director_ID","Channel_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name and website link of the channels that have more than one program.[/QUESTION][SQL]SELECT channel.Channel_ID, channel.Name FROM channel JOIN (SELECT Program_Channel_ID, COUNT(Program_ID) AS num_programs FROM program GROUP BY Program_Channel_ID HAVING COUNT(Program_ID) > 1) AS p ON channel.Channel_ID = p.Program_Channel_ID;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of programs for each channel. Return the name of each channel as well.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "channel" ("Channel_ID" int,"Name" text,"Analogue_terrestrial_channel" text,"Digital_terrestrial_channel" text,"Internet" text,PRIMARY KEY ("Channel_ID"))CREATE TABLE "director" ("Director_ID" int,"Name" text,"Age" int,PRIMARY KEY ("Director_ID"))CREATE TABLE "program" ("Program_ID" int,"Start_Year" real,"Title" text,"Director_ID" int,"Channel_ID" int,PRIMARY KEY ("Program_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))CREATE TABLE "director_admin" ("Director_ID" int,"Channel_ID" int,"Is_first_director" bool,PRIMARY KEY ("Director_ID","Channel_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of programs for each channel. Return the name of each channel as well.[/QUESTION][SQL]SELECT channel.Channel_ID, chanel.Name, COUNT(program.Program_ID) AS program_count FROM program JOIN channel ON program.Channel_ID = channel.Channel_ID GROUP BY channel.Channel_ID, channel.Name ORDER BY program_count DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of channels that do not run any program.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "channel" ("Channel_ID" int,"Name" text,"Analogue_terrestrial_channel" text,"Digital_terrestrial_channel" text,"Internet" text,PRIMARY KEY ("Channel_ID"))CREATE TABLE "director" ("Director_ID" int,"Name" text,"Age" int,PRIMARY KEY ("Director_ID"))CREATE TABLE "program" ("Program_ID" int,"Start_Year" real,"Title" text,"Director_ID" int,"Channel_ID" int,PRIMARY KEY ("Program_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))CREATE TABLE "director_admin" ("Director_ID" int,"Channel_ID" int,"Is_first_director" bool,PRIMARY KEY ("Director_ID","Channel_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of channels that do not run any program.[/QUESTION][SQL]SELECT channel.Channel_ID FROM channel WHERE channel.Channel_ID NOT IN (SELECT p.Channel_ID FROM program p) GROUP BY channel.Channel_ID ORDER BY COUNT(channel.Channel_ID) NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the director who is in the "Dracula" program?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "channel" ("Channel_ID" int,"Name" text,"Analogue_terrestrial_channel" text,"Digital_terrestrial_channel" text,"Internet" text,PRIMARY KEY ("Channel_ID"))CREATE TABLE "director" ("Director_ID" int,"Name" text,"Age" int,PRIMARY KEY ("Director_ID"))CREATE TABLE "program" ("Program_ID" int,"Start_Year" real,"Title" text,"Director_ID" int,"Channel_ID" int,PRIMARY KEY ("Program_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))CREATE TABLE "director_admin" ("Director_ID" int,"Channel_ID" int,"Is_first_director" bool,PRIMARY KEY ("Director_ID","Channel_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the director who is in the "Dracula" program?[/QUESTION][SQL]SELECT director.Director_ID, director.Name FROM director JOIN program ON director.Director_ID = program.Director_ID WHERE LOWER(program.Title) = 'dracula';
### TaskGenerate a SQL query to answer [QUESTION]Find the name and internet web of the channel that is directed by the most directors.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "channel" ("Channel_ID" int,"Name" text,"Analogue_terrestrial_channel" text,"Digital_terrestrial_channel" text,"Internet" text,PRIMARY KEY ("Channel_ID"))CREATE TABLE "director" ("Director_ID" int,"Name" text,"Age" int,PRIMARY KEY ("Director_ID"))CREATE TABLE "program" ("Program_ID" int,"Start_Year" real,"Title" text,"Director_ID" int,"Channel_ID" int,PRIMARY KEY ("Program_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))CREATE TABLE "director_admin" ("Director_ID" int,"Channel_ID" int,"Is_first_director" bool,PRIMARY KEY ("Director_ID","Channel_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name and internet web of the channel that is directed by the most directors.[/QUESTION][SQL]SELECT channel.Channel_ID, channel.Name, COUNT(director_admin.Director_ID) AS num_directors FROM director_admin JOIN channel ON director_admin.Channel_ID = channel.Channel_ID GROUP BY channel.Channel_ID, channel.Name ORDER BY num_directors DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the directors whose age is between 30 and 60.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "channel" ("Channel_ID" int,"Name" text,"Analogue_terrestrial_channel" text,"Digital_terrestrial_channel" text,"Internet" text,PRIMARY KEY ("Channel_ID"))CREATE TABLE "director" ("Director_ID" int,"Name" text,"Age" int,PRIMARY KEY ("Director_ID"))CREATE TABLE "program" ("Program_ID" int,"Start_Year" real,"Title" text,"Director_ID" int,"Channel_ID" int,PRIMARY KEY ("Program_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))CREATE TABLE "director_admin" ("Director_ID" int,"Channel_ID" int,"Is_first_director" bool,PRIMARY KEY ("Director_ID","Channel_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the directors whose age is between 30 and 60.[/QUESTION][SQL]SELECT director.Director_ID, director.Name FROM director WHERE director.Age BETWEEN 30 AND 60 ORDER BY director.Director_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]give me the name of channels that have both a director younger than 40 and a director older than 60.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "channel" ("Channel_ID" int,"Name" text,"Analogue_terrestrial_channel" text,"Digital_terrestrial_channel" text,"Internet" text,PRIMARY KEY ("Channel_ID"))CREATE TABLE "director" ("Director_ID" int,"Name" text,"Age" int,PRIMARY KEY ("Director_ID"))CREATE TABLE "program" ("Program_ID" int,"Start_Year" real,"Title" text,"Director_ID" int,"Channel_ID" int,PRIMARY KEY ("Program_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))CREATE TABLE "director_admin" ("Director_ID" int,"Channel_ID" int,"Is_first_director" bool,PRIMARY KEY ("Director_ID","Channel_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]give me the name of channels that have both a director younger than 40 and a director older than 60.[/QUESTION][SQL]SELECT channel.Channel_ID, channel.Name FROM channel JOIN program ON channel.Channel_ID = program.Channel_ID JOIN director ON program.Director_ID = director.Director_ID WHERE (director.Age < 40 AND EXISTS (SELECT 1 FROM director d2 WHERE d2.Director_ID!= director.Director_ID AND d2.Age > 60)) OR (director.Age > 60 AND EXISTS (SELECT 1 FROM director d2 WHERE d2.Director_ID!= director.Director_ID AND d2.Age < 40)) GROUP BY channel.Channel_ID, channel.Name;
### TaskGenerate a SQL query to answer [QUESTION]Find the id and name of the channel that is not directed by Hank Baskett.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "channel" ("Channel_ID" int,"Name" text,"Analogue_terrestrial_channel" text,"Digital_terrestrial_channel" text,"Internet" text,PRIMARY KEY ("Channel_ID"))CREATE TABLE "director" ("Director_ID" int,"Name" text,"Age" int,PRIMARY KEY ("Director_ID"))CREATE TABLE "program" ("Program_ID" int,"Start_Year" real,"Title" text,"Director_ID" int,"Channel_ID" int,PRIMARY KEY ("Program_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))CREATE TABLE "director_admin" ("Director_ID" int,"Channel_ID" int,"Is_first_director" bool,PRIMARY KEY ("Director_ID","Channel_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the id and name of the channel that is not directed by Hank Baskett.[/QUESTION][SQL]SELECT channel.Channel_ID, chanel.Name FROM channel JOIN director_admin ON channel.Channel_ID = director_admin.Channel_ID WHERE NOT EXISTS (SELECT 1 FROM director WHERE director.Name = 'Hank Baskett')
### TaskGenerate a SQL query to answer [QUESTION]How many radios are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "city_channel" ("ID" int,"City" text,"Station_name" text,"Owned_Since" real,"Affiliation" text,PRIMARY KEY ("ID"))CREATE TABLE "radio" ("Radio_ID" int,"Transmitter" text,"Radio_MHz" text,"2FM_MHz" text,"RnaG_MHz" text,"Lyric_FM_MHz" text,"ERP_kW" text,PRIMARY KEY ("Radio_ID"))CREATE TABLE "tv_show" ("tv_show_ID" int,"tv_show_name" text,"Sub_tittle" text,"Next_show_name" text,"Original_Airdate" text,PRIMARY KEY ("tv_show_ID"))CREATE TABLE "city_channel_radio" ("City_channel_ID" int,"Radio_ID" int,"Is_online" bool,PRIMARY KEY ("City_channel_ID","Radio_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`))CREATE TABLE "city_channel_tv_show" ("City_channel_ID" int,"tv_show_ID" int,"Is_online" bool,"Is_free" bool,PRIMARY KEY ("City_channel_ID","tv_show_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many radios are there?[/QUESTION][SQL]SELECT radio.City_channel_ID, COUNT(radio.Radio_ID) AS number_of_radios FROM radio JOIN city_channel_radio ON radio.Radio_ID = city_channel_radio.Radio_ID GROUP BY radio.City_channel_ID ORDER BY number_of_radios DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the transmitters of radios in ascending order of erp kw.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "city_channel" ("ID" int,"City" text,"Station_name" text,"Owned_Since" real,"Affiliation" text,PRIMARY KEY ("ID"))CREATE TABLE "radio" ("Radio_ID" int,"Transmitter" text,"Radio_MHz" text,"2FM_MHz" text,"RnaG_MHz" text,"Lyric_FM_MHz" text,"ERP_kW" text,PRIMARY KEY ("Radio_ID"))CREATE TABLE "tv_show" ("tv_show_ID" int,"tv_show_name" text,"Sub_tittle" text,"Next_show_name" text,"Original_Airdate" text,PRIMARY KEY ("tv_show_ID"))CREATE TABLE "city_channel_radio" ("City_channel_ID" int,"Radio_ID" int,"Is_online" bool,PRIMARY KEY ("City_channel_ID","Radio_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`))CREATE TABLE "city_channel_tv_show" ("City_channel_ID" int,"tv_show_ID" int,"Is_online" bool,"Is_free" bool,PRIMARY KEY ("City_channel_ID","tv_show_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the transmitters of radios in ascending order of erp kw.[/QUESTION][SQL]SELECT radio.tv_show_ID, radio.radio_MHz, radio.rnaG_MHz, radio.lyric_FM_MHz, radio.erp_kW FROM radio ORDER BY radio.erp_kW ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and original air dates of tv shows?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "city_channel" ("ID" int,"City" text,"Station_name" text,"Owned_Since" real,"Affiliation" text,PRIMARY KEY ("ID"))CREATE TABLE "radio" ("Radio_ID" int,"Transmitter" text,"Radio_MHz" text,"2FM_MHz" text,"RnaG_MHz" text,"Lyric_FM_MHz" text,"ERP_kW" text,PRIMARY KEY ("Radio_ID"))CREATE TABLE "tv_show" ("tv_show_ID" int,"tv_show_name" text,"Sub_tittle" text,"Next_show_name" text,"Original_Airdate" text,PRIMARY KEY ("tv_show_ID"))CREATE TABLE "city_channel_radio" ("City_channel_ID" int,"Radio_ID" int,"Is_online" bool,PRIMARY KEY ("City_channel_ID","Radio_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`))CREATE TABLE "city_channel_tv_show" ("City_channel_ID" int,"tv_show_ID" int,"Is_online" bool,"Is_free" bool,PRIMARY KEY ("City_channel_ID","tv_show_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and original air dates of tv shows?[/QUESTION][SQL]SELECT tv_show.tv_show_ID, tv_show.tv_show_name, tv_show.Original_Airdate FROM tv_show ORDER BY tv_show.tv_show_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the station names of city channels whose affiliation is not "ABC".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "city_channel" ("ID" int,"City" text,"Station_name" text,"Owned_Since" real,"Affiliation" text,PRIMARY KEY ("ID"))CREATE TABLE "radio" ("Radio_ID" int,"Transmitter" text,"Radio_MHz" text,"2FM_MHz" text,"RnaG_MHz" text,"Lyric_FM_MHz" text,"ERP_kW" text,PRIMARY KEY ("Radio_ID"))CREATE TABLE "tv_show" ("tv_show_ID" int,"tv_show_name" text,"Sub_tittle" text,"Next_show_name" text,"Original_Airdate" text,PRIMARY KEY ("tv_show_ID"))CREATE TABLE "city_channel_radio" ("City_channel_ID" int,"Radio_ID" int,"Is_online" bool,PRIMARY KEY ("City_channel_ID","Radio_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`))CREATE TABLE "city_channel_tv_show" ("City_channel_ID" int,"tv_show_ID" int,"Is_online" bool,"Is_free" bool,PRIMARY KEY ("City_channel_ID","tv_show_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the station names of city channels whose affiliation is not "ABC".[/QUESTION][SQL]SELECT city_channel.City_channel_ID, ciity_channel.Station_name FROM ciity_channel WHERE ciity_channel.Affiliation!= 'ABC' ORDER BY ciity_channel.City;
### TaskGenerate a SQL query to answer [QUESTION]Show the transmitters of radios whose ERP is bigger than 150 or smaller than 30.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "city_channel" ("ID" int,"City" text,"Station_name" text,"Owned_Since" real,"Affiliation" text,PRIMARY KEY ("ID"))CREATE TABLE "radio" ("Radio_ID" int,"Transmitter" text,"Radio_MHz" text,"2FM_MHz" text,"RnaG_MHz" text,"Lyric_FM_MHz" text,"ERP_kW" text,PRIMARY KEY ("Radio_ID"))CREATE TABLE "tv_show" ("tv_show_ID" int,"tv_show_name" text,"Sub_tittle" text,"Next_show_name" text,"Original_Airdate" text,PRIMARY KEY ("tv_show_ID"))CREATE TABLE "city_channel_radio" ("City_channel_ID" int,"Radio_ID" int,"Is_online" bool,PRIMARY KEY ("City_channel_ID","Radio_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`))CREATE TABLE "city_channel_tv_show" ("City_channel_ID" int,"tv_show_ID" int,"Is_online" bool,"Is_free" bool,PRIMARY KEY ("City_channel_ID","tv_show_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the transmitters of radios whose ERP is bigger than 150 or smaller than 30.[/QUESTION][SQL]SELECT radio.tv_show_ID FROM radio WHERE (radio.erp_kW > 150 OR radio.erp_kW < 30)
### TaskGenerate a SQL query to answer [QUESTION]What is the transmitter of the radio with the largest ERP_kW?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "city_channel" ("ID" int,"City" text,"Station_name" text,"Owned_Since" real,"Affiliation" text,PRIMARY KEY ("ID"))CREATE TABLE "radio" ("Radio_ID" int,"Transmitter" text,"Radio_MHz" text,"2FM_MHz" text,"RnaG_MHz" text,"Lyric_FM_MHz" text,"ERP_kW" text,PRIMARY KEY ("Radio_ID"))CREATE TABLE "tv_show" ("tv_show_ID" int,"tv_show_name" text,"Sub_tittle" text,"Next_show_name" text,"Original_Airdate" text,PRIMARY KEY ("tv_show_ID"))CREATE TABLE "city_channel_radio" ("City_channel_ID" int,"Radio_ID" int,"Is_online" bool,PRIMARY KEY ("City_channel_ID","Radio_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`))CREATE TABLE "city_channel_tv_show" ("City_channel_ID" int,"tv_show_ID" int,"Is_online" bool,"Is_free" bool,PRIMARY KEY ("City_channel_ID","tv_show_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the transmitter of the radio with the largest ERP_kW?[/QUESTION][SQL]SELECT radio.tv_show_ID FROM tv_show WHERE tv_show.tv_show_name = 'Radio' AND tv_show.sub_tittle = 'Radio' ORDER BY tv_show.original_airdate DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the average ERP across all radios?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "city_channel" ("ID" int,"City" text,"Station_name" text,"Owned_Since" real,"Affiliation" text,PRIMARY KEY ("ID"))CREATE TABLE "radio" ("Radio_ID" int,"Transmitter" text,"Radio_MHz" text,"2FM_MHz" text,"RnaG_MHz" text,"Lyric_FM_MHz" text,"ERP_kW" text,PRIMARY KEY ("Radio_ID"))CREATE TABLE "tv_show" ("tv_show_ID" int,"tv_show_name" text,"Sub_tittle" text,"Next_show_name" text,"Original_Airdate" text,PRIMARY KEY ("tv_show_ID"))CREATE TABLE "city_channel_radio" ("City_channel_ID" int,"Radio_ID" int,"Is_online" bool,PRIMARY KEY ("City_channel_ID","Radio_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`))CREATE TABLE "city_channel_tv_show" ("City_channel_ID" int,"tv_show_ID" int,"Is_online" bool,"Is_free" bool,PRIMARY KEY ("City_channel_ID","tv_show_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average ERP across all radios?[/QUESTION][SQL]SELECT radio.City_channel_ID, AVG(radio.ERP_kW) AS average_erp FROM radio JOIN city_channel_radio ON radio.Radio_ID = city_channel_radio.Radio_ID GROUP BY city_channel_radio.City_channel_ID;
### TaskGenerate a SQL query to answer [QUESTION]Show the different affiliations of city channels and the number of city channels with each affiliation.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "city_channel" ("ID" int,"City" text,"Station_name" text,"Owned_Since" real,"Affiliation" text,PRIMARY KEY ("ID"))CREATE TABLE "radio" ("Radio_ID" int,"Transmitter" text,"Radio_MHz" text,"2FM_MHz" text,"RnaG_MHz" text,"Lyric_FM_MHz" text,"ERP_kW" text,PRIMARY KEY ("Radio_ID"))CREATE TABLE "tv_show" ("tv_show_ID" int,"tv_show_name" text,"Sub_tittle" text,"Next_show_name" text,"Original_Airdate" text,PRIMARY KEY ("tv_show_ID"))CREATE TABLE "city_channel_radio" ("City_channel_ID" int,"Radio_ID" int,"Is_online" bool,PRIMARY KEY ("City_channel_ID","Radio_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`))CREATE TABLE "city_channel_tv_show" ("City_channel_ID" int,"tv_show_ID" int,"Is_online" bool,"Is_free" bool,PRIMARY KEY ("City_channel_ID","tv_show_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the different affiliations of city channels and the number of city channels with each affiliation.[/QUESTION][SQL]SELECT city_channel.City_channel_ID, citiy_channel.Affiliation FROM city_channel GROUP BY citiy_channel.Affiliation ORDER BY citiy_channel.Affiliation;
### TaskGenerate a SQL query to answer [QUESTION]Please show the most common affiliation for city channels.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "city_channel" ("ID" int,"City" text,"Station_name" text,"Owned_Since" real,"Affiliation" text,PRIMARY KEY ("ID"))CREATE TABLE "radio" ("Radio_ID" int,"Transmitter" text,"Radio_MHz" text,"2FM_MHz" text,"RnaG_MHz" text,"Lyric_FM_MHz" text,"ERP_kW" text,PRIMARY KEY ("Radio_ID"))CREATE TABLE "tv_show" ("tv_show_ID" int,"tv_show_name" text,"Sub_tittle" text,"Next_show_name" text,"Original_Airdate" text,PRIMARY KEY ("tv_show_ID"))CREATE TABLE "city_channel_radio" ("City_channel_ID" int,"Radio_ID" int,"Is_online" bool,PRIMARY KEY ("City_channel_ID","Radio_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`))CREATE TABLE "city_channel_tv_show" ("City_channel_ID" int,"tv_show_ID" int,"Is_online" bool,"Is_free" bool,PRIMARY KEY ("City_channel_ID","tv_show_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please show the most common affiliation for city channels.[/QUESTION][SQL]SELECT city_channel.City_channel_ID, citi_channel.Affiliation FROM city_channel citi_channel JOIN (SELECT City_channel_ID, COUNT(*) AS frequency FROM city_channel GROUP BY City_channel_ID ORDER BY frequency DESC LIMIT 1) AS max_frequency ON citi_channel.City_channel_ID = max_frequency.City_channel_ID;
### TaskGenerate a SQL query to answer [QUESTION]List the affiliations shared by more than three city channels.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "city_channel" ("ID" int,"City" text,"Station_name" text,"Owned_Since" real,"Affiliation" text,PRIMARY KEY ("ID"))CREATE TABLE "radio" ("Radio_ID" int,"Transmitter" text,"Radio_MHz" text,"2FM_MHz" text,"RnaG_MHz" text,"Lyric_FM_MHz" text,"ERP_kW" text,PRIMARY KEY ("Radio_ID"))CREATE TABLE "tv_show" ("tv_show_ID" int,"tv_show_name" text,"Sub_tittle" text,"Next_show_name" text,"Original_Airdate" text,PRIMARY KEY ("tv_show_ID"))CREATE TABLE "city_channel_radio" ("City_channel_ID" int,"Radio_ID" int,"Is_online" bool,PRIMARY KEY ("City_channel_ID","Radio_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`))CREATE TABLE "city_channel_tv_show" ("City_channel_ID" int,"tv_show_ID" int,"Is_online" bool,"Is_free" bool,PRIMARY KEY ("City_channel_ID","tv_show_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the affiliations shared by more than three city channels.[/QUESTION][SQL]SELECT city_channel.City_channel_ID, citi_channel.Affiliation FROM city_channel JOIN (SELECT City_channel_ID, COUNT(*) AS affiliation_count FROM city_channel GROUP BY City_channel_ID HAVING COUNT(*) > 3) AS subquery ON city_channel.ID = subquery.City_channel_ID;
### TaskGenerate a SQL query to answer [QUESTION]Show the cities and station names of city channels in ascending alphabetical order of station name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "city_channel" ("ID" int,"City" text,"Station_name" text,"Owned_Since" real,"Affiliation" text,PRIMARY KEY ("ID"))CREATE TABLE "radio" ("Radio_ID" int,"Transmitter" text,"Radio_MHz" text,"2FM_MHz" text,"RnaG_MHz" text,"Lyric_FM_MHz" text,"ERP_kW" text,PRIMARY KEY ("Radio_ID"))CREATE TABLE "tv_show" ("tv_show_ID" int,"tv_show_name" text,"Sub_tittle" text,"Next_show_name" text,"Original_Airdate" text,PRIMARY KEY ("tv_show_ID"))CREATE TABLE "city_channel_radio" ("City_channel_ID" int,"Radio_ID" int,"Is_online" bool,PRIMARY KEY ("City_channel_ID","Radio_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`))CREATE TABLE "city_channel_tv_show" ("City_channel_ID" int,"tv_show_ID" int,"Is_online" bool,"Is_free" bool,PRIMARY KEY ("City_channel_ID","tv_show_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the cities and station names of city channels in ascending alphabetical order of station name.[/QUESTION][SQL]SELECT city_channel.City_channel_ID, city_channel.Station_name, city_channel.City FROM city_channel ORDER BY city_channel.Station_name ASC;
### TaskGenerate a SQL query to answer [QUESTION]Show the transmitters of radios and the cities of the channels they are associated with.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "city_channel" ("ID" int,"City" text,"Station_name" text,"Owned_Since" real,"Affiliation" text,PRIMARY KEY ("ID"))CREATE TABLE "radio" ("Radio_ID" int,"Transmitter" text,"Radio_MHz" text,"2FM_MHz" text,"RnaG_MHz" text,"Lyric_FM_MHz" text,"ERP_kW" text,PRIMARY KEY ("Radio_ID"))CREATE TABLE "tv_show" ("tv_show_ID" int,"tv_show_name" text,"Sub_tittle" text,"Next_show_name" text,"Original_Airdate" text,PRIMARY KEY ("tv_show_ID"))CREATE TABLE "city_channel_radio" ("City_channel_ID" int,"Radio_ID" int,"Is_online" bool,PRIMARY KEY ("City_channel_ID","Radio_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`))CREATE TABLE "city_channel_tv_show" ("City_channel_ID" int,"tv_show_ID" int,"Is_online" bool,"Is_free" bool,PRIMARY KEY ("City_channel_ID","tv_show_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the transmitters of radios and the cities of the channels they are associated with.[/QUESTION][SQL]SELECT radio.tv_show_ID, radio.transmitter, city_channel.city FROM radio JOIN city_channel ON radio.radio_ID = city_channel.ID;
### TaskGenerate a SQL query to answer [QUESTION]Show the transmitters of radios and the station names of the channels they are associated with in descending order of the ERP of the radios.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "city_channel" ("ID" int,"City" text,"Station_name" text,"Owned_Since" real,"Affiliation" text,PRIMARY KEY ("ID"))CREATE TABLE "radio" ("Radio_ID" int,"Transmitter" text,"Radio_MHz" text,"2FM_MHz" text,"RnaG_MHz" text,"Lyric_FM_MHz" text,"ERP_kW" text,PRIMARY KEY ("Radio_ID"))CREATE TABLE "tv_show" ("tv_show_ID" int,"tv_show_name" text,"Sub_tittle" text,"Next_show_name" text,"Original_Airdate" text,PRIMARY KEY ("tv_show_ID"))CREATE TABLE "city_channel_radio" ("City_channel_ID" int,"Radio_ID" int,"Is_online" bool,PRIMARY KEY ("City_channel_ID","Radio_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`))CREATE TABLE "city_channel_tv_show" ("City_channel_ID" int,"tv_show_ID" int,"Is_online" bool,"Is_free" bool,PRIMARY KEY ("City_channel_ID","tv_show_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the transmitters of radios and the station names of the channels they are associated with in descending order of the ERP of the radios.[/QUESTION][SQL]SELECT radio.tv_show_ID, radio.transmitter, city_channel.station_name FROM radio JOIN city_channel ON radio.city_channel_ID = city_channel.ID ORDER BY radio.erp DESC;
### TaskGenerate a SQL query to answer [QUESTION]Show the transmitters of the radios and the number of city channels they are associated with.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "city_channel" ("ID" int,"City" text,"Station_name" text,"Owned_Since" real,"Affiliation" text,PRIMARY KEY ("ID"))CREATE TABLE "radio" ("Radio_ID" int,"Transmitter" text,"Radio_MHz" text,"2FM_MHz" text,"RnaG_MHz" text,"Lyric_FM_MHz" text,"ERP_kW" text,PRIMARY KEY ("Radio_ID"))CREATE TABLE "tv_show" ("tv_show_ID" int,"tv_show_name" text,"Sub_tittle" text,"Next_show_name" text,"Original_Airdate" text,PRIMARY KEY ("tv_show_ID"))CREATE TABLE "city_channel_radio" ("City_channel_ID" int,"Radio_ID" int,"Is_online" bool,PRIMARY KEY ("City_channel_ID","Radio_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`))CREATE TABLE "city_channel_tv_show" ("City_channel_ID" int,"tv_show_ID" int,"Is_online" bool,"Is_free" bool,PRIMARY KEY ("City_channel_ID","tv_show_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the transmitters of the radios and the number of city channels they are associated with.[/QUESTION][SQL]SELECT radio.tv_show_ID, COUNT(city_channel.ID) AS number_of_city_channels FROM radio JOIN city_channel ON radio.city_channel_ID = city_channel.ID GROUP BY radio.tv_sho_id
### TaskGenerate a SQL query to answer [QUESTION]Show the distinct transmitters of radios that are not associated with any city channel.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "city_channel" ("ID" int,"City" text,"Station_name" text,"Owned_Since" real,"Affiliation" text,PRIMARY KEY ("ID"))CREATE TABLE "radio" ("Radio_ID" int,"Transmitter" text,"Radio_MHz" text,"2FM_MHz" text,"RnaG_MHz" text,"Lyric_FM_MHz" text,"ERP_kW" text,PRIMARY KEY ("Radio_ID"))CREATE TABLE "tv_show" ("tv_show_ID" int,"tv_show_name" text,"Sub_tittle" text,"Next_show_name" text,"Original_Airdate" text,PRIMARY KEY ("tv_show_ID"))CREATE TABLE "city_channel_radio" ("City_channel_ID" int,"Radio_ID" int,"Is_online" bool,PRIMARY KEY ("City_channel_ID","Radio_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`))CREATE TABLE "city_channel_tv_show" ("City_channel_ID" int,"tv_show_ID" int,"Is_online" bool,"Is_free" bool,PRIMARY KEY ("City_channel_ID","tv_show_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the distinct transmitters of radios that are not associated with any city channel.[/QUESTION][SQL]SELECT radio.tv_show_ID FROM radio WHERE NOT EXISTS (SELECT 1 FROM city_channel_radio WHERE radio.radio_id = city_channel_radio.radio_id)
### TaskGenerate a SQL query to answer [QUESTION]What is the model of the vehicle with maximum top speed whose power is higher than 6000?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the model of the vehicle with maximum top speed whose power is higher than 6000?[/QUESTION][SQL]SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle WHERE vehicle.Power > 6000 ORDER BY vehicle.Top_Speed DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Of vehicles with power over 6000, return the model of the vehicle with the greatest top speed.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Of vehicles with power over 6000, return the model of the vehicle with the greatest top speed.[/QUESTION][SQL]SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle WHERE vehicle.Power > 6000 ORDER BY vehicle.Top_Speed DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the drivers who are citizens of the 'United States'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the drivers who are citizens of the 'United States'?[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Name FROM driver WHERE LOWER(driver.Citizenship) = 'united states' ORDER BY driver.Driver_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return the names of drivers with citizenship from the United States.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the names of drivers with citizenship from the United States.[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Name FROM driver WHERE LOWER(driver.Citizenship) = 'united states' ORDER BY driver.Driver_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many vehicles has a driver driven at most, and what is the driver id of the driver who has driven this many vehicles?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many vehicles has a driver driven at most, and what is the driver id of the driver who has driven this many vehicles?[/QUESTION][SQL]SELECT driver.Driver_ID, COUNT(*) AS number_of_vehicles FROM vehicle_driver GROUP BY drive_r ORDER BY number_of_vehicles DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the id of the driver who has driven the most vehicles, and how many vehicles is this?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the id of the driver who has driven the most vehicles, and how many vehicles is this?[/QUESTION][SQL]SELECT driver.Driver_ID, COUNT(*) AS num_vehicles FROM vehicle_driver JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID GROUP BY driveer.Driver_ID ORDER BY num_vehicles DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the maximum and average power for the vehicles manufactured by 'Zhuzhou'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the maximum and average power for the vehicles manufactured by 'Zhuzhou'?[/QUESTION][SQL]SELECT vehicle.Vehicle_ID, MAX(vehicle.Power) AS max_power, AVG(vehicle.Power) AS avg_power FROM vehicle WHERE LOWER(vehicle.Builder) = 'zhuzhou' GROUP BY vehicle.Vehicle_ID ORDER BY vehicle.Vehicle_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return the maximum and average power for the vehicles built by Zhuzhou.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the maximum and average power for the vehicles built by Zhuzhou.[/QUESTION][SQL]SELECT vehicle.Vehicle_ID, MAX(vehicle.Power) AS max_power, AVG(vehicle.Power) AS avg_power FROM vehicle WHERE LOWER(vehicle.Builder) = 'zhuzhou' GROUP BY vehicle.Vehicle_ID ORDER BY vehicle.Vehicle_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the id of the vehicle driven for the least times for the vehicles ever used?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the id of the vehicle driven for the least times for the vehicles ever used?[/QUESTION][SQL]SELECT vehicle.Vehicle_ID FROM vehicle_driver WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(DISTINCT Driver_ID) ASC LIMIT 1);
### TaskGenerate a SQL query to answer [QUESTION]Return the id of the vehicle that has been driven the fewest times.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the id of the vehicle that has been driven the fewest times.[/QUESTION][SQL]SELECT vehicle.Vehicle_ID FROM vehicle_driver WHERE (SELECT COUNT(*) FROM vehicle_driver) = (SELECT COUNT(*) FROM vehicle_driver WHERE vehicle_id = vehicle.Vehicle_ID);
### TaskGenerate a SQL query to answer [QUESTION]What is the top speed and power of the vehicle manufactured in the year of 1996?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the top speed and power of the vehicle manufactured in the year of 1996?[/QUESTION][SQL]SELECT vehicle.Vehicle_ID, MAX(vehicle.Top_Speed) AS Top_Speed, MAX(vehicle.Power) AS Power FROM vehicle WHERE vehicle.Build_Year = '1996' GROUP BY vehicle.Vehicle_ID ORDER BY vehicle.Vehicle_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return the top speed and power of the vehicle that was built in the year 1996.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the top speed and power of the vehicle that was built in the year 1996.[/QUESTION][SQL]SELECT vehicle.Vehicle_ID, MAX(vehicle.Top_Speed) AS Top_Speed, MAX(vehicle.Power) AS Power FROM vehicle WHERE vehicle.Build_Year = '1996' GROUP BY vehicle.Vehicle_ID ORDER BY Top_Speed DESC, Power DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the build year, model name and builder of the vehicles?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the build year, model name and builder of the vehicles?[/QUESTION][SQL]SELECT vehicle.Vehicle_ID, CAST(v.build_year AS integer) AS Build_Year, v.model, v.builder FROM vehicle v ORDER BY v.vehicle_id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Give the build year, model, and builder of each vehicle.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the build year, model, and builder of each vehicle.[/QUESTION][SQL]SELECT vehicle.Vehicle_ID, CAST(v.build_year AS integer) AS Build_Year, v.model, v.builder FROM vehicle v
### TaskGenerate a SQL query to answer [QUESTION]How many drivers have driven vehicles built in 2012?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many drivers have driven vehicles built in 2012?[/QUESTION][SQL]SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT vehicle_driver.Driver_ID FROM vehicle_driver JOIN vehicle ON vehicle_vehicle_id = vehicle.Vehicle_ID WHERE CAST(vehicle.Build_Year AS integer) = 2012);
### TaskGenerate a SQL query to answer [QUESTION]Count the number of different drivers who have driven vehicles built in 2012.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of different drivers who have driven vehicles built in 2012.[/QUESTION][SQL]SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT vehicle_driver.Driver_ID FROM vehicle_driver JOIN vehicle ON vehicle_vehicle_id = vehicle.Vehicle_ID WHERE vehicle.Build_Year = '2012') GROUP BY driver.Driver_ID ORDER BY COUNT(DISTINCT vehicle_vehicle_id) DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many drivers have raced in 'NASCAR'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many drivers have raced in 'NASCAR'?[/QUESTION][SQL]SELECT driver.Driver_ID FROM driver WHERE LOWER(driver.Racing_Series) = 'nascar' GROUP BY driver.Driver_ID;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of drivers who have raced in NASCAR.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of drivers who have raced in NASCAR.[/QUESTION][SQL]SELECT driver.Driver_ID FROM driver WHERE LOWER(driver.Racing_Series) = 'nascar' GROUP BY driver.Driver_ID;
### TaskGenerate a SQL query to answer [QUESTION]What is the average top speed of vehicles?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average top speed of vehicles?[/QUESTION][SQL]SELECT vehicle.Vehicle_ID, AVG(vehicle.Top_Speed) AS average_top_speed FROM vehicle GROUP BY vehicle.Vehicle_ID ORDER BY average_top_speed DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return the average top speed across all vehicles.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the average top speed across all vehicles.[/QUESTION][SQL]SELECT vehicle.Vehicle_ID, AVG(vehicle.Top_Speed) AS Average_Top_Speed FROM vehicle GROUP BY vehicle.Vehicle_ID ORDER BY vehicle.Vehicle_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct driver names who have driven vehicles with power more than 5000?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct driver names who have driven vehicles with power more than 5000?[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Name FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Power > 5000 GROUP BY driver.Driver_ID, driver.Name ORDER BY driver.Driver_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return the names of drivers who have driven vehicles with power over 5000.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the names of drivers who have driven vehicles with power over 5000.[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Name FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Power > 5000;
### TaskGenerate a SQL query to answer [QUESTION]Which car models have total production larger than 100 or top speed higher than 150?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which car models have total production larger than 100 or top speed higher than 150?[/QUESTION][SQL]SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle WHERE (CAST(vehicle.Total_Production AS INTEGER) > 100 OR vehicle.Top_Speed > 150);
### TaskGenerate a SQL query to answer [QUESTION]Give the models of cars that have a total production of over 100 or a top speed over 150.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the models of cars that have a total production of over 100 or a top speed over 150.[/QUESTION][SQL]SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle WHERE (CAST(vehicle.Total_Production AS INTEGER) > 100 OR CAST(vehicle.Top_Speed AS INTEGER) > 150);
### TaskGenerate a SQL query to answer [QUESTION]What are the model names and build year of the cars with 'DJ' in its model name?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the model names and build year of the cars with 'DJ' in its model name?[/QUESTION][SQL]SELECT vehicle.Vehicle_ID, vehicle.Model, CAST(vehicle.Build_Year AS integer) AS Build_Year FROM vehicle WHERE LOWER(vehicle.Model) LIKE '%dj%' ORDER BY vehicle. Vehicle_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return the model and build year of cars that include "DJ" in their model names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the model and build year of cars that include "DJ" in their model names.[/QUESTION][SQL]SELECT vehicle.Vehicle_ID, vehicle.Model, CAST(vehicle.Build_Year AS integer) AS Build_Year FROM vehicle WHERE LOWER(vehicle.Model) LIKE '%dj%' ORDER BY vehicle.Vehicle_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the models which have not been driven by any drivers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the models which have not been driven by any drivers?[/QUESTION][SQL]SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle LEFT JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle_driver.Vehicle_ID IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]Return the models of vehicles that have never been driven.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the models of vehicles that have never been driven.[/QUESTION][SQL]SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle LEFT JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle_driver.Vehicle_ID IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What are the vehicle ids and models of the vehicle which have been driven by two drivers or been manufactured by 'Ziyang'.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the vehicle ids and models of the vehicle which have been driven by two drivers or been manufactured by 'Ziyang'.[/QUESTION][SQL]SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle JOIN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) >= 2) AS d ON vehicle.Vehicle_ID = d.Vehicle_ID WHERE vehicle.Builder ilike '%Ziyang%' ORDER BY vehicle.Vehicle_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return the ids and models of vehicles that have been driven by exactly two drivers or built by Ziyang.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the ids and models of vehicles that have been driven by exactly two drivers or built by Ziyang.[/QUESTION][SQL]SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle JOIN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) = 2) AS subquery ON vehicle.Vehicle_ID = subquery.Vehicle_ID UNION SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle WHERE LOWER(vehicle.Builder) = 'ziyang' ORDER BY vehicle.Vehicle_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the vehicle ids and models which have been driven by more than 2 drivers or been driven by the driver named 'Jeff Gordon'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the vehicle ids and models which have been driven by more than 2 drivers or been driven by the driver named 'Jeff Gordon'?[/QUESTION][SQL]SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle JOIN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) > 2 UNION SELECT Vehicle_ID FROM vehicle_driver WHERE Driver_ID IN (SELECT Driver_ID FROM driver WHERE Name = 'Jeff Gordon')) AS subquery ON vehicle.Vehicle_ID = subquery.Vehicle_ID ORDER BY vehicle.Vehicle_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return the ids and models of vehicles that have been driven by more than 2 drivers or been driven by the Jeff Gordon.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the ids and models of vehicles that have been driven by more than 2 drivers or been driven by the Jeff Gordon.[/QUESTION][SQL]SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle JOIN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) > 2 UNION SELECT Vehicle_ID FROM vehicle_driver WHERE Driver_ID IN (SELECT Driver_ID FROM driver WHERE Name = 'Jeff Gordon')) AS subquery ON vehicle.Vehicle_ID = subquery.Vehicle_ID ORDER BY vehicle.Vehicle_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many vehicles have maximum top speed?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many vehicles have maximum top speed?[/QUESTION][SQL]SELECT vehicle.Vehicle_ID FROM vehicle WHERE vehicle.Top_Speed = (SELECT MAX(vehicle.Top_Speed) FROM vehicle);
### TaskGenerate a SQL query to answer [QUESTION]Count the number of vehicles that have a top speed equal to the maximum across all vehicles.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of vehicles that have a top speed equal to the maximum across all vehicles.[/QUESTION][SQL]SELECT vehicle.Vehicle_ID, COUNT(*) AS total_vehicles FROM vehicle WHERE vehicle.Top_Speed = (SELECT MAX(vehicle.Top_Speed) FROM vehicle) GROUP BY vehicle.Vehicle_ID;
### TaskGenerate a SQL query to answer [QUESTION]Show all driver names in the alphabetical order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all driver names in the alphabetical order.[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Name FROM driver ORDER BY driver.Name ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of drivers, returned in alphbetical order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of drivers, returned in alphbetical order?[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Name FROM driver ORDER BY driver.Name ASC;
### TaskGenerate a SQL query to answer [QUESTION]How many drivers have been racing in each racing series?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many drivers have been racing in each racing series?[/QUESTION][SQL]SELECT driver.Driver_ID, COUNT(*) AS number_of_drivers FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID GROUP BY driver.Racing_Series ORDER BY number_of_drivers DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of drivers that have raced in each series.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of drivers that have raced in each series.[/QUESTION][SQL]SELECT driver.Driver_ID, COUNT(*) AS total_drivers FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID GROUP BY driver.Racing_Series ORDER BY total_drivers DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the name and citizenship of the drivers who have driven the vehicle model 'DJ1'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the name and citizenship of the drivers who have driven the vehicle model 'DJ1'?[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Name, driver.Citizenship FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE LOWER(vehicle.Model) = 'dj1' ORDER BY driver.Driver_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return the names and citizenships of drivers who have driven the vehicle with the model 'DJ1'.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the names and citizenships of drivers who have driven the vehicle with the model 'DJ1'.[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Name, driver.Citizenship FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE LOWER(vehicle.Model) = 'dj1' ORDER BY driver.Driver_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many drivers have not driven any cars?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many drivers have not driven any cars?[/QUESTION][SQL]SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID NOT IN (SELECT vehicle_driver.Driver_ID FROM vehicle_driver) GROUP BY driver.Driver_ID;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of drivers who have not driven any vehicles.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of drivers who have not driven any vehicles.[/QUESTION][SQL]SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID NOT IN (SELECT vehicle_driver.Driver_ID FROM vehicle_driver) GROUP BY driver.Driver_ID;
### TaskGenerate a SQL query to answer [QUESTION]How many exams are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many exams are there?[/QUESTION][SQL]SELECT Exams.Student_Answer_ID FROM Student_Answers;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of exams.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of exams.[/QUESTION][SQL]SELECT Exams.Student_Answer_ID, COUNT(*) AS Number_of_Exams FROM Student_Answers GROUP BY Exam_ID;
### TaskGenerate a SQL query to answer [QUESTION]List the distinct subject code of exams in ascending alphabetical order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the distinct subject code of exams in ascending alphabetical order.[/QUESTION][SQL]SELECT Exams.Satisfactory_YN FROM Exams WHERE Exam_ID IN (SELECT Exam_ID FROM Questions_in_Exams);
### TaskGenerate a SQL query to answer [QUESTION]Give me an alphabetically ordered list of the distinct subject code for exams.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give me an alphabetically ordered list of the distinct subject code for exams.[/QUESTION][SQL]SELECT Exams.Satisfactory_YN, Exam.Name, Exam.Subject FROM Exam;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and dates of the exams with subject code that is not "Database"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and dates of the exams with subject code that is not "Database"?[/QUESTION][SQL]SELECT Exams.Student_Answer_ID, Exams.Exam_Name, Exams.Exam_Date FROM Exams JOIN Student_Answers ON Exams.Exam_ID = Student_Answers.Exam_ID WHERE Exams.Subject_Code!= 'Database' ORDER BY Exams.Exam_Date DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find the exams whose subject code is not "Database". What are the exam dates and exam names?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the exams whose subject code is not "Database". What are the exam dates and exam names?[/QUESTION][SQL]SELECT Exams.Student_Answer_ID, Exams.Exam_Date, Exams.Exam_Name FROM Exams WHERE Exams.Subject_Code!= 'Database' ORDER BY Exams.Exam_Date DESC;
### TaskGenerate a SQL query to answer [QUESTION]List the dates of the exams with subject code containing the word "data", in descending order of dates.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the dates of the exams with subject code containing the word "data", in descending order of dates.[/QUESTION][SQL]SELECT Exams.Student_Answer_ID, Exams.Exam_Date FROM Exams JOIN Student_Answers ON Exams.Student_Answer_ID = Student_Answers.Student_Answer_ID WHERE Exams.Subject_Code LIKE '%data%' ORDER BY Exams.Exam_Date DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the dates of the exams whose subject code contains the substring "data"? Return them in descending order of dates.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the dates of the exams whose subject code contains the substring "data"? Return them in descending order of dates.[/QUESTION][SQL]SELECT Exams.Student_Answer_ID, Exams.Exam_Date FROM Exams JOIN Student_Answers ON Exams.Exam_ID = Student_Answers.Exam_ID WHERE Exams.Subject_Code LIKE '%data%' ORDER BY Exams.Exam_Date DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the type of questions and their counts?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the type of questions and their counts?[/QUESTION][SQL]SELECT Questions.Student_Answer_ID, COUNT(*) AS total_answers FROM Student_Answers GROUP BY Student_Answer_ID;
### TaskGenerate a SQL query to answer [QUESTION]For each question type, return its type code and its count of occurrence.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each question type, return its type code and its count of occurrence.[/QUESTION][SQL]SELECT Questions_in_Exams.Student_Answer_ID, COUNT(*) AS Count FROM Questions_in_Exams JOIN Student_Answers ON Questions_in_Exams.Question_ID = Student_Answers.Question_ID GROUP BY Questions_in_Exams.Student_Answer_ID;
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct student answer texts that received comments "Normal"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct student answer texts that received comments "Normal"?[/QUESTION][SQL]SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' GROUP BY Student_Answer_Text;
### TaskGenerate a SQL query to answer [QUESTION]List all the distinct student answer texts to which comments "Normal" were given?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all the distinct student answer texts to which comments "Normal" were given?[/QUESTION][SQL]SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' GROUP BY Student_Answer_Text;
### TaskGenerate a SQL query to answer [QUESTION]How many different comments are there for student answers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different comments are there for student answers?[/QUESTION][SQL]SELECT Satisfactory_YN, COUNT(DISTINCT Comments) AS distinct_comments FROM Student_Answers GROUP BY Satisfactory_YN ORDER BY distinct_comments DESC;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of different comments for student answers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of different comments for student answers.[/QUESTION][SQL]SELECT Satisfactory_YN, COUNT(DISTINCT Comments) AS distinct_comments_count FROM Student_Answers GROUP BY Satisfactory_YN ORDER BY distinct_comments_count DESC;
### TaskGenerate a SQL query to answer [QUESTION]List all the student answer texts in descending order of count.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all the student answer texts in descending order of count.[/QUESTION][SQL]SELECT Student_Answer_Text, COUNT(*) AS Count FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY Count DESC;
### TaskGenerate a SQL query to answer [QUESTION]Sort the student answer texts in descending order of their frequency of occurrence.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Sort the student answer texts in descending order of their frequency of occurrence.[/QUESTION][SQL]SELECT Student_Answer_Text, COUNT(*) AS Frequency FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY Frequency DESC;
### TaskGenerate a SQL query to answer [QUESTION]Please show the first names of students and the dates of their answers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please show the first names of students and the dates of their answers.[/QUESTION][SQL]SELECT Satisfactory_YN, s.First_Name, sa.Date_of_Answer FROM Student_Answers sa JOIN Students s ON sa.Student_ID = s.Student_ID;
### TaskGenerate a SQL query to answer [QUESTION]For each student answer, find the first name of the student and the date of the answer.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each student answer, find the first name of the student and the date of the answer.[/QUESTION][SQL]SELECT Satisfactory_YN, s.First_Name, sa.Date_of_Answer FROM Student_Answers sa JOIN Students s ON sa.Student_ID = s.Student_ID;
### TaskGenerate a SQL query to answer [QUESTION]Please show the email addresses of students and the dates of their answers in descending order of dates.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please show the email addresses of students and the dates of their answers in descending order of dates.[/QUESTION][SQL]SELECT Satisfactory_YN, Student_Answer_Text, Date_of_Answer, Email_Adress FROM Student_Answers JOIN Students ON Student_ID = Student_ID ORDER BY Date_of_Answer DESC;
### TaskGenerate a SQL query to answer [QUESTION]For each student answer, find the email address of the student and the date of the answer. Sort them in descending order of dates.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each student answer, find the email address of the student and the date of the answer. Sort them in descending order of dates.[/QUESTION][SQL]SELECT Satisfactory_YN, s.Email_Adress, sa.Date_of_Answer FROM Student_Answers sa JOIN Students s ON sa.Student_ID = s.Student_ID ORDER BY Date_of_Answer DESC;
### TaskGenerate a SQL query to answer [QUESTION]Please show the least common assessment for students.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please show the least common assessment for students.[/QUESTION][SQL]SELECT Assessment FROM Student_Assessments WHERE Assessment IN (SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1);
### TaskGenerate a SQL query to answer [QUESTION]Which assessment has the smallest frequency count?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which assessment has the smallest frequency count?[/QUESTION][SQL]SELECT Assessment, COUNT(*) AS Frequency FROM Student_Assessments GROUP BY Assessment ORDER BY Frequency ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Please show the first names of the students that have at least two answer records.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please show the first names of the students that have at least two answer records.[/QUESTION][SQL]SELECT Satisfactory_YN, COUNT(*) AS number_of_answers FROM Student_Answers GROUP BY Satisfactory_YN HAVING COUNT(*) >= 2;
### TaskGenerate a SQL query to answer [QUESTION]Which students have 2 or more answer records? Give me their first names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which students have 2 or more answer records? Give me their first names.[/QUESTION][SQL]SELECT Satisfactory_YN, COUNT(*) AS number_of_answers FROM Student_Answers GROUP BY Satisfactory_YN HAVING COUNT(*) >= 2;
### TaskGenerate a SQL query to answer [QUESTION]What is the most common valid answer text?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the most common valid answer text?[/QUESTION][SQL]SELECT Valid_Answer_ID, Valid_Answer_Text FROM Valid_Answers WHERE Valid_Answer_ID IN (SELECT Valid_Answer_ID FROM Valid_Answers GROUP BY Valid_Answer_ID ORDER BY COUNT(*) DESC LIMIT 1);
### TaskGenerate a SQL query to answer [QUESTION]Find the valid answer text that appeared most frequently.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the valid answer text that appeared most frequently.[/QUESTION][SQL]SELECT Valid_Answer_ID, COUNT(*) AS Frequency FROM Valid_Answers GROUP BY Valid_Answer_ID ORDER BY Frequency DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List the last names of the students whose gender is not "M".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the last names of the students whose gender is not "M".[/QUESTION][SQL]SELECT Satisfactory_YN FROM Students WHERE Gender_MFU!= 'M' ORDER BY Last_Name;
### TaskGenerate a SQL query to answer [QUESTION]What are the last names of the students with gender other than "M"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the last names of the students with gender other than "M"?[/QUESTION][SQL]SELECT Satisfactory_YN FROM Student_Answers WHERE Student_ID IN (SELECT Student_ID FROM Students WHERE Gender_MFU!= 'M') ORDER BY Satisfactory_YN;
### TaskGenerate a SQL query to answer [QUESTION]List each gender and the corresponding number of students.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List each gender and the corresponding number of students.[/QUESTION][SQL]SELECT Satisfactory_YN, COUNT(*) AS Number_of_Students FROM Student_Answers GROUP BY Satisfactory_YN;
### TaskGenerate a SQL query to answer [QUESTION]For each gender, return the gender code and the number of students who identify as that gender.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each gender, return the gender code and the number of students who identify as that gender.[/QUESTION][SQL]SELECT Satisfactory_YN, COUNT(*) AS Number_of_students FROM Student_Answers GROUP BY Satisfactory_YN;
### TaskGenerate a SQL query to answer [QUESTION]List the last names of the students whose gender is "F" or "M".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the last names of the students whose gender is "F" or "M".[/QUESTION][SQL]SELECT Satisfactory_YN FROM Student_Answers WHERE Student_ID IN (SELECT Student_ID FROM Students WHERE Gender_MFU = 'F' OR Gender_MFU = 'M') ORDER BY Student_ID;
### TaskGenerate a SQL query to answer [QUESTION]Which students identify their gender as "F" or "M"? Give me their last names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which students identify their gender as "F" or "M"? Give me their last names.[/QUESTION][SQL]SELECT Satisfactory_YN FROM Students WHERE Gender_MFU IN ('F', 'M')
### TaskGenerate a SQL query to answer [QUESTION]List the first names of the students who do not have any answers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the first names of the students who do not have any answers.[/QUESTION][SQL]SELECT Satisfactory_YN FROM Student_Answers WHERE Satisfactory_YN IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]Which students do not have any answers? Find their first names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which students do not have any answers? Find their first names.[/QUESTION][SQL]SELECT Satisfactory_YN FROM Student_Answers WHERE Satisfactory_YN IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]Show the student answer texts that received both "Normal" and "Absent" as comments.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the student answer texts that received both "Normal" and "Absent" as comments.[/QUESTION][SQL]SELECT Student_Answer_Text FROM Student_Answers WHERE Comments LIKE '%Normal%' AND Comments LIKE '%Absent%';
### TaskGenerate a SQL query to answer [QUESTION]Which student answer texts were given both "Normal" and "Absent" as comments?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which student answer texts were given both "Normal" and "Absent" as comments?[/QUESTION][SQL]SELECT Student_Answer_Text FROM Student_Answers WHERE Comments IN ('Normal', 'Absent');
### TaskGenerate a SQL query to answer [QUESTION]Show the types of questions that have at least three questions.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the types of questions that have at least three questions.[/QUESTION][SQL]SELECT Questions.Student_Answer_ID, COUNT(Question_ID) AS number_of_questions FROM Questions JOIN Questions_in_Exams ON Questions.Question_ID = Questions_in_Exams.Question_ID GROUP BY Questions.Student_Answer_ID HAVING COUNT(Question_ID) >= 3 ORDER BY number_of_questions DESC;
### TaskGenerate a SQL query to answer [QUESTION]Which types of questions have 3 or more questions? Return the questions type code.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which types of questions have 3 or more questions? Return the questions type code.[/QUESTION][SQL]SELECT Questions.Student_Answer_ID FROM Questions WHERE Questions.Type_of_Question_Code IN (SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(Question_ID) >= 3);
### TaskGenerate a SQL query to answer [QUESTION]Show all information on students.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all information on students.[/QUESTION][SQL]SELECT Student_Answer_ID, First_Name, Middle_Name, Last_Name FROM Student_Answers JOIN Students ON Student_Answers.Student_ID = Students.Student_ID;
### TaskGenerate a SQL query to answer [QUESTION]What is al the available information of each student?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is al the available information of each student?[/QUESTION][SQL]SELECT Student_Answer_ID, Exam_ID, Question_ID, Student_ID, Date_of_Answer, Comments, Satisfactory_YN, Student_Answer_Text FROM Student_Answers;
### TaskGenerate a SQL query to answer [QUESTION]How many addresses do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many addresses do we have?[/QUESTION][SQL]SELECT Addresses.order_id FROM Addresses;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of addresses.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of addresses.[/QUESTION][SQL]SELECT Addresses.order_id, COUNT(*) AS total_addresses FROM Addresses JOIN Customers ON Addresses.address_id = Customers.address_id GROUP BY Addresses.order_id;
### TaskGenerate a SQL query to answer [QUESTION]List all address ids and address details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all address ids and address details.[/QUESTION][SQL]SELECT Addresses.order_id, Addresses.address_details FROM Addresses JOIN Customers ON Addresses.address_id = Customers.address_id;
### TaskGenerate a SQL query to answer [QUESTION]What are all the address ids and address details?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all the address ids and address details?[/QUESTION][SQL]SELECT Addresses.order_id, Addresses.address_details FROM Addresses JOIN Customers ON Addresses.address_id = Customers.address_id;
### TaskGenerate a SQL query to answer [QUESTION]How many products do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many products do we have?[/QUESTION][SQL]SELECT product_id FROM Products;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of products.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of products.[/QUESTION][SQL]SELECT product_id FROM Products;
### TaskGenerate a SQL query to answer [QUESTION]Show all product ids, product type codes, and product name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all product ids, product type codes, and product name.[/QUESTION][SQL]SELECT product_id, product_type_code, product_name FROM Products;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids, type codes, and names for all products?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids, type codes, and names for all products?[/QUESTION][SQL]SELECT product_id, product_type_code, product_name FROM Products;
### TaskGenerate a SQL query to answer [QUESTION]What is the price for the product with name Monitor?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the price for the product with name Monitor?[/QUESTION][SQL]SELECT product_id, product_price FROM Products WHERE LOWER(product_name) ='monitor';
### TaskGenerate a SQL query to answer [QUESTION]Give the price of the Monitor product.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the price of the Monitor product.[/QUESTION][SQL]SELECT product_id, product_price FROM Products WHERE LOWER(product_name) ='monitor';
### TaskGenerate a SQL query to answer [QUESTION]Show the minimum, average, maximum price for all products.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the minimum, average, maximum price for all products.[/QUESTION][SQL]SELECT product_id, MIN(product_price) AS min_price, AVG(product_price) AS avg_price, MAX(product_price) AS max_price FROM Products GROUP BY product_id
### TaskGenerate a SQL query to answer [QUESTION]What are the minimum, average, and maximum prices across all products?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the minimum, average, and maximum prices across all products?[/QUESTION][SQL]SELECT product_id, MIN(product_price) AS min_price, AVG(product_price) AS avg_price, MAX(product_price) AS max_price FROM Products GROUP BY product_id ORDER BY product_id;
### TaskGenerate a SQL query to answer [QUESTION]What is the average price for products with type Clothes?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average price for products with type Clothes?[/QUESTION][SQL]SELECT product_id, AVG(product_price) AS average_price FROM Products WHERE product_type_code = 'Clothes' GROUP BY product_id;
### TaskGenerate a SQL query to answer [QUESTION]Return the average price of Clothes.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the average price of Clothes.[/QUESTION][SQL]SELECT product_id, AVG(product_price) AS average_price FROM Products WHERE product_type_code = 'Clothes' GROUP BY product_id;
### TaskGenerate a SQL query to answer [QUESTION]How many hardware type products do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many hardware type products do we have?[/QUESTION][SQL]SELECT product_id FROM Products WHERE product_type_code = 'hardware';
### TaskGenerate a SQL query to answer [QUESTION]Count the number of products of the type Hardware.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of products of the type Hardware.[/QUESTION][SQL]SELECT product_id FROM Products WHERE product_type_code = 'Hardware';
### TaskGenerate a SQL query to answer [QUESTION]Show all product names with price higher than the average.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all product names with price higher than the average.[/QUESTION][SQL]SELECT product_id, product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products);
### TaskGenerate a SQL query to answer [QUESTION]What are the names of products that have a price above the average for all products.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of products that have a price above the average for all products.[/QUESTION][SQL]SELECT product_id, product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products);
### TaskGenerate a SQL query to answer [QUESTION]Show all hardware product names with price higher than the average price of hardware type products.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all hardware product names with price higher than the average price of hardware type products.[/QUESTION][SQL]SELECT product_id, product_name FROM Products WHERE product_type_code = 'hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'hardware');
### TaskGenerate a SQL query to answer [QUESTION]What are the names of Hardware product with prices above the average price of Hardware products.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of Hardware product with prices above the average price of Hardware products.[/QUESTION][SQL]SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware');
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the most expensive product with type Clothes?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the most expensive product with type Clothes?[/QUESTION][SQL]SELECT product_id, product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the name of the most expensive Clothes product.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the name of the most expensive Clothes product.[/QUESTION][SQL]SELECT product_id, product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the product id and product name for the cheapest Hardware type product?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the product id and product name for the cheapest Hardware type product?[/QUESTION][SQL]SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the id and name of the cheapest Hardware product.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the id and name of the cheapest Hardware product.[/QUESTION][SQL]SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List all product names in descending order of price.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all product names in descending order of price.[/QUESTION][SQL]SELECT product_id, product_name, product_price FROM Products ORDER BY product_price DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the products, sorted by descending price?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the products, sorted by descending price?[/QUESTION][SQL]SELECT product_id, product_name, product_price FROM Products ORDER BY product_price DESC;
### TaskGenerate a SQL query to answer [QUESTION]Show all hardware type products in ascending order of price.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all hardware type products in ascending order of price.[/QUESTION][SQL]SELECT product_id, product_name, product_price FROM Products WHERE product_type_code = 'hardware' ORDER BY product_price ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all Hardware products, sorted by price ascending?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all Hardware products, sorted by price ascending?[/QUESTION][SQL]SELECT product_id, product_name, product_price FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC;
### TaskGenerate a SQL query to answer [QUESTION]List all product type codes and the number of products in each type.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all product type codes and the number of products in each type.[/QUESTION][SQL]SELECT product_id, COUNT(*) AS total_products FROM Products GROUP BY product_id ORDER BY total_products DESC;
### TaskGenerate a SQL query to answer [QUESTION]How many products are there for each product type?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many products are there for each product type?[/QUESTION][SQL]SELECT product_id, COUNT(*) AS number_of_products FROM Products GROUP BY product_id ORDER BY number_of_products DESC;
### TaskGenerate a SQL query to answer [QUESTION]Show all product type codes and the average price for each type.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all product type codes and the average price for each type.[/QUESTION][SQL]SELECT product_id, AVG(product_price) AS average_price FROM Products GROUP BY product_id ORDER BY product_id;
### TaskGenerate a SQL query to answer [QUESTION]What is the average price of products for each product type?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average price of products for each product type?[/QUESTION][SQL]SELECT product_id, AVG(product_price) AS average_product_price FROM Products GROUP BY product_id ORDER BY product_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the product type code with at least two products?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the product type code with at least two products?[/QUESTION][SQL]SELECT product_id, COUNT(*) AS number_of_products FROM Products GROUP BY product_id HAVING COUNT(*) >= 2 ORDER BY product_id;
### TaskGenerate a SQL query to answer [QUESTION]Give the product type codes of product types that have two or more products.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the product type codes of product types that have two or more products.[/QUESTION][SQL]SELECT product_id, COUNT(*) AS number_of_products FROM Products GROUP BY product_id HAVING COUNT(*) >= 2 ORDER BY product_id;
### TaskGenerate a SQL query to answer [QUESTION]What is the product type code with most number of products?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the product type code with most number of products?[/QUESTION][SQL]SELECT product_id, COUNT(*) AS total_products FROM Products GROUP BY product_id ORDER BY total_products DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the most frequent product type code?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the most frequent product type code?[/QUESTION][SQL]SELECT product_id, COUNT(*) AS frequency FROM Products GROUP BY product_id ORDER BY frequency DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How many customers do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many customers do we have?[/QUESTION][SQL]SELECT Customer_Orders.order_id, COUNT(DISTINCT Customer_Orders.customer_id) AS number_of_customers FROM Customer_Orders GROUP BY order_id;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of customers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of customers.[/QUESTION][SQL]SELECT Customer_Orders.order_id, COUNT(DISTINCT Customers.customer_id) AS total_customers FROM Customer_Orders JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id GROUP BY Customer_Orders.order_id;
### TaskGenerate a SQL query to answer [QUESTION]Show all customer ids and customer names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all customer ids and customer names.[/QUESTION][SQL]SELECT Customer_Orders.order_id, Customers.customer_id, Customers.customer_name FROM Customer_Orders JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids and names of all customers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids and names of all customers?[/QUESTION][SQL]SELECT Customer_Orders.order_id, Customers.customer_name FROM Customer_Orders JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id;
### TaskGenerate a SQL query to answer [QUESTION]What is the customer address, customer phone, and customer email for Jeromy?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the customer address, customer phone, and customer email for Jeromy?[/QUESTION][SQL]SELECT Customer_Orders.order_id, Customers.customer_address, Customers.customer_phone, Customers.customer_email FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id WHERE Customers.customer_name ilike '%Jeromy%' ORDER BY Customer_Orders.order_id DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the address, phone, and email for customers with the name Jeromy.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the address, phone, and email for customers with the name Jeromy.[/QUESTION][SQL]SELECT Customer_Orders.order_id, Customers.customer_name, Addresses.address_details AS customer_address, Customers.customer_phone, Customers.customer_email FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id JOIN Addresses ON Customers.address_id = Addresses.address_id WHERE Customers.customer_name ilike '%Jeromy%' ORDER BY Customer_Orders.order_id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show all payment method codes and the number of customers in each code.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all payment method codes and the number of customers in each code.[/QUESTION][SQL]SELECT product_id, COUNT(*) AS total_customers FROM Customers GROUP BY product_id;
### TaskGenerate a SQL query to answer [QUESTION]How many customers use each payment method?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many customers use each payment method?[/QUESTION][SQL]SELECT product_id, COUNT(*) AS number_of_customers FROM Customers GROUP BY product_id;
### TaskGenerate a SQL query to answer [QUESTION]What is the payment method code used by most number of customers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the payment method code used by most number of customers?[/QUESTION][SQL]SELECT product_id FROM Products WHERE product_name = 'Most Popular Product';
### TaskGenerate a SQL query to answer [QUESTION]Give the code of the payment method that is most commonly used.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the code of the payment method that is most commonly used.[/QUESTION][SQL]SELECT product_id FROM Products WHERE product_name = 'Most Common Payment Method'
### TaskGenerate a SQL query to answer [QUESTION]Show all customer names with the  payment method code used by least number of customers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all customer names with the  payment method code used by least number of customers.[/QUESTION][SQL]SELECT product_id FROM Products;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of customers who use the least common payment method?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of customers who use the least common payment method?[/QUESTION][SQL]SELECT Customer_Orders.order_id, Customers.customer_name FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id WHERE Customers.payment_method_code IN (SELECT MIN(COUNT(payment_method_code)) AS min_count FROM Customers GROUP BY payment_method_code) ORDER BY Customer_Orders.order_id;
### TaskGenerate a SQL query to answer [QUESTION]What is the payment method and customer number for customer named Jeromy?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the payment method and customer number for customer named Jeromy?[/QUESTION][SQL]SELECT product_id, product_name FROM Products WHERE product_type_code = 'Jeromy';
### TaskGenerate a SQL query to answer [QUESTION]Give the payment method code and customer number corresponding to the customer named Jeromy.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the payment method code and customer number corresponding to the customer named Jeromy.[/QUESTION][SQL]SELECT product_id, product_name FROM Products WHERE product_type_code = 'Jeromy';
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct payment methods used by customers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct payment methods used by customers?[/QUESTION][SQL]SELECT product_id FROM Products;
### TaskGenerate a SQL query to answer [QUESTION]Give the different payment method codes that customers use.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the different payment method codes that customers use.[/QUESTION][SQL]SELECT product_id FROM Products;
### TaskGenerate a SQL query to answer [QUESTION]Show the id and the product type for all products, order by product name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the id and the product type for all products, order by product name.[/QUESTION][SQL]SELECT product_id, product_type_code FROM Products ORDER BY product_name;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids and product types for all products, sorted alphabetically by product name?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids and product types for all products, sorted alphabetically by product name?[/QUESTION][SQL]SELECT product_id, product_type_code FROM Products ORDER BY product_name ASC;
### TaskGenerate a SQL query to answer [QUESTION]What is the product type with least number of products?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the product type with least number of products?[/QUESTION][SQL]SELECT product_id, COUNT(*) AS product_count FROM Products GROUP BY product_id ORDER BY product_count ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the code of the product type that is least common?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the code of the product type that is least common?[/QUESTION][SQL]SELECT product_id, COUNT(*) AS count FROM Products GROUP BY product_id ORDER BY count ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How many customer orders do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many customer orders do we have?[/QUESTION][SQL]SELECT Addresses.order_id FROM Customer_Orders;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of customer orders.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of customer orders.[/QUESTION][SQL]SELECT order_id FROM Customer_Orders;
### TaskGenerate a SQL query to answer [QUESTION]Show the order ids, order dates, and order status codes for all orders by customer Jeromy.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the order ids, order dates, and order status codes for all orders by customer Jeromy.[/QUESTION][SQL]SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id IN (SELECT customer_id FROM Customers WHERE customer_name = 'Jeromy');
### TaskGenerate a SQL query to answer [QUESTION]What were the ids, dates, and status codes for orders made by Jeromy?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What were the ids, dates, and status codes for orders made by Jeromy?[/QUESTION][SQL]SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id IN (SELECT customer_id FROM Customers WHERE customer_name = 'Jeromy');
### TaskGenerate a SQL query to answer [QUESTION]Show all customer names, ids and the number of orders by each customer.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all customer names, ids and the number of orders by each customer.[/QUESTION][SQL]SELECT Customer_Orders.order_id, Customers.customer_name, COUNT(Customer_Orders.order_id) AS order_count FROM Customer_Orders JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id GROUP BY Customer_Orders.order_id, Customers.customer_name ORDER BY Customers.customer_name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names, ids, and number of orders made for each customer?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names, ids, and number of orders made for each customer?[/QUESTION][SQL]SELECT Customer_Orders.order_id, Customers.customer_name, COUNT(Customer_Orders.order_id) AS order_count FROM Customer_Orders JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id GROUP BY Customer_Orders.order_id, Customers.customer_name ORDER BY Customers.customer_name;
### TaskGenerate a SQL query to answer [QUESTION]What is the customer id, name, phone, and email for the customer with most orders?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the customer id, name, phone, and email for the customer with most orders?[/QUESTION][SQL]SELECT order_id, COUNT(*) AS order_count FROM Customer_Orders GROUP BY ord_id ORDER BY order_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the id, name, phone, and email corresponding to the customer who made the most orders.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the id, name, phone, and email corresponding to the customer who made the most orders.[/QUESTION][SQL]SELECT order_id, c.customer_name, c.customer_phone, c.customer_email FROM Customer_Orders co JOIN Customers c ON co.customer_id = c.customer_id GROUP BY co.order_id, c.customer_name, c.customer_phone, c.customer_email ORDER BY COUNT(co.order_id) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show all order status and the number of orders in each status.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all order status and the number of orders in each status.[/QUESTION][SQL]SELECT order_id, COUNT(*) AS total_orders FROM Customer_Orders GROUP BY order_status_code ORDER BY total_orders DESC;
### TaskGenerate a SQL query to answer [QUESTION]How many orders have each order status code?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many orders have each order status code?[/QUESTION][SQL]SELECT order_id, COUNT(*) AS number_of_orders FROM Customer_Orders GROUP BY order_status_code ORDER BY number_of_orders DESC;
### TaskGenerate a SQL query to answer [QUESTION]What is the order status code that is most common?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the order status code that is most common?[/QUESTION][SQL]SELECT order_id, COUNT(*) AS total_orders FROM Customer_Orders GROUP BY order_status_code ORDER BY total_orders DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the order status code that is most frequent across customer orders.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the order status code that is most frequent across customer orders.[/QUESTION][SQL]SELECT order_id, COUNT(*) AS total_orders FROM Customer_Orders GROUP BY odrer_id ORDER BY total_orders DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How many customers do not have an order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many customers do not have an order?[/QUESTION][SQL]SELECT Customer_Orders.order_id FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT Customer_Orders.customer_id FROM Customer_Orders)
### TaskGenerate a SQL query to answer [QUESTION]Count the number of customers who have not made an order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of customers who have not made an order.[/QUESTION][SQL]SELECT Customer_Orders.order_id FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT Customer_Orders.customer_id FROM Customer_Orders)
### TaskGenerate a SQL query to answer [QUESTION]Show all product names without an order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all product names without an order.[/QUESTION][SQL]SELECT product_id, product_name FROM Products WHERE product_id NOT IN (SELECT oi.product_id FROM Order_Items oi);
### TaskGenerate a SQL query to answer [QUESTION]What are the names of products that have not been ordered?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of products that have not been ordered?[/QUESTION][SQL]SELECT product_id, product_name FROM Products WHERE product_id NOT IN (SELECT oi.product_id FROM Order_Items oi);
### TaskGenerate a SQL query to answer [QUESTION]How many products named Monitor have been ordered?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many products named Monitor have been ordered?[/QUESTION][SQL]SELECT order_quantity FROM Order_Items WHERE product_id IN (SELECT product_id FROM Products WHERE LOWER(product_name) ='monitor') GROUP BY order_quantity;
### TaskGenerate a SQL query to answer [QUESTION]What is the total number of Monitor products that have been ordered?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total number of Monitor products that have been ordered?[/QUESTION][SQL]SELECT product_id, SUM(order_quantity::INTEGER) AS total_ordered FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id WHERE LOWER(p.product_type_code) ='monitor' GROUP BY product_id;
### TaskGenerate a SQL query to answer [QUESTION]How many customers have ordered the product named Monitor?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many customers have ordered the product named Monitor?[/QUESTION][SQL]SELECT order_id FROM Order_Items WHERE product_id IN (SELECT product_id FROM Products WHERE LOWER(product_name) ='monitor') GROUP BY order_id HAVING COUNT(DISTINCT order_id) > 1;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of different customers who have bought a Monitor Product.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of different customers who have bought a Monitor Product.[/QUESTION][SQL]SELECT order_id, COUNT(DISTINCT ord.customer_id) AS unique_customers FROM Customer_Orders ord JOIN Order_Items oi ON ord.order_id = oi.order_id WHERE LOWER(oi.product_id::text) LIKE '%monitor%' GROUP BY order_id;
### TaskGenerate a SQL query to answer [QUESTION]How many customers have an order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many customers have an order?[/QUESTION][SQL]SELECT Customers.order_id, COUNT(DISTINCT Customers.customer_id) AS number_of_customers FROM Customer_Orders Customers GROUP BY Customers.order_id;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of differnt customers who have made an order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of differnt customers who have made an order.[/QUESTION][SQL]SELECT Customer_Orders.order_id, COUNT(DISTINCT Customers.customer_id) AS unique_customers FROM Customer_Orders JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id GROUP BY Customer_Orders.order_id;
### TaskGenerate a SQL query to answer [QUESTION]Show all customer ids without an order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all customer ids without an order.[/QUESTION][SQL]SELECT Customer_Orders.order_id, Customers.customer_id FROM Customer_Orders JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id WHERE Customer_Orders.order_id IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of customers who have not made an order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of customers who have not made an order?[/QUESTION][SQL]SELECT Customer_Orders.order_id FROM Customer_Orders WHERE Customer_Orders.order_id NOT IN (SELECT Order_Items.order_id FROM Order_Items);
### TaskGenerate a SQL query to answer [QUESTION]Show all the order dates and ids of the orders with quantity of any product larger than 6 or with more than 3 products.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all the order dates and ids of the orders with quantity of any product larger than 6 or with more than 3 products.[/QUESTION][SQL]SELECT order_id, order_date FROM Customer_Orders WHERE order_id IN (SELECT oi.order_id FROM Order_Items oi WHERE CAST(oi.order_quantity AS INT) > 6 UNION SELECT oi.order_id FROM Order_Items oi GROUP BY oi.order_id HAVING COUNT(DISTINCT oi.product_id) > 3);
### TaskGenerate a SQL query to answer [QUESTION]What are the order ids and corresponding order dates for orders with a quantity greater than 6 or consisting of more than 3 products?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the order ids and corresponding order dates for orders with a quantity greater than 6 or consisting of more than 3 products?[/QUESTION][SQL]SELECT order_id, order_date FROM Customer_Orders WHERE order_id IN (SELECT oi.order_id FROM Order_Items oi GROUP BY oi.order_id HAVING COUNT(DISTINCT oi.product_id) > 3 UNION SELECT oi.order_id FROM Order_Items oi WHERE CAST(oi.order_quantity AS INT) > 6);
### TaskGenerate a SQL query to answer [QUESTION]How many buildings are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many buildings are there?[/QUESTION][SQL]SELECT building.Name FROM building;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of buildings.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of buildings.[/QUESTION][SQL]SELECT building.Capital, COUNT(*) AS total_buildings FROM building GROUP BY building.Capital;
### TaskGenerate a SQL query to answer [QUESTION]List the names of buildings in ascending order of number of stories.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of buildings in ascending order of number of stories.[/QUESTION][SQL]SELECT building.Name FROM building WHERE building.Number_of_Stories IS NOT NULL ORDER BY building.Number_of_Stories ASC;
### TaskGenerate a SQL query to answer [QUESTION]What is the list of building names, sorted by the number of stories of each building in ascending order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the list of building names, sorted by the number of stories of each building in ascending order?[/QUESTION][SQL]SELECT building.Name, building.Number_of_Stories FROM building ORDER BY building.Number_of_Stories ASC;
### TaskGenerate a SQL query to answer [QUESTION]List the addresses of buildings in descending order of building completion year.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the addresses of buildings in descending order of building completion year.[/QUESTION][SQL]SELECT building.Name, building.Address, building.Completed_Year FROM building ORDER BY building.Completed_Year DESC;
### TaskGenerate a SQL query to answer [QUESTION]Sort the buildings in descending order of building completion year, and return the building addresses.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Sort the buildings in descending order of building completion year, and return the building addresses.[/QUESTION][SQL]SELECT building.Name, building.Address FROM building ORDER BY building.Completed_Year DESC;
### TaskGenerate a SQL query to answer [QUESTION]What is the maximum number of stories of buildings not completed in 1980?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the maximum number of stories of buildings not completed in 1980?[/QUESTION][SQL]SELECT building.Name, MAX(b.Number_of_Stories) AS max_number_of_stories FROM building b WHERE b.Completed_Year!= 1980 GROUP BY building.Name ORDER BY max_number_of_stories DESC NULLS LAST LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Among the buildings not completed in 1980, what is the maximum number of stories?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Among the buildings not completed in 1980, what is the maximum number of stories?[/QUESTION][SQL]SELECT building.Name, MAX(b.Number_of_Stories) AS max_stories FROM building b WHERE b.Completed_Year!= 1980 GROUP BY building.Name ORDER BY max_stories DESC NULLS LAST LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the average population for all regions?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average population for all regions?[/QUESTION][SQL]SELECT region.Population FROM region;
### TaskGenerate a SQL query to answer [QUESTION]Compute the average population of a region.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Compute the average population of a region.[/QUESTION][SQL]SELECT region.Population FROM region;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of regions in ascending alphabetical order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of regions in ascending alphabetical order?[/QUESTION][SQL]SELECT region.Name FROM region WHERE region.Name IS NOT NULL ORDER BY region.Name ASC;
### TaskGenerate a SQL query to answer [QUESTION]List the names of regions in alphabetical order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of regions in alphabetical order.[/QUESTION][SQL]SELECT region.Name FROM region WHERE region.Name IS NOT NULL ORDER BY region.Name ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the capitals of the regions with area bigger than 10000?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the capitals of the regions with area bigger than 10000?[/QUESTION][SQL]SELECT region.Name, region.Capital FROM region WHERE region.Area > 10000 ORDER BY region.Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Give me the capitals of the regions whose area is larger than 10000.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give me the capitals of the regions whose area is larger than 10000.[/QUESTION][SQL]SELECT region.Capital FROM region WHERE region.Area > 10000;
### TaskGenerate a SQL query to answer [QUESTION]List the capital of the region with the largest population.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the capital of the region with the largest population.[/QUESTION][SQL]SELECT region.Capital FROM region WHERE region.Population = (SELECT MAX(region2.Population) FROM region AS region2);
### TaskGenerate a SQL query to answer [QUESTION]Which region has the largest population? Give me the capital of the region.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which region has the largest population? Give me the capital of the region.[/QUESTION][SQL]SELECT region.Name, reg.Capital FROM region reg WHERE reg.Population = (SELECT MAX(r2.Population) FROM region r2);
### TaskGenerate a SQL query to answer [QUESTION]List the names of the regions with the top 5 largest areas.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of the regions with the top 5 largest areas.[/QUESTION][SQL]SELECT region.Name FROM region WHERE region.Area IN (SELECT Area FROM region ORDER BY Area DESC LIMIT 5) ORDER BY region.Area DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the 5 largest regions in terms of area?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the 5 largest regions in terms of area?[/QUESTION][SQL]SELECT region.Name FROM region WHERE region.Area IN (SELECT MAX(Area) FROM region GROUP BY Name ORDER BY MAX(Area) DESC LIMIT 5);
### TaskGenerate a SQL query to answer [QUESTION]Show the names of buildings and the names of regions they are in.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the names of buildings and the names of regions they are in.[/QUESTION][SQL]SELECT building.Name, region.Name FROM building JOIN region ON building.Region_ID = region.Region_ID;
### TaskGenerate a SQL query to answer [QUESTION]For each building, return the name of the building and the name of the region it belongs to.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each building, return the name of the building and the name of the region it belongs to.[/QUESTION][SQL]SELECT building.Name, region.Name FROM building JOIN region ON building.Region_ID = region.Region_ID;
### TaskGenerate a SQL query to answer [QUESTION]Show the names of regions that have more than one building.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the names of regions that have more than one building.[/QUESTION][SQL]SELECT region.Name FROM region WHERE Region_ID IN (SELECT Building.Region_ID FROM Building GROUP BY Building.Region_ID HAVING COUNT(Building.Building_ID) > 1);
### TaskGenerate a SQL query to answer [QUESTION]Which regions have more than one building? Give me the names of the regions.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which regions have more than one building? Give me the names of the regions.[/QUESTION][SQL]SELECT region.Name FROM region WHERE region.Region_ID IN (SELECT b.Region_ID FROM building b GROUP BY b.Region_ID HAVING COUNT(b.Building_ID) > 1);
### TaskGenerate a SQL query to answer [QUESTION]Show the capital of the region that has the most buildings.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the capital of the region that has the most buildings.[/QUESTION][SQL]SELECT region.Capital FROM region WHERE Region_ID = (SELECT building.Region_ID FROM building GROUP BY building.Region_ID ORDER BY COUNT(building.Building_ID) DESC LIMIT 1);
### TaskGenerate a SQL query to answer [QUESTION]Which region has the largest number of buildings? Show me the capital of the region.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which region has the largest number of buildings? Show me the capital of the region.[/QUESTION][SQL]SELECT region.Name, MAX(bldg.Number_of_Buildings) AS max_buildings FROM (SELECT b.Region_ID, COUNT(*) AS Number_of_Buildings FROM building b GROUP BY b.Region_ID) AS bldg JOIN region ON bldg.Region_ID = region.Region_ID GROUP BY region.Name ORDER BY max_buildings DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show addresses of buildings and the capitals of regions they are in.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show addresses of buildings and the capitals of regions they are in.[/QUESTION][SQL]SELECT building.Name, building.Address, region.Capital FROM building JOIN region ON building.Region_ID = region.Region_ID;
### TaskGenerate a SQL query to answer [QUESTION]For each building, return the address of the building and the name of the region it belongs to.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each building, return the address of the building and the name of the region it belongs to.[/QUESTION][SQL]SELECT building.Name, building.Address, region.Name AS Region FROM building JOIN region ON building.Region_ID = region.Region_ID;
### TaskGenerate a SQL query to answer [QUESTION]Show the number of stories of buildings in the region with name "Abruzzo".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the number of stories of buildings in the region with name "Abruzzo".[/QUESTION][SQL]SELECT building.Name, SUM(building.Number_of_Stories) AS total_number_of_stories FROM building JOIN region ON building.Region_ID = region.Region_ID WHERE LOWER(region.Name) = 'abruzzo' GROUP BY building.Name;
### TaskGenerate a SQL query to answer [QUESTION]Return the number of stories for each building in the region named "Abruzzo".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the number of stories for each building in the region named "Abruzzo".[/QUESTION][SQL]SELECT building.Name, building.Number_of_Stories FROM building JOIN region ON building.Region_ID = region.Region_ID WHERE LOWER(region.Name) = 'abruzzo' ORDER BY building.Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Please show each completion year and the number of buildings completed in that year.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please show each completion year and the number of buildings completed in that year.[/QUESTION][SQL]SELECT building.Region_ID, COUNT(*) AS number_of_buildings FROM building GROUP BY builiding.Region_ID;
### TaskGenerate a SQL query to answer [QUESTION]For completion year, return the year and the number of buildings completed.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For completion year, return the year and the number of buildings completed.[/QUESTION][SQL]SELECT building.Region_ID, COUNT(*) AS number_of_buildings FROM building GROUP BY Region_ID;
### TaskGenerate a SQL query to answer [QUESTION]List the year in which the most buildings are completed.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the year in which the most buildings are completed.[/QUESTION][SQL]SELECT building.Region_ID, COUNT(*) AS number_of_buildings FROM building GROUP BY builiding.Region_ID ORDER BY number_of_buildings DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]In which year did the most building constructions complete?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]In which year did the most building constructions complete?[/QUESTION][SQL]SELECT building.Region_ID, COUNT(*) AS number_of_buildings FROM building GROUP BY builiding.Region_ID ORDER BY number_of_buildings DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List the names of regions that do not have any buildings.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of regions that do not have any buildings.[/QUESTION][SQL]SELECT region.Name FROM region WHERE NOT EXISTS (SELECT 1 FROM building WHERE building.Region_ID = region.Region_ID)
### TaskGenerate a SQL query to answer [QUESTION]What are the names of regions in which there are no buildings?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of regions in which there are no buildings?[/QUESTION][SQL]SELECT region.Name FROM region WHERE NOT EXISTS (SELECT 1 FROM building WHERE building.Region_ID = region.Region_ID)
### TaskGenerate a SQL query to answer [QUESTION]Show the completed years shared by buildings with more than 20 stories and buildings with less than 15 stories.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the completed years shared by buildings with more than 20 stories and buildings with less than 15 stories.[/QUESTION][SQL]SELECT building.Region_ID FROM building WHERE number_of_stories > 20 AND number_of_stories < 15;
### TaskGenerate a SQL query to answer [QUESTION]In which years did both buildings with more than 20 stories and buildings with less than 15 stories were completed?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]In which years did both buildings with more than 20 stories and buildings with less than 15 stories were completed?[/QUESTION][SQL]SELECT building.Region_ID FROM building WHERE builiding.Number_of_Stories > 20 AND builiding.Number_of_Stories < 15 GROUP BY builiding.Region_ID;
### TaskGenerate a SQL query to answer [QUESTION]Show the distinct addresses of buildings.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the distinct addresses of buildings.[/QUESTION][SQL]SELECT building.Region_ID, building.Address FROM building GROUP BY building.Region_ID, building.Address ORDER BY building.Region_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Give me a list of distinct building addresses.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give me a list of distinct building addresses.[/QUESTION][SQL]SELECT building.Region_ID, building.Address FROM building GROUP BY building.Region_ID, building.Address ORDER BY building.Region_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the completed years of buildings in descending order of the number of stories.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the completed years of buildings in descending order of the number of stories.[/QUESTION][SQL]SELECT building.Name, builiding.Completed_Year FROM building ORDER BY Number_of_Stories DESC;
### TaskGenerate a SQL query to answer [QUESTION]Sort buildings in descending order of the number of stories, and return their completion years.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Sort buildings in descending order of the number of stories, and return their completion years.[/QUESTION][SQL]SELECT building.Name, building.Completed_Year FROM building ORDER BY building.Number_of_Stories DESC;
### TaskGenerate a SQL query to answer [QUESTION]List details of all the channel in alphabetical order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List details of all the channel in alphabetical order.[/QUESTION][SQL]SELECT Channels.Customers_and_Services_ID, Channels.Channel_ID, Channels.Channel_Details FROM Channels ORDER BY Channels.Channel_Details ASC;
### TaskGenerate a SQL query to answer [QUESTION]What is the list of channel details ordered alphabetically?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the list of channel details ordered alphabetically?[/QUESTION][SQL]SELECT Channels.Customers_and_Services_ID, Channels.Channel_Details FROM Channels ORDER BY Channels.Channel_Details ASC;
### TaskGenerate a SQL query to answer [QUESTION]How many services are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many services are there?[/QUESTION][SQL]SELECT Services.Customers_and_Services_ID FROM Customers_and_Services;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of services.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of services.[/QUESTION][SQL]SELECT Services.Customers_and_Services_ID, COUNT(*) AS Number_of_Services FROM Customers_and_Services GROUP BY Customers_and_Services_ID;
### TaskGenerate a SQL query to answer [QUESTION]What is the most common analytical layer type code?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the most common analytical layer type code?[/QUESTION][SQL]SELECT Analytical_Layer_Type_Code, COUNT(*) AS Count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY Count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the analytical layer type code that appears most often.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the analytical layer type code that appears most often.[/QUESTION][SQL]SELECT Analytical_Layer_Type_Code, COUNT(*) AS Frequency FROM Analytical_Layer GROUP BY Analtical_Layer_Type_Code ORDER BY Frequency DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find all the services that has been used by the customer with details "Hardy Kutch".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all the services that has been used by the customer with details "Hardy Kutch".[/QUESTION][SQL]SELECT Services.Customers_and_Services_ID FROM Customers_and_Services WHERE Customers_and_Services.Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch');
### TaskGenerate a SQL query to answer [QUESTION]Which services were used by the customer with details "Hardy Kutch"? Give me the service details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which services were used by the customer with details "Hardy Kutch"? Give me the service details.[/QUESTION][SQL]SELECT Services.Customers_and_Services_ID, Services.Service_Details FROM Customers_and_Services JOIN Services ON Customers_and_Services.Service_ID = Services.Service_ID WHERE Customers_and_Services.Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details ilike '%Hardy%Kutch%');
### TaskGenerate a SQL query to answer [QUESTION]Find the details of the services that have been used by more than 3 times.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the details of the services that have been used by more than 3 times.[/QUESTION][SQL]SELECT Services.Customers_and_Services_ID, COUNT(Customer_Interaction_ID) AS interaction_count FROM Customer_Interactions JOIN Customers_and_Services ON Customer_Interactions.Service_ID = Customers_and_Services.Service_ID GROUP BY Customers_and_Services_ID HAVING COUNT(Customer_Interaction_ID) > 3 ORDER BY interaction_count DESC;
### TaskGenerate a SQL query to answer [QUESTION]Which services were used by customers by more than 3 times? Give me the service details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which services were used by customers by more than 3 times? Give me the service details.[/QUESTION][SQL]SELECT Services.Customers_and_Services_ID, COUNT(*) AS usage_count FROM Customers_and_Services JOIN Analytical_Layer ON Customers_and_Services.Customers_and_Services_ID = Analytical_Layer.Customers_and_Services_ID GROUP BY Customers_and_Services.Customers_and_Services_ID HAVING COUNT(*) > 3
### TaskGenerate a SQL query to answer [QUESTION]Find the details of the customer who has used services the most times.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the details of the customer who has used services the most times.[/QUESTION][SQL]SELECT Customer_Interactions.Customers_and_Services_ID, COUNT(Custome_Interaction_ID) AS interaction_count FROM Customer_Interactions JOIN Customers_and_Services ON Customer_Interactions.Customer_ID = Customers_and_Services.Customer_ID GROUP BY Customers_and_Services_ID ORDER BY interaction_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]return the details of the customer with largest count of used services.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]return the details of the customer with largest count of used services.[/QUESTION][SQL]SELECT Customer_Interactions.Customers_and_Services_ID, COUNT(Custome_Interaction_ID) AS interaction_count FROM Customer_Interactions JOIN Customers_and_Services ON Customer_Interactions.Service_ID = Customers_and_Services.Service_ID GROUP BY Customers_and_Services_ID ORDER BY interaction_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the customer who has used the most types of services.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the customer who has used the most types of services.[/QUESTION][SQL]SELECT Customer_Interactions.Customers_and_Services_ID, COUNT(DISTINCT Cusstomer_Interaction.Customeer_ID) AS Service_Count FROM Customer_Interactions Cusstomer_Interaction JOIN Customers_and_Services ON Cusstomer_Interaction.Service_ID = Customers_and_Services.Service_ID GROUP BY Customers_and_Services_ID ORDER BY Service_Count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which customer has used the most types of services? Give me the customer details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which customer has used the most types of services? Give me the customer details.[/QUESTION][SQL]SELECT Customer_Interactions.Customers_and_Services_ID, COUNT(DISTINCT csi.Service_ID) AS service_count FROM Customers_and_Services csi JOIN Customer_Interactions c ON csi.Customer_ID = c.Customer_ID GROUP BY csi.Customers_and_Services_ID ORDER BY service_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the details of the customer who has never used any services.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the details of the customer who has never used any services.[/QUESTION][SQL]SELECT Customer_Interactions.Customers_and_Services_ID FROM Customers_and_Services WHERE Customers_and_Services_ID NOT IN (SELECT Customers_and_Services_ID FROM Customer_Interactions);
### TaskGenerate a SQL query to answer [QUESTION]Which customers never used any services? Give me the customer details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which customers never used any services? Give me the customer details.[/QUESTION][SQL]SELECT Customer_Interactions.Customers_and_Services_ID FROM Customers_and_Services WHERE Customers_and_Services_ID NOT IN (SELECT Customers_and_Services_ID FROM Customer_Interactions);
### TaskGenerate a SQL query to answer [QUESTION]Find the details of the customers who have used the least-used service.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the details of the customers who have used the least-used service.[/QUESTION][SQL]SELECT Customer_Interactions.Customers_and_Services_ID, Customers.Customer_Details FROM Customers_and_Services JOIN Customer_Interactions ON Customers_and_Services.Custome rs_and_Services_ID = Customer_Interactions.Customer_Interaction_ID JOIN Customers ON Customers_and_Services.Customer_ID = Customers.Customer_ID WHERE Customers_and_Services.Custome rs_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Customers_and_Services GROUP BY Customers_and_Services_ID ORDER BY COUNT(*) ASC LIMIT 1);
### TaskGenerate a SQL query to answer [QUESTION]Which customers used the least commonly-used service? Give me the distinct customer details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which customers used the least commonly-used service? Give me the distinct customer details.[/QUESTION][SQL]SELECT Customer_Interactions.Customers_and_Services_ID, COUNT(Custome_Interaction_ID) AS Interaction_Count FROM Customer_Interactions JOIN Customers_and_Services ON Customer_Interactions.Service_ID = Customers_and_Services.Service_ID GROUP BY Customers_and_Services_ID ORDER BY Interaction_Count ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How many distinct customer and services details are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many distinct customer and services details are there?[/QUESTION][SQL]SELECT Customers_and_Services.Customers_and_Services_ID, COUNT(DISTINCT Customers_and_Services.Customer_ID), COUNT(DISTINCT Customers_and_Services.Service_ID) FROM Customers_and_Services GROUP BY Customers_and_Services.Customer_ID, Customers_and_Services.Service_ID;
### TaskGenerate a SQL query to answer [QUESTION]Count the total number of available customers and services details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the total number of available customers and services details.[/QUESTION][SQL]SELECT Customer_Interactions.Customers_and_Services_ID, COUNT(DISTINCT Cusstomer_Interaction.Customeer_ID) AS Total_Customers, COUNT(DISTINCT Cusstomer_Interaction.Service_ID) AS Total_Services FROM Customers_and_Services Cusstomer_Interaction JOIN Customer_Interactions Cusstomer_Interaction ON Cusstomer_Interaction.Customer_ID = Cusstomer_Interaction.Customer_ID GROUP BY Cusstomer_Interaction.Customer_and_Services_ID;
### TaskGenerate a SQL query to answer [QUESTION]Find all the customers whose name contains "Kutch".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all the customers whose name contains "Kutch".[/QUESTION][SQL]SELECT Customer_Interactions.Customers_and_Services_ID FROM Customers_and_Services WHERE Customers_and_Services.Customers_and_Services_Details LIKE '%Kutch%'
### TaskGenerate a SQL query to answer [QUESTION]What are the details of the customers who have "Kutch" in part of their details?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the details of the customers who have "Kutch" in part of their details?[/QUESTION][SQL]SELECT Customer_Interactions.Customers_and_Services_ID, Customers.Customer_Details FROM Customers JOIN Customers_and_Services ON Customers.Customer_ID = Customers_and_Services.Customer_ID WHERE Customers.Customer_Details ilike '%Kutch%' ORDER BY Customers_and_Services.Custome
### TaskGenerate a SQL query to answer [QUESTION]Find the name of all the services which either have been used by customer "Hardy Kutch" or have been rated as "good" in one of the customer interactions.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of all the services which either have been used by customer "Hardy Kutch" or have been rated as "good" in one of the customer interactions.[/QUESTION][SQL]SELECT Services.Customers_and_Services_ID FROM Customers_and_Services WHERE Customers_and_Services.Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch') UNION SELECT ci.Service_ID FROM Customer_Interactions ci JOIN Services s ON ci.Service_ID = s.Service_ID WHERE LOWER(ci.Status_Code) = 'good'
### TaskGenerate a SQL query to answer [QUESTION]Which services are used by the customer "Hardy Kutch" or are rated as "good" in a customer interaction? Give me the service details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which services are used by the customer "Hardy Kutch" or are rated as "good" in a customer interaction? Give me the service details.[/QUESTION][SQL]SELECT Customer_Interactions.Customers_and_Services_ID, Services.Service_Details FROM Customers_and_Services JOIN Customer_Interactions ON Customers_and_Services.Customers_and_Services_ID = Customer_Interactions.Customer_Interaction_ID JOIN Services ON Customers_and_Services.Service_ID = Services.Service_ID WHERE Customers_and_Services.Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details ilike '%Hardy%Kutch%') OR Customer_Interactions.Status_Code ilike '%good%' ORDER BY Customers_and_Services.Customers_and_Services_ID;
### TaskGenerate a SQL query to answer [QUESTION]Find the names of all the services which both have been used by customer "Hardy Kutch" and have been rated "bad" in one of the customer interactions.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of all the services which both have been used by customer "Hardy Kutch" and have been rated "bad" in one of the customer interactions.[/QUESTION][SQL]SELECT Services.Customers_and_Services_ID FROM Customers_and_Services WHERE Customers_and_Services.Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch') AND Customers_and_Services_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Status_Code = 'bad');
### TaskGenerate a SQL query to answer [QUESTION]Which services are both used by the customer "Hardy Kutch" and are rated as "bad" in a customer interaction? Give me the service details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which services are both used by the customer "Hardy Kutch" and are rated as "bad" in a customer interaction? Give me the service details.[/QUESTION][SQL]SELECT Customers_and_Services.Customers_and_Services_ID, Services.Service_Details FROM Customers_and_Services JOIN Services ON Customers_and_Services.Service_ID = Services.Service_ID JOIN Customer_Interactions ON Customers_and_Services.Customer_ID = Customer_Interactions.Customer_ID WHERE Customers_and_Services.Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details ilike '%Hardy%Kutch%') AND Customer_Interactions.Status_Code = 'Bad' ORDER BY Customers_and_Services.Customers_and_Services_ID;
### TaskGenerate a SQL query to answer [QUESTION]Find details of all the services that have interacted with `` 15 ij '' for the the channel details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find details of all the services that have interacted with `` 15 ij '' for the the channel details.[/QUESTION][SQL]SELECT Services.Customers_and_Services_ID, Customers_and_Services.Service_ID, Services.Service_Details FROM Customers_and_Services JOIN Services ON Customers_and_Services.Service_ID = Services.Service_ID WHERE Customers_and_Services.Customers_and_Services_ID LIKE '%15ij%'
### TaskGenerate a SQL query to answer [QUESTION]Give me the details of all the services that have interacted with the channel with detail "15 ij".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give me the details of all the services that have interacted with the channel with detail "15 ij".[/QUESTION][SQL]SELECT Services.Customers_and_Services_ID, Customers_and_Services.Service_Details FROM Customers_and_Services JOIN Services ON Customers_and_Services.Service_ID = Services.Service_ID WHERE Customers_and_Services.Customers_and_Services_Details LIKE '%15 ij%' ORDER BY Customers_and_Services.Service_ID;
### TaskGenerate a SQL query to answer [QUESTION]Find all the details of the customers who have been involved in an interaction with status `` Stuck '' and service and channel detail `` bad ''.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all the details of the customers who have been involved in an interaction with status `` Stuck '' and service and channel detail `` bad ''.[/QUESTION][SQL]SELECT Customer_Interactions.Customers_and_Services_ID, Customers_and_Services.Customer_Details, Services.Service_Details, Channels.Channel_Details FROM Customer_Interactions JOIN Customers_and_Services ON Customer_Interactions.Customers_and_Services_ID = Customers_and_Services.Customers_and_Services_ID JOIN Services ON Customer_Interactions.Service_ID = Services.Service_ID JOIN Channels ON Customer_Interactions.Channel_ID = Channels.Channel_ID WHERE Customer_Interactions.Status_Code ilike '%Stuck%' AND Services.Service_Details ilike '%bad%' AND Channels.Channel_Details ilike '%bad%';
### TaskGenerate a SQL query to answer [QUESTION]Which customers have experienced status "Stuck" and service and channel detail "bad" in  an interaction? Give me the customer details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which customers have experienced status "Stuck" and service and channel detail "bad" in  an interaction? Give me the customer details.[/QUESTION][SQL]SELECT Customer_Interactions.Customers_and_Services_ID, c.Customer_Details FROM Customer_Interactions JOIN Customers_and_Services ON Customer_Interactions.Customers_and_Services_ID = Customers_and_Services.Customers_and_Services_ID JOIN Customers AS c ON Customers_and_Services.Customer_ID = c.Customer_ID WHERE Customer_Interactions.Status_Code ilike '%Stuck%' AND Customer_Interactions.Services_and_Channels_Details ilike '%bad%';
### TaskGenerate a SQL query to answer [QUESTION]How many integration platforms are successful?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many integration platforms are successful?[/QUESTION][SQL]SELECT Integration_Platform.Customers_and_Services_ID, COUNT(*) AS Successful_Integrations FROM Integration_Platform JOIN Customer_Interactions ON Integration_Platform.Customer_Interaction_ID = Customer_Interactions.Customer_Interaction_ID WHERE Status_Code = 'Successful' GROUP BY Customeyrs_and_Services_ID;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of integration platforms that have "Success" in the details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of integration platforms that have "Success" in the details.[/QUESTION][SQL]SELECT Integration_Platform.Customers_and_Services_ID, COUNT(*) AS Number_of_Integration_Platforms FROM Integration_Platform JOIN Customers_and_Services ON Integration_Platform.Customer_Interaction_ID = Customers_and_Services.Customers_and_Services_ID WHERE Customers_and_Services.Customers_and_Services_Details LIKE '%Success%' GROUP BY Customeer_ID;
### TaskGenerate a SQL query to answer [QUESTION]List the details of all the customers who are associated with a failed integration platform.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the details of all the customers who are associated with a failed integration platform.[/QUESTION][SQL]SELECT Customer_Interactions.Customers_and_Services_ID, c.Customer_Details FROM Customer_Interactions JOIN Customers AS c ON Customer_Interactions.Customer_ID = c.Customer_ID WHERE Customer_Interactions.Status_Code = 'Failed' ORDER BY c.Customer_Details;
### TaskGenerate a SQL query to answer [QUESTION]Which customers have integration platform details "Fail" in interactions? Give me the customer details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which customers have integration platform details "Fail" in interactions? Give me the customer details.[/QUESTION][SQL]SELECT Customer_Interactions.Customers_and_Services_ID, c.Customer_Details FROM Customer_Interactions JOIN Integration_Platform ON Customer_Interactions.Customer_Interaction_ID = Integration_Platform.Customer_Interaction_ID JOIN Customers_and_Services ON Customer_Interactions.Customers_and_Services_ID = Customers_and_Services.Customers_and_Services_ID JOIN Customers AS c ON Customers_and_Services.Customer_ID = c.Customer_ID WHERE Integration_Platform.Integration_Platform_Details ilike '%Fail%' ORDER BY Customers_and_Services_ID;
### TaskGenerate a SQL query to answer [QUESTION]Which service ( s ) has never been used by any customer? List their details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which service ( s ) has never been used by any customer? List their details.[/QUESTION][SQL]SELECT Services.Customers_and_Services_ID FROM Customers_and_Services WHERE Customers_and_Services_ID NOT IN (SELECT Customers_and_Services_ID FROM Customers_and_Services GROUP BY Customers_and_Services_ID HAVING COUNT(Customers_and_Services_ID) > 1);
### TaskGenerate a SQL query to answer [QUESTION]Find details of the services that no customer has ever used. Return the service details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find details of the services that no customer has ever used. Return the service details.[/QUESTION][SQL]SELECT Services.Customers_and_Services_ID FROM Customers_and_Services WHERE Customers_and_Services_ID NOT IN (SELECT Customers_and_Services_ID FROM Customers_and_Services);
### TaskGenerate a SQL query to answer [QUESTION]Find all the layer type codes with their corresponding usage count.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all the layer type codes with their corresponding usage count.[/QUESTION][SQL]SELECT Analytical_Layer_Type_Code, COUNT(*) AS Usage_Count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY Usage_Count DESC;
### TaskGenerate a SQL query to answer [QUESTION]For each analytical layer, return the analytical layer type code and the number of times it was used.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each analytical layer, return the analytical layer type code and the number of times it was used.[/QUESTION][SQL]SELECT Analytical_Layer_Type_Code, COUNT(*) AS usage_count FROM Analytical_Layer GROUP BY Analytic_Layer_Type_Code ORDER BY usage_count DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find details of all the services that have been marked as `` unsatisfied '' in customers and services details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find details of all the services that have been marked as `` unsatisfied '' in customers and services details.[/QUESTION][SQL]SELECT Customers_and_Services.Customers_and_Services_ID, Customers_and_Services.Customer_ID, Customers_and_Services.Service_ID, Customers_and_Services.Customers_and_Services_Details FROM Customers_and_Services JOIN Analytical_Layer ON Customers_and_Services.Customers_and_Services_ID = Analytical_Layer.Customers_and_Services_ID WHERE Analytical_Layer.Pattern_Recognition LIKE '%unsatisfied%' ORDER BY Customers_and_Services.Customers_and_Services_ID;
### TaskGenerate a SQL query to answer [QUESTION]Which services have been rated as "unsatisfied" in customers and services details? Give me the service_details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which services have been rated as "unsatisfied" in customers and services details? Give me the service_details.[/QUESTION][SQL]SELECT Services.Customers_and_Services_ID FROM Customers_and_Services WHERE Customers_and_Services_Details = 'unsatisfied'
### TaskGenerate a SQL query to answer [QUESTION]How many vehicles do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many vehicles do we have?[/QUESTION][SQL]SELECT vehicles_id FROM Renting_history;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of vehicles.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of vehicles.[/QUESTION][SQL]SELECT vehicles_id FROM Renting_history;
### TaskGenerate a SQL query to answer [QUESTION]Show names for all vehicles in descending order of model year.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show names for all vehicles in descending order of model year.[/QUESTION][SQL]SELECT vehicles_id, name FROM Vehicles ORDER BY Model_year DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all vehicles, ordered by model year descending?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all vehicles, ordered by model year descending?[/QUESTION][SQL]SELECT vehicles_id, name FROM Vehicles ORDER BY Model_year DESC;
### TaskGenerate a SQL query to answer [QUESTION]List all distinct types of powertrain of vehicles.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all distinct types of powertrain of vehicles.[/QUESTION][SQL]SELECT vehicles_id, type_of_powertrain FROM Vehicles;
### TaskGenerate a SQL query to answer [QUESTION]What are the different types of powertrains?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different types of powertrains?[/QUESTION][SQL]SELECT vehicles_id, type_of_powertrain FROM Vehicles GROUP BY vehicle_id, type_of_powertrain;
### TaskGenerate a SQL query to answer [QUESTION]Show name, type of powertrain, and annual fuel cost for all vehicles with model year 2013 or 2014.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show name, type of powertrain, and annual fuel cost for all vehicles with model year 2013 or 2014.[/QUESTION][SQL]SELECT vehicles_id, name, type_of_powertrain, annual_fuel_cost FROM Vehicles WHERE Model_year = 2013 OR Model_year = 2014;
### TaskGenerate a SQL query to answer [QUESTION]What are the names, types of powertrains, and yearly fuel costs for vehicles with model years in either 2013 2014?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names, types of powertrains, and yearly fuel costs for vehicles with model years in either 2013 2014?[/QUESTION][SQL]SELECT vehicles_id, name, type_of_powertrain, annual_fuel_cost FROM Vehicles WHERE Model_year IN (2013, 2014);
### TaskGenerate a SQL query to answer [QUESTION]Show types of powertrain with vehicles both from 2014 and 2013.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show types of powertrain with vehicles both from 2014 and 2013.[/QUESTION][SQL]SELECT vehicles_id FROM Vehicles WHERE Model_year = 2014 AND Type_of_powertrain IN (SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013)
### TaskGenerate a SQL query to answer [QUESTION]What are the types of powertrains that have vehicles that were made in both 2013 and 2014?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the types of powertrains that have vehicles that were made in both 2013 and 2014?[/QUESTION][SQL]SELECT vehicles_id FROM Vehicles WHERE Model_year IN (2013, 2014) GROUP BY vehiclles_id HAVING COUNT(DISTINCT Model_year) = 2;
### TaskGenerate a SQL query to answer [QUESTION]Show all types of powertrain and the number of vehicles in each type.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all types of powertrain and the number of vehicles in each type.[/QUESTION][SQL]SELECT vehicles_id, COUNT(*) AS total_vehicles FROM Vehicles GROUP BY vehicle_type;
### TaskGenerate a SQL query to answer [QUESTION]How many vehicles have each type of powertrain?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many vehicles have each type of powertrain?[/QUESTION][SQL]SELECT vehicles_id, COUNT(*) AS number_of_vehicles FROM Vehicles GROUP BY vehiclles_id ORDER BY number_of_vehicles DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the type of powertrain with most number of vehicles.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the type of powertrain with most number of vehicles.[/QUESTION][SQL]SELECT vehicles_id, COUNT(*) AS total_vehicles FROM Vehicles GROUP BY vehicle_type ORDER BY total_vehicles DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which type of powertrain is most common?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which type of powertrain is most common?[/QUESTION][SQL]SELECT vehicles_id, COUNT(*) AS total_count FROM Vehicles GROUP BY vehicle_id ORDER BY total_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show minimum, maximum, and average annual fuel cost for all vehicles.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show minimum, maximum, and average annual fuel cost for all vehicles.[/QUESTION][SQL]SELECT vehicles_id, MIN(annual_fuel_cost) AS min_annual_fuel_cost, MAX(annual_fuel_cost) AS max_annual_fuel_cost, AVG(annual_fuel_cost) AS avg_annual_fuel_cost FROM Vehicles GROUP BY vehicle_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the minimum, maximum, and average annual fuel costs across all vehicles?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the minimum, maximum, and average annual fuel costs across all vehicles?[/QUESTION][SQL]SELECT vehicles_id, MIN(annual_fuel_cost) AS min_annual_fuel_cost, MAX(annual_fuel_cost) AS max_annual_fuel_cost, AVG(annual_fuel_cost) AS avg_annual_fuel_cost FROM Vehicles GROUP BY vehicle_id;
### TaskGenerate a SQL query to answer [QUESTION]Show name and model year for vehicles with city fuel economy rate less than or equal to highway fuel economy rate.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show name and model year for vehicles with city fuel economy rate less than or equal to highway fuel economy rate.[/QUESTION][SQL]SELECT vehicles_id, name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and model years for vehicles that have a city fuel economy rate less than or equal to its highway fuel economy rate?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and model years for vehicles that have a city fuel economy rate less than or equal to its highway fuel economy rate?[/QUESTION][SQL]SELECT vehicles_id, name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate;
### TaskGenerate a SQL query to answer [QUESTION]Show the type of powertrain with at least two vehicles, and the average annual fuel cost for vehicles in each such type.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the type of powertrain with at least two vehicles, and the average annual fuel cost for vehicles in each such type.[/QUESTION][SQL]SELECT vehicles_id, COUNT(*) AS number_of_vehicles, AVG(annual_fuel_cost) AS average_annual_fuel_cost FROM Vehicles GROUP BY vehicle_type HAVING COUNT(*) >= 2 ORDER BY number_of_vehicles DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the types of powertrains for which there are two or more vehicles, and what are their average annual fuel costs?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the types of powertrains for which there are two or more vehicles, and what are their average annual fuel costs?[/QUESTION][SQL]SELECT vehicles_id, COUNT(*) AS number_of_vehicles, AVG(annual_fuel_cost) AS average_annual_fuel_cost FROM Vehicles GROUP BY vehicle_type HAVING COUNT(*) >= 2 ORDER BY number_of_vehicles DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the name, age, membership credit for all customers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the name, age, membership credit for all customers?[/QUESTION][SQL]SELECT customer_id, name, age, membership_credit FROM Customers;
### TaskGenerate a SQL query to answer [QUESTION]What are the names, ages, and membership credits for all customers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names, ages, and membership credits for all customers?[/QUESTION][SQL]SELECT customer_id, name, age, membership_credit FROM Customers;
### TaskGenerate a SQL query to answer [QUESTION]Show the name and age of the customer with maximum membership credit.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the name and age of the customer with maximum membership credit.[/QUESTION][SQL]SELECT customer_id, MAX(membership_credit) AS max_credit FROM Customers GROUP BY customer_id ORDER BY max_credit DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name and age of the customer with the most membership credit?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name and age of the customer with the most membership credit?[/QUESTION][SQL]SELECT customer_id, name, age FROM Customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM Customers);
### TaskGenerate a SQL query to answer [QUESTION]What is the average age for customers with a membership credit above the average?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average age for customers with a membership credit above the average?[/QUESTION][SQL]SELECT customer_id, AVG(age) AS average_age FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers) GROUP BY customer_id;
### TaskGenerate a SQL query to answer [QUESTION]Return the average age for customers who have membership above the average across all customers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the average age for customers who have membership above the average across all customers.[/QUESTION][SQL]SELECT customer_id, AVG(age) AS average_age FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers) GROUP BY customer_id ORDER BY average_age DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show all information for all discounts.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all information for all discounts.[/QUESTION][SQL]SELECT discount_id, name, membership_credit FROM Discount;
### TaskGenerate a SQL query to answer [QUESTION]Return all information about discounts.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return all information about discounts.[/QUESTION][SQL]SELECT discount_id, name, membership_credit FROM Discount;
### TaskGenerate a SQL query to answer [QUESTION]Show the name and total hours of renting for each vehicle.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the name and total hours of renting for each vehicle.[/QUESTION][SQL]SELECT vehicles_id, name, SUM(total_hours) AS total_rental_hours FROM Renting_history GROUP BY vehicl.es_id, name ORDER BY total_rental_hours DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and total rental hours for each vehicle?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and total rental hours for each vehicle?[/QUESTION][SQL]SELECT vehicles_id, name AS vehicle_name, SUM(total_hours) AS total_rental_hours FROM Renting_history GROUP BY vehicles_id, name ORDER BY total_rental_hours DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the name of vehicles with no renting history.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the name of vehicles with no renting history.[/QUESTION][SQL]SELECT vehicles_id FROM Vehicles WHERE vehicle_id NOT IN (SELECT vehicles_id FROM Renting_history)
### TaskGenerate a SQL query to answer [QUESTION]What are the names of vehicles that have never been rented?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of vehicles that have never been rented?[/QUESTION][SQL]SELECT vehicles_id FROM Vehicles WHERE vehicle_id NOT IN (SELECT vehicles_id FROM Renting_History)
### TaskGenerate a SQL query to answer [QUESTION]Show the name of customer with at least two renting history records.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the name of customer with at least two renting history records.[/QUESTION][SQL]SELECT customer_id, COUNT(*) AS number_of_rentals FROM Renting_history GROUP BY customer_id HAVING COUNT(*) >= 2 ORDER BY customer_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of customers who have two or more records of rental history?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of customers who have two or more records of rental history?[/QUESTION][SQL]SELECT customer_id, name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(id) >= 2);
### TaskGenerate a SQL query to answer [QUESTION]Show the name and model year of the vehicle with most number of renting history records.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the name and model year of the vehicle with most number of renting history records.[/QUESTION][SQL]SELECT vehicles_id, COUNT(*) AS total_rentals FROM Renting_history GROUP BY vehicle_id ORDER BY total_rentals DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name and model year of the vehicle which has been rented the most times?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name and model year of the vehicle which has been rented the most times?[/QUESTION][SQL]SELECT vehicles_id, COUNT(*) AS total_rentals FROM Renting_history GROUP BY vehicle_id ORDER BY total_rentals DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show the vehicle name with a descending order of total hours of renting.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the vehicle name with a descending order of total hours of renting.[/QUESTION][SQL]SELECT vehicles_id, SUM(total_hours) AS total_rented_hours FROM Renting_history GROUP BY vehicle_id ORDER BY total_rented_hours DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of vehicles, sorted descending by total hours of renting?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of vehicles, sorted descending by total hours of renting?[/QUESTION][SQL]SELECT vehicles_id, name FROM Vehicles ORDER BY (SELECT SUM(total_hours) FROM Renting_history WHERE vehicles_id = vehicle_id) DESC;
### TaskGenerate a SQL query to answer [QUESTION]What is the discount name with most number of renting history records?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the discount name with most number of renting history records?[/QUESTION][SQL]SELECT discount_id, COUNT(*) AS total_rentals FROM Renting_history GROUP BY discout_id ORDER BY total_rentals DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Return the name of the discount that corresponds to the most rental history records.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the name of the discount that corresponds to the most rental history records.[/QUESTION][SQL]SELECT discount_id, COUNT(*) AS total_rentals FROM Renting_history GROUP BY discout_id ORDER BY total_rentals DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the name and powertrain type of the cars that rented for more than 30 total hours.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name and powertrain type of the cars that rented for more than 30 total hours.[/QUESTION][SQL]SELECT vehicles_id, vehicles.name AS vehicle_name, vehicles.type_of_powertrain FROM renting_history JOIN vehicles ON renting_history.vehicles_id = vehicles.id WHERE total_hours > 30;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and powertrain types of cars that have more than 30 total rental hours?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and powertrain types of cars that have more than 30 total rental hours?[/QUESTION][SQL]SELECT vehicles_id, name, type_of_powertrain FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history WHERE total_hours > 30)
### TaskGenerate a SQL query to answer [QUESTION]Find the average city and highway fuel rates for cars with different powertrain types.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the average city and highway fuel rates for cars with different powertrain types.[/QUESTION][SQL]SELECT vehicles_id, type_of_powertrain, AVG(city_fuel_economy_rate) AS avg_city_fuel_rate, AVG(highway_fuel_economy_rate) AS avg_highway_fuel_rate FROM vehicles GROUP BY vehicles_id, type_of_powertrain ORDER BY vehicles_id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the average city fuel economy rate, average highway fuel economy rate for different types of powertrains?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the average city fuel economy rate, average highway fuel economy rate for different types of powertrains?[/QUESTION][SQL]SELECT vehicles_id, type_of_powertrain, AVG(city_fuel_economy_rate) AS avg_city_fuel_economy_rate, AVG(highway_fuel_economy_rate) AS avg_highway_fuel_economy_rate FROM vehicles GROUP BY vehicles_id, type_of_powertrain ORDER BY vehicles_id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the average amount of a student loan?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average amount of a student loan?[/QUESTION][SQL]SELECT student_id, AVG(amount_of_loan) AS average_amount FROM Student_Loans GROUP BY student_id;
### TaskGenerate a SQL query to answer [QUESTION]Compute the average amount of student loans.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Compute the average amount of student loans.[/QUESTION][SQL]SELECT student_id, AVG(amount_of_loan) AS average_amount FROM Student_Loans GROUP BY student_id;
### TaskGenerate a SQL query to answer [QUESTION]List the biographical data and student id for the students who take 2 or more classes and the students who have less than 2 detentions.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the biographical data and student id for the students who take 2 or more classes and the students who have less than 2 detentions.[/QUESTION][SQL]SELECT student_id, bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(class_id) >= 2) AND student_id NOT IN (SELECT student_id FROM Detention GROUP BY student_id HAVING COUNT(detention_id) >= 2);
### TaskGenerate a SQL query to answer [QUESTION]What are the biographical data and student id of the students who either took two or more classes and or have less than two detentions?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the biographical data and student id of the students who either took two or more classes and or have less than two detentions?[/QUESTION][SQL]SELECT student_id, bio_data FROM Students WHERE student_id IN (SELECT DISTINCT student_id FROM Classes UNION SELECT DISTINCT student_id FROM Detention) GROUP BY student_id, bio_data HAVING COUNT(DISTINCT class_id) >= 2 OR COUNT(DISTINCT detention_id) < 2;
### TaskGenerate a SQL query to answer [QUESTION]List the details of the teachers who teach some class whose detail has the substring 'data' but do not teach a class whose detail contains the prefix 'net'[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the details of the teachers who teach some class whose detail has the substring 'data' but do not teach a class whose detail contains the prefix 'net'[/QUESTION][SQL]SELECT Teachers.achievement_details FROM Teachers WHERE TeacherDetails LIKE '%data%' AND TeacherDetails NOT ILIKE 'net%';
### TaskGenerate a SQL query to answer [QUESTION]Which teachers teach a class that has the substring 'data' in its detail but do not teach a class that has prefix 'net' in its detail? Give me the teacher details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which teachers teach a class that has the substring 'data' in its detail but do not teach a class that has prefix 'net' in its detail? Give me the teacher details.[/QUESTION][SQL]SELECT Teachers.achievement_details FROM Teachers WHERE TeacherDetails LIKE '%data%' AND TeacherDetails NOT LIKE 'net%';
### TaskGenerate a SQL query to answer [QUESTION]List the biographical data of the students who never had a detention or student loan.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the biographical data of the students who never had a detention or student loan.[/QUESTION][SQL]SELECT student_id, bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention UNION SELECT student_id FROM Student_Loans);
### TaskGenerate a SQL query to answer [QUESTION]Which students never had a detention or student loan? Find their biographical data.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which students never had a detention or student loan? Find their biographical data.[/QUESTION][SQL]SELECT student_id, bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention UNION SELECT student_id FROM Student_Loans);
### TaskGenerate a SQL query to answer [QUESTION]What are the loan amounts and loan dates of the students who have at least 2 achievements?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the loan amounts and loan dates of the students who have at least 2 achievements?[/QUESTION][SQL]SELECT student_id, amount_of_loan, date_of_loan FROM Student_Loans WHERE student_id IN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(achievement_id) >= 2);
### TaskGenerate a SQL query to answer [QUESTION]List the amount and date of loan for the students who have two or more achievements.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the amount and date of loan for the students who have two or more achievements.[/QUESTION][SQL]SELECT student_id, SUM(amount_of_loan) AS total_amount_of_loan, MIN(date_of_loan) AS earliest_loan_date FROM Student_Loans WHERE student_id IN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(achievement_id) >= 2) GROUP BY student_id;
### TaskGenerate a SQL query to answer [QUESTION]List the detail and id of the teacher who teaches the most courses.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the detail and id of the teacher who teaches the most courses.[/QUESTION][SQL]SELECT Teachers.achievement_details, Teacher_ID FROM Teachers JOIN Classes ON Teachers.Teacher_ID = Classes.teacher_id GROUP BY Teacher_ID ORDER BY COUNT(Class_ID) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the detail and id of the teacher who teaches the largest number of courses?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the detail and id of the teacher who teaches the largest number of courses?[/QUESTION][SQL]SELECT Teachers.achievement_details, Teacher_ID FROM Teachers JOIN Classes ON Teachers.Teacher_ID = Classes.teacher_id GROUP BY Teacher_ID ORDER BY COUNT(Class_ID) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct descriptions of all the detentions which have ever happened?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct descriptions of all the detentions which have ever happened?[/QUESTION][SQL]SELECT date_achievement FROM Achievements;
### TaskGenerate a SQL query to answer [QUESTION]Return the distinct descriptions of all the detentions that have happened.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the distinct descriptions of all the detentions that have happened.[/QUESTION][SQL]SELECT date_achievement FROM Achievements;
### TaskGenerate a SQL query to answer [QUESTION]List the personal details and the address type descriptions of all the students.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the personal details and the address type descriptions of all the students.[/QUESTION][SQL]SELECT student_id, bio_data, student_details, rat.address_type_description FROM Students AS st JOIN Students_Addresses AS sa ON st.student_id = sa.student_id JOIN Ref_Address_Types AS rat ON sa.address_type_code = rat.address_type_code
### TaskGenerate a SQL query to answer [QUESTION]What are the personal details and the address type descriptions of each student?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the personal details and the address type descriptions of each student?[/QUESTION][SQL]SELECT student_id, bio_data, address_type_description FROM Students JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code;
### TaskGenerate a SQL query to answer [QUESTION]List the the address details and the biographical information of the students.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the the address details and the biographical information of the students.[/QUESTION][SQL]SELECT student_id, bio_data, student_details FROM Students;
### TaskGenerate a SQL query to answer [QUESTION]What are the address details and biographical information of each student?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the address details and biographical information of each student?[/QUESTION][SQL]SELECT student_id, bio_data, student_details FROM Students;
### TaskGenerate a SQL query to answer [QUESTION]List the biographical data and the date of the transcript of all the students.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the biographical data and the date of the transcript of all the students.[/QUESTION][SQL]SELECT student_id, bio_data, date_of_transcript FROM Students st JOIN Transcripts tr ON st.student_id = tr.student_id
### TaskGenerate a SQL query to answer [QUESTION]What are the biographical data and the date of transcript issuance of each student?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the biographical data and the date of transcript issuance of each student?[/QUESTION][SQL]SELECT student_id, bio_data, date_of_transcript FROM Students st JOIN Transcripts tr ON st.student_id = tr.student_id;
### TaskGenerate a SQL query to answer [QUESTION]How many students got the most common result in the behavioral monitoring details? Also list the result details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many students got the most common result in the behavioral monitoring details? Also list the result details.[/QUESTION][SQL]SELECT student_id, COUNT(*) AS number_of_students FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY number_of_students DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the most common result in the behavioral monitoring details. What are the count and the details of this result?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the most common result in the behavioral monitoring details. What are the count and the details of this result?[/QUESTION][SQL]SELECT Behaviour_Monitoring.achievement_type_code, COUNT(*) AS total_count FROM Behaviour_Monitoring JOIN Achievements ON Behaviour_Monitoring.student_id = Achievements.student_id GROUP BY Behaviour_Monitoring.achievement_type_code ORDER BY total_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which students not only got the most common result but also got a result obtained by 3 students in behaviour monitoring? List the student's biographical data and details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which students not only got the most common result but also got a result obtained by 3 students in behaviour monitoring? List the student's biographical data and details.[/QUESTION][SQL]SELECT student_id, bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING COUNT(*) >= 3);
### TaskGenerate a SQL query to answer [QUESTION]Find the biographical data and details of students who got not only the most common result but also a result that is obtained by 3 students in behaviour monitoring.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the biographical data and details of students who got not only the most common result but also a result that is obtained by 3 students in behaviour monitoring.[/QUESTION][SQL]SELECT student_id, bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING COUNT(*) >= 3);
### TaskGenerate a SQL query to answer [QUESTION]Which students only got the most common result for his or her all behaviour monitoring details? List the students' biographical information.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which students only got the most common result for his or her all behaviour monitoring details? List the students' biographical information.[/QUESTION][SQL]SELECT student_id, bio_data FROM Students WHERE student_id IN (SELECT DISTINCT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING COUNT(DISTINCT behaviour_monitoring_details) = 1);
### TaskGenerate a SQL query to answer [QUESTION]What is the biographical information of the students who got the most common result for their behaviour monitoring details?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the biographical information of the students who got the most common result for their behaviour monitoring details?[/QUESTION][SQL]SELECT student_id, bio_data FROM Students WHERE student_id IN (SELECT b.student_id FROM Behaviour_Monitoring b GROUP BY b.student_id ORDER BY COUNT(b.behaviour_monitoring_details) DESC LIMIT 1);
### TaskGenerate a SQL query to answer [QUESTION]Which students have gone through any event? List the students' biographical data and event date.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which students have gone through any event? List the students' biographical data and event date.[/QUESTION][SQL]SELECT student_id, bio_data, event_date FROM Student_Events se JOIN Students st ON se.student_id = st.student_id;
### TaskGenerate a SQL query to answer [QUESTION]Find the biographical data and event date for students who participated in any events.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the biographical data and event date for students who participated in any events.[/QUESTION][SQL]SELECT student_id, bio_data, event_date FROM Students JOIN Student_Events ON Students.student_id = Student_Events.student_id;
### TaskGenerate a SQL query to answer [QUESTION]How many students have joined in the most common type of event? List the number, the event type and description.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many students have joined in the most common type of event? List the number, the event type and description.[/QUESTION][SQL]SELECT student_id, COUNT(*) AS total_students, et.event_type_description FROM Student_Events se JOIN Ref_Event_Types et ON se.event_type_code = et.event_type_code GROUP BY student_id ORDER BY total_students DESC LIMIT 1
### TaskGenerate a SQL query to answer [QUESTION]What is the type of event the most students joined? Give me the number of students, and the event type code and description.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the type of event the most students joined? Give me the number of students, and the event type code and description.[/QUESTION][SQL]SELECT student_id, COUNT(*) AS student_count, et.event_type_code, et.event_type_description FROM Student_Events se JOIN Ref_Event_Types et ON se.event_type_code = et.event_type_code GROUP BY sudent_id, et.event_type_code, et.event_type_description ORDER BY student_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How are all the achievements described? List the achievement detail and the type description.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How are all the achievements described? List the achievement detail and the type description.[/QUESTION][SQL]SELECT achievement_details, achievement_type_description FROM Achievements JOIN Ref_Achievement_Type ON Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code;
### TaskGenerate a SQL query to answer [QUESTION]What are the achievement detail and the type description of each achievements?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the achievement detail and the type description of each achievements?[/QUESTION][SQL]SELECT achievement_details, r.achievement_type_description FROM Achievements a JOIN Ref_Achievement_Type r ON a.achievement_type_code = r.achievement_type_code ORDER BY date_achievement DESC;
### TaskGenerate a SQL query to answer [QUESTION]How many teachers have taught a student who has not won any achievements?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many teachers have taught a student who has not won any achievements?[/QUESTION][SQL]SELECT student_id FROM Students WHERE student_id NOT IN (SELECT DISTINCT student_id FROM Achievements);
### TaskGenerate a SQL query to answer [QUESTION]Count the number of teachers who have taught students who have never won an achievement.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of teachers who have taught students who have never won an achievement.[/QUESTION][SQL]SELECT student_id FROM Students WHERE student_id NOT IN (SELECT DISTINCT student_id FROM Achievements);
### TaskGenerate a SQL query to answer [QUESTION]List the date of the transcripts and the transcript details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the date of the transcripts and the transcript details.[/QUESTION][SQL]SELECT date_achievement, achievement_details FROM Achievements;
### TaskGenerate a SQL query to answer [QUESTION]What are the date and detail of each transcript?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the date and detail of each transcript?[/QUESTION][SQL]SELECT date_achievement, achievement_details FROM Achievements;
### TaskGenerate a SQL query to answer [QUESTION]List the achievement type code, achievement details and the date of the achievements.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the achievement type code, achievement details and the date of the achievements.[/QUESTION][SQL]SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements ORDER BY date_achievement DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the type code, details, and date of each achievement?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the type code, details, and date of each achievement?[/QUESTION][SQL]SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements ORDER BY date_achievement DESC;
### TaskGenerate a SQL query to answer [QUESTION]Show the detention start time and end time of the detentions.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the detention start time and end time of the detentions.[/QUESTION][SQL]SELECT date_achievement, date_achievement FROM Detention
### TaskGenerate a SQL query to answer [QUESTION]What are the starting time and ending time of each detention record?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the starting time and ending time of each detention record?[/QUESTION][SQL]SELECT date_achievement, date_achievement FROM Achievements;
### TaskGenerate a SQL query to answer [QUESTION]Show the biographical information of the students whose details include the substring 'Suite'.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the biographical information of the students whose details include the substring 'Suite'.[/QUESTION][SQL]SELECT student_id, bio_data FROM Students WHERE student_details LIKE '%Suite%'
### TaskGenerate a SQL query to answer [QUESTION]Which students have 'Suite' as a substring in their details? Give me their biographical information.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which students have 'Suite' as a substring in their details? Give me their biographical information.[/QUESTION][SQL]SELECT student_id, bio_data FROM Students WHERE student_details ilike '%Suite%'
### TaskGenerate a SQL query to answer [QUESTION]List the details for all the pairs of teachers and students who are in the same class.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the details for all the pairs of teachers and students who are in the same class.[/QUESTION][SQL]SELECT student_id, teacher_id FROM Classes
### TaskGenerate a SQL query to answer [QUESTION]What are the pairs of teachers and students who are in the same class? Give me the pairs of their details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the pairs of teachers and students who are in the same class? Give me the pairs of their details.[/QUESTION][SQL]SELECT student_id, teacher_id FROM Classes;
### TaskGenerate a SQL query to answer [QUESTION]How many courses do teachers teach at most? Also find the id of the teacher who teaches the most.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many courses do teachers teach at most? Also find the id of the teacher who teaches the most.[/QUESTION][SQL]SELECT student_id, COUNT(*) AS course_count FROM Classes GROUP BY student_id ORDER BY course_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which teacher teaches the most courses? Give me the id of the teacher and the number of courses he or she teaches.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which teacher teaches the most courses? Give me the id of the teacher and the number of courses he or she teaches.[/QUESTION][SQL]SELECT Teachers.achievement_type_code, COUNT(*) AS num_achievements FROM Achievements JOIN Teacher ON Achievements.student_id = Teacher.teacher_id GROUP BY Teacher.achievement_type_code ORDER BY num_achievements DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How many courses do students take at most? Also find the id of the student who takes the most courses.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many courses do students take at most? Also find the id of the student who takes the most courses.[/QUESTION][SQL]SELECT student_id, COUNT(*) AS course_count FROM Classes GROUP BY student_id ORDER BY course_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which student is taking the most courses? Give me the id of the student and the number of courses he or she is taking.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which student is taking the most courses? Give me the id of the student and the number of courses he or she is taking.[/QUESTION][SQL]SELECT student_id, COUNT(*) AS course_count FROM Classes GROUP BY student_id ORDER BY course_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which students take 2 courses? List student id and details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which students take 2 courses? List student id and details.[/QUESTION][SQL]SELECT student_id, student_details FROM Students WHERE student_id IN (SELECT DISTINCT student_id FROM Classes GROUP BY student_id HAVING COUNT(class_id) = 2);
### TaskGenerate a SQL query to answer [QUESTION]What are the ids and details of the students who take 2 courses?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids and details of the students who take 2 courses?[/QUESTION][SQL]SELECT student_id, student_details FROM Students WHERE student_id IN (SELECT DISTINCT student_id FROM Classes GROUP BY student_id HAVING COUNT(class_id) >= 2);
### TaskGenerate a SQL query to answer [QUESTION]What is the least common detention type? Show the type code and the description.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the least common detention type? Show the type code and the description.[/QUESTION][SQL]SELECT date_achievement, COUNT(*) AS number_of_achievements FROM Achievements GROUP BY achievement_type_code ORDER BY number_of_achievements ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give me the type code and description of the least common detention type.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give me the type code and description of the least common detention type.[/QUESTION][SQL]SELECT date_achievement, COUNT(*) AS number_of_achievements FROM Achievements GROUP BY date_achievement ORDER BY number_of_achievements ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which students have a student loan more than the average amount? List the students' biographical data and the details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which students have a student loan more than the average amount? List the students' biographical data and the details.[/QUESTION][SQL]SELECT student_id, bio_data, student_details FROM Student_Loans sl JOIN Students st ON sl.student_id = st.student_id WHERE amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans);
### TaskGenerate a SQL query to answer [QUESTION]Find the biographical data and details for students whose student loan is above the average amount.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the biographical data and details for students whose student loan is above the average amount.[/QUESTION][SQL]SELECT student_id, bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans WHERE amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans));
### TaskGenerate a SQL query to answer [QUESTION]When was the earliest date of loan?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]When was the earliest date of loan?[/QUESTION][SQL]SELECT student_id, MIN(date_of_loan) AS earliest_loan_date FROM Student_Loans GROUP BY student_id;
### TaskGenerate a SQL query to answer [QUESTION]Return the earliest date of loan in the record.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the earliest date of loan in the record.[/QUESTION][SQL]SELECT student_id, MIN(date_of_loan) AS earliest_loan FROM Student_Loans GROUP BY student_id;
### TaskGenerate a SQL query to answer [QUESTION]Which student has the loan with the minimum value? List the student's biographical information.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which student has the loan with the minimum value? List the student's biographical information.[/QUESTION][SQL]SELECT student_id, bio_data FROM Student_Loans sl JOIN Students st ON sl.student_id = st.student_id ORDER BY amount_of_loan ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the biographical information of the student with the smallest student loan.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the biographical information of the student with the smallest student loan.[/QUESTION][SQL]SELECT student_id, bio_data FROM Student_Loans sl JOIN Students st ON sl.student_id = st.student_id ORDER BY amount_of_loan ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]When was the transcript issued for the student with loan of maximum value?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]When was the transcript issued for the student with loan of maximum value?[/QUESTION][SQL]SELECT student_id, MAX(amount_of_loan) AS max_loan_amount, MIN(date_of_transcript) AS earliest_transcript FROM Student_Loans JOIN Transcripts ON Student_Loans.student_id = Transcripts.student_id GROUP BY student_id ORDER BY max_loan_amount DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the transcript issuance date for the student with the largest amount of loan?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the transcript issuance date for the student with the largest amount of loan?[/QUESTION][SQL]SELECT student_id, MAX(amount_of_loan) AS max_amount_of_loan FROM Student_Loans GROUP BY student_id ORDER BY max_amount_of_loan DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which teachers have taught the student with the earliest transcript issuance? List the teacher details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which teachers have taught the student with the earliest transcript issuance? List the teacher details.[/QUESTION][SQL]SELECT student_id FROM Transcripts WHERE date_of_transcript = (SELECT MIN(date_of_transcript) FROM Transcripts);
### TaskGenerate a SQL query to answer [QUESTION]Find the details of the teachers who have taught the student with the earliest transcript issuance.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the details of the teachers who have taught the student with the earliest transcript issuance.[/QUESTION][SQL]SELECT student_id, MIN(t.date_of_transcript) AS min_date FROM Transcripts t GROUP BY t.student_id ORDER BY min_date ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How much total loan does each student have? List the student ids and the amounts.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How much total loan does each student have? List the student ids and the amounts.[/QUESTION][SQL]SELECT student_id, SUM(amount_of_loan) AS total_amount_of_loan FROM Student_Loans GROUP BY student_id ORDER BY total_amount_of_loan DESC;
### TaskGenerate a SQL query to answer [QUESTION]For each student, find the student id and the total amount of loan he or she has.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each student, find the student id and the total amount of loan he or she has.[/QUESTION][SQL]SELECT student_id, SUM(amount_of_loan) AS total_amount_of_loan FROM Student_Loans GROUP BY student_id
### TaskGenerate a SQL query to answer [QUESTION]How many courses does each student take? List the student id, the student biographical data and the course count.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many courses does each student take? List the student id, the student biographical data and the course count.[/QUESTION][SQL]SELECT student_id, bio_data, COUNT(*) AS number_of_courses FROM Students JOIN Classes ON Students.student_id = Classes.student_id GROUP BY student_id, bio_data
### TaskGenerate a SQL query to answer [QUESTION]For each student, find the student id, student biographical data, and the number of courses he or she takes.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each student, find the student id, student biographical data, and the number of courses he or she takes.[/QUESTION][SQL]SELECT student_id, bio_data, COUNT(class_id) AS num_classes FROM Students JOIN Classes ON Students.student_id = Classes.student_id GROUP BY student_id, bio_data
### TaskGenerate a SQL query to answer [QUESTION]How many students have gone through a detention?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many students have gone through a detention?[/QUESTION][SQL]SELECT date_achievement FROM Achievements WHERE achievement_type_code = 'DETENTION' GROUP BY dae_achievement;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of students who have a detention record.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of students who have a detention record.[/QUESTION][SQL]SELECT student_id FROM Detention;
### TaskGenerate a SQL query to answer [QUESTION]What is the code and description of the most common student address type?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the code and description of the most common student address type?[/QUESTION][SQL]SELECT student_id, COUNT(*) AS total_count FROM Students_Addresses GROUP BY student_id ORDER BY total_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the most common student address type? Give me the code and description of the address type.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the most common student address type? Give me the code and description of the address type.[/QUESTION][SQL]SELECT student_id, rat.address_type_description FROM Students_Addresses sa JOIN Ref_Address_Types rat ON sa.address_type_code = rat.address_type_code GROUP BY sstu_id, rat.address_type_description ORDER BY COUNT(*) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]For those students who have gone through an event, who do not have a student loan? List the students' biographical data[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For those students who have gone through an event, who do not have a student loan? List the students' biographical data[/QUESTION][SQL]SELECT student_id, bio_data FROM Students WHERE student_id IN (SELECT se.student_id FROM Student_Events se LEFT JOIN Student_Loans sl ON se.student_id = sl.student_id WHERE sl.student_id IS NULL);
### TaskGenerate a SQL query to answer [QUESTION]Among the students who have an event record, who do not have a student loan? Return the students' biographical data.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Among the students who have an event record, who do not have a student loan? Return the students' biographical data.[/QUESTION][SQL]SELECT student_id, bio_data FROM Students WHERE student_id IN (SELECT se.student_id FROM Student_Events se LEFT JOIN Student_Loans sl ON se.student_id = sl.student_id WHERE sl.student_id IS NULL);
### TaskGenerate a SQL query to answer [QUESTION]List the start time and the end time of the students' addresses for the students who have 2 transcripts.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the start time and the end time of the students' addresses for the students who have 2 transcripts.[/QUESTION][SQL]SELECT student_id, date_from AS start_date, date_to AS end_date FROM Students_Addresses WHERE student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(transcript_id) >= 2);
### TaskGenerate a SQL query to answer [QUESTION]What are the start time and end time of addresses for the students who receive 2 transcripts?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the start time and end time of addresses for the students who receive 2 transcripts?[/QUESTION][SQL]SELECT student_id, date_from AS start_date, date_to AS end_date FROM Students_Addresses WHERE student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(transcript_id) >= 2);
### TaskGenerate a SQL query to answer [QUESTION]When did all the detentions start?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]When did all the detentions start?[/QUESTION][SQL]SELECT date_achievement FROM Achievements WHERE achievement_type_code = 'DETENTION' ORDER BY date_achievement ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give me the detention start date for all the detention records.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give me the detention start date for all the detention records.[/QUESTION][SQL]SELECT date_achievement FROM Achievements;
### TaskGenerate a SQL query to answer [QUESTION]List all the author names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all the author names.[/QUESTION][SQL]SELECT amount FROM Author;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all the authors?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all the authors?[/QUESTION][SQL]SELECT amount FROM Author;
### TaskGenerate a SQL query to answer [QUESTION]Show all Client names and their addresses.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all Client names and their addresses.[/QUESTION][SQL]SELECT Client.IdOrder, Clien.Name, Clien.Address FROM Client AS Clien;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and addressed of all clients?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and addressed of all clients?[/QUESTION][SQL]SELECT Client.IdOrder, Clien.Name, Clien.Address FROM Client AS Clien;
### TaskGenerate a SQL query to answer [QUESTION]List all Book titles, ISBNs, and sale prices.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all Book titles, ISBNs, and sale prices.[/QUESTION][SQL]SELECT Book.ISBN, Book.Title, Book.SalePrice FROM Book ORDER BY Book.SalePrice DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles, ISBNs, and sale prices for all books?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles, ISBNs, and sale prices for all books?[/QUESTION][SQL]SELECT Book.ISBN, Book.Title, Book.SalePrice FROM Book ORDER BY Book.SalePrice DESC;
### TaskGenerate a SQL query to answer [QUESTION]How many books do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many books do we have?[/QUESTION][SQL]SELECT Book.ISBN, COUNT(*) AS total_books FROM Book GROUP BY Book.ISBN;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of books.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of books.[/QUESTION][SQL]SELECT Book.ISBN, COUNT(*) AS total_books FROM Book GROUP BY Book.ISBN;
### TaskGenerate a SQL query to answer [QUESTION]How many authors are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many authors are there?[/QUESTION][SQL]SELECT amount FROM Author;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of authors.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of authors.[/QUESTION][SQL]SELECT amount FROM Author;
### TaskGenerate a SQL query to answer [QUESTION]How many clients are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many clients are there?[/QUESTION][SQL]SELECT Client.IdOrder FROM Client;
### TaskGenerate a SQL query to answer [QUESTION]Return the number of clients.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the number of clients.[/QUESTION][SQL]SELECT Client.IdOrder FROM Orders;
### TaskGenerate a SQL query to answer [QUESTION]List names and addresses of all clients in alphabetical order by their names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List names and addresses of all clients in alphabetical order by their names.[/QUESTION][SQL]SELECT Client.IdOrder, Clien.Name, Clien.Address FROM Client AS Clien ORDER BY Clien.Name ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and addressed of all clients, ordered alphabetically by name?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and addressed of all clients, ordered alphabetically by name?[/QUESTION][SQL]SELECT Client.IdOrder, Clien.Name, Clien.Address FROM Client AS Clien ORDER BY Clien.Name ASC;
### TaskGenerate a SQL query to answer [QUESTION]Show all book titles and corresponding author names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all book titles and corresponding author names.[/QUESTION][SQL]SELECT Book.ISBN, Book.Title, Author.Name FROM Book JOIN Author ON Book.Author = Author.idAuthor;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all books and their corresponding authors?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all books and their corresponding authors?[/QUESTION][SQL]SELECT Book.ISBN, Book.Title, Author.Name FROM Book JOIN Author ON Book.Author = Author.idAuthor;
### TaskGenerate a SQL query to answer [QUESTION]Show all order ids and their client names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all order ids and their client names.[/QUESTION][SQL]SELECT Orders.IdOrder, Clients.Name FROM Orders JOIN Client ON Orders.IdClient = Client.IdClient;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of all orders and the corresponding client names?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of all orders and the corresponding client names?[/QUESTION][SQL]SELECT Orders.IdOrder, C.Name FROM Orders Ord JOIN Client C ON Ord.IdClient = C.IdClient;
### TaskGenerate a SQL query to answer [QUESTION]Show all author names and the numbers of books each has written.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all author names and the numbers of books each has written.[/QUESTION][SQL]SELECT amount, COUNT(*) AS number_of_books FROM (SELECT ab.Author, COUNT(ab.ISBN) AS amoumt FROM Author_Book ab GROUP BY ab.Author) subquery;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all the authors, and how many books has each written?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all the authors, and how many books has each written?[/QUESTION][SQL]SELECT amount, a.name FROM (SELECT ab.author, COUNT(ab.isbn) AS amoumt FROM author_book ab GROUP BY ab.author) AS subquery JOIN author a ON subquery.author = a.idauthor;
### TaskGenerate a SQL query to answer [QUESTION]Show all book isbns and the numbers of orders for each.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all book isbns and the numbers of orders for each.[/QUESTION][SQL]SELECT ISBN, COUNT(*) AS num_orders FROM Books_Order GROUP BY ISBN ORDER BY num_orders DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are all isbns for each book, and how many times has each been ordered?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all isbns for each book, and how many times has each been ordered?[/QUESTION][SQL]SELECT ISBN, COUNT(*) AS total_orders FROM Books_Order GROUP BY ISBN;
### TaskGenerate a SQL query to answer [QUESTION]Show all book isbns and the total amount ordered for each.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all book isbns and the total amount ordered for each.[/QUESTION][SQL]SELECT ISBN, SUM(amount) AS total_amount FROM Books_Order GROUP BY ISBN;
### TaskGenerate a SQL query to answer [QUESTION]What are the isbns for all books, and what is the total amount ordered for each?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the isbns for all books, and what is the total amount ordered for each?[/QUESTION][SQL]SELECT ISBN, SUM(amount) AS total_amount_ordered FROM Books_Order GROUP BY ISBN;
### TaskGenerate a SQL query to answer [QUESTION]Show the book title corresponding to the book with the most number of orders.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the book title corresponding to the book with the most number of orders.[/QUESTION][SQL]SELECT Book.ISBN, COUNT(Books_Order.IdOrder) AS order_count FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN ORDER BY order_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the title of the book that has been ordered the greatest number of times?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the title of the book that has been ordered the greatest number of times?[/QUESTION][SQL]SELECT Books_Order.ISBN, Book.Title FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN GROUP BY Books_Order.ISBN, Book.Title ORDER BY COUNT(Books_Order.idOrder) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show the book title and purchase price of the book that has had the greatest amount in orders.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the book title and purchase price of the book that has had the greatest amount in orders.[/QUESTION][SQL]SELECT Book.ISBN, Book.Title, SUM(Books_Order.amount) AS total_orders FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN, Book.Title ORDER BY total_orders DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the title and purchase price of the book that has the highest total order amount?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the title and purchase price of the book that has the highest total order amount?[/QUESTION][SQL]SELECT Book.ISBN, Book.Title, SUM(Books_Order.amount) AS TotalAmount FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN, Book.Title ORDER BY TotalAmount DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show the titles of books that have been ordered.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the titles of books that have been ordered.[/QUESTION][SQL]SELECT Books_Order.ISBN, Book.Title FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN;
### TaskGenerate a SQL query to answer [QUESTION]What are the different titles of books that have been ordered in the past?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different titles of books that have been ordered in the past?[/QUESTION][SQL]SELECT Books_Order.ISBN, Book.Title FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN;
### TaskGenerate a SQL query to answer [QUESTION]Show the names of clients who have ordered at least once.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the names of clients who have ordered at least once.[/QUESTION][SQL]SELECT Client.IdOrder, c.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the different clients who have made an order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the different clients who have made an order?[/QUESTION][SQL]SELECT Client.IdOrder, Client.Name FROM Orders JOIN Client ON Orders.IdClient = Client.IdClient;
### TaskGenerate a SQL query to answer [QUESTION]Show all client names and the number of orders each has made.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all client names and the number of orders each has made.[/QUESTION][SQL]SELECT Client.IdOrder, COUNT(DISTINCT Clieny.IdOrder) AS num_orders FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.Name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all the clients, and how many times has each of them ordered?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all the clients, and how many times has each of them ordered?[/QUESTION][SQL]SELECT Client.IdOrder, COUNT(DISTINCT Clieny.IdOrder) AS number_of_orders FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.Name;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the client with the most number of orders?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the client with the most number of orders?[/QUESTION][SQL]SELECT Client.IdOrder, COUNT(ClienT.IdOrder) AS NumberOfOrders FROM Orders JOIN Client ON Orders.IdClient = Client.IdClient GROUP BY Client.Name ORDER BY NumberOfOrders DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the name of the client who has made the most orders.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the name of the client who has made the most orders.[/QUESTION][SQL]SELECT Client.IdOrder, COUNT(*) AS num_orders FROM Orders JOIN Client ON Orders.IdClient = Client.IdClient GROUP BY Orders.IdClient ORDER BY num_orders DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show the client names and their total amounts of books ordered.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the client names and their total amounts of books ordered.[/QUESTION][SQL]SELECT Client.IdOrder, SUM(Book_Amount.amount) AS TotalAmount FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient JOIN Books_Order Book_Amount ON Orders.IdOrder = Book_Amount.idOrder GROUP BY Client.IdOrder;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all the clients, and the total amount of books ordered by each?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all the clients, and the total amount of books ordered by each?[/QUESTION][SQL]SELECT Client.IdOrder, SUM(Book_Amount.amount) AS TotalAmount FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient JOIN Books_Order ON Orders.IdOrder = Books_Order.idOrder GROUP BY Client.IdOrder;
### TaskGenerate a SQL query to answer [QUESTION]Show the client name who has the most total amount of books ordered.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the client name who has the most total amount of books ordered.[/QUESTION][SQL]SELECT Client.IdOrder, SUM(Book_Amount.amount) AS TotalAmount FROM Books_Order JOIN Orders ON Books_Order.idOrder = Orders.idOrder GROUP BY Orders.idClient ORDER BY TotalAmount DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the client who has ordered the greatest total amount of books?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the client who has ordered the greatest total amount of books?[/QUESTION][SQL]SELECT Client.IdOrder, SUM(Book_Amount.amount) AS TotalAmount FROM Books_Order JOIN Orders ON Books_Order.idOrder = Orders.idOrder GROUP BY Orders.idOrder ORDER BY TotalAmount DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show all book titles for books that have no orders.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all book titles for books that have no orders.[/QUESTION][SQL]SELECT Book.ISBN, Book.Title FROM Book LEFT JOIN Books_Order ON Book.ISBN = Books_Order.ISBN WHERE Books_Order.ISBN IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles of books that have never been ordered?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles of books that have never been ordered?[/QUESTION][SQL]SELECT Book.ISBN, Book.Title FROM Book LEFT JOIN Books_Order ON Book.ISBN = Books_Order.ISBN WHERE Books_Order.ISBN IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]Show all client names for clients who have not made orders.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all client names for clients who have not made orders.[/QUESTION][SQL]SELECT Client.IdOrder FROM Client WHERE IdOrder NOT IN (SELECT IdOrder FROM Orders);
### TaskGenerate a SQL query to answer [QUESTION]What are the names of clients who have never made an order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of clients who have never made an order?[/QUESTION][SQL]SELECT Client.IdOrder FROM Client WHERE IdOrder NOT IN (SELECT IdOrder FROM Orders);
### TaskGenerate a SQL query to answer [QUESTION]What is the maximum and the minimum sale price?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the maximum and the minimum sale price?[/QUESTION][SQL]SELECT Books_Order.amount, MIN(Book.saleprice), MAX(Book.saleprice) FROM Books_Order JOIN Book ON Books_Order.isbn = Book.isbn GROUP BY Books_Order.amount;
### TaskGenerate a SQL query to answer [QUESTION]Give the maximum and minimum sale price of books.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the maximum and minimum sale price of books.[/QUESTION][SQL]SELECT Books_Order.ISBN, MIN(Book.SalePrice) AS Min_Sale_Price, MAX(Book.SalePrice) AS Max_Sale_Price FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Books_Order.ISBN;
### TaskGenerate a SQL query to answer [QUESTION]What is the average purchase price and the average sale price?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average purchase price and the average sale price?[/QUESTION][SQL]SELECT Books_Order.ISBN, AVG(Book.PurchasePrice) AS avg_purchase_price, AVG(Book.SalePrice) AS avg_sale_price FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN GROUP BY Books_Order.ISBN;
### TaskGenerate a SQL query to answer [QUESTION]Give the average purchase price and average sale price for books.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the average purchase price and average sale price for books.[/QUESTION][SQL]SELECT Books_Order.ISBN, AVG(Book.PurchasePrice) AS avg_purchase_price, AVG(Book.SalePrice) AS avg_sale_price FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Books_Order.ISBN;
### TaskGenerate a SQL query to answer [QUESTION]What is the maximum difference between the sale price and purchase price?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the maximum difference between the sale price and purchase price?[/QUESTION][SQL]SELECT ISBN, MAX(SalePrice - PurchasePrice) AS max_difference FROM Book GROUP BY ISBN ORDER BY max_difference DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Return the largest difference in sale price and purchase price.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the largest difference in sale price and purchase price.[/QUESTION][SQL]SELECT ISBN, MAX(SalePrice - PurchasePrice) AS max_difference FROM Book GROUP BY ISBN ORDER BY max_difference DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List all book titles which have sale prices higher than the average.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all book titles which have sale prices higher than the average.[/QUESTION][SQL]SELECT Book.ISBN, Book.Title FROM Book WHERE Book.SalePrice > (SELECT AVG(SalePrice) FROM Book);
### TaskGenerate a SQL query to answer [QUESTION]What are the titles of books with sale prices above the average sale price across all books?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles of books with sale prices above the average sale price across all books?[/QUESTION][SQL]SELECT Book.ISBN, Book.Title FROM Book WHERE Book.SalePrice > (SELECT AVG(SalePrice) FROM Book);
### TaskGenerate a SQL query to answer [QUESTION]List all book titles which have the lowest sale price.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all book titles which have the lowest sale price.[/QUESTION][SQL]SELECT Book.ISBN, Book.Title FROM Book WHERE Book.SalePrice = (SELECT MIN(SalePrice) FROM Book);
### TaskGenerate a SQL query to answer [QUESTION]What are the titles of books that have a sale price equal to the lowest sale price across all books?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles of books that have a sale price equal to the lowest sale price across all books?[/QUESTION][SQL]SELECT Books_Order.ISBN, Book.Title FROM Books_Ordre JOIN Book ON Books_Ordre.ISBN = Book.ISBN WHERE Books_Ordre.amount = (SELECT MIN(amount) FROM Books_Ordre);
### TaskGenerate a SQL query to answer [QUESTION]List all book titles which have highest purchase prices.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all book titles which have highest purchase prices.[/QUESTION][SQL]SELECT Book.ISBN, Book.Title FROM Book WHERE Book.PurchasePrice = (SELECT MAX(Book.PurchasePrice) FROM Book);
### TaskGenerate a SQL query to answer [QUESTION]What are the titles of books with the highest purchase price across all books?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles of books with the highest purchase price across all books?[/QUESTION][SQL]SELECT Books_Order.ISBN, Book.Title FROM Books_Ordre JOIN Book ON Books_Ordre.ISBN = Book.ISBN WHERE Books_Ordre.amount = (SELECT MAX(amount) FROM Books_Ordre);
### TaskGenerate a SQL query to answer [QUESTION]What is the average sale price of books written by George Orwell?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average sale price of books written by George Orwell?[/QUESTION][SQL]SELECT Author.IdOrder, AVG(Book.SalePrice) AS Average_Sale_Price FROM Book JOIN Author ON Book.Author = Author.IdAuthor WHERE LOWER(Author.Name) = 'george orwell' GROUP BY Author.IdOrder;
### TaskGenerate a SQL query to answer [QUESTION]Give the average sale price of books authored by George Orwell.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the average sale price of books authored by George Orwell.[/QUESTION][SQL]SELECT Author.IdOrder, AVG(Book.SalePrice) AS Average_Sale_Price FROM Book JOIN Author ON Book.Author = Author.IdAuthor WHERE LOWER(Author.Name) = 'george orwell' GROUP BY Author.IdOrder;
### TaskGenerate a SQL query to answer [QUESTION]What are sale prices of books written by Plato?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are sale prices of books written by Plato?[/QUESTION][SQL]SELECT Books_Order.amount, Book.saleprice FROM Book JOIN Author_Book ON Book.isbn = Author_Book.isbn JOIN Author ON Author_Book.author = Author.idauthor WHERE LOWER(Author.name) = 'plato';
### TaskGenerate a SQL query to answer [QUESTION]Return the sale prices of books authored by Plato.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the sale prices of books authored by Plato.[/QUESTION][SQL]SELECT Books_Order.amount, Book.saleprice FROM Book JOIN Author_Book ON Book.isbn = Author_Book.isbn JOIN Author ON Author_Book.author = Author.idauthor WHERE LOWER(Author.name) = 'plato';
### TaskGenerate a SQL query to answer [QUESTION]What is the title of the book written by George Orwell that has the lowest sale price?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the title of the book written by George Orwell that has the lowest sale price?[/QUESTION][SQL]SELECT Books_Order.ISBN, Book.Title FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN WHERE Book.Author = (SELECT idAuthor FROM Author WHERE LOWER(Name) = 'george orwell') ORDER BY Book.SalePrice ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the title of book by George Orwell that has the lowest saleprice.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the title of book by George Orwell that has the lowest saleprice.[/QUESTION][SQL]SELECT Books_Order.ISBN, Book.Title FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN WHERE Book.Author = (SELECT idAuthor FROM Author WHERE LOWER(Name) = 'george orwell') ORDER BY Book.SalePrice ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the title of the book written by Plato has price lower than the average sale price of all books?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the title of the book written by Plato has price lower than the average sale price of all books?[/QUESTION][SQL]SELECT Books_Order.ISBN, Book.Title FROM Book JOIN Author ON Book.Author = Author.idAuthor JOIN Books_Order ON Book.ISBN = Books_Order.ISBN WHERE Book.SalePrice < (SELECT AVG(SalePrice) FROM Book);
### TaskGenerate a SQL query to answer [QUESTION]Give the titles of books authored by Plato that have a sale price lower than the average sale price across all books.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the titles of books authored by Plato that have a sale price lower than the average sale price across all books.[/QUESTION][SQL]SELECT Books_Order.ISBN, Book.Title FROM Book JOIN Author ON Book.Author = Author.idAuthor JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Books_Order ON Book.ISBN = Books_Order.ISBN WHERE Author.Name = 'Plato' AND Book.SalePrice < (SELECT AVG(SalePrice) FROM Book);
### TaskGenerate a SQL query to answer [QUESTION]Who is the author of the book "Pride and Prejudice"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Who is the author of the book "Pride and Prejudice"?[/QUESTION][SQL]SELECT amount FROM Book WHERE Title = 'Pride and Prejudice'
### TaskGenerate a SQL query to answer [QUESTION]Give the name of the author who wrote the book titled Pride and Prejudice.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the name of the author who wrote the book titled Pride and Prejudice.[/QUESTION][SQL]SELECT amount FROM Book WHERE Title = 'Pride and Prejudice'
### TaskGenerate a SQL query to answer [QUESTION]List titles of all books published by an author whose name contains the string 'Plato'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List titles of all books published by an author whose name contains the string 'Plato'?[/QUESTION][SQL]SELECT Book.ISBN, Book.Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE LOWER(Author.Name) LIKE '%plato%' ORDER BY Book.Title;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles of all books written by an author with a name that contains Plato?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles of all books written by an author with a name that contains Plato?[/QUESTION][SQL]SELECT Book.ISBN, Book.Title FROM Book JOIN Author ON Book.Author = CAST(Author.idAuthor AS CHAR(4)) WHERE LOWER(Author.Name) LIKE '%plato%' ORDER BY Book.Title;
### TaskGenerate a SQL query to answer [QUESTION]How many orders do we have for "Pride and Prejudice"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many orders do we have for "Pride and Prejudice"?[/QUESTION][SQL]SELECT Books_Order.amount FROM Book WHERE Title = 'Pride and Prejudice'
### TaskGenerate a SQL query to answer [QUESTION]Return the number of orders received for Pride and Prejudice.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the number of orders received for Pride and Prejudice.[/QUESTION][SQL]SELECT Books_Order.amount FROM Book WHERE Title = 'Pride and Prejudice'
### TaskGenerate a SQL query to answer [QUESTION]Show ids for orders including both "Pride and Prejudice" and "The Little Prince".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show ids for orders including both "Pride and Prejudice" and "The Little Prince".[/QUESTION][SQL]SELECT Orders.IdOrder FROM Orders WHERE EXISTS (SELECT 1 FROM Books_Order bo JOIN Book bk ON bo.ISBN = bk.ISBN WHERE bo.IdOrder = Orders.IdOrder AND bk.Title ilike '%Pride%and%Prejudice%') AND EXISTS (SELECT 1 FROM Books_Order bo JOIN Book bk ON bo.ISBN = bk.ISBN WHERE bo.IdOrder = Orders.IdOrder AND bk.Title ilike '%Little%Prince%');
### TaskGenerate a SQL query to answer [QUESTION]What are the order ids for orders that include both Pride and Prejudice and The Little Prince?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the order ids for orders that include both Pride and Prejudice and The Little Prince?[/QUESTION][SQL]SELECT Books_Order.IdOrder FROM Books_Order WHERE Books_Order.ISBN IN (SELECT Book.ISBN FROM Book WHERE Book.Title = 'Pride and Prejudice' OR Book.Title = 'The Little Prince') GROUP BY Books_Order.IdOrder HAVING COUNT(DISTINCT Books_Order.ISBN) = 2;
### TaskGenerate a SQL query to answer [QUESTION]Show all book isbns which were ordered by both client Peter Doe and client James Smith.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all book isbns which were ordered by both client Peter Doe and client James Smith.[/QUESTION][SQL]SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = 'PETER DOE') AND ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = 'JAMES SMITH'));
### TaskGenerate a SQL query to answer [QUESTION]What are the isbns of books ordered by both clients named Peter Doe and James Smith?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the isbns of books ordered by both clients named Peter Doe and James Smith?[/QUESTION][SQL]SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'Peter Doe') AND IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'James Smith')));
### TaskGenerate a SQL query to answer [QUESTION]Find the title of books which are ordered by client Peter Doe but not client James Smith.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the title of books which are ordered by client Peter Doe but not client James Smith.[/QUESTION][SQL]SELECT Books_Order.ISBN, Book.Title FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Books_Order.IdOrder IN (SELECT Orders.IdOrder FROM Orders JOIN Client ON Orders.IdClient = Client.IdClient WHERE Client.Name = 'Peter Doe') AND Books_Order.IdOrder NOT IN (SELECT Orders.IdOrder FROM Orders JOIN Client ON Orders.idclient = client.idclient where client.name = 'James Smith');
### TaskGenerate a SQL query to answer [QUESTION]What are the titles of books that the client Peter Doe ordered, but the client James Smith did not?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles of books that the client Peter Doe ordered, but the client James Smith did not?[/QUESTION][SQL]SELECT Books_Order.ISBN, Book.Title FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Books_Order.IdOrder IN (SELECT Orders.IdOrder FROM Orders JOIN Client ON Orders.IdClient = Client.IdClient WHERE LOWER(Client.Name) = 'peter doe') AND Books_Order.IdOrder NOT IN (SELECT Orders.IdOrder FROM Orders JOIN Client ON Orders.idclient = client.idclient WHERE LOWER(client.name) = 'james smith');
### TaskGenerate a SQL query to answer [QUESTION]Show all client names who have orders for "Pride and Prejudice".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all client names who have orders for "Pride and Prejudice".[/QUESTION][SQL]SELECT Client.IdOrder, Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient JOIN Books_Order ON Orders.IdOrder = Books_Order.idOrder JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice' GROUP BY Client.Name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of clients who have ordered Pride and Prejudice?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of clients who have ordered Pride and Prejudice?[/QUESTION][SQL]SELECT Client.IdOrder, Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient JOIN Books_Order ON Orders.IdOrder = Books_Order.idOrder JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice'
### TaskGenerate a SQL query to answer [QUESTION]How many books are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many books are there?[/QUESTION][SQL]SELECT book.Book_ID FROM book;
### TaskGenerate a SQL query to answer [QUESTION]List the titles of books in ascending alphabetical order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the titles of books in ascending alphabetical order.[/QUESTION][SQL]SELECT book.Book_ID, book.title FROM book ORDER BY title ASC;
### TaskGenerate a SQL query to answer [QUESTION]List the titles of books in descending order of pages.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the titles of books in descending order of pages.[/QUESTION][SQL]SELECT book.Book_ID, book.title FROM book ORDER BY book.pages DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the types and release dates of books?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the types and release dates of books?[/QUESTION][SQL]SELECT book.Book_ID, book.Title, book.Type, book.Release FROM book ORDER BY book.Book_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the maximum and minimum number of chapters for each book?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the maximum and minimum number of chapters for each book?[/QUESTION][SQL]SELECT book.Book_ID, MIN(b.book_chapters) AS min_chapters, MAX(b.book_chapters) AS max_chapters FROM (SELECT b.Chapters AS book_chapters FROM book b UNION ALL SELECT r.Book_ID, 0 AS Chapters FROM review r WHERE NOT EXISTS (SELECT 1 FROM book WHERE Book_ID = r.Book_ID)) AS b GROUP BY book.Book_ID ORDER BY book.Book_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles of books that are not "Poet"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles of books that are not "Poet"?[/QUESTION][SQL]SELECT book.Book_ID, book.Title FROM book WHERE book.Type!= 'Poet' ORDER BY book.Book_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the average rating in reviews?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average rating in reviews?[/QUESTION][SQL]SELECT review.Rating FROM review;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles and ratings of books?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles and ratings of books?[/QUESTION][SQL]SELECT book.Book_ID, book.Title, review.Rating FROM book JOIN review ON book.Book_ID = review.Book_ID;
### TaskGenerate a SQL query to answer [QUESTION]What is the rating of the book with the largest number of chapters?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the rating of the book with the largest number of chapters?[/QUESTION][SQL]SELECT review.Rating FROM review WHERE review.Book_ID IN (SELECT Book_ID FROM book ORDER BY Chapters DESC LIMIT 1)
### TaskGenerate a SQL query to answer [QUESTION]What is the rank of the book with the smallest number of pages?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the rank of the book with the smallest number of pages?[/QUESTION][SQL]SELECT book.Book_ID, book.Pages, review.Rank FROM book AS book JOIN review ON book.Book_ID = review.Book_ID ORDER BY book.Pages ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the title of the book with the highest rank in the review?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the title of the book with the highest rank in the review?[/QUESTION][SQL]SELECT book.Book_ID, book.Title FROM book JOIN review ON book.Book_ID = review.Book_ID WHERE review.Rank = (SELECT MAX(review.Rank) FROM review);
### TaskGenerate a SQL query to answer [QUESTION]What is the average number of readers for books of type "Novel"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average number of readers for books of type "Novel"?[/QUESTION][SQL]SELECT review.Readers_in_Million FROM review WHERE book.type = 'Novel' GROUP BY review.Book_ID ORDER BY review.Book_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]For each book type return the type and the number of books of that type.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each book type return the type and the number of books of that type.[/QUESTION][SQL]SELECT book.Book_ID, book.Type FROM book GROUP BY book.Type, book.Book_ID ORDER BY book.Type;
### TaskGenerate a SQL query to answer [QUESTION]What is the most common type of books?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the most common type of books?[/QUESTION][SQL]SELECT book.Book_ID, book.Type FROM book GROUP BY book.Book_ID, book.Type ORDER BY COUNT(*) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the types of books that have at least three books belonging to?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the types of books that have at least three books belonging to?[/QUESTION][SQL]SELECT book.Book_ID, book.Type FROM book GROUP BY book.Book_ID, book.Type HAVING COUNT(book.Book_ID) >= 3;
### TaskGenerate a SQL query to answer [QUESTION]List the titles of books in ascending order of the ratings in review?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the titles of books in ascending order of the ratings in review?[/QUESTION][SQL]SELECT book.Book_ID, book.Title FROM book JOIN review ON book.Book_ID = review.Book_ID ORDER BY review.Rating ASC;
### TaskGenerate a SQL query to answer [QUESTION]List the title and audio length for all the books in descending order of the number of readers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the title and audio length for all the books in descending order of the number of readers.[/QUESTION][SQL]SELECT book.Book_ID, book.Title, book.Audio, review.Readers_in_Million FROM book JOIN review ON book.Book_ID = review.Book_ID ORDER BY review.Readers_in_Million DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many books do not have reviews?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many books do not have reviews?[/QUESTION][SQL]SELECT book.Book_ID FROM book WHERE book.Book_ID NOT IN (SELECT review.Book_ID FROM review) GROUP BY book.Book_ID ORDER BY book.Book_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the types of books that have both books with more than 75 chapters and books with less than 50 chapters.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the types of books that have both books with more than 75 chapters and books with less than 50 chapters.[/QUESTION][SQL]SELECT book.Book_ID, book.Type FROM book WHERE (book.Chapters > 75 OR book.Chapters < 50) GROUP BY book.Book_ID, book.Type HAVING COUNT(DISTINCT CASE WHEN (book.Chapters > 75 OR book.Chapters < 50) THEN boook.Book_ID END) = 2;
### TaskGenerate a SQL query to answer [QUESTION]How many distinct types of book are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many distinct types of book are there?[/QUESTION][SQL]SELECT book.Book_ID, COUNT(DISTINCT book.Type) AS number_of_types FROM book GROUP BY book.BooK_ID;
### TaskGenerate a SQL query to answer [QUESTION]What are the type and title of the books that are not rated?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the type and title of the books that are not rated?[/QUESTION][SQL]SELECT book.Book_ID, book.Title, book.Type FROM book LEFT JOIN review ON book.Book_ID = review.Book_ID WHERE review.Rating IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]How many customers are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many customers are there?[/QUESTION][SQL]SELECT customer.Customer_ID FROM customer;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of customers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of customers.[/QUESTION][SQL]SELECT customer.Customer_ID FROM customer;
### TaskGenerate a SQL query to answer [QUESTION]List the names of customers in ascending order of level of membership.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of customers in ascending order of level of membership.[/QUESTION][SQL]SELECT customer.Customer_ID, customer.Name, customer.Level_of_Membership FROM customer ORDER BY customer.Level_of_Membership ASC;
### TaskGenerate a SQL query to answer [QUESTION]Sort all the customers by the level of membership in ascending order, and return the customer names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Sort all the customers by the level of membership in ascending order, and return the customer names.[/QUESTION][SQL]SELECT customer.Customer_ID, customer.Name FROM customer ORDER BY customer.Level_of_Membership ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the nationalities and card credits of customers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the nationalities and card credits of customers?[/QUESTION][SQL]SELECT customer.Customer_ID, customer.Name, customer.Nationality, customer.Card_Credit FROM customer
### TaskGenerate a SQL query to answer [QUESTION]Find the nationality and card credit of each customer.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the nationality and card credit of each customer.[/QUESTION][SQL]SELECT customer.Customer_ID, customer.Name, customer.Nationality, customer.Card_Credit FROM customer
### TaskGenerate a SQL query to answer [QUESTION]Show the names of customers with nationality "England" or "Australia".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the names of customers with nationality "England" or "Australia".[/QUESTION][SQL]SELECT customer.Customer_ID, customer.Name FROM customer WHERE customer.Nationality = 'England' OR customer.Nationality = 'Australia';
### TaskGenerate a SQL query to answer [QUESTION]Which customers have nationality "England" or "Australia"? Give me their names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which customers have nationality "England" or "Australia"? Give me their names.[/QUESTION][SQL]SELECT customer.Customer_ID, customer.Name FROM customer WHERE customer.Nationality ilike '%England%' OR customer.Nationality ilike '%Australia%';
### TaskGenerate a SQL query to answer [QUESTION]What is the average card credit of customers with membership level higher than 1?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average card credit of customers with membership level higher than 1?[/QUESTION][SQL]SELECT customer.Customer_ID, AVG(customer.Card_Credit) AS average_card_credit FROM customer WHERE customer.Level_of_Membership > 1 GROUP BY customer.Customer_ID ORDER BY average_card_credit DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the average card credit customers whose membership level is above 1.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the average card credit customers whose membership level is above 1.[/QUESTION][SQL]SELECT customer.Customer_ID, AVG(customer.Card_Credit) AS Average_Card_Credit FROM customer WHERE customer.Level_of_Membership > 1 GROUP BY customer.Customer_ID;
### TaskGenerate a SQL query to answer [QUESTION]What is the card credit of the customer with the highest membership level?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the card credit of the customer with the highest membership level?[/QUESTION][SQL]SELECT customer.Customer_ID, customer.Card_Credit FROM customer ORDER BY customer.Level_of_Membership DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the customer with the highest membership level and return his or her card credit.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the customer with the highest membership level and return his or her card credit.[/QUESTION][SQL]SELECT customer_order.Customer_ID, customer.card_credit FROM customer JOIN customer_order ON customer.customer_id = customer_order.customer_id WHERE customer.level_of_membership = (SELECT MAX(level_of_membership) FROM customer);
### TaskGenerate a SQL query to answer [QUESTION]Show different nationalities of customers, along with the number of customers of each nationality.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show different nationalities of customers, along with the number of customers of each nationality.[/QUESTION][SQL]SELECT customer.Quantity, COUNT(*) AS total_customers FROM customer JOIN (SELECT Customer_ID, COUNT(*) AS Quantity FROM customer GROUP BY Customer_ID) ON customer.Customer_ID = (SELECT Customer_ID FROM customer ORDER BY Level_of_Membership DESC LIMIT 1) WHERE Nationality IS NOT NULL AND Nationality!= '' GROUP BY Nationality;
### TaskGenerate a SQL query to answer [QUESTION]How many customers are associated with each nationality? List the nationality and the number of customers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many customers are associated with each nationality? List the nationality and the number of customers.[/QUESTION][SQL]SELECT customer.Quantity, COUNT(*) AS total_customers FROM customer JOIN (SELECT Customer_ID, COUNT(DISTINCT Branch_ID) AS Quantity FROM customer_order GROUP BY Customer_ID) AS co ON customer.Customer_ID = co.Customer_ID GROUP BY customer.Nationality ORDER BY total_customers DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the most common nationality of customers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the most common nationality of customers.[/QUESTION][SQL]SELECT customer.Quantity, customer.Nationality FROM (SELECT Nationality, COUNT(*) AS Quantity FROM customer GROUP BY Nationality) AS customer ORDER BY quantity DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which nationality does the most customers have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which nationality does the most customers have?[/QUESTION][SQL]SELECT customer.Quantity FROM customer WHERE customer.Nationality = (SELECT MAX(Quantity) FROM (SELECT COUNT(*) AS Quantity, Nationality FROM customer GROUP BY Nationality) AS subquery);
### TaskGenerate a SQL query to answer [QUESTION]Show the nations that have both customers with card credit smaller than 50 and customers with card credit bigger than 75.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the nations that have both customers with card credit smaller than 50 and customers with card credit bigger than 75.[/QUESTION][SQL]SELECT customer.Customer_ID, customer.Name, customer.Nationality FROM customer WHERE (customer.Card_Credit < 50 OR customer.Card_Credit > 75) GROUP BY customer.Customer_ID, customer.Name, customer.Nationality HAVING COUNT(DISTINCT CASE WHEN customer.Card_Credit < 50 THEN customer.Customer_ID END) > 0 AND COUNT(DISTINCT CASE WHEN customer.Card_Credit > 75 THEN customer.Customer_ID END) > 0 ORDER BY customer.Nationality NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which nations have both customers with card credit above 50 and customers with card credit below 75.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which nations have both customers with card credit above 50 and customers with card credit below 75.[/QUESTION][SQL]SELECT customer.Customer_ID, customer.Name, customer.Nationality FROM customer WHERE (customer.Card_Credit > 50 AND customer.Card_Credit < 75) ORDER BY customer.Customer_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the names of customers and names of dishes they order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the names of customers and names of dishes they order.[/QUESTION][SQL]SELECT customer_order.Customer_ID, customer.Name, dish_name FROM customer JOIN customer_order ON customer_order.customer_id = customer.customer_id;
### TaskGenerate a SQL query to answer [QUESTION]For each order, return the customer name and the dish name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each order, return the customer name and the dish name.[/QUESTION][SQL]SELECT customer_order.Customer_ID, branch.Manager AS Branch_Manager, customer.Name AS Customer_Name, customer_order.Dish_Name FROM customer JOIN customer_order ON customer_order.Customer_ID = customer.Customer_ID JOIN branch ON customer_order.Branch_ID = branch.Branch_ID;
### TaskGenerate a SQL query to answer [QUESTION]Show the names of customers and names of dishes they order, in descending order of the quantity of dish.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the names of customers and names of dishes they order, in descending order of the quantity of dish.[/QUESTION][SQL]SELECT customer_order.Customer_ID, customer.Name, dish_name, SUM(quantity) AS total_quantity FROM customer_order JOIN customer ON customer_order.customer_id = customer.customer_id GROUP BY customer_order.customer_id, customer.name, dish_name ORDER BY total_quantity DESC;
### TaskGenerate a SQL query to answer [QUESTION]For each order, find the customer name and the dish name. Sort the result in descending order of the quantity of dish.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each order, find the customer name and the dish name. Sort the result in descending order of the quantity of dish.[/QUESTION][SQL]SELECT customer_order.Customer_ID, customer.Name AS Customer_Name, customer_order.Dish_Name, customer_order.Quantity FROM customer JOIN customer_order ON customer_order.Customer_ID = customer.Customer_ID ORDER BY customer_order.Quantity DESC;
### TaskGenerate a SQL query to answer [QUESTION]Show each customer name and the total quantities of dishes ordered by that customer.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show each customer name and the total quantities of dishes ordered by that customer.[/QUESTION][SQL]SELECT customer.Customer_ID, customer.Name, SUM(customer_order.Quantity) AS Total_Quantity FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Customer_ID, customer.Name ORDER BY Total_Quantity DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the total quantities of dishes ordered by each customer? List the customer name and the total quantity.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total quantities of dishes ordered by each customer? List the customer name and the total quantity.[/QUESTION][SQL]SELECT customer.Customer_ID, customer.Name, SUM(customer_order.Quantity) AS Total_Quantity FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Customer_ID, customer.Name ORDER BY Total_Quantity DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the customers with total quantity of order bigger than 1.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the customers with total quantity of order bigger than 1.[/QUESTION][SQL]SELECT customer.Customer_ID, SUM(customer_order.Quantity) AS Total_Quantity FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Customer_ID HAVING SUM(customer_order.Quantity) > 1 ORDER BY Total_Quantity DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which customers have total order quantity greater than 1? Give me the customer names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which customers have total order quantity greater than 1? Give me the customer names.[/QUESTION][SQL]SELECT customer.Customer_ID, customer.Name FROM customer JOIN (SELECT Customer_ID, SUM(Quantity) AS Total_Quantity FROM customer_order GROUP BY Customer_ID) AS co ON customer.Customer_ID = co.Customer_ID WHERE co.Total_Quantity > 1;
### TaskGenerate a SQL query to answer [QUESTION]Show distinct managers of branches.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show distinct managers of branches.[/QUESTION][SQL]SELECT branch.Branch_ID, branch.Manager FROM branch GROUP BY branch.Branch_ID, branch.Manager
### TaskGenerate a SQL query to answer [QUESTION]Who are the distinct managers of branches?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Who are the distinct managers of branches?[/QUESTION][SQL]SELECT branch.Branch_ID, brancho.Manager FROM branch AS brancho;
### TaskGenerate a SQL query to answer [QUESTION]List the names of customers that do not have any order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of customers that do not have any order.[/QUESTION][SQL]SELECT customer.Customer_ID, customer.Name FROM customer LEFT JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID WHERE customer_order.Customer_ID IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]Which customers do not have any order? Give me the customer names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which customers do not have any order? Give me the customer names.[/QUESTION][SQL]SELECT customer.Customer_ID, customer.Name FROM customer LEFT JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID WHERE customer_order.Customer_ID IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]How many members are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many members are there?[/QUESTION][SQL]SELECT member.Member_ID FROM member;
### TaskGenerate a SQL query to answer [QUESTION]List the names of members in ascending order of age.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of members in ascending order of age.[/QUESTION][SQL]SELECT member.Member_ID, member.Name, member.Age FROM member ORDER BY member.Age ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and nationalities of the members?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and nationalities of the members?[/QUESTION][SQL]SELECT member.Member_ID, member.Name, member.Nationality FROM member;
### TaskGenerate a SQL query to answer [QUESTION]List the names of members whose nationality is not `` England ''.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of members whose nationality is not `` England ''.[/QUESTION][SQL]SELECT member.Member_ID, member.Name FROM member WHERE member.Nationality!= 'England' ORDER BY member.Member_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the names of members whose age is either 19 or 20.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the names of members whose age is either 19 or 20.[/QUESTION][SQL]SELECT member.Member_ID, member.Name FROM member WHERE member.Age = 19 OR member.Age = 20 ORDER BY member.Member_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the oldest member?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the oldest member?[/QUESTION][SQL]SELECT member.Member_ID, member.Name FROM member ORDER BY member.Age ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show different nationalities along with the number of members of each nationality.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show different nationalities along with the number of members of each nationality.[/QUESTION][SQL]SELECT member.Club_ID, member.Nationality, COUNT(member.Member_ID) AS total_members FROM member JOIN club_leader ON member.Member_ID = club_leader.Member_ID GROUP BY member.Club_ID, member.Nationality ORDER BY total_members DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Please show the most common nationality of members.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please show the most common nationality of members.[/QUESTION][SQL]SELECT member.Club_ID, member.Nationality FROM member JOIN club_leader ON member.Member_ID = club_leader.Member_ID GROUP BY member.Club_ID, member.Nationality ORDER BY COUNT(member.Nationality) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show the nations that have at least two members.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the nations that have at least two members.[/QUESTION][SQL]SELECT member.Club_ID, COUNT(DISTINCT member.Member_ID) AS number_of_members FROM club JOIN club_leader ON club.Club_ID = club_leader.Club_ID GROUP BY club.Club_ID HAVING COUNT(DISTINCT member.Member_ID) >= 2 ORDER BY number_of_members DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the names of club leaders and the names of clubs they joined.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the names of club leaders and the names of clubs they joined.[/QUESTION][SQL]SELECT member.Member_ID, member.Name, club.Club_Name FROM club JOIN club_leader ON club.Club_ID = club_leader.Club_ID JOIN member ON club_leader.Member_ID = member.Member_ID;
### TaskGenerate a SQL query to answer [QUESTION]Show the names of club leaders of clubs with overall ranking higher than 100.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the names of club leaders of clubs with overall ranking higher than 100.[/QUESTION][SQL]SELECT member.Member_ID, member.Name FROM club JOIN club_leader ON club.Club_ID = club_leader.Club_ID JOIN member ON club_leader.Member_ID = member.Member_ID WHERE club.Overall_Ranking > 100;
### TaskGenerate a SQL query to answer [QUESTION]Show the names of club leaders that joined their club before 2018.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the names of club leaders that joined their club before 2018.[/QUESTION][SQL]SELECT member.Member_ID, member.Name FROM club_leader JOIN member ON club_leader.Member_ID = member.Member_ID WHERE club_leader.Year_Join < '2018' ORDER BY member.Member_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the name of the leader of the club named "Houston".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the name of the leader of the club named "Houston".[/QUESTION][SQL]SELECT member.Member_ID, member.Name FROM club JOIN club_leader ON club.Club_ID = club_leader.Club_ID JOIN member ON club_leader.Member_ID = member.Member_ID WHERE club.club_name ilike '%Houston%' LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List the names of members that are not club leaders.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of members that are not club leaders.[/QUESTION][SQL]SELECT member.Member_ID, member.Name FROM member LEFT JOIN club_leader ON member.Member_ID = club_leader.Member_ID WHERE club_leader.Member_ID IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]Show the nations that have both members older than 22 and members younger than 19.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the nations that have both members older than 22 and members younger than 19.[/QUESTION][SQL]SELECT member.Club_ID, member.Name, member.Age FROM member JOIN club_leader ON member.Member_ID = club_leader.Member_ID WHERE (member.Age > 22 AND member.Age < 19) GROUP BY member.Club_ID, member.Name, member.Age ORDER BY member.Club_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the average age of all the club leaders?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average age of all the club leaders?[/QUESTION][SQL]SELECT member.Member_ID, AVG(member.Age) AS Average_Age FROM member JOIN club_leader ON member.Member_ID = club_leader.Member_ID GROUP BY member.Member_ID;
### TaskGenerate a SQL query to answer [QUESTION]Which club name contains the string'state'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which club name contains the string'state'?[/QUESTION][SQL]SELECT club.Club_ID, club.Club_Name FROM club WHERE club.Club_Name ilike '%state%' ORDER BY club.Club_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List all collections' subset. List the subsets' names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all collections' subset. List the subsets' names.[/QUESTION][SQL]SELECT Collection_Subset_ID, Collection_Subset_Name FROM Collection_Subsets;
### TaskGenerate a SQL query to answer [QUESTION]What are the collection susbset names?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the collection susbset names?[/QUESTION][SQL]SELECT Collection_Subset_ID, Collection_Subset_Name FROM Collection_Subsets;
### TaskGenerate a SQL query to answer [QUESTION]What is detail of collection subset with name 'Top collection'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is detail of collection subset with name 'Top collection'?[/QUESTION][SQL]SELECT Collection_Subset_ID, Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection';
### TaskGenerate a SQL query to answer [QUESTION]What collection details are there on the subset named 'Top collection'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What collection details are there on the subset named 'Top collection'?[/QUESTION][SQL]SELECT Collection_Subset_Members.Collection_ID, Collections.Collection_Name FROM Collection_Subsets JOIN Collecction_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collecction_Subset_Members.Collection_Subset_ID JOIN Collections ON Collecction_Subset_Members.Collection_ID = Collections.Collection_ID WHERE Collection_Subsets.Collection_Subset_Name = 'Top collection';
### TaskGenerate a SQL query to answer [QUESTION]List all documents's subset. List the subset's name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all documents's subset. List the subset's name.[/QUESTION][SQL]SELECT Document_Subset_Members.Related_Collection_ID, Document_Subsets.Document_Subset_Name FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID;
### TaskGenerate a SQL query to answer [QUESTION]What are the document subset names?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the document subset names?[/QUESTION][SQL]SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subsets;
### TaskGenerate a SQL query to answer [QUESTION]What is the detail of document subset with name 'Best for 2000'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the detail of document subset with name 'Best for 2000'?[/QUESTION][SQL]SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID IN (SELECT Document_Subsets.Document_Subset_ID FROM Document_Subsets WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000');
### TaskGenerate a SQL query to answer [QUESTION]What are the details on the document subsets that are named 'Best for 2000'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the details on the document subsets that are named 'Best for 2000'?[/QUESTION][SQL]SELECT Document_Subset_Members.Related_Collection_ID, Document_Subsets.Document_Subset_Details FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name ilike '%Best%for%2000%' ORDER BY Document_Subsets.Document_Subset_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List document id of all documents.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List document id of all documents.[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID FROM Document_Objects;
### TaskGenerate a SQL query to answer [QUESTION]What is the object id of the document objects?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the object id of the document objects?[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID FROM Document_Objects;
### TaskGenerate a SQL query to answer [QUESTION]What is the parent document of document owned by Marlin? List the document id.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the parent document of document owned by Marlin? List the document id.[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Owner = 'Marlin'
### TaskGenerate a SQL query to answer [QUESTION]What are the document object ids of the objects owned by Marlin?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the document object ids of the objects owned by Marlin?[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Owner = 'Marlin';
### TaskGenerate a SQL query to answer [QUESTION]What is the owner of document with the Description 'Braeden Collection'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the owner of document with the Description 'Braeden Collection'?[/QUESTION][SQL]SELECT Document_Objects.Collection_ID FROM Document_Objects WHERE Document_Objects.Description = 'Braeden Collection';
### TaskGenerate a SQL query to answer [QUESTION]What are the owners of the document objects described as the 'Braeden Collection'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the owners of the document objects described as the 'Braeden Collection'?[/QUESTION][SQL]SELECT Document_Objects.Collection_ID FROM Document_Objects WHERE Document_Objects.Description = 'Braeden Collection' ORDER BY Document_Objects.Collection_ID;
### TaskGenerate a SQL query to answer [QUESTION]What is the owner of the parent document of document owned by 'Marlin'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the owner of the parent document of document owned by 'Marlin'?[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Owner = 'Marlin' ORDER BY Document_Objects.Document_Object_ID DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Who is the owner of the parent document of every documents where 'Marlin' is the owner?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Who is the owner of the parent document of every documents where 'Marlin' is the owner?[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Owner = 'Marlin';
### TaskGenerate a SQL query to answer [QUESTION]What are the different descriptions of all the parent documents?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different descriptions of all the parent documents?[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID, COUNT(DISTINCT Document_Objects.Description) AS number_of_descriptions FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID GROUP BY Document_Objects.Related_Collection_ID ORDER BY number_of_descriptions DESC;
### TaskGenerate a SQL query to answer [QUESTION]What is the unique description of every parent document?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the unique description of every parent document?[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID, COUNT(DISTINCT Document_Objects.Description) AS number_of_descriptions FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID WHERE Document_Objects.Parent_Document_Object_ID IS NOT NULL GROUP BY Document_Objects.Related_Collection_ID ORDER BY number_of_descriptions DESC;
### TaskGenerate a SQL query to answer [QUESTION]How many documents owned by Marlin?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many documents owned by Marlin?[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Owner = 'Marlin';
### TaskGenerate a SQL query to answer [QUESTION]What is the count of documents owned by Marlin?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the count of documents owned by Marlin?[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID, COUNT(DISTINCT Document_Objects.Document_Object_ID) AS number_of_documents FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID WHERE Document_Objects.Owner = 'Marlin' GROUP BY Document_Objects.Related_Collection_ID;
### TaskGenerate a SQL query to answer [QUESTION]List all documents ids that are not the parent of other documents.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all documents ids that are not the parent of other documents.[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Document_Object_ID IN (SELECT Document_Objects.Parent_Document_Object_ID FROM Document_Objects);
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of the documents that are not parent documents?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of the documents that are not parent documents?[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Parent_Document_Object_ID IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]How many child documents does each parent document has? List the document id and the number.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many child documents does each parent document has? List the document id and the number.[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID, COUNT(DISTINCT Document_Objects.Document_Object_ID) AS Number_of_Child_Documents FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID GROUP BY Document_Objects. Related_Collection_ID;
### TaskGenerate a SQL query to answer [QUESTION]What is the number of child documents for each parent document, and what are the ids of the parent documents?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the number of child documents for each parent document, and what are the ids of the parent documents?[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID, COUNT(DISTINCT Document_Objects.Document_Object_ID) AS num_child_documents FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID GROUP BY Document_Objects.Document_Object_ID ORDER BY num_child_documents DESC;
### TaskGenerate a SQL query to answer [QUESTION]List the name of all collections.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the name of all collections.[/QUESTION][SQL]SELECT Collection_ID, Collection_Name FROM Collections ORDER BY Collection_ID;
### TaskGenerate a SQL query to answer [QUESTION]what are the collection names?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]what are the collection names?[/QUESTION][SQL]SELECT Collection_ID, Collection_Name FROM Collections;
### TaskGenerate a SQL query to answer [QUESTION]What is the description of collection named Best?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the description of collection named Best?[/QUESTION][SQL]SELECT Collection_ID, Collection_Description FROM Collections WHERE LOWER(Collection_Name) = 'best';
### TaskGenerate a SQL query to answer [QUESTION]What are the collection descriptions that are named as 'Best'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the collection descriptions that are named as 'Best'?[/QUESTION][SQL]SELECT Collection_ID, Collection_Description FROM Collections WHERE LOWER(Collection_Description) = 'best';
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the parent collection of the collection named Nice?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the parent collection of the collection named Nice?[/QUESTION][SQL]SELECT Collection_ID FROM Collections WHERE LOWER(Collection_Name) = 'nice';
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all parent collections of the collection named Nice?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all parent collections of the collection named Nice?[/QUESTION][SQL]SELECT Collection_ID FROM Collections WHERE LOWER(Collection_Name) = 'nice';
### TaskGenerate a SQL query to answer [QUESTION]Which collection is not the parent of other collection? List the collection's name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which collection is not the parent of other collection? List the collection's name.[/QUESTION][SQL]SELECT Collection_ID, Collection_Name FROM Collections WHERE Parent_Collection_ID IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the collections that are not the parent of the other collections?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the collections that are not the parent of the other collections?[/QUESTION][SQL]SELECT Collection_ID, Collection_Name FROM Collections WHERE Parent_Collection_ID IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]List document that have more than one child. List the document id.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List document that have more than one child. List the document id.[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Document_Object_ID IN (SELECT Document_Objects.Document_Object_ID FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID GROUP BY Document_Objects.Document_Object_ID HAVING COUNT(DISTINCT Document_Subset_Members.Related_Document_Object_ID) > 1);
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of the documents that have more than one child?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of the documents that have more than one child?[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Document_Object_ID IN (SELECT Document_Objects.Document_Object_ID FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID GROUP BY Document_Objects.Document_Object_ID HAVING COUNT(DISTINCT Document_Subset_Members.Related_Document_Object_ID) > 1);
### TaskGenerate a SQL query to answer [QUESTION]How many child collection does the collection named Best has?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many child collection does the collection named Best has?[/QUESTION][SQL]SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best';
### TaskGenerate a SQL query to answer [QUESTION]What is the number of child collections belonging to the collection named Best?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the number of child collections belonging to the collection named Best?[/QUESTION][SQL]SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best';
### TaskGenerate a SQL query to answer [QUESTION]List all document which is related to document owned by Ransom. List the document id.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all document which is related to document owned by Ransom. List the document id.[/QUESTION][SQL]SELECT Related_Collection_ID FROM Document_Objects WHERE Owner = 'Ransom';
### TaskGenerate a SQL query to answer [QUESTION]What are the document object ids of the related to the document owned by Ransom?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the document object ids of the related to the document owned by Ransom?[/QUESTION][SQL]SELECT Related_Collection_ID FROM Document_Objects WHERE Owner = 'Ransom';
### TaskGenerate a SQL query to answer [QUESTION]List collection subset id, name and number of collections in each subset.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List collection subset id, name and number of collections in each subset.[/QUESTION][SQL]SELECT Collection_Subset_ID, Collection_Subset_Name, COUNT(Collection_ID) AS Number_of_Collections FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID GROUP BY Collection_Subset_ID, Collection_Subset_Name ORDER BY Number_of_Collections DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the collection subset ids, names, and number of collections for each subset?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the collection subset ids, names, and number of collections for each subset?[/QUESTION][SQL]SELECT Collection_Subset_ID, Collection_Subset_Name, COUNT(Collection_ID) AS Number_of_Collections FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID GROUP BY Collection_Subset_ID, Collection_Subset_Name ORDER BY Number_of_Collections DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which document has most of child? List the document id and the number of child.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which document has most of child? List the document id and the number of child.[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID, COUNT(DISTINCT Document_Objects.Document_Object_ID) AS NumberOfChildren FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID GROUP BY Document_Objects. Related_Collection_ID ORDER BY NumberOfChildren DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]For each document object id, how many children do they have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each document object id, how many children do they have?[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID, COUNT(DISTINCT Document_Objects.Document_Object_ID) AS child_count FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID GROUP BY Document_Objects.Document_Object_ID, Document_Objects.Related_Collection_ID ORDER BY Document_Objects.Document_Object_ID;
### TaskGenerate a SQL query to answer [QUESTION]Which document has least number of related documents? List the document id and the number of related documents.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which document has least number of related documents? List the document id and the number of related documents.[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID, COUNT(DISTINCT Document_Subset_Members.Related_Document_Object_ID) AS NumberOfRelatedDocuments FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID GROUP BY Document_Objects.Document_Object_ID ORDER BY NumberOfRelatedDocuments ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the document object id with the least number of documents?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the document object id with the least number of documents?[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Document_Object_ID IN (SELECT MIN(Documents_in_Collections.Document_Object_ID) AS min_doc_id FROM Documents_in_Collections GROUP BY Documents_in_Collections.Collection_ID);
### TaskGenerate a SQL query to answer [QUESTION]Which document has between 2 and 4 number of documents? List the document id and the number of related documents.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which document has between 2 and 4 number of documents? List the document id and the number of related documents.[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID, COUNT(DISTINCT Document_Subset_Members.Related_Document_Object_ID) AS Number_of_Related_Documents FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID WHERE Document_Objects.Document_Object_ID IN (SELECT Document_Subset_Members.Document_Object_ID FROM Document_Subset_Members GROUP BY Document_Subset_Members.Document_Object_ID HAVING COUNT(DISTINCT Document_Subset_Members.Related_Document_Object_ID) BETWEEN 2 AND 4) GROUP BY Document_Objects.Document_Object_ID;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of the dcouments that have between 2 and 4 related documents and how many related items are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of the dcouments that have between 2 and 4 related documents and how many related items are there?[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID, COUNT(DISTINCT Document_Subset_Members.Related_Document_Object_ID) AS number_of_related_items FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID WHERE Document_Objects.Document_Object_ID IN (SELECT Document_Subset_Members.Document_Object_ID FROM Document_Subset_Members GROUP BY Document_Subset_Members.Document_Object_ID HAVING COUNT(DISTINCT Document_Subset_Members.Related_Document_Object_ID) BETWEEN 2 AND 4) GROUP BY Document_Objects.Document_Object_ID;
### TaskGenerate a SQL query to answer [QUESTION]List all owner of documents that is related to documents owned by Braeden.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all owner of documents that is related to documents owned by Braeden.[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Owner = 'Braeden' UNION SELECT Document_Objects.Document_Object_ID AS Related_Collection_ID FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID WHERE Document_Objects.Owner = 'Braeden'
### TaskGenerate a SQL query to answer [QUESTION]What are the different owners of documents that are related to ones owned by Braeden?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different owners of documents that are related to ones owned by Braeden?[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Owner = 'Braeden' UNION SELECT Document_Objects.Document_Object_ID AS Related_Collection_ID FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID WHERE Document_Objects.Owner!= 'Braeden' ORDER BY Related_Collection_ID;
### TaskGenerate a SQL query to answer [QUESTION]Which unique subset does document owned by Braeden belong to? List the subset name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which unique subset does document owned by Braeden belong to? List the subset name.[/QUESTION][SQL]SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Owner = 'Braeden' JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID;
### TaskGenerate a SQL query to answer [QUESTION]What are the different subset names of all documents owned by Braeden?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different subset names of all documents owned by Braeden?[/QUESTION][SQL]SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Objects WHERE Owner = 'Braeden' ORDER BY Document_Objects.Document_Object_ID;
### TaskGenerate a SQL query to answer [QUESTION]List subset id, name and number of different documents in each subset.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List subset id, name and number of different documents in each subset.[/QUESTION][SQL]SELECT Document_Subset_Members.Related_Collection_ID, COUNT(DISTINCT Document_Objects.Document_Object_ID) AS distinct_documents FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID GROUP BY Document_Subsets.Document_Subset_ID, Document_Subsets.Document_Subset_Name, Document_Subset_Members.Related_Collection_ID ORDER BY distinct_documents DESC;
### TaskGenerate a SQL query to answer [QUESTION]What is the subset id, name, and number of different documents for each subset?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the subset id, name, and number of different documents for each subset?[/QUESTION][SQL]SELECT Document_Subset_Members.Related_Collection_ID, COUNT(DISTINCT Document_Subset_Members.Document_Object_ID) AS distinct_documents FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID GROUP BY Document_Subsets.Document_Subset_ID, Document_Subsets.Document_Subset_Name, Document_Subset_Members.Related_Collection_ID ORDER BY distinct_documents DESC;
### TaskGenerate a SQL query to answer [QUESTION]Which document subset has most of number of distinct documents? List subset id, name and number of documents.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which document subset has most of number of distinct documents? List subset id, name and number of documents.[/QUESTION][SQL]SELECT Document_Subset_Members.Related_Collection_ID, COUNT(DISTINCT Document_Objects.Document_Object_ID) AS num_documents FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID GROUP BY Document_Subset_Members.Related_Collection_ID ORDER BY num_documents DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]For the document subset with the most number of different documents, what are the ids and names of the subset, as well as the number of documents?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For the document subset with the most number of different documents, what are the ids and names of the subset, as well as the number of documents?[/QUESTION][SQL]SELECT Document_Subset_Members.Related_Collection_ID, COUNT(DISTINCT Document_Objects.Document_Object_ID) AS num_documents FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID GROUP BY Document_Subsets.Document_Subset_ID, Document_Subsets.Document_Subset_Name ORDER BY num_documents DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]For document subset named 'Best for 2000', List all document id that in this subset.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For document subset named 'Best for 2000', List all document id that in this subset.[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Document_Object_ID IN (SELECT Document_Subset_Members.Document_Object_ID FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000');
### TaskGenerate a SQL query to answer [QUESTION]For the document subset named 'Best for 2000', what are the document ids in that subset?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For the document subset named 'Best for 2000', what are the document ids in that subset?[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Document_Object_ID IN (SELECT Document_Subset_Members.Document_Object_ID FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000');
### TaskGenerate a SQL query to answer [QUESTION]List all document subsets of documents that related to each document id. List the name of document subset and the document id.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all document subsets of documents that related to each document id. List the name of document subset and the document id.[/QUESTION][SQL]SELECT Document_Subset_Members.Related_Collection_ID, Document_Subsets.Document_Subset_Name FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID;
### TaskGenerate a SQL query to answer [QUESTION]What are the different subsets of documents related to each document id, list the name of the document subset and id of the actual document?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different subsets of documents related to each document id, list the name of the document subset and id of the actual document?[/QUESTION][SQL]SELECT Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID, Document_Subsets.Document_Subset_Name, Document_Objects.Document_Object_ID FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID;
### TaskGenerate a SQL query to answer [QUESTION]List the Collection Name that document owned by 'Ransom'belong to.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the Collection Name that document owned by 'Ransom'belong to.[/QUESTION][SQL]SELECT Collection_ID, c.Collection_Name FROM Documents_in_Collections dic JOIN Collections c ON dic.Collection_ID = c.Collection_ID WHERE Owner = 'Ransom' ORDER BY Collection_ID;
### TaskGenerate a SQL query to answer [QUESTION]What is the collection name of a document owned by 'Ransom'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the collection name of a document owned by 'Ransom'?[/QUESTION][SQL]SELECT Collection_ID FROM Documents_in_Collections WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom');
### TaskGenerate a SQL query to answer [QUESTION]How many collections does each document belong to? List the count and the document id.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many collections does each document belong to? List the count and the document id.[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID, COUNT(DISTINCT Related_Collection_ID) AS collection_count FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID GROUP BY Document_Objects.Document_Object_ID ORDER BY collection_count DESC;
### TaskGenerate a SQL query to answer [QUESTION]For each document object id, how many collections does it belong to?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each document object id, how many collections does it belong to?[/QUESTION][SQL]SELECT Document_Objects.Collection_ID, COUNT(DISTINCT Collection_ID) AS number_of_collections FROM Documents_in_Collections JOIN Document_Objects ON Documents_in_Collections.Document_Object_ID = Document_Objects.Document_Object_ID GROUP BY Document_Objects.Document_Object_ID;
### TaskGenerate a SQL query to answer [QUESTION]How many documents does collection named 'Best' has?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many documents does collection named 'Best' has?[/QUESTION][SQL]SELECT Document_Objects.Collection_ID, COUNT(DISTINCT Document_Objects.Document_Object_ID) AS number_of_documents FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID WHERE Document_Objects.Collection_ID IN (SELECT Collection_ID FROM Collections WHERE LOWER(Collection_Name) = 'best') GROUP BY Document_Objects.Collection_ID;
### TaskGenerate a SQL query to answer [QUESTION]What is the number of documents in the collection named 'Best'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the number of documents in the collection named 'Best'?[/QUESTION][SQL]SELECT Document_Objects.Collection_ID, COUNT(DISTINCT Document_Objects.Document_Object_ID) AS Number_of_Documents FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID WHERE Document_Objects.Collection_ID IN (SELECT Collection_ID FROM Collections WHERE LOWER(Collection_Name) = 'best') GROUP BY Document_Objects.Collection_ID;
### TaskGenerate a SQL query to answer [QUESTION]List the document id of all documents in collection named Best.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the document id of all documents in collection named Best.[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Document_Object_ID IN (SELECT Document_Objects.Document_Object_ID FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE LOWER(Collections.Collection_Name) = 'best')
### TaskGenerate a SQL query to answer [QUESTION]What is the number of document object ids in the collection named Best?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the number of document object ids in the collection named Best?[/QUESTION][SQL]SELECT Document_Objects.Collection_ID, COUNT(DISTINCT Document_Objects.Document_Object_ID) AS Number_of_Documents FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID WHERE Documents_in_Collections.Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') GROUP BY Document_Objects.Collection_ID;
### TaskGenerate a SQL query to answer [QUESTION]Which collection have most number of documents? List collection name, id and number of documents.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which collection have most number of documents? List collection name, id and number of documents.[/QUESTION][SQL]SELECT Collection_ID, Collection_Name, COUNT(DISTINCT Document_Object_ID) AS num_documents FROM Documents_in_Collections GROUP BY Collection_ID, Collection_Name ORDER BY num_documents DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]For ever collection named 'Best', what is the name and id of the one with the most documents, and how many documents does it have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For ever collection named 'Best', what is the name and id of the one with the most documents, and how many documents does it have?[/QUESTION][SQL]SELECT Collection_ID, Collection_Name, COUNT(DISTINCT Document_Object_ID) AS document_count FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collection_Name ilike '%Best%' GROUP BY Collection_ID, Collection_Name ORDER BY document_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List id of documents that in document subset Best for 2000 and collection named Best.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List id of documents that in document subset Best for 2000 and collection named Best.[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Document_Object_ID IN (SELECT Document_Subset_Members.Document_Object_ID FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name = 'Best') AND Document_Objects.Document_Object_ID IN (SELECT Documents_in_Collections.Document_Object_ID FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best' AND CAST(Collections.Collection_Description AS DATE) BETWEEN '2000-01-01' AND '2000-12-31');
### TaskGenerate a SQL query to answer [QUESTION]What are the different document object ids in the subset named 'Best for 2000' and in the collection named 'Best'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different document object ids in the subset named 'Best for 2000' and in the collection named 'Best'?[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Document_Object_ID IN (SELECT Document_Objects.Document_Object_ID FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name ilike '%Best%for%2000%') AND Document_Objects.Document_Object_ID IN (SELECT Document_Objects.Document_Object_ID FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name ilike '%Best%');
### TaskGenerate a SQL query to answer [QUESTION]List id of documents that in collection named Best but not in document subset Best for 2000.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List id of documents that in collection named Best but not in document subset Best for 2000.[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Document_Object_ID IN (SELECT Document_Objects.Document_Object_ID FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best') AND Document_Objects.Document_Object_ID NOT IN (SELECT Document_Objects.Document_Object_ID FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name = 'Best' AND Document_Subsets.Document_Subset_Details LIKE '%2000%');
### TaskGenerate a SQL query to answer [QUESTION]What are the different document object ids that are in the collection named Best but not in the subset named 'Best for 2000'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different document object ids that are in the collection named Best but not in the subset named 'Best for 2000'?[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Document_Object_ID IN (SELECT Document_Objects.Document_Object_ID FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name = 'Best') AND Document_Objects.Document_Object_ID NOT IN (SELECT Document_Objects.Document_Object_ID FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000');
### TaskGenerate a SQL query to answer [QUESTION]List id of documents that in document subset Best for 2000 or in collection named Best.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List id of documents that in document subset Best for 2000 or in collection named Best.[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Document_Object_ID IN (SELECT Document_Subset_Members.Document_Object_ID FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name ilike '%Best%for%2000%') UNION SELECT Collections.Collection_ID FROM Collections WHERE Collections.Collection_Name ilike '%Best%' ORDER BY Related_Collection_ID;
### TaskGenerate a SQL query to answer [QUESTION]What are the different document ids that are in the subset named 'Best for 2000' or in the collection named 'Best'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different document ids that are in the subset named 'Best for 2000' or in the collection named 'Best'?[/QUESTION][SQL]SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Document_Object_ID IN (SELECT Document_Objects.Document_Object_ID FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name ilike '%Best%for%2000%') UNION SELECT Collections.Collection_ID FROM Collections JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID JOIN Document_Objects ON Documents_in_collections.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Collections.Collection_Name ilike '%Best%' ORDER BY Related_Collection_ID;
### TaskGenerate a SQL query to answer [QUESTION]List all name of collections that are related to collection named Best.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all name of collections that are related to collection named Best.[/QUESTION][SQL]SELECT Collection_Subset_Members.Related_Collection_ID, Collections.Collection_Name FROM Collection_Subset_Members JOIN Collections ON Collection_Subset_Members.Collection_ID = Collections.Collection_ID WHERE Collection_Subset_Members.Collection_ID IN (SELECT Document_Objects.Document_Object_ID FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID WHERE Documents_in_Collections.Collection_ID IN (SELECT Collections.Collection_ID FROM Collections WHERE LOWER(Collections.Collection_Name) = 'best')) ORDER BY Collections.Collection_Name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the collections that are related to the collection named Best?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the collections that are related to the collection named Best?[/QUESTION][SQL]SELECT Collection_ID, Collection_Name FROM Collections WHERE Collection_Name IN (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'));
### TaskGenerate a SQL query to answer [QUESTION]How many collections that are related to collection named Best?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many collections that are related to collection named Best?[/QUESTION][SQL]SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best';
### TaskGenerate a SQL query to answer [QUESTION]How many different collections are related to the one named 'Best'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different collections are related to the one named 'Best'?[/QUESTION][SQL]SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') GROUP BY Related_Collection_ID;
### TaskGenerate a SQL query to answer [QUESTION]Which collection subset does collection name Best in? List collection subset name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which collection subset does collection name Best in? List collection subset name.[/QUESTION][SQL]SELECT Collection_Subset_Members.Collection_Subset_ID FROM Collection_Subset_Members WHERE Collection_Subset_Members.Collection_ID IN (SELECT Collections.Collection_ID FROM Collections WHERE Collections.Collection_Name = 'Best') ORDER BY Collection_Subset_Members.Collection_Subset_ID;
### TaskGenerate a SQL query to answer [QUESTION]What are the collection subsets that the collection named 'Best' in?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the collection subsets that the collection named 'Best' in?[/QUESTION][SQL]SELECT Collection_Subset_Members.Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subsets.Collection_Subset_Name = 'Best';
### TaskGenerate a SQL query to answer [QUESTION]How many songs contain "Love" in their names?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many songs contain "Love" in their names?[/QUESTION][SQL]SELECT songs_id FROM songs WHERE name ilike '%love%' GROUP BY songs_id;
### TaskGenerate a SQL query to answer [QUESTION]List the name of the songs in ascending, lexicographical order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the name of the songs in ascending, lexicographical order.[/QUESTION][SQL]SELECT songs.songs_id, songs.name FROM songs ORDER BY songs.name ASC;
### TaskGenerate a SQL query to answer [QUESTION]List the names and languages of the songs.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names and languages of the songs.[/QUESTION][SQL]SELECT songs_id, name, language FROM songs;
### TaskGenerate a SQL query to answer [QUESTION]What are the maximum and minimum voice sound quality score of the performances?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the maximum and minimum voice sound quality score of the performances?[/QUESTION][SQL]SELECT participant_id, MAX(voice_sound_quality) AS max_voice_sound_quality, MIN(voice_sound_quality) AS min_voice_sound_quality FROM performance_score GROUP BY participant_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?[/QUESTION][SQL]SELECT participant_id, songs_id, voice_sound_quality, rhythm_tempo, stage_presence FROM performance_score WHERE name = 'Freeway';
### TaskGenerate a SQL query to answer [QUESTION]What are the id, language and original artist of the songs whose name is not 'Love'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the id, language and original artist of the songs whose name is not 'Love'?[/QUESTION][SQL]SELECT songs_id, language, original_artist FROM songs WHERE name!= 'Love';
### TaskGenerate a SQL query to answer [QUESTION]What are the names and original artists of the song whose English translation is 'All the streets of love'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and original artists of the song whose English translation is 'All the streets of love'?[/QUESTION][SQL]SELECT songs.songs_id, songs.name, songs.original_artist FROM songs WHERE songs.english_translation ilike '%all%the%streets%of%love%' ORDER BY songs.songs_id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct stage presence scores for all the songs that are in language 'English'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct stage presence scores for all the songs that are in language 'English'?[/QUESTION][SQL]SELECT participant_id, pa.stage_presence FROM performance_score pa JOIN songs s ON pa.songs_id = s.id WHERE LOWER(s.language) = 'english' GROUP BY pa.participant_id, pa.stage_presence ORDER BY pa.stage_presence NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids and names of the participants who have performed at least two songs?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids and names of the participants who have performed at least two songs?[/QUESTION][SQL]SELECT participant_id, name FROM (SELECT ps.participant_id, COUNT(ps.songs_id) AS song_count, ROW_NUMBER() OVER (PARTITION BY ps.participant_id ORDER BY COUNT(ps.songs_id) DESC) AS rn FROM performance_score ps GROUP BY ps.participant_id) sub WHERE rn = 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids, names and popularity of the participants, order by the number of songs they perform?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids, names and popularity of the participants, order by the number of songs they perform?[/QUESTION][SQL]SELECT participant_id, name, popularity, COUNT(songs_id) AS num_songs FROM performance_score GROUP BY participant_id, name, popularity ORDER BY num_songs DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the id and name of the participants who received score 5 for their sound quality or rhythm tempo?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the id and name of the participants who received score 5 for their sound quality or rhythm tempo?[/QUESTION][SQL]SELECT participant_id, name FROM performance_score JOIN participants ON participant_id = id WHERE voice_sound_quality = 5 OR rhythm_tempo = 5;
### TaskGenerate a SQL query to answer [QUESTION]What are the voice sound quality scores received for the song named'The Balkan Girls'in English language?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the voice sound quality scores received for the song named'The Balkan Girls'in English language?[/QUESTION][SQL]SELECT participant_id, ps.voice_sound_quality FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE LOWER(s.name) = 'the balkan girls' AND LOWER(s.language) = 'english';
### TaskGenerate a SQL query to answer [QUESTION]What are the id and name of the song sung by the most participants?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the id and name of the song sung by the most participants?[/QUESTION][SQL]SELECT songs_id, COUNT(*) AS num_participants FROM performance_score GROUP BY songs_id ORDER BY num_participants DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How many performances have a stage presence score less than 7 or higher than 9?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many performances have a stage presence score less than 7 or higher than 9?[/QUESTION][SQL]SELECT participant_id, COUNT(*) AS number_of_performances FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9 GROUP BY participant_id;
### TaskGenerate a SQL query to answer [QUESTION]How many songs listed are not performed?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many songs listed are not performed?[/QUESTION][SQL]SELECT songs_id FROM performance_score;
### TaskGenerate a SQL query to answer [QUESTION]What are the average rhythm scores for the songs in each different language?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the average rhythm scores for the songs in each different language?[/QUESTION][SQL]SELECT songs_id, AVG(rhythm_tempo) AS avg_rhythm FROM performance_score GROUP BY songs_id ORDER BY avg_rhythm DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct names of the participants who have sung a song in 'English'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct names of the participants who have sung a song in 'English'?[/QUESTION][SQL]SELECT participant_id FROM performance_score WHERE songs_id IN (SELECT id FROM songs WHERE language = 'English') GROUP BY participant_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the name and popularity of participants who have sung a song both in 'Croatian' language and in 'English' language?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the name and popularity of participants who have sung a song both in 'Croatian' language and in 'English' language?[/QUESTION][SQL]SELECT participant_id, name, popularity FROM (SELECT ps.participant_id, p.name, p.popularity, row_number() OVER(PARTITION BY ps.participant_id ORDER BY COUNT(ps.songs_id) DESC) AS rank FROM performance_score ps JOIN songs s ON ps.songs_id = s.id JOIN participants p ON ps.participant_id = p.id WHERE s.language IN ('Croatian', 'English') GROUP BY ps.participant_id, p.name, p.popularity) sub WHERE rank = 1;
### TaskGenerate a SQL query to answer [QUESTION]Which song names have the substring "Is"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which song names have the substring "Is"?[/QUESTION][SQL]SELECT songs_id FROM songs WHERE name ilike '%is%'
### TaskGenerate a SQL query to answer [QUESTION]Find the original artists who sing songs with rhythm tempo above 5, and list results in descending order of voice sound quality.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the original artists who sing songs with rhythm tempo above 5, and list results in descending order of voice sound quality.[/QUESTION][SQL]SELECT songs.songs_id, songs.original_artist, performance_score.voice_sound_quality FROM songs JOIN performance_score ON songs.id = performance_score.songs_id WHERE performance_score.rhythm_tempo > 5 ORDER BY performance_score.voice_sound_quality DESC;
### TaskGenerate a SQL query to answer [QUESTION]How many cities do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many cities do we have?[/QUESTION][SQL]SELECT country FROM City;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of cities.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of cities.[/QUESTION][SQL]SELECT country FROM City;
### TaskGenerate a SQL query to answer [QUESTION]List all different states.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all different states.[/QUESTION][SQL]SELECT country FROM City WHERE state IS NULL GROUP BY country;
### TaskGenerate a SQL query to answer [QUESTION]What are all the distinct states?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all the distinct states?[/QUESTION][SQL]SELECT country FROM City WHERE state IS NOT NULL GROUP BY country ORDER BY country;
### TaskGenerate a SQL query to answer [QUESTION]How many countries do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many countries do we have?[/QUESTION][SQL]SELECT country FROM City;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of coutries.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of coutries.[/QUESTION][SQL]SELECT country FROM City;
### TaskGenerate a SQL query to answer [QUESTION]Show names, codes, states, countries for all cities.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show names, codes, states, countries for all cities.[/QUESTION][SQL]SELECT city_name, city_code, state, country FROM City ORDER BY city_name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names, codes, states, and countries for all cities?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names, codes, states, and countries for all cities?[/QUESTION][SQL]SELECT city_name, city_code, state, country FROM City ORDER BY city_name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the latitude and longitude for Baltimore?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the latitude and longitude for Baltimore?[/QUESTION][SQL]SELECT country, latitude, longitude FROM City WHERE LOWER(city_name) = 'baltimore';
### TaskGenerate a SQL query to answer [QUESTION]What latitude and longitude correspond to Baltimore?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What latitude and longitude correspond to Baltimore?[/QUESTION][SQL]SELECT country, latitude, longitude FROM City WHERE LOWER(city_name) = 'baltimore';
### TaskGenerate a SQL query to answer [QUESTION]Show names for all cities in state PA.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show names for all cities in state PA.[/QUESTION][SQL]SELECT city_name FROM City WHERE LOWER(state) = 'pa' ORDER BY city_name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all cities in PA?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all cities in PA?[/QUESTION][SQL]SELECT city_name FROM City WHERE LOWER(state) = 'pa' ORDER BY city_name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many cities are in Canada?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many cities are in Canada?[/QUESTION][SQL]SELECT country FROM City WHERE LOWER(country) = 'canada';
### TaskGenerate a SQL query to answer [QUESTION]Count the number of cities in Canada.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of cities in Canada.[/QUESTION][SQL]SELECT country FROM City WHERE LOWER(country) = 'canada';
### TaskGenerate a SQL query to answer [QUESTION]Show names for all USA city ordered by latitude.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show names for all USA city ordered by latitude.[/QUESTION][SQL]SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are all the city names for cities in the USA, ordered by latitude?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all the city names for cities in the USA, ordered by latitude?[/QUESTION][SQL]SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show all states and number of cities in each state.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all states and number of cities in each state.[/QUESTION][SQL]SELECT country, COUNT(*) AS num_cities FROM City GROUP BY country ORDER BY num_cities DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many cities are in each state?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many cities are in each state?[/QUESTION][SQL]SELECT country, COUNT(*) AS number_of_cities FROM City GROUP BY country ORDER BY number_of_cities DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show all countries and number of cities in each.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all countries and number of cities in each.[/QUESTION][SQL]SELECT country, COUNT(*) AS num_cities FROM City GROUP BY country ORDER BY num_cities DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many cities are there in each country?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many cities are there in each country?[/QUESTION][SQL]SELECT country, COUNT(*) AS number_of_cities FROM City GROUP BY country ORDER BY number_of_cities DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List all states with at least two cities.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all states with at least two cities.[/QUESTION][SQL]SELECT country, COUNT(*) AS number_of_cities FROM (SELECT DISTINCT country FROM City) AS subquery GROUP BY country HAVING COUNT(*) >= 2 ORDER BY number_of_cities DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which states have at least two cities?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which states have at least two cities?[/QUESTION][SQL]SELECT country FROM City WHERE state IN (SELECT state FROM City GROUP BY state HAVING COUNT(city_code) >= 2);
### TaskGenerate a SQL query to answer [QUESTION]Which state has most number of cities?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which state has most number of cities?[/QUESTION][SQL]SELECT country, COUNT(*) AS num_cities FROM City GROUP BY country ORDER BY num_cities DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the state that has the most cities.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the state that has the most cities.[/QUESTION][SQL]SELECT country, COUNT(*) AS number_of_cities FROM City GROUP BY country ORDER BY number_of_cities DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which country has fewest number of cities?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which country has fewest number of cities?[/QUESTION][SQL]SELECT country FROM City WHERE country IN (SELECT country FROM City GROUP BY country ORDER BY COUNT(city_code) ASC LIMIT 1);
### TaskGenerate a SQL query to answer [QUESTION]Give the country with the fewest number of cities.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the country with the fewest number of cities.[/QUESTION][SQL]SELECT country FROM City WHERE (SELECT COUNT(*) FROM City) = (SELECT MIN(COUNT(*)) FROM City GROUP BY country);
### TaskGenerate a SQL query to answer [QUESTION]Show the first name and the last name for students living in state MD.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the first name and the last name for students living in state MD.[/QUESTION][SQL]SELECT state, s.Fname, s.LName FROM Student s JOIN City c ON s.city_code = c.city_code WHERE LOWER(c.state) ='md'
### TaskGenerate a SQL query to answer [QUESTION]What are the full names of students living in MD?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the full names of students living in MD?[/QUESTION][SQL]SELECT state, s.lname || ','|| s.fname AS full_name FROM student s JOIN city c ON s.city_code = c.city_code WHERE LOWER(c.state) ='md' ORDER BY full_name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many students live in China?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many students live in China?[/QUESTION][SQL]SELECT state FROM City WHERE country = 'China' AND city_code IN (SELECT city_code FROM Student);
### TaskGenerate a SQL query to answer [QUESTION]Count the number of students living in China.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of students living in China.[/QUESTION][SQL]SELECT state FROM City WHERE country = 'China' AND city_code IN (SELECT city_code FROM Student);
### TaskGenerate a SQL query to answer [QUESTION]Return the first name and major of students are living in Baltimore?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the first name and major of students are living in Baltimore?[/QUESTION][SQL]SELECT state, s.Fname, s.Major FROM Student WHERE LOWER(s.city_code) = 'baltimore'
### TaskGenerate a SQL query to answer [QUESTION]What are the first names and majors of students living in Baltimore?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the first names and majors of students living in Baltimore?[/QUESTION][SQL]SELECT state, s.Fname, m.Major FROM Student WHERE LOWER(s.city_code) = 'baltimore'
### TaskGenerate a SQL query to answer [QUESTION]Show the number of students living in each country.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the number of students living in each country.[/QUESTION][SQL]SELECT country, COUNT(*) AS num_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY country ORDER BY num_students DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many students live in each country?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many students live in each country?[/QUESTION][SQL]SELECT country, COUNT(*) AS number_of_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY country ORDER BY number_of_students DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of students living in each city.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of students living in each city.[/QUESTION][SQL]SELECT city_name, COUNT(*) AS num_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY city_name ORDER BY num_students DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many students live in each city?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many students live in each city?[/QUESTION][SQL]SELECT state, COUNT(*) AS number_of_students FROM (SELECT c.city_name AS state, COUNT(s.StuID) AS student_count FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.city_name) subquery GROUP BY state ORDER BY number_of_students DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which state has most number of students?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which state has most number of students?[/QUESTION][SQL]SELECT country, COUNT(*) AS total_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY country ORDER BY total_students DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the state that has the most students.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the state that has the most students.[/QUESTION][SQL]SELECT country FROM City WHERE state = (SELECT MAX(s.state) AS state FROM Student s GROUP BY s.state);
### TaskGenerate a SQL query to answer [QUESTION]Which country has least number of students?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which country has least number of students?[/QUESTION][SQL]SELECT country FROM City WHERE country IN (SELECT c.country FROM City c JOIN Student s ON c.city_code = s.city_code GROUP BY c.country ORDER BY COUNT(s.StuID) ASC LIMIT 1);
### TaskGenerate a SQL query to answer [QUESTION]Give the country with the fewest students.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the country with the fewest students.[/QUESTION][SQL]SELECT country FROM City WHERE country IN (SELECT s.city_code FROM Student s GROUP BY s.city_code ORDER BY COUNT(s.StuID) ASC LIMIT 1);
### TaskGenerate a SQL query to answer [QUESTION]Show names for all cities where at least three students live.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show names for all cities where at least three students live.[/QUESTION][SQL]SELECT city_name FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(StuID) >= 3);
### TaskGenerate a SQL query to answer [QUESTION]What are the names of cities with at least three students?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of cities with at least three students?[/QUESTION][SQL]SELECT city_name FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(StuID) >= 3);
### TaskGenerate a SQL query to answer [QUESTION]Show all states where more than 5 students live.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all states where more than 5 students live.[/QUESTION][SQL]SELECT country FROM City WHERE state IN (SELECT s.state FROM Student s GROUP BY s.state HAVING COUNT(s.city_code) > 5);
### TaskGenerate a SQL query to answer [QUESTION]What are the states with more than 5 students?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the states with more than 5 students?[/QUESTION][SQL]SELECT country FROM City WHERE state IN (SELECT s.state FROM Student s GROUP BY s.state HAVING COUNT(s.StuID) > 5);
### TaskGenerate a SQL query to answer [QUESTION]Show ids for all students who don't live in USA.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show ids for all students who don't live in USA.[/QUESTION][SQL]SELECT state FROM City WHERE country!= 'USA'
### TaskGenerate a SQL query to answer [QUESTION]What the the student ids for students not living in the USA?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What the the student ids for students not living in the USA?[/QUESTION][SQL]SELECT state FROM City WHERE country!= 'USA'
### TaskGenerate a SQL query to answer [QUESTION]Show ids for all female (sex is F) students living in state PA.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show ids for all female (sex is F) students living in state PA.[/QUESTION][SQL]SELECT state FROM City WHERE state = 'PA'
### TaskGenerate a SQL query to answer [QUESTION]What are the student ids for female students in the state of PA?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the student ids for female students in the state of PA?[/QUESTION][SQL]SELECT state FROM City WHERE state = 'PA';
### TaskGenerate a SQL query to answer [QUESTION]Show ids for all male students living outside of USA.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show ids for all male students living outside of USA.[/QUESTION][SQL]SELECT state FROM City WHERE country!= 'USA' ORDER BY st;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids for male students not in the USA?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids for male students not in the USA?[/QUESTION][SQL]SELECT state FROM City WHERE country!= 'USA'
### TaskGenerate a SQL query to answer [QUESTION]What is the distance between BAL and CHI?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the distance between BAL and CHI?[/QUESTION][SQL]SELECT city_code FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI';
### TaskGenerate a SQL query to answer [QUESTION]Give the distance between BAL and CHI?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the distance between BAL and CHI?[/QUESTION][SQL]SELECT city_code FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI';
### TaskGenerate a SQL query to answer [QUESTION]Show me the distance between Boston and Newark.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show me the distance between Boston and Newark.[/QUESTION][SQL]SELECT city_code FROM City WHERE city_name = 'Boston' OR city_name = 'Newark';
### TaskGenerate a SQL query to answer [QUESTION]What is the distance between Boston and Newark?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the distance between Boston and Newark?[/QUESTION][SQL]SELECT city_code FROM Direct_distance WHERE (city1_code = 'BOS' AND city2_code = 'EWR') OR (city1_code = 'EWR' AND city2_code = 'BOS');
### TaskGenerate a SQL query to answer [QUESTION]What is the average, minimum, maximum distance between two cities?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average, minimum, maximum distance between two cities?[/QUESTION][SQL]SELECT city_code, AVG(distance), MIN(distance), MAX(distance) FROM Direct_distance GROUP BY city_code;
### TaskGenerate a SQL query to answer [QUESTION]Give the average, minimum, and maximum distances between two cities.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the average, minimum, and maximum distances between two cities.[/QUESTION][SQL]SELECT city_code, AVG(distance), MIN(distance), MAX(distance) FROM Direct_distance GROUP BY city_code
### TaskGenerate a SQL query to answer [QUESTION]Show me the city code of two cities with maximum distance.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show me the city code of two cities with maximum distance.[/QUESTION][SQL]SELECT city_code FROM City WHERE ciy_code IN (SELECT city1_code FROM Direct_distance UNION SELECT city2_code FROM Direct_distance) ORDER BY ciy_code LIMIT 2;
### TaskGenerate a SQL query to answer [QUESTION]What are the city codes of the cities with the maximum distance?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the city codes of the cities with the maximum distance?[/QUESTION][SQL]SELECT city_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance);
### TaskGenerate a SQL query to answer [QUESTION]Show me the city code of two cities with a distance greater than the average.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show me the city code of two cities with a distance greater than the average.[/QUESTION][SQL]SELECT city_code FROM City WHERE ciy_code IN (SELECT d.city1_code FROM Direct_distance d UNION SELECT d.city2_code FROM Direct_distance d) AND ciy_code NOT IN (SELECT d.city1_code FROM Direct_distance d INTERSECT SELECT d.city2_code FROM Direct_distance d);
### TaskGenerate a SQL query to answer [QUESTION]What are the city codes of cities with distance greater than average?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the city codes of cities with distance greater than average?[/QUESTION][SQL]SELECT city_code FROM City WHERE city_code IN (SELECT city1_code FROM Direct_distance UNION SELECT city2_code FROM Direct_distance) AND city_code NOT IN (SELECT city_code FROM City WHERE latitude IS NULL OR longitude IS NULL);
### TaskGenerate a SQL query to answer [QUESTION]Show me the city code of two cities with a distance less than 1000.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show me the city code of two cities with a distance less than 1000.[/QUESTION][SQL]SELECT city_code FROM City WHERE city_code IN (SELECT city1_code FROM Direct_distance WHERE distance < 1000 UNION SELECT city2_code FROM Direct_distance WHERE distance < 1000);
### TaskGenerate a SQL query to answer [QUESTION]What are the city codes corresponding to cities with distances less than 1000?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the city codes corresponding to cities with distances less than 1000?[/QUESTION][SQL]SELECT city_code FROM City WHERE city_code IN (SELECT city1_code FROM Direct_distance WHERE distance < 1000 UNION SELECT city2_code FROM Direct_distance WHERE distance < 1000);
### TaskGenerate a SQL query to answer [QUESTION]What is the total distance between city BAL and all other cities.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total distance between city BAL and all other cities.[/QUESTION][SQL]SELECT city_name, SUM(distance) AS total_distance FROM Direct_distance dd JOIN City cc ON (dd.city1_code = cc.city_code OR dd.city2_code = cc.city_code) WHERE cc.city_name!= 'BAL' GROUP BY city_name;
### TaskGenerate a SQL query to answer [QUESTION]What is the sum of distances between BAL and other cities?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the sum of distances between BAL and other cities?[/QUESTION][SQL]SELECT state, SUM(distance) AS total_distance FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL' GROUP BY state;
### TaskGenerate a SQL query to answer [QUESTION]What is the average distance between Boston and all other cities.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average distance between Boston and all other cities.[/QUESTION][SQL]SELECT city_name, AVG(distance) AS avg_distance FROM Direct_distance dd JOIN City cc ON dd.city1_code = cc.city_code WHERE city_name = 'Boston' GROUP BY city_name
### TaskGenerate a SQL query to answer [QUESTION]Give the average distance between Boston and other cities.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the average distance between Boston and other cities.[/QUESTION][SQL]SELECT city_name, AVG(distance) AS avg_distance FROM Direct_distance dd JOIN City cc ON (dd.city1_code = cc.city_code OR dd.city2_code = cc.city_code) WHERE LOWER(cc.city_name)!= 'boston' GROUP BY city_name;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the city closest to Chicago?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the city closest to Chicago?[/QUESTION][SQL]SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY distance LIMIT 1);
### TaskGenerate a SQL query to answer [QUESTION]Give the name of the nearest city to Chicago.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the name of the nearest city to Chicago.[/QUESTION][SQL]SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY distance LIMIT 1);
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the city furthest to Boston?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the city furthest to Boston?[/QUESTION][SQL]SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') ORDER BY distance DESC LIMIT 1);
### TaskGenerate a SQL query to answer [QUESTION]Give the city name of the city with greatest distance from Boston.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the city name of the city with greatest distance from Boston.[/QUESTION][SQL]SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') ORDER BY distance DESC LIMIT 1);
### TaskGenerate a SQL query to answer [QUESTION]Show all city codes and the total distance to all other cities.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all city codes and the total distance to all other cities.[/QUESTION][SQL]SELECT city_code, SUM(distance) AS total_distance FROM Direct_distance GROUP BY city_code
### TaskGenerate a SQL query to answer [QUESTION]For each city, what is the the city code and sum of distances from each?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each city, what is the the city code and sum of distances from each?[/QUESTION][SQL]SELECT city_code, SUM(distance) AS total_distance FROM Direct_distance GROUP BY city_code ORDER BY total_distance DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show all city names and the average distance to all other cities.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all city names and the average distance to all other cities.[/QUESTION][SQL]SELECT city_name, AVG(distance) AS avg_distance FROM City JOIN Direct_distance USING (city_code) GROUP BY city_name
### TaskGenerate a SQL query to answer [QUESTION]What are the city name and average distances from each city?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the city name and average distances from each city?[/QUESTION][SQL]SELECT city_name, AVG(distance) AS avg_distance FROM City JOIN Direct_distance USING (city_code) GROUP BY city_name ORDER BY avg_distance DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How far do Linda (first name) Smith (last name) and Tracy (first name) Kim (last name) live?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How far do Linda (first name) Smith (last name) and Tracy (first name) Kim (last name) live?[/QUESTION][SQL]SELECT state, country FROM Student WHERE Fname = 'Linda' AND LName = 'Smith' UNION SELECT state, country FROM Student WHERE Fname = 'Tracy' AND LName = 'Kim';
### TaskGenerate a SQL query to answer [QUESTION]What is the distance between the cities where Linda Smith and Tracy Kim live?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the distance between the cities where Linda Smith and Tracy Kim live?[/QUESTION][SQL]SELECT state FROM Student WHERE LName = 'Smith' AND Fname = 'Linda'; SELECT stbte FROM Student WHERE LName = 'Kim' AND Fname = 'Tracy'; SELECT d.distance FROM Direct_distance d JOIN City c1 ON d.city1_code = c1.city_code JOIN City c2 ON d.city2_code = c2.city_code WHERE c1.city_name = (SELECT city_name FROM City WHERE city_code = (SELECT city_code FROM Student WHERE LName = 'Smith' AND Fname = 'Linda')) AND c2.city_name = (SELECT city_name FROM City WHERE city_code = (SELECT city_code FROM Student WHERE LName = 'Kim' AND Fname = 'Tracy'));
### TaskGenerate a SQL query to answer [QUESTION]What is the first name and last name of the student living furthest to Linda Smith?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the first name and last name of the student living furthest to Linda Smith?[/QUESTION][SQL]SELECT state, MAX(distance) AS max_distance FROM (SELECT c.state, d.distance FROM City c JOIN Direct_distance d ON c.city_code = d.city2_code WHERE c.country = 'United States' AND c.latitude BETWEEN 34.0522 AND 45.5236 AND c.longitude BETWEEN -118.2437 AND -74.0060) subquery_alias GROUP BY state;
### TaskGenerate a SQL query to answer [QUESTION]What is the full name of the student who lives furthest from Linda Smith?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the full name of the student who lives furthest from Linda Smith?[/QUESTION][SQL]SELECT state, MAX(distance) AS max_distance FROM (SELECT c.state, d.distance FROM City c JOIN Direct_distance d ON c.city_code = d.city2_code WHERE c.city_name LIKE '%Linda%Smith%' UNION SELECT s.state, d.distance FROM Student s JOIN Direct_distance d ON s.city_code = d.city1_code WHERE s.LName = 'Smith' AND s.Fname = 'Linda') subquery GROUP BY state;
### TaskGenerate a SQL query to answer [QUESTION]Which state does the student whose first name is Linda live in?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which state does the student whose first name is Linda live in?[/QUESTION][SQL]SELECT country FROM Student WHERE Fname = 'Linda'
### TaskGenerate a SQL query to answer [QUESTION]Give the state that the student with first name Linda lives in.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the state that the student with first name Linda lives in.[/QUESTION][SQL]SELECT country FROM Student WHERE Fname = 'Linda'
### TaskGenerate a SQL query to answer [QUESTION]Return all details of sailors who are older than 30.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return all details of sailors who are older than 30.[/QUESTION][SQL]SELECT sid, name, age FROM Sailors WHERE age > 30;
### TaskGenerate a SQL query to answer [QUESTION]What can you tell me about sailors who are older than age 30?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What can you tell me about sailors who are older than age 30?[/QUESTION][SQL]SELECT sid, name, age FROM Sailors WHERE age > 30;
### TaskGenerate a SQL query to answer [QUESTION]Return name and age for sailors who are younger than 30.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return name and age for sailors who are younger than 30.[/QUESTION][SQL]SELECT sid, name, age FROM Sailors WHERE age < 30;
### TaskGenerate a SQL query to answer [QUESTION]What is the name and age of every sailor who is younger than age 30?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name and age of every sailor who is younger than age 30?[/QUESTION][SQL]SELECT sid, name, age FROM Sailors WHERE age < 30;
### TaskGenerate a SQL query to answer [QUESTION]Find boats reserved by Sailor with id 1.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find boats reserved by Sailor with id 1.[/QUESTION][SQL]SELECT bid FROM Reserves WHERE sid = 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the different boat ids reserved by the sailor whose id is 1?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different boat ids reserved by the sailor whose id is 1?[/QUESTION][SQL]SELECT bid FROM Reserves WHERE sid = 1 GROUP BY bid;
### TaskGenerate a SQL query to answer [QUESTION]Who reserved boat 102?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Who reserved boat 102?[/QUESTION][SQL]SELECT sid FROM Reserves WHERE bid = 102;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the sailor who reserved boat 102?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the sailor who reserved boat 102?[/QUESTION][SQL]SELECT sid FROM Reserves WHERE bid = 102;
### TaskGenerate a SQL query to answer [QUESTION]Return the unique boat ids (bid) of all reserved boats.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the unique boat ids (bid) of all reserved boats.[/QUESTION][SQL]SELECT bid FROM Reserves WHERE bid IN (SELECT DISTINCT bid FROM Reserves);
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of all boats that are reserved by someone?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of all boats that are reserved by someone?[/QUESTION][SQL]SELECT bid FROM Reserves;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of sailors whose names contain letter e?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of sailors whose names contain letter e?[/QUESTION][SQL]SELECT sid, name FROM Sailors WHERE name ilike '%e%' ORDER BY name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of every sailor whose name contains the letter e?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of every sailor whose name contains the letter e?[/QUESTION][SQL]SELECT sid, name FROM Sailors WHERE LOWER(name) LIKE '%e%' ORDER BY name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]return the unique ids of sailors who are older than any sailors.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]return the unique ids of sailors who are older than any sailors.[/QUESTION][SQL]SELECT sid FROM Sailors WHERE age = (SELECT MAX(age) FROM Sailors);
### TaskGenerate a SQL query to answer [QUESTION]What is the different id of every sailor who is not the youngest?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the different id of every sailor who is not the youngest?[/QUESTION][SQL]SELECT sid FROM Sailors WHERE age NOT IN (SELECT MIN(age) FROM Sailors);
### TaskGenerate a SQL query to answer [QUESTION]Return the unique names of sailors who are older than any sailors whose rating is larger than 7.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the unique names of sailors who are older than any sailors whose rating is larger than 7.[/QUESTION][SQL]SELECT sid FROM Sailors WHERE age > (SELECT MAX(age) FROM Sailors WHERE rating > 7);
### TaskGenerate a SQL query to answer [QUESTION]What are the different names of sailors who are older than some other sailor with a rating larger than 7?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different names of sailors who are older than some other sailor with a rating larger than 7?[/QUESTION][SQL]SELECT sid, name FROM Sailors WHERE age > (SELECT MAX(age) FROM Sailors WHERE rating > 7) ORDER BY name;
### TaskGenerate a SQL query to answer [QUESTION]Find the name and id of the sailors who reserved at least one boat?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name and id of the sailors who reserved at least one boat?[/QUESTION][SQL]SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves GROUP BY sid HAVING COUNT(*) > 0);
### TaskGenerate a SQL query to answer [QUESTION]What is the name and id of every sailor who reserved one or more boats?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name and id of every sailor who reserved one or more boats?[/QUESTION][SQL]SELECT sid, name FROM Sailors WHERE s.id IN (SELECT r.sid FROM Reserves r GROUP BY r.sid HAVING COUNT(r.bid) > 0);
### TaskGenerate a SQL query to answer [QUESTION]Find the id and name of the sailors who reserved more than one boat.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the id and name of the sailors who reserved more than one boat.[/QUESTION][SQL]SELECT sid, name FROM Sailors WHERE s.id IN (SELECT r.sid FROM Reserves r GROUP BY r.sid HAVING COUNT(r.bid) > 1);
### TaskGenerate a SQL query to answer [QUESTION]What are the different names of sailors who reserved two or more boats?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different names of sailors who reserved two or more boats?[/QUESTION][SQL]SELECT sid, COUNT(*) AS num_reservations FROM Reserves GROUP BY s.id HAVING COUNT(*) >= 2;
### TaskGenerate a SQL query to answer [QUESTION]Find the id of Sailors (sid) that reserved red or blue boat.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the id of Sailors (sid) that reserved red or blue boat.[/QUESTION][SQL]SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue') GROUP BY s.id;
### TaskGenerate a SQL query to answer [QUESTION]What are the sids for sailors who reserved red or blue boats?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the sids for sailors who reserved red or blue boats?[/QUESTION][SQL]SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue');
### TaskGenerate a SQL query to answer [QUESTION]Find the name and id of Sailors (sid) that reserved red or blue boat.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name and id of Sailors (sid) that reserved red or blue boat.[/QUESTION][SQL]SELECT sid, name FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) IN ('red', 'blue') ORDER BY s.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and ids of sailors who reserved red or blue boats?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and ids of sailors who reserved red or blue boats?[/QUESTION][SQL]SELECT sid, name FROM Sailors WHERE sid IN (SELECT r.sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) ='red' OR LOWER(b.color) = 'blue');
### TaskGenerate a SQL query to answer [QUESTION]Find the id of Sailors (sid) that reserved red and blue boat.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the id of Sailors (sid) that reserved red and blue boat.[/QUESTION][SQL]SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue') GROUP BY s.id HAVING COUNT(DISTINCT bid) >= 2;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of sailors who reserved red and blue boats?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of sailors who reserved red and blue boats?[/QUESTION][SQL]SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue') GROUP BY s.sid;
### TaskGenerate a SQL query to answer [QUESTION]Find the name and id of Sailors (sid) that reserved red and blue boat.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name and id of Sailors (sid) that reserved red and blue boat.[/QUESTION][SQL]SELECT sid, name FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) IN ('red', 'blue') GROUP BY s.name, s.sid;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and ids of sailors who reserved red and blue boats?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and ids of sailors who reserved red and blue boats?[/QUESTION][SQL]SELECT sid, name FROM Sailors WHERE sid IN (SELECT r.sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) IN ('red', 'blue'));
### TaskGenerate a SQL query to answer [QUESTION]What is the ids of sailors that haven’t reserved a boat?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the ids of sailors that haven’t reserved a boat?[/QUESTION][SQL]SELECT sid FROM Sailors WHERE s.sid NOT IN (SELECT r.sid FROM Reserves r);
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of sailors who have not reserved a boat?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of sailors who have not reserved a boat?[/QUESTION][SQL]SELECT sid FROM Sailors WHERE s.sid NOT IN (SELECT r.sid FROM Reserves r);
### TaskGenerate a SQL query to answer [QUESTION]what is the name and id of sailors who do not have a reservation of a boat?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]what is the name and id of sailors who do not have a reservation of a boat?[/QUESTION][SQL]SELECT sid, name FROM Sailors WHERE s.sid NOT IN (SELECT r.sid FROM Reserves r);
### TaskGenerate a SQL query to answer [QUESTION]What are the names and ids of all sailors who do not have boat reservations?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and ids of all sailors who do not have boat reservations?[/QUESTION][SQL]SELECT sid, name FROM Sailors WHERE s.sid NOT IN (SELECT r.sid FROM Reserves r);
### TaskGenerate a SQL query to answer [QUESTION]Find id for the sailors who do not have a reservation of a boat?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find id for the sailors who do not have a reservation of a boat?[/QUESTION][SQL]SELECT sid FROM Sailors WHERE s.sid NOT IN (SELECT r.sid FROM Reserves r);
### TaskGenerate a SQL query to answer [QUESTION]What is id about sailors who do not have boat reservations?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is id about sailors who do not have boat reservations?[/QUESTION][SQL]SELECT sid FROM Sailors WHERE s.id NOT IN (SELECT r.sid FROM Reserves r);
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the sailors who reserved boat with id 103?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the sailors who reserved boat with id 103?[/QUESTION][SQL]SELECT sid, name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid WHERE bid = 103;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the sailors who reserved boat with id 103.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the sailors who reserved boat with id 103.[/QUESTION][SQL]SELECT sid FROM Reserves WHERE bid = 103;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of all sailors whose rating is higher than any sailor named Luis?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of all sailors whose rating is higher than any sailor named Luis?[/QUESTION][SQL]SELECT sid, name FROM Sailors WHERE rating > (SELECT rating FROM Sailors WHERE name = 'Luis');
### TaskGenerate a SQL query to answer [QUESTION]What are the sailors' names, the ones whose rating is higher than any sailor named Luis?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the sailors' names, the ones whose rating is higher than any sailor named Luis?[/QUESTION][SQL]SELECT sid, name FROM Sailors WHERE rating > (SELECT rating FROM Sailors WHERE name = 'Luis');
### TaskGenerate a SQL query to answer [QUESTION]What is the name of all sailors whose rating is higher than all sailors named Luis?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of all sailors whose rating is higher than all sailors named Luis?[/QUESTION][SQL]SELECT sid, name FROM Sailors WHERE name!= 'Luis' AND rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis');
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all sailors with a higher rating than every sailor named Luis?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all sailors with a higher rating than every sailor named Luis?[/QUESTION][SQL]SELECT sid, name FROM Sailors WHERE rating > (SELECT rating FROM Sailors WHERE name = 'Luis');
### TaskGenerate a SQL query to answer [QUESTION]what is the name and id of every sailor who has a rating greater than 2 and reserved a boat.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]what is the name and id of every sailor who has a rating greater than 2 and reserved a boat.[/QUESTION][SQL]SELECT sid, name FROM Sailors WHERE rating > 2 AND sid IN (SELECT sid FROM Reserves);
### TaskGenerate a SQL query to answer [QUESTION]What are the names and ids of all sailors who have a rating of at least 3 and reserved a boat?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and ids of all sailors who have a rating of at least 3 and reserved a boat?[/QUESTION][SQL]SELECT sid, name FROM Sailors WHERE rating >= 3 AND sid IN (SELECT sid FROM Reserves);
### TaskGenerate a SQL query to answer [QUESTION]Find the name and age of the oldest sailor.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name and age of the oldest sailor.[/QUESTION][SQL]SELECT sid, name, MAX(age) AS max_age FROM Sailors GROUP BY s.id ORDER BY max_age DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name and age of the sailor with maximum age?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name and age of the sailor with maximum age?[/QUESTION][SQL]SELECT sid, name, MAX(age) AS max_age FROM Sailors GROUP BY sID, name ORDER BY max_age DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]how many sailors in total?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]how many sailors in total?[/QUESTION][SQL]SELECT sid FROM Sailors;
### TaskGenerate a SQL query to answer [QUESTION]How many sailors exist?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many sailors exist?[/QUESTION][SQL]SELECT sid FROM Sailors;
### TaskGenerate a SQL query to answer [QUESTION]What is the average age of sailors whose rating is 7?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average age of sailors whose rating is 7?[/QUESTION][SQL]SELECT sid, AVG(age) AS average_age FROM Sailors WHERE rating = 7 GROUP BY sid;
### TaskGenerate a SQL query to answer [QUESTION]What is average age of all sailors who have a rating of 7?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is average age of all sailors who have a rating of 7?[/QUESTION][SQL]SELECT sid, AVG(age) AS average_age FROM Sailors WHERE rating = 7 GROUP BY sid;
### TaskGenerate a SQL query to answer [QUESTION]How many sailors whose name starts with letter D exist?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many sailors whose name starts with letter D exist?[/QUESTION][SQL]SELECT sid FROM Sailors WHERE name ilike 'D%' GROUP BY sID HAVING COUNT(sID) > 0;
### TaskGenerate a SQL query to answer [QUESTION]What is the count of the sailors whose name starts with letter D?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the count of the sailors whose name starts with letter D?[/QUESTION][SQL]SELECT sid FROM Sailors WHERE name ilike 'D%' GROUP BY s.id;
### TaskGenerate a SQL query to answer [QUESTION]What are the average rating and max age of all sailors?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the average rating and max age of all sailors?[/QUESTION][SQL]SELECT sid, AVG(rating) AS avg_rating, MAX(age) AS max_age FROM Sailors GROUP BY sid;
### TaskGenerate a SQL query to answer [QUESTION]Find the average rating and largest age for the sailors[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the average rating and largest age for the sailors[/QUESTION][SQL]SELECT sid, AVG(rating) AS average_rating, MAX(age) AS max_age FROM Sailors GROUP BY sid;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of reservations for each boat.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of reservations for each boat.[/QUESTION][SQL]SELECT bid, COUNT(*) AS num_reservations FROM Reserves GROUP BY bid ORDER BY num_reservations DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many reservations exist for each boat?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many reservations exist for each boat?[/QUESTION][SQL]SELECT bid, COUNT(*) AS number_of_reservations FROM Reserves GROUP BY bid ORDER BY number_of_reservations DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of reservations for each boat with id greater than 50.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of reservations for each boat with id greater than 50.[/QUESTION][SQL]SELECT bid, COUNT(*) AS num_reservations FROM Reserves WHERE bid > 50 GROUP BY bid ORDER BY num_reservations DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many reservations exist for each boat with an id greater than 50?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many reservations exist for each boat with an id greater than 50?[/QUESTION][SQL]SELECT bid, COUNT(*) AS number_of_reservations FROM Reserves WHERE bid > 50 GROUP BY bid ORDER BY number_of_reservations DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of reservations for each boat with more than 1 reservation.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of reservations for each boat with more than 1 reservation.[/QUESTION][SQL]SELECT bid, COUNT(*) AS num_reservations FROM Reserves GROUP BY bid HAVING COUNT(*) > 1 ORDER BY num_reservations DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many reservations exist for each boat that has more than 1 reservation already?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many reservations exist for each boat that has more than 1 reservation already?[/QUESTION][SQL]SELECT bid, COUNT(*) AS number_of_reservations FROM Reserves GROUP BY bid HAVING COUNT(*) > 1 ORDER BY number_of_reservations DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of reservations by sailors with id greater than 1 for each boat.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of reservations by sailors with id greater than 1 for each boat.[/QUESTION][SQL]SELECT bid, COUNT(*) AS num_reservations FROM Reserves WHERE sid > 1 GROUP BY bid ORDER BY num_reservations DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many reservations for each boat did the sailors with an id greater than 1 make?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many reservations for each boat did the sailors with an id greater than 1 make?[/QUESTION][SQL]SELECT bid, COUNT(*) AS number_of_reservations FROM Reserves WHERE sid > 1 GROUP BY bid ORDER BY number_of_reservations DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the rating and average age for sailors who have reserved red boat grouped by rating?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the rating and average age for sailors who have reserved red boat grouped by rating?[/QUESTION][SQL]SELECT sid, AVG(age) AS average_age FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) ='red' GROUP BY s.rating ORDER BY s.rating NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the rating and average age for sailors who reserved red boats for each rating?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the rating and average age for sailors who reserved red boats for each rating?[/QUESTION][SQL]SELECT sid, AVG(age) AS average_age FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) ='red' GROUP BY s.rating ORDER BY s.rating NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the name, rating and age of all sailors ordered by rating and age.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name, rating and age of all sailors ordered by rating and age.[/QUESTION][SQL]SELECT sid, name, rating, age FROM Sailors ORDER BY rating DESC, age ASC;
### TaskGenerate a SQL query to answer [QUESTION]What is the name, rating, and age for every sailor? And order them by rating and age.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name, rating, and age for every sailor? And order them by rating and age.[/QUESTION][SQL]SELECT sid, name, rating, age FROM Sailors ORDER BY rating DESC, age ASC;
### TaskGenerate a SQL query to answer [QUESTION]Find the total number of boats.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the total number of boats.[/QUESTION][SQL]SELECT bid FROM Boats;
### TaskGenerate a SQL query to answer [QUESTION]How many boats are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many boats are there?[/QUESTION][SQL]SELECT bid FROM Boats;
### TaskGenerate a SQL query to answer [QUESTION]How many boats are red?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many boats are red?[/QUESTION][SQL]SELECT bid FROM Boats WHERE LOWER(color) ='red';
### TaskGenerate a SQL query to answer [QUESTION]How many red boats exist?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many red boats exist?[/QUESTION][SQL]SELECT bid FROM Boats WHERE LOWER(color) ='red';
### TaskGenerate a SQL query to answer [QUESTION]Find the names of boats booked by sailors whose age is between 20 and 30.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of boats booked by sailors whose age is between 20 and 30.[/QUESTION][SQL]SELECT bid, name FROM Boats JOIN Reserves r ON Boats.bid = Reserves.bid JOIN Sailors s ON Reserves.sid = Sailors.sid WHERE s.age BETWEEN 20 AND 30;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the boats booked by people between age 20 and 30?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the boats booked by people between age 20 and 30?[/QUESTION][SQL]SELECT bid, name FROM Boats JOIN Reserves r ON Boats.bid = Reserves.bid JOIN Sailors s ON Reserves.sid = Sailors.sid WHERE Sailors.age BETWEEN 20 AND 30;
### TaskGenerate a SQL query to answer [QUESTION]Find the names of sailors whose rating is larger than the rating of all sailors who booked a red boat.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of sailors whose rating is larger than the rating of all sailors who booked a red boat.[/QUESTION][SQL]SELECT sid, name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) ='red');
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the sailors whose rating is larger than the rating of all sailors who booked a red boat?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the sailors whose rating is larger than the rating of all sailors who booked a red boat?[/QUESTION][SQL]SELECT sid, name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) ='red');
### TaskGenerate a SQL query to answer [QUESTION]What is highest rating between sailors?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is highest rating between sailors?[/QUESTION][SQL]SELECT sid, MAX(rating) AS max_rating FROM Sailors GROUP BY sID ORDER BY max_rating DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the maximum rating for sailors?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the maximum rating for sailors?[/QUESTION][SQL]SELECT sid, MAX(rating) AS max_rating FROM Sailors GROUP BY sid ORDER BY max_rating DESC NULLS LAST LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the names of sailors who reserved boat with the name Melon.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of sailors who reserved boat with the name Melon.[/QUESTION][SQL]SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE LOWER(name) ='melon')
### TaskGenerate a SQL query to answer [QUESTION]What are the names of sailors who reserved a boat with the name Melon?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of sailors who reserved a boat with the name Melon?[/QUESTION][SQL]SELECT sid, name FROM Sailors JOIN Reserves r ON Sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.name) ='melon';
### TaskGenerate a SQL query to answer [QUESTION]List the names and ages of all sailors sorted by rating in descending order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names and ages of all sailors sorted by rating in descending order.[/QUESTION][SQL]SELECT sid, name, age FROM Sailors ORDER BY rating DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and ages of all sailors sorted by decreasing rating?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and ages of all sailors sorted by decreasing rating?[/QUESTION][SQL]SELECT sid, name, age, rating FROM Sailors ORDER BY rating DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find the model of the most expensive headphone.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the model of the most expensive headphone.[/QUESTION][SQL]SELECT headphone.Headphone_ID, h.headphone FROM headphone h ORDER BY h.price DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which headphone model has the highest price?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which headphone model has the highest price?[/QUESTION][SQL]SELECT headphone.Headphone_ID, heaphone.Model, MAX(headphone.Price) AS max_price FROM headphone GROUP BY heaphone.Headphone_ID, heaphone.Model ORDER BY max_price DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List all different headphone models in the alphabetical order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all different headphone models in the alphabetical order.[/QUESTION][SQL]SELECT headphone.Headphone_ID, headphone.Model FROM headphone ORDER BY Model ASC;
### TaskGenerate a SQL query to answer [QUESTION]Return the list of distinct headphone models ordered alphabetically.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the list of distinct headphone models ordered alphabetically.[/QUESTION][SQL]SELECT headphone.Headphone_ID, headphone.Model FROM headphone ORDER BY Model ASC;
### TaskGenerate a SQL query to answer [QUESTION]Which headphone class is the most common one?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which headphone class is the most common one?[/QUESTION][SQL]SELECT headphone.Headphone_ID, COUNT(*) AS total_count FROM headphone GROUP BY Headphone_ID ORDER BY total_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which headphone class contains the most headphones?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which headphone class contains the most headphones?[/QUESTION][SQL]SELECT headphone.Headphone_ID, COUNT(*) AS total_headphones FROM headphone GROUP BY Headphone_ID ORDER BY total_headphones DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which headphone class does have more than two headphones?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which headphone class does have more than two headphones?[/QUESTION][SQL]SELECT headphone.Headphone_ID, COUNT(*) AS number_of_headphones FROM headphone GROUP BY headphone.Class HAVING COUNT(*) > 2 ORDER BY number_of_headphones DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the headphone class that does not contain more than two headphones.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the headphone class that does not contain more than two headphones.[/QUESTION][SQL]SELECT headphone.Headphone_ID, h.class FROM headphone h JOIN (SELECT s.headphone_id, COUNT(s.headphone_id) AS count FROM stock s GROUP BY s.headphone_id HAVING COUNT(s.headphone_id) > 2) AS t ON h.headphone_id = t.headphone_id;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of headphones with a price higher than 200 for each class.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of headphones with a price higher than 200 for each class.[/QUESTION][SQL]SELECT headphone.Headphone_ID, COUNT(*) AS count_headphones FROM headphone WHERE Price > 200 GROUP BY Headphone_ID ORDER BY Headphone_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many headphones cost more than 200 for each headphone class?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many headphones cost more than 200 for each headphone class?[/QUESTION][SQL]SELECT headphone.Headphone_ID, headphone.Class, COUNT(*) AS number_of_headphones FROM headphone WHERE headphone.Price > 200 GROUP BY headphone.Headphone_ID, headphone.Class ORDER BY number_of_headphones DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]how many different earpads are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]how many different earpads are there?[/QUESTION][SQL]SELECT headphone.Headphone_ID, COUNT(DISTINCT h.Earpads) AS distinct_earpads FROM headphone h GROUP BY h.Headphone_ID ORDER BY h.Headphone_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of different earpads.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of different earpads.[/QUESTION][SQL]SELECT headphone.Headphone_ID, COUNT(DISTINCT h.Earpads) AS distinct_earpads FROM headphone h GROUP BY h.Headphone_ID ORDER BY distinct_earpads DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the top 2 earpads that are mostly used.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the top 2 earpads that are mostly used.[/QUESTION][SQL]SELECT headphone.Headphone_ID, COUNT(*) AS usage_count FROM headphone WHERE Earpads IN (SELECT Earpads FROM headphone GROUP BY Earpads ORDER BY COUNT(*) DESC LIMIT 2) GROUP BY Headphone_ID ORDER BY usage_count DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the top 2 earpads in terms of the number of headphones using them?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the top 2 earpads in terms of the number of headphones using them?[/QUESTION][SQL]SELECT headphone.Headphone_ID, headphone.Earpads FROM headphone JOIN (SELECT Earpads, COUNT(*) AS count FROM headphone GROUP BY Earpads ORDER BY count DESC LIMIT 2) AS subquery ON headphone.Earpads = subquery.Earpads;
### TaskGenerate a SQL query to answer [QUESTION]What are the model, class, and construction of the cheapest headphone?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the model, class, and construction of the cheapest headphone?[/QUESTION][SQL]SELECT headphone.Headphone_ID, h.model, h.class, h.construction FROM headphone h WHERE h.price = (SELECT MIN(h2.price) FROM headphone h2);
### TaskGenerate a SQL query to answer [QUESTION]Find the model, class, and construction of the headphone with the lowest price.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the model, class, and construction of the headphone with the lowest price.[/QUESTION][SQL]SELECT headphone.Headphone_ID, h.model, h.class, h.construction FROM headphone h WHERE h.price = (SELECT MIN(h2.price) FROM headphone h2);
### TaskGenerate a SQL query to answer [QUESTION]Find the average price for each headphone construction.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the average price for each headphone construction.[/QUESTION][SQL]SELECT headphone.Headphone_ID, h.headphone.Construction, AVG(headphone.Price) AS Average_Price FROM headphone h GROUP BY h.headphone.Construction ORDER BY Average_Price DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How much does headphones cost on average for each headphone construction?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How much does headphones cost on average for each headphone construction?[/QUESTION][SQL]SELECT headphone.Headphone_ID, h.headphone_id, AVG(h.price) AS average_price FROM headphone h GROUP BY h.headphone_id ORDER BY h.headphone_id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which headphone classes have both headphones with "Bowls" and headphones with "Comfort Pads" earpads?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which headphone classes have both headphones with "Bowls" and headphones with "Comfort Pads" earpads?[/QUESTION][SQL]SELECT headphone.Headphone_ID, headphone.Class FROM headphone WHERE headphone.Earpads IN ('Bowls', 'Comfort Pads') GROUP BY headphone.Headphone_ID, headphone.Class HAVING COUNT(DISTINCT headphone.Earpads) = 2 ORDER BY headphone.Headphone_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the headphone classes that contain both headphones using "Bowls" earpads and headphones using "Comfort Pads" earpads.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the headphone classes that contain both headphones using "Bowls" earpads and headphones using "Comfort Pads" earpads.[/QUESTION][SQL]SELECT headphone.Headphone_ID FROM headphone WHERE headphone.Earpads = 'Bowls' INTERSECT SELECT headphone.Headphone_ID FROM headphone WHERE headphone.Earpads = 'Comfort Pads';
### TaskGenerate a SQL query to answer [QUESTION]Which earpads never use plastic construction?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which earpads never use plastic construction?[/QUESTION][SQL]SELECT headphone.Headphone_ID, headphone.Earpads FROM headphone WHERE headphone.Construction!= 'plastic' ORDER BY headphone.Headphone_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find all earpads that do not use plastic construction.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all earpads that do not use plastic construction.[/QUESTION][SQL]SELECT headphone.Headphone_ID, headphone.Earpads FROM headphone WHERE headphone.Construction!= 'plastic' ORDER BY headphone.Headphone_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the headphone models whose price is below the average price.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the headphone models whose price is below the average price.[/QUESTION][SQL]SELECT headphone.Headphone_ID, h.headphone FROM headphone h WHERE h.price < (SELECT AVG(h2.price) FROM headphone h2);
### TaskGenerate a SQL query to answer [QUESTION]What are the headphone models that cost less than the average price?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the headphone models that cost less than the average price?[/QUESTION][SQL]SELECT headphone.Headphone_ID, h.headphone FROM headphone h JOIN (SELECT AVG(Price) AS avg_price FROM headphone) ap ON TRUE WHERE h.price < ap.avg_price ORDER BY h.headphone;
### TaskGenerate a SQL query to answer [QUESTION]Sort all store names by store open date.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Sort all store names by store open date.[/QUESTION][SQL]SELECT store.Store_ID, s.Name FROM store AS s ORDER BY s.Date_Opened;
### TaskGenerate a SQL query to answer [QUESTION]Give me a list of store names, sorted by store open date.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give me a list of store names, sorted by store open date.[/QUESTION][SQL]SELECT stock.Store_ID, s.Name FROM stock stocK JOIN store s ON stocK.Store_ID = s.Store_ID ORDER BY s.Date_Opened;
### TaskGenerate a SQL query to answer [QUESTION]List name and parking info for the stores in the Tarzana neighborhood.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List name and parking info for the stores in the Tarzana neighborhood.[/QUESTION][SQL]SELECT store.Store_ID, storer.Name, storer.Parking FROM store AS storer WHERE LOWER(storer.Neighborhood) = 'tarzana' ORDER BY storer.Store_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which stores are located in the "Tarzana" neighborhood? Return their names and parking information.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which stores are located in the "Tarzana" neighborhood? Return their names and parking information.[/QUESTION][SQL]SELECT store.Store_ID, s.Name, s.Parking FROM store s WHERE LOWER(s.Neighborhood) = 'tarzana' ORDER BY s.Store_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many different neighborhoods are there for all stores?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different neighborhoods are there for all stores?[/QUESTION][SQL]SELECT store.Quantity FROM store;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of distinct neighborhoods stores are located.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of distinct neighborhoods stores are located.[/QUESTION][SQL]SELECT store.Quantity FROM store;
### TaskGenerate a SQL query to answer [QUESTION]find the number of stores in each neighborhood.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]find the number of stores in each neighborhood.[/QUESTION][SQL]SELECT store.Store_ID, COUNT(*) AS store_count FROM store storer GROUP BY storer.Store_ID ORDER BY storer.Store_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many stores are there in each neighborhood?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many stores are there in each neighborhood?[/QUESTION][SQL]SELECT store.Store_ID, COUNT(*) AS number_of_stores FROM store storer GROUP BY storer.Neighborhood ORDER BY number_of_stores DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the store which has the most headphones in stock. List the number of headphones as well.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the store which has the most headphones in stock. List the number of headphones as well.[/QUESTION][SQL]SELECT store.Store_ID, SUM(stock.Quantity) AS total_headphones FROM stock JOIN store ON stock.Store_ID = store.Store_ID GROUP BY store.Store_ID ORDER BY total_headphones DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which store has the headphones in stock? Give me the store name and the total quantity.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which store has the headphones in stock? Give me the store name and the total quantity.[/QUESTION][SQL]SELECT store.Store_ID, store.Name, SUM(stock.Quantity) AS Total_Quantity FROM stock JOIN headphone ON stock.Headphone_ID = headphone.Headphone_ID JOIN store ON stock.Store_ID = store.Store_ID GROUP BY store.Store_ID, store.Name ORDER BY Total_Quantity DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of stores which have no headphone in stock.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of stores which have no headphone in stock.[/QUESTION][SQL]SELECT store.Store_ID, store.Name FROM store LEFT JOIN (SELECT Store_ID, Headphone_ID FROM stock) AS st ON store.Store_ID = st.Store_ID WHERE st.Store_ID IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]Which stores do not have any headphones in stock? Give me the store names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which stores do not have any headphones in stock? Give me the store names.[/QUESTION][SQL]SELECT store.Store_ID, store.Name FROM store LEFT JOIN stock ON store.Store_ID = stock.Store_ID WHERE stock.Store_ID IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]Which headphone models do not have any stock in any store?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which headphone models do not have any stock in any store?[/QUESTION][SQL]SELECT headphone.Headphone_ID, h.headphone FROM headphone h LEFT JOIN stock s ON h.headphone_id = s.headphone_id WHERE s.headphone_id IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]Find the headphone models that are not in stock in any store.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the headphone models that are not in stock in any store.[/QUESTION][SQL]SELECT headphone.Headphone_ID, h.headphone FROM headphone h LEFT JOIN (SELECT s.Store_ID, s.Headphone_ID FROM stock s) AS sub ON h.headphone_id = sub.headphone_id WHERE sub.headphone_id IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]Which headphone model has the largest quantity of stock across all the stores?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which headphone model has the largest quantity of stock across all the stores?[/QUESTION][SQL]SELECT headphone.Headphone_ID, SUM(stock.Quantity) AS total_quantity FROM stock JOIN headphone ON stock.Headphone_ID = headphone.Headphone_ID GROUP BY headphone.Headphone_ID ORDER BY total_quantity DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the headphone model whose total quantity in stock is the largest.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the headphone model whose total quantity in stock is the largest.[/QUESTION][SQL]SELECT headphone.Headphone_ID, SUM(stock.Quantity) AS Total_Quantity FROM stock JOIN headphone ON stock.Headphone_ID = headphone.Headphone_ID GROUP BY headphone.Headphone_ID ORDER BY Total_Quantity DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How many headphones are stored in the Woodman store?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many headphones are stored in the Woodman store?[/QUESTION][SQL]SELECT store.Quantity FROM stock WHERE Store_ID = (SELECT Store_ID FROM store WHERE Name = 'Woodman')
### TaskGenerate a SQL query to answer [QUESTION]Find the total quantity of headphones stored in the Woodman store.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the total quantity of headphones stored in the Woodman store.[/QUESTION][SQL]SELECT store.Quantity FROM stock WHERE stock.Store_ID = (SELECT Store_ID FROM store WHERE Name = 'Woodman');
### TaskGenerate a SQL query to answer [QUESTION]Which neighborhood does not have any headphone in stock?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which neighborhood does not have any headphone in stock?[/QUESTION][SQL]SELECT store.Store_ID, store.Neighborhood FROM store LEFT JOIN (SELECT Stock.Store_ID FROM Stock WHERE Stock.Quantity > 0) AS stocked ON store.Store_ID = stocked.Store_ID WHERE stocked.Store_ID IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]Find the neighborhood where no headphones are in stock.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the neighborhood where no headphones are in stock.[/QUESTION][SQL]SELECT store.Store_ID FROM store WHERE Store_ID NOT IN (SELECT DISTINCT Stock.Store_ID FROM stock)
### TaskGenerate a SQL query to answer [QUESTION]How many authors do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many authors do we have?[/QUESTION][SQL]SELECT Author.venue, COUNT(Author.author_id) AS number_of_authors FROM Author GROUP BY Author.venue ORDER BY number_of_authors DESC;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of authors.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of authors.[/QUESTION][SQL]SELECT Author.venue, COUNT(Author.author_id) AS author_count FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY Author.venue ORDER BY author_count DESC;
### TaskGenerate a SQL query to answer [QUESTION]How many papers do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many papers do we have?[/QUESTION][SQL]SELECT paper_id FROM Paper;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of papers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of papers.[/QUESTION][SQL]SELECT paper_id FROM Paper;
### TaskGenerate a SQL query to answer [QUESTION]How many affiliations do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many affiliations do we have?[/QUESTION][SQL]SELECT Affiliation.venue FROM Affiliation;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of affiliations.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of affiliations.[/QUESTION][SQL]SELECT Affiliation.venue FROM Affiliation;
### TaskGenerate a SQL query to answer [QUESTION]How many papers do we have in NAACL 2000?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many papers do we have in NAACL 2000?[/QUESTION][SQL]SELECT paper_id FROM Paper WHERE venue = 'NAACL' AND year = 2000;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of papers in NAACL 2000.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of papers in NAACL 2000.[/QUESTION][SQL]SELECT paper_id FROM Paper WHERE venue = 'NAACL' AND year = 2000;
### TaskGenerate a SQL query to answer [QUESTION]How many papers are published in year 2009 by Columbia University?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many papers are published in year 2009 by Columbia University?[/QUESTION][SQL]SELECT paper_id FROM Paper WHERE YEAR = 2009 AND venue LIKE '%Columbia%University%'
### TaskGenerate a SQL query to answer [QUESTION]Count the number of papers published by Columbia University in 2009.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of papers published by Columbia University in 2009.[/QUESTION][SQL]SELECT paper_id FROM Paper WHERE year = 2009 AND venue LIKE '%Columbia%University%' GROUP BY paper_id;
### TaskGenerate a SQL query to answer [QUESTION]List names and addresses for all affiliations.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List names and addresses for all affiliations.[/QUESTION][SQL]SELECT Affiliation.venue, Affiliation.name, Affiliation.address FROM Affiliation;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and addresses for all affiliations?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and addresses for all affiliations?[/QUESTION][SQL]SELECT Affiliation.venue, Affiliation.address FROM Affiliation;
### TaskGenerate a SQL query to answer [QUESTION]List all venues and years for papers ordered by year.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all venues and years for papers ordered by year.[/QUESTION][SQL]SELECT paper_id, venue, year FROM Paper ORDER BY year;
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct venues for papers, ordered by year?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct venues for papers, ordered by year?[/QUESTION][SQL]SELECT paper_id, venue, year FROM Paper ORDER BY year;
### TaskGenerate a SQL query to answer [QUESTION]Find the titles and paper IDs for papers written by Harvard University.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the titles and paper IDs for papers written by Harvard University.[/QUESTION][SQL]SELECT paper_id, title FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Harvard University')
### TaskGenerate a SQL query to answer [QUESTION]What are the titles and paper ids for papers written in affiliation with Harvard University?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles and paper ids for papers written in affiliation with Harvard University?[/QUESTION][SQL]SELECT paper_id, title FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE Author_list.affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name ilike '%Harvard%University%') ORDER BY paper_id;
### TaskGenerate a SQL query to answer [QUESTION]Find all papers with titles and paper IDs written by Mckeown.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all papers with titles and paper IDs written by Mckeown.[/QUESTION][SQL]SELECT paper_id, title FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE LOWER(name) ='mckeown'
### TaskGenerate a SQL query to answer [QUESTION]What are the titles and paper ids for papers written by Mckeown?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles and paper ids for papers written by Mckeown?[/QUESTION][SQL]SELECT paper_id, title FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE LOWER(name) ='mckeown'
### TaskGenerate a SQL query to answer [QUESTION]Find all papers with titles and paper IDs collaborated by Stanford University and Columbia University.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all papers with titles and paper IDs collaborated by Stanford University and Columbia University.[/QUESTION][SQL]SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT al.paper_id FROM Author_list al JOIN Affiliation af ON al.affiliation_id = af.affiliation_id WHERE LOWER(af.name) IN ('stanford university', 'columbia university')) ORDER BY paper_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles and paper ids for papers which were affiliated with both Stanford and Columbia University?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles and paper ids for papers which were affiliated with both Stanford and Columbia University?[/QUESTION][SQL]SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT al.paper_id FROM Author_list al JOIN Affiliation af ON al.affiliation_id = af.affiliation_id WHERE LOWER(af.name) ='stanford' AND LOWER(al.author_id) IN (SELECT author_id FROM Author WHERE name LIKE '%Columbia%')) ORDER BY paper_id;
### TaskGenerate a SQL query to answer [QUESTION]Find all papers with titles and paper IDs co-authored by Mckeown, Kathleen and Rambow, Owen.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all papers with titles and paper IDs co-authored by Mckeown, Kathleen and Rambow, Owen.[/QUESTION][SQL]SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT al.paper_id FROM Author_list al JOIN Author a ON al.author_id = a.author_id WHERE LOWER(a.name) ='mckeown,kathleen' AND LOWER(al.paper_id) IN (SELECT paper_id FROM Paper)) AND paper_id IN (SELECT al.paper_id FROM Author_list al JOIN Author a ON al.author_id = a.author_id WHERE LOWER(a.name) = 'rambow,owen' AND LOWER(al.paper_id) IN (SELECT paper_id FROM Paper));
### TaskGenerate a SQL query to answer [QUESTION]What are the titles and paper ids co-authored by Mckeown, Kathleen and Rambow, Owen?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles and paper ids co-authored by Mckeown, Kathleen and Rambow, Owen?[/QUESTION][SQL]SELECT paper_id, title FROM Paper JOIN Author_list al ON paper_id = author_list.paper_id WHERE author_list.author_id IN (SELECT author_id FROM Author WHERE name ilike '%Mckeown,%Kathleen%' OR name ilike '%Rambow,%Owen%') GROUP BY paper_id, title;
### TaskGenerate a SQL query to answer [QUESTION]Find the titles and paper IDs for papers which have Mckeown but not Rambow in author list.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the titles and paper IDs for papers which have Mckeown but not Rambow in author list.[/QUESTION][SQL]SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT al.paper_id FROM Author_list al JOIN Author au ON al.author_id = au.author_id WHERE LOWER(au.name) LIKE '%mckeown%' AND LOWER(au.name) NOT LIKE '%rambow%') ORDER BY paper_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles and paper ids which have Mckeown as an author, but not Rambow?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles and paper ids which have Mckeown as an author, but not Rambow?[/QUESTION][SQL]SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT al.paper_id FROM Author_list al JOIN Author au ON al.author_id = au.author_id WHERE LOWER(au.name) ='mckeown') AND paper_id NOT IN (SELECT al.paper_id FROM Author_list al JOIN Author au ON al.author_id = au.author_id WHERE LOWER(au.name) = 'rambow');
### TaskGenerate a SQL query to answer [QUESTION]Find the titles and paper IDs for papers which have Mckeown, Kathleen or Rambow, Owen in author list.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the titles and paper IDs for papers which have Mckeown, Kathleen or Rambow, Owen in author list.[/QUESTION][SQL]SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT al.paper_id FROM Author_list al JOIN Author au ON al.author_id = au.author_id WHERE LOWER(au.name) LIKE '%mckeown, kathleen%' OR LOWER(au.name) LIKE '%rambow, owen%') ORDER BY title;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles and paper ids for papers that have Mckeown, Kathleen or Rambow, Owen in their author list?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles and paper ids for papers that have Mckeown, Kathleen or Rambow, Owen in their author list?[/QUESTION][SQL]SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT al.paper_id FROM Author_list al JOIN Author au ON al.author_id = au.author_id WHERE LOWER(au.name) LIKE '%mckeown,%kathleen%' OR LOWER(au.name) LIKE '%rambow,%owen%') ORDER BY title;
### TaskGenerate a SQL query to answer [QUESTION]List the names of all authors and their number of papers in descending order by number of papers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of all authors and their number of papers in descending order by number of papers.[/QUESTION][SQL]SELECT Author.venue, COUNT(Author_list.paper_id) AS num_papers FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY Author.venuu ORDER BY num_papers DESC;
### TaskGenerate a SQL query to answer [QUESTION]How many papers did each author publish, ordered by number of papers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many papers did each author publish, ordered by number of papers?[/QUESTION][SQL]SELECT paper_id, COUNT(paper_id) AS num_papers FROM Author_list GROUP BY paper_id ORDER BY num_papers DESC;
### TaskGenerate a SQL query to answer [QUESTION]List all affiliations with ascending ordered number of papers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all affiliations with ascending ordered number of papers.[/QUESTION][SQL]SELECT Affiliation.venue, COUNT(Paper.paper_id) AS paper_count FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY Affiliation.venue ORDER BY paper_count ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all affiliations, ordered by number of papers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all affiliations, ordered by number of papers?[/QUESTION][SQL]SELECT Affiliation.venue, COUNT(Paper.paper_id) AS paper_count FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY Affiliation.name ORDER BY paper_count DESC;
### TaskGenerate a SQL query to answer [QUESTION]List names of all authors who have more than 50 papers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List names of all authors who have more than 50 papers.[/QUESTION][SQL]SELECT Author.venue, COUNT(Author_list.paper_id) AS paper_count FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY Author.venue HAVING COUNT(Author_list.paper_id) > 50 ORDER BY paper_count DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all authors who have more than 50 papers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all authors who have more than 50 papers?[/QUESTION][SQL]SELECT paper_id, COUNT(paper_id) AS paper_count FROM Author_list GROUP BY paper_id HAVING COUNT(paper_id) > 50;
### TaskGenerate a SQL query to answer [QUESTION]List names of all authors who have only 1 paper.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List names of all authors who have only 1 paper.[/QUESTION][SQL]SELECT Author.venue FROM Author WHERE Author.author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(paper_id) = 1);
### TaskGenerate a SQL query to answer [QUESTION]What are the names of authors who have exactly 1 paper?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of authors who have exactly 1 paper?[/QUESTION][SQL]SELECT Author.venue, COUNT(Author_list.paper_id) AS number_of_papers FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY Author.venue HAVING COUNT(Author_list.paper_id) = 1 ORDER BY Author.venue;
### TaskGenerate a SQL query to answer [QUESTION]What is the venue and year with the most number of publications?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the venue and year with the most number of publications?[/QUESTION][SQL]SELECT paper_id, COUNT(paper_id) AS publication_count FROM Paper GROUP BY paper_id ORDER BY publication_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What was the venue and year with the most publications?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What was the venue and year with the most publications?[/QUESTION][SQL]SELECT paper_id, COUNT(paper_id) AS publication_count FROM Paper GROUP BY paper_id ORDER BY publication_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the venue with the least number of publications?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the venue with the least number of publications?[/QUESTION][SQL]SELECT paper_id FROM Paper WHERE venue = (SELECT MIN(p.venue) FROM Paper p GROUP BY p.venue);
### TaskGenerate a SQL query to answer [QUESTION]Which venue has the fewest publications?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which venue has the fewest publications?[/QUESTION][SQL]SELECT paper_id, COUNT(paper_id) AS publication_count FROM Paper GROUP BY paper_id ORDER BY publication_count ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How many papers cite paper with id A00-1002?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many papers cite paper with id A00-1002?[/QUESTION][SQL]SELECT paper_id FROM Citation WHERE cited_paper_id = 'A00-1002';
### TaskGenerate a SQL query to answer [QUESTION]Count the number of papers which cited a paper with id A00-1002.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of papers which cited a paper with id A00-1002.[/QUESTION][SQL]SELECT paper_id FROM Citation WHERE cited_paper_id = 'A00-1002';
### TaskGenerate a SQL query to answer [QUESTION]How many reference papers does paper with id D12-1027 have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many reference papers does paper with id D12-1027 have?[/QUESTION][SQL]SELECT paper_id FROM Citation WHERE cited_paper_id = 'D12-1027';
### TaskGenerate a SQL query to answer [QUESTION]Count the number of references the paper with id D12-1027 has.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of references the paper with id D12-1027 has.[/QUESTION][SQL]SELECT paper_id, COUNT(cited_paper_id) AS num_citations FROM Citation WHERE paper_id = 'D12-1027' GROUP BY paper_id;
### TaskGenerate a SQL query to answer [QUESTION]What is the id and the number of citations of the most cited paper?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the id and the number of citations of the most cited paper?[/QUESTION][SQL]SELECT paper_id, COUNT(*) AS citation_count FROM Citation GROUP BY paper_id ORDER BY citation_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the id and the number of citations of the most cited paper.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the id and the number of citations of the most cited paper.[/QUESTION][SQL]SELECT paper_id, COUNT(*) AS citation_count FROM Citation GROUP BY paper_id ORDER BY citation_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the title of the paper which cites most number of papers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the title of the paper which cites most number of papers?[/QUESTION][SQL]SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id ORDER BY COUNT(cited_paper_id) DESC LIMIT 1);
### TaskGenerate a SQL query to answer [QUESTION]What is the title of the paper which cites the most other papers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the title of the paper which cites the most other papers?[/QUESTION][SQL]SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id ORDER BY COUNT(cited_paper_id) DESC LIMIT 1);
### TaskGenerate a SQL query to answer [QUESTION]List top 10 most cited papers and their numbers of citations.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List top 10 most cited papers and their numbers of citations.[/QUESTION][SQL]SELECT paper_id, COUNT(*) AS citation_count FROM Citation GROUP BY paper_id ORDER BY citation_count DESC LIMIT 10;
### TaskGenerate a SQL query to answer [QUESTION]What are the 10 most cited papers, and how many citations did each have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the 10 most cited papers, and how many citations did each have?[/QUESTION][SQL]SELECT paper_id, COUNT(*) AS citation_count FROM Citation GROUP BY paper_id ORDER BY citation_count DESC LIMIT 10;
### TaskGenerate a SQL query to answer [QUESTION]How many citations does Mckeown, Kathleen have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many citations does Mckeown, Kathleen have?[/QUESTION][SQL]SELECT paper_id FROM Author_list WHERE name = 'Mckeown, Kathleen';
### TaskGenerate a SQL query to answer [QUESTION]Count the number of citations Mckeown, Kathleen has.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of citations Mckeown, Kathleen has.[/QUESTION][SQL]SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') UNION SELECT cited_paper_id FROM Citation WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen'));
### TaskGenerate a SQL query to answer [QUESTION]How many papers does Mckeown, Kathleen cite?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many papers does Mckeown, Kathleen cite?[/QUESTION][SQL]SELECT paper_id FROM Citation WHERE cited_paper_id IN (SELECT paper_id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE name ilike '%Mckeown,%Kathleen%');
### TaskGenerate a SQL query to answer [QUESTION]Count the number of papers Mckeown, Kathleen has cited.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of papers Mckeown, Kathleen has cited.[/QUESTION][SQL]SELECT paper_id FROM Citation WHERE cited_paper_id IN (SELECT paper_id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE name ilike '%Mckeown,%Kathleen%');
### TaskGenerate a SQL query to answer [QUESTION]Find the name and number of citations of the author who has most citations among all authors?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name and number of citations of the author who has most citations among all authors?[/QUESTION][SQL]SELECT Author.venue, COUNT(Citation.paper_id) AS total_citations FROM Author JOIN Paper ON Author.author_id = Paper.paper_id JOIN Citation ON Paper.paper_id = Citation.cited_paper_id GROUP BY Author.venue ORDER BY total_citations DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name and number of citations of the author with the greatest number of citations among authors?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name and number of citations of the author with the greatest number of citations among authors?[/QUESTION][SQL]SELECT Author.venue, COUNT(Citation.paper_id) AS citation_count FROM Author JOIN Paper ON Author.author_id = Paper.paper_id LEFT JOIN Citation ON Paper.paper_id = Citation.cited_paper_id GROUP BY Author.venue ORDER BY citation_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the venues and years where Mckeown, Kathleen had papers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the venues and years where Mckeown, Kathleen had papers?[/QUESTION][SQL]SELECT paper_id, venue, year FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE name = 'Mckeown, Kathleen';
### TaskGenerate a SQL query to answer [QUESTION]Which venues and years did Mckeown, Kathleen have papers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which venues and years did Mckeown, Kathleen have papers?[/QUESTION][SQL]SELECT paper_id, venue, year FROM Paper JOIN Author_list ON paper_id = author_list.paper_id WHERE name = 'Mckeown' AND email = 'Kathleen';
### TaskGenerate a SQL query to answer [QUESTION]What are the venues and years where Columbia University had papers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the venues and years where Columbia University had papers?[/QUESTION][SQL]SELECT paper_id, venue, year FROM Paper WHERE LOWER(venue) = 'columbia university' ORDER BY year;
### TaskGenerate a SQL query to answer [QUESTION]Which venues and years did Columbia University have papers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which venues and years did Columbia University have papers?[/QUESTION][SQL]SELECT paper_id, venue, year FROM Paper WHERE LOWER(venue) = 'columbia university' ORDER BY year;
### TaskGenerate a SQL query to answer [QUESTION]Which author had the most papers in the year 2009?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which author had the most papers in the year 2009?[/QUESTION][SQL]SELECT paper_id, COUNT(paper_id) AS paper_count FROM Paper WHERE YEAR = 2009 GROUP BY paper_id ORDER BY paper_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the author with the most papers in 2009?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the author with the most papers in 2009?[/QUESTION][SQL]SELECT paper_id, COUNT(paper_id) AS paper_count FROM Paper WHERE YEAR = 2009 GROUP BY paper_id ORDER BY paper_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the top 3 affiliations that have the most papers in year 2009?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the top 3 affiliations that have the most papers in year 2009?[/QUESTION][SQL]SELECT paper_id, COUNT(paper_id) AS paper_count FROM Paper WHERE YEAR = 2009 GROUP BY paper_id ORDER BY paper_count DESC LIMIT 3;
### TaskGenerate a SQL query to answer [QUESTION]Which 3 affiliations had the most papers in 2009?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which 3 affiliations had the most papers in 2009?[/QUESTION][SQL]SELECT paper_id, COUNT(paper_id) AS paper_count FROM Paper WHERE YEAR = 2009 GROUP BY paper_id ORDER BY paper_count DESC LIMIT 3;
### TaskGenerate a SQL query to answer [QUESTION]How many papers does Columbia University have in or before 2009?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many papers does Columbia University have in or before 2009?[/QUESTION][SQL]SELECT paper_id FROM Paper WHERE venue = 'Columbia University' AND year <= 2009;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of papers Columbia University had during or prior to 2009.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of papers Columbia University had during or prior to 2009.[/QUESTION][SQL]SELECT paper_id FROM Paper WHERE year <= 2009 AND affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University');
### TaskGenerate a SQL query to answer [QUESTION]How many papers does Stanford University have between 2000 and 2009?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many papers does Stanford University have between 2000 and 2009?[/QUESTION][SQL]SELECT paper_id FROM Paper WHERE year BETWEEN 2000 AND 2009;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of papers Stanford University had between 2000 and 2009.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of papers Stanford University had between 2000 and 2009.[/QUESTION][SQL]SELECT paper_id FROM Paper WHERE year BETWEEN 2000 AND 2009;
### TaskGenerate a SQL query to answer [QUESTION]What is the title of the paper that has most number of authors?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the title of the paper that has most number of authors?[/QUESTION][SQL]SELECT paper_id, COUNT(DISTINCT author_id) AS num_authors FROM Author_list GROUP BY paper_id ORDER BY num_authors DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the title of the paper with the most authors.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the title of the paper with the most authors.[/QUESTION][SQL]SELECT paper_id, MAX(author_count) AS max_authors FROM (SELECT pl.paper_id, COUNT(DISTINCT pl.author_id) AS author_count FROM Author_list pl GROUP BY pl.paper_id) AS subquery GROUP BY paper_id ORDER BY max_authors DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How many collaborators has Mckeown, Kathleen had?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many collaborators has Mckeown, Kathleen had?[/QUESTION][SQL]SELECT paper_id, COUNT(DISTINCT author_id) AS num_collaborators FROM Author_list WHERE name = 'Mckeown, Kathleen' GROUP BY paper_id;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of collaborators that Mckeown, Kathleen has had.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of collaborators that Mckeown, Kathleen has had.[/QUESTION][SQL]SELECT paper_id, COUNT(DISTINCT author_id) AS num_collaborators FROM Author_list WHERE name = 'Mckeown, Kathleen' GROUP BY paper_id;
### TaskGenerate a SQL query to answer [QUESTION]Who has the most papers co-authored with Mckeown, Kathleen?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Who has the most papers co-authored with Mckeown, Kathleen?[/QUESTION][SQL]SELECT paper_id, COUNT(paper_id) AS num_papers FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') GROUP BY paper_id ORDER BY num_papers DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the author who has co-authored the most papers with Mckeown, Kathleen?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the author who has co-authored the most papers with Mckeown, Kathleen?[/QUESTION][SQL]SELECT paper_id, COUNT(*) AS num_papers FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') GROUP BY paper_id ORDER BY num_papers DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the id of the papers whose title has the key word 'translation'.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the id of the papers whose title has the key word 'translation'.[/QUESTION][SQL]SELECT paper_id FROM Paper WHERE LOWER(title) LIKE '%translation%'
### TaskGenerate a SQL query to answer [QUESTION]What are the ids for papers with titles containing 'translation'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids for papers with titles containing 'translation'?[/QUESTION][SQL]SELECT paper_id FROM Paper WHERE title ilike '%translation%'
### TaskGenerate a SQL query to answer [QUESTION]Find the id and title of the papers that are never cited by others.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the id and title of the papers that are never cited by others.[/QUESTION][SQL]SELECT paper_id, title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation UNION SELECT paper_id FROM Citation);
### TaskGenerate a SQL query to answer [QUESTION]What are the ids and titles for papers that have never been cited?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids and titles for papers that have never been cited?[/QUESTION][SQL]SELECT paper_id, title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation UNION SELECT paper_id FROM Citation);
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the affiliation whose address contains 'China' and publishes the greatest number of papers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the affiliation whose address contains 'China' and publishes the greatest number of papers.[/QUESTION][SQL]SELECT Affiliation.venue, COUNT(Paper.paper_id) AS paper_count FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Affiliation.address ilike '%China%' GROUP BY Affiliation.venue ORDER BY paper_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the affiliation which publishes the greatest number of papers among those whose address contains 'China'.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the affiliation which publishes the greatest number of papers among those whose address contains 'China'.[/QUESTION][SQL]SELECT Affiliation.venue, COUNT(Paper.paper_id) AS paper_count FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Affiliation.address ilike '%China%' GROUP BY Affiliation.venue ORDER BY paper_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of papers published in different conferences each year.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of papers published in different conferences each year.[/QUESTION][SQL]SELECT paper_id, venue, COUNT(paper_id) AS num_papers FROM Paper GROUP BY paper_id, venue ORDER BY venue, year;
### TaskGenerate a SQL query to answer [QUESTION]How many papers are published in each venue in each year?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many papers are published in each venue in each year?[/QUESTION][SQL]SELECT paper_id, venue, EXTRACT(YEAR FROM TO_TIMESTAMP(year)) AS YEAR, COUNT(paper_id) AS number_of_papers FROM Paper GROUP BY paper_id, venue, YEAR ORDER BY venue, YEAR;
### TaskGenerate a SQL query to answer [QUESTION]Find the total number of papers for each affiliation.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the total number of papers for each affiliation.[/QUESTION][SQL]SELECT paper_id, COUNT(paper_id) AS total_papers FROM Paper GROUP BY paper_id ORDER BY total_papers DESC;
### TaskGenerate a SQL query to answer [QUESTION]How many papers has each affiliation published?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many papers has each affiliation published?[/QUESTION][SQL]SELECT paper_id, COUNT(paper_id) AS number_of_papers FROM Paper GROUP BY paper_id;
### TaskGenerate a SQL query to answer [QUESTION]Find the titles of papers that have more than 50 citations.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the titles of papers that have more than 50 citations.[/QUESTION][SQL]SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(cited_paper_id) > 50);
### TaskGenerate a SQL query to answer [QUESTION]What are the titles for papers with more than 50 citations?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles for papers with more than 50 citations?[/QUESTION][SQL]SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(cited_paper_id) > 50);
### TaskGenerate a SQL query to answer [QUESTION]Find the number of authors who did not publish any paper that is cited more than 50 times.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of authors who did not publish any paper that is cited more than 50 times.[/QUESTION][SQL]SELECT paper_id FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(cited_paper_id) > 50);
### TaskGenerate a SQL query to answer [QUESTION]How many authors have not published a paper with more than 50 citations?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many authors have not published a paper with more than 50 citations?[/QUESTION][SQL]SELECT Author.venue, COUNT(DISTINCT Author.author_id) AS number_of_authors FROM Paper JOIN Citation ON Paper.paper_id = Citation.cited_paper_id GROUP BY Paper.venue HAVING SUM(CASE WHEN Citation.cited_paper_id IS NOT NULL THEN 1 ELSE 0 END) <= 50 ORDER BY number_of_authors DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find the names of authors who published some paper on NAACL and ACL in the year 2009.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of authors who published some paper on NAACL and ACL in the year 2009.[/QUESTION][SQL]SELECT paper_id FROM Paper WHERE venue IN ('NAACL', 'ACL') AND YEAR = 2009;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of authors who published in both NAACL and ACL in 2009?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of authors who published in both NAACL and ACL in 2009?[/QUESTION][SQL]SELECT Author.venue, Author.name FROM Paper JOIN Author ON Paper.paper_id = Author.author_id WHERE Paper.year = 2009 AND (Paper.venue ilike '%NAACL%' OR Paper.venue ilike '%ACL%') GROUP BY Author.name, Author.venue HAVING COUNT(DISTINCT Paper.venue) > 1 ORDER BY Author.name;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of authors who have never published a paper in ACL.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of authors who have never published a paper in ACL.[/QUESTION][SQL]SELECT Author.venue, Author.name FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id WHERE Author_list.paper_id IN (SELECT Paper.paper_id FROM Paper WHERE LOWER(Paper.venue)!= 'acl') GROUP BY Author.venue, Author.name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of authors who have not published a paper in ACL?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of authors who have not published a paper in ACL?[/QUESTION][SQL]SELECT Author.venue, Author.name FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id WHERE Author.venue!= 'ACL'
### TaskGenerate a SQL query to answer [QUESTION]How many conferences are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many conferences are there?[/QUESTION][SQL]SELECT conference.Conference_ID FROM conference;
### TaskGenerate a SQL query to answer [QUESTION]What is the total number of conferences?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total number of conferences?[/QUESTION][SQL]SELECT conference.Conference_ID FROM conference;
### TaskGenerate a SQL query to answer [QUESTION]List all distinct conference names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all distinct conference names.[/QUESTION][SQL]SELECT conference.Conference_ID, conferecence.Conference_Name FROM conference;
### TaskGenerate a SQL query to answer [QUESTION]What are the different conference names?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different conference names?[/QUESTION][SQL]SELECT conference.Conference_ID, conferecence.Conference_Name FROM conference;
### TaskGenerate a SQL query to answer [QUESTION]List all conference name, year, and location.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all conference name, year, and location.[/QUESTION][SQL]SELECT conference.Conference_ID, conferecence.Conference_Name, conferecence.Year, conferecence.Location FROM conferecence
### TaskGenerate a SQL query to answer [QUESTION]What are the names, years, and locations of all conferences?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names, years, and locations of all conferences?[/QUESTION][SQL]SELECT conference.Conference_ID, conferecence.Conference_Name, conferecence.Year, conferecence.Location FROM conference conferecence;
### TaskGenerate a SQL query to answer [QUESTION]Show all conference names and the number of times each conference has.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all conference names and the number of times each conference has.[/QUESTION][SQL]SELECT conference.Conference_ID, COUNT(confereence.Conference_ID) AS num_of_conferences FROM confereence GROUP BY confereence.Conference_ID ORDER BY num_of_conferences DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]For each conference name, how many times has it occurred?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each conference name, how many times has it occurred?[/QUESTION][SQL]SELECT conference.Conference_ID, COUNT(*) AS number_of_occurrences FROM conference confereence GROUP BY conference.Conference_ID ORDER BY number_of_occurrences DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]show all years and the number of conferences in each year.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]show all years and the number of conferences in each year.[/QUESTION][SQL]SELECT conference.role, COUNT(*) AS number_of_conferences FROM conference GROUP BY role;
### TaskGenerate a SQL query to answer [QUESTION]How many conferences occur every year?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many conferences occur every year?[/QUESTION][SQL]SELECT conference_participation.Conference_ID, COUNT(DISTINCT coference_paerticipation.staff_ID) AS number_of_staff FROM conference_participation JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID GROUP BY conference_participation.Conference_ID ORDER BY number_of_staff DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]which year has least number of conferences?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]which year has least number of conferences?[/QUESTION][SQL]SELECT conference.Conference_ID, confereence.Year FROM conference confereence GROUP BY confereence.Conference_ID, confereence.Year ORDER BY COUNT(confereence.Conference_ID) ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What year had the fewest conferences?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What year had the fewest conferences?[/QUESTION][SQL]SELECT conference.Conference_ID, conferecence.Year FROM conference WHERE YEAR IN (SELECT MIN(YEAR) FROM conference);
### TaskGenerate a SQL query to answer [QUESTION]Show all locations where at least two conferences are located.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all locations where at least two conferences are located.[/QUESTION][SQL]SELECT conference.Conference_ID, confereence.Location FROM conference AS confereence GROUP BY confereence.Location HAVING COUNT(confereence.Conference_ID) >= 2 ORDER BY confereence.Location;
### TaskGenerate a SQL query to answer [QUESTION]What are all locations that have hosted at least two conferences?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all locations that have hosted at least two conferences?[/QUESTION][SQL]SELECT conference.Conference_ID, confereence.Location FROM conference WHERE (SELECT COUNT(*) FROM conference WHERE Location = conference.Location) >= 2;
### TaskGenerate a SQL query to answer [QUESTION]Show the institution name, location and founded year of all institutions.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the institution name, location and founded year of all institutions.[/QUESTION][SQL]SELECT institution.role, staff.name, staff.age, staff.nationality, staff.institution_id FROM staff JOIN institution ON staff.institution_id = institution.institution_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the names, locations, and founding years for all institutions?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names, locations, and founding years for all institutions?[/QUESTION][SQL]SELECT institution.role, staff.name, staff.age, staff.nationality, staff.institution_id, conference.location, conference.year FROM staff JOIN institution ON staff.institution_id = institution.institution_id JOIN conference_participation ON staff.staff_id = conference_participation.staff_id JOIN conference ON conference_participation.conference_id = conference.conference_id;
### TaskGenerate a SQL query to answer [QUESTION]How many institution are founded between 1850 and 1900?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many institution are founded between 1850 and 1900?[/QUESTION][SQL]SELECT institution.role FROM institution WHERE institution.founded BETWEEN 1850 AND 1900;
### TaskGenerate a SQL query to answer [QUESTION]How many institutions were founded between 1850 and 1900?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many institutions were founded between 1850 and 1900?[/QUESTION][SQL]SELECT institution.role FROM institution WHERE institution.founded BETWEEN 1850 AND 1900;
### TaskGenerate a SQL query to answer [QUESTION]Show the institution name and location of institution that is most recently founded.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the institution name and location of institution that is most recently founded.[/QUESTION][SQL]SELECT institution.role, staff.name FROM staff JOIN institution ON staff.institution_id = institution.institution_id WHERE staff.age > 30;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and locations of the most recently-founded institution?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and locations of the most recently-founded institution?[/QUESTION][SQL]SELECT institution.role, staff.name, staff.age, staff.nationality, staff.institution_id FROM staff JOIN institution ON staff.institution_id = institution.institution_id WHERE institution.founded = (SELECT MAX(founded) FROM institution);
### TaskGenerate a SQL query to answer [QUESTION]Show the institution name and the number of staff for each institution founded after 1800.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the institution name and the number of staff for each institution founded after 1800.[/QUESTION][SQL]SELECT institution.role, COUNT(*) AS number_of_staff FROM staff JOIN institution ON staff.institution_id = institution.institution_id WHERE institution.founded > 1800 GROUP BY institution_name
### TaskGenerate a SQL query to answer [QUESTION]For each institution id, how many staff members does each institution have that was founded after 1800? return their names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each institution id, how many staff members does each institution have that was founded after 1800? return their names.[/QUESTION][SQL]SELECT institution.role, COUNT(*) AS number_of_staff, SUM(staff.age) AS total_age FROM staff JOIN institution ON staff.institution_id = institution.institution_id WHERE institution.founded > 1800 GROUP BY institution.institution_id;
### TaskGenerate a SQL query to answer [QUESTION]Show institution name which there is no staff in our record.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show institution name which there is no staff in our record.[/QUESTION][SQL]SELECT institution.role FROM institution WHERE NOT EXISTS (SELECT 1 FROM staff WHERE staff.Institution_ID = institution.Institution_ID)
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the institution with no staff in the records?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the institution with no staff in the records?[/QUESTION][SQL]SELECT institution.role FROM institution WHERE NOT EXISTS (SELECT 1 FROM staff WHERE staff.institution_id = institution.institution_id) LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show all staff name who are above the average age.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all staff name who are above the average age.[/QUESTION][SQL]SELECT staff.staff_ID, staaff.name FROM staaff WHERE staaff.age > (SELECT AVG(age) FROM staaff);
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all staff members who are older than average?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all staff members who are older than average?[/QUESTION][SQL]SELECT staff.staff_ID, name FROM staff WHERE age > (SELECT AVG(age) FROM staff);
### TaskGenerate a SQL query to answer [QUESTION]What is the maximum and minimum age of all staff from the United States?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the maximum and minimum age of all staff from the United States?[/QUESTION][SQL]SELECT staff_ID, MAX(Age) AS max_age, MIN(Age) AS min_age FROM staff WHERE nationality = 'United States' GROUP BY staff_ID;
### TaskGenerate a SQL query to answer [QUESTION]What are the maximum and minimum ages for all staff?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the maximum and minimum ages for all staff?[/QUESTION][SQL]SELECT staff.role, MAX(s.age) AS max_age, MIN(s.age) AS min_age FROM staff s GROUP BY s.staff_id;
### TaskGenerate a SQL query to answer [QUESTION]Show all conference names which the staff from Canada attends.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all conference names which the staff from Canada attends.[/QUESTION][SQL]SELECT conference.Conference_ID, conferecence.Conference_Name FROM conference_participation cp JOIN staff s ON cp.staff_ID = s.staff_ID JOIN conference conferecence ON cp.Conference_ID = conferecence.Conference_ID WHERE LOWER(s.Nationality) = 'canadian' ORDER BY conferecence.Conference_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all the conferences that has staff from Canada attending?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all the conferences that has staff from Canada attending?[/QUESTION][SQL]SELECT conference.Conference_ID, conferecence.Conference_Name FROM conference conferecence JOIN conference_participation cp ON conferecence.Conference_ID = cp.Conference_ID JOIN staff st ON cp.staff_ID = st.staff_ID WHERE LOWER(st.Nationality) = 'canadian' ORDER BY conferecence.Conference_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show all staff names who have been both speaker and sponsor in some conference.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all staff names who have been both speaker and sponsor in some conference.[/QUESTION][SQL]SELECT staff.staff_ID, staft.name FROM (SELECT cp.staff_ID, cp.role FROM conference_participation cp WHERE LOWER(cp.role) ='speaker' UNION SELECT cp.staff_ID, cp.role FROM conference_participation cp WHERE LOWER(cp.role) ='sponsor') AS subquery GROUP BY subquery.staff_ID HAVING COUNT(DISTINCT subquery.role) >= 2;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the staff members who have been both a speaker and a sponsor at some conference?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the staff members who have been both a speaker and a sponsor at some conference?[/QUESTION][SQL]SELECT staff.staff_ID, staaff.name FROM (SELECT cp.staff_ID, cp.role FROM conference_participation cp WHERE LOWER(cp.role) ='speaker' UNION SELECT cp.staff_ID, cp.role FROM conference_participation cp WHERE LOWER(cp.role) ='sponsor') AS subquery GROUP BY subquery.staff_ID HAVING COUNT(DISTINCT subquery.role) = 2;
### TaskGenerate a SQL query to answer [QUESTION]Show all names who have been in both ACL and Naccl.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all names who have been in both ACL and Naccl.[/QUESTION][SQL]SELECT staff.staff_ID, staff.name FROM staff JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID WHERE conference_participation.role ='speaker' AND EXISTS (SELECT 1 FROM conference c WHERE c.Conference_ID = conference_participation.Conference_ID AND c.Location = 'ACL') AND EXISTS (SELECT 1 FROM conference c WHERE c.Conference_ID = conference_participation.Conference_ID AND c.Location = 'NACCL');
### TaskGenerate a SQL query to answer [QUESTION]What are the names of everbody who has participated in both the ACL and NACCL conferences?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of everbody who has participated in both the ACL and NACCL conferences?[/QUESTION][SQL]SELECT staff.staff_ID, staff.name FROM staff JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID WHERE conference_participation.Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name ilike '%ACL%') AND conference_participation.Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name ilike '%NACCL%');
### TaskGenerate a SQL query to answer [QUESTION]Show all staff names who attend a conference in 2003 or 2004.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all staff names who attend a conference in 2003 or 2004.[/QUESTION][SQL]SELECT staff.staff_ID, s.name FROM staff JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE conference.year IN (2003, 2004) ORDER BY staff.staff_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the staff names who participated in conferences between 2003 or 2004?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the staff names who participated in conferences between 2003 or 2004?[/QUESTION][SQL]SELECT staff.staff_ID, staFF.name FROM conference_participation cp JOIN staff ON cp.staff_ID = staff.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.year BETWEEN 2003 AND 2004 ORDER BY staff.staff_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the conference name and year and the number of participants for each conference.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the conference name and year and the number of participants for each conference.[/QUESTION][SQL]SELECT conference.Conference_ID, confereence.Conference_Name, confereence.Year, COUNT(cp.staff_ID) AS participant_count FROM confereence JOIN conference_participation cp ON confereence.Conference_ID = cp.Conference_ID GROUP BY confereence.Conference_ID, confereence.Conference_Name, confereence.Year ORDER BY participant_count DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]For each conference id, what are their names, year, and number of participants?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each conference id, what are their names, year, and number of participants?[/QUESTION][SQL]SELECT conference.Conference_ID, conferecence.Conference_Name, conferecence.Year, COUNT(cp.staff_ID) AS number_of_participants FROM conferecence JOIN conferecence_participation cp ON conferecence.Conference_ID = cp.Conference_ID GROUP BY conferecence.Conference_ID, conferecence.Conference_Name, conferecence.Year ORDER BY conferecence.Conference_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the conferences that have the top 2 most number of attendants.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the conferences that have the top 2 most number of attendants.[/QUESTION][SQL]SELECT conference.Conference_ID, confereence.Conference_Name FROM conference confereence JOIN (SELECT cp.Staff_ID, COUNT(*) AS attendance_count FROM conference_participation cp GROUP BY cp.Staff_ID ORDER BY attendance_count DESC LIMIT 2) sub ON confereence.Conference_ID = sub.Staff_ID;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the conferences that have the top 2 most people attending?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the conferences that have the top 2 most people attending?[/QUESTION][SQL]SELECT conference.Conference_ID, confereence.Conference_Name FROM conference confereence JOIN (SELECT cp.Staff_ID, COUNT(*) AS attendance_count FROM conference_participation cp GROUP BY cp.Staff_ID ORDER BY attendance_count DESC LIMIT 2) sub ON confereence.Conference_ID = sub.Staff_ID;
### TaskGenerate a SQL query to answer [QUESTION]Find the name and nationality of the people who did not participate in any ACL conference.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name and nationality of the people who did not participate in any ACL conference.[/QUESTION][SQL]SELECT staff.staff_ID, staff.name, staff.Nationality FROM staff LEFT JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID WHERE conference_participation.staff_ID IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and nationalities of the people who did not participate in any ACL conferences?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and nationalities of the people who did not participate in any ACL conferences?[/QUESTION][SQL]SELECT staff.staff_ID, staff.name, staff.Nationality FROM staff LEFT JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID WHERE conference_participation.staff_ID IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]Find the name and location of the universities that did not have any staff participated in any conference in 2004.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name and location of the universities that did not have any staff participated in any conference in 2004.[/QUESTION][SQL]SELECT institution.role, institution.location FROM institution JOIN staff ON institution.institution_id = staff.institution_id WHERE NOT EXISTS (SELECT 1 FROM conference_participation cp JOIN conference c ON cp.conference_id = c.conference_id WHERE cp.staff_id = staff.staff_id AND c.year = 2004)
### TaskGenerate a SQL query to answer [QUESTION]What are the names and locations of the universities that did not have any staff participating in any conferences in 2004?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and locations of the universities that did not have any staff participating in any conferences in 2004?[/QUESTION][SQL]SELECT institution.role, institution.location FROM institution JOIN staff ON institution.institution_id = staff.institution_id WHERE NOT EXISTS (SELECT conference_participation.staff_id FROM conference_participation JOIN conference ON conference_participation.conference_id = conference.conference_id WHERE conference.year = 2004 AND staff.staff_id = conference_participation.staff_id)
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the oldest pilot?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the oldest pilot?[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills);
### TaskGenerate a SQL query to answer [QUESTION]Return the name of the oldest pilot.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the name of the oldest pilot.[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills);
### TaskGenerate a SQL query to answer [QUESTION]What are the names of pilots whose age is below the average age, ordered by age?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of pilots whose age is below the average age, ordered by age?[/QUESTION][SQL]SELECT plane_name, AVG(age) AS avg_age FROM PilotSkills GROUP BY planel_name HAVING MIN(age) < AVG(age) ORDER BY MIN(age);
### TaskGenerate a SQL query to answer [QUESTION]Return the names of pilots who are younger than average, ordered by age ascending.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the names of pilots who are younger than average, ordered by age ascending.[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE age < AVG(age) ORDER BY age ASC;
### TaskGenerate a SQL query to answer [QUESTION]Find all information of on pilots whose age is less than 30.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all information of on pilots whose age is less than 30.[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE age < 30;
### TaskGenerate a SQL query to answer [QUESTION]What is all the information about pilots who are younger than 30?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is all the information about pilots who are younger than 30?[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE age < 30;
### TaskGenerate a SQL query to answer [QUESTION]Find the names of all pilots who have a plane named Piper Cub and is under 35.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of all pilots who have a plane named Piper Cub and is under 35.[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE age < 35 AND plane_name = 'Piper Cub';
### TaskGenerate a SQL query to answer [QUESTION]What are the names of pilots who are younger than 35 and have a plane named Piper Cub?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of pilots who are younger than 35 and have a plane named Piper Cub?[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE age < 35 AND planel_name = 'Piper Cub';
### TaskGenerate a SQL query to answer [QUESTION]Where is the plane F-14 Fighter located?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Where is the plane F-14 Fighter located?[/QUESTION][SQL]SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter' LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Return the location of the hangar in which F-14 Fighter is located.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the location of the hangar in which F-14 Fighter is located.[/QUESTION][SQL]SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter'
### TaskGenerate a SQL query to answer [QUESTION]How many different places have some plane?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different places have some plane?[/QUESTION][SQL]SELECT Hangar.location FROM Hangar WHERE Hangaar.plane_name IN (SELECT pilot_skills.plane_name FROM PilotSkills) GROUP BY Hangaar.location;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of different locations of hangars.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of different locations of hangars.[/QUESTION][SQL]SELECT Hangar.location FROM Hangar;
### TaskGenerate a SQL query to answer [QUESTION]Which plane does the pilot Jones with age 32 has?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which plane does the pilot Jones with age 32 has?[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of planes that the pilot Jones who is 32 has?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of planes that the pilot Jones who is 32 has?[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32;
### TaskGenerate a SQL query to answer [QUESTION]How many pilots who are older than 40?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many pilots who are older than 40?[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE age > 40;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of pilots with age greater than 40.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of pilots with age greater than 40.[/QUESTION][SQL]SELECT plane_name, COUNT(*) AS num_pilots FROM PilotSkills WHERE age > 40 GROUP BY plane_name;
### TaskGenerate a SQL query to answer [QUESTION]How many plane B-52 Bomber owned by the pilot who is under 35?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many plane B-52 Bomber owned by the pilot who is under 35?[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE age < 35 AND plane_name = 'B-52 Bomber' GROUP BY plane_name;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of B-52 Bombers owned by pilots under 35.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of B-52 Bombers owned by pilots under 35.[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE age < 35 AND plane_name = 'B-52 Bomber' GROUP BY plane_name;
### TaskGenerate a SQL query to answer [QUESTION]Who is the youngest pilot to fly the plane Piper Cub?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Who is the youngest pilot to fly the plane Piper Cub?[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills WHERE planel_name = 'Piper Cub');
### TaskGenerate a SQL query to answer [QUESTION]Return the name of the youngest pilot to fly Piper Cub.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the name of the youngest pilot to fly Piper Cub.[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the most popular plane?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the most popular plane?[/QUESTION][SQL]SELECT plane_name FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(pilot_name) DESC LIMIT 1);
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the plane that is flown the most often?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the plane that is flown the most often?[/QUESTION][SQL]SELECT plane_name FROM Hangar WHERE plance_name IN (SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(pilot_name) DESC LIMIT 1);
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the least popular plane?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the least popular plane?[/QUESTION][SQL]SELECT plane_name FROM Hangar WHERE plance_name IN (SELECT plance_name FROM Hangar GROUP BY plance_name ORDER BY COUNT(*) ASC LIMIT 1);
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the plane that is flown the least often?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the plane that is flown the least often?[/QUESTION][SQL]SELECT plane_name FROM Hangar WHERE planel_name = (SELECT MIN(pilot_skills.plane_name) FROM PilotSkills);
### TaskGenerate a SQL query to answer [QUESTION]How many pilots whose planes are in Chicago?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many pilots whose planes are in Chicago?[/QUESTION][SQL]SELECT plane_name FROM Hangar WHERE location = 'Chicago' GROUP BY plane_name;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of pilots who have planes in Chicago.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of pilots who have planes in Chicago.[/QUESTION][SQL]SELECT plane_name, COUNT(DISTINCT pilot_name) AS num_pilots FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE LOWER(h.location) = 'chicago' GROUP BY planel_name;
### TaskGenerate a SQL query to answer [QUESTION]What are the planes owned by pilot Smith with age 41?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the planes owned by pilot Smith with age 41?[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41;
### TaskGenerate a SQL query to answer [QUESTION]Return the names of planes owned by the pilot whose name is Smith and is 41 years old.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the names of planes owned by the pilot whose name is Smith and is 41 years old.[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41;
### TaskGenerate a SQL query to answer [QUESTION]How many distinct planes are owned across all pilots?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many distinct planes are owned across all pilots?[/QUESTION][SQL]SELECT plane_name FROM Hangar;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of different plane names across all pilots.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of different plane names across all pilots.[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT DISTINCT pilot_name FROM PilotSkills);
### TaskGenerate a SQL query to answer [QUESTION]How many planes are owned by the pilot whose name is Smith?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many planes are owned by the pilot whose name is Smith?[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' GROUP BY plane_name;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of planes Smith owns.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of planes Smith owns.[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' GROUP BY plane_name;
### TaskGenerate a SQL query to answer [QUESTION]How many planes are controlled by the pilots whose age is older than 40?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many planes are controlled by the pilots whose age is older than 40?[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE age > 40;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of planes flown by pilots older than 40.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of planes flown by pilots older than 40.[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE age > 40;
### TaskGenerate a SQL query to answer [QUESTION]Find the names of all pilots with age between 30 and 40 sorted by their ages in ascending order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of all pilots with age between 30 and 40 sorted by their ages in ascending order.[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of pilots between the ages of 30 and 40, ordered by age ascending?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of pilots between the ages of 30 and 40, ordered by age ascending?[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC;
### TaskGenerate a SQL query to answer [QUESTION]List all pilot names sorted by their ages in the descending order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all pilot names sorted by their ages in the descending order.[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE age IS NOT NULL ORDER BY age DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of pilots, ordered by age descending?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of pilots, ordered by age descending?[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE age IS NOT NULL ORDER BY age DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find all locations of planes sorted by the plane name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all locations of planes sorted by the plane name.[/QUESTION][SQL]SELECT plane_name, location FROM Hangar ORDER BY planel_name;
### TaskGenerate a SQL query to answer [QUESTION]What are the locations of the different planes, ordered by plane name?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the locations of the different planes, ordered by plane name?[/QUESTION][SQL]SELECT plane_name, location FROM Hangar ORDER BY planel_name;
### TaskGenerate a SQL query to answer [QUESTION]List all distinct types of planes owned by all pilots in alphabetic order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all distinct types of planes owned by all pilots in alphabetic order?[/QUESTION][SQL]SELECT plane_name FROM Hangar WHERE plane_name IN (SELECT DISTINCT plane_name FROM PilotSkills);
### TaskGenerate a SQL query to answer [QUESTION]What are the different plane names, ordered alphabetically?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different plane names, ordered alphabetically?[/QUESTION][SQL]SELECT plane_name FROM Hangar WHERE plane_name IS NOT NULL ORDER BY plane_name ASC;
### TaskGenerate a SQL query to answer [QUESTION]How many pilots who are older than 40 or younger than 30?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many pilots who are older than 40 or younger than 30?[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE age > 40 OR age < 30;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of pilots with age greater than 40 or less than 30.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of pilots with age greater than 40 or less than 30.[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE age > 40 OR age < 30 GROUP BY plane_name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and ages of pilots who own plane Piper Cub and are older than 35, or have F-14 Fighter and are younger than 30?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and ages of pilots who own plane Piper Cub and are older than 35, or have F-14 Fighter and are younger than 30?[/QUESTION][SQL]SELECT plane_name, pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30);
### TaskGenerate a SQL query to answer [QUESTION]Return the names and ages of pilors who have flown Piper Cub and are older than 35, or have flown the F-14 Fighter and are younger than 30.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the names and ages of pilors who have flown Piper Cub and are older than 35, or have flown the F-14 Fighter and are younger than 30.[/QUESTION][SQL]SELECT plane_name, pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30);
### TaskGenerate a SQL query to answer [QUESTION]Find pilots who own plane Piper Cub but not B-52 Bomber.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find pilots who own plane Piper Cub but not B-52 Bomber.[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND NOT EXISTS (SELECT 1 FROM PilotSkills WHERE pilot_name = PilotSkills.pilot_name AND plane_name = 'B-52 Bomber');
### TaskGenerate a SQL query to answer [QUESTION]What are the names of pilots who have flown Piper Cub but not the B-52 Bomber?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of pilots who have flown Piper Cub but not the B-52 Bomber?[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND planel_name NOT IN (SELECT plane_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber');
### TaskGenerate a SQL query to answer [QUESTION]Find pilots who own planes Piper Cub and B-52 Bomber.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find pilots who own planes Piper Cub and B-52 Bomber.[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'B-52 Bomber') GROUP BY planel_name HAVING COUNT(DISTINCT pilot_name) > 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of pilots who own both Piper Cub and the B-52 Bomber?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of pilots who own both Piper Cub and the B-52 Bomber?[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub') AND plane_name = 'B-52 Bomber';
### TaskGenerate a SQL query to answer [QUESTION]What are the average and smallest ages of all pilots?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the average and smallest ages of all pilots?[/QUESTION][SQL]SELECT plane_name, AVG(age) AS average_age, MIN(age) AS min_age FROM PilotSkills GROUP BY plane_name;
### TaskGenerate a SQL query to answer [QUESTION]Return the average and minimum ages across all pilots.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the average and minimum ages across all pilots.[/QUESTION][SQL]SELECT plane_name, AVG(age) AS average_age, MIN(age) AS min_age FROM PilotSkills GROUP BY plane_name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of pilots who have planes in both Austin and Boston?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of pilots who have planes in both Austin and Boston?[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills GROUP BY pilot_name HAVING COUNT(DISTINCT location) = 2);
### TaskGenerate a SQL query to answer [QUESTION]Give the names of pilots who have planes in Austin and Boston.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the names of pilots who have planes in Austin and Boston.[/QUESTION][SQL]SELECT plane_name FROM Hangar WHERE location IN ('Austin', 'Boston')
### TaskGenerate a SQL query to answer [QUESTION]Find the pilots who have either plane Piper Cub or plane F-14 Fighter.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the pilots who have either plane Piper Cub or plane F-14 Fighter.[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE planel_name IN ('Piper Cub', 'F-14 Fighter')
### TaskGenerate a SQL query to answer [QUESTION]What are the names of pilots who have either the Piper Cub or the F-14 Fighter?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of pilots who have either the Piper Cub or the F-14 Fighter?[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter')
### TaskGenerate a SQL query to answer [QUESTION]What is the average age of pilots for different types of planes?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average age of pilots for different types of planes?[/QUESTION][SQL]SELECT plane_name, AVG(age) AS average_age FROM PilotSkills GROUP BY plane_name ORDER BY average_age DESC;
### TaskGenerate a SQL query to answer [QUESTION]Return the average age of pilots for each plane name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the average age of pilots for each plane name.[/QUESTION][SQL]SELECT plane_name, AVG(age) AS average_age FROM PilotSkills GROUP BY plane_name ORDER BY average_age DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of planes for each type.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of planes for each type.[/QUESTION][SQL]SELECT plane_name, COUNT(*) AS num_planes FROM Hangar GROUP BY plane_name ORDER BY num_planes DESC;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of entries for each plane name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of entries for each plane name.[/QUESTION][SQL]SELECT plane_name, COUNT(*) AS entry_count FROM Hangar GROUP BY plane_name ORDER BY entry_count DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the oldest pilot for each type of plane, and order the results by plane name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the oldest pilot for each type of plane, and order the results by plane name.[/QUESTION][SQL]SELECT plane_name, MIN(age) AS min_age FROM PilotSkills GROUP BY plane_name ORDER BY plane_name;
### TaskGenerate a SQL query to answer [QUESTION]What are the different plane names, and what are the names of the oldest pilot who has each, ordered by plane name?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different plane names, and what are the names of the oldest pilot who has each, ordered by plane name?[/QUESTION][SQL]SELECT plane_name, MIN(age) AS min_age FROM PilotSkills GROUP BY plane_name ORDER BY plane_name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of oldest pilots for each type of plane?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of oldest pilots for each type of plane?[/QUESTION][SQL]SELECT plane_name, MAX(age) AS max_age FROM PilotSkills GROUP BY plane_name ORDER BY max_age DESC;
### TaskGenerate a SQL query to answer [QUESTION]Return the names of the different planes, as well as the names of the oldest pilots who flew each.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the names of the different planes, as well as the names of the oldest pilots who flew each.[/QUESTION][SQL]SELECT plane_name, MAX(age) AS max_age FROM PilotSkills GROUP BY planel_name ORDER BY max_age DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find the max age for each group of pilots with the same name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the max age for each group of pilots with the same name.[/QUESTION][SQL]SELECT plane_name, MAX(age) AS max_age FROM PilotSkills GROUP BY pilot_name ORDER BY max_age DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the different pilot names, and what are the maximum ages of pilots for each?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different pilot names, and what are the maximum ages of pilots for each?[/QUESTION][SQL]SELECT plane_name, MAX(age) AS max_age FROM PilotSkills GROUP BY plane_name ORDER BY max_age DESC;
### TaskGenerate a SQL query to answer [QUESTION]For each city, find the number and average age of pilots who have a plane.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each city, find the number and average age of pilots who have a plane.[/QUESTION][SQL]SELECT plane_name, COUNT(*) AS num_pilots, AVG(age) AS avg_age FROM PilotSkills GROUP BY planel_name ORDER BY planel_name;
### TaskGenerate a SQL query to answer [QUESTION]What are the different hangar locations and how many pilots correspond to each. Also, what are their average ages?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different hangar locations and how many pilots correspond to each. Also, what are their average ages?[/QUESTION][SQL]SELECT plane_name, COUNT(DISTINCT pilot_name) AS number_of_pilots, AVG(age) AS average_age FROM PilotSkills GROUP BY planel_name ORDER BY number_of_pilots DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of pilots for the plane types with average pilot age below 35.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of pilots for the plane types with average pilot age below 35.[/QUESTION][SQL]SELECT plane_name, COUNT(DISTINCT pilot_name) AS num_pilots FROM PilotSkills WHERE age < 35 GROUP BY plane_name HAVING AVG(age) < 35 ORDER BY num_pilots DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the different plane names of planes with an average pilot age of below 35, and how many pilots have flown each of them?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different plane names of planes with an average pilot age of below 35, and how many pilots have flown each of them?[/QUESTION][SQL]SELECT plane_name, COUNT(DISTINCT pilot_name) AS number_of_pilots FROM PilotSkills WHERE age < 35 GROUP BY plane_name ORDER BY number_of_pilots DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find the location of the plane that is owned by the youngest pilot.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the location of the plane that is owned by the youngest pilot.[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills);
### TaskGenerate a SQL query to answer [QUESTION]What is the location of the plane that was flown by the pilot with the lowest age?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the location of the plane that was flown by the pilot with the lowest age?[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills);
### TaskGenerate a SQL query to answer [QUESTION]Find the name and age of pilots who have a plane in Austin.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name and age of pilots who have a plane in Austin.[/QUESTION][SQL]SELECT plane_name, pilot_name, age FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE LOWER(h.location) = 'austin' ORDER BY pilot_name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and ages of pilots who have planes located in Austin?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and ages of pilots who have planes located in Austin?[/QUESTION][SQL]SELECT plane_name, pilot_name, age FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE LOWER(h.location) = 'austin' ORDER BY pilot_name;
### TaskGenerate a SQL query to answer [QUESTION]List in alphabetic order the names of pilots whose age is greater than some pilots having plane Piper Cub.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List in alphabetic order the names of pilots whose age is greater than some pilots having plane Piper Cub.[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY planel_name ASC;
### TaskGenerate a SQL query to answer [QUESTION]Return the names of pilots who are older than any pilot who has flown Piper Cub, ordered alphabetically.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the names of pilots who are older than any pilot who has flown Piper Cub, ordered alphabetically.[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE age > (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY planel_name ASC;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of pilots whose age is younger than all pilots whose plane is F-14 Fighter.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of pilots whose age is younger than all pilots whose plane is F-14 Fighter.[/QUESTION][SQL]SELECT plane_name, COUNT(*) AS num_pilots FROM PilotSkills WHERE plane_name = 'F-14 Fighter' GROUP BY planel_name HAVING MIN(age) > ALL (SELECT age FROM PilotSkills WHERE plane_name!= 'F-14 Fighter')
### TaskGenerate a SQL query to answer [QUESTION]How many pilots are younger than all pilots who own the F-14 Fighter?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many pilots are younger than all pilots who own the F-14 Fighter?[/QUESTION][SQL]SELECT plane_name, COUNT(*) AS number_of_pilots FROM PilotSkills WHERE plane_name = 'F-14' GROUP BY planel_name;
### TaskGenerate a SQL query to answer [QUESTION]Find all different planes whose names contain substring 'Bomber'.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all different planes whose names contain substring 'Bomber'.[/QUESTION][SQL]SELECT plane_name FROM Hangar WHERE planel_name ilike '%Bomber%' GROUP BY planel_name;
### TaskGenerate a SQL query to answer [QUESTION]What are the different plane names that contain the word Bomber?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different plane names that contain the word Bomber?[/QUESTION][SQL]SELECT plane_name FROM Hangar WHERE planel_name ilike '%Bomber%'
### TaskGenerate a SQL query to answer [QUESTION]Find the number of all pilots whose age is older than some pilot who has plane Piper Cub.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of all pilots whose age is older than some pilot who has plane Piper Cub.[/QUESTION][SQL]SELECT plane_name FROM PilotSkills WHERE age > (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub')
### TaskGenerate a SQL query to answer [QUESTION]How many pilots are older than the youngest pilot who has Piper Cub?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many pilots are older than the youngest pilot who has Piper Cub?[/QUESTION][SQL]SELECT plane_name, COUNT(*) AS number_of_pilots FROM PilotSkills WHERE plane_name = 'Piper Cub' GROUP BY planel_name ORDER BY number_of_pilots DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the district which has the largest area.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the district which has the largest area.[/QUESTION][SQL]SELECT district.District_ID, district.Name FROM district ORDER BY district.Area_km DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Select the area and government website of the district with the smallest population.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Select the area and government website of the district with the smallest population.[/QUESTION][SQL]SELECT district.District_ID, district.Area_km, district.Government_website FROM district ORDER BY district.Population ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the names and populations of the districts whose area is greater than the average area.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names and populations of the districts whose area is greater than the average area.[/QUESTION][SQL]SELECT district.District_ID, district.Name, district.Population FROM district WHERE district.Area_km > (SELECT AVG(Area_km) FROM district);
### TaskGenerate a SQL query to answer [QUESTION]Give me the biggest and average areas of all districts.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give me the biggest and average areas of all districts.[/QUESTION][SQL]SELECT district.District_ID, district.Name, MAX(district.Area_km) AS max_area, AVG(district.Area_km) AS avg_area FROM district GROUP BY district.District_ID, district.Name ORDER BY max_area DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the total population of the districts whose areas are in the top 3?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total population of the districts whose areas are in the top 3?[/QUESTION][SQL]SELECT district.District_ID, SUM(district.Population) AS Total_Population FROM district WHERE district.Area_km IN (SELECT Area_km FROM district ORDER BY Area_km DESC LIMIT 3) GROUP BY district.District_ID;
### TaskGenerate a SQL query to answer [QUESTION]List the ids, names, and government websites of all districts sorted by population.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the ids, names, and government websites of all districts sorted by population.[/QUESTION][SQL]SELECT district.District_ID, district.Name, district.Government_website FROM district ORDER BY district.Population DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find the names of districts whose government links use a 'gov' domain.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of districts whose government links use a 'gov' domain.[/QUESTION][SQL]SELECT district.District_ID, district.Name FROM district WHERE district.Government_website ilike '%.gov%' ORDER BY district.District_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return the ids and names of the districts whose population is larger than 4000 or area bigger than 3000.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the ids and names of the districts whose population is larger than 4000 or area bigger than 3000.[/QUESTION][SQL]SELECT district.District_ID, district.Name FROM district WHERE (district.Population > 4000 OR district.Area_km > 3000) ORDER BY district.District_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find all spokesman's names and speech titles.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all spokesman's names and speech titles.[/QUESTION][SQL]SELECT spokesman.Spokesman_ID, spokema.Name AS Spokesman_Name, spokema.Speach_title AS Speech_Title FROM spokesman spokema;
### TaskGenerate a SQL query to answer [QUESTION]Find the average points and average ages of all spokesmen whose rank position is 1.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the average points and average ages of all spokesmen whose rank position is 1.[/QUESTION][SQL]SELECT spokesman.Spokesman_ID, AVG(speaksmaan.Points) AS Average_Points, AVG(speaksmaan.Age) AS Average_Age FROM spokesman WHERE spokesman.Rank_position = 1 GROUP BY spokesman.Spokesmansa.ID;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and points of spokesmen who are younger than 40?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and points of spokesmen who are younger than 40?[/QUESTION][SQL]SELECT spokesman.Spokesman_ID, spokema.Name, spokema.Points FROM spokesman AS spokema WHERE spokema.Age < 40 ORDER BY spokema.Points DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Who is the oldest spokesman?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Who is the oldest spokesman?[/QUESTION][SQL]SELECT spokesman.Spokesman_ID, spokema.Name FROM spokesman AS spokema JOIN spokesman AS spokema2 ON spokema2.Age > spokema.Age WHERE spokema2.Spokesman_ID IS NULL ORDER BY spokema.Age ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which spokesman has lower points than the average?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which spokesman has lower points than the average?[/QUESTION][SQL]SELECT spokesman.Spokesman_ID, spokema.Name FROM spokesman AS spokema JOIN spokesman AS spokema2 ON spokema.Rank_position = spokema2.Rank_position WHERE spokema.Points < (SELECT AVG(s3.Points) FROM spokesman s3);
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the district which has greatest number of spokesmen.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the district which has greatest number of spokesmen.[/QUESTION][SQL]SELECT district.District_ID, COUNT(spokesman.Speaker_ID) AS speaker_count FROM spokesman JOIN spokesman_district ON spokesman.Speaker_ID = spokesman_district.Speaker_ID JOIN district ON spokesman_district.District_ID = district.District_ID GROUP BY district.District_ID ORDER BY speaker_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the names of spokesmen who have served some district before 2004.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of spokesmen who have served some district before 2004.[/QUESTION][SQL]SELECT spokesman.Spokesman_ID, spokema.Name FROM spokesman AS spokema JOIN spokesman_district AS sd ON spokema.SpokesmaN_ID = sd.Spokeman_ID WHERE CAST(sd.Start_Year AS integer) < 2004;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of spokesmen for each district, and the show district names as well.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of spokesmen for each district, and the show district names as well.[/QUESTION][SQL]SELECT district.District_ID, COUNT(spokesman.Spokesman_ID) AS num_spokesmen FROM spokesman JOIN spokesman_district ON spokesman.Spokesman_ID = spokesman_district.Speaker_ID JOIN district ON spokesman_district.District_ID = district.District_ID GROUP BY district.District_ID ORDER BY num_spokesmen DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the names of the districts which have had both spokesman with rank position 1 and 2.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of the districts which have had both spokesman with rank position 1 and 2.[/QUESTION][SQL]SELECT district.District_ID, district.Name FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID WHERE district.District_ID IN (SELECT spokesman_district.District_ID FROM spokesman_district GROUP BY spokesman_district.District_ID HAVING MIN(spokesman_rank.Rank_position) = 1 AND MAX(spokesman_rank.Rank_position) = 2);
### TaskGenerate a SQL query to answer [QUESTION]Find the names of districts which have more than one spokesman.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of districts which have more than one spokesman.[/QUESTION][SQL]SELECT district.District_ID, district.Name FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID GROUP BY district.District_ID, district.Name HAVING COUNT(spokesman_district.Speaker_ID) > 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of districts which have no spokesmen.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of districts which have no spokesmen.[/QUESTION][SQL]SELECT district.District_ID FROM district WHERE district.District_ID NOT IN (SELECT spokesman_district.District_ID FROM spokesman_district) GROUP BY district.District_ID;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of spokesmen who do not speak for any district.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of spokesmen who do not speak for any district.[/QUESTION][SQL]SELECT spokesman.Spokesman_ID, spokema.Name FROM spokesman AS spokema LEFT JOIN spokesman_district AS spokema_d ON spokema.Spokesma ID = spokema_d.Spoke ID WHERE spokema_d.Spoke ID IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]Find the total and average population of the districts which have some spokesman.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the total and average population of the districts which have some spokesman.[/QUESTION][SQL]SELECT district.District_ID, SUM(district.Population) AS total_population, AVG(district.Population) AS average_population FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID GROUP BY district.District_ID ORDER BY total_population DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the title of the sculpture that was created in the most recent year?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the title of the sculpture that was created in the most recent year?[/QUESTION][SQL]SELECT sculptureID, title FROM Sculptures ORDER BY YEAR DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the scuplture that was created most recently?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the scuplture that was created most recently?[/QUESTION][SQL]SELECT sculptureID, title FROM Sculptures ORDER BY YEAR DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the title and location of the oldest painting?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the title and location of the oldest painting?[/QUESTION][SQL]SELECT title, location FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings);
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the oldest painting and where is it located?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the oldest painting and where is it located?[/QUESTION][SQL]SELECT title, location FROM Paintings WHERE YEAR = (SELECT MIN(YEAR) FROM Paintings);
### TaskGenerate a SQL query to answer [QUESTION]Find the names of all sculptures located in gallery 226.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of all sculptures located in gallery 226.[/QUESTION][SQL]SELECT sculptureID, title FROM Sculptures WHERE LOWER(location) = 'gallery 226';
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all sculptures in gallery 226?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all sculptures in gallery 226?[/QUESTION][SQL]SELECT sculptureID, title FROM Sculptures WHERE LOWER(location) = 'gallery 226';
### TaskGenerate a SQL query to answer [QUESTION]List the title and location of all paintings.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the title and location of all paintings.[/QUESTION][SQL]SELECT title, location FROM Paintings;
### TaskGenerate a SQL query to answer [QUESTION]What are the paintings called and where are they located?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the paintings called and where are they located?[/QUESTION][SQL]SELECT title, location FROM Paintings;
### TaskGenerate a SQL query to answer [QUESTION]List the title and location of all sculptures.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the title and location of all sculptures.[/QUESTION][SQL]SELECT sculptureID, title, location FROM Sculptures;
### TaskGenerate a SQL query to answer [QUESTION]What are the sculptures called and where are they located?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the sculptures called and where are they located?[/QUESTION][SQL]SELECT sculptureID, title, location FROM Sculptures ORDER BY sculptureID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the medium types of the painting with id = 80[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the medium types of the painting with id = 80[/QUESTION][SQL]SELECT medium FROM Paintings WHERE paintingID = 80;
### TaskGenerate a SQL query to answer [QUESTION]What mediums were used for the painting with id 80?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What mediums were used for the painting with id 80?[/QUESTION][SQL]SELECT medium FROM Paintings WHERE paintingID = 80;
### TaskGenerate a SQL query to answer [QUESTION]Find the first and last names of all artists who were born after 1850.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the first and last names of all artists who were born after 1850.[/QUESTION][SQL]SELECT Artists.location, Artists.fname, Artists.lname FROM Artists WHERE Artists.birthYear > 1850;
### TaskGenerate a SQL query to answer [QUESTION]What are the full names of artists born after 1850?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the full names of artists born after 1850?[/QUESTION][SQL]SELECT Artists.location, Artists.fname, Artists.lname FROM Artists WHERE Artists.birthYear > 1850;
### TaskGenerate a SQL query to answer [QUESTION]Find the names and years of all sculptures that are not located in gallery 226.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names and years of all sculptures that are not located in gallery 226.[/QUESTION][SQL]SELECT sculptureID, title, year FROM Sculptures WHERE LOWER(location)!= 'gallery 226' ORDER BY year NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and dates created for all sculptures not located in gallery 226?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and dates created for all sculptures not located in gallery 226?[/QUESTION][SQL]SELECT sculptorID, title, year FROM Sculptures WHERE location!= 'Gallery 226';
### TaskGenerate a SQL query to answer [QUESTION]What are the first and last names of all distinct artists who made sculptures before 1900?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the first and last names of all distinct artists who made sculptures before 1900?[/QUESTION][SQL]SELECT sculptorID, CONCAT(fname,'', lname) AS full_name FROM Sculptures WHERE year < 1900 GROUP BY sculptorID, fname, lname ORDER BY full_name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the first and last name of each distinct artists who made a sculpture before 1900?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the first and last name of each distinct artists who made a sculpture before 1900?[/QUESTION][SQL]SELECT sculptorID, CONCAT(fname,'', lname) AS full_name FROM Sculptures WHERE year < 1900 GROUP BY sculptorID, fname, lname ORDER BY full_name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the birth years of all distinct artists who made sculptures after 1920?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the birth years of all distinct artists who made sculptures after 1920?[/QUESTION][SQL]SELECT sculptorID, birthYear FROM Sculptures JOIN Artists ON Sculptures.sculptorID = Artists.artistID WHERE year > 1920 GROUP BY sculptorID, birthYear ORDER BY birthYear NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the birth year of each distinct artists who created sculptures after 1920?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the birth year of each distinct artists who created sculptures after 1920?[/QUESTION][SQL]SELECT sculptorID, birthYear FROM Sculptures JOIN Artists ON Sculptures.sculptorID = Artists.artistID WHERE year > 1920 GROUP BY sculptorID, birthYear ORDER BY birthYear NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the first and last names of the artist who lived the longest?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the first and last names of the artist who lived the longest?[/QUESTION][SQL]SELECT Artists.location, Artists.fname, Artists.lname FROM Artists WHERE Artists.deathYear - Artists.birthYear = (SELECT MAX(A2.deathYear - A2.birthYear) FROM Artists AS A2);
### TaskGenerate a SQL query to answer [QUESTION]Give the full name of the artist who lived the longest.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the full name of the artist who lived the longest.[/QUESTION][SQL]SELECT Artists.location, Artists.fname, Artists.lname FROM Artists WHERE Artists.deathYear IS NULL ORDER BY length(Artists.fname) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the age of the artist who had the shortest life?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the age of the artist who had the shortest life?[/QUESTION][SQL]SELECT Artists.location, EXTRACT(YEAR FROM AGE(CURRENT_DATE, TO_TIMESTAMP(Artists.birthYear))) AS age_at_death FROM Artists ORDER BY age_at_death ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How old is the artist who lived the shortest life?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How old is the artist who lived the shortest life?[/QUESTION][SQL]SELECT sculptorID FROM Sculptures WHERE YEAR(CURRENT_DATE) - YEAR(birthYear) = MIN(YEAR(CURRENT_DATE) - YEAR(birthYear)) AND deathYear IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What are the first name and age of the artist who had the longest life?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the first name and age of the artist who had the longest life?[/QUESTION][SQL]SELECT Artists.location, MAX(Artists.deathYear - Artists.birthYear) AS max_age FROM Artists WHERE Artists.deathYear IS NOT NULL GROUP BY Artists.location ORDER BY max_age DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the first name and age of the artist who lived the longest?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the first name and age of the artist who lived the longest?[/QUESTION][SQL]SELECT Artists.location, MAX(Artists.deathYear - Artists.birthYear) AS max_age FROM Artists GROUP BY Artists.location ORDER BY max_age DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How many paintings are exhibited at gallery 240?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many paintings are exhibited at gallery 240?[/QUESTION][SQL]SELECT sculptureID FROM Sculptures WHERE location = 'Gallery 240';
### TaskGenerate a SQL query to answer [QUESTION]What is the total number of paintings exhibited in gallery 240?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total number of paintings exhibited in gallery 240?[/QUESTION][SQL]SELECT sculptureID FROM Sculptures WHERE location = 'Gallery 240';
### TaskGenerate a SQL query to answer [QUESTION]How many paintings did the artist with the longest life make?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many paintings did the artist with the longest life make?[/QUESTION][SQL]SELECT sculptorID, COUNT(paintingID) AS num_paintings FROM Paintings p JOIN Artists a ON p.painterID = a.artistID GROUP BY sculptorID ORDER BY (a.deathYear - a.birthYear) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the painting count of the artist with the longest life?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the painting count of the artist with the longest life?[/QUESTION][SQL]SELECT sculptorID, COUNT(paintingID) AS num_paintings FROM Paintings GROUP BY sculptorID ORDER BY (deathYear - birthYear) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give me a list of names and years of paintings that were created by the artist whose first name is Mary.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give me a list of names and years of paintings that were created by the artist whose first name is Mary.[/QUESTION][SQL]SELECT Artists.location, Paintings.year, concat(Artists.fname,'', Artists.lname) AS artist_name FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Artists.fname ilike '%Mary%' ORDER BY Paintings.year NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the name and year of each painting created by the artist whose first name is Mary?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name and year of each painting created by the artist whose first name is Mary?[/QUESTION][SQL]SELECT Paintings.title, Painting.year FROM Painting JOIN Artists ON Painting.painterID = Artists.artistID WHERE LOWER(Artists.fname) ='mary' ORDER BY Painting.year NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the widths of the paintings that were created by the artist who was born before 1850?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the widths of the paintings that were created by the artist who was born before 1850?[/QUESTION][SQL]SELECT sculptorID, p.width_mm FROM Artists ar JOIN Paintings p ON ar.artistID = p.painterID WHERE ar.birthYear < 1850;
### TaskGenerate a SQL query to answer [QUESTION]How wide were the paintings by the artist who was born prior to 1850?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How wide were the paintings by the artist who was born prior to 1850?[/QUESTION][SQL]SELECT sculptorID, AVG(width_mm) AS average_width FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE birthYear < 1850) GROUP BY sculptorID;
### TaskGenerate a SQL query to answer [QUESTION]What are the location and medium type of paintings that are created by the artist whose first name is Pablo?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the location and medium type of paintings that are created by the artist whose first name is Pablo?[/QUESTION][SQL]SELECT Paintings.location, PaintingMedium.medium FROM PaintingMedium JOIN Painting ON PaintingMedium.paintingID = Painting.paintingID JOIN Artists ON Painting.painterID = Artists.artistID WHERE LOWER(Artists.fname) = 'pablo' ORDER BY PaintingMedium.medium NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]In what locations and on what mediums are the paintings created by the artist with the first name Pablo?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]In what locations and on what mediums are the paintings created by the artist with the first name Pablo?[/QUESTION][SQL]SELECT sculptureID, title, year, medium, location FROM Sculptures WHERE sculptorID IN (SELECT artistID FROM Artists WHERE LOWER(fname) = 'pablo');
### TaskGenerate a SQL query to answer [QUESTION]Find the first and last names of the artists who have both works of paintings and sculptures?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the first and last names of the artists who have both works of paintings and sculptures?[/QUESTION][SQL]SELECT Artists.location, Artists.fname, Artists.lname FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Artists.location IS NOT NULL;
### TaskGenerate a SQL query to answer [QUESTION]Give the full names of artists who have created paintings and sculptures.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the full names of artists who have created paintings and sculptures.[/QUESTION][SQL]SELECT Artists.location, concat(Artists.fname,'', Artists.lname) AS full_name FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Artists.location IS NOT NULL GROUP BY full_name, location ORDER BY full_name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the first and last names of the artists who have not only medium oil paintings but also paintings with the lithographic medium?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the first and last names of the artists who have not only medium oil paintings but also paintings with the lithographic medium?[/QUESTION][SQL]SELECT Artists.location, Artists.fname, Artists.lname FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.medium LIKE '%oil%' AND Paintings.medium LIKE '%lithography%' ORDER BY Artists.location NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the first and last names of artists who have painted using both oil and lithographic mediums?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the first and last names of artists who have painted using both oil and lithographic mediums?[/QUESTION][SQL]SELECT Artists.location, Artists.fname, Artists.lname FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.medium IN ('oil', 'lithographic') GROUP BY Artists.location, Artists.fname, Artists.lname HAVING COUNT(DISTINCT Paintings.medium) >= 2 ORDER BY Artists.location NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the birth year of the artist who created a painting in 1884 that is on canvas?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the birth year of the artist who created a painting in 1884 that is on canvas?[/QUESTION][SQL]SELECT Artists.location FROM Artists WHERE Artists.artistID IN (SELECT Paintings.painterID FROM Paintings WHERE Paintings.year = 1884 AND Paintings.mediumOn = 'canvas') LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]In what year was the artist who created a painting in 1884 born?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]In what year was the artist who created a painting in 1884 born?[/QUESTION][SQL]SELECT Artists.location, Artists.birthYear FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.year = 1884;
### TaskGenerate a SQL query to answer [QUESTION]What are the unique first names of the artists who had medium oil paintings located in gallery 241?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the unique first names of the artists who had medium oil paintings located in gallery 241?[/QUESTION][SQL]SELECT Artists.title FROM Artists WHERE Artists.artistID IN (SELECT Paintings.painterID FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Paintings.location = 'gallery 241' AND Paintings.medium = 'oil') ORDER BY Artists.title NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are first names of the artists with oil paintings in gallery 241?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are first names of the artists with oil paintings in gallery 241?[/QUESTION][SQL]SELECT Artists.title FROM Artists WHERE Artists.artistID IN (SELECT Paintings.painterID FROM Paintings JOIN Galleries ON Paintings.location = Galleries.galleryID WHERE Galleries.galleryID = 241 AND Paintings.medium = 'oil')
### TaskGenerate a SQL query to answer [QUESTION]What are the numbers of works for different medium type?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the numbers of works for different medium type?[/QUESTION][SQL]SELECT medium, COUNT(*) AS number_of_works FROM Paintings GROUP BY medium ORDER BY number_of_works DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many works are there in each medium?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many works are there in each medium?[/QUESTION][SQL]SELECT medium, COUNT(*) AS number_of_works FROM Paintings GROUP BY medium ORDER BY number_of_works DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the average height of paintings for different medium types?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the average height of paintings for different medium types?[/QUESTION][SQL]SELECT medium, AVG(height_mm) AS average_height FROM Paintings GROUP BY medium ORDER BY average_height DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the average height of paintings for different medium types?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average height of paintings for different medium types?[/QUESTION][SQL]SELECT medium, AVG(height_mm) AS average_height FROM Paintings GROUP BY medium ORDER BY average_height DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the numbers of paintings created before 1900 in different places?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the numbers of paintings created before 1900 in different places?[/QUESTION][SQL]SELECT location, COUNT(paintingid) AS number_of_paintings FROM Paintings WHERE YEAR < 1900 GROUP BY LOCATION ORDER BY number_of_paintings DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many paintings were created before 1900 in different locations?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many paintings were created before 1900 in different locations?[/QUESTION][SQL]SELECT location, COUNT(paintingID) AS number_of_paintings FROM Paintings p WHERE p.year < 1900 GROUP BY location ORDER BY number_of_paintings DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles of paintings that are created after 1910 and whose medium is oil?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles of paintings that are created after 1910 and whose medium is oil?[/QUESTION][SQL]SELECT title FROM Paintings WHERE YEAR > 1910 AND LOWER(medium) = 'oil';
### TaskGenerate a SQL query to answer [QUESTION]Give the names of all oil paintings created after 1910.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the names of all oil paintings created after 1910.[/QUESTION][SQL]SELECT Artists.location, Paintings.title FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Paintings.year > 1910 AND Paintings.medium = 'oil' ORDER BY Paintings.year NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the unique id of the painters who had medium oil paintings exhibited at gallery 240?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the unique id of the painters who had medium oil paintings exhibited at gallery 240?[/QUESTION][SQL]SELECT Paintings.medium, Painting.paintingID, Artists.artistID FROM Painting JOIN Artists ON Painting.painterID = Artists.artistID WHERE Painting.location = 'Gallery 240' AND Painting.medium = 'oil';
### TaskGenerate a SQL query to answer [QUESTION]What is the unique id of every painter who had a medium oil painting displayed at gallery 240?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the unique id of every painter who had a medium oil painting displayed at gallery 240?[/QUESTION][SQL]SELECT sculptorID FROM Sculptures WHERE medium = 'oil' AND location = 'gallery 240';
### TaskGenerate a SQL query to answer [QUESTION]Find the distinct titles of all the paintings that have a longer height than some painting on canvas?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the distinct titles of all the paintings that have a longer height than some painting on canvas?[/QUESTION][SQL]SELECT Paintings.title FROM Paintings WHERE Painting.height_mm > (SELECT MAX(height_mm) FROM Painting WHERE medium = 'canvas') GROUP BY Painting.title;
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct titles of every painting that has a greater height than some painting on canvas?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct titles of every painting that has a greater height than some painting on canvas?[/QUESTION][SQL]SELECT Paintings.title FROM Paintings WHERE Painting.height_mm > ALL (SELECT height_mm FROM Painting WHERE medium = 'canvas') GROUP BY Painting.title;
### TaskGenerate a SQL query to answer [QUESTION]Find the distinct ids of all paintings that are older than some painting at location gallery 240.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the distinct ids of all paintings that are older than some painting at location gallery 240.[/QUESTION][SQL]SELECT sculptureID FROM Sculptures WHERE YEAR > (SELECT YEAR FROM Paintings WHERE LOCATION = 'gallery 240')
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct ids of every painting that is older than some painting in gallery 240?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct ids of every painting that is older than some painting in gallery 240?[/QUESTION][SQL]SELECT sculptureID FROM Sculptures WHERE YEAR > (SELECT YEAR FROM Sculptures WHERE location = 'gallery 240') GROUP BY sculptureID;
### TaskGenerate a SQL query to answer [QUESTION]Find the id of the oldest painting.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the id of the oldest painting.[/QUESTION][SQL]SELECT Paintings.year FROM Paintings WHERE Painting.year = (SELECT MIN(year) FROM Painting);
### TaskGenerate a SQL query to answer [QUESTION]What is the id of the oldest painting?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the id of the oldest painting?[/QUESTION][SQL]SELECT Paintings.year FROM Paintings WHERE Painting.year = (SELECT MIN(year) FROM Painting);
### TaskGenerate a SQL query to answer [QUESTION]What are the first and last name of the artist who had a sculpture work whose title has the word “female” in it?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the first and last name of the artist who had a sculpture work whose title has the word “female” in it?[/QUESTION][SQL]SELECT sculptorID, CONCAT(fname,'', lname) AS full_name FROM Sculptures WHERE title ilike '%female%' ORDER BY full_name NULLS LAST LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the full name of the artist with a sculpture whose title includes the word "female"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the full name of the artist with a sculpture whose title includes the word "female"?[/QUESTION][SQL]SELECT sculptorID, CONCAT(a.lname, ', ', a.fname) AS full_name FROM Sculptures s JOIN Artists a ON s.sculptorID = a.artistID WHERE s.title ilike '%female%' ORDER BY a.lname NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the names of all distinct paintings in alphabetical order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of all distinct paintings in alphabetical order.[/QUESTION][SQL]SELECT title FROM Paintings WHERE medium = 'painting' ORDER BY title ASC;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of every distinct painting in alphabetical order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of every distinct painting in alphabetical order?[/QUESTION][SQL]SELECT title FROM Paintings WHERE title IS NOT NULL ORDER BY title ASC;
### TaskGenerate a SQL query to answer [QUESTION]List the names of all distinct paintings ordered by length.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of all distinct paintings ordered by length.[/QUESTION][SQL]SELECT title FROM Paintings WHERE medium = 'painting' ORDER BY LENGTH(title);
### TaskGenerate a SQL query to answer [QUESTION]List the names of all distinct paintings from shortest to longest in height.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of all distinct paintings from shortest to longest in height.[/QUESTION][SQL]SELECT title FROM Paintings WHERE height_mm IS NOT NULL ORDER BY height_mm ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of both paintings and sculptures created between 1900 and 1950?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of both paintings and sculptures created between 1900 and 1950?[/QUESTION][SQL]SELECT sculptureID, title AS sculpture_title FROM Sculptures WHERE YEAR BETWEEN 1900 AND 1950 UNION SELECT paintingID, title AS painting_title FROM Paintings WHERE YEAR BETWEEN 1900 AND 1950 ORDER BY sculpture_title NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of  paintings and scupltures created between 1900 and 1950?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of  paintings and scupltures created between 1900 and 1950?[/QUESTION][SQL]SELECT sculptureID, title AS sculpture_title FROM Sculptures WHERE YEAR BETWEEN 1900 AND 1950 UNION SELECT paintingID, title AS painting_title FROM Paintings WHERE YEAR BETWEEN 1900 AND 1950 ORDER BY sculpture_title NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the titles of paintings and sculpture works made by the artist whose id is 222?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the titles of paintings and sculpture works made by the artist whose id is 222?[/QUESTION][SQL]SELECT sculptureID, title FROM Sculptures WHERE sculptorID = 222 UNION SELECT paintingID, title FROM Paintings WHERE painterID = 222;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles of all paintings and sculpture works made by the artist whose id is 222?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles of all paintings and sculpture works made by the artist whose id is 222?[/QUESTION][SQL]SELECT sculptureID, title FROM Sculptures WHERE sculptorID = 222 UNION SELECT paintingID, title FROM Paintings WHERE painterID = 222;
### TaskGenerate a SQL query to answer [QUESTION]What is the id of the artist who has the highest number of painting works before 1900?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the id of the artist who has the highest number of painting works before 1900?[/QUESTION][SQL]SELECT Artists.title FROM Artists WHERE Artists.artistID IN (SELECT Paintings.painterID FROM Paintings WHERE Paintings.year < 1900 GROUP BY Painters.painterID ORDER BY COUNT(Paintings.paintingID) DESC LIMIT 1);
### TaskGenerate a SQL query to answer [QUESTION]What is the id of the artist with the most paintings before 1900?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the id of the artist with the most paintings before 1900?[/QUESTION][SQL]SELECT Artists.title FROM Artists WHERE Artists.artistID IN (SELECT Paintings.painterID FROM Paintings WHERE Paintings.year < 1900 GROUP BY Painters.painterID ORDER BY COUNT(Paintings.paintingID) DESC LIMIT 1);
### TaskGenerate a SQL query to answer [QUESTION]What is the first name of the artist who has the highest number of sculptures?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the first name of the artist who has the highest number of sculptures?[/QUESTION][SQL]SELECT sculptorID, COUNT(sculptureID) AS num_sculptures FROM Sculptures GROUP BY sculptorID ORDER BY num_sculptures DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the first name of the sculptor with the greatest number of works?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the first name of the sculptor with the greatest number of works?[/QUESTION][SQL]SELECT sculptorID, COUNT(sculptureID) AS num_sculptures FROM Sculptures GROUP BY sculptorID ORDER BY num_sculptures DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of paintings whose width is less than 600 or height is larger than 800?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of paintings whose width is less than 600 or height is larger than 800?[/QUESTION][SQL]SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles of paintings that have a width less than 600 or a height taller taller than 800?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles of paintings that have a width less than 600 or a height taller taller than 800?[/QUESTION][SQL]SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800;
### TaskGenerate a SQL query to answer [QUESTION]Which locations have paintings created before 1885 or after 1930?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which locations have paintings created before 1885 or after 1930?[/QUESTION][SQL]SELECT location FROM Paintings WHERE YEAR < 1885 OR YEAR > 1930 GROUP BY location;
### TaskGenerate a SQL query to answer [QUESTION]What locations have works painted before 1885 or after 1930?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What locations have works painted before 1885 or after 1930?[/QUESTION][SQL]SELECT location FROM Paintings WHERE year < 1885 OR year > 1930 GROUP BY location;
### TaskGenerate a SQL query to answer [QUESTION]Find the ids of paintings whose height is bigger than 500 and less than 2000?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the ids of paintings whose height is bigger than 500 and less than 2000?[/QUESTION][SQL]SELECT Paintings.title FROM Paintings WHERE Painting.height_mm > 500 AND Painting.height_mm < 2000;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of paintings that are taller than 500 and shorter than 2000?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of paintings that are taller than 500 and shorter than 2000?[/QUESTION][SQL]SELECT Paintings.title FROM Paintings WHERE Painting.height_mm > 500 AND Painting.height_mm < 2000;
### TaskGenerate a SQL query to answer [QUESTION]Which locations have paintings in the mediums of on panel and on canvas?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which locations have paintings in the mediums of on panel and on canvas?[/QUESTION][SQL]SELECT location FROM Paintings WHERE medium = 'on panel' OR medium = 'on canvas';
### TaskGenerate a SQL query to answer [QUESTION]What are the locations that have paintings in the mediums of on panels and on canvas?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the locations that have paintings in the mediums of on panels and on canvas?[/QUESTION][SQL]SELECT location FROM Paintings WHERE medium = 'on panels' OR medium = 'on canvas';
### TaskGenerate a SQL query to answer [QUESTION]Find the locations that have paintings created before 1885 and after 1930?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the locations that have paintings created before 1885 and after 1930?[/QUESTION][SQL]SELECT location FROM Paintings WHERE year < 1885 AND year > 1930 GROUP BY location;
### TaskGenerate a SQL query to answer [QUESTION]What are the locations that have works painted before 1885 and after 1930?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the locations that have works painted before 1885 and after 1930?[/QUESTION][SQL]SELECT location FROM Paintings WHERE year < 1885 AND year > 1930 GROUP BY location;
### TaskGenerate a SQL query to answer [QUESTION]What are the average height and width of paintings that are oil medium in the place of gallery 241?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the average height and width of paintings that are oil medium in the place of gallery 241?[/QUESTION][SQL]SELECT sculptureID, AVG(height_mm) AS avg_height, AVG(width_mm) AS avg_width FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241' GROUP BY sculptureID;
### TaskGenerate a SQL query to answer [QUESTION]What is the average height and width of paintings that are oil medium in gallery 241?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average height and width of paintings that are oil medium in gallery 241?[/QUESTION][SQL]SELECT sculptureID, AVG(height_mm) AS avg_height, AVG(width_mm) AS avg_width FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241' GROUP BY sculptureID;
### TaskGenerate a SQL query to answer [QUESTION]What are the maximum height and id of paintings painted before 1900?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the maximum height and id of paintings painted before 1900?[/QUESTION][SQL]SELECT medium, MAX(height_mm), MAX(paintingID) FROM Paintings WHERE year < 1900 GROUP BY medium;
### TaskGenerate a SQL query to answer [QUESTION]What is the height and id of the tallest painting created before 1900?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the height and id of the tallest painting created before 1900?[/QUESTION][SQL]SELECT sculptureID, MAX(height_mm) AS max_height FROM Paintings WHERE year < 1900 GROUP BY sculptureID ORDER BY max_height DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the maximum height and width of paintings for each year?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the maximum height and width of paintings for each year?[/QUESTION][SQL]SELECT year, MAX(height_mm) AS max_height, MAX(width_mm) AS max_width FROM Paintings GROUP BY year ORDER BY year NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are largest height and width dimensions for paintings in each year?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are largest height and width dimensions for paintings in each year?[/QUESTION][SQL]SELECT year, MAX(height_mm) AS max_height, MAX(width_mm) AS max_width FROM Paintings GROUP BY year ORDER BY year NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the average height and width of paintings grouped by painters and ordered by name?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the average height and width of paintings grouped by painters and ordered by name?[/QUESTION][SQL]SELECT Artists.location, AVG(Paintings.height_mm), AVG(Paintings.width_mm) FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID GROUP BY Artists.location ORDER BY Artists.lname ASC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the average height and width of paintings grouped by painters and ordered by name[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the average height and width of paintings grouped by painters and ordered by name[/QUESTION][SQL]SELECT Artists.location, AVG(Paintings.height_mm), AVG(Paintings.width_mm) FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID GROUP BY Artists.location ORDER BY Artists.lname ASC;
### TaskGenerate a SQL query to answer [QUESTION]Find the first names and number of works of all artists who have at least two paintings?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the first names and number of works of all artists who have at least two paintings?[/QUESTION][SQL]SELECT Artists.title, COUNT(Paintings.paintingID) AS num_paintings FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY Artists.title HAVING COUNT(Paintings.paintingID) >= 2 ORDER BY Artists.title NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the first names of all artists who have at least two paintings, and how many works did each create?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the first names of all artists who have at least two paintings, and how many works did each create?[/QUESTION][SQL]SELECT Artists.title, COUNT(Paintings.paintingID) AS total_paintings FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY Artists.title HAVING COUNT(Paintings.paintingID) >= 2 ORDER BY total_paintings DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the death year of all artists who have at most 3 paintings?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the death year of all artists who have at most 3 paintings?[/QUESTION][SQL]SELECT Artists.location, COUNT(Paintings.paintingID) AS num_paintings, SUM(CASE WHEN Paintings.year IS NOT NULL THEN 1 ELSE 0 END) AS total_years FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE COUNT(Paintings.paintingID) <= 3 GROUP BY Artists.location ORDER BY total_years DESC;
### TaskGenerate a SQL query to answer [QUESTION]When did each artist who created less than 4 paintings die?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]When did each artist who created less than 4 paintings die?[/QUESTION][SQL]SELECT Artists.location, Artists.deathYear FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY Artists.location, Artists.deathYear HAVING COUNT(Paintings.paintingID) < 4 ORDER BY Artists.location NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the death year of the artist who made the least number of sculptures?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the death year of the artist who made the least number of sculptures?[/QUESTION][SQL]SELECT sculptorID FROM Sculptures WHERE sculptorID IN (SELECT MIN(s.sculptorID) AS min_sculptor_id FROM Sculptures s GROUP BY s.sculptorID)
### TaskGenerate a SQL query to answer [QUESTION]When did the artist who made the fewest sculptures die?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]When did the artist who made the fewest sculptures die?[/QUESTION][SQL]SELECT sculptorID, MIN(deathYear) AS earliest_death_year FROM (SELECT s.sculptorID, COUNT(s.sculptureID) AS num_sculptures, lag(COUNT(s.sculptureID)) OVER (ORDER BY s.sculptorID) AS previous_num_sculptures FROM Sculptures s GROUP BY s.sculptorID ORDER BY num_sculptures ASC LIMIT 1) AS subquery JOIN Artists a ON a.artistID = subquery.sculptorID WHERE previous_num_sculptures IS NULL OR previous_num_sculptures > num_sculptures RETURNING a.deathYear;
### TaskGenerate a SQL query to answer [QUESTION]What are the id and height of the painting with the longest width in gallery 240?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the id and height of the painting with the longest width in gallery 240?[/QUESTION][SQL]SELECT Paintings.title, Painting.height_mm FROM Painting JOIN Gallery ON Painting.location = Gallery.gallery_id WHERE Gallery.gallery_id = 240 ORDER BY Painting.width_mm DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Tell me the height and id number of the widest painting in gallery 240.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Tell me the height and id number of the widest painting in gallery 240.[/QUESTION][SQL]SELECT sculptureID, height_mm FROM Paintings WHERE location = 'Gallery 240' ORDER BY width_mm DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of the paintings created before all of the paintings in gallery 240?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of the paintings created before all of the paintings in gallery 240?[/QUESTION][SQL]SELECT sculptureID FROM Sculptures WHERE YEAR > ALL (SELECT YEAR FROM Paintings WHERE LOCATION = 'Gallery 240');
### TaskGenerate a SQL query to answer [QUESTION]What is the id of every painting created before the oldest painting in gallery 240?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the id of every painting created before the oldest painting in gallery 240?[/QUESTION][SQL]SELECT sculptureID FROM Sculptures WHERE YEAR > (SELECT MIN(YEAR) FROM Paintings p WHERE p.location = 'gallery 240');
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of the paintings whose height is longer than the height of all paintings created after 1900?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of the paintings whose height is longer than the height of all paintings created after 1900?[/QUESTION][SQL]SELECT title FROM Paintings WHERE height_mm > ALL (SELECT height_mm FROM Paintings WHERE year > 1900);
### TaskGenerate a SQL query to answer [QUESTION]List the ids of all paintings that are taller than the longest painting created after 1900.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the ids of all paintings that are taller than the longest painting created after 1900.[/QUESTION][SQL]SELECT sculptureID FROM Sculptures WHERE YEAR > 1900 ORDER BY height_mm DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find the top 3 artists who have the biggest number of painting works whose medium is oil?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the top 3 artists who have the biggest number of painting works whose medium is oil?[/QUESTION][SQL]SELECT Artists.location, COUNT(Paintings.paintingID) AS num_paintings FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Paintings.medium = 'oil' GROUP BY Artists.location ORDER BY num_paintings DESC LIMIT 3;
### TaskGenerate a SQL query to answer [QUESTION]Which artists have the most paintings in oil?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which artists have the most paintings in oil?[/QUESTION][SQL]SELECT Artists.location, COUNT(Paintings.paintingID) AS number_of_paintings FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Paintings.medium = 'oil' GROUP BY Artists.location ORDER BY number_of_paintings DESC NULLS LAST LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List the painting id, location and title of the medium oil paintings ordered by year.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the painting id, location and title of the medium oil paintings ordered by year.[/QUESTION][SQL]SELECT Paintings.title, Painting.location, Painting.year FROM Painting WHERE Painting.medium = 'oil' ORDER BY Painting.year;
### TaskGenerate a SQL query to answer [QUESTION]Order all of the oil paintings by date of creation and list their ids, locations, and titles.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Order all of the oil paintings by date of creation and list their ids, locations, and titles.[/QUESTION][SQL]SELECT sculptureID, location, title FROM Sculptures WHERE medium = 'oil' ORDER BY year DESC;
### TaskGenerate a SQL query to answer [QUESTION]List the year, location and title of paintings whose height is longer than 1000 ordered by title.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the year, location and title of paintings whose height is longer than 1000 ordered by title.[/QUESTION][SQL]SELECT Paintings.year, Painting.location, Painting.title FROM Painting WHERE Painting.height_mm > 1000 ORDER BY Painting.title NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the year, location, and name of all paintings that are taller than 1000 in alphabetical order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the year, location, and name of all paintings that are taller than 1000 in alphabetical order.[/QUESTION][SQL]SELECT Paintings.year, Painting.location, Painting.title FROM Painting WHERE Painting.height_mm > 1000 ORDER BY Painting.title ASC;
### TaskGenerate a SQL query to answer [QUESTION]Find the first and last name of artists who have painting but no sculpture work.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the first and last name of artists who have painting but no sculpture work.[/QUESTION][SQL]SELECT Artists.location, Artists.fname, Artists.lname FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Artists.artistID NOT IN (SELECT sculptorID FROM Sculptures);
### TaskGenerate a SQL query to answer [QUESTION]What are the first and last names of the artists who did not sculpt but could paint.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the first and last names of the artists who did not sculpt but could paint.[/QUESTION][SQL]SELECT Artists.location, Artists.fname, Artists.lname FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Artists.artistID NOT IN (SELECT sculptorID FROM Sculptures);
### TaskGenerate a SQL query to answer [QUESTION]Find the locations that have paintings before 1885 and no work with medium on canvas?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the locations that have paintings before 1885 and no work with medium on canvas?[/QUESTION][SQL]SELECT location FROM Paintings WHERE year < 1885 AND mediumOn = 'no' GROUP BY location HAVING COUNT(*) > 1;
### TaskGenerate a SQL query to answer [QUESTION]Where do you have paintings that were created before 1885 that are not on canvas?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Where do you have paintings that were created before 1885 that are not on canvas?[/QUESTION][SQL]SELECT location FROM Paintings WHERE YEAR < 1885 AND MEDIUM!= 'canvas';
### TaskGenerate a SQL query to answer [QUESTION]How many races are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many races are there?[/QUESTION][SQL]SELECT race.Road FROM race;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of races.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of races.[/QUESTION][SQL]SELECT race.Road FROM race;
### TaskGenerate a SQL query to answer [QUESTION]List the winning drivers and winning teams of races in ascending alphabetical order of winning team.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the winning drivers and winning teams of races in ascending alphabetical order of winning team.[/QUESTION][SQL]SELECT race.Winning_driver, race.Winning_team FROM race ORDER BY race.Winning_team ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the winning drivers and teams of races, ordered alphabetically by team?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the winning drivers and teams of races, ordered alphabetically by team?[/QUESTION][SQL]SELECT race.Road, d.Driver_Name, r.Winning_team FROM race JOIN driver d ON race.Driver_ID = d.Driver_ID ORDER BY r.Winning_team ASC;
### TaskGenerate a SQL query to answer [QUESTION]Which winning drivers of races had pole position that is not "Junior Strous"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which winning drivers of races had pole position that is not "Junior Strous"?[/QUESTION][SQL]SELECT race.Road, race.Winning_driver FROM race WHERE race.Pole_Position!= 'Junior Strous' ORDER BY race.Road NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return the winning drivers of races who did not have the pole position of Junior Strous.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the winning drivers of races who did not have the pole position of Junior Strous.[/QUESTION][SQL]SELECT race.Road, race.Winning_driver FROM race JOIN driver ON race.Driver_ID = driver.Driver_ID WHERE LOWER(driver.Driver_Name)!= 'junior strous' ORDER BY race.Road NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Who are the constructors of drivers sorted by drivers' age in ascending order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Who are the constructors of drivers sorted by drivers' age in ascending order?[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Constructor FROM driver ORDER BY driver.Age ASC;
### TaskGenerate a SQL query to answer [QUESTION]Return the different constructors of drivers, ordered by age ascending.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the different constructors of drivers, ordered by age ascending.[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Constructor, driver.Age FROM driver ORDER BY driver.Age ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct entrant types of drivers aged 20 or older?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct entrant types of drivers aged 20 or older?[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Entrant FROM driver WHERE driver.Age >= 20 GROUP BY driver.Driver_ID, driver.Entrant ORDER BY driver.Driver_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Give the different entrant types for drivers at least 20 years old.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the different entrant types for drivers at least 20 years old.[/QUESTION][SQL]SELECT driver.Driver_ID, drive.r Entrant FROM driver WHERE age >= 20 GROUP BY drive.r Entrant;
### TaskGenerate a SQL query to answer [QUESTION]What are the maximum and minimum age of driver?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the maximum and minimum age of driver?[/QUESTION][SQL]SELECT Driver_ID, MAX(Age) AS max_age, MIN(Age) AS min_age FROM driver GROUP BY Driver_ID;
### TaskGenerate a SQL query to answer [QUESTION]Return the maximum and minimum age across drivers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the maximum and minimum age across drivers.[/QUESTION][SQL]SELECT Driver_ID, MAX(Age) AS max_age, MIN(Age) AS min_age FROM driver GROUP BY Driver_ID;
### TaskGenerate a SQL query to answer [QUESTION]How many different engines are used by drivers with age older than 30 or younger than 20?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different engines are used by drivers with age older than 30 or younger than 20?[/QUESTION][SQL]SELECT driver.Driver_ID, COUNT(DISTINCT driver.Engine) AS unique_engines FROM driver WHERE (driver.Age > 30 OR driver.Age < 20) GROUP BY driver.Driver_ID ORDER BY unique_engines DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of different engines used by drivers who had an age either over 30 or under 20.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of different engines used by drivers who had an age either over 30 or under 20.[/QUESTION][SQL]SELECT driver.Driver_ID, COUNT(DISTINCT driver.Engine) AS distinct_engines FROM driver WHERE (driver.Age > 30 OR driver.Age < 20) GROUP BY driver.Driver_ID ORDER BY distinct_engines DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List all names of drivers in descending alphabetical order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all names of drivers in descending alphabetical order.[/QUESTION][SQL]SELECT driver.Driver_ID, drive.r.Driver_Name FROM driver ORDER BY Driver_Name DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of drivers, ordered descending alphabetically?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of drivers, ordered descending alphabetically?[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Driver_Name FROM driver ORDER BY driver.Driver_Name DESC;
### TaskGenerate a SQL query to answer [QUESTION]Please show the names of drivers and the names of races they participate in.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please show the names of drivers and the names of races they participate in.[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Driver_Name, race.Race_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of drivers and the names of the races they took part in?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of drivers and the names of the races they took part in?[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Driver_Name, race.Race_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID;
### TaskGenerate a SQL query to answer [QUESTION]Please show the names of drivers and the number of races they participate in.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please show the names of drivers and the number of races they participate in.[/QUESTION][SQL]SELECT driver.Driver_ID, COUNT(race.Road) AS race_count FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID ORDER BY race_count DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many races did each driver participate in?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many races did each driver participate in?[/QUESTION][SQL]SELECT driver.Driver_ID, COUNT(race.Road) AS number_of_races FROM race JOIN driver ON race.Driver_ID = driver.Driver_ID GROUP BY driver.Driver_ID ORDER BY number_of_races DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Please show the age of the driver who participated in the most number of races.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please show the age of the driver who participated in the most number of races.[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Age FROM (SELECT r.Driver_ID, COUNT(r.Road) AS race_count FROM race r GROUP BY r.Driver_ID ORDER BY race_count DESC LIMIT 1) AS rc JOIN driver ON rc.Driver_ID = driver.Driver_ID;
### TaskGenerate a SQL query to answer [QUESTION]What is the age of the driver who raced in the most races?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the age of the driver who raced in the most races?[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Age FROM (SELECT r.Driver_ID, COUNT(r.Road) AS race_count FROM race r GROUP BY r.Driver_ID ORDER BY race_count DESC LIMIT 1) AS rc JOIN driver ON rc.Driver_ID = driver.Driver_ID;
### TaskGenerate a SQL query to answer [QUESTION]Please show the names and ages of the drivers who participated in at least two races.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please show the names and ages of the drivers who participated in at least two races.[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Driver_Name, COUNT(race.Road) AS race_count FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID, driver.Driver_Name HAVING COUNT(race.Road) >= 2 ORDER BY driver.Driver_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and ages of drivers who raced in two or more races?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and ages of drivers who raced in two or more races?[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Driver_Name, COUNT(race.Road) AS number_of_races FROM race JOIN driver ON race.Driver_ID = driver.Driver_ID GROUP BY driver.Driver_ID, driver.Driver_Name HAVING COUNT(race.Road) >= 2 ORDER BY driver.Driver_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Please list the names of races with drivers aged 26 or older participating.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please list the names of races with drivers aged 26 or older participating.[/QUESTION][SQL]SELECT race.Race_Name FROM race WHERE race.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Age >= 26) ORDER BY race.Race_Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of races in which drivers 26 or older took part?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of races in which drivers 26 or older took part?[/QUESTION][SQL]SELECT race.Race_Name FROM race WHERE race.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Age >= 26) ORDER BY race.Road NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the names of drivers whose constructor is not "Bugatti".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of drivers whose constructor is not "Bugatti".[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Driver_Name FROM driver WHERE driver.Constructor!= 'Bugatti' ORDER BY driver.Driver_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names od drivers who did not have the constructor Bugatti?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names od drivers who did not have the constructor Bugatti?[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Driver_Name FROM driver WHERE driver.Constructor!= 'Bugatti' ORDER BY driver.Driver_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List different constructors and the number of drivers that use each constructor.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List different constructors and the number of drivers that use each constructor.[/QUESTION][SQL]SELECT driver.Driver_ID, COUNT(DISTINCT driver.Constructor) AS Constructor_Count FROM driver GROUP BY driver.Driver_ID ORDER BY driver.Driver_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many drivers use each constructor?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many drivers use each constructor?[/QUESTION][SQL]SELECT driver.Driver_ID, COUNT(*) AS number_of_drivers FROM driver GROUP BY Driver_ID ORDER BY number_of_drivers DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the most common type of engine used by drivers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the most common type of engine used by drivers.[/QUESTION][SQL]SELECT driver.Driver_ID, drive.race_name, COUNT(*) AS number_of_races FROM driver JOIN race ON driver.driver_id = race.driver_id GROUP BY drive.race_name, drive.race_name
### TaskGenerate a SQL query to answer [QUESTION]What is the most common type of engine?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the most common type of engine?[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Engine FROM driver driver GROUP BY driver.Driver_ID, driver.Engine ORDER BY COUNT(drvier.Driver_ID) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List the types of engines that are used by at least two drivers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the types of engines that are used by at least two drivers.[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Engine FROM driver GROUP BY driver.Driver_ID, driver.Engine HAVING COUNT(driver.Driver_ID) >= 2 ORDER BY driver.Driver_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the engine types that are used by two or more drivers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the engine types that are used by two or more drivers?[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Engine FROM driver GROUP BY driver.Driver_ID, driver.Engine HAVING COUNT(driver.Driver_ID) >= 2 ORDER BY driver.Driver_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the names of drivers that do not participate in any race.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of drivers that do not participate in any race.[/QUESTION][SQL]SELECT driver.Driver_ID, driveer.Driver_Name FROM driver WHERE NOT EXISTS (SELECT 1 FROM race WHERE race.Driver_ID = driver.Driver_ID)
### TaskGenerate a SQL query to answer [QUESTION]What are names of drivers who did not take part in a race?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are names of drivers who did not take part in a race?[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Driver_Name FROM driver LEFT JOIN race ON driver.Driver_ID = race.Driver_ID WHERE race.Driver_ID IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]Show the constructors that are used both by drivers with age lower than 20 and drivers with age over than 30.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the constructors that are used both by drivers with age lower than 20 and drivers with age over than 30.[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Constructor FROM driver WHERE (driver.Age < 20 OR driver.Age > 30) GROUP BY driver.Driver_ID, driver.Constructor HAVING COUNT(DISTINCT CASE WHEN driver.Age < 20 THEN driver.Driver_ID ELSE NULL END) > 0 AND COUNT(DISTINCT CASE WHEN driver.Age > 30 THEN driver.Driver_ID ELSE NULL END) > 0 ORDER BY driver.Driver_ID;
### TaskGenerate a SQL query to answer [QUESTION]What are the constructors who are used by both drivers who are younger than 20 and drivers older than 30?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the constructors who are used by both drivers who are younger than 20 and drivers older than 30?[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Constructor FROM driver WHERE (driver.Age < 20 OR driver.Age > 30) GROUP BY driver.Driver_ID, driver.Constructor HAVING COUNT(DISTINCT CASE WHEN (driver.Age < 20 OR driver.Age > 30) THEN driver.Driver_ID END) >= 2 ORDER BY driver.Driver_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the teams that won more than once.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the teams that won more than once.[/QUESTION][SQL]SELECT race.Winning_team FROM race WHERE race.Winning_team IN (SELECT race.Winning_team FROM race GROUP BY race.Winning_team HAVING COUNT(race.Road) > 1) ORDER BY race.Winning_team;
### TaskGenerate a SQL query to answer [QUESTION]Which teams won more than 1 race?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which teams won more than 1 race?[/QUESTION][SQL]SELECT race.Winning_team FROM race WHERE race.Winning_team IN (SELECT race.Winning_team FROM race GROUP BY race.Winning_team HAVING COUNT(race.Road) > 1) ORDER BY race.Winning_team;
### TaskGenerate a SQL query to answer [QUESTION]Find the names of drivers who were in both "James Hinchcliffe" and "Carl Skerlong" pole positions before.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of drivers who were in both "James Hinchcliffe" and "Carl Skerlong" pole positions before.[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Driver_Name FROM race JOIN driver ON race.Driver_ID = driver.Driver_ID WHERE race.Pole_Position ilike '%James%Hinchcliffe%' AND race.Pole_Position ilike '%Carl%Skerlong%' GROUP BY driver.Driver_ID, driver.Driver_Name ORDER BY driver.Driver_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of drivers who had both the pole position James Hinchcliffe and the pole position Carl Skerlong?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of drivers who had both the pole position James Hinchcliffe and the pole position Carl Skerlong?[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Driver_Name FROM race JOIN driver ON race.Driver_ID = driver.Driver_ID WHERE race.Pole_Position ilike '%James%Hinchcliffe%' AND race.Pole_Position ilike '%Carl%Skerlong%';
### TaskGenerate a SQL query to answer [QUESTION]find the name of drivers who were never in "James Hinchcliffe" pole position before.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]find the name of drivers who were never in "James Hinchcliffe" pole position before.[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Driver_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID WHERE race.Pole_Position NOT ILIKE '%James%Hinchcliffe%' ORDER BY driver.Driver_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of drivers except for those who had the pole position James Hinchcliffe?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of drivers except for those who had the pole position James Hinchcliffe?[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Driver_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID WHERE driver.Driver_Name!= 'James Hinchcliffe' AND race.Pole_Position = driver.Driver_Name;
### TaskGenerate a SQL query to answer [QUESTION]How many languages are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many languages are there?[/QUESTION][SQL]SELECT countries.country_id FROM countries;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of languages.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of languages.[/QUESTION][SQL]SELECT countries.country_id FROM countries;
### TaskGenerate a SQL query to answer [QUESTION]List the name of languages in ascending alphabetical order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the name of languages in ascending alphabetical order.[/QUESTION][SQL]SELECT languages.language_id, languages.name FROM languages ORDER BY languages.name ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of languages, in alphabetical order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of languages, in alphabetical order?[/QUESTION][SQL]SELECT languages.language_id, languages.name FROM languages ORDER BY languages.name ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of languages that contain the word "ish"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of languages that contain the word "ish"?[/QUESTION][SQL]SELECT languages.language_id, languages.name FROM languages WHERE languages.name ilike '%ish%' ORDER BY languages.language_id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return the names of langauges that contain the substring "ish".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the names of langauges that contain the substring "ish".[/QUESTION][SQL]SELECT languages.language_id, languages.name FROM languages WHERE languages.name ilike '%ish%' ORDER BY languages.language_id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the names of countries in descending order of overall scores.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the names of countries in descending order of overall scores.[/QUESTION][SQL]SELECT country_id, name FROM countries ORDER BY overall_score DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the countries, ordered descending by overall score?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the countries, ordered descending by overall score?[/QUESTION][SQL]SELECT country_id, name FROM countries ORDER BY overall_score DESC;
### TaskGenerate a SQL query to answer [QUESTION]What is the average justice scores among countries?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average justice scores among countries?[/QUESTION][SQL]SELECT country_id, AVG(justice_score) AS average_justice_score FROM countries GROUP BY country_id ORDER BY average_justice_score DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Give the average justice scores across all countries.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the average justice scores across all countries.[/QUESTION][SQL]SELECT country_id, AVG(justice_score) AS average_justice_score FROM countries GROUP BY country_id ORDER BY average_justice_score DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the maximum and minimum health scores among countries that are not "Norway".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the maximum and minimum health scores among countries that are not "Norway".[/QUESTION][SQL]SELECT country_id, MAX(health_score) AS max_health_score, MIN(health_score) AS min_health_score FROM countries WHERE name!= 'Norway' GROUP BY country_id;
### TaskGenerate a SQL query to answer [QUESTION]Return the maximum and minimum health scores across all countries other than Norway.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the maximum and minimum health scores across all countries other than Norway.[/QUESTION][SQL]SELECT country_id, MAX(health_score) AS max_health_score, MIN(health_score) AS min_health_score FROM countries WHERE name!= 'Norway' GROUP BY country_id ORDER BY country_id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many different official languages are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different official languages are there?[/QUESTION][SQL]SELECT language_id FROM official_languages WHERE language_id IN (SELECT DISTINCT language_id FROM official_languages) GROUP BY language_id ORDER BY language_id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of different official languages.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of different official languages.[/QUESTION][SQL]SELECT language_id FROM official_languages WHERE language_id IN (SELECT DISTINCT language_id FROM official_languages) GROUP BY language_id;
### TaskGenerate a SQL query to answer [QUESTION]List names of countries in descending order of education_score.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List names of countries in descending order of education_score.[/QUESTION][SQL]SELECT country_id, name FROM countries ORDER BY education_score DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the countries, ordered descending by education score?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the countries, ordered descending by education score?[/QUESTION][SQL]SELECT country_id, name FROM countries ORDER BY education_score DESC;
### TaskGenerate a SQL query to answer [QUESTION]List the name of the country with the biggest score in politics.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the name of the country with the biggest score in politics.[/QUESTION][SQL]SELECT countries.country_id, countries.name FROM countries ORDER BY countries.politics_score DESC NULLS LAST LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the country with the highest politics score?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the country with the highest politics score?[/QUESTION][SQL]SELECT country_id FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries);
### TaskGenerate a SQL query to answer [QUESTION]Show the names of countries and their official languages.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the names of countries and their official languages.[/QUESTION][SQL]SELECT countries.country_id, countries.name AS country_name, languages.name AS language_name FROM countries JOIN official_languages ON countries.id = official_languages.country_id JOIN languages ON official_languages.language_id = languages.id;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the countries, as well as the names of their official langauges?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the countries, as well as the names of their official langauges?[/QUESTION][SQL]SELECT countries.country_id, countries.name AS country_name, languages.name AS language_name FROM countries JOIN official_languages ON countries.id = official_languages.country_id JOIN languages ON official_languages.language_id = languages.id;
### TaskGenerate a SQL query to answer [QUESTION]Show the official languages and the number of countries speaking each language.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the official languages and the number of countries speaking each language.[/QUESTION][SQL]SELECT languages.language_id, languages.name AS language_name, COUNT(official_languages.country_id) AS country_count FROM official_languages JOIN languages ON official_languages.language_id = languages.id GROUP BY languages. name ORDER BY country_count DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the different official languages, as well as the number of countries that speak each?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the different official languages, as well as the number of countries that speak each?[/QUESTION][SQL]SELECT languages.language_id, languages.name, COUNT(official_languages.country_id) AS country_count FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.id, languages.name ORDER BY country_count DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the official language spoken by the most number of countries.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the official language spoken by the most number of countries.[/QUESTION][SQL]SELECT languages.language_id, languages.name FROM languages JOIN (SELECT official_languages.language_id, COUNT(official_languages.country_id) AS country_count FROM official_languages GROUP BY official_languages.language_id ORDER BY country_count DESC LIMIT 1) AS max_country_count ON languages.id = max_country_count.language_id;
### TaskGenerate a SQL query to answer [QUESTION]What is the official language that is most common?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the official language that is most common?[/QUESTION][SQL]SELECT languages.language_id, languages.name FROM languages JOIN (SELECT official_languages.language_id, COUNT(*) AS frequency FROM official_languages GROUP BY official_languages.language_id ORDER BY frequency DESC LIMIT 1) AS max_frequency ON languages.id = max_frequency.language_id;
### TaskGenerate a SQL query to answer [QUESTION]Show the official languages spoken by at least two countries.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the official languages spoken by at least two countries.[/QUESTION][SQL]SELECT languages.language_id, languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.id, languages.name HAVING COUNT(official_languages.country_id) >= 2 ORDER BY languages.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which official languages are spoken in two or more countries?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which official languages are spoken in two or more countries?[/QUESTION][SQL]SELECT languages.language_id, languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.id, languages.name HAVING COUNT(official_languages.country_id) >= 2 ORDER BY languages.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the average overall scores of countries whose official language is "English".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the average overall scores of countries whose official language is "English".[/QUESTION][SQL]SELECT country_id, AVG(overall_score) AS avg_overall_score FROM countries JOIN official_languages ol ON countries.id = ol.country_id JOIN languages l ON ol.language_id = l.id WHERE LOWER(l.name) = 'english' GROUP BY country_id;
### TaskGenerate a SQL query to answer [QUESTION]What is the average overall score across countries with English as their official language?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average overall score across countries with English as their official language?[/QUESTION][SQL]SELECT country_id, AVG(overall_score) AS average_overall_score FROM countries JOIN official_languages ol ON countries.id = ol.country_id WHERE (SELECT name FROM languages WHERE id = ol.language_id) = 'English' GROUP BY country_id;
### TaskGenerate a SQL query to answer [QUESTION]Show the three official languages that are most commonly spoken.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the three official languages that are most commonly spoken.[/QUESTION][SQL]SELECT languages.language_id, languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.id, languages.name ORDER BY COUNT(official_languages.country_id) DESC LIMIT 3;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the three official languages spoken in the most countries?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the three official languages spoken in the most countries?[/QUESTION][SQL]SELECT languages.language_id, languages.name, COUNT(official_languages.country_id) AS country_count FROM official_languages JOIN languages ON official_languages.language_id = languages.id GROUP BY languages.language_id, languages.name ORDER BY country_count DESC LIMIT 3;
### TaskGenerate a SQL query to answer [QUESTION]Show the official languages sorted in descending order by the average overall scores among countries speaking them.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the official languages sorted in descending order by the average overall scores among countries speaking them.[/QUESTION][SQL]SELECT languages.language_id, languages.name, AVG(countries.overall_score) AS avg_overall_score FROM official_languages JOIN languages ON official_languages.language_id = languages.id JOIN countries ON official_languages.country_id = countries.id GROUP BY languages. language_id, languages.name ORDER BY avg_overall_score DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the official languages, sorted descending by the average overall scores across the countries that correspond to each?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the official languages, sorted descending by the average overall scores across the countries that correspond to each?[/QUESTION][SQL]SELECT languages.language_id, languages.name, AVG(countries.overall_score) AS avg_overall_score FROM official_languages JOIN languages ON official_languages.language_id = languages.id JOIN countries ON official_languages.country_id = countries.id GROUP BY languages.language_id, languages.name ORDER BY avg_overall_score DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the name of the country that has the greatest number of official languages.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the name of the country that has the greatest number of official languages.[/QUESTION][SQL]SELECT country_id FROM countries WHERE id = (SELECT MAX(ol.country_id) FROM official_languages ol GROUP BY ol.country_id ORDER BY COUNT(ol.language_id) DESC LIMIT 1);
### TaskGenerate a SQL query to answer [QUESTION]Which country has the greatest number of official languages?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which country has the greatest number of official languages?[/QUESTION][SQL]SELECT country_id, COUNT(*) AS num_of_official_languages FROM official_languages GROUP BY country_id ORDER BY num_of_official_languages DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List the names of languages that are not the official language of any countries.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of languages that are not the official language of any countries.[/QUESTION][SQL]SELECT languages.language_id, languages.name FROM languages LEFT JOIN official_languages ON languages.id = official_languages.language_id WHERE official_languages.language_id IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of languages that are not the official language of any country?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of languages that are not the official language of any country?[/QUESTION][SQL]SELECT languages.language_id, languages.name FROM languages LEFT JOIN official_languages ON languages.id = official_languages.language_id WHERE official_languages.language_id IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]List the names of countries that do not have any official language.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of countries that do not have any official language.[/QUESTION][SQL]SELECT countries.country_id, countries.name FROM countries LEFT JOIN official_languages ON countries.id = official_languages.country_id WHERE official_languages.country_id IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of countries that do not have an official language?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of countries that do not have an official language?[/QUESTION][SQL]SELECT country_id FROM countries WHERE country_id NOT IN (SELECT country_id FROM official_languages)
### TaskGenerate a SQL query to answer [QUESTION]Show the names of languages that are the official language for both countries with overall score greater than 95 and countries with overall score less than than 90.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the names of languages that are the official language for both countries with overall score greater than 95 and countries with overall score less than than 90.[/QUESTION][SQL]SELECT languages.language_id, languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id WHERE languages.id IN (SELECT official_languages.language_id FROM official_languages JOIN countries ON official_languages.country_id = countries.id WHERE countries.overall_score > 95) AND languages.id IN (SELECT official_languages.language_id FROM official_languages JOIN countries ON official_languages.country_id = countries.id WHERE countries.overall_score < 90);
### TaskGenerate a SQL query to answer [QUESTION]What are the names of languages that are the official language not only for countries that have an overall score of above 95, but also for countries that have an overall score below 90?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of languages that are the official language not only for countries that have an overall score of above 95, but also for countries that have an overall score below 90?[/QUESTION][SQL]SELECT languages.language_id, languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id WHERE languages.id IN (SELECT official_languages.language_id FROM official_languages JOIN countries ON official_languages.country_id = countries.id WHERE countries.overall_score > 95 UNION SELECT official_languages.language_id FROM official_languages JOIN countries ON official_languages.country_id = countries.id WHERE countries.overall_score < 90) GROUP BY languages.id, languages.name ORDER BY languages.id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which countries and cities are included in addresses?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which countries and cities are included in addresses?[/QUESTION][SQL]SELECT Addresses.search_string FROM User_Searches;
### TaskGenerate a SQL query to answer [QUESTION]What are the countries and cities for each address?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the countries and cities for each address?[/QUESTION][SQL]SELECT Addresses.user_id, Addresses.country, Addresses.town_city FROM Users JOIN Addresses ON Users.user_address_id = Addresses.address_id;
### TaskGenerate a SQL query to answer [QUESTION]In which states are each of the the properties located?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]In which states are each of the the properties located?[/QUESTION][SQL]SELECT user_id, p.property_name, a.county_state_province FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id JOIN Addresses a ON p.property_address_id = a.address_id;
### TaskGenerate a SQL query to answer [QUESTION]Give the states or provinces corresponding to each property.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the states or provinces corresponding to each property.[/QUESTION][SQL]SELECT user_id, p.property_name, ad.county_state_province FROM Users AS u JOIN Properties AS p ON u.user_id = p.owner_user_id JOIN Addresses AS ad ON p.property_address_id = ad.address_id;
### TaskGenerate a SQL query to answer [QUESTION]How is the feature rooftop described?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How is the feature rooftop described?[/QUESTION][SQL]SELECT Features.search_string FROM Features WHERE FeatureName = 'Rooftop'
### TaskGenerate a SQL query to answer [QUESTION]Return the description of the feature 'rooftop'.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the description of the feature 'rooftop'.[/QUESTION][SQL]SELECT Features.search_string FROM Features WHERE Features.feature_name = 'Rooftop'
### TaskGenerate a SQL query to answer [QUESTION]What are the feature name and description of the most commonly seen feature across properties?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the feature name and description of the most commonly seen feature across properties?[/QUESTION][SQL]SELECT Features.search_string FROM Features WHERE Features.feature_name = (SELECT MAX(COUNT(Property_Features.feature_id)) AS max_count FROM Property_Features GROUP BY Property_Features.feature_id);
### TaskGenerate a SQL query to answer [QUESTION]Give the feature name and description for the most common feature across all properties.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the feature name and description for the most common feature across all properties.[/QUESTION][SQL]SELECT Features.search_string FROM Features WHERE Features.feature_name = (SELECT Property_Features.feature_id FROM Property_Features GROUP BY Property_Features.feature_id ORDER BY COUNT(Property_Features.feature_id) DESC LIMIT 1);
### TaskGenerate a SQL query to answer [QUESTION]What is the minimum number of rooms in a property?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the minimum number of rooms in a property?[/QUESTION][SQL]SELECT search_string FROM User_Searches WHERE search_string LIKE '%rooms%';
### TaskGenerate a SQL query to answer [QUESTION]What is the lowest room count across all the properties?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the lowest room count across all the properties?[/QUESTION][SQL]SELECT search_string FROM User_Searches WHERE search_string = (SELECT MIN(room_count) FROM Properties);
### TaskGenerate a SQL query to answer [QUESTION]How many properties have 1 parking lot or 1 garage?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many properties have 1 parking lot or 1 garage?[/QUESTION][SQL]SELECT user_id FROM Properties WHERE (parking_lots = '1' OR garage_yn = '1') GROUP BY user_id;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of properties that have 1 parking lot or 1 garage.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of properties that have 1 parking lot or 1 garage.[/QUESTION][SQL]SELECT user_id FROM Properties WHERE (parking_lots = '1' OR garage_yn = '1') GROUP BY user_id;
### TaskGenerate a SQL query to answer [QUESTION]For users whose description contain the string 'Mother', which age categories are they in?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For users whose description contain the string 'Mother', which age categories are they in?[/QUESTION][SQL]SELECT user_id, age_category_code FROM Users WHERE LOWER(other_user_details) LIKE '%mother%' ORDER BY user_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the age categories for users whose description contains the string Mother?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the age categories for users whose description contains the string Mother?[/QUESTION][SQL]SELECT user_id, age_category_code FROM Users WHERE LOWER(other_user_details) LIKE '%mother%' ORDER BY user_id;
### TaskGenerate a SQL query to answer [QUESTION]What is the first name of the user who owns the greatest number of properties?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the first name of the user who owns the greatest number of properties?[/QUESTION][SQL]SELECT user_id, COUNT(*) AS property_count FROM Properties GROUP BY owner_user_id ORDER BY property_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Return the first name of the user who owns the most properties.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the first name of the user who owns the most properties.[/QUESTION][SQL]SELECT user_id, COUNT(*) AS property_count FROM Properties GROUP BY owner_user_id ORDER BY property_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List the average room count of the properties with gardens.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the average room count of the properties with gardens.[/QUESTION][SQL]SELECT search_string FROM User_Searches WHERE search_string LIKE '%garden%'
### TaskGenerate a SQL query to answer [QUESTION]On average, how many rooms do properties with garden features have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]On average, how many rooms do properties with garden features have?[/QUESTION][SQL]SELECT search_string FROM User_Searches WHERE search_string LIKE '%garden%' LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]In which cities are there any properties equipped with a swimming pool?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]In which cities are there any properties equipped with a swimming pool?[/QUESTION][SQL]SELECT Addresses.search_string FROM Addresses WHERE Address IN (SELECT Property_Address_ID FROM Properties p JOIN Property_Features pf ON p.Property_ID = pf.Property_ID WHERE LOWER(pf.feature_name) LIKE '%swimming%pool%');
### TaskGenerate a SQL query to answer [QUESTION]Return the cities in which there exist properties that have swimming pools.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the cities in which there exist properties that have swimming pools.[/QUESTION][SQL]SELECT Addresses.search_string FROM Addresses WHERE Address IN (SELECT p.property_address_id FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id WHERE LOWER(pf.feature_name) LIKE '%swimming pool%');
### TaskGenerate a SQL query to answer [QUESTION]Which property had the lowest price requested by the vendor? List the id and the price.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which property had the lowest price requested by the vendor? List the id and the price.[/QUESTION][SQL]SELECT Property_Features.search_seq, Properties.vendor_requested_price FROM Properties JOIN Property_Features ON Properties.property_id = Property_Features.property_id WHERE Properties.vendor_requested_price IS NOT NULL ORDER BY Properties.vendor_requested_price ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the id of the property that had the lowest requested price from the vendor, and what was that price?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the id of the property that had the lowest requested price from the vendor, and what was that price?[/QUESTION][SQL]SELECT Property_Features.search_seq, Properties.vendor_requested_price FROM Properties JOIN Property_Features ON Properties.property_id = Property_Features.property_id WHERE Properties.vendor_requested_price IS NOT NULL ORDER BY Properties.vendor_requested_price ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]On average, how many rooms does a property have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]On average, how many rooms does a property have?[/QUESTION][SQL]SELECT search_string, AVG(CAST(room_count AS INTEGER)) AS avg_rooms FROM User_Searches JOIN Properties ON CAST(User_Searches.search_string AS INTEGER) = Properties.property_id GROUP BY search_string;
### TaskGenerate a SQL query to answer [QUESTION]What is the average number of rooms in a property?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average number of rooms in a property?[/QUESTION][SQL]SELECT search_string FROM User_Searches WHERE search_string LIKE '%rooms%';
### TaskGenerate a SQL query to answer [QUESTION]How many kinds of room sizes are listed?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many kinds of room sizes are listed?[/QUESTION][SQL]SELECT Rooms.search_seq, COUNT(DISTINCT Rooms.room_size) AS distinct_room_sizes FROM Rooms GROUP BY Rooms.search_seq;
### TaskGenerate a SQL query to answer [QUESTION]Return the number of different room sizes.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the number of different room sizes.[/QUESTION][SQL]SELECT Rooms.search_seq, COUNT(DISTINCT Rooms.room_size) AS distinct_room_sizes FROM Rooms GROUP BY Rooms.search_seq ORDER BY Rooms.search_seq;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of users who have searched at least twice, and what did they search?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of users who have searched at least twice, and what did they search?[/QUESTION][SQL]SELECT user_id, COUNT(search_seq) AS number_of_searches, GROUP_CONCAT(search_string ORDER BY search_datetime SEPARATOR ', ') AS all_search_strings FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) >= 2 ORDER BY user_id;
### TaskGenerate a SQL query to answer [QUESTION]Return the ids of users who have performed two or more searches, as well as their search sequence.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the ids of users who have performed two or more searches, as well as their search sequence.[/QUESTION][SQL]SELECT user_id, COUNT(search_seq) AS number_of_searches FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) >= 2 ORDER BY user_id;
### TaskGenerate a SQL query to answer [QUESTION]When was the time of the latest search by a user?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]When was the time of the latest search by a user?[/QUESTION][SQL]SELECT user_id, MAX(search_datetime) AS last_search FROM User_Searches GROUP BY user_id;
### TaskGenerate a SQL query to answer [QUESTION]What was the time of the most recent search?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What was the time of the most recent search?[/QUESTION][SQL]SELECT user_id, MAX(search_datetime) AS latest_search FROM User_Searches GROUP BY user_id;
### TaskGenerate a SQL query to answer [QUESTION]What are all the user searches time and content? Sort the result descending by content.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all the user searches time and content? Sort the result descending by content.[/QUESTION][SQL]SELECT user_id, search_datetime, search_string FROM User_Searches ORDER BY search_string DESC;
### TaskGenerate a SQL query to answer [QUESTION]Return the search strings and corresonding time stamps for all user searches, sorted by search string descending.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the search strings and corresonding time stamps for all user searches, sorted by search string descending.[/QUESTION][SQL]SELECT user_id, search_string, search_datetime FROM User_Searches ORDER BY search_string DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the zip codes of properties which do not belong to users who own at most 2 properties?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the zip codes of properties which do not belong to users who own at most 2 properties?[/QUESTION][SQL]SELECT Addresses.search_string FROM User_Searches WHERE user_id IN (SELECT p.owner_user_id FROM Properties p GROUP BY p.owner_user_id HAVING COUNT(p.property_id) > 2);
### TaskGenerate a SQL query to answer [QUESTION]Return the zip codes for properties not belonging to users who own two or fewer properties.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the zip codes for properties not belonging to users who own two or fewer properties.[/QUESTION][SQL]SELECT Addresses.search_string FROM User_Searches WHERE user_id IN (SELECT p.owner_user_id FROM Properties p GROUP BY p.owner_user_id HAVING COUNT(p.property_id) > 2);
### TaskGenerate a SQL query to answer [QUESTION]What are the users making only one search? List both category and user id.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the users making only one search? List both category and user id.[/QUESTION][SQL]SELECT user_id, COUNT(*) AS number_of_searches FROM User_Searches GROUP BY user_id HAVING COUNT(*) = 1
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of users who have only made one search, and what are their category codes?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of users who have only made one search, and what are their category codes?[/QUESTION][SQL]SELECT user_id, age_category_code FROM Users WHERE user_id IN (SELECT user_id FROM User_SearcheS GROUP BY user_id HAVING COUNT(search_seq) = 1);
### TaskGenerate a SQL query to answer [QUESTION]What is the age range category of the user who made the first search?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the age range category of the user who made the first search?[/QUESTION][SQL]SELECT user_id, age_category_description FROM Users JOIN User_Searches ON Users.user_id = User_Searches.user_id WHERE User_Searches.search_seq = 1;
### TaskGenerate a SQL query to answer [QUESTION]Return the age category for the user who made the earliest search.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the age category for the user who made the earliest search.[/QUESTION][SQL]SELECT user_id, age_category_code FROM Users JOIN User_Searches ON Users.user_id = User_Searches.user_id ORDER BY User_Searches.search_datetime ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the login names of all senior citizen users ordered by their first names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the login names of all senior citizen users ordered by their first names.[/QUESTION][SQL]SELECT user_id, login_name FROM Users WHERE age_category_code = (SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description = 'Senior Citizen') ORDER BY first_name;
### TaskGenerate a SQL query to answer [QUESTION]What are the login names of all senior citizens, sorted by first name?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the login names of all senior citizens, sorted by first name?[/QUESTION][SQL]SELECT user_id, login_name FROM Users WHERE age_category_code = (SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description = 'Senior Citizen') ORDER BY first_name;
### TaskGenerate a SQL query to answer [QUESTION]How many searches do buyers make in total?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many searches do buyers make in total?[/QUESTION][SQL]SELECT user_id, COUNT(search_seq) AS total_searches FROM User_Searches us JOIN Users u ON us.user_id = u.user_id WHERE LOWER(u.is_buyer) = 'y' GROUP BY u.user_id ORDER BY total_searches DESC;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of searches made by buyers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of searches made by buyers.[/QUESTION][SQL]SELECT user_id, COUNT(search_seq) AS search_count FROM User_Searches us JOIN Users u ON us.user_id = u.user_id WHERE LOWER(u.is_buyer) = 'y' GROUP BY user_id ORDER BY search_count DESC;
### TaskGenerate a SQL query to answer [QUESTION]When did the user with login name ratione register?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]When did the user with login name ratione register?[/QUESTION][SQL]SELECT user_id, date_registered FROM Users WHERE LOWER(login_name) = 'ratione';
### TaskGenerate a SQL query to answer [QUESTION]What was the registration date for the user whose login name is ratione?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What was the registration date for the user whose login name is ratione?[/QUESTION][SQL]SELECT user_id FROM Users WHERE LOWER(login_name) = 'ratione';
### TaskGenerate a SQL query to answer [QUESTION]List the first name, middle name and last name, and log in name of all the seller users, whose seller value is 1.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the first name, middle name and last name, and log in name of all the seller users, whose seller value is 1.[/QUESTION][SQL]SELECT user_id, first_name, middle_name, last_name, login_name FROM Users WHERE LOWER(is_seller) = '1'
### TaskGenerate a SQL query to answer [QUESTION]What are the first, middle, last, and login names for all users who are sellers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the first, middle, last, and login names for all users who are sellers?[/QUESTION][SQL]SELECT user_id, first_name, middle_name, last_name, login_name FROM Users WHERE LOWER(is_seller) = 'y' ORDER BY user_id;
### TaskGenerate a SQL query to answer [QUESTION]Where do the Senior Citizens live? List building, street, and the city.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Where do the Senior Citizens live? List building, street, and the city.[/QUESTION][SQL]SELECT user_id, line_1_number_building || ','|| line_2_number_street || ','|| town_city AS address FROM Users JOIN Addresses ON user_address_id = address_id WHERE age_category_code = (SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description = 'Senior Citizen')
### TaskGenerate a SQL query to answer [QUESTION]What are the buildings, streets, and cities corresponding to the addresses of senior citizens?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the buildings, streets, and cities corresponding to the addresses of senior citizens?[/QUESTION][SQL]SELECT user_id, line_1_number_building, line_2_number_street, town_city FROM Users JOIN Addresses ON user_address_id = address_id WHERE age_category_code IN (SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description = 'Senior') ORDER BY usertype;
### TaskGenerate a SQL query to answer [QUESTION]How many properties are there with at least 2 features?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many properties are there with at least 2 features?[/QUESTION][SQL]SELECT Property_Features.user_id, COUNT(DISTINCT Property_Features.property_id) AS property_count FROM Property_Features GROUP BY Property_Features.user_id HAVING COUNT(DISTINCT Property_Features.feature_id) >= 2 ORDER BY property_count DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of properties with at least two features.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of properties with at least two features.[/QUESTION][SQL]SELECT Property_Features.user_id, COUNT(DISTINCT Property_Features.property_id) AS property_count FROM Property_Features GROUP BY Property_Features.user_id HAVING COUNT(DISTINCT Property_Features.feature_id) >= 2 ORDER BY property_count DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many photos does each property have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many photos does each property have?[/QUESTION][SQL]SELECT user_id, COUNT(*) AS photo_count FROM Property_Photos GROUP BY user_id;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of property photos each property has by id.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of property photos each property has by id.[/QUESTION][SQL]SELECT user_id, COUNT(*) AS photo_count FROM Property_Photos GROUP BY user_id;
### TaskGenerate a SQL query to answer [QUESTION]How many photos does each owner has of his or her properties? List user id and number of photos.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many photos does each owner has of his or her properties? List user id and number of photos.[/QUESTION][SQL]SELECT user_id, COUNT(p.photo_id) AS photo_count FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id GROUP BY u.user_id
### TaskGenerate a SQL query to answer [QUESTION]What are the user ids of property owners who have property photos, and how many do each of them have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the user ids of property owners who have property photos, and how many do each of them have?[/QUESTION][SQL]SELECT user_id, COUNT(p.photo_id) AS photo_count FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id WHERE p.property_id IN (SELECT pp.property_id FROM Property_Photos pp) GROUP BY u.user_id ORDER BY photo_count DESC;
### TaskGenerate a SQL query to answer [QUESTION]What is the total max price of the properties owned by single mothers or students?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total max price of the properties owned by single mothers or students?[/QUESTION][SQL]SELECT user_id, SUM(price_max) AS total_max_price FROM Properties p JOIN Users u ON p.owner_user_id = u.user_id WHERE user_category_code IN ('single_mother','student') GROUP BY user_id;
### TaskGenerate a SQL query to answer [QUESTION]Give the total max price corresponding to any properties owned by single mothers or students.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the total max price corresponding to any properties owned by single mothers or students.[/QUESTION][SQL]SELECT user_id, MAX(p.price_max) AS max_price FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id WHERE (u.user_category_code ='single_mother' OR u.user_category_code ='student') GROUP BY u.user_id ORDER BY max_price DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the date stamps and property names for each item of property history, ordered by date stamp?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the date stamps and property names for each item of property history, ordered by date stamp?[/QUESTION][SQL]SELECT user_id, p.property_name, us.datestamp FROM User_Property_History AS uph JOIN Users AS u ON uph.user_id = u.user_id JOIN Properties AS p ON uph.property_id = p.property_id ORDER BY uph.datestamp;
### TaskGenerate a SQL query to answer [QUESTION]Return the date stamp and property name for each property history event, sorted by date stamp.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the date stamp and property name for each property history event, sorted by date stamp.[/QUESTION][SQL]SELECT user_id, property_id, datestamp, property_name FROM User_Property_History uph JOIN Properties p ON uph.property_id = p.property_id ORDER BY datestamp;
### TaskGenerate a SQL query to answer [QUESTION]What is the description of the most common property type? List the description and code.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the description of the most common property type? List the description and code.[/QUESTION][SQL]SELECT Rooms.user_id, COUNT(*) AS total_rooms FROM Rooms JOIN Properties ON Rooms.property_id = Properties.property_id GROUP BY user_id ORDER BY total_rooms DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the most common property type, and what is its description.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the most common property type, and what is its description.[/QUESTION][SQL]SELECT Rooms.user_id, COUNT(*) AS total_rooms FROM Rooms JOIN Properties ON Rooms.property_id = Properties.property_id GROUP BY user_id ORDER BY total_rooms DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the detailed description of the age category code 'Over 60'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the detailed description of the age category code 'Over 60'?[/QUESTION][SQL]SELECT Rooms.user_id, Users.age_category_code, Ref_Age_Categories.age_category_description FROM Users JOIN Ref_Age_Categories ON Users.age_category_code = Ref_Age_Categories.age_category_code WHERE Users.age_category_code = 'Over 60'
### TaskGenerate a SQL query to answer [QUESTION]Give the category description of the age category 'Over 60'.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the category description of the age category 'Over 60'.[/QUESTION][SQL]SELECT Rooms.user_id, Users.age_category_code, Ref_Age_Categories.age_category_description FROM Users JOIN Ref_Age_Categories ON Users.age_category_code = Ref_Age_Categories.age_category_code WHERE Ref_Age_Categories.age_category_description LIKE '%Over 60%'
### TaskGenerate a SQL query to answer [QUESTION]What are the different room sizes, and how many of each are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different room sizes, and how many of each are there?[/QUESTION][SQL]SELECT Rooms.search_string, COUNT(*) AS number_of_rooms FROM Rooms GROUP BY Room_size
### TaskGenerate a SQL query to answer [QUESTION]Return the number of rooms with each different room size.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the number of rooms with each different room size.[/QUESTION][SQL]SELECT Rooms.search_seq, COUNT(Rooms.room_size) AS room_count FROM Rooms GROUP BY Rooms.room_size ORDER BY Rooms.room_size;
### TaskGenerate a SQL query to answer [QUESTION]In which country does the user with first name Robbie live?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]In which country does the user with first name Robbie live?[/QUESTION][SQL]SELECT user_id FROM Users WHERE LOWER(first_name) = 'robbie';
### TaskGenerate a SQL query to answer [QUESTION]Return the country in which the user with first name Robbie lives.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the country in which the user with first name Robbie lives.[/QUESTION][SQL]SELECT user_id FROM Users WHERE LOWER(first_name) = 'robbie';
### TaskGenerate a SQL query to answer [QUESTION]What are the first, middle and last names of users who own the property they live in?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the first, middle and last names of users who own the property they live in?[/QUESTION][SQL]SELECT user_id, first_name, middle_name, last_name FROM Users WHERE user_id IN (SELECT owner_user_id FROM Properties);
### TaskGenerate a SQL query to answer [QUESTION]Return the full names of users who live in properties that they own.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the full names of users who live in properties that they own.[/QUESTION][SQL]SELECT user_id, concat(first_name,'', middle_name,'', last_name) AS full_name FROM Users WHERE user_id IN (SELECT owner_user_id FROM Properties);
### TaskGenerate a SQL query to answer [QUESTION]List the search content of the users who do not own a single property.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the search content of the users who do not own a single property.[/QUESTION][SQL]SELECT user_id, search_string FROM User_Searches WHERE user_id NOT IN (SELECT owner_user_id FROM Properties);
### TaskGenerate a SQL query to answer [QUESTION]What search strings were entered by users who do not own any properties?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What search strings were entered by users who do not own any properties?[/QUESTION][SQL]SELECT user_id, search_string FROM User_Searches WHERE user_id NOT IN (SELECT owner_user_id FROM Properties);
### TaskGenerate a SQL query to answer [QUESTION]List the last names and ids of users who have at least 2 properties and searched at most twice.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the last names and ids of users who have at least 2 properties and searched at most twice.[/QUESTION][SQL]SELECT user_id, last_name FROM Users WHERE user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) >= 2) AND user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) <= 2);
### TaskGenerate a SQL query to answer [QUESTION]What are the last names and ids of users who have searched two or fewer times, and own two or more properties?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the last names and ids of users who have searched two or fewer times, and own two or more properties?[/QUESTION][SQL]SELECT user_id, last_name FROM Users WHERE user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) <= 2) AND user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) >= 2);
### TaskGenerate a SQL query to answer [QUESTION]How many bikes are heavier than 780 grams?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many bikes are heavier than 780 grams?[/QUESTION][SQL]SELECT bike_id FROM bike WHERE weight > 780;
### TaskGenerate a SQL query to answer [QUESTION]List the product names and weights of the bikes in ascending order of price.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the product names and weights of the bikes in ascending order of price.[/QUESTION][SQL]SELECT bike_id, product_name, weight FROM bike ORDER BY price ASC;
### TaskGenerate a SQL query to answer [QUESTION]List the heat, name, and nation for all the cyclists.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the heat, name, and nation for all the cyclists.[/QUESTION][SQL]SELECT cyclist.cyclist_id, cyclist.name, cyclist.nation FROM cyclist
### TaskGenerate a SQL query to answer [QUESTION]What are the maximum and minimum weight of all bikes?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the maximum and minimum weight of all bikes?[/QUESTION][SQL]SELECT bike_id, MAX(weight) AS max_weight, MIN(weight) AS min_weight FROM bike GROUP BY bike_id;
### TaskGenerate a SQL query to answer [QUESTION]What is the average price of the bikes made of material 'Carbon CC'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average price of the bikes made of material 'Carbon CC'?[/QUESTION][SQL]SELECT bike_id, AVG(b.price) AS average_price FROM bike b WHERE LOWER(b.material) = 'carbon cc' GROUP BY bike_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the name and result of the cyclists not from 'Russia'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the name and result of the cyclists not from 'Russia'?[/QUESTION][SQL]SELECT cyclist_id, name, result FROM cyclist WHERE nation!= 'Russia';
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct ids and product names of the bikes that are purchased after year 2015?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct ids and product names of the bikes that are purchased after year 2015?[/QUESTION][SQL]SELECT bike_id, product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id WHERE purchase_year > 2015 GROUP BY bike_id, product_name;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids and names of racing bikes that are purchased by at least 4 cyclists?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids and names of racing bikes that are purchased by at least 4 cyclists?[/QUESTION][SQL]SELECT bike_id, product_name FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes GROUP BY bike_id HAVING COUNT(cyclist_id) >= 4);
### TaskGenerate a SQL query to answer [QUESTION]What are the id and name of the cyclist who owns the most bikes?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the id and name of the cyclist who owns the most bikes?[/QUESTION][SQL]SELECT cyclist_id, COUNT(bike_id) AS bike_count FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY bike_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct product names of bikes owned by cyclists from 'Russia' or cyclists from 'Great Britain'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct product names of bikes owned by cyclists from 'Russia' or cyclists from 'Great Britain'?[/QUESTION][SQL]SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE nation = 'Russia' OR nation = 'Great Britain') GROUP BY bike_id;
### TaskGenerate a SQL query to answer [QUESTION]How many different levels of heat are there for the cyclists?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different levels of heat are there for the cyclists?[/QUESTION][SQL]SELECT cyclist.cyclist_id, COUNT(DISTINCT cyclist.heat) AS number_of_heat_levels FROM cyclist GROUP BY cyclist.cyclist_id ORDER BY number_of_heat_levels DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many cyclists did not purchase any bike after year 2015?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many cyclists did not purchase any bike after year 2015?[/QUESTION][SQL]SELECT cyclist_id FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year > 2015)
### TaskGenerate a SQL query to answer [QUESTION]What are the names of distinct racing bikes that are purchased by the cyclists with better results than '4:21.558'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of distinct racing bikes that are purchased by the cyclists with better results than '4:21.558'?[/QUESTION][SQL]SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE result < 241.558) ORDER BY bike_id;
### TaskGenerate a SQL query to answer [QUESTION]List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Antonio Tauler'.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Antonio Tauler'.[/QUESTION][SQL]SELECT bike_id, product_name, price FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id WHERE (SELECT id FROM cyclist WHERE name ilike '%Bradley%Wiggins%') IN (SELECT cyclist_id FROM cyclists_own_bikes) AND (SELECT id FROM cyclist WHERE name ilike '%Antonio%Tauler%') IN (SELECT cyclist_id FROM cyclists_own_bikes);
### TaskGenerate a SQL query to answer [QUESTION]Show the name, nation and result for the cyclists who did not purchase any racing bike.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the name, nation and result for the cyclists who did not purchase any racing bike.[/QUESTION][SQL]SELECT cyclist_id, name, nation, result FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE bike_id IN (SELECT id FROM bike WHERE product_name = 'racing bike'))
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the bikes that have substring 'fiber' in their material?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the bikes that have substring 'fiber' in their material?[/QUESTION][SQL]SELECT bike_id, product_name FROM bike WHERE material ilike '%fiber%' ORDER BY bike_id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many bikes does each cyclist own? Order by cyclist id.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many bikes does each cyclist own? Order by cyclist id.[/QUESTION][SQL]SELECT cyclist_id, COUNT(bike_id) AS bike_count FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY cyclist_id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the most expensive cake and its flavor?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the most expensive cake and its flavor?[/QUESTION][SQL]SELECT goods.CustomerId, MAX(goods.Price) AS max_price, goods.Flavor FROM goods JOIN items ON goods.Id = items.Item WHERE goods.Food = 'cake' GROUP BY goods.CustomerId, goods.Flavor ORDER BY max_price DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the id and flavor of the most expensive cake.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the id and flavor of the most expensive cake.[/QUESTION][SQL]SELECT goods.ReceiptNumber, goods.Flavor FROM goods JOIN items ON goods.Id = items.Item WHERE goods.Food = 'cake' ORDER BY goods.Price DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the cheapest cookie and its flavor?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the cheapest cookie and its flavor?[/QUESTION][SQL]SELECT goods.CustomerId, goods.Flavor, goods.Price FROM goods JOIN items ON goods.Id = items.Item WHERE goods.Food = 'cookie' ORDER BY goods.Price ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the id and flavor of the cheapest cookie?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the id and flavor of the cheapest cookie?[/QUESTION][SQL]SELECT goods.ReceiptNumber, goods.Flavor FROM goods JOIN items ON goods.Id = items.Item WHERE goods.Price = (SELECT MIN(good_price) FROM goods);
### TaskGenerate a SQL query to answer [QUESTION]Find the ids of goods that have apple flavor.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the ids of goods that have apple flavor.[/QUESTION][SQL]SELECT goods.ReceiptNumber FROM items WHERE items.Item IN (SELECT id FROM goods WHERE goods.Flavor = 'apple')
### TaskGenerate a SQL query to answer [QUESTION]What are the ids with apple flavor?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids with apple flavor?[/QUESTION][SQL]SELECT goods.ReceiptNumber FROM items WHERE items.Item = 'apple'
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of goods that cost less than 3 dollars?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of goods that cost less than 3 dollars?[/QUESTION][SQL]SELECT goods.ReceiptNumber FROM items WHERE items.Item IN (SELECT id FROM goods WHERE price < 3);
### TaskGenerate a SQL query to answer [QUESTION]Give the ids of goods that cost less than 3 dollars.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the ids of goods that cost less than 3 dollars.[/QUESTION][SQL]SELECT goods.ReceiptNumber FROM receipts WHERE receipts.ReceiptNumber IN (SELECT items.Item FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Price < 3);
### TaskGenerate a SQL query to answer [QUESTION]List the distinct ids of all customers who bought a cake with lemon flavor?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the distinct ids of all customers who bought a cake with lemon flavor?[/QUESTION][SQL]SELECT receipts.CustomerId FROM receipts WHERE EXISTS (SELECT 1 FROM items i JOIN goods g ON i.Item = g.Id WHERE i.Receipt = receipts.ReceiptNumber AND g.Flavor ilike '%lemon%' AND g.Food = 'cake') GROUP BY receipts.CustomerId;
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct ids of customers who bought lemon flavored cake?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct ids of customers who bought lemon flavored cake?[/QUESTION][SQL]SELECT receipts.CustomerId FROM receipts WHERE receipts.CustomerId IN (SELECT items.Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Flavor = 'lemon') GROUP BY receipts.CustomerId;
### TaskGenerate a SQL query to answer [QUESTION]For each type of food, tell me how many customers have ever bought it.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each type of food, tell me how many customers have ever bought it.[/QUESTION][SQL]SELECT goods.CustomerId, COUNT(DISTINCT goodss.ReceiptNumber) AS number_of_receipts FROM items JOIN goods ON items.Item = goods.Id GROUP BY goodss.CustomerId ORDER BY number_of_receipts DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many customers have bought each food?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many customers have bought each food?[/QUESTION][SQL]SELECT goods.ReceiptNumber, COUNT(DISTINCT receipts.CustomerId) AS customer_count FROM items JOIN goods ON items.Item = goods.Id JOIN receipts ON items.Receipt = receipts.ReceiptNumber GROUP BY good.RECEIPTNUMBER ORDER BY customer_count DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the id of customers who shopped at the bakery at least 15 times.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the id of customers who shopped at the bakery at least 15 times.[/QUESTION][SQL]SELECT customers.CustomerId FROM receipts WHERE CustomerId IN (SELECT ReceiptNumber FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'bakery') GROUP BY CustomerId HAVING COUNT(ReceiptNumber) >= 15;
### TaskGenerate a SQL query to answer [QUESTION]What are the customer ids of customers who have at least 15 receipts?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the customer ids of customers who have at least 15 receipts?[/QUESTION][SQL]SELECT receipts.CustomerId FROM receipts WHERE receipts.CustomerId IN (SELECT receipts.CustomerId FROM receipts GROUP BY receipts.CustomerId HAVING COUNT(receipts.ReceiptNumber) >= 15);
### TaskGenerate a SQL query to answer [QUESTION]What is the last name of the customers who shopped at the bakery more than 10 times?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the last name of the customers who shopped at the bakery more than 10 times?[/QUESTION][SQL]SELECT customers.CustomerId, customers.LastName FROM receipts JOIN customers ON receipts.CustomerId = customers.Id WHERE receipts.ReceiptNumber IN (SELECT receipt FROM items GROUP BY receipt HAVING COUNT(*) > 10) ORDER BY customers.LastName NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Give the last names of customers who have been to the bakery more than 10 times?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the last names of customers who have been to the bakery more than 10 times?[/QUESTION][SQL]SELECT customers.CustomerId, customers.LastName FROM receipts JOIN customers ON receipts.CustomerId = customers.Id GROUP BY customers.CustomerId, customers.LastName HAVING COUNT(receipts.ReceiptNumber) > 10 ORDER BY customers.LastName NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many types of Cake does this bakery sell?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many types of Cake does this bakery sell?[/QUESTION][SQL]SELECT goods.CustomerId FROM items WHERE item = 'cake' GROUP BY good.Custome
### TaskGenerate a SQL query to answer [QUESTION]Count the number of types of cake this bakery sells.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of types of cake this bakery sells.[/QUESTION][SQL]SELECT goods.CustomerId FROM items WHERE item = 'cake'
### TaskGenerate a SQL query to answer [QUESTION]List all the flavors of Croissant available in this bakery.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all the flavors of Croissant available in this bakery.[/QUESTION][SQL]SELECT goods.CustomerId FROM goods WHERE goods.Food = 'Croissant'
### TaskGenerate a SQL query to answer [QUESTION]What are all the flavors of croissant?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all the flavors of croissant?[/QUESTION][SQL]SELECT goods.CustomerId FROM goods WHERE goods.Food = 'Croissant'
### TaskGenerate a SQL query to answer [QUESTION]Give me a list of all the distinct items bought by the customer number 15.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give me a list of all the distinct items bought by the customer number 15.[/QUESTION][SQL]SELECT items.ReceiptNumber, items.Item FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt WHERE receipts.CustomerId = 15 GROUP BY receipts.ReceiptNumber, items.Item;
### TaskGenerate a SQL query to answer [QUESTION]What are all the distinct items bought by customer 15?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all the distinct items bought by customer 15?[/QUESTION][SQL]SELECT items.ReceiptNumber, items.Item FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt WHERE receipts.CustomerId = 15 GROUP BY receipts.ReceiptNumber, items.Item;
### TaskGenerate a SQL query to answer [QUESTION]For each type of food, what are the average, maximum and minimum price?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each type of food, what are the average, maximum and minimum price?[/QUESTION][SQL]SELECT goods.ReceiptNumber, AVG(goods.Price) AS average_price, MAX(goods.Price) AS max_price, MIN(goods.Price) AS min_price FROM items JOIN goods ON items.Item = goods.Id GROUP BY ReceiptNumber;
### TaskGenerate a SQL query to answer [QUESTION]What are the average, minimum and maximum prices for each food?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the average, minimum and maximum prices for each food?[/QUESTION][SQL]SELECT goods.ReceiptNumber, AVG(goods.Price) AS average_price, MIN(goods.Price) AS min_price, MAX(goods.Price) AS max_price FROM items JOIN goods ON items.Item = goods.Id GROUP BY ReceiptNumber;
### TaskGenerate a SQL query to answer [QUESTION]Find the receipt numbers where both Cake and Cookie were bought.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the receipt numbers where both Cake and Cookie were bought.[/QUESTION][SQL]SELECT receipts.ReceiptNumber FROM receipts WHERE EXISTS (SELECT 1 FROM items i JOIN goods g ON i.Item = g.Id WHERE i.Receipt = receipts.ReceiptNumber AND g.Food = 'Cake') AND EXISTS (SELECT 1 FROM items i JOIN goods g ON i.Item = g.Id WHERE i.Receipt = receipts.ReceiptNumber AND g.Food = 'Cookie');
### TaskGenerate a SQL query to answer [QUESTION]What are the receipt numbers for instances where both cakes and cookies were purchased?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the receipt numbers for instances where both cakes and cookies were purchased?[/QUESTION][SQL]SELECT receipts.ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT items.Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'cake' AND goods.Food = 'cookies') GROUP BY receipts.ReceiptNumber;
### TaskGenerate a SQL query to answer [QUESTION]Find all the receipt numbers in which customer with last name LOGAN purchased Croissant.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all the receipt numbers in which customer with last name LOGAN purchased Croissant.[/QUESTION][SQL]SELECT receipts.ReceiptNumber FROM receipts WHERE receipts.CustomerId IN (SELECT id FROM customers WHERE LOWER(lastname) = 'logan') AND items.Item = 'Croissant';
### TaskGenerate a SQL query to answer [QUESTION]What are the receipt numbers for a customer with the last name Logan who purchased a croissant?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the receipt numbers for a customer with the last name Logan who purchased a croissant?[/QUESTION][SQL]SELECT receipts.ReceiptNumber FROM receipts WHERE receipts.CustomerId IN (SELECT c.Id FROM customers c WHERE LOWER(c.LastName) = 'logan') AND items.Item = 'croissant';
### TaskGenerate a SQL query to answer [QUESTION]What is the receipt number and date of the receipt in which the most expensive item was bought?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the receipt number and date of the receipt in which the most expensive item was bought?[/QUESTION][SQL]SELECT receipts.ReceiptNumber, receipts.Date FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt WHERE items.Item IN (SELECT MAX(good.Price) AS max_price_item FROM goods good GROUP BY good.Id);
### TaskGenerate a SQL query to answer [QUESTION]What is the receipt number and date corresponding to the receipt for which the most expensive item was purchased?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the receipt number and date corresponding to the receipt for which the most expensive item was purchased?[/QUESTION][SQL]SELECT receipts.ReceiptNumber, MAX(goods.Price) AS max_price FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id GROUP BY receipts.ReceiptNumber ORDER BY max_price DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the item that was bought the least number of times?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the item that was bought the least number of times?[/QUESTION][SQL]SELECT items.ReceiptNumber, COUNT(*) AS quantity FROM items GROUP BY ReceiptNumber ORDER BY quantity ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which item was bought the fewest times?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which item was bought the fewest times?[/QUESTION][SQL]SELECT items.ReceiptNumber, COUNT(*) AS quantity FROM items GROUP BY ReceiptNumber ORDER BY quantity ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How many goods are available for each food type?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many goods are available for each food type?[/QUESTION][SQL]SELECT goods.ReceiptNumber, COUNT(*) AS number_of_goods FROM items JOIN goods ON items.Item = goods.Id GROUP BY goods.Food ORDER BY number_of_goods DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of goods for each food type.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of goods for each food type.[/QUESTION][SQL]SELECT goods.CustomerId, COUNT(goods.Id) AS total_goods FROM goods JOIN items ON goods.Id = items.Item GROUP BY goods.CustomerId ORDER BY total_goods DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the average price for each food type?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average price for each food type?[/QUESTION][SQL]SELECT goods.ReceiptNumber, AVG(goods.Price) AS Average_Price FROM items JOIN goods ON items.Item = goods.Id GROUP BY goods.Food;
### TaskGenerate a SQL query to answer [QUESTION]Give the average price for each food type.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the average price for each food type.[/QUESTION][SQL]SELECT goods.ReceiptNumber, AVG(goods.Price) AS Average_Price FROM items JOIN goods ON items.Item = goods.Id GROUP BY ReceiptNumber ORDER BY ReceiptNumber NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are ids of the goods that have Apricot flavor and are cheaper than 5 dollars?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are ids of the goods that have Apricot flavor and are cheaper than 5 dollars?[/QUESTION][SQL]SELECT goods.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the ids for goods that have Apricot flavor and have a price lower than 5 dollars.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the ids for goods that have Apricot flavor and have a price lower than 5 dollars.[/QUESTION][SQL]SELECT goods.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 1;
### TaskGenerate a SQL query to answer [QUESTION]Find flavor of cakes that cost more than 10 dollars.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find flavor of cakes that cost more than 10 dollars.[/QUESTION][SQL]SELECT goods.CustomerId FROM goods WHERE goods.Price > 10 AND goods.Food = 'cake'
### TaskGenerate a SQL query to answer [QUESTION]What are the flavors of cakes that cost more than 10 dollars?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the flavors of cakes that cost more than 10 dollars?[/QUESTION][SQL]SELECT goods.CustomerId FROM goods WHERE goods.Flavor = 'cake' AND goods.Price > 10;
### TaskGenerate a SQL query to answer [QUESTION]Give me the distinct id and price for all goods whose price is below the average of all goods?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give me the distinct id and price for all goods whose price is below the average of all goods?[/QUESTION][SQL]SELECT goods.ReceiptNumber, SUM(goods.Price) AS total_price FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt GROUP BY receipts.ReceiptNumber;
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct ids and prices for goods that cost less than the average good?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct ids and prices for goods that cost less than the average good?[/QUESTION][SQL]SELECT goods.ReceiptNumber, goods.Item, goods.Price FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Price < (SELECT AVG(good_price) FROM goods);
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct ids of all goods that are cheaper than some goods of type Tart?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct ids of all goods that are cheaper than some goods of type Tart?[/QUESTION][SQL]SELECT goods.ReceiptNumber FROM receipts WHERE EXISTS (SELECT 1 FROM items i JOIN goods ON i.Item = goods.Id WHERE goods.Flavor = 'Tart' AND goods.Price < 5) ORDER BY goods.ReceiptNumber NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Give the distinct ids for goods that cost less than any Tart.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the distinct ids for goods that cost less than any Tart.[/QUESTION][SQL]SELECT goods.ReceiptNumber FROM items WHERE items.Item IN (SELECT id FROM goods WHERE price < ANY (SELECT price FROM goods WHERE food = 'Tart')) GROUP BY items.ReceiptNumber;
### TaskGenerate a SQL query to answer [QUESTION]List distinct receipt numbers for which someone bought a good that costs more than 13 dollars.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List distinct receipt numbers for which someone bought a good that costs more than 13 dollars.[/QUESTION][SQL]SELECT receipts.ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT items.Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Price > 13.00 GROUP BY items.Receipt)
### TaskGenerate a SQL query to answer [QUESTION]What distinct receipt numbers correspond to someone who bought a good that costs more than 13 dollars?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What distinct receipt numbers correspond to someone who bought a good that costs more than 13 dollars?[/QUESTION][SQL]SELECT items.ReceiptNumber FROM items WHERE items.Item IN (SELECT id FROM goods WHERE price > 13.00) GROUP BY items.ReceiptNumber;
### TaskGenerate a SQL query to answer [QUESTION]On which date did some customer buy a good that costs more than 15 dollars?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]On which date did some customer buy a good that costs more than 15 dollars?[/QUESTION][SQL]SELECT receipts.Date FROM receipts WHERE receipts.CustomerId IN (SELECT items.Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Price > 15.00);
### TaskGenerate a SQL query to answer [QUESTION]Which date corresponds to when a customer purchased a good costing over 15 dollars?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which date corresponds to when a customer purchased a good costing over 15 dollars?[/QUESTION][SQL]SELECT receipts.Date FROM receipts WHERE receipts.CustomerId IN (SELECT items.Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Price > 15.00);
### TaskGenerate a SQL query to answer [QUESTION]Give me the list of ids of all goods whose id has "APP".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give me the list of ids of all goods whose id has "APP".[/QUESTION][SQL]SELECT goods.ReceiptNumber FROM items WHERE item LIKE '%APP%'
### TaskGenerate a SQL query to answer [QUESTION]What are all the ids of goods with an id which contains "APP"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all the ids of goods with an id which contains "APP"?[/QUESTION][SQL]SELECT goods.ReceiptNumber FROM items WHERE item LIKE '%app%'
### TaskGenerate a SQL query to answer [QUESTION]Which good has "70" in its id? And what is its price?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which good has "70" in its id? And what is its price?[/QUESTION][SQL]SELECT goods.ReceiptNumber, goods.Price FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Id LIKE '%70%' ORDER BY receipts.ReceiptNumber NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the id and price for the good with "70" in its id?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the id and price for the good with "70" in its id?[/QUESTION][SQL]SELECT goods.ReceiptNumber, goods.Price FROM items JOIN goods ON items.Item = goods.Id WHERE goods. ReceiptNumber LIKE '%70%' ORDER BY goods. ReceiptNumber NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the last names of all customers in an alphabetical order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the last names of all customers in an alphabetical order.[/QUESTION][SQL]SELECT customers.CustomerId, customers.LastName FROM customers ORDER BY customers.LastName ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the last names of the customers in alphabetical order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the last names of the customers in alphabetical order?[/QUESTION][SQL]SELECT customers.CustomerId, customers.LastName FROM customers ORDER BY customers.LastName ASC;
### TaskGenerate a SQL query to answer [QUESTION]Return the ordered list of all good ids.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the ordered list of all good ids.[/QUESTION][SQL]SELECT goods.ReceiptNumber FROM receipts;
### TaskGenerate a SQL query to answer [QUESTION]Order the distinct good ids.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Order the distinct good ids.[/QUESTION][SQL]SELECT goods.ReceiptNumber FROM items WHERE item IN (SELECT DISTINCT id FROM goods ORDER BY id NULLS LAST);
### TaskGenerate a SQL query to answer [QUESTION]Find all receipts in which either apple flavor pie was bought or customer id 12 shopped.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all receipts in which either apple flavor pie was bought or customer id 12 shopped.[/QUESTION][SQL]SELECT receipts.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 12 UNION SELECT items.Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE LOWER(goods.Flavor) LIKE '%apple%' AND LOWER(goods.Food) LIKE '%pie%';
### TaskGenerate a SQL query to answer [QUESTION]What are the receipt numbers for which either an apple flavor pie was purchased or the customer with id 12 shopped?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the receipt numbers for which either an apple flavor pie was purchased or the customer with id 12 shopped?[/QUESTION][SQL]SELECT receipts.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 12 UNION SELECT items.Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE LOWER(goods.Flavor) LIKE '%apple%' AND LOWER(goods.Food) LIKE '%pie%';
### TaskGenerate a SQL query to answer [QUESTION]Find all receipts which has the latest date. Also tell me that date.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all receipts which has the latest date. Also tell me that date.[/QUESTION][SQL]SELECT receipts.ReceiptNumber, MAX(reciepts.Date) AS LatestDate FROM receipts reciepts GROUP BY ReceiptNumber ORDER BY LatestDate DESC;
### TaskGenerate a SQL query to answer [QUESTION]What is the receipt number with the latest date, and what is that date?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the receipt number with the latest date, and what is that date?[/QUESTION][SQL]SELECT receipts.ReceiptNumber, MAX(reciepts.Date) AS LatestDate FROM receipts reciepts GROUP BY ReceiptNumber ORDER BY LatestDate DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find all receipts which either has the earliest date or has a good with price above 10.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all receipts which either has the earliest date or has a good with price above 10.[/QUESTION][SQL]SELECT receipts.ReceiptNumber FROM receipts WHERE receipts.Date = (SELECT MIN(receipts.Date) FROM receipts) UNION SELECT items.Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Price > 10;
### TaskGenerate a SQL query to answer [QUESTION]What are all the receipt numbers that have a good with a price above 10 or have the earliest date?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all the receipt numbers that have a good with a price above 10 or have the earliest date?[/QUESTION][SQL]SELECT receipts.ReceiptNumber FROM receipts WHERE receipts.Date = (SELECT MIN(Date) FROM receipts);
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of Cookie and Cake that cost between 3 and 7 dollars.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of Cookie and Cake that cost between 3 and 7 dollars.[/QUESTION][SQL]SELECT goods.ReceiptNumber FROM goods WHERE goods.Price BETWEEN 3 AND 7;
### TaskGenerate a SQL query to answer [QUESTION]Give the ids of Cookies or Cakes that cost between 3 and 7 dollars.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the ids of Cookies or Cakes that cost between 3 and 7 dollars.[/QUESTION][SQL]SELECT goods.ReceiptNumber FROM goods WHERE goods.Price BETWEEN 3 AND 7;
### TaskGenerate a SQL query to answer [QUESTION]Find the first name and last name of a customer who visited on the earliest date.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the first name and last name of a customer who visited on the earliest date.[/QUESTION][SQL]SELECT customers.CustomerId, customers.FirstName, customers.LastName FROM receipts JOIN customers ON receipts.CustomerId = customers.Id ORDER BY receipts.Date ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the full name of the customer who visited on the earliest date?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the full name of the customer who visited on the earliest date?[/QUESTION][SQL]SELECT customers.CustomerId, customers.FirstName, customers.LastName FROM receipts JOIN customers ON receipts.CustomerId = customers.Id ORDER BY receipts.Date ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is average price of goods whose flavor is blackberry or blueberry?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is average price of goods whose flavor is blackberry or blueberry?[/QUESTION][SQL]SELECT goods.CustomerId, AVG(goods.Price) AS average_price FROM goods JOIN items ON goods.Id = items.Item WHERE LOWER(goods.Flavor) IN ('blackberry', 'blueberry') GROUP BY goods.CustomerId;
### TaskGenerate a SQL query to answer [QUESTION]What are the average prices of goods with blackberry or blueberry flavor?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the average prices of goods with blackberry or blueberry flavor?[/QUESTION][SQL]SELECT goods.ReceiptNumber, AVG(goods.Price) AS average_price FROM goods JOIN items ON goods.Id = items.Item WHERE LOWER(goods.Flavor) IN ('blackberry', 'blueberry') GROUP BY goods.ReceiptNumber;
### TaskGenerate a SQL query to answer [QUESTION]Return the cheapest price for goods with cheese flavor.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the cheapest price for goods with cheese flavor.[/QUESTION][SQL]SELECT goods.CustomerId, MIN(goods.Price) AS min_price FROM goods JOIN items ON goods.Id = items.Item WHERE LOWER(goods.Flavor) LIKE '%cheese%' GROUP BY good.CustomerId;
### TaskGenerate a SQL query to answer [QUESTION]What is the cheapest good with cheese flavor?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the cheapest good with cheese flavor?[/QUESTION][SQL]SELECT goods.ReceiptNumber FROM items WHERE items.Item IN (SELECT id FROM goods WHERE goods.Flavor = 'cheese') ORDER BY items.ReceiptNumber ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are highest, lowest, and average prices of goods, grouped and ordered by flavor?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are highest, lowest, and average prices of goods, grouped and ordered by flavor?[/QUESTION][SQL]SELECT goods.ReceiptNumber, MAX(goods.Price), MIN(goods.Price), AVG(goods.Price) FROM items JOIN goods ON items.Item = goods.Id GROUP BY goods.Flavor ORDER BY goods.Flavor;
### TaskGenerate a SQL query to answer [QUESTION]What are the maximum, minimum, and average prices of goods of each flavor, ordered by flavor?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the maximum, minimum, and average prices of goods of each flavor, ordered by flavor?[/QUESTION][SQL]SELECT goods.ReceiptNumber, MAX(goods.Price), MIN(goods.Price), AVG(goods.Price) FROM items JOIN goods ON items.Item = goods.Id GROUP BY goods.Flavor ORDER BY goods.Flavor;
### TaskGenerate a SQL query to answer [QUESTION]Return the lowest and highest prices of goods grouped and ordered by food type.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the lowest and highest prices of goods grouped and ordered by food type.[/QUESTION][SQL]SELECT goods.CustomerId, MIN(goods.Price) AS min_price, MAX(goods.Price) AS max_price FROM goods JOIN items ON goods.Id = items.Item GROUP BY goods.CustomerId ORDER BY goods.CustomerId NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the minimum and maximum prices of food goods, ordered by food?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the minimum and maximum prices of food goods, ordered by food?[/QUESTION][SQL]SELECT goods.CustomerId, MIN(goods.Price) AS min_price, MAX(goods.Price) AS max_price FROM goods JOIN items ON goods.Id = items.Item GROUP BY good.Food ORDER BY good.Food;
### TaskGenerate a SQL query to answer [QUESTION]Find the top three dates with the most receipts.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the top three dates with the most receipts.[/QUESTION][SQL]SELECT receipts.Date, COUNT(reciepts.ReceiptNumber) AS number_of_receipts FROM receipts GROUP BY receipts.Date ORDER BY number_of_receipts DESC LIMIT 3;
### TaskGenerate a SQL query to answer [QUESTION]What are the three dates for which the most receipts were given?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the three dates for which the most receipts were given?[/QUESTION][SQL]SELECT receipts.Date, COUNT(*) AS number_of_receipts FROM receipts GROUP BY receipts.Date ORDER BY number_of_receipts DESC LIMIT 3;
### TaskGenerate a SQL query to answer [QUESTION]Which customer shopped most often? How many times?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which customer shopped most often? How many times?[/QUESTION][SQL]SELECT customers.CustomerId, COUNT(receipts.ReceiptNumber) AS NumberOfReceipts FROM receipts JOIN customers ON receipts.CustomerId = customers.Id GROUP BY customers.CustomerId ORDER BY NumberOfReceipts DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the customer id of the customer that made the most purchases, as well as the number of purchases made.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the customer id of the customer that made the most purchases, as well as the number of purchases made.[/QUESTION][SQL]SELECT receipts.CustomerId, COUNT(items.Receipt) AS purchase_count FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt GROUP BY receipts.CustomerId ORDER BY purchase_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]For each date, return how many distinct customers visited on that day.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each date, return how many distinct customers visited on that day.[/QUESTION][SQL]SELECT receipts.Date, COUNT(DISTINCT reiptions.CustomerId) AS unique_customers FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt GROUP BY receipts.Date ORDER BY receipts.Date NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many cusomters visited on each date?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many cusomters visited on each date?[/QUESTION][SQL]SELECT receipts.Date, COUNT(DISTINCT reiptions.CustomerId) AS number_of_customers FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt GROUP BY receipts.Date ORDER BY receipts.Date NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Give me the first name and last name of customers who have bought apple flavor Tart.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give me the first name and last name of customers who have bought apple flavor Tart.[/QUESTION][SQL]SELECT customers.CustomerId, customers.FirstName, customers.LastName FROM customers JOIN receipts ON customers.Id = receipts.CustomerId JOIN items ON receipts.ReceiptNumber = items.Receipt WHERE items.Item = 'Tart' AND items.Flavor = 'Apple';
### TaskGenerate a SQL query to answer [QUESTION]What are the full names of customers who bought apple flavored Tarts?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the full names of customers who bought apple flavored Tarts?[/QUESTION][SQL]SELECT customers.CustomerId, customers.FirstName, customers.LastName FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt WHERE items.Item = 'Tart' AND items.Flavor = 'Apple';
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of Cookies whose price is lower than any Croissant?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of Cookies whose price is lower than any Croissant?[/QUESTION][SQL]SELECT goods.ReceiptNumber FROM items WHERE item = 'Cookie' AND ordinal IN (SELECT receipt, MAX(ordinal) AS max_ordinal FROM items WHERE item = 'Croissant' GROUP BY receipt);
### TaskGenerate a SQL query to answer [QUESTION]Give the ids of cookes that are cheaper than any croissant.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the ids of cookes that are cheaper than any croissant.[/QUESTION][SQL]SELECT goods.ReceiptNumber FROM items WHERE item = 'cooke' AND price < (SELECT MIN(price) FROM goods WHERE food = 'croissant');
### TaskGenerate a SQL query to answer [QUESTION]Give me the ids of Cakes whose price is at least as much as the average price of Tart?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give me the ids of Cakes whose price is at least as much as the average price of Tart?[/QUESTION][SQL]SELECT goods.ReceiptNumber FROM items WHERE items.Item = 'Tart' GROUP BY items.ReceiptNumber HAVING AVG(goods.Price) <= 0.5;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of cakes that are at least as expensive as the average Tart?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of cakes that are at least as expensive as the average Tart?[/QUESTION][SQL]SELECT goods.ReceiptNumber FROM goods WHERE goods.Food = 'Tart' GROUP BY goods.ReceiptNumber HAVING AVG(goods.Price) <= ALL (SELECT price FROM goods WHERE goods.Food = 'Cake')
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of goods whose price is above twice the average price of all goods?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of goods whose price is above twice the average price of all goods?[/QUESTION][SQL]SELECT goods.ReceiptNumber FROM receipts WHERE receipts.ReceiptNumber IN (SELECT items.Item FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Price > 2 * (SELECT AVG(good_price) FROM goods)) ORDER BY receipts.ReceiptNumber NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Give the ids of goods that are more than twice as expensive as the average good.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the ids of goods that are more than twice as expensive as the average good.[/QUESTION][SQL]SELECT goods.ReceiptNumber FROM receipts WHERE receipts.ReceiptNumber IN (SELECT items.Item FROM items JOIN goods ON items.Item = goods.Id GROUP BY items.Item HAVING SUM(goods.Price) > 2 * AVG(goods.Price))
### TaskGenerate a SQL query to answer [QUESTION]List the id, flavor and type of food of goods ordered by price.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the id, flavor and type of food of goods ordered by price.[/QUESTION][SQL]SELECT goods.ReceiptNumber, items.Item, goods.Flavor, goods.Food FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt ORDER BY receipts.ReceiptNumber;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids, flavors, and food types of goods, ordered by price?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids, flavors, and food types of goods, ordered by price?[/QUESTION][SQL]SELECT goods.ReceiptNumber, goods.Item, goods.Flavor, goods.Food, goods.Price FROM items JOIN goods ON items.Item = goods.Id ORDER BY goods.Price NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return a list of the id and flavor for Cakes ordered by flavor.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return a list of the id and flavor for Cakes ordered by flavor.[/QUESTION][SQL]SELECT goods.ReceiptNumber, goods.Flavor FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'Cake' ORDER BY goods.Flavor;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids and flavors of cakes, ordered by flavor?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids and flavors of cakes, ordered by flavor?[/QUESTION][SQL]SELECT goods.ReceiptNumber, goods.Flavor FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'cake' ORDER BY goods.Flavor;
### TaskGenerate a SQL query to answer [QUESTION]Find all the items that have chocolate flavor but were not bought more than 10 times.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all the items that have chocolate flavor but were not bought more than 10 times.[/QUESTION][SQL]SELECT items.ReceiptNumber, COUNT(*) AS total_items FROM items JOIN goods ON items.Item = goods.Id WHERE LOWER(goods.Flavor) = 'chocolate' GROUP BY items.ReceiptNumber HAVING COUNT(*) <= 10 ORDER BY total_items DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the items with chocolate flavor that were purchased at most 10 times.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the items with chocolate flavor that were purchased at most 10 times.[/QUESTION][SQL]SELECT items.ReceiptNumber, COUNT(*) AS purchase_count FROM items JOIN goods ON items.Item = goods.Id WHERE LOWER(goods.Flavor) = 'chocolate' GROUP BY items.ReceiptNumber ORDER BY purchase_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the flavors available for Cake but not for Tart?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the flavors available for Cake but not for Tart?[/QUESTION][SQL]SELECT goods.CustomerId FROM goods WHERE good.Food = 'Cake' AND good.Flavor NOT IN (SELECT good.Flavor FROM goods WHERE good.Food = 'Tart')
### TaskGenerate a SQL query to answer [QUESTION]Give the flavors of Cakes that are not available for Tart.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the flavors of Cakes that are not available for Tart.[/QUESTION][SQL]SELECT goods.CustomerId FROM goods WHERE good.Food = 'Cake' AND good.Flavor NOT IN (SELECT good.Flavor FROM goods WHERE good.Food = 'Tart')
### TaskGenerate a SQL query to answer [QUESTION]What is the three most popular goods in this bakery?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the three most popular goods in this bakery?[/QUESTION][SQL]SELECT goods.ReceiptNumber, COUNT(items.Item) AS item_count FROM items JOIN goods ON items.Item = goods.Id GROUP BY goods.ReceiptNumber ORDER BY item_count DESC LIMIT 3;
### TaskGenerate a SQL query to answer [QUESTION]Give the three most purchased items at this bakery.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the three most purchased items at this bakery.[/QUESTION][SQL]SELECT items.ReceiptNumber, COUNT(*) AS total_items FROM items JOIN receipts ON items.Receipt = receipts.ReceiptNumber GROUP BY ReceiptNumber ORDER BY total_items DESC LIMIT 3
### TaskGenerate a SQL query to answer [QUESTION]Find the ids of customers who have spent more than 150 dollars in total.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the ids of customers who have spent more than 150 dollars in total.[/QUESTION][SQL]SELECT customers.CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT receipt FROM items GROUP BY receipt HAVING SUM(g.price * i.ordinal) > 150)
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of customers who have spent over 150 dollars in total?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of customers who have spent over 150 dollars in total?[/QUESTION][SQL]SELECT receipts.CustomerId FROM receipts WHERE SUM(goods.Price) > 150 GROUP BY receipts.CustomerId;
### TaskGenerate a SQL query to answer [QUESTION]Find the ids of customers whose average spending for each good is above 5.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the ids of customers whose average spending for each good is above 5.[/QUESTION][SQL]SELECT customers.CustomerId FROM receipts WHERE receipts.CustomerId IN (SELECT items.Receipt FROM items GROUP BY items.Receipt HAVING AVG(goods.Price) > 5);
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of customers who spend more than 5 on average for each good?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of customers who spend more than 5 on average for each good?[/QUESTION][SQL]SELECT customers.CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT receipt FROM items GROUP BY receipt HAVING AVG(CASE WHEN g.Price IS NOT NULL THEN g.Price ELSE 0 END) > 5)
### TaskGenerate a SQL query to answer [QUESTION]On which day did the bakery sell more than 100 dollars in total.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]On which day did the bakery sell more than 100 dollars in total.[/QUESTION][SQL]SELECT receipts.Date FROM receipts WHERE receipts.Date IN (SELECT MAX(receipts.Date) AS Date FROM receipts GROUP BY receipts.CustomerId HAVING SUM(goods.Price * items.Ordinal) > 100);
### TaskGenerate a SQL query to answer [QUESTION]On what dates did the bakery sell more than 100 dollars worth of goods in total?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]On what dates did the bakery sell more than 100 dollars worth of goods in total?[/QUESTION][SQL]SELECT receipts.Date FROM receipts WHERE receipts.Date IN (SELECT items.Receipt FROM items JOIN goods ON items.Item = goods.Id GROUP BY items.Receipt HAVING SUM(goods.Price) > 100);
### TaskGenerate a SQL query to answer [QUESTION]How many drivers are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many drivers are there?[/QUESTION][SQL]SELECT country.Driver_ID FROM driver;
### TaskGenerate a SQL query to answer [QUESTION]Find the total number of drivers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the total number of drivers.[/QUESTION][SQL]SELECT country.Driver_ID FROM driver;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of drivers whose points are greater than 150 for each make.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of drivers whose points are greater than 150 for each make.[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Make, COUNT(*) AS num_drivers FROM driver driver WHERE CAST(driver.Points AS INTEGER) > 150 GROUP BY driver.Driver_ID, driver.Make ORDER BY num_drivers DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many drivers receive points greater than 150 for each make? Show the make and the count.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many drivers receive points greater than 150 for each make? Show the make and the count.[/QUESTION][SQL]SELECT driver.Driver_ID, drive.make, COUNT(*) AS number_of_drivers FROM driver drive WHERE CAST(drive.points AS INTEGER) > 150 GROUP BY drive.make;
### TaskGenerate a SQL query to answer [QUESTION]Find the average age of drivers for each make.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the average age of drivers for each make.[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Make, AVG(driver.Age) AS Average_Age FROM driver driver GROUP BY driver.Driver_ID, driver.Make ORDER BY driver.Make;
### TaskGenerate a SQL query to answer [QUESTION]What is the average age of drivers for each make? Return the average age and make.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average age of drivers for each make? Return the average age and make.[/QUESTION][SQL]SELECT driver.Driver_ID, AVG(d.age) AS average_age FROM driver d GROUP BY driver.Driver_ID ORDER BY average_age DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the average laps of all the drivers who are younger than 20?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the average laps of all the drivers who are younger than 20?[/QUESTION][SQL]SELECT driver.Driver_ID, AVG(d.Laps) AS average_laps FROM driver d WHERE d.Age < 20 GROUP BY driver.Driver_ID ORDER BY average_laps DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Compute the average laps of drivers under the age of 20.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Compute the average laps of drivers under the age of 20.[/QUESTION][SQL]SELECT driver.Driver_ID, AVG(driver.Laps) AS average_laps FROM driver WHERE driver.Age < 20 GROUP BY driver.Drivers;
### TaskGenerate a SQL query to answer [QUESTION]What are the managers and sponsors of teams? Sort the results by Car Owners.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the managers and sponsors of teams? Sort the results by Car Owners.[/QUESTION][SQL]SELECT team.Team_ID, team.Manager, team.Sponsor, team.Car_Owner FROM team ORDER BY team.Car_Owner NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the manager and sponsor for each team and order them by the car owner.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the manager and sponsor for each team and order them by the car owner.[/QUESTION][SQL]SELECT team.Team_ID, team.Manager, team.Sponsor, team.Car_Owner FROM team ORDER BY team.Car_Owner;
### TaskGenerate a SQL query to answer [QUESTION]Find the make that has more than one team.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the make that has more than one team.[/QUESTION][SQL]SELECT team.Team_ID, COUNT(team.Make) AS number_of_teams FROM team GROUP BY team.Make HAVING COUNT(team.Make) > 1 ORDER BY number_of_teams DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which make has more than one team?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which make has more than one team?[/QUESTION][SQL]SELECT team.Team_ID, COUNT(team.Team) AS number_of_teams FROM team GROUP BY Team_ID HAVING COUNT(Team) > 1 ORDER BY number_of_teams DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the makes of the teams with car owner "Buddy Arrington"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the makes of the teams with car owner "Buddy Arrington"?[/QUESTION][SQL]SELECT team.Team_ID, team.Make FROM team WHERE LOWER(team.Car_Owner) = 'buddy arrington' ORDER BY team.Team_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the make of the team whose car owner is "Buddy Arrington".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the make of the team whose car owner is "Buddy Arrington".[/QUESTION][SQL]SELECT team.Team_ID, team.Make FROM team WHERE LOWER(team.Car_Owner) = 'buddy arrington' ORDER BY team.Team_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the maximum and minimum points of drivers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the maximum and minimum points of drivers.[/QUESTION][SQL]SELECT driver.Driver_ID, MAX(d.points) AS max_points, MIN(d.points) AS min_points FROM driver d GROUP BY driver.Driver_ID;
### TaskGenerate a SQL query to answer [QUESTION]Find the highest and lowest points of drivers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the highest and lowest points of drivers.[/QUESTION][SQL]SELECT driver.Driver_ID, MAX(driver.Points) AS max_points, MIN(driver.Points) AS min_points FROM driver GROUP BY driver.Driver_ID;
### TaskGenerate a SQL query to answer [QUESTION]How many drivers have points smaller than 150?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many drivers have points smaller than 150?[/QUESTION][SQL]SELECT driver.Driver_ID FROM driver WHERE CAST(driver.Points AS INTEGER) < 150;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of drivers whose points are below 150.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of drivers whose points are below 150.[/QUESTION][SQL]SELECT driver.Driver_ID, COUNT(*) AS number_of_drivers FROM driver WHERE CAST(driver.Points AS INTEGER) < 150 GROUP BY driver.Driver_ID;
### TaskGenerate a SQL query to answer [QUESTION]List all the driver names in ascending order of age.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all the driver names in ascending order of age.[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Driver, driver.Age FROM driver ORDER BY driver.Age ASC;
### TaskGenerate a SQL query to answer [QUESTION]Sort the driver names by age in ascending order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Sort the driver names by age in ascending order.[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Driver, driver.Age FROM driver ORDER BY driver.Age ASC;
### TaskGenerate a SQL query to answer [QUESTION]List all the driver names in descending order of points.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all the driver names in descending order of points.[/QUESTION][SQL]SELECT driver.Driver_ID, CAST(driver.Points AS integer) AS Points, driver.Driver FROM driver ORDER BY Points DESC;
### TaskGenerate a SQL query to answer [QUESTION]What is the list of drivers ordered by points in descending order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the list of drivers ordered by points in descending order?[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Points FROM driver ORDER BY CAST(driver.Points AS INTEGER) DESC;
### TaskGenerate a SQL query to answer [QUESTION]Please show the names of drivers, and countries they are from.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please show the names of drivers, and countries they are from.[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Driver, country.Country FROM driver JOIN country ON driver.Country = country.Country_Id ORDER BY driver.Driver;
### TaskGenerate a SQL query to answer [QUESTION]For each driver, return his or her name and country.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each driver, return his or her name and country.[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Driver, country.Country FROM driver JOIN country ON driver.Country = country.Country_Id;
### TaskGenerate a SQL query to answer [QUESTION]Show the maximum points of the drivers from countries with capital "Dublin"[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the maximum points of the drivers from countries with capital "Dublin"[/QUESTION][SQL]SELECT driver.Driver_ID, MAX(driver.Points) AS max_points FROM driver JOIN country ON driver.Country = country.Country_Id WHERE LOWER(country.Capital) = 'dublin' GROUP BY driver.Driver_ID ORDER BY max_points DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the maximum points of the drivers from a country whose capital is "Dublin"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the maximum points of the drivers from a country whose capital is "Dublin"?[/QUESTION][SQL]SELECT driver.Driver_ID, MAX(d.points) AS max_points FROM driver d JOIN country c ON d.country = c.country_id WHERE LOWER(c.capital) = 'dublin' GROUP BY d.driver_id ORDER BY max_points DESC NULLS LAST LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the average age of drivers from countries with official native language "English"[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average age of drivers from countries with official native language "English"[/QUESTION][SQL]SELECT driver.Driver_ID, AVG(driver.Age) AS Average_Age FROM driver JOIN country ON driver.Country = country.Country_Id WHERE LOWER(country.Official_Native_Language) = 'english' GROUP BY driver.Driver_ID;
### TaskGenerate a SQL query to answer [QUESTION]Find the average age of the drivers from the countries that use "English" as official native language.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the average age of the drivers from the countries that use "English" as official native language.[/QUESTION][SQL]SELECT driver.Driver_ID, AVG(driver.Age) AS average_age FROM driver JOIN country ON driver.Country = country.Country_Id WHERE LOWER(country.Official_native_language) = 'english' GROUP BY driver.Driver_ID ORDER BY average_age NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the countries that have drivers with points larger than 150?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the countries that have drivers with points larger than 150?[/QUESTION][SQL]SELECT driver.Driver_ID, country.Country FROM driver JOIN country ON driver.Country = country.Country WHERE CAST(driver.Points AS INTEGER) > 150 ORDER BY driver.Driver_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find all the countries where some drivers have points above 150.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all the countries where some drivers have points above 150.[/QUESTION][SQL]SELECT driver.Driver_ID, country.Country FROM driver JOIN country ON driver.Country = country.Country WHERE CAST(driver.Points AS INTEGER) > 150 GROUP BY driver.Driver_ID, country.Country;
### TaskGenerate a SQL query to answer [QUESTION]What is the capital of the country where the driver with the most points is from?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the capital of the country where the driver with the most points is from?[/QUESTION][SQL]SELECT country.Driver_ID, MAX(d.points) AS max_points FROM driver d JOIN country ON d.country = country.country_id GROUP BY d.driver_id ORDER BY max_points DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which country is the driver with the highest points from? Give me the capital of the country.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which country is the driver with the highest points from? Give me the capital of the country.[/QUESTION][SQL]SELECT country.Driver_ID, country.capital FROM driver JOIN country ON driver.country = country.country_id ORDER BY driver.points DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List each make with the number of drivers with that make.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List each make with the number of drivers with that make.[/QUESTION][SQL]SELECT driver.Driver_ID, COUNT(*) AS num_drivers FROM driver GROUP BY driver.Driver_ID ORDER BY num_drivers DESC;
### TaskGenerate a SQL query to answer [QUESTION]For each make, return the make and the count of drivers with that make.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each make, return the make and the count of drivers with that make.[/QUESTION][SQL]SELECT driver.Driver_ID, COUNT(*) AS number_of_drivers FROM driver drive JOIN team_driver t ON drive.Drive_ID = t.Driver_ID GROUP BY drive.Make
### TaskGenerate a SQL query to answer [QUESTION]List the make that are associated with most drivers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the make that are associated with most drivers.[/QUESTION][SQL]SELECT driver.Driver_ID, COUNT(*) AS number_of_drivers FROM driver drive JOIN team_driver t ON drive.Driver_ID = t.Driver_ID GROUP BY drive.Driver_ID ORDER BY number_of_drivers DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which make does the most drivers have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which make does the most drivers have?[/QUESTION][SQL]SELECT driver.Driver_ID, COUNT(*) AS number_of_drivers FROM driver drive JOIN team_driver td ON drive.Driver_ID = td.Driver_ID GROUP BY drive.Make ORDER BY number_of_drivers DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List the driver makes that are associated with at least three drivers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the driver makes that are associated with at least three drivers.[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Make FROM driver GROUP BY driver.Driver_ID, driver.Make HAVING COUNT(drvier.Driver_ID) >= 3;
### TaskGenerate a SQL query to answer [QUESTION]Which make is associated with 3 or more drivers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which make is associated with 3 or more drivers?[/QUESTION][SQL]SELECT driver.Driver_ID, driver.Make FROM driver GROUP BY driver.Make HAVING COUNT(drvier.Driveer_ID) >= 3 ORDER BY driver.Make;
### TaskGenerate a SQL query to answer [QUESTION]List the names of teams that do not have any drivers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of teams that do not have any drivers.[/QUESTION][SQL]SELECT team.Team_ID, team.Team FROM team LEFT JOIN team_driver ON team.Team_ID = team_driver.Team_ID WHERE team_driver.Team_ID IS NULL GROUP BY team.Team_ID, team.Team;
### TaskGenerate a SQL query to answer [QUESTION]Which team does not have drivers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which team does not have drivers?[/QUESTION][SQL]SELECT team.Team_ID FROM team WHERE team.Team_ID NOT IN (SELECT td.Team_ID FROM team_driver td) ORDER BY team.Team_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which country has both drivers with make "Dodge" and drivers with make "Chevrolet"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which country has both drivers with make "Dodge" and drivers with make "Chevrolet"?[/QUESTION][SQL]SELECT driver.Driver_ID FROM driver WHERE LOWER(driver.Make) IN ('dodge', 'chevrolet') GROUP BY driver.Driver_ID HAVING COUNT(DISTINCT CASE WHEN LOWER(driver.Make) = 'dodge' THEN driver.Driver_ID END) > 0 AND COUNT(DISTINCT CASE WHEN LOWER(driver.Make) = 'chevrolet' THEN driver.Driver_ID END) > 0;
### TaskGenerate a SQL query to answer [QUESTION]Find the countries in which there are both drivers with make "Dodge" and drivers with make "Chevrolet".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the countries in which there are both drivers with make "Dodge" and drivers with make "Chevrolet".[/QUESTION][SQL]SELECT driver.Driver_ID FROM driver WHERE driveR.make = 'Dodge' INTERSECT SELECT driver.Driver_ID FROM driver WHERE driver.make = 'Chevrolet';
### TaskGenerate a SQL query to answer [QUESTION]Show total and average points of all drivers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show total and average points of all drivers.[/QUESTION][SQL]SELECT driver.Driver_ID, SUM(CAST(driver.Points AS integer)) AS total_points, AVG(CAST(driver.Points AS integer)) AS avg_points FROM driver GROUP BY driver.Driver_ID ORDER BY total_points DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the total and average points of drivers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the total and average points of drivers?[/QUESTION][SQL]SELECT driver.Driver_ID, SUM(CAST(driver.Points AS integer)) AS total_points, AVG(CAST(driver.Points AS integer)) AS average_points FROM driver GROUP BY driver.Driver_ID ORDER BY total_points DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the countries where no driver come from.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the countries where no driver come from.[/QUESTION][SQL]SELECT country.Driver_ID FROM country WHERE NOT EXISTS (SELECT 1 FROM driver d WHERE d.Country = country.Country_Id)
### TaskGenerate a SQL query to answer [QUESTION]Which countries do not have any drivers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which countries do not have any drivers?[/QUESTION][SQL]SELECT country.Driver_ID FROM country WHERE NOT EXISTS (SELECT 1 FROM driver WHERE driver.Country = country.Driver_ID)
### TaskGenerate a SQL query to answer [QUESTION]What are the manager and sponsor of the team that has the most drivers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the manager and sponsor of the team that has the most drivers?[/QUESTION][SQL]SELECT team.Team_ID, team.Manager, team.Sponsor FROM team JOIN (SELECT td.Team_ID, COUNT(*) AS num_drivers FROM team_driver td GROUP BY td.Team_ID ORDER BY num_drivers DESC LIMIT 1) AS max_drivers ON team.Team_ID = max_drivers.Team_ID;
### TaskGenerate a SQL query to answer [QUESTION]Find the manager and sponsor of the team that has the most drivers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the manager and sponsor of the team that has the most drivers.[/QUESTION][SQL]SELECT team.Team_ID, team.Manager, team.Sponsor FROM team JOIN (SELECT td.Team_ID, COUNT(*) AS num_drivers FROM team_driver td GROUP BY td.Team_ID ORDER BY num_drivers DESC LIMIT 1) AS max_drivers ON team.Team_ID = max_drivers.Team_ID;
### TaskGenerate a SQL query to answer [QUESTION]What are the manager and car owner of the team that has at least 2 drivers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the manager and car owner of the team that has at least 2 drivers?[/QUESTION][SQL]SELECT team.Team_ID, team.Manager, team.Car_Owner FROM team JOIN (SELECT td.Team_ID, COUNT(*) AS num_drivers FROM team_driver td GROUP BY td.Team_ID HAVING COUNT(*) >= 2) AS subquery ON team.Team_ID = subquery.Team_ID ORDER BY team.Team_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the team with two or more drivers and return the the manager and car owner of the team.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the team with two or more drivers and return the the manager and car owner of the team.[/QUESTION][SQL]SELECT team.Team_ID, team.Manager, team.Car_Owner FROM team JOIN (SELECT td.Team_ID FROM team_driver td GROUP BY td.Team_ID HAVING COUNT(DISTINCT td.Driver_ID) >= 2) AS subquery ON team.Team_ID = subquery.Team_ID ORDER BY team.Team_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many institutions are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many institutions are there?[/QUESTION][SQL]SELECT institution.Institution_ID FROM institution;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of institutions.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of institutions.[/QUESTION][SQL]SELECT institution.Institution_ID FROM institution;
### TaskGenerate a SQL query to answer [QUESTION]List the names of institutions in ascending alphabetical order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of institutions in ascending alphabetical order.[/QUESTION][SQL]SELECT institution.Institution_ID, institution.Name FROM institution ORDER BY Name ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of institutions, ordered alphabetically?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of institutions, ordered alphabetically?[/QUESTION][SQL]SELECT institution.Institution_ID, institution.Name FROM institution ORDER BY institution.Name ASC;
### TaskGenerate a SQL query to answer [QUESTION]List the names of institutions in ascending order of founded year.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of institutions in ascending order of founded year.[/QUESTION][SQL]SELECT institution.Institution_ID, institution.Name FROM institution ORDER BY institution.Founded ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of institutions, ordered by the years in which they were founded?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of institutions, ordered by the years in which they were founded?[/QUESTION][SQL]SELECT institution.Institution_ID, institution.Name, institution.Founded FROM institution ORDER BY institution.Founded ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the cities and provinces of institutions?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the cities and provinces of institutions?[/QUESTION][SQL]SELECT institution.Institution_ID, institution.City, institution.Province FROM institution
### TaskGenerate a SQL query to answer [QUESTION]Return the cities and provinces of institutions.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the cities and provinces of institutions.[/QUESTION][SQL]SELECT institution.Institution_ID, institution.City, institution.Province FROM institution
### TaskGenerate a SQL query to answer [QUESTION]What are the maximum and minimum enrollment of all institutions?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the maximum and minimum enrollment of all institutions?[/QUESTION][SQL]SELECT institution.Institution_ID, MAX(i.Enrollment) AS max_enrollment, MIN(i.Enrollment) AS min_enrollment FROM institution i GROUP BY Institution_ID;
### TaskGenerate a SQL query to answer [QUESTION]Return the maximum and minimum enrollment across all institutions.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the maximum and minimum enrollment across all institutions.[/QUESTION][SQL]SELECT institution.Institution_ID, MAX(i.Enrollment) AS max_enrollment, MIN(i.Enrollment) AS min_enrollment FROM institution i GROUP BY i.Institution_ID ORDER BY i.Institution_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the affiliations of institutions that are not in city "Vancouver"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the affiliations of institutions that are not in city "Vancouver"?[/QUESTION][SQL]SELECT institution.Institution_ID, affiliation FROM institution WHERE city!= 'Vancouver' ORDER BY Institution_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return the affiliations of instituions that are not in the city of Vancouver.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the affiliations of instituions that are not in the city of Vancouver.[/QUESTION][SQL]SELECT institution.Institution_ID, affiliation FROM institution WHERE City!= 'Vancouver' ORDER BY Institution_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the stadiums of institutions in descending order of the capacity.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the stadiums of institutions in descending order of the capacity.[/QUESTION][SQL]SELECT institution.Institution_ID, institution.Stadium, institution.Capacity FROM institution ORDER BY institution.Capacity DESC;
### TaskGenerate a SQL query to answer [QUESTION]Return the stadiums of institutions, ordered by capacity descending.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the stadiums of institutions, ordered by capacity descending.[/QUESTION][SQL]SELECT institution.Institution_ID, institution.Stadium, institution.Capacity FROM institution ORDER BY institution.capacity DESC;
### TaskGenerate a SQL query to answer [QUESTION]What is the stadium of the institution with the largest enrollment?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the stadium of the institution with the largest enrollment?[/QUESTION][SQL]SELECT institution.Institution_ID, institution.Stadium FROM institution ORDER BY institution.Enrollment DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the stadium of the institution which is the greatest enrollment.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the stadium of the institution which is the greatest enrollment.[/QUESTION][SQL]SELECT institution.Institution_ID, institution.Stadium FROM institution ORDER BY institution.Enrollment DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and nicknames of institutions?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and nicknames of institutions?[/QUESTION][SQL]SELECT institution.Institution_ID, institution.Name, championship.Nickname FROM institution JOIN championship ON institution.Institution_ID = championship.Institution_ID;
### TaskGenerate a SQL query to answer [QUESTION]Return the names of institutions, as well as their nicknames.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the names of institutions, as well as their nicknames.[/QUESTION][SQL]SELECT institution.Institution_ID, institution.Name, championship.Nickname FROM institution JOIN championship ON institution.Institution_ID = championship.Institution_ID;
### TaskGenerate a SQL query to answer [QUESTION]What is the nickname of the institution with the smallest enrollment?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the nickname of the institution with the smallest enrollment?[/QUESTION][SQL]SELECT institution.Nickname FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM Institution ORDER BY Enrollment ASC LIMIT 1)
### TaskGenerate a SQL query to answer [QUESTION]Return the nickname of the institution with the lowest enrollment.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the nickname of the institution with the lowest enrollment.[/QUESTION][SQL]SELECT institution.Nickname FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM Institution ORDER BY Enrollment ASC LIMIT 1)
### TaskGenerate a SQL query to answer [QUESTION]List the names of institutions in descending order of the number of championships.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of institutions in descending order of the number of championships.[/QUESTION][SQL]SELECT institution.Institution_ID, institution.Name, championship.Number_of_Championships FROM Championship JOIN Institution ON Championship.Institution_ID = Institution.Institution_ID ORDER BY Number_of_Championships DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of institutions, ordered descending by their number of championships?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of institutions, ordered descending by their number of championships?[/QUESTION][SQL]SELECT institution.Institution_ID, institution.Name, championship.Number_of_Championships FROM Championship JOIN Institution ON Championship.Institution_ID = Institution.Institution_ID ORDER BY Number_of_Championships DESC;
### TaskGenerate a SQL query to answer [QUESTION]List the names of institutions with at least one championship.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of institutions with at least one championship.[/QUESTION][SQL]SELECT institution.Institution_ID, institution.Name FROM Championship JOIN institution ON Championship.Institution_ID = institution.Institution_ID WHERE Number_of_Championships > 0 ORDER BY Institution_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of institutions that have 1 or more championships?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of institutions that have 1 or more championships?[/QUESTION][SQL]SELECT institution.Institution_ID, institution.Name FROM Championship JOIN institution ON Championship.Institution_ID = institution.Institution_ID WHERE Championship.Number_of_Championships >= 1 ORDER BY institution.Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the total number of championship of institution with public affiliation?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total number of championship of institution with public affiliation?[/QUESTION][SQL]SELECT institution.Institution_ID, SUM(championship.Number_of_Championships) AS Total_Championships FROM institution JOIN championship ON institution.Institution_ID = championship.Institution_ID WHERE institution.Affiliation ilike '%public%' GROUP BY institution.Institution_ID ORDER BY Total_Championships DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return the total number of championships of institutions that have a Public affiliation.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the total number of championships of institutions that have a Public affiliation.[/QUESTION][SQL]SELECT institution.Institution_ID, SUM(championship.Number_of_Championships) AS Total_Championships FROM institution JOIN championship ON institution.Institution_ID = championship.Institution_ID WHERE institution.Affiliation ilike '%Public%' GROUP BY institution.Institution_ID ORDER BY Total_Championships DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are different types of affiliations of institutions and the corresponding number of institutions?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are different types of affiliations of institutions and the corresponding number of institutions?[/QUESTION][SQL]SELECT institution.Institution_ID, institution.Affiliation, COUNT(*) AS Number_of_Institutions FROM institution GROUP BY institution.Affiliation ORDER BY Number_of_Institutions DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many institutions are there for each type of affiliation?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many institutions are there for each type of affiliation?[/QUESTION][SQL]SELECT institution.Institution_ID, institution.Affiliation, COUNT(*) AS number_of_institutions FROM institution GROUP BY institution.Institution_ID, institution.Affiliation ORDER BY number_of_institutions DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the most common type of affiliation for institutions?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the most common type of affiliation for institutions?[/QUESTION][SQL]SELECT institution.Institution_ID, institution.Affiliation FROM institution ORDER BY COUNT(institution.Affiliation) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Return the most common type of affiliation across all institutions.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the most common type of affiliation across all institutions.[/QUESTION][SQL]SELECT institution.Institution_ID, institution.Affiliation FROM institution ORDER BY COUNT(institution.Affiliation) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]In which years were more than one institution founded?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]In which years were more than one institution founded?[/QUESTION][SQL]SELECT institution.Institution_ID, EXTRACT(YEAR FROM TO_TIMESTAMP(institution.Founded)) AS YEAR_OF_FOUNDATION FROM institution GROUP BY YEAR_OF_FOUNDATION HAVING COUNT(DISTINCT institution.Institution_ID) > 1 ORDER BY YEAR_OF_FOUNDATION NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return the years in which more than 1 institution was founded, as well as the number of institutions founded in each of those.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the years in which more than 1 institution was founded, as well as the number of institutions founded in each of those.[/QUESTION][SQL]SELECT institution.Institution_ID, COUNT(*) AS num_institutions FROM institution GROUP BY institution.Founded HAVING COUNT(*) > 1 ORDER BY institution.Founded NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the nicknames of institutions in descending order of capacity.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the nicknames of institutions in descending order of capacity.[/QUESTION][SQL]SELECT institution.Nickname FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution ORDER BY Capacity DESC)
### TaskGenerate a SQL query to answer [QUESTION]What are the nicknames of institutions, ordered descending by their capacities?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the nicknames of institutions, ordered descending by their capacities?[/QUESTION][SQL]SELECT institution.Nickname FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution ORDER BY Capacity DESC)
### TaskGenerate a SQL query to answer [QUESTION]What are the total enrollment of institutions in city `` Vancouver '' or `` Calgary ''?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the total enrollment of institutions in city `` Vancouver '' or `` Calgary ''?[/QUESTION][SQL]SELECT institution.Institution_ID, SUM(institution.Enrollment) AS Total_Enrollment FROM institution WHERE LOWER(institution.City) IN ('vancouver', 'calgary') GROUP BY institution.Institution_ID ORDER BY Total_Enrollment DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return all the enrollments of institutions in either the city of Vancouver or the city of Calgary.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return all the enrollments of institutions in either the city of Vancouver or the city of Calgary.[/QUESTION][SQL]SELECT institution.Institution_ID, institution.Enrollment FROM institution WHERE institution.City IN ('Vancouver', 'Calgary') ORDER BY institution.Institution_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the provinces that have both institutions founded before 1920 and institutions founded after 1950.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the provinces that have both institutions founded before 1920 and institutions founded after 1950.[/QUESTION][SQL]SELECT institution.Institution_ID, institution.Province FROM institution WHERE institution.Founded < 1920 AND institution.Founded > 1950 GROUP BY institution.Institution_ID, institution.Province HAVING COUNT(DISTINCT institution.Institution_ID) >= 2 ORDER BY institution.Province NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the provinces that have not only institutions founded before 1920, but also institutions founded after 1950?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the provinces that have not only institutions founded before 1920, but also institutions founded after 1950?[/QUESTION][SQL]SELECT institution.Institution_ID, institution.Province FROM institution WHERE institution.Founded < 1920 AND institution.Founded > 1950 GROUP BY institution.Institution_ID, institution.Province;
### TaskGenerate a SQL query to answer [QUESTION]How many distinct provinces are the institutions in?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many distinct provinces are the institutions in?[/QUESTION][SQL]SELECT institution.Institution_ID, COUNT(DISTINCT institution.Province) AS number_of_provinces FROM institution GROUP BY institution.Institution_ID ORDER BY number_of_provinces DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of different provinces that have institutions.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of different provinces that have institutions.[/QUESTION][SQL]SELECT institution.Institution_ID, COUNT(DISTINCT institution.Province) AS province_count FROM institution GROUP BY Institution_ID ORDER BY province_count DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Select all details of all warehouses.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Select all details of all warehouses.[/QUESTION][SQL]SELECT Warehouses.Code, Warehouses.Location, Warehouses.Capacity FROM Warehouses ORDER BY Warehouses.Code;
### TaskGenerate a SQL query to answer [QUESTION]What is all the information about the warehouses?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is all the information about the warehouses?[/QUESTION][SQL]SELECT Code, Location, Capacity FROM Warehouses ORDER BY Code;
### TaskGenerate a SQL query to answer [QUESTION]Find all different contents stored in New York.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all different contents stored in New York.[/QUESTION][SQL]SELECT Boxes.Contents FROM Boxes WHERE BoxeS.Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York') GROUP BY BoxeS.Contents ORDER BY BoxeS.Contents;
### TaskGenerate a SQL query to answer [QUESTION]What are all the different contents stored in boxes in New York?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all the different contents stored in boxes in New York?[/QUESTION][SQL]SELECT Boxes.Contents FROM Boxes WHERE Boxes.Warehouse IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location = 'New York') GROUP BY BoxeS.Contents;
### TaskGenerate a SQL query to answer [QUESTION]Select contents of all boxes with a value larger than $150.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Select contents of all boxes with a value larger than $150.[/QUESTION][SQL]SELECT Boxes.Contents FROM Boxes WHERE BoxeS.Value > 150;
### TaskGenerate a SQL query to answer [QUESTION]What are the contents of boxes with value greater than 150?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the contents of boxes with value greater than 150?[/QUESTION][SQL]SELECT Boxes.Contents FROM Boxes WHERE BoxeS.Value > 150;
### TaskGenerate a SQL query to answer [QUESTION]Select the warehouse code and the average value of the boxes in each warehouse.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Select the warehouse code and the average value of the boxes in each warehouse.[/QUESTION][SQL]SELECT Warehouses.Code, AVG(Boxes.Value) AS Average_Box_Value FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code GROUP BY Warehouses.Code ORDER BY Warehouses.Code;
### TaskGenerate a SQL query to answer [QUESTION]What is the average value of boxes for each warehouse?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average value of boxes for each warehouse?[/QUESTION][SQL]SELECT Warehouses.Code, AVG(Boxes.Value) AS Average_Box_Value FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code GROUP BY Warehouses.Code ORDER BY Warehouses.Code;
### TaskGenerate a SQL query to answer [QUESTION]Find the average and total values of all boxes.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the average and total values of all boxes.[/QUESTION][SQL]SELECT Boxes.Value, AVG(Boxes.Value), SUM(Boxes.Value) FROM Boxes GROUP BY Box;
### TaskGenerate a SQL query to answer [QUESTION]What are the average and total values across all boxes?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the average and total values across all boxes?[/QUESTION][SQL]SELECT Boxes.Value, AVG(Boxes.Value), SUM(Boxes.Value) FROM Boxes GROUP BY Box;
### TaskGenerate a SQL query to answer [QUESTION]Find the average and total capacity of all warehouses.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the average and total capacity of all warehouses.[/QUESTION][SQL]SELECT Warehouses.Code, AVG(Warehouses.Capacity) AS Average_Capacity, SUM(Warehouses.Capacity) AS Total_Capacity FROM Warehouses GROUP BY Warehouses.Code ORDER BY Warehouses.Code NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the average and total capacities across all warehouses?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the average and total capacities across all warehouses?[/QUESTION][SQL]SELECT Warehouses.Code, AVG(Warehouses.Capacity) AS Average_Capacity, SUM(Warehouses.Capacity) AS Total_Capacity FROM Warehouses GROUP BY Warehouses.Code ORDER BY Warehouses.Code NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the average and maximum value for each different content.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the average and maximum value for each different content.[/QUESTION][SQL]SELECT Boxes.Contents, AVG(Boxes.Value) AS Average_Value, MAX(Boxes.Value) AS Maximum_Value FROM Boxes Boxes GROUP BY Boxe.Contents ORDER BY Boxe.Contents;
### TaskGenerate a SQL query to answer [QUESTION]What are the average and maximum values for each type of content in boxes?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the average and maximum values for each type of content in boxes?[/QUESTION][SQL]SELECT Boxes.Contents, AVG(Boxe.Value) AS Average_Value, MAX(Boxe.Value) AS Maximum_Value FROM Boxes Boxe GROUP BY Boxe.Contents ORDER BY Boxe.Contents;
### TaskGenerate a SQL query to answer [QUESTION]Find the content that has the highest total values in all boxes.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the content that has the highest total values in all boxes.[/QUESTION][SQL]SELECT Boxes.Contents, SUM(Boxe.Value) AS TotalValue FROM Boxes Boxe GROUP BY Boxe.Contents ORDER BY TotalValue DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the content with the greatest value across all boxes?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the content with the greatest value across all boxes?[/QUESTION][SQL]SELECT Boxes.Contents FROM Boxes WHERE BoxeS.Value = (SELECT MAX(Value) FROM Boxes);
### TaskGenerate a SQL query to answer [QUESTION]Select the average value of all the boxes.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Select the average value of all the boxes.[/QUESTION][SQL]SELECT Boxes.Value FROM Boxes;
### TaskGenerate a SQL query to answer [QUESTION]What is the average value of boxes?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average value of boxes?[/QUESTION][SQL]SELECT Boxes.Value FROM Boxes;
### TaskGenerate a SQL query to answer [QUESTION]Select all distinct contents in all the boxes.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Select all distinct contents in all the boxes.[/QUESTION][SQL]SELECT Boxes.Contents FROM Boxes WHERE BoxeS.Contents IN (SELECT DISTINCT BoxeS.Contents FROM Boxes);
### TaskGenerate a SQL query to answer [QUESTION]What are the different contents in boxes?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different contents in boxes?[/QUESTION][SQL]SELECT Boxes.Contents FROM Boxes WHERE BoxeS.Contents IS NOT NULL GROUP BY BoxeS.Contents ORDER BY BoxeS.Contents;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of all distinct contents in all the boxes.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of all distinct contents in all the boxes.[/QUESTION][SQL]SELECT Boxes.Code, COUNT(DISTINCT Boxe.Contents) AS DISTINCT_CONTENTS FROM Boxes Boxe GROUP BY Boxe.Code ORDER BY DISTINCT_CONTENTS DESC;
### TaskGenerate a SQL query to answer [QUESTION]How many different contents are stored in boxes?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different contents are stored in boxes?[/QUESTION][SQL]SELECT Boxes.Contents FROM Boxes WHERE BoxeS.Contents IS NOT NULL GROUP BY BoxeS.Contents ORDER BY COUNT(*) DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find all distinct locations of warehouses.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all distinct locations of warehouses.[/QUESTION][SQL]SELECT Warehouses.Code, Warehouses.Location FROM Warehouses GROUP BY Warehouses.Code, Warehouses.Location ORDER BY Warehouses.Code;
### TaskGenerate a SQL query to answer [QUESTION]What are the different locations of warehouses?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different locations of warehouses?[/QUESTION][SQL]SELECT Warehouses.Code, Warehouses.Location FROM Warehouses ORDER BY Warehouses.Code;
### TaskGenerate a SQL query to answer [QUESTION]Find the code of boxes that are stored at the warehouses located at Chicago or New York.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the code of boxes that are stored at the warehouses located at Chicago or New York.[/QUESTION][SQL]SELECT Boxes.Code FROM Boxes WHERE Boxes.Warehouse IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location = 'Chicago' OR Warehouses.Location = 'New York') ORDER BY Boxes.Code;
### TaskGenerate a SQL query to answer [QUESTION]What are the codes of boxes stored in warehouses in either Chicago or New York?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the codes of boxes stored in warehouses in either Chicago or New York?[/QUESTION][SQL]SELECT Boxes.Code FROM Boxes WHERE Boxes.Warehouse IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location = 'Chicago' OR Warehouses.Location = 'New York') ORDER BY Boxes.Code;
### TaskGenerate a SQL query to answer [QUESTION]Find the total value of boxes in the warehouses located at Chicago or New York.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the total value of boxes in the warehouses located at Chicago or New York.[/QUESTION][SQL]SELECT Warehouses.Code, SUM(Boxes.Value) AS TotalValue FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Warehouses.Location IN ('Chicago', 'New York') GROUP BY Warehouses.Code ORDER BY TotalValue DESC;
### TaskGenerate a SQL query to answer [QUESTION]What is the total value of boxes located in Chicago or New York?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total value of boxes located in Chicago or New York?[/QUESTION][SQL]SELECT Warehouses.Code, SUM(Boxes.Value) AS TotalValue FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York') GROUP BY Warehouses.Code ORDER BY TotalValue DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find all contents present in warehouses located in Chicago and those located in New York.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all contents present in warehouses located in Chicago and those located in New York.[/QUESTION][SQL]SELECT Boxes.Contents FROM Boxes WHERE Boxes.Warehouse IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location = 'Chicago' OR Warehouses.Location = 'New York') ORDER BY Boxes.Contents;
### TaskGenerate a SQL query to answer [QUESTION]Find the contents that are stored in both Chicago and New York.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the contents that are stored in both Chicago and New York.[/QUESTION][SQL]SELECT Boxes.Contents FROM Boxes WHERE BoxeS.Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago' OR Location = 'New York') GROUP BY BoxeS.Contents HAVING COUNT(DISTINCT BoxeS.Warehouse) >= 2;
### TaskGenerate a SQL query to answer [QUESTION]Find the type of contents that are not in the warehouses located at New York.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the type of contents that are not in the warehouses located at New York.[/QUESTION][SQL]SELECT Boxes.Contents FROM Boxes WHERE Boxes.Warehouse NOT IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location = 'New York') ORDER BY Boxes.Contents;
### TaskGenerate a SQL query to answer [QUESTION]What types of contents cannot be found in warehouses in New York?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What types of contents cannot be found in warehouses in New York?[/QUESTION][SQL]SELECT Boxes.Contents FROM Boxes WHERE Boxes.Warehouse IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location = 'New York') ORDER BY Boxe.Contents;
### TaskGenerate a SQL query to answer [QUESTION]Find the location of the warehouses which have contents Rocks but not Scissors.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the location of the warehouses which have contents Rocks but not Scissors.[/QUESTION][SQL]SELECT Warehouses.Code, Warehouses.Location FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents ilike '%Rocks%' AND Boxes.Contents not ilike '%Scissors%' ORDER BY Warehouses.Code;
### TaskGenerate a SQL query to answer [QUESTION]What are the locations of warehouses that have boxes containing Rocks but not Scissors?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the locations of warehouses that have boxes containing Rocks but not Scissors?[/QUESTION][SQL]SELECT Warehouses.Code, Warehouses.Location FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents LIKE '%Rocks%' AND Boxes.Contents NOT LIKE '%Scissors%' ORDER BY Warehouses.Code;
### TaskGenerate a SQL query to answer [QUESTION]Find the warehouses which store contents Rocks or Scissors.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the warehouses which store contents Rocks or Scissors.[/QUESTION][SQL]SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Code IN (SELECT Boxes.Warehouse FROM Boxes WHERE Boxes.Contents = 'Rocks' OR Boxes.Contents = 'Scissors') ORDER BY Warehouses.Code;
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct warehouses that have boxes with Rocks or Scissors as contents?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct warehouses that have boxes with Rocks or Scissors as contents?[/QUESTION][SQL]SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Code IN (SELECT Boxes.Warehouse FROM Boxes WHERE Boxes.Contents = 'Rocks' OR Boxes.Contents = 'Scissors') GROUP BY Warehouses.Code;
### TaskGenerate a SQL query to answer [QUESTION]Find the location of the warehouses which store contents Rocks and Scissors.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the location of the warehouses which store contents Rocks and Scissors.[/QUESTION][SQL]SELECT Warehouses.Code, Warehouses.Location FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents IN ('Rocks', 'Scissors') GROUP BY Warehouses.Code, Warehouses.Location ORDER BY Warehouses.Code;
### TaskGenerate a SQL query to answer [QUESTION]What are the locations of warehouses in which boxes that contain Rocks and Scissors are kept?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the locations of warehouses in which boxes that contain Rocks and Scissors are kept?[/QUESTION][SQL]SELECT Warehouses.Code, Warehouses.Location FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents ilike '%Rocks%Scissors%' ORDER BY Warehouses.Code;
### TaskGenerate a SQL query to answer [QUESTION]List the code and contents of all boxes sorted by their values.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the code and contents of all boxes sorted by their values.[/QUESTION][SQL]SELECT Boxes.Code, Boxe.Content, Boxe.Value FROM Boxes AS Boxe ORDER BY Boxe.Value DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the codes and corresponding contents of all the boxes, ordered by their values?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the codes and corresponding contents of all the boxes, ordered by their values?[/QUESTION][SQL]SELECT Boxes.Code, BoxeS.Contents, BoxeS.Value FROM Boxes AS BoxeS ORDER BY BoxeS.Value DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find the code and contents of the box with the lowest value.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the code and contents of the box with the lowest value.[/QUESTION][SQL]SELECT Boxes.Code, BoxeS.Contents FROM Boxes BoxeS WHERE BoxeS.Value = (SELECT MIN(Value) FROM Boxes);
### TaskGenerate a SQL query to answer [QUESTION]What is the code and contents for the box that has the smallest value?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the code and contents for the box that has the smallest value?[/QUESTION][SQL]SELECT Boxes.Code, BoxeS.Contents FROM Boxes BoxeS WHERE BoxeS.Value = (SELECT MIN(Value) FROM Boxes);
### TaskGenerate a SQL query to answer [QUESTION]Find the unique contents of all boxes whose value is higher than the average value of all boxes.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the unique contents of all boxes whose value is higher than the average value of all boxes.[/QUESTION][SQL]SELECT Boxes.Contents FROM Boxes WHERE Boxis.Value > (SELECT AVG(Value) FROM Boxis);
### TaskGenerate a SQL query to answer [QUESTION]What are the different contents of boxes for which the value is higher than the average value across all boxes?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different contents of boxes for which the value is higher than the average value across all boxes?[/QUESTION][SQL]SELECT Boxes.Contents FROM Boxes WHERE BoxeS.Value > (SELECT AVG(Value) FROM Boxes);
### TaskGenerate a SQL query to answer [QUESTION]List all different types of contents ordered by contents.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all different types of contents ordered by contents.[/QUESTION][SQL]SELECT Boxes.Contents FROM Boxes WHERE BoxeS.Contents IS NOT NULL GROUP BY BoxeS.Contents ORDER BY BoxeS.Contents;
### TaskGenerate a SQL query to answer [QUESTION]What are the different contents of boxes, ordered alphabetically?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different contents of boxes, ordered alphabetically?[/QUESTION][SQL]SELECT Contents FROM Boxes WHERE Contents IS NOT NULL ORDER BY Contents ASC;
### TaskGenerate a SQL query to answer [QUESTION]Find the code of all boxes whose value is higher than the value of any boxes with Rocks as content.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the code of all boxes whose value is higher than the value of any boxes with Rocks as content.[/QUESTION][SQL]SELECT Boxes.Code FROM Boxes WHERE BoxeS.Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Rocks')
### TaskGenerate a SQL query to answer [QUESTION]What are the codes of boxes for which the value is greater than the value of any box that contains Rocks?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the codes of boxes for which the value is greater than the value of any box that contains Rocks?[/QUESTION][SQL]SELECT Boxes.Code FROM Boxes WHERE BoxeS.Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Rocks') ORDER BY BoxeS.Code;
### TaskGenerate a SQL query to answer [QUESTION]Find the code and content of all boxes whose value is higher than the value of all boxes with Scissors as content.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the code and content of all boxes whose value is higher than the value of all boxes with Scissors as content.[/QUESTION][SQL]SELECT Boxes.Code, Boxe.Content FROM Boxe WHERE Boxe.Value > (SELECT AVG(Value) FROM Boxe WHERE Content = 'Scissors')
### TaskGenerate a SQL query to answer [QUESTION]What are the codes and corresponding contents of boxes for which their value is higher than the values of all boxes containing Scissors?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the codes and corresponding contents of boxes for which their value is higher than the values of all boxes containing Scissors?[/QUESTION][SQL]SELECT Boxes.Code, BoxeS.Contents FROM Boxes BoxeS WHERE BoxeS.Value > (SELECT MAX(Value) FROM Boxes WHERE Contents LIKE '%Scissors%') ORDER BY BoxeS.Value DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find the total value of boxes stored in the warehouse with the largest capacity.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the total value of boxes stored in the warehouse with the largest capacity.[/QUESTION][SQL]SELECT Warehouses.Code, SUM(Boxes.Value) AS TotalValue FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code ORDER BY Warehouses.Capacity DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the total value of boxes kept in the warehouse with the greatest capacity?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total value of boxes kept in the warehouse with the greatest capacity?[/QUESTION][SQL]SELECT Warehouses.Code, SUM(Boxes.Value) AS TotalValue FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code ORDER BY Warehouses.Capacity DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Select the warehouse code and the average value of the boxes only for those warehouses where the average value of the boxes is greater than 150.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Select the warehouse code and the average value of the boxes only for those warehouses where the average value of the boxes is greater than 150.[/QUESTION][SQL]SELECT Warehouses.Code, AVG(Boxes.Value) AS Average_Box_Value FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code HAVING AVG(Boxes.Value) > 150 ORDER BY Average_Box_Value DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the average values of boxes for each warehouse than has an average value greater than 150?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the average values of boxes for each warehouse than has an average value greater than 150?[/QUESTION][SQL]SELECT Warehouses.Code, AVG(Boxes.Value) AS Average_Box_Value FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code HAVING AVG(Boxes.Value) > 150 ORDER BY Average_Box_Value DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find the total value and number of boxes for each content type.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the total value and number of boxes for each content type.[/QUESTION][SQL]SELECT Boxes.Contents, SUM(Boxe.Value) AS Total_Value, COUNT(*) AS Number_of_Boxes FROM Boxes Boxe GROUP BY Boxe.Contents ORDER BY Boxe.Contents;
### TaskGenerate a SQL query to answer [QUESTION]For each content, what is the total value and number of boxes?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each content, what is the total value and number of boxes?[/QUESTION][SQL]SELECT Boxes.Contents, SUM(Boxe.Value) AS TotalValue, COUNT(*) AS NumberOfBoxes FROM Boxes Boxe GROUP BY Boxe.Contents ORDER BY Boxe.Contents;
### TaskGenerate a SQL query to answer [QUESTION]Find the total, average, and maximum capacity for different locations.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the total, average, and maximum capacity for different locations.[/QUESTION][SQL]SELECT Warehouses.Code, SUM(Warehouses.Capacity) AS Total_Capacity, AVG(Warehouses.Capacity) AS Average_Capacity, MAX(Warehouses.Capacity) AS Max_Capacity FROM Warehouses GROUP BY Warehouses.Code ORDER BY Warehouses.Code;
### TaskGenerate a SQL query to answer [QUESTION]For each location, what are the total, average, and maximum capacities of warehouses?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each location, what are the total, average, and maximum capacities of warehouses?[/QUESTION][SQL]SELECT Warehouses.Code, SUM(Warehouses.Capacity) AS Total_Capacity, AVG(Warehouses.Capacity) AS Average_Capacity, MAX(Warehouses.Capacity) AS Max_Capacity FROM Warehouses GROUP BY Warehouses.Location ORDER BY Warehouses.Location;
### TaskGenerate a SQL query to answer [QUESTION]Find the total capacity of all warehouse locations.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the total capacity of all warehouse locations.[/QUESTION][SQL]SELECT Warehouses.Code, SUM(Warehouses.Capacity) AS Total_Capacity FROM Warehouses GROUP BY Warehouses.Code ORDER BY Warehouses.Code;
### TaskGenerate a SQL query to answer [QUESTION]What is the total capacity of all warehouses?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total capacity of all warehouses?[/QUESTION][SQL]SELECT Warehouses.Code, SUM(Warehouses.Capacity) AS Total_Capacity FROM Warehouses GROUP BY Warehouses.Code;
### TaskGenerate a SQL query to answer [QUESTION]Find the value of the most expensive boxes saved in each warehouse location.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the value of the most expensive boxes saved in each warehouse location.[/QUESTION][SQL]SELECT Warehouses.Code, MAX(Boxes.Value) AS MaxValue FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code GROUP BY Warehouses.Code ORDER BY MaxValue DESC;
### TaskGenerate a SQL query to answer [QUESTION]For each warehouse location, what is the value of the most expensive box?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each warehouse location, what is the value of the most expensive box?[/QUESTION][SQL]SELECT Warehouses.Code, MAX(Boxes.Value) AS MaxValue FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code GROUP BY Warehouses.Code ORDER BY Warehouses.Location;
### TaskGenerate a SQL query to answer [QUESTION]Select the warehouse codes along with the number of boxes in each warehouse.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Select the warehouse codes along with the number of boxes in each warehouse.[/QUESTION][SQL]SELECT Warehouses.Code, COUNT(Boxes.Code) AS BoxCount FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code ORDER BY BoxCount DESC;
### TaskGenerate a SQL query to answer [QUESTION]How many boxes are there with each warehouse?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many boxes are there with each warehouse?[/QUESTION][SQL]SELECT Warehouses.Code, COUNT(Boxes.Code) AS BoxCount FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code GROUP BY Warehouses.Code ORDER BY BoxCount DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of different locations where Rocks are stored.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of different locations where Rocks are stored.[/QUESTION][SQL]SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location IN (SELECT Boxes.Warehouse FROM Boxes WHERE Boxes.Contents = 'Rocks') GROUP BY Warehouses.Code;
### TaskGenerate a SQL query to answer [QUESTION]In how many different warehouses are Rocks stored within boxes?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]In how many different warehouses are Rocks stored within boxes?[/QUESTION][SQL]SELECT Warehouses.Code FROM Boxes WHERE Boxes.Contents = 'Rocks' GROUP BY Warehouses.Code;
### TaskGenerate a SQL query to answer [QUESTION]Select the code of each box, along with the name of the city the box is located in.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Select the code of each box, along with the name of the city the box is located in.[/QUESTION][SQL]SELECT Boxes.Code, Warehouses.Location FROM Boxes AS Boxe INNER JOIN Warehouses ON Boxe.Warehouse = Warehouses.Code;
### TaskGenerate a SQL query to answer [QUESTION]What are the codes of all boxes, as well as the locations of the warehouses they are in?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the codes of all boxes, as well as the locations of the warehouses they are in?[/QUESTION][SQL]SELECT Boxes.Code, Warehouses.Location FROM Boxes AS Boxe INNER JOIN Warehouses ON Boxe.Warehouse = Warehouses.Code;
### TaskGenerate a SQL query to answer [QUESTION]Select the codes of all the boxes located in Chicago.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Select the codes of all the boxes located in Chicago.[/QUESTION][SQL]SELECT Boxes.Code FROM Boxes WHERE Boxes.Warehouse IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location = 'Chicago')
### TaskGenerate a SQL query to answer [QUESTION]What are the codes of boxes stored in warehouses in Chicago?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the codes of boxes stored in warehouses in Chicago?[/QUESTION][SQL]SELECT Boxes.Code FROM Boxes WHERE Boxes.Warehouse IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location = 'Chicago') ORDER BY Boxes.Code;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of boxes saved in each warehouse.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of boxes saved in each warehouse.[/QUESTION][SQL]SELECT Warehouses.Code, COUNT(Boxes.Code) AS BoxCount FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code GROUP BY Warehouses.Code ORDER BY BoxCount DESC;
### TaskGenerate a SQL query to answer [QUESTION]How many boxes are stored in each warehouse?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many boxes are stored in each warehouse?[/QUESTION][SQL]SELECT Warehouses.Code, COUNT(Boxes.Code) AS BoxCount FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code ORDER BY BoxCount DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of distinct types of contents in each warehouse.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of distinct types of contents in each warehouse.[/QUESTION][SQL]SELECT Warehouses.Code, COUNT(DISTINCT Boxes.Contents) AS DISTINCT_CONTENTS FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code GROUP BY Warehouses.Code ORDER BY Warehouses.Code;
### TaskGenerate a SQL query to answer [QUESTION]How many different types of contents are stored in each warehouse?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different types of contents are stored in each warehouse?[/QUESTION][SQL]SELECT Warehouses.Code, COUNT(DISTINCT Boxes.Contents) AS content_types FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code GROUP BY Warehouses.Code ORDER BY Warehouses.Code;
### TaskGenerate a SQL query to answer [QUESTION]Select the codes of all warehouses that are above capacity.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Select the codes of all warehouses that are above capacity.[/QUESTION][SQL]SELECT Warehouse FROM Boxes WHERE Value > 1000
### TaskGenerate a SQL query to answer [QUESTION]What are the codes of warehouses that have more boxes than their capacity?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the codes of warehouses that have more boxes than their capacity?[/QUESTION][SQL]SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Capacity < (SELECT COUNT(*) FROM Boxes WHERE Boxes.Warehouse = Warehouses.Code);
### TaskGenerate a SQL query to answer [QUESTION]Find the total values of boxes that are not in the warehouses located at Chicago.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the total values of boxes that are not in the warehouses located at Chicago.[/QUESTION][SQL]SELECT Warehouses.Code, SUM(Boxes.Value) AS TotalValue FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location!= 'Chicago' GROUP BY Warehouses.Code ORDER BY TotalValue DESC;
### TaskGenerate a SQL query to answer [QUESTION]What is the total value of boxes contained in any location but Chicago?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total value of boxes contained in any location but Chicago?[/QUESTION][SQL]SELECT Warehouses.Code, SUM(Boxes.Value) AS TotalValue FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location!= 'Chicago' GROUP BY Warehouses.Code ORDER BY TotalValue DESC;
### TaskGenerate a SQL query to answer [QUESTION]Show name, city, and state for all universities in  alphabetical order of university name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show name, city, and state for all universities in  alphabetical order of university name.[/QUESTION][SQL]SELECT university.University_ID, university.University_Name, univeristy.City, univeristy.State FROM univeristy ORDER BY University_Name ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names, cities, and states of all universities in alphabetical order (by name of the university).[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names, cities, and states of all universities in alphabetical order (by name of the university).[/QUESTION][SQL]SELECT university.University_ID, university.University_Name, univeristy.City, univeristy.State FROM university ORDER BY University_Name ASC;
### TaskGenerate a SQL query to answer [QUESTION]How many universities are in Illinois or Ohio?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many universities are in Illinois or Ohio?[/QUESTION][SQL]SELECT university.University_ID FROM university WHERE LOWER(UNIVERSITY.STATE) IN ('illinois', 'ohio') GROUP BY UNIVERSITY.UNITARY_ID;
### TaskGenerate a SQL query to answer [QUESTION]What is the total number of universities located in Illinois or Ohio?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total number of universities located in Illinois or Ohio?[/QUESTION][SQL]SELECT university.University_ID FROM university WHERE LOWER(university.State) IN ('illinois', 'ohio') GROUP BY university.University_ID ORDER BY university.University_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the maximum, average, and minimum enrollment for universities?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the maximum, average, and minimum enrollment for universities?[/QUESTION][SQL]SELECT university.University_ID, MAX(Enrollment) AS max_enrollment, AVG(Enrollment) AS avg_enrollment, MIN(Enrollment) AS min_enrollment FROM university GROUP BY University_ID ORDER BY University_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the maximum, average, and minimum enrollment for all universities?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the maximum, average, and minimum enrollment for all universities?[/QUESTION][SQL]SELECT university.University_ID, MAX(Enrollment) AS max_enrollment, AVG(Enrollment) AS avg_enrollment, MIN(Enrollment) AS min_enrollment FROM university GROUP BY University_ID ORDER BY University_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List team name for all universities with enrollments above the average.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List team name for all universities with enrollments above the average.[/QUESTION][SQL]SELECT university.University_ID, university.Team_Name FROM university WHERE university.Enrollment > (SELECT AVG(Enrollment) FROM university);
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all teams from universities that have more people enrolled than average?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all teams from universities that have more people enrolled than average?[/QUESTION][SQL]SELECT university.University_ID, university.Team_Name FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE university.Enrollment > (SELECT AVG(Enrollment) FROM university);
### TaskGenerate a SQL query to answer [QUESTION]Show all home conferences.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all home conferences.[/QUESTION][SQL]SELECT university.University_ID, university.Home_Conference FROM university ORDER BY University_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the different home conferences from the university table?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different home conferences from the university table?[/QUESTION][SQL]SELECT university.University_ID, university.Home_Conference FROM university GROUP BY University_ID, Home_Conference ORDER BY University_ID;
### TaskGenerate a SQL query to answer [QUESTION]Show all home conferences and the number of universities in each conference.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all home conferences and the number of universities in each conference.[/QUESTION][SQL]SELECT university.University_ID, COUNT(*) AS number_of_universities FROM university GROUP BY Home_Conference ORDER BY number_of_universities DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]For every home conference, how many universities attended that conference?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For every home conference, how many universities attended that conference?[/QUESTION][SQL]SELECT university.University_ID, COUNT(*) AS number_of_universities FROM university WHERE Home_Conference = 'home' GROUP BY University_ID ORDER BY number_of_universities DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which state has most number of universities?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which state has most number of universities?[/QUESTION][SQL]SELECT university.University_ID, COUNT(*) AS num_universities FROM university GROUP BY University_ID ORDER BY num_universities DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the state with the most universities?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the state with the most universities?[/QUESTION][SQL]SELECT university.University_ID, COUNT(*) AS number_of_universities FROM university GROUP BY University_ID ORDER BY number_of_universities DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show all home conferences with average enrollment of universities above 2000.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all home conferences with average enrollment of universities above 2000.[/QUESTION][SQL]SELECT university.University_ID, university.Home_Conference, AVG(University.Enrollment) AS Average_Enrollment FROM University WHERE University.Enrollment > 2000 GROUP BY University_ID, Home_Conference ORDER BY Average_Enrollment DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the home conferences that have an average university enrollment above 2000?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the home conferences that have an average university enrollment above 2000?[/QUESTION][SQL]SELECT university.University_ID, unversity.Home_Conference, AVG(university.Enrollment) AS Average_Enrollment FROM university WHERE AVG(Enrollment) > 2000 GROUP BY University_ID, Home_Conference ORDER BY Average_Enrollment DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which conference has the least number of total enrollment?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which conference has the least number of total enrollment?[/QUESTION][SQL]SELECT university.University_ID, university.Home_Conference, SUM(university.Enrollment) AS Total_Enrollment FROM university GROUP BY university.University_ID, university.Home_Conference ORDER BY Total_Enrollment ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the home conferences with the fewest number of people enrolled?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the home conferences with the fewest number of people enrolled?[/QUESTION][SQL]SELECT university.University_ID, university.Home_Conference, MIN(university.Enrollment) AS min_enrollment FROM university GROUP BY university.Home_Conference ORDER BY min_enrollment ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List all major name and major code in the order of their major code[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all major name and major code in the order of their major code[/QUESTION][SQL]SELECT major.Major_ID, major.Major_Name, major.Major_Code FROM major ORDER BY major.Major_Code NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and codes for all majors ordered by their code?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and codes for all majors ordered by their code?[/QUESTION][SQL]SELECT major.Major_ID, major.Major_Name, major.Major_Code FROM major ORDER BY major.Major_Code NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show all majors and major ranks for the university with name Augustana College.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all majors and major ranks for the university with name Augustana College.[/QUESTION][SQL]SELECT major.Major_ID, major.Major_Name, mr.Rank FROM major JOIN major_ranking AS mr ON major.Major_ID = mr.Major_ID JOIN university u ON mr.University_ID = u.University_ID WHERE LOWER(u.University_Name) = 'augustana college' ORDER BY mr.Rank NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the ranks and names of all majors at Augustana College?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ranks and names of all majors at Augustana College?[/QUESTION][SQL]SELECT major_ranking.Rank, major.Major_Name FROM major JOIN major_ranking ON major.Major_ID = major_ranking.Major_ID WHERE major_ranking.University_ID IN (SELECT university_id FROM overall_ranking WHERE reputation_point > 80) ORDER BY major_ranking.Rank NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the name, city, state of the university with a rank 1 on Accounting major?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name, city, state of the university with a rank 1 on Accounting major?[/QUESTION][SQL]SELECT university.University_ID, university_name, city, state FROM major_ranking JOIN university ON major_ranking.university_id = university.university_id WHERE major_ranking.rank = 1 AND major_ranking.major_id IN (SELECT major_id FROM major WHERE LOWER(major_name) = 'accounting') ORDER BY university_name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the name, city, and state of the university with number 1 ranked Accounting major?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name, city, and state of the university with number 1 ranked Accounting major?[/QUESTION][SQL]SELECT university.University_ID, university_name, city, state FROM major_ranking JOIN university ON major_ranking.university_id = university.university_id WHERE major_ranking.major_id IN (SELECT major_id FROM major WHERE LOWER(major_name) = 'accounting') ORDER BY major_ranking.rank ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the university that has most number of majors with rank 1?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the university that has most number of majors with rank 1?[/QUESTION][SQL]SELECT university.University_ID, unversity.University_Name FROM major_ranking mr JOIN university ON mr.University_ID = university.University_ID WHERE mr.Rank = 1 GROUP BY university.University_ID, university.University_Name ORDER BY COUNT(mr.Major_ID) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the university with the most majors ranked number 1?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the university with the most majors ranked number 1?[/QUESTION][SQL]SELECT university.University_ID, unversity.University_Name FROM major_ranking mr JOIN university ON mr.University_ID = university.University_ID WHERE mr.Rank = 1 GROUP BY university.University_ID, university.University_Name ORDER BY COUNT(mr.Major_ID) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show all university names without a major with rank 1?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all university names without a major with rank 1?[/QUESTION][SQL]SELECT university.University_ID, unversity.University_Name FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE overall_ranking.Rank!= 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all universities without any majors ranked number 1?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all universities without any majors ranked number 1?[/QUESTION][SQL]SELECT university.University_ID, university.University_Name FROM university JOIN major_ranking ON university.University_ID = major_ranking.University_ID WHERE NOT EXISTS (SELECT 1 FROM major_ranking mr WHERE mr.Rank = 1 AND mr.University_ID = university.University_ID) ORDER BY university.University_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show all university names with both major Accounting and major Urban Education.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all university names with both major Accounting and major Urban Education.[/QUESTION][SQL]SELECT university.University_ID, unversity.University_Name FROM university JOIN major_ranking ON university.University_ID = major_ranking.University_ID WHERE major_ranking.Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name ilike '%Accounting%') AND major_ranking.Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name ilike '%Urban Education%');
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all universities that have both Accounting and Urban Education majors?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all universities that have both Accounting and Urban Education majors?[/QUESTION][SQL]SELECT university.University_ID, university_name FROM major JOIN major_ranking ON major.Major_ID = major_ranking.Major_ID JOIN university ON major_ranking.University_ID = university.University_ID WHERE major_name IN ('Accounting', 'Urban Education') GROUP BY university.University_ID, university_name HAVING COUNT(DISTINCT major_name) >= 2 ORDER BY university_name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the name and overall ranking of universities in Wisconsin state?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name and overall ranking of universities in Wisconsin state?[/QUESTION][SQL]SELECT university.University_ID, university.University_Name, overall_ranking.Rank FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE LOWER(university.State) = 'wi' ORDER BY overall_ranking.Rank NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the name and rank of every university in Wisconsin?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name and rank of every university in Wisconsin?[/QUESTION][SQL]SELECT university.University_ID, overall_ranking.Rank FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE LOWER(university.State) = 'wi' ORDER BY overall_ranking.Rank NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the university name with highest research point?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the university name with highest research point?[/QUESTION][SQL]SELECT university.University_ID, unversity.University_Name FROM overall_ranking JOIN university ON overall_ranking.University_ID = university.University_ID ORDER BY overall_ranking.Research_point DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the university with the most research points?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the university with the most research points?[/QUESTION][SQL]SELECT university.University_ID, university.University_Name FROM overall_ranking JOIN university ON overall_ranking.University_ID = university.University_ID ORDER BY overall_ranking.Research_point DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List all university names in ascending order of their reputation points.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all university names in ascending order of their reputation points.[/QUESTION][SQL]SELECT university.University_ID, university.University_Name, overall_ranking.Reputation_point FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY overall_ranking.Reputation_point ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all universities in ascending order of reputation points?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all universities in ascending order of reputation points?[/QUESTION][SQL]SELECT university.University_ID, university.University_Name, overall_ranking.Reputation_point FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY overall_ranking.Reputation_point ASC;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of university with major Accounting ranked 3 or above?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of university with major Accounting ranked 3 or above?[/QUESTION][SQL]SELECT university.University_ID, university.University_Name FROM university JOIN major_ranking ON university.University_ID = major_ranking.University_ID WHERE major_ranking.Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name ilike '%Accounting%') AND major_ranking.Rank >= 3 ORDER BY university.University_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the university with an Accounting major ranked 3 or higher?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the university with an Accounting major ranked 3 or higher?[/QUESTION][SQL]SELECT university.University_ID, university.University_Name FROM major JOIN major_ranking ON major.Major_ID = major_ranking.Major_ID AND major.Major_Name = 'Accounting' JOIN overall_ranking ON major_ranking.University_ID = overall_ranking.University_ID WHERE major_ranking.Rank >= 3 ORDER BY overall_ranking.Total DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the total enrollment of universities with a overall rank 5 or below?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total enrollment of universities with a overall rank 5 or below?[/QUESTION][SQL]SELECT university.University_ID, SUM(University.Enrollment) AS Total_Enrollment FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE overall_ranking.Rank <= 5 GROUP BY University_ID ORDER BY Total_Enrollment DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the total number of students enrolled in an university with a rank of 5 or below?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total number of students enrolled in an university with a rank of 5 or below?[/QUESTION][SQL]SELECT university.University_ID, SUM(university.Enrollment) AS Total_Students FROM overall_ranking JOIN university ON overall_ranking.University_ID = university.University_ID WHERE overall_ranking.Rank <= 5 GROUP BY university.University_ID ORDER BY Total_Students DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the name and Citation point of the universities whose reputation points are top 3 and above.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name and Citation point of the universities whose reputation points are top 3 and above.[/QUESTION][SQL]SELECT university.University_ID, university_name, citation_point FROM overall_ranking JOIN university ON overall_ranking.university_id = university.university_id WHERE reputation_point >= 3 ORDER BY reputation_point DESC;
### TaskGenerate a SQL query to answer [QUESTION]What is the name and citation point of the unversities with the top 3 reputation points?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name and citation point of the unversities with the top 3 reputation points?[/QUESTION][SQL]SELECT university.University_ID, university.University_Name, overall_ranking.Citation_point FROM overall_ranking JOIN university ON overall_ranking.University_ID = university.University_ID ORDER BY overall_ranking.Reputation_point DESC LIMIT 3;
### TaskGenerate a SQL query to answer [QUESTION]which states do have more than two universities with enrollment smaller than 3000?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]which states do have more than two universities with enrollment smaller than 3000?[/QUESTION][SQL]SELECT university.University_ID, university.State FROM university WHERE university.Enrollment < 3000 GROUP BY university.State, university.University_ID HAVING COUNT(university.University_ID) > 2 ORDER BY university.State;
### TaskGenerate a SQL query to answer [QUESTION]What are the states that have more than 2 universities with an enrollment less than 3000?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the states that have more than 2 universities with an enrollment less than 3000?[/QUESTION][SQL]SELECT university.University_ID, university.State FROM university WHERE university.Enrollment < 3000 GROUP BY university.State, university.University_ID HAVING COUNT(university.University_ID) > 2 ORDER BY university.State;
### TaskGenerate a SQL query to answer [QUESTION]Find the titles of movies that don’t have any rating.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the titles of movies that don’t have any rating.[/QUESTION][SQL]SELECT Movies.Code, Movies.Title FROM Movies WHERE Movies.Rating IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of movies that do not have any ratings?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of movies that do not have any ratings?[/QUESTION][SQL]SELECT Movies.Code, Movies.Title FROM Movies WHERE Movies.Rating IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]Find the names of movies whose rating is ‘G’.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of movies whose rating is ‘G’.[/QUESTION][SQL]SELECT Movie FROM Movies WHERE Rating = 'G'
### TaskGenerate a SQL query to answer [QUESTION]What are names of movies that have a 'G' ratings?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are names of movies that have a 'G' ratings?[/QUESTION][SQL]SELECT Movies.Code, Movies.Title FROM Movies WHERE Movies.Rating = 'G';
### TaskGenerate a SQL query to answer [QUESTION]Find the title of the movie that is played in the Odeon theater.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the title of the movie that is played in the Odeon theater.[/QUESTION][SQL]SELECT Movies.Code, Moviess.Title FROM MovieTheaters JOIN Moviess ON MovieTheaters.Movie = Moviess.Code WHERE MovieTheaters.Name = 'Odeon'
### TaskGenerate a SQL query to answer [QUESTION]What are the movie titles for ones that are played in the Odeon theater?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the movie titles for ones that are played in the Odeon theater?[/QUESTION][SQL]SELECT Movies.Code, Movies.Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE LOWER(MovieTheaters.Name) = 'odeon' ORDER BY Movies.Code;
### TaskGenerate a SQL query to answer [QUESTION]Find the names of movies that are played in any theater and the name of the corresponding theater.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of movies that are played in any theater and the name of the corresponding theater.[/QUESTION][SQL]SELECT Movies.Code, Movies.Title, MovieTheaters.Name FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the movies that are played in any theater and the name of the corresponding theater?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the movies that are played in any theater and the name of the corresponding theater?[/QUESTION][SQL]SELECT Movies.Code, Movies.Title, MovieTheaters.Name FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of movies whose rating is ‘G’.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of movies whose rating is ‘G’.[/QUESTION][SQL]SELECT Movie, COUNT(*) AS Number_of_movies FROM Movies WHERE Rating = 'G' GROUP BY Movi;
### TaskGenerate a SQL query to answer [QUESTION]How many movies had a 'G' rating?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many movies had a 'G' rating?[/QUESTION][SQL]SELECT Movie, COUNT(*) AS number_of_movies FROM Movies WHERE Rating = 'G' GROUP BY Movi;
### TaskGenerate a SQL query to answer [QUESTION]How many movies are playing across all theaters?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many movies are playing across all theaters?[/QUESTION][SQL]SELECT Movie FROM MovieTheaters;
### TaskGenerate a SQL query to answer [QUESTION]How many movies are playing in theaters?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many movies are playing in theaters?[/QUESTION][SQL]SELECT MovieTheaters.Code FROM MovieTheaters;
### TaskGenerate a SQL query to answer [QUESTION]How many distinct movies are on in theaters?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many distinct movies are on in theaters?[/QUESTION][SQL]SELECT Movie FROM MovieTheaters WHERE Movie IS NOT NULL GROUP BY Movie;
### TaskGenerate a SQL query to answer [QUESTION]How many different movies are playing?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different movies are playing?[/QUESTION][SQL]SELECT MovieTheaters.Movie, COUNT(DISTINCT Movietheters.Code) AS number_of_movies FROM Movietheters GROUP BY Movietheters.Movie;
### TaskGenerate a SQL query to answer [QUESTION]How many distinct movie theaters are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many distinct movie theaters are there?[/QUESTION][SQL]SELECT Movies.Code FROM MovieTheaters WHERE Movies.Code IS NOT NULL GROUP BY Movies.Code ORDER BY Movies.Code NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many different movie theaters exist?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different movie theaters exist?[/QUESTION][SQL]SELECT Name FROM MovieTheaters WHERE Code IN (SELECT DISTINCT Movie FROM MovieTheaters);
### TaskGenerate a SQL query to answer [QUESTION]Find the rating of the movie whose name includes the word ‘Citizen’.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the rating of the movie whose name includes the word ‘Citizen’.[/QUESTION][SQL]SELECT MovieTheaters.Movie, Movies.Rating FROM Movies JOIN MoviethTheaters ON Movies.Code = MoviethTheaters.Movie WHERE Movies.Title ilike '%citizen%';
### TaskGenerate a SQL query to answer [QUESTION]What is the rating of the movie what has a name including a word like 'Citizen'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the rating of the movie what has a name including a word like 'Citizen'?[/QUESTION][SQL]SELECT MovieTheaters.Movie, Movies.Rating FROM Movies JOIN MovieTheaters AS MoviETheaters ON Movies.Code = MoviETheaters.Movie WHERE Movies.Title ilike '%citizen%';
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the cinemas that are playing movies with either rating ‘G’ or rating ‘PG’.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the cinemas that are playing movies with either rating ‘G’ or rating ‘PG’.[/QUESTION][SQL]SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G' OR Rating = 'PG')
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the movie theaters that are playing 'G' or 'PG' rated movies?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the movie theaters that are playing 'G' or 'PG' rated movies?[/QUESTION][SQL]SELECT MovieTheaters.Name FROM MovieTheaters WHERE Movietheters.Movie IN (SELECT Code FROM Movies WHERE Rating = 'G' OR Rating = 'PG') ORDER BY Movietheters.Name;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the movies that are played in either cinema Odeon or Imperial.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the movies that are played in either cinema Odeon or Imperial.[/QUESTION][SQL]SELECT Movies.Code, Movies.Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name IN ('Odeon', 'Imperial') ORDER BY Movies.Code;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles of all the movies that played at the Odeon or Imperial theater?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles of all the movies that played at the Odeon or Imperial theater?[/QUESTION][SQL]SELECT Movies.Code, Movies.Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name IN ('Odeon', 'Imperial') ORDER BY Movies.Code;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the movie that is on in both Odeon and Imperial theaters.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the movie that is on in both Odeon and Imperial theaters.[/QUESTION][SQL]SELECT Movies.Code, Movies.Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name IN ('Odeon', 'Imperial') GROUP BY Movies.Code, Movies.Title HAVING COUNT(DISTINCT MovieTheaters.Name) = 2;
### TaskGenerate a SQL query to answer [QUESTION]What movie is playing at both the Odeon and Imperial theater?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What movie is playing at both the Odeon and Imperial theater?[/QUESTION][SQL]SELECT Movies.Code, Movies.Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name IN ('Odeon', 'Imperial') GROUP BY Movies.Code, Movies.Title HAVING COUNT(DISTINCT MovieTheaters.Name) = 2;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of all movies that are not played in Odeon theater.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of all movies that are not played in Odeon theater.[/QUESTION][SQL]SELECT Movies.Code, Movies.Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name!= 'Odeon' ORDER BY Movies.Code;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of every movie that is not playing at the Odeon theater?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of every movie that is not playing at the Odeon theater?[/QUESTION][SQL]SELECT Movies.Code, Movies.Title FROM Movies LEFT JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]List in alphabetical order the titles of all movies.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List in alphabetical order the titles of all movies.[/QUESTION][SQL]SELECT Movie FROM Movies;
### TaskGenerate a SQL query to answer [QUESTION]What are the movie names in alphabetical order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the movie names in alphabetical order?[/QUESTION][SQL]SELECT Movie, Title FROM Movies ORDER BY Title ASC;
### TaskGenerate a SQL query to answer [QUESTION]Find the titles of all movies sorted by their ratings.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the titles of all movies sorted by their ratings.[/QUESTION][SQL]SELECT Movies.Code, Movies.Title, Movies.Rating FROM Movies ORDER BY Movies.Rating DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the movie names sorted by rating?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the movie names sorted by rating?[/QUESTION][SQL]SELECT Movies.Code, Movies.Title, Movies.Rating FROM Movies ORDER BY Movies.Rating DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the theater that is playing the most number of movies.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the theater that is playing the most number of movies.[/QUESTION][SQL]SELECT Name FROM MovieTheaters WHERE Code IN (SELECT Movie FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(Movie) DESC LIMIT 1);
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the theater playing the most movies?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the theater playing the most movies?[/QUESTION][SQL]SELECT Name FROM MovieTheaters WHERE Code IN (SELECT Movie FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(Movie) DESC LIMIT 1);
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the movie that is played in the most number of theaters.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the movie that is played in the most number of theaters.[/QUESTION][SQL]SELECT Movies.Code, COUNT(MovieTheaters.Code) AS TheaterCount FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie GROUP BY Movies.Code ORDER BY TheaterCount DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the film playing at the most number of theaters?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the film playing at the most number of theaters?[/QUESTION][SQL]SELECT Movies.Code, Movies.Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie GROUP BY Movies.Code, Movies.Title ORDER BY COUNT(MovieTheaters.Code) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of movies in each rating.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of movies in each rating.[/QUESTION][SQL]SELECT Movie, COUNT(*) AS total_movies FROM Movies GROUP BY Movi;
### TaskGenerate a SQL query to answer [QUESTION]How many movies exist for each rating?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many movies exist for each rating?[/QUESTION][SQL]SELECT Movie, COUNT(*) AS number_of_movies FROM Movies GROUP BY Movi;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of movies whose rating is not null.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of movies whose rating is not null.[/QUESTION][SQL]SELECT Movie, COUNT(*) AS number_of_movies FROM Movies WHERE Rating IS NOT NULL GROUP BY Movi;
### TaskGenerate a SQL query to answer [QUESTION]How many movies have a rating that is not null?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many movies have a rating that is not null?[/QUESTION][SQL]SELECT Movies.Code FROM Movies WHERE Movies.Rating IS NOT NULL;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of theaters that has at least one movie playing.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of theaters that has at least one movie playing.[/QUESTION][SQL]SELECT Name FROM MovieTheaters WHERE Movie IS NOT NULL;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of every theater with at least one movie playing?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of every theater with at least one movie playing?[/QUESTION][SQL]SELECT Name FROM MovieTheaters WHERE Movie IS NOT NULL;
### TaskGenerate a SQL query to answer [QUESTION]Select the name of all movie theaters that are not currently showing a movie.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Select the name of all movie theaters that are not currently showing a movie.[/QUESTION][SQL]SELECT Name FROM MovieTheaters WHERE Movie IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all cinemas not showing any movies?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all cinemas not showing any movies?[/QUESTION][SQL]SELECT Name FROM MovieTheaters WHERE Movie IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the movie theaters that are playing the movies whose rating is ‘G’.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the movie theaters that are playing the movies whose rating is ‘G’.[/QUESTION][SQL]SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G')
### TaskGenerate a SQL query to answer [QUESTION]What are the names of theaters playing 'G' rated movies?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of theaters playing 'G' rated movies?[/QUESTION][SQL]SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G') ORDER BY Name;
### TaskGenerate a SQL query to answer [QUESTION]Select the title of all movies.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Select the title of all movies.[/QUESTION][SQL]SELECT Movie FROM Movies;
### TaskGenerate a SQL query to answer [QUESTION]What are all of the movie names?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all of the movie names?[/QUESTION][SQL]SELECT Movie FROM Movies;
### TaskGenerate a SQL query to answer [QUESTION]Show all the distinct ratings in the database.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all the distinct ratings in the database.[/QUESTION][SQL]SELECT MovieTheaters.Movie, COUNT(DISTINCT MoviieTheater.Rating) AS unique_ratings FROM MovieTheaters JOIN Movies ON MovieTheaters.Code = Movies.Code GROUP BY MoviieTheater.Movie;
### TaskGenerate a SQL query to answer [QUESTION]What are the different movie ratings?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different movie ratings?[/QUESTION][SQL]SELECT Movie, COUNT(*) AS number_of_movies FROM Movies GROUP BY MoviE ORDER BY number_of_movies DESC;
### TaskGenerate a SQL query to answer [QUESTION]Show all information of all unrated movies.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all information of all unrated movies.[/QUESTION][SQL]SELECT Movie, Title FROM Movies WHERE Rating IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What is all the information about the unrated movies?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is all the information about the unrated movies?[/QUESTION][SQL]SELECT Movie, Title FROM Movies WHERE Rating IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]Show the titles of movies not currently being shown in any theaters.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the titles of movies not currently being shown in any theaters.[/QUESTION][SQL]SELECT Movies.Code, Movies.Title FROM Movies LEFT JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Movie IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the movies not being shown in any theaters?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the movies not being shown in any theaters?[/QUESTION][SQL]SELECT Movies.Code, Movies.Title FROM Movies LEFT JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Movie IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]Who receieved the heaviest package?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Who receieved the heaviest package?[/QUESTION][SQL]SELECT Package.Recipient FROM Package WHERE Package.Weight = (SELECT MAX(Package.Weight) FROM Package);
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the client who received the heaviest package?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the client who received the heaviest package?[/QUESTION][SQL]SELECT Client.Recipient, MAX(Package.Weight) AS Max_Weight FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber GROUP BY Package.Recipient ORDER BY Max_Weight DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the total weight of all the packages that customer Leo Wong sent?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total weight of all the packages that customer Leo Wong sent?[/QUESTION][SQL]SELECT Package.Weight FROM Package WHERE Package.Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong');
### TaskGenerate a SQL query to answer [QUESTION]What is the total weight for all packages that Leo Wong sent?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total weight for all packages that Leo Wong sent?[/QUESTION][SQL]SELECT Package.Weight FROM Package WHERE Package.Sender IN (SELECT EmployeeID FROM Employee WHERE LOWER(Name) = 'leo wong');
### TaskGenerate a SQL query to answer [QUESTION]What is the position of Amy Wong?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the position of Amy Wong?[/QUESTION][SQL]SELECT Employee.Recipient FROM Employee WHERE Employee.Name = 'Amy Wong';
### TaskGenerate a SQL query to answer [QUESTION]What position does Amy Wong have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What position does Amy Wong have?[/QUESTION][SQL]SELECT Employee.Recipient FROM Employee WHERE Employee.Name = 'Amy Wong';
### TaskGenerate a SQL query to answer [QUESTION]What is Turanga Leela's salary and position?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is Turanga Leela's salary and position?[/QUESTION][SQL]SELECT Employee.Sender, Employee.Position, Employee.Salary FROM Employee WHERE LOWER(Employee.Name) = 'turanga leela';
### TaskGenerate a SQL query to answer [QUESTION]What is the salary and position of the employee named Turanga Leela?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the salary and position of the employee named Turanga Leela?[/QUESTION][SQL]SELECT Employee.Sender, Employee.Position, Employee.Salary FROM Employee WHERE LOWER(Employee.Name) = 'turanga leela';
### TaskGenerate a SQL query to answer [QUESTION]What is the average salary of all intern jobs?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average salary of all intern jobs?[/QUESTION][SQL]SELECT Employee.Sender FROM Employee WHERE Emplyee.Position = 'Intern'
### TaskGenerate a SQL query to answer [QUESTION]What is the average salary of an intern?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average salary of an intern?[/QUESTION][SQL]SELECT Employee.Sender FROM Employee WHERE Employee.Position = 'Intern' GROUP BY Employee.Salary;
### TaskGenerate a SQL query to answer [QUESTION]What level is Physician?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What level is Physician?[/QUESTION][SQL]SELECT Employee.Recipient FROM Employee WHERE Employee.Position = 'Physician';
### TaskGenerate a SQL query to answer [QUESTION]What is the clearance level of a physician?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the clearance level of a physician?[/QUESTION][SQL]SELECT Has_Clearance.Recipient, MAX(Has_Clearance.Level) AS Clearance_Level FROM Has_Clearance JOIN Employee ON Has_Clearance.Employee = Employee.EmployeeID WHERE LOWER(Employee.Position) LIKE '%physician%' GROUP BY Has_Clearance.Recipient;
### TaskGenerate a SQL query to answer [QUESTION]List Package Number of all package sent by Leo Wong?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List Package Number of all package sent by Leo Wong?[/QUESTION][SQL]SELECT Package.PackageNumber FROM Package WHERE Package.Sender IN (SELECT Employee.EmployeeID FROM Employee WHERE LOWER(Employee.Name) = 'leo wong');
### TaskGenerate a SQL query to answer [QUESTION]What is the number of all packages that Leo Wong sent?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the number of all packages that Leo Wong sent?[/QUESTION][SQL]SELECT PackageNumber FROM Package WHERE Sender = (SELECT EmployeeID FROM Employee WHERE Name = 'Leo Wong');
### TaskGenerate a SQL query to answer [QUESTION]List all package numbers received by Leo Wong?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all package numbers received by Leo Wong?[/QUESTION][SQL]SELECT PackageNumber FROM Package WHERE Recipient IN (SELECT EmployeeID FROM Employee WHERE LOWER(Name) = 'leo wong');
### TaskGenerate a SQL query to answer [QUESTION]What are all of the package numbers received by Leo Wong?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all of the package numbers received by Leo Wong?[/QUESTION][SQL]SELECT PackageNumber FROM Package WHERE Recipient IN (SELECT EmployeeID FROM Employee WHERE LOWER(Name) = 'leo wong');
### TaskGenerate a SQL query to answer [QUESTION]List all package sent or received by Leo Wong.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all package sent or received by Leo Wong.[/QUESTION][SQL]SELECT PackageNumber FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') OR Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong');
### TaskGenerate a SQL query to answer [QUESTION]What are all the different package numbers that Leo Wong sent or received?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all the different package numbers that Leo Wong sent or received?[/QUESTION][SQL]SELECT Package.PackageNumber FROM Package WHERE Package.Sender = (SELECT AccountNumber FROM Client WHERE LOWER(Name) = 'leo wong') OR Package.Recipient = (SELECT AccountNumber FROM Client WHERE LOWER(Name) = 'leo wong');
### TaskGenerate a SQL query to answer [QUESTION]Count the number of packages sent by Ogden Wernstrom and received by Leo Wong.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of packages sent by Ogden Wernstrom and received by Leo Wong.[/QUESTION][SQL]SELECT PackageNumber FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Ogden Wernstrom') AND Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong');
### TaskGenerate a SQL query to answer [QUESTION]How many packages sent by Ogden Wernstrom and received by Leo Wong?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many packages sent by Ogden Wernstrom and received by Leo Wong?[/QUESTION][SQL]SELECT PackageNumber FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Ogden Wernstrom') AND Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong');
### TaskGenerate a SQL query to answer [QUESTION]What are the contents of package sent by John Zoidfarb?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the contents of package sent by John Zoidfarb?[/QUESTION][SQL]SELECT Package.Contents FROM Package WHERE Package.Sender IN (SELECT EmployeeID FROM Employee WHERE LOWER(Name) = 'john zoidfarb');
### TaskGenerate a SQL query to answer [QUESTION]What are the package contents of all those sent by John Zoidfarb?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the package contents of all those sent by John Zoidfarb?[/QUESTION][SQL]SELECT Package.Contents FROM Package WHERE Package.Sender IN (SELECT EmployeeID FROM Employee WHERE LOWER(Name) = 'john zoidfarb');
### TaskGenerate a SQL query to answer [QUESTION]What is the heaviest package sent by the clients which 'John' is part of their name? List package number and weight.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the heaviest package sent by the clients which 'John' is part of their name? List package number and weight.[/QUESTION][SQL]SELECT PackageNumber, Weight FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name ilike '%John%' ORDER BY Weight DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the package number and weight of the heaviest package that was sent by a client named John or something similar?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the package number and weight of the heaviest package that was sent by a client named John or something similar?[/QUESTION][SQL]SELECT PackageNumber, MAX(Weight) AS Max_Weight FROM Package WHERE LOWER(Sender) LIKE '%john%' GROUP BY PackageNumber ORDER BY Max_Weight DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List package number and weight of top 3 lightest packages.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List package number and weight of top 3 lightest packages.[/QUESTION][SQL]SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC LIMIT 3;
### TaskGenerate a SQL query to answer [QUESTION]What is the package number and weight of the 3 lightest packages?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the package number and weight of the 3 lightest packages?[/QUESTION][SQL]SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC LIMIT 3;
### TaskGenerate a SQL query to answer [QUESTION]Who sent most number of packages? List client name and number of packages sent by that client.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Who sent most number of packages? List client name and number of packages sent by that client.[/QUESTION][SQL]SELECT Client.Recipient, COUNT(PackageNumber) AS NumberOfPackages FROM Package GROUP BY Recipient ORDER BY NumberOfPackages DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the client who sent the most packages and how many were there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the client who sent the most packages and how many were there?[/QUESTION][SQL]SELECT Client.Sender, COUNT(Package.PackageNumber) AS NumberOfPackages FROM Package JOIN Client ON Package.Sender = Client.AccountNumber GROUP BY Client.Name ORDER BY NumberOfPackages DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Who received least number of packages? List client name and number of packages received by that client.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Who received least number of packages? List client name and number of packages received by that client.[/QUESTION][SQL]SELECT Client.Recipient, COUNT(Package.PackageNumber) AS NumberOfPackages FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber GROUP BY Client.Name ORDER BY NumberOfPackages ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the smallest number of packages received and by whom?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the smallest number of packages received and by whom?[/QUESTION][SQL]SELECT Package.Recipient, COUNT(Package.PackageNumber) AS package_count FROM Package GROUP BY Package.Recipient ORDER BY package_count ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Who sent more than one packages? List the client's name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Who sent more than one packages? List the client's name.[/QUESTION][SQL]SELECT Client.Recipient, COUNT(Package.PackageNumber) AS NumberOfPackages FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber GROUP BY Client.AccountNumber HAVING COUNT(Package.PackageNumber) > 1 ORDER BY NumberOfPackages DESC;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of all clients who sent more than one package?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of all clients who sent more than one package?[/QUESTION][SQL]SELECT Client.Recipient FROM Package WHERE Package.Sender IN (SELECT Package.Sender FROM Package GROUP BY Package.Sender HAVING COUNT(Package.PackageNumber) > 1);
### TaskGenerate a SQL query to answer [QUESTION]What are the Coordinates of planet Mars?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the Coordinates of planet Mars?[/QUESTION][SQL]SELECT Package.Contents FROM Package WHERE Package.Sender = 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the coordinates of the planet named Mars?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the coordinates of the planet named Mars?[/QUESTION][SQL]SELECT Package.Contents FROM Package WHERE Package.Sender = 1;
### TaskGenerate a SQL query to answer [QUESTION]List all Planets' names and coordinates in alphabetical order of name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all Planets' names and coordinates in alphabetical order of name.[/QUESTION][SQL]SELECT Planet.Recipient, p.Name, p.Coordinates FROM Planet p ORDER BY p.Name ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and coordinates of all planets in alphabetical order by name?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and coordinates of all planets in alphabetical order by name?[/QUESTION][SQL]SELECT Planet.Recipient, p.Name, p.Coordinates FROM Planet p ORDER BY p.Name ASC;
### TaskGenerate a SQL query to answer [QUESTION]List all shipment id under Phillip J. Fry's management.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all shipment id under Phillip J. Fry's management.[/QUESTION][SQL]SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Manager = (SELECT Employee.EmployeeID FROM Employee WHERE LOWER(Employee.Name) = 'phillip j. fry');
### TaskGenerate a SQL query to answer [QUESTION]What are the shipment IDs of every delivery managed by Phillip J Fry?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the shipment IDs of every delivery managed by Phillip J Fry?[/QUESTION][SQL]SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Manager = (SELECT EmployeeID FROM Employee WHERE LOWER(Name) = 'phillip j fry');
### TaskGenerate a SQL query to answer [QUESTION]List the dates of all shipments.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the dates of all shipments.[/QUESTION][SQL]SELECT Shipment.Shipment, Shipments.Date FROM Shipment;
### TaskGenerate a SQL query to answer [QUESTION]What are the dates of every shipment in the database?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the dates of every shipment in the database?[/QUESTION][SQL]SELECT Shipment.Shipment, Shipments.Date FROM Shipment;
### TaskGenerate a SQL query to answer [QUESTION]List all shipment ids for the planet Mars.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all shipment ids for the planet Mars.[/QUESTION][SQL]SELECT Shipment.Shipment FROM Shipment WHERE Shipments.Planet = (SELECT PlanetID FROM Planet WHERE LOWER(Name) ='mars');
### TaskGenerate a SQL query to answer [QUESTION]What are the shipment ids for the planet Mars?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the shipment ids for the planet Mars?[/QUESTION][SQL]SELECT Shipment.Shipment FROM Shipment WHERE Shipments.Planet = (SELECT PlanetID FROM Planet WHERE LOWER(Name) ='mars');
### TaskGenerate a SQL query to answer [QUESTION]List all shipment ids for the planet Mars and under the management of Turanga Leela.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all shipment ids for the planet Mars and under the management of Turanga Leela.[/QUESTION][SQL]SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Manager = (SELECT Employee.EmployeeID FROM Employee WHERE LOWER(Employee.Name) = 'turanga leela') AND Shipment.Planet = (SELECT PlanetID FROM Planet WHERE LOWER(Name) ='mars');
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of all shipments on the planet Mars that are managed by Turanga Leela?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of all shipments on the planet Mars that are managed by Turanga Leela?[/QUESTION][SQL]SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Manager = (SELECT Employee.EmployeeID FROM Employee WHERE LOWER(Employee.Name) = 'turanga leela') AND Shipment.Planet = (SELECT PlanetID FROM Planet WHERE LOWER(Name) ='mars');
### TaskGenerate a SQL query to answer [QUESTION]List all shipment ids on the planet Mars or under the management of Turanga Leela.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all shipment ids on the planet Mars or under the management of Turanga Leela.[/QUESTION][SQL]SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Planet = (SELECT PlanetID FROM Planet WHERE LOWER(Name) ='mars') OR Shipment.Manager IN (SELECT EmployeeID FROM Employee WHERE LOWER(Name) = 'turanga leela');
### TaskGenerate a SQL query to answer [QUESTION]What are the ids for all shipments on the planet Mars that Turanga Leela manages?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids for all shipments on the planet Mars that Turanga Leela manages?[/QUESTION][SQL]SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Manager = (SELECT Employee.EmployeeID FROM Employee WHERE LOWER(Employee.Name) = 'turanga leela') AND Shipment.Planet = (SELECT PlanetID FROM Planet WHERE LOWER(Name) ='mars');
### TaskGenerate a SQL query to answer [QUESTION]What is the total shipments in each planet? List the planet name and total shipments.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total shipments in each planet? List the planet name and total shipments.[/QUESTION][SQL]SELECT Planet.PackageNumber, COUNT(*) AS TotalShipments FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID GROUP BY Planet.PlanetID;
### TaskGenerate a SQL query to answer [QUESTION]How many shipments take place on each planet?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many shipments take place on each planet?[/QUESTION][SQL]SELECT Planet.PackageNumber, COUNT(*) AS NumberOfShipments FROM Shipment JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY PlaneT.PackageNumber;
### TaskGenerate a SQL query to answer [QUESTION]Which planet has most shipments? List the planet name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which planet has most shipments? List the planet name.[/QUESTION][SQL]SELECT Planet.Recipient FROM Shipment WHERE Shipment.Manager = 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the planet with the most shipments?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the planet with the most shipments?[/QUESTION][SQL]SELECT Planet.PackageNumber FROM Shipment WHERE ShipmentID IN (SELECT ShipmentID FROM Shipment GROUP BY ShipmentID ORDER BY COUNT(*) DESC LIMIT 1);
### TaskGenerate a SQL query to answer [QUESTION]List the manger's name and number of shipments under his management.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the manger's name and number of shipments under his management.[/QUESTION][SQL]SELECT Employee.Recipient, COUNT(*) AS num_shipments FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID GROUP BY Employee.Recipient;
### TaskGenerate a SQL query to answer [QUESTION]What are the number of shipments managed and names of each manager?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the number of shipments managed and names of each manager?[/QUESTION][SQL]SELECT Employee.Recipient, COUNT(*) AS Number_of_Shipments FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID GROUP BY Employee.Recipient ORDER BY Number_of_Shipments DESC;
### TaskGenerate a SQL query to answer [QUESTION]Calculate total weight of package shipped on Mars.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Calculate total weight of package shipped on Mars.[/QUESTION][SQL]SELECT Package.Weight FROM Package WHERE Package.Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'));
### TaskGenerate a SQL query to answer [QUESTION]what is the total weight of all packages shipped on Mars?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]what is the total weight of all packages shipped on Mars?[/QUESTION][SQL]SELECT Package.Weight FROM Package WHERE Package.Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'));
### TaskGenerate a SQL query to answer [QUESTION]Calculate total weight of package shipped in each planet. show the name of each planet.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Calculate total weight of package shipped in each planet. show the name of each planet.[/QUESTION][SQL]SELECT Planet.Recipient, SUM(Package.Weight) AS TotalWeight FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet AS PlaneT ON Shipment.Planet = Planet.PlanetID GROUP BY PlaneT.Name;
### TaskGenerate a SQL query to answer [QUESTION]what is the total package weight for each planet, list its name?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]what is the total package weight for each planet, list its name?[/QUESTION][SQL]SELECT Package.Weight, p.Name FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet AS p ON Shipment.Planet = p.PlanetID GROUP BY Package.Weight, p.Name ORDER BY Package.Weight DESC;
### TaskGenerate a SQL query to answer [QUESTION]Which planet has total weight of shipment greater than 30? List planet name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which planet has total weight of shipment greater than 30? List planet name.[/QUESTION][SQL]SELECT Planet.Recipient FROM Planet WHERE SUM(Package.Weight) > 30
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all planets tjat have a total shipment weight greater than 30?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all planets tjat have a total shipment weight greater than 30?[/QUESTION][SQL]SELECT Planet.PackageNumber, SUM(Package.Weight) AS TotalWeight FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID GROUP BY Package.PackageNumber HAVING SUM(Package.Weight) > 30 ORDER BY TotalWeight DESC;
### TaskGenerate a SQL query to answer [QUESTION]List package number of package shipped in planet Omicron Persei 8 and sent by Zapp Brannigan.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List package number of package shipped in planet Omicron Persei 8 and sent by Zapp Brannigan.[/QUESTION][SQL]SELECT PackageNumber FROM Package WHERE Sender IN (SELECT EmployeeID FROM Employee WHERE Name = 'Zapp Brannigan') AND Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8'));
### TaskGenerate a SQL query to answer [QUESTION]What are the number of packages sent by Zapp Brannigan and shipped on the Omicron Persei 8?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the number of packages sent by Zapp Brannigan and shipped on the Omicron Persei 8?[/QUESTION][SQL]SELECT PackageNumber FROM Package WHERE Sender IN (SELECT EmployeeID FROM Employee WHERE Name = 'Zapp Brannigan') AND Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8'));
### TaskGenerate a SQL query to answer [QUESTION]List package number of packages shipped in Omicron Persei 8 planet or sent by Zapp Brannigan.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List package number of packages shipped in Omicron Persei 8 planet or sent by Zapp Brannigan.[/QUESTION][SQL]SELECT PackageNumber FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8')) OR Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan');
### TaskGenerate a SQL query to answer [QUESTION]What are the number of packages shipped on Omicron Persei 8 planet or sent by Zapp Brannigan?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the number of packages shipped on Omicron Persei 8 planet or sent by Zapp Brannigan?[/QUESTION][SQL]SELECT PackageNumber FROM Package WHERE Sender = (SELECT EmployeeID FROM Employee WHERE Name = 'Zapp Brannigan') UNION SELECT PackageNumber FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8'));
### TaskGenerate a SQL query to answer [QUESTION]Which packages have weight between 10 and 30? List the package number and weight.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which packages have weight between 10 and 30? List the package number and weight.[/QUESTION][SQL]SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30;
### TaskGenerate a SQL query to answer [QUESTION]What are the package numbers and weights that are between 10 and 30?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the package numbers and weights that are between 10 and 30?[/QUESTION][SQL]SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30;
### TaskGenerate a SQL query to answer [QUESTION]Which employees do not have clearance in Mars? List employee's name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which employees do not have clearance in Mars? List employee's name.[/QUESTION][SQL]SELECT Employee.Recipient FROM Employee WHERE Employee.EmployeeID IN (SELECT Has_Clearance.Employee FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE LOWER(Planet.Name)!='mars')
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all employees who don't have clearance on Mars?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all employees who don't have clearance on Mars?[/QUESTION][SQL]SELECT Employee.Recipient FROM Employee WHERE Employee.EmployeeID IN (SELECT Has_Clearance.Employee FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE LOWER(Planet.Name)!='mars')
### TaskGenerate a SQL query to answer [QUESTION]Which employees have clearance in Omega III? List employees' name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which employees have clearance in Omega III? List employees' name.[/QUESTION][SQL]SELECT Employee.Recipient FROM Employee WHERE EXISTS (SELECT 1 FROM Has_Clearance WHERE Employee.EmployeeID = Has_Clearance.Employee AND Has_Clearance.Planet = (SELECT PlanetID FROM Planet WHERE LOWER(Name) = 'omega iii'));
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all employees with clearance on Omega III?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all employees with clearance on Omega III?[/QUESTION][SQL]SELECT Employee.Recipient, e.Name FROM Employee e JOIN Has_Clearance h ON e.EmployeeID = h.Employee WHERE LOWER(h.Planet) = 'omega iii' ORDER BY e.Name;
### TaskGenerate a SQL query to answer [QUESTION]Which planets that have exact one employee has clearance? List planets' name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which planets that have exact one employee has clearance? List planets' name.[/QUESTION][SQL]SELECT Planet.Recipient FROM Planet WHERE EXISTS (SELECT * FROM Has_Clearance WHERE Employee = 1 AND Planet = Planets.Recipient);
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all planets with one employee that has clearance?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all planets with one employee that has clearance?[/QUESTION][SQL]SELECT Planet.PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE
### TaskGenerate a SQL query to answer [QUESTION]Which employees have salaries between 5000 and 10000? List employees' name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which employees have salaries between 5000 and 10000? List employees' name.[/QUESTION][SQL]SELECT Employee.Recipient FROM Employee WHERE Employee.Salary BETWEEN 5000 AND 10000;
### TaskGenerate a SQL query to answer [QUESTION]What are the employees's names for those that have salaries between 5000 and 10000?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the employees's names for those that have salaries between 5000 and 10000?[/QUESTION][SQL]SELECT Employee.Recipient FROM Employee WHERE Employee.Salary BETWEEN 5000 AND 10000;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of employees whose salary is above the average salary or more than 5000.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of employees whose salary is above the average salary or more than 5000.[/QUESTION][SQL]SELECT Employee.Recipient, SUM(Package.Weight) AS total_weight FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID WHERE Shipment.Manager IN (SELECT EmployeeID FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee)) OR Shipment.Manager IN (SELECT EmployeeID FROM Employee WHERE Salary > 5000) GROUP BY Shipment.Manager;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all employees who have a salary greater than average or more than 5000?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all employees who have a salary greater than average or more than 5000?[/QUESTION][SQL]SELECT Employee.Recipient, SUM(Package.Weight) AS total_weight FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID WHERE Package.Sender IN (SELECT EmployeeID FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee)) OR Package.Sender > 5000 GROUP BY Package.Sender;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of employees who do not have clearance in Mars.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of employees who do not have clearance in Mars.[/QUESTION][SQL]SELECT Employee.Contents FROM Employee WHERE Employee.Name IN (SELECT DISTINCT e.Name FROM Employee e JOIN Has_Clearance hc ON e.EmployeeID = hc.Employee WHERE hc.Level > 0 AND hc.Planet = (SELECT p.PlanetID FROM Planet p WHERE LOWER(p.Name) ='mars'));
### TaskGenerate a SQL query to answer [QUESTION]What is the number of employees that do not have clearance on Mars?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the number of employees that do not have clearance on Mars?[/QUESTION][SQL]SELECT Employee.Contents FROM Employee WHERE Employee.Name IN (SELECT DISTINCT e.Name FROM Employee e JOIN Has_Clearance hc ON e.EmployeeID = hc.Employee WHERE hc.Level > 0 AND hc.Planet = (SELECT p.PlanetID FROM Planet p WHERE LOWER(p.Name) ='mars'));
### TaskGenerate a SQL query to answer [QUESTION]How many games are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many games are there?[/QUESTION][SQL]SELECT game.Game_ID FROM game;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of games.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of games.[/QUESTION][SQL]SELECT game.Game_ID FROM game;
### TaskGenerate a SQL query to answer [QUESTION]List the Title and Developers of all games ordered by units sold from large to small.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the Title and Developers of all games ordered by units sold from large to small.[/QUESTION][SQL]SELECT game.Game_ID, game.Title, game.Developers, game.Units_sold_Millions FROM game ORDER BY game.Units_sold_Millions DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles and developers of all games, sorted by units sold descending?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles and developers of all games, sorted by units sold descending?[/QUESTION][SQL]SELECT game.Game_ID, game.Title, game.Developers, game.Units_sold_Millions FROM game ORDER BY game.Units_sold_Millions DESC;
### TaskGenerate a SQL query to answer [QUESTION]What is the average units sold in millions of the games that are not developed by Nintendo?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average units sold in millions of the games that are not developed by Nintendo?[/QUESTION][SQL]SELECT game.Game_ID, AVG(g.Units_sold_Millions) AS Average_Units_Sold FROM game g WHERE g.Developers NOT ILIKE '%Nintendo%' GROUP BY g.Game_ID ORDER BY g.Game_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return the average number of units sold in millions for games not developed by Nintendo.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the average number of units sold in millions for games not developed by Nintendo.[/QUESTION][SQL]SELECT game.Game_ID, AVG(g.Units_sold_Millions) AS Average_Units_Sold FROM game g WHERE g.Developers NOT ILIKE '%Nintendo%' GROUP BY g.Game_ID ORDER BY g.Game_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and market districts of all platforms?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and market districts of all platforms?[/QUESTION][SQL]SELECT platform.Player_ID, plaform.Platform_name, plaform.Market_district FROM plaform;
### TaskGenerate a SQL query to answer [QUESTION]Return all platform names and corresponding market districts.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return all platform names and corresponding market districts.[/QUESTION][SQL]SELECT platform.Player_ID, plaform.Platform_name, plaform.Market_district FROM plaform;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and id of platforms whose download rank is 1?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and id of platforms whose download rank is 1?[/QUESTION][SQL]SELECT platform.Player_ID, plaform.Platform_name FROM Plaform WHERE Download_rank = 1;
### TaskGenerate a SQL query to answer [QUESTION]Return the names and ids of all platforms with the download rank of 1.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the names and ids of all platforms with the download rank of 1.[/QUESTION][SQL]SELECT platform.Player_ID, plafform.Platform_name FROM platform WHERE Download_rank = 1
### TaskGenerate a SQL query to answer [QUESTION]What are the maximum and minimum rank of the year of players.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the maximum and minimum rank of the year of players.[/QUESTION][SQL]SELECT player.Player_ID, MIN(PLAYER.Rank_of_the_year) AS min_rank, MAX(PLAYER.Rank_of_the_year) AS max_rank FROM PLAYER GROUP BY Player_ID;
### TaskGenerate a SQL query to answer [QUESTION]Give the maximum and minimum rank of the year across all players.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the maximum and minimum rank of the year across all players.[/QUESTION][SQL]SELECT player.Player_ID, MIN(PlayeR.Rank_of_the_year) AS min_rank, MAX(PlayeR.Rank_of_the_year) AS max_rank FROM PlayeR GROUP BY PlayeR.Player_ID;
### TaskGenerate a SQL query to answer [QUESTION]How many players have rank of the year smaller than 3?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many players have rank of the year smaller than 3?[/QUESTION][SQL]SELECT player.Player_ID FROM player WHERE player.Rank_of_the_year < 3;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of players that have a rank of year of at most 3.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of players that have a rank of year of at most 3.[/QUESTION][SQL]SELECT player.Player_ID, COUNT(*) AS total_players FROM player WHERE Rank_of_the_year <= 3 GROUP BY Player_ID;
### TaskGenerate a SQL query to answer [QUESTION]List all player names in ascending alphabetical order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all player names in ascending alphabetical order.[/QUESTION][SQL]SELECT player.Player_ID, player.Player_name FROM player ORDER BY player.Player_name ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all players in alphabetical order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all players in alphabetical order?[/QUESTION][SQL]SELECT player.Player_ID, player.Player_name FROM player ORDER BY player.Player_name ASC;
### TaskGenerate a SQL query to answer [QUESTION]List names and colleges of all players in descending order of rank of the year.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List names and colleges of all players in descending order of rank of the year.[/QUESTION][SQL]SELECT player.Player_ID, player.Player_name, player.College FROM player ORDER BY player.Rank_of_the_year DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and colleges of all players, ordered by rank of year descending?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and colleges of all players, ordered by rank of year descending?[/QUESTION][SQL]SELECT player.Player_ID, playeR.player_name, playeR.college FROM player playeR ORDER BY playeR.rank_of_the_year DESC;
### TaskGenerate a SQL query to answer [QUESTION]Please show the names and rank of players that have played the game titled "Super Mario World".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please show the names and rank of players that have played the game titled "Super Mario World".[/QUESTION][SQL]SELECT player.Player_ID, player.Player_name, player.Rank_of_the_year FROM player JOIN game_player ON player.Player_ID = game_player.Player_ID JOIN game ON game_player.Game_ID = game.Game_ID WHERE LOWER(game.Title) ='super mario world' ORDER BY player.Player_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and ranks of players who have played the game with the title "Super Mario World"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and ranks of players who have played the game with the title "Super Mario World"?[/QUESTION][SQL]SELECT player.Player_ID, player.Player_name, player.Rank_of_the_year FROM player JOIN game_player ON player.Player_ID = game_player.Player_ID JOIN game ON game_player.Game_ID = game.Game_ID WHERE LOWER(game.Title) ='super mario world' ORDER BY player.Player_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the distinct developer of games played by players that go to college "Auburn".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the distinct developer of games played by players that go to college "Auburn".[/QUESTION][SQL]SELECT game.Game_ID, gam.developers FROM game gam JOIN game_player gp ON gam.gam_id = gp.game_id JOIN player pl ON gp.player_id = pl.player_id WHERE LOWER(pl.college) = 'auburn' GROUP BY gam.gam_id, gam.developers;
### TaskGenerate a SQL query to answer [QUESTION]What are the different developers of games that are played by players that attend Auburn college?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different developers of games that are played by players that attend Auburn college?[/QUESTION][SQL]SELECT game.Game_ID, gaem.developers FROM game gaem JOIN game_player gp ON gaem.game_id = gp.game_id JOIN player pl ON gp.player_id = pl.player_id WHERE LOWER(pl.college) = 'auburn' GROUP BY gaem.gam_id, gaem.developers;
### TaskGenerate a SQL query to answer [QUESTION]What is the average number of units sold in millions of games played by players with position "Guard"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average number of units sold in millions of games played by players with position "Guard"?[/QUESTION][SQL]SELECT game.Player_ID, AVG(g.Units_sold_Millions) AS Average_Units_Sold FROM game_player gp JOIN game g ON gp.Game_ID = g.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE LOWER(p.Position) = 'guard' GROUP BY gp.Player_ID;
### TaskGenerate a SQL query to answer [QUESTION]Return the average number of units sold in millions among games played by players who have the position Guard.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the average number of units sold in millions among games played by players who have the position Guard.[/QUESTION][SQL]SELECT game.Game_ID, AVG(g.Units_sold_Millions) AS Average_Units_Sold FROM game_player gp JOIN game g ON gp.Game_ID = g.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE LOWER(p.Position) = 'guard' GROUP BY g.Game_ID;
### TaskGenerate a SQL query to answer [QUESTION]Please list the title and platform name of games.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please list the title and platform name of games.[/QUESTION][SQL]SELECT game.Game_ID, game.Title, platform.Platform_name FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles and platform names of all games?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles and platform names of all games?[/QUESTION][SQL]SELECT game.Game_ID, game.Title, platform.Platform_name FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID;
### TaskGenerate a SQL query to answer [QUESTION]Please list the title of games with platforms that have market district in Asia or USA.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please list the title of games with platforms that have market district in Asia or USA.[/QUESTION][SQL]SELECT game.Game_ID, game.title FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID WHERE LOWER(platform.market_district) IN ('asia', 'usa') ORDER BY game.gam_id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles of games that have platforms in the market districts of Asia or the USA?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles of games that have platforms in the market districts of Asia or the USA?[/QUESTION][SQL]SELECT game.Game_ID, game.Title FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID WHERE LOWER(platform.market_district) IN ('asia', 'usa') ORDER BY game.title NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the name of each franchise and the number of games belonging to that franchise.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the name of each franchise and the number of games belonging to that franchise.[/QUESTION][SQL]SELECT game.Game_ID, gaem.Franchise, COUNT(gam.Game_ID) AS Number_of_Games FROM game gam JOIN game gaem ON gam.Franchise = gaem.Franchise GROUP BY gaem.Franchise ORDER BY Number_of_Games DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many games are there from each Franchise?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many games are there from each Franchise?[/QUESTION][SQL]SELECT game.Game_ID, gaime.Franchise, COUNT(gaime.Game_ID) AS number_of_games FROM gaime GROUP BY gaime.Franchise ORDER BY number_of_games DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the name of franchise that have the most number of games.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the name of franchise that have the most number of games.[/QUESTION][SQL]SELECT game.Game_ID, gaem.Franchise FROM game gaem JOIN (SELECT Game_ID, COUNT(*) AS num_games FROM game GROUP BY Game_ID ORDER BY num_games DESC LIMIT 1) AS max_game ON gaem.Game_ID = max_game.Game_ID;
### TaskGenerate a SQL query to answer [QUESTION]Which franchise has the most games?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which franchise has the most games?[/QUESTION][SQL]SELECT game.Game_ID, COUNT(gam.Franchise) AS Franchise_Count FROM gam WHERE gam.Franchise IS NOT NULL GROUP BY gam.Franchise ORDER BY Franchise_Count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List the names of franchises that have at least two games.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of franchises that have at least two games.[/QUESTION][SQL]SELECT game.Game_ID, gaem.Franchise FROM game gaem JOIN (SELECT Game_ID, Franchise FROM game GROUP BY Game_ID, Franchise HAVING COUNT(Game_ID) >= 2) AS gaem ON gaem.Game_ID = gaem.Game_ID;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of franchises that have two or more games?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of franchises that have two or more games?[/QUESTION][SQL]SELECT game.Game_ID, gaem.Franchise FROM game AS gaem JOIN (SELECT Game_ID, COUNT(*) AS num_games FROM game GROUP BY Game_ID HAVING COUNT(*) > 1) AS gaem2 ON gaem.Game_ID = gaem2.Game_ID ORDER BY gaem.Franchise;
### TaskGenerate a SQL query to answer [QUESTION]List the name of players that do not play any game.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the name of players that do not play any game.[/QUESTION][SQL]SELECT player.Player_ID, player.Player_name FROM player WHERE NOT EXISTS (SELECT 1 FROM game_player gp WHERE gp.Player_ID = player.Player_ID)
### TaskGenerate a SQL query to answer [QUESTION]What are the names of players who do not play any games?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of players who do not play any games?[/QUESTION][SQL]SELECT player.Player_ID, player.Player_name FROM player WHERE NOT EXISTS (SELECT 1 FROM game_player gp WHERE gp.Player_ID = player.Player_ID)
### TaskGenerate a SQL query to answer [QUESTION]Show the title of games that are played by both players from college "Oklahoma" and players from college "Auburn".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the title of games that are played by both players from college "Oklahoma" and players from college "Auburn".[/QUESTION][SQL]SELECT game.Game_ID, game.Title FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID WHERE game_player.Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Oklahoma') AND game_player.Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Auburn');
### TaskGenerate a SQL query to answer [QUESTION]What are the titles of games that are played by players from Oklahoma college or Auburn college?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles of games that are played by players from Oklahoma college or Auburn college?[/QUESTION][SQL]SELECT game.Game_ID, game.Title FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE LOWER(player.College) IN ('oklahoma', 'auburn') GROUP BY game.Game_ID, game.Title ORDER BY game.Game_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show all distinct franchises of games.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all distinct franchises of games.[/QUESTION][SQL]SELECT game.Game_ID, gaime.Franchise FROM gaime
### TaskGenerate a SQL query to answer [QUESTION]What are all the distinct franchises?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all the distinct franchises?[/QUESTION][SQL]SELECT game.Game_ID, gaem.Franchise FROM game gaem;
### TaskGenerate a SQL query to answer [QUESTION]Show the title of games that are not played by any player who is in the Guard position.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the title of games that are not played by any player who is in the Guard position.[/QUESTION][SQL]SELECT game.Game_ID, gametitle FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID WHERE game_player.Player_ID NOT IN (SELECT Player_ID FROM player WHERE LOWER(Position) = 'guard') ORDER BY gametitle;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles of games not played by any players who play the Guard position?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles of games not played by any players who play the Guard position?[/QUESTION][SQL]SELECT game.Game_ID, gametitle FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID WHERE game_player.Player_ID NOT IN (SELECT Player_ID FROM player WHERE LOWER(Position) = 'guard') ORDER BY gametitle;
### TaskGenerate a SQL query to answer [QUESTION]list all the names of press in descending order of the profit of the year.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]list all the names of press in descending order of the profit of the year.[/QUESTION][SQL]SELECT press.Press_ID, press.Name, press.Year_Profits_billion FROM press ORDER BY press.Year_Profits_billion DESC;
### TaskGenerate a SQL query to answer [QUESTION]Sorted all the press by year profits in descending order, and return press names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Sorted all the press by year profits in descending order, and return press names.[/QUESTION][SQL]SELECT press.Book_Series FROM press WHERE press.Year_Profits_billion > 0 ORDER BY press.Year_Profits_billion DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the publishers that made more than 15 billion profits each year or 1 billion each month?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the publishers that made more than 15 billion profits each year or 1 billion each month?[/QUESTION][SQL]SELECT press.Press_ID, press.Name FROM press WHERE (press.Year_Profits_billion > 15 OR press.Month_Profits_billion > 1);
### TaskGenerate a SQL query to answer [QUESTION]Find the press whose yearly profit is more than 15 billion or whose monthly profit is more than 1 billion. Return the press names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the press whose yearly profit is more than 15 billion or whose monthly profit is more than 1 billion. Return the press names.[/QUESTION][SQL]SELECT press.Press_ID, press.Name FROM press WHERE (press.Year_Profits_billion > 15 OR press.Month_Profits_billion > 1) ORDER BY press.Press_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]what are the average and maximum profit of a year for all presses?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]what are the average and maximum profit of a year for all presses?[/QUESTION][SQL]SELECT press.Press_ID, AVG(press.Year_Profits_billion) AS avg_yearly_profit, MAX(press.Year_Profits_billion) AS max_yearly_profit FROM press GROUP BY press.Press_ID ORDER BY press.Press_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the average and maximum yearly profit for each press.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the average and maximum yearly profit for each press.[/QUESTION][SQL]SELECT press.Press_ID, AVG(press.Year_Profits_billion) AS avg_yearly_profit, MAX(press.Year_Profits_billion) AS max_yearly_profit FROM press GROUP BY press.Press_ID ORDER BY press.Press_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the publisher whose monthly profit is the highest.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the publisher whose monthly profit is the highest.[/QUESTION][SQL]SELECT press.Press_ID, press.Name FROM press ORDER BY press.Month_Profits_billion DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which press has the largest monthly profit? Give me the press name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which press has the largest monthly profit? Give me the press name.[/QUESTION][SQL]SELECT press.Book_Series FROM press WHERE press.Month_Profits_billion = (SELECT MAX(press.Month_Profits_billion) FROM press);
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the publisher whose monthly profit is the highest or the lowest.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the publisher whose monthly profit is the highest or the lowest.[/QUESTION][SQL]SELECT press.Press_ID, press.Name FROM press ORDER BY press.Month_Profits_billion DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the press that makes the highest monthly profit or the lowest monthly profit?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the press that makes the highest monthly profit or the lowest monthly profit?[/QUESTION][SQL]SELECT press.Press_ID, press.Name, MAX(press.Month_Profits_billion) AS max_monthly_profit, MIN(press.Month_Profits_billion) AS min_monthly_profit FROM press GROUP BY press.Press_ID, press.Name ORDER BY max_monthly_profit DESC NULLS LAST, min_monthly_profit ASC NULLS LAST LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]how many authors are under age 30?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]how many authors are under age 30?[/QUESTION][SQL]SELECT author.Book_ID, COUNT(*) AS number_of_authors FROM author JOIN book ON author.Author_ID = book.Author_ID WHERE author.Age < 30 GROUP BY author.BooK_ID;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of authors of age below 30.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of authors of age below 30.[/QUESTION][SQL]SELECT author.Book_ID, COUNT(*) AS number_of_authors FROM author JOIN book ON author.Author_ID = book.Author_ID WHERE author.Age < 30 GROUP BY book.Book_ID;
### TaskGenerate a SQL query to answer [QUESTION]find the average age of authors for each gender.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]find the average age of authors for each gender.[/QUESTION][SQL]SELECT author.Book_ID, AVG(a.author.age) AS average_age FROM author a GROUP BY a.author.gender
### TaskGenerate a SQL query to answer [QUESTION]For each gender, return gender and the average age of authors.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each gender, return gender and the average age of authors.[/QUESTION][SQL]SELECT author.Book_ID, AVG(a.author.age) AS average_age FROM author a GROUP BY a.author.gender
### TaskGenerate a SQL query to answer [QUESTION]find the number of authors who are older than 30 for each gender.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]find the number of authors who are older than 30 for each gender.[/QUESTION][SQL]SELECT author.Book_ID, COUNT(*) AS total_books FROM author JOIN book ON author.author_id = book.author_id WHERE age > 30 GROUP BY author.gender;
### TaskGenerate a SQL query to answer [QUESTION]How many authors are of age above 30 for each gender?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many authors are of age above 30 for each gender?[/QUESTION][SQL]SELECT author.Book_ID, COUNT(*) AS number_of_authors FROM author JOIN book ON author.Author_ID = book.Author_ID WHERE author.Age > 30 GROUP BY author.Gender;
### TaskGenerate a SQL query to answer [QUESTION]List all book titles in the order of their release date from the most recent to the past.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all book titles in the order of their release date from the most recent to the past.[/QUESTION][SQL]SELECT book.Title FROM book WHERE book.Release_date IS NOT NULL ORDER BY book.Release_date DESC;
### TaskGenerate a SQL query to answer [QUESTION]Sort all the books in descending order of release date, and return the book titles.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Sort all the books in descending order of release date, and return the book titles.[/QUESTION][SQL]SELECT book.Title FROM book WHERE book.Release_date IS NOT NULL ORDER BY book.Release_date DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of books for each series.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of books for each series.[/QUESTION][SQL]SELECT book.Book_Series, COUNT(*) AS book_count FROM book GROUP BY Book_Series ORDER BY book_count DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many books does each book series have? Return the counts and book series.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many books does each book series have? Return the counts and book series.[/QUESTION][SQL]SELECT book.Book_Series, COUNT(b.book_id) AS number_of_books FROM book b GROUP BY book.Book_Series ORDER BY number_of_books DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the titles and publish dates of the top 5 best sale books.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the titles and publish dates of the top 5 best sale books.[/QUESTION][SQL]SELECT book.Title, book.Release_date FROM book WHERE CAST(book.Sale_Amount AS INTEGER) > (SELECT CAST(Sale_Amount AS INTEGER) FROM book ORDER BY CAST(Sale_Amount AS INTEGER) DESC LIMIT 1 OFFSET 4) ORDER BY CAST(book.Sale_Amount AS INTEGER) DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the 5 best books in terms of sale amount? Give me their titles and release dates.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the 5 best books in terms of sale amount? Give me their titles and release dates.[/QUESTION][SQL]SELECT book.Title, book.Release_date FROM book WHERE CAST(book.Sale_Amount AS integer) > ALL (SELECT CAST(Sale_Amount AS integer) FROM book) ORDER BY CAST(book.Sale_Amount AS integer) DESC LIMIT 5;
### TaskGenerate a SQL query to answer [QUESTION]Find the book series that have some book selling more than 1000 and some book less 500.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the book series that have some book selling more than 1000 and some book less 500.[/QUESTION][SQL]SELECT book.Book_Series FROM book WHERE CAST(book.Sale_Amount AS INTEGER) > 1000 AND CAST(book.Sale_Amount AS INTEGER) < 500 GROUP BY book.Book_Series;
### TaskGenerate a SQL query to answer [QUESTION]Which book series contain both books with sale amount above 1000 and books with sale amount below 500?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which book series contain both books with sale amount above 1000 and books with sale amount below 500?[/QUESTION][SQL]SELECT book.Book_Series FROM book WHERE CAST(book.Sale_Amount AS integer) > 1000 AND CAST(book.Sale_Amount AS integer) < 500 GROUP BY book.Book_Series;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of authors who publish their books in both "MM" and "LT" series.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of authors who publish their books in both "MM" and "LT" series.[/QUESTION][SQL]SELECT author.Book_Series FROM author WHERE Book_Series IN ('MM', 'LT')
### TaskGenerate a SQL query to answer [QUESTION]Which authors publish books in both "MM" and "LT" series? Give me the author names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which authors publish books in both "MM" and "LT" series? Give me the author names.[/QUESTION][SQL]SELECT author.Book_Series FROM book WHERE Book_Series IN ('MM', 'LT') GROUP BY Author_ID HAVING COUNT(DISTINCT Book_Series) = 2;
### TaskGenerate a SQL query to answer [QUESTION]Find the name and age of the authors who do not have any book in the record.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name and age of the authors who do not have any book in the record.[/QUESTION][SQL]SELECT author.Author_ID, author.Name, author.Age FROM author WHERE author.Author_ID NOT IN (SELECT book.Author_ID FROM book) ORDER BY author.Author_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which authors in the record have not published any books? Give me their names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which authors in the record have not published any books? Give me their names.[/QUESTION][SQL]SELECT author.Book_Series FROM author WHERE NOT EXISTS (SELECT 1 FROM book WHERE book.Author_ID = author.Author_ID)
### TaskGenerate a SQL query to answer [QUESTION]Find the names of authors who have more than one book in the database.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of authors who have more than one book in the database.[/QUESTION][SQL]SELECT author.Book_ID, author.Name FROM author JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Name HAVING COUNT(book.Book_ID) > 1;
### TaskGenerate a SQL query to answer [QUESTION]Which authors have published more than 1 book according to the database? Give me their names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which authors have published more than 1 book according to the database? Give me their names.[/QUESTION][SQL]SELECT author.Book_Series FROM author WHERE author.BooK_Series > 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the title, author name, and publisher name for the top 3 best sales books.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the title, author name, and publisher name for the top 3 best sales books.[/QUESTION][SQL]SELECT book.Title, author.Name AS Author, press.Name AS Publisher FROM book JOIN author ON book.Author_ID = author.Author_ID JOIN press ON book.Press_ID = press.Press_ID ORDER BY CAST(book.Sale_Amount AS INTEGER) DESC LIMIT 3;
### TaskGenerate a SQL query to answer [QUESTION]What are the 3 best selling books? Show their titles, author names, and press names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the 3 best selling books? Show their titles, author names, and press names.[/QUESTION][SQL]SELECT book.Title, author.Name AS Author, press.Name AS Press FROM book JOIN author ON book.Author_ID = author.Author_ID JOIN press ON book.Press_ID = press.Press_ID ORDER BY CAST(book.Sale_Amount AS INTEGER) DESC LIMIT 3;
### TaskGenerate a SQL query to answer [QUESTION]Find the name and total book sale amount of each press.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name and total book sale amount of each press.[/QUESTION][SQL]SELECT press.Press_ID, press.Name, SUM(CAST(book.Sale_Amount AS integer)) AS Total_Sales FROM book JOIN press ON book.Press_ID = press.Press_ID GROUP BY press.Press_ID, press.Name ORDER BY Total_Sales DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the name and total book sale amount of each press?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the name and total book sale amount of each press?[/QUESTION][SQL]SELECT press.Press_ID, press.Name, SUM(CAST(book.Sale_Amount AS integer)) AS Total_Sales FROM book JOIN press ON book.Press_ID = press.Press_ID GROUP BY press.Press_ID, press.Name ORDER BY Total_Sales DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of books that are sold more than 1000 for each publisher. List the press name as well.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of books that are sold more than 1000 for each publisher. List the press name as well.[/QUESTION][SQL]SELECT press.Press_ID, press.Name AS Press_Name, COUNT(*) AS Number_of_Books FROM book JOIN press ON book.Press_ID = press.Press_ID WHERE CAST(book.Sale_Amount AS integer) > 1000 GROUP BY press.Press_ID, press.Name ORDER BY Number_of_Books DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]For each press, return its name and the number of books that have sale amount above 1000.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each press, return its name and the number of books that have sale amount above 1000.[/QUESTION][SQL]SELECT press.Press_ID, COUNT(*) AS num_books FROM book JOIN press ON book.Press_ID = press.Press_ID WHERE CAST(book.Sale_Amount AS integer) > 1000 GROUP BY press.Press_ID ORDER BY num_books DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the author of best selling book?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the author of best selling book?[/QUESTION][SQL]SELECT book.Title, a.Name FROM book bo INNER JOIN author a ON bo.Author_ID = a.Author_ID ORDER BY bo.Sale_Amount DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Who wrote the best selling book? Give me the author name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Who wrote the best selling book? Give me the author name.[/QUESTION][SQL]SELECT book.Author_ID, (SELECT Name FROM author WHERE Author_ID = book.Author_ID) AS Author_Name FROM book book ORDER BY CAST(book.Sale_Amount AS INTEGER) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]find the name and gender of the author who published the most books.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]find the name and gender of the author who published the most books.[/QUESTION][SQL]SELECT author.Book_ID, COUNT(*) AS number_of_books FROM book JOIN author ON book.author_id = author.author_id GROUP BY author.author_id ORDER BY number_of_books DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Who wrote the largest number of books? Give me the author name and gender.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Who wrote the largest number of books? Give me the author name and gender.[/QUESTION][SQL]SELECT author.Book_ID, COUNT(*) AS total_books FROM book JOIN author ON book.author_id = author.author_id GROUP BY author.name ORDER BY total_books DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the names of the authors who did not have any book with the "Accor" press.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of the authors who did not have any book with the "Accor" press.[/QUESTION][SQL]SELECT author.Book_ID, author.Name FROM author JOIN book ON author.Author_ID = book.Author_ID WHERE book.Press_ID NOT IN (SELECT Press_ID FROM book WHERE Name = 'Accor')
### TaskGenerate a SQL query to answer [QUESTION]Which authors have never published under the "Accor" press? Give me their names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which authors have never published under the "Accor" press? Give me their names.[/QUESTION][SQL]SELECT author.Book_Series FROM author WHERE NOT EXISTS (SELECT 1 FROM book WHERE book.Author_ID = author.Author_ID AND book.Press_ID IN (SELECT Press_ID FROM press WHERE Name = 'Accor'))
### TaskGenerate a SQL query to answer [QUESTION]Find the name and the yearly profit in billion for press that published more than two books.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name and the yearly profit in billion for press that published more than two books.[/QUESTION][SQL]SELECT press.Press_ID, press.Name, SUM(press.Year_Profits_billion) AS total_yearly_profit FROM press JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Press_ID, press.Name HAVING COUNT(book.Book_ID) > 2 ORDER BY total_yearly_profit DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the press that published more than two books, and return its name and yearly profit in billion.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the press that published more than two books, and return its name and yearly profit in billion.[/QUESTION][SQL]SELECT press.Press_ID, press.Name, SUM(press.Year_Profits_billion) AS total_yearly_profit FROM book JOIN press ON book.Press_ID = press.Press_ID GROUP BY press.Press_ID, press.Name HAVING COUNT(book.Book_ID) > 2 ORDER BY total_yearly_profit DESC NULLS LAST LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How many authors do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many authors do we have?[/QUESTION][SQL]SELECT Authors.other_details FROM Authors;
### TaskGenerate a SQL query to answer [QUESTION]Show all author names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all author names.[/QUESTION][SQL]SELECT document_id, author_name FROM Documents ORDER BY document_id;
### TaskGenerate a SQL query to answer [QUESTION]Show the names and other details for all authors.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the names and other details for all authors.[/QUESTION][SQL]SELECT Authors.other_details FROM Authors;
### TaskGenerate a SQL query to answer [QUESTION]Show the other details for the author Addison Denesik.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the other details for the author Addison Denesik.[/QUESTION][SQL]SELECT document_id, document_name, document_description FROM Documents WHERE author_name = 'Addison Denesik';
### TaskGenerate a SQL query to answer [QUESTION]Show the number of documents.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the number of documents.[/QUESTION][SQL]SELECT document_id FROM Documents;
### TaskGenerate a SQL query to answer [QUESTION]Who is the author of the document with id 4?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Who is the author of the document with id 4?[/QUESTION][SQL]SELECT document_id, author_name FROM Documents WHERE document_id = 4;
### TaskGenerate a SQL query to answer [QUESTION]Who is the author of the document "Travel to Brazil"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Who is the author of the document "Travel to Brazil"?[/QUESTION][SQL]SELECT document_id, author_name FROM Documents WHERE LOWER(document_name) = 'travel to brazil';
### TaskGenerate a SQL query to answer [QUESTION]How many documents does has the author Era Kerluke written?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many documents does has the author Era Kerluke written?[/QUESTION][SQL]SELECT document_id FROM Documents WHERE LOWER(author_name) = 'era kerluke';
### TaskGenerate a SQL query to answer [QUESTION]Show the names and descriptions for all documents.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the names and descriptions for all documents.[/QUESTION][SQL]SELECT document_id, document_name, document_description FROM Documents;
### TaskGenerate a SQL query to answer [QUESTION]Show the ids and names for all documents by author Bianka Cummings.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the ids and names for all documents by author Bianka Cummings.[/QUESTION][SQL]SELECT document_id, document_name FROM Documents WHERE LOWER(author_name) = 'bianka cummings' ORDER BY document_id;
### TaskGenerate a SQL query to answer [QUESTION]Show the author name and details for the document "Travel to China".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the author name and details for the document "Travel to China".[/QUESTION][SQL]SELECT document_id, author_name, other_details FROM Documents WHERE document_name = 'Travel to China';
### TaskGenerate a SQL query to answer [QUESTION]Show all author names and number of documents corresponding to each.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all author names and number of documents corresponding to each.[/QUESTION][SQL]SELECT document_id, COUNT(*) AS document_count FROM Documents GROUP BY document_id ORDER BY document_id;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the author with most number of documents?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the author with most number of documents?[/QUESTION][SQL]SELECT document_id, COUNT(document_id) AS document_count FROM Documents GROUP BY document_id ORDER BY document_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show the names for authors with at least two documents.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the names for authors with at least two documents.[/QUESTION][SQL]SELECT document_id, author_name FROM Documents GROUP BY document_id, author_name HAVING COUNT(document_id) >= 2;
### TaskGenerate a SQL query to answer [QUESTION]How many business processes do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many business processes do we have?[/QUESTION][SQL]SELECT Business_Processes.process_id FROM Business_Processes;
### TaskGenerate a SQL query to answer [QUESTION]Show the next process id, process name, process description for process with id 9.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the next process id, process name, process description for process with id 9.[/QUESTION][SQL]SELECT process_id, process_name, process_description FROM Business_Processes WHERE process_id = 9;
### TaskGenerate a SQL query to answer [QUESTION]What is the process name for the next process of the process with id 9?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the process name for the next process of the process with id 9?[/QUESTION][SQL]SELECT process_id FROM Business_Processes WHERE process_id = (SELECT next_process_id FROM Business_Processes WHERE process_id = 9);
### TaskGenerate a SQL query to answer [QUESTION]Show the number of process outcomes.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the number of process outcomes.[/QUESTION][SQL]SELECT process_id, COUNT(process_outcome_code) AS outcome_count FROM Documents_Processes GROUP BY process_id ORDER BY outcome_count DESC;
### TaskGenerate a SQL query to answer [QUESTION]List the codes and descriptions for all process outcomes.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the codes and descriptions for all process outcomes.[/QUESTION][SQL]SELECT process_id, process_outcome_code, process_outcome_description FROM Process_Outcomes;
### TaskGenerate a SQL query to answer [QUESTION]What is the description for the process outcome code working?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the description for the process outcome code working?[/QUESTION][SQL]SELECT process_id FROM Process_Outcomes WHERE process_outcome_code = 'working';
### TaskGenerate a SQL query to answer [QUESTION]Show the number of process status.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the number of process status.[/QUESTION][SQL]SELECT process_id, COUNT(process_status_code) AS total_processes FROM Process_Status GROUP BY process_id ORDER BY total_processes DESC;
### TaskGenerate a SQL query to answer [QUESTION]List the codes and descriptions for all process status.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the codes and descriptions for all process status.[/QUESTION][SQL]SELECT process_id, process_name FROM Business_Processes;
### TaskGenerate a SQL query to answer [QUESTION]What is the description for process status code ct?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the description for process status code ct?[/QUESTION][SQL]SELECT process_id FROM Process_Status WHERE process_status_code = 'ct';
### TaskGenerate a SQL query to answer [QUESTION]How many staff do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many staff do we have?[/QUESTION][SQL]SELECT staff_id FROM Staff;
### TaskGenerate a SQL query to answer [QUESTION]Show the ids and details for all staff.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the ids and details for all staff.[/QUESTION][SQL]SELECT staff_id, staff_details FROM Staff
### TaskGenerate a SQL query to answer [QUESTION]What are the details for the staff member with id 100.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the details for the staff member with id 100.[/QUESTION][SQL]SELECT staff_id, staff_details FROM Staff WHERE staff_id = 100;
### TaskGenerate a SQL query to answer [QUESTION]Show the number of staff roles.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the number of staff roles.[/QUESTION][SQL]SELECT staff_role_code, COUNT(*) AS role_count FROM Staff_in_Processes GROUP BY staff_role_code ORDER BY role_count DESC;
### TaskGenerate a SQL query to answer [QUESTION]List the codes and descriptions for all staff roles.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the codes and descriptions for all staff roles.[/QUESTION][SQL]SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles ORDER BY staff_role_code;
### TaskGenerate a SQL query to answer [QUESTION]What is the description for staff role code HR?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the description for staff role code HR?[/QUESTION][SQL]SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code = 'HR'
### TaskGenerate a SQL query to answer [QUESTION]How many documents have a process?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many documents have a process?[/QUESTION][SQL]SELECT document_id FROM Documents WHERE document_id IN (SELECT document_id FROM Documents_Processes);
### TaskGenerate a SQL query to answer [QUESTION]List all process ids with a document.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all process ids with a document.[/QUESTION][SQL]SELECT document_id FROM Documents;
### TaskGenerate a SQL query to answer [QUESTION]Show all document ids without a process.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all document ids without a process.[/QUESTION][SQL]SELECT document_id FROM Documents WHERE document_id NOT IN (SELECT document_id FROM Documents_Processes);
### TaskGenerate a SQL query to answer [QUESTION]List all process ids with no document.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all process ids with no document.[/QUESTION][SQL]SELECT process_id FROM Business_Processes WHERE process_id NOT IN (SELECT DISTINCT process_id FROM Documents_Processes);
### TaskGenerate a SQL query to answer [QUESTION]What is the process outcome description and process status description for the document with id 0?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the process outcome description and process status description for the document with id 0?[/QUESTION][SQL]SELECT document_id, process_outcome_description, process_status_description FROM Documents_Processes WHERE document_id = 0;
### TaskGenerate a SQL query to answer [QUESTION]What is the process name for the document "Travel to Brazil"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the process name for the document "Travel to Brazil"?[/QUESTION][SQL]SELECT document_id, process_name FROM Documents JOIN Documents_Processes USING(document_id) JOIN Business_Processes USING(process_id) WHERE document_name = 'Travel to Brazil';
### TaskGenerate a SQL query to answer [QUESTION]Show all process ids and the number of documents in each process.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all process ids and the number of documents in each process.[/QUESTION][SQL]SELECT process_id, COUNT(document_id) AS document_count FROM Documents_Processes GROUP BY process_id ORDER BY process_id;
### TaskGenerate a SQL query to answer [QUESTION]How many staff are the document with id 0 and process with id 9.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many staff are the document with id 0 and process with id 9.[/QUESTION][SQL]SELECT staff_id FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9;
### TaskGenerate a SQL query to answer [QUESTION]Show all staff ids and the number of document processes for each staff.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all staff ids and the number of document processes for each staff.[/QUESTION][SQL]SELECT staff_id, COUNT(*) AS num_processes FROM Staff_in_Processes GROUP BY staff_id ORDER BY staff_id;
### TaskGenerate a SQL query to answer [QUESTION]Show all staff role codes and the number of document processes for each role.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all staff role codes and the number of document processes for each role.[/QUESTION][SQL]SELECT staff_role_code, COUNT(*) AS num_processes FROM Staff_in_Processes GROUP BY staff_role_code ORDER BY num_processes DESC;
### TaskGenerate a SQL query to answer [QUESTION]How many different roles does the staff with id 3 have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different roles does the staff with id 3 have?[/QUESTION][SQL]SELECT staff_role_code FROM Staff_in_Processes WHERE staff_id = 3 GROUP BY staff_role_code;
### TaskGenerate a SQL query to answer [QUESTION]How many agencies do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many agencies do we have?[/QUESTION][SQL]SELECT Agencies.meeting_id FROM Agencies;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of agencies.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of agencies.[/QUESTION][SQL]SELECT Agencies.meeting_id FROM Agencies;
### TaskGenerate a SQL query to answer [QUESTION]Show all agency ids and details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all agency ids and details.[/QUESTION][SQL]SELECT Agencies.staff_id, Agencies.agency_details FROM Staff JOIN Agencies ON Staff.agency_id = Agencies.agency_id;
### TaskGenerate a SQL query to answer [QUESTION]What are all the agency ids and details?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all the agency ids and details?[/QUESTION][SQL]SELECT Agencies.staff_id, Agencies.agency_details FROM Staff JOIN Agencies ON Staff.agency_id = Agencies.agency_id;
### TaskGenerate a SQL query to answer [QUESTION]Show the number of clients.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the number of clients.[/QUESTION][SQL]SELECT Clients.meeting_id, COUNT(DISTINCT Meetings.client_id) AS total_clients FROM Meetings JOIN Clients ON Meetings.client_id = Clients.client_id GROUP BY Meetings.meeting_id ORDER BY total_clients DESC;
### TaskGenerate a SQL query to answer [QUESTION]How many clients are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many clients are there?[/QUESTION][SQL]SELECT Clients.staff_id FROM Clients;
### TaskGenerate a SQL query to answer [QUESTION]List all client ids and client details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all client ids and client details.[/QUESTION][SQL]SELECT meeting_id, client_details FROM Meetings;
### TaskGenerate a SQL query to answer [QUESTION]What are all the client ids and details?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all the client ids and details?[/QUESTION][SQL]SELECT meeting_id, client_id, meeting_outcome, meeting_type, billable_yn, start_date_time, end_date_time, purpose_of_meeting, other_details FROM Meetings;
### TaskGenerate a SQL query to answer [QUESTION]Show agency ids and the number of clients for each agency.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show agency ids and the number of clients for each agency.[/QUESTION][SQL]SELECT Agencies.staff_id, COUNT(Clients.client_id) AS client_count FROM Clients JOIN Agencies ON Clients.agency_id = Agencies.agency_id GROUP BY Agencies.staff_id ORDER BY client_count DESC;
### TaskGenerate a SQL query to answer [QUESTION]How many clients does each agency have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many clients does each agency have?[/QUESTION][SQL]SELECT Agencies.staff_id, COUNT(Clients.client_id) AS number_of_clients FROM Agencies JOIN Staff ON Agencies.agency_id = Staff.agency_id JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.staff_id ORDER BY number_of_clients DESC;
### TaskGenerate a SQL query to answer [QUESTION]What is the agency id and details with most number of clients?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the agency id and details with most number of clients?[/QUESTION][SQL]SELECT Agencies.staff_id, COUNT(Clients.client_id) AS client_count FROM Agencies JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.staff_id ORDER BY client_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Return the agency id and details for the agency with the greatest number of clients.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the agency id and details for the agency with the greatest number of clients.[/QUESTION][SQL]SELECT Agencies.staff_id, COUNT(Clients.client_id) AS client_count FROM Agencies JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id ORDER BY client_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show agency ids and details with at least 2 clients.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show agency ids and details with at least 2 clients.[/QUESTION][SQL]SELECT Agencies.staff_id, COUNT(Clients.client_id) AS client_count FROM Agencies JOIN Staff ON Agencies.agency_id = Staff.agency_id JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id HAVING COUNT(Clients.client_id) >= 2 ORDER BY client_count DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the agency ids and details agencies with at least 2 clients?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the agency ids and details agencies with at least 2 clients?[/QUESTION][SQL]SELECT Agencies.staff_id, Agencies.agency_details FROM Agencies JOIN Staff ON Agencies.staff_id = Staff.staff_id WHERE Agencies.staff_id IN (SELECT Clients.agency_id FROM Clients GROUP BY Clients.agency_id HAVING COUNT(Clients.client_id) >= 2);
### TaskGenerate a SQL query to answer [QUESTION]Show agency details for client with detail 'Mac'.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show agency details for client with detail 'Mac'.[/QUESTION][SQL]SELECT Agencies.staff_id, Agencies.agency_details FROM Clients JOIN Agencies ON Clients.agency_id = Agencies.agency_id WHERE Clients.client_details ilike '%Mac%'
### TaskGenerate a SQL query to answer [QUESTION]What are the agency details for clients with the detail Mac?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the agency details for clients with the detail Mac?[/QUESTION][SQL]SELECT Agencies.staff_id, Agencies.agency_details FROM Clients JOIN Agencies ON Clients.agency_id = Agencies.agency_id WHERE Clients.client_details ilike '%Mac%'
### TaskGenerate a SQL query to answer [QUESTION]Show details for all clients and the details of their corresponding agents.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show details for all clients and the details of their corresponding agents.[/QUESTION][SQL]SELECT Clients.staff_id, Staff.staff_details FROM Clients JOIN Staff ON Clients.agency_id = Staff.agency_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the client details for each client and the corresponding details of their agencies?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the client details for each client and the corresponding details of their agencies?[/QUESTION][SQL]SELECT Clients.staff_id, Staff.staff_details, Agencies.agency_details FROM Clients JOIN Staff ON Clients.client_id = Staff.staff_id JOIN Agencies ON Clients.agency_id = Agencies.agency_id;
### TaskGenerate a SQL query to answer [QUESTION]Show all sic codes and the number of clients with each code.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all sic codes and the number of clients with each code.[/QUESTION][SQL]SELECT staff_id, COUNT(*) AS total_clients FROM Clients GROUP BY staff_id ORDER BY total_clients DESC;
### TaskGenerate a SQL query to answer [QUESTION]How many clients are there for each sic code?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many clients are there for each sic code?[/QUESTION][SQL]SELECT staff_id, COUNT(*) AS number_of_clients FROM Clients GROUP BY staff_id;
### TaskGenerate a SQL query to answer [QUESTION]Show all client ids and details with sic code "Bad".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all client ids and details with sic code "Bad".[/QUESTION][SQL]SELECT meeting_id, client_id, meeting_outcome FROM Meetings WHERE client_id IN (SELECT client_id FROM Clients WHERE sic_code = 'Bad');
### TaskGenerate a SQL query to answer [QUESTION]What are the client ideas and details for clients with the sic code Bad?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the client ideas and details for clients with the sic code Bad?[/QUESTION][SQL]SELECT Clients.staff_id, Clients.client_details FROM Clients JOIN Staff ON Clients.staff_id = Staff.staff_id WHERE Clients.sic_code = 'Bad';
### TaskGenerate a SQL query to answer [QUESTION]Show all agency ids and details for agencies with a client.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all agency ids and details for agencies with a client.[/QUESTION][SQL]SELECT Agencies.staff_id, Agencies.agency_details FROM Clients JOIN Agencies ON Clients.agency_id = Agencies.agency_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the agency ids and agency details for all agencies who have a client?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the agency ids and agency details for all agencies who have a client?[/QUESTION][SQL]SELECT Agencies.staff_id, Agencies.agency_details FROM Agencies JOIN Staff ON Agencies.agency_id = Staff.agency_id WHERE Agencies.agency_id IN (SELECT Clients.agency_id FROM Clients);
### TaskGenerate a SQL query to answer [QUESTION]Show all agency ids without any client.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all agency ids without any client.[/QUESTION][SQL]SELECT Agencies.staff_id FROM Agencies WHERE Agencies.staff_id NOT IN (SELECT Clients.agency_id FROM Clients);
### TaskGenerate a SQL query to answer [QUESTION]What are ids of agencies that do not have any clients?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are ids of agencies that do not have any clients?[/QUESTION][SQL]SELECT Agencies.staff_id FROM Agencies WHERE staff_id NOT IN (SELECT client_id FROM Clients);
### TaskGenerate a SQL query to answer [QUESTION]How many invoices do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many invoices do we have?[/QUESTION][SQL]SELECT Invoices.meeting_id FROM Invoices;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of invoices.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of invoices.[/QUESTION][SQL]SELECT Invoices.meeting_id, COUNT(*) AS total_invoices FROM Invoices GROUP BY Invoice_id;
### TaskGenerate a SQL query to answer [QUESTION]Show ids, status codes, and details for all invoices for clients.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show ids, status codes, and details for all invoices for clients.[/QUESTION][SQL]SELECT Invoices.meeting_id, Invoices.invoice_status, Invoices.invoice_details FROM Invoices JOIN Meetings ON Invoices.client_id = Meetings.client_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids, statuses, and details for all invoices?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids, statuses, and details for all invoices?[/QUESTION][SQL]SELECT Invoices.meeting_id, InvoiceStatus, InvoiceDetails FROM Invoices;
### TaskGenerate a SQL query to answer [QUESTION]Show all client ids and the number of invoices for each client.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all client ids and the number of invoices for each client.[/QUESTION][SQL]SELECT Clients.staff_id, COUNT(Invoices.invoice_id) AS invoice_count FROM Clients JOIN Invoices ON Clients.client_id = Invoices.client_id GROUP BY Clients.staff_id ORDER BY invoice_count DESC;
### TaskGenerate a SQL query to answer [QUESTION]How many invoices are there for each client id?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many invoices are there for each client id?[/QUESTION][SQL]SELECT Invoices.meeting_id, COUNT(Invoices.invoice_id) AS invoice_count FROM Invoices JOIN Meetings ON Invoices.client_id = Meetings.client_id GROUP BY Invoices.meeting_id ORDER BY invoice_count DESC;
### TaskGenerate a SQL query to answer [QUESTION]List the client id and detail with most number of invoices.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the client id and detail with most number of invoices.[/QUESTION][SQL]SELECT Invoices.staff_id, COUNT(Invoices.invoice_id) AS invoice_count FROM Invoices JOIN Clients ON Invoices.client_id = Clients.client_id GROUP BY Invoices.staff_id ORDER BY invoice_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the client id and details for the client with the most invoices?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the client id and details for the client with the most invoices?[/QUESTION][SQL]SELECT Clients.staff_id, COUNT(Invoices.invoice_id) AS invoice_count FROM Invoices JOIN Clients ON Invoices.client_id = Clients.client_id GROUP BY Clients.staff_id ORDER BY invoice_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are client ids for clients with at least 2 invoices.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are client ids for clients with at least 2 invoices.[/QUESTION][SQL]SELECT Invoices.meeting_id FROM Invoices WHERE Invoice_id IN (SELECT invoice_id FROM Invoices GROUP BY invoice_id HAVING COUNT(*) >= 2);
### TaskGenerate a SQL query to answer [QUESTION]Return the client ids for clients with two or more invoices?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the client ids for clients with two or more invoices?[/QUESTION][SQL]SELECT Invoices.meeting_id FROM Invoices WHERE Invoice_id IN (SELECT invoice_id FROM Invoices GROUP BY invoice_id HAVING COUNT(*) >= 2);
### TaskGenerate a SQL query to answer [QUESTION]Show all invoice status codes and the number of invoices with each status.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all invoice status codes and the number of invoices with each status.[/QUESTION][SQL]SELECT staff_id, COUNT(*) AS total_invoices FROM Invoices GROUP BY staff_id ORDER BY total_invoices DESC;
### TaskGenerate a SQL query to answer [QUESTION]How many invoices are there for each status code?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many invoices are there for each status code?[/QUESTION][SQL]SELECT Invoices.meeting_id, COUNT(*) AS number_of_invoices FROM Invoices WHERE InvoiceStatus ='meeting' GROUP BY InvoiceStatus;
### TaskGenerate a SQL query to answer [QUESTION]What is the invoice status code with most number of invoices.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the invoice status code with most number of invoices.[/QUESTION][SQL]SELECT staff_id, COUNT(*) AS total_invoices FROM Invoices GROUP BY staff_id ORDER BY total_invoices DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Return the invoice status that has the most invoices.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the invoice status that has the most invoices.[/QUESTION][SQL]SELECT staff_id FROM Staff WHERE staff_details = 'John'
### TaskGenerate a SQL query to answer [QUESTION]Show all invoice status codes and details and the corresponding client id and details and agency id and details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all invoice status codes and details and the corresponding client id and details and agency id and details.[/QUESTION][SQL]SELECT Invoices.meeting_id, Invoices.invoice_status, Invoices.invoice_details, Clients.client_id, Clients.client_details, Agencies.agency_id, Agencies.agency_details FROM Invoices JOIN Meetings ON Invoices.meeting_id = Meetings.meeting_id JOIN Clients ON Meetings.client_id = Clients.client_id JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id JOIN Agencies ON Staff.agency_id = Agencies.agency_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the invoice status, invoice details, and corresponding client ids and details and agency id and details?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the invoice status, invoice details, and corresponding client ids and details and agency id and details?[/QUESTION][SQL]SELECT Invoices.meeting_id, Invoices.invoice_status, Invoices.invoice_details, Clients.client_id, Clients.client_details, Agencies.agency_id, Agencies.agency_details FROM Invoices JOIN Clients ON Invoices.client_id = Clients.client_id JOIN Meetings ON Clients.client_id = Meetings.client_id JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id JOIN Agencies ON Staff.agency_id = Agencies.agency_id;
### TaskGenerate a SQL query to answer [QUESTION]List all meeting type codes and details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all meeting type codes and details.[/QUESTION][SQL]SELECT meeting_id, meeting_type, purpose_of_meeting, other_details FROM Meetings;
### TaskGenerate a SQL query to answer [QUESTION]What are all meeting types and other details?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all meeting types and other details?[/QUESTION][SQL]SELECT meeting_id, meeting_type, purpose_of_meeting, other_details FROM Meetings;
### TaskGenerate a SQL query to answer [QUESTION]Show all meeting outcomes and purposes.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all meeting outcomes and purposes.[/QUESTION][SQL]SELECT meeting_id, meeting_outcome, purpose_of_meeting FROM Meetings;
### TaskGenerate a SQL query to answer [QUESTION]What are all meeting outcomes and purposes?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all meeting outcomes and purposes?[/QUESTION][SQL]SELECT meeting_id, meeting_outcome, purpose_of_meeting FROM Meetings;
### TaskGenerate a SQL query to answer [QUESTION]Show all payment ids and details for invoices whose status is 'Working'.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all payment ids and details for invoices whose status is 'Working'.[/QUESTION][SQL]SELECT Payments.meeting_id, Payments.payment_details FROM Payments JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id WHERE Invoices.invoice_status = 'Working' ORDER BY Payments.meeting_id;
### TaskGenerate a SQL query to answer [QUESTION]What are all payment ids and payment details for invoices with status Working?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all payment ids and payment details for invoices with status Working?[/QUESTION][SQL]SELECT Payments.meeting_id, Payments.payment_details FROM Payments JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id WHERE Invoices.invoice_status = 'Working' ORDER BY Payments.meeting_id;
### TaskGenerate a SQL query to answer [QUESTION]Show all invoice ids and statuses without a payment.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all invoice ids and statuses without a payment.[/QUESTION][SQL]SELECT Invoices.meeting_id, Invoices.invoice_status FROM Invoices JOIN Payments ON Invoices.invoice_id = Payments.invoice_id WHERE Payments.payment_id IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What are the invoice ids and statuses for invoices without a payment?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the invoice ids and statuses for invoices without a payment?[/QUESTION][SQL]SELECT Invoices.meeting_id, Invoices.invoice_status FROM Invoices JOIN Payments ON Invoices.invoice_id = Payments.invoice_id WHERE Payments.payment_id IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]How many payments do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many payments do we have?[/QUESTION][SQL]SELECT staff_id FROM Payments;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of payments.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of payments.[/QUESTION][SQL]SELECT staff_id, COUNT(*) AS total_payments FROM Payments GROUP BY staff_id;
### TaskGenerate a SQL query to answer [QUESTION]List all payment ids and its corresponding invoice ids and details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all payment ids and its corresponding invoice ids and details.[/QUESTION][SQL]SELECT Payments.meeting_id, Payments.payment_id, Invoices.invoice_id, Invoices.invoice_details FROM Payments JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the payment ids, invoice ids, and payment details for all payments?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the payment ids, invoice ids, and payment details for all payments?[/QUESTION][SQL]SELECT Payments.meeting_id, Payments.payment_id, Payments.invoice_id, Payments.payment_details FROM Payments;
### TaskGenerate a SQL query to answer [QUESTION]Show all the different invoice ids and statuses of the payments[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all the different invoice ids and statuses of the payments[/QUESTION][SQL]SELECT Invoices.meeting_id, Invoices.invoice_status FROM Payments JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct invoice ids and statuses for all payments?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct invoice ids and statuses for all payments?[/QUESTION][SQL]SELECT Invoices.meeting_id, Invoices.invoice_status FROM Payments JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id;
### TaskGenerate a SQL query to answer [QUESTION]Show all invoice ids and the number of payments for each invoice.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all invoice ids and the number of payments for each invoice.[/QUESTION][SQL]SELECT Invoices.meeting_id, COUNT(Payments.payment_id) AS payment_count FROM Invoices JOIN Payments ON Invoices.invoice_id = Payments.invoice_id GROUP BY Invoice_id
### TaskGenerate a SQL query to answer [QUESTION]How many payments are there for each invoice?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many payments are there for each invoice?[/QUESTION][SQL]SELECT staff_id, COUNT(*) AS number_of_payments FROM Payments GROUP BY staff_id;
### TaskGenerate a SQL query to answer [QUESTION]What is the invoice id, status code, and details for the invoice with most number of payments.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the invoice id, status code, and details for the invoice with most number of payments.[/QUESTION][SQL]SELECT Invoices.meeting_id, Invoices.invoice_status, Invoices.invoice_details FROM Invoices JOIN Payments ON Invoices.invoice_id = Payments.invoice_id GROUP BY Invoices.invoice_id ORDER BY COUNT(Payments.payment_id) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Return the invoice ids, statuses, and details for invoices with the most payments?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the invoice ids, statuses, and details for invoices with the most payments?[/QUESTION][SQL]SELECT Invoices.meeting_id, Invoices.invoice_status, Invoices.invoice_details FROM Invoices JOIN Payments ON Invoices.invoice_id = Payments.invoice_id GROUP BY Invoices.invoice_id ORDER BY COUNT(Payments.payment_id) DESC LIMIT 5;
### TaskGenerate a SQL query to answer [QUESTION]How many staff do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many staff do we have?[/QUESTION][SQL]SELECT staff_id FROM Staff;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of staff.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of staff.[/QUESTION][SQL]SELECT staff_id FROM Staff;
### TaskGenerate a SQL query to answer [QUESTION]Show the agency ids and the number of staff in each agent?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the agency ids and the number of staff in each agent?[/QUESTION][SQL]SELECT staff_id, COUNT(*) AS num_staff FROM Staff GROUP BY staff_id;
### TaskGenerate a SQL query to answer [QUESTION]Return the agency ids and number of staff in each.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the agency ids and number of staff in each.[/QUESTION][SQL]SELECT staff_id, COUNT(*) AS num_staff FROM Staff GROUP BY staff_id ORDER BY staff_id;
### TaskGenerate a SQL query to answer [QUESTION]What is the agent id and details for the agency with most staff?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the agent id and details for the agency with most staff?[/QUESTION][SQL]SELECT staff_id, COUNT(*) AS staff_count FROM Staff GROUP BY staff_id ORDER BY staff_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Return the id and detail for the agency with the most staff.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the id and detail for the agency with the most staff.[/QUESTION][SQL]SELECT staff_id, COUNT(*) AS staff_count FROM Staff GROUP BY staff_id ORDER BY staff_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show meeting outcome codes and the number of meeting in each outcome.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show meeting outcome codes and the number of meeting in each outcome.[/QUESTION][SQL]SELECT meeting_id, COUNT(*) AS total_meetings FROM Meetings GROUP BY meeting_outcome ORDER BY total_meetings DESC;
### TaskGenerate a SQL query to answer [QUESTION]How many meetings had each meeting outcome?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many meetings had each meeting outcome?[/QUESTION][SQL]SELECT meeting_id, COUNT(*) AS number_of_meetings FROM Meetings GROUP BY meeting_outcome ORDER BY number_of_meetings DESC;
### TaskGenerate a SQL query to answer [QUESTION]List the client ids and the number of meeting for each client.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the client ids and the number of meeting for each client.[/QUESTION][SQL]SELECT meeting_id, COUNT(*) AS total_meetings FROM Meetings GROUP BY meeting_id;
### TaskGenerate a SQL query to answer [QUESTION]How many meetings are there for each client id?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many meetings are there for each client id?[/QUESTION][SQL]SELECT meeting_id, COUNT(*) AS number_of_meetings FROM Meetings GROUP BY meeting_id ORDER BY number_of_meetings DESC;
### TaskGenerate a SQL query to answer [QUESTION]Show the meeting type codes and the number of meeting for each client.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the meeting type codes and the number of meeting for each client.[/QUESTION][SQL]SELECT meeting_id, COUNT(*) AS total_meetings FROM Meetings GROUP BY meeting_id;
### TaskGenerate a SQL query to answer [QUESTION]How many meetings are there for each meeting type?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many meetings are there for each meeting type?[/QUESTION][SQL]SELECT meeting_id, COUNT(*) AS number_of_meetings FROM Meetings GROUP BY meeting_type ORDER BY number_of_meetings DESC;
### TaskGenerate a SQL query to answer [QUESTION]Show all meeting ids, meeting outcomes, meeting types and the details of the client atttending it.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all meeting ids, meeting outcomes, meeting types and the details of the client atttending it.[/QUESTION][SQL]SELECT meeting_id, meeting_outcome, meeting_type, other_details FROM Meetings;
### TaskGenerate a SQL query to answer [QUESTION]What are the meeting ids, meeting outcomes, meeting types, and client details for all meetings?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the meeting ids, meeting outcomes, meeting types, and client details for all meetings?[/QUESTION][SQL]SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM Meetings JOIN Clients ON Meetings.client_id = Clients.client_id;
### TaskGenerate a SQL query to answer [QUESTION]Show the meeting ids and the number of staff in each meeting.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the meeting ids and the number of staff in each meeting.[/QUESTION][SQL]SELECT meeting_id, COUNT(*) AS num_staff FROM Staff_in_Meetings GROUP BY meeting_id ORDER BY meeting_id;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of staff in each meeting by meeting id.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of staff in each meeting by meeting id.[/QUESTION][SQL]SELECT meeting_id, COUNT(*) AS staff_count FROM Staff_in_Meetings GROUP BY meeting_id ORDER BY meeting_id;
### TaskGenerate a SQL query to answer [QUESTION]Show the staff id and the number of meetings attended by the staff who attended some meeting but had the lowest attendance.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the staff id and the number of meetings attended by the staff who attended some meeting but had the lowest attendance.[/QUESTION][SQL]SELECT staff_id, COUNT(*) AS num_meetings FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(*) = (SELECT MIN(num_meetings) FROM (SELECT staff_id, COUNT(*) AS num_meetings FROM Staff_in_Meetings GROUP BY staff_id) AS subquery);
### TaskGenerate a SQL query to answer [QUESTION]What is the staff id of the staff who attended the least meetings but attended some meeting?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the staff id of the staff who attended the least meetings but attended some meeting?[/QUESTION][SQL]SELECT staff_id FROM Staff_in_Meetings WHERE staff_id IN (SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) = (SELECT MIN(COUNT(meeting_id)) FROM Staff_in_Meetings WHERE staff_id IN (SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) > 0)));
### TaskGenerate a SQL query to answer [QUESTION]How many staff have attended a meeting?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many staff have attended a meeting?[/QUESTION][SQL]SELECT staff_id FROM Staff_in_Meetings;
### TaskGenerate a SQL query to answer [QUESTION]Return the number of distinct staff who have attended a meeting?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the number of distinct staff who have attended a meeting?[/QUESTION][SQL]SELECT staff_id FROM Staff_in_Meetings;
### TaskGenerate a SQL query to answer [QUESTION]How many staff did not attend any meeting?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many staff did not attend any meeting?[/QUESTION][SQL]SELECT staff_id FROM Staff WHERE staff_id NOT IN (SELECT DISTINCT staff_id FROM Staff_in_Meetings);
### TaskGenerate a SQL query to answer [QUESTION]Count the number of staff who did not attend any meeting.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of staff who did not attend any meeting.[/QUESTION][SQL]SELECT staff_id FROM Staff WHERE staff_id NOT IN (SELECT sm.staff_id FROM Staff_in_Meetings sm);
### TaskGenerate a SQL query to answer [QUESTION]What are the ids and details of the clients who have attended any meeting or have any invoice?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids and details of the clients who have attended any meeting or have any invoice?[/QUESTION][SQL]SELECT meeting_id, client_details FROM Meetings UNION SELECT invoice_id, client_details FROM Invoices;
### TaskGenerate a SQL query to answer [QUESTION]Return the ids and details of clients who have attended a meeting or had an invoice.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the ids and details of clients who have attended a meeting or had an invoice.[/QUESTION][SQL]SELECT meeting_id, client_details FROM Meetings UNION SELECT invoice_id, client_details FROM Invoices
### TaskGenerate a SQL query to answer [QUESTION]What are the ids and details of the staff who have attended at least 1 meetings and have the detail with letter's'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids and details of the staff who have attended at least 1 meetings and have the detail with letter's'?[/QUESTION][SQL]SELECT staff_id, staff_details FROM Staff WHERE staff_id IN (SELECT sm.staff_id FROM Staff_in_Meetings sm JOIN Meetings m ON sm.meeting_id = m.meeting_id WHERE LOWER(m.other_details) LIKE '%s%') GROUP BY staff_id, staff_details;
### TaskGenerate a SQL query to answer [QUESTION]Return the ids and details of staff who have attended at least 1 meeting and have an s in their staff details?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the ids and details of staff who have attended at least 1 meeting and have an s in their staff details?[/QUESTION][SQL]SELECT staff_id, staff_details FROM Staff WHERE staff_id IN (SELECT sm.staff_id FROM Staff_in_Meetings sm GROUP BY sm.staff_id HAVING COUNT(sm.meeting_id) >= 1) AND LOWER(staff_details) LIKE '%s%' ORDER BY staff_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the id, sic code and agency id of the client who has attended 1 meeting and has any invoice.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the id, sic code and agency id of the client who has attended 1 meeting and has any invoice.[/QUESTION][SQL]SELECT meeting_id, sic_code, agency_id FROM Clients WHERE client_id IN (SELECT DISTINCT client_id FROM Meetings UNION SELECT DISTINCT client_id FROM Invoices);
### TaskGenerate a SQL query to answer [QUESTION]Return the ids, sic codes, and agency ids of clients who have attended 1 meeting and had an invoice.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the ids, sic codes, and agency ids of clients who have attended 1 meeting and had an invoice.[/QUESTION][SQL]SELECT meeting_id, client_id, sic_code, agency_id FROM Meetings JOIN Clients ON Meetings.client_id = Clients.client_id WHERE billable_yn = 'Y' AND EXISTS (SELECT 1 FROM Invoices WHERE invoices.client_id = Meetings.client_id) GROUP BY client_id HAVING COUNT(meeting_id) = 1;
### TaskGenerate a SQL query to answer [QUESTION]List the start time, end time of each meeting, and the corresponding client detail and staff detail.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the start time, end time of each meeting, and the corresponding client detail and staff detail.[/QUESTION][SQL]SELECT meeting_id, c.client_details, s.staff_details, start_date_time, end_date_time FROM Meetings AS mt JOIN Clients AS c ON mt.client_id = c.client_id JOIN Staff_in_Meetings AS sm ON mt.meeting_id = sm.meeting_id JOIN Staff AS s ON sm.staff_id = s.staff_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the start and end times of each meeting, as well as the corresponding client and staff details the attendees?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the start and end times of each meeting, as well as the corresponding client and staff details the attendees?[/QUESTION][SQL]SELECT meeting_id, c.client_details AS client_name, s.staff_details AS staff_name, start_date_time, end_date_time FROM Meetings JOIN Clients ON Meetings.client_id = Clients.client_id JOIN Staff_in_Meetings sm ON Meetings.meeting_id = sm.meeting_id JOIN Staff s ON sm.staff_id = s.staff_id;
