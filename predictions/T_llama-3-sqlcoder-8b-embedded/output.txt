SELECT club.Country FROM club;
SELECT Country FROM club;
SELECT club.Name FROM club WHERE club.Name IS NOT NULL ORDER BY club.Name ASC;
SELECT club.Name FROM club WHERE club.Name IS NOT NULL ORDER BY club.Name ASC;
SELECT club.Name, club.Manager, club.Captain FROM club ORDER BY club.Name NULLS LAST;
SELECT club.Name, club.Manager, club.Captain FROM club ORDER BY club.Name NULLS LAST;
SELECT club.Name FROM club WHERE club.Manufacturer!= 'Nike' ORDER BY club.Name NULLS LAST;
SELECT club.Name FROM club WHERE club.Manufacturer!= 'Nike' ORDER BY club.Name NULLS LAST;
SELECT player.Name, playeR.Wins_count FROM player ORDER BY playeR.Wins_count ASC;
SELECT player.Name FROM player WHERE player.Wins_count IS NOT NULL ORDER BY player.Wins_count ASC;
SELECT player.Name FROM player WHERE player.Earnings = (SELECT MAX(Earnings) FROM player);
SELECT player.Name FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player);
SELECT player.Country FROM player WHERE player.Earnings > 1200000 GROUP BY player.Country ORDER BY player.Country NULLS LAST;
SELECT player.Country FROM player WHERE player.Earnings > 1200000;
SELECT player.Country FROM player WHERE player.Wins_count > 2 ORDER BY player.Earnings DESC LIMIT 1;
SELECT player.Country FROM player WHERE player.Wins_count > 2 ORDER BY player.Earnings DESC LIMIT 1;
SELECT player.Name, c.Name AS Club FROM player player JOIN club c ON player.Club_ID = c.Club_ID;
SELECT player.Name, c.Name AS Club FROM player player JOIN club c ON player.Club_ID = c.Club_ID;
SELECT club.Name FROM club WHERE club.Club_ID IN (SELECT player.Club_ID FROM player WHERE player.Wins_count > 2) GROUP BY club.Name;
SELECT club.Name FROM club WHERE club.Club_ID IN (SELECT player.Club_ID FROM player WHERE player.Wins_count > 2) GROUP BY club.Name;
SELECT player.Name FROM player WHERE player.Club_ID IN (SELECT Club_ID FROM club WHERE Manager = 'Sam Allardyce');
SELECT player.Name FROM player WHERE player.Club_ID IN (SELECT Club_ID FROM club WHERE Manager = 'Sam Allardyce');
SELECT club.Name, AVG(player.Earnings) AS avg_earnings FROM player JOIN club ON player.Club_ID = club.Club_ID GROUP BY club.Name ORDER BY avg_earnings DESC NULLS LAST;
SELECT club.Name, AVG(player.Earnings) AS avg_earnings FROM player JOIN club ON player.Club_ID = club.Club_ID GROUP BY club.Name ORDER BY avg_earnings DESC NULLS LAST;
SELECT club.Club_ID, COUNT(*) AS manufacturer_clubs FROM club JOIN player ON club.Club_ID = player.Club_ID GROUP BY club.Club_ID
SELECT club.Club_ID, club.Manufacturer, COUNT(club.Club_ID) AS number_of_clubs FROM club GROUP BY club.Club_ID, club.Manufacturer ORDER BY number_of_clubs DESC NULLS LAST;
SELECT club.Club_ID, club.Manufacturer FROM club GROUP BY Club_ID, Manufacturer ORDER BY COUNT(Club_ID) DESC LIMIT 1;
SELECT club.Name, COUNT(*) AS count_clubs FROM club GROUP BY club.Name ORDER BY count_clubs DESC LIMIT 1;
SELECT club.Club_ID, COUNT(DISTINCT player.Player_ID) AS number_of_players FROM club JOIN player ON club.Club_ID = player.Club_ID GROUP BY club.Club_ID HAVING COUNT(DISTINCT player.Player_ID) > 1;
SELECT club.Club_ID, club.Name, COUNT(DISTINCT club.Manufacturer) AS manufacturer_count FROM club GROUP BY club.Club_ID, club.Name HAVING COUNT(DISTINCT club.Manufacturer) > 1 ORDER BY manufacturer_count DESC NULLS LAST;
SELECT player.Country FROM player WHERE (SELECT COUNT(*) FROM player WHERE Country = plaeer.Country) > 1 GROUP BY plaeer.Country;
SELECT player.Country FROM player WHERE (SELECT COUNT(*) FROM player WHERE Country = plaeer.Country) > 1 GROUP BY plaeer.Country;
SELECT club.Name FROM club WHERE club.Club_ID NOT IN (SELECT player.Club_ID FROM player)
SELECT club.Name FROM club WHERE club.Club_ID NOT IN (SELECT player.Club_ID FROM player) ORDER BY club.Name NULLS LAST;
SELECT player.Country FROM player WHERE playeR.Earnings > 1400000 OR playeR.Earnings < 1100000;
SELECT player.Country FROM player WHERE player.Earnings > 1400000 AND player.Earnings < 1100000 GROUP BY player.Country;
SELECT Country FROM player WHERE Country IS NOT NULL GROUP BY Country;
SELECT player.Country FROM player WHERE player.Country IS NOT NULL GROUP BY player.Country ORDER BY player.Country;
SELECT player.Earnings FROM player WHERE player.Country IN ('Australia', 'Zimbabwe');
SELECT player.Earnings FROM player WHERE player.Country IN ('Australia', 'Zimbabwe');
SELECT order_item_id, product_id FROM Order_Items;
SELECT order_item_id, customer_id, customer_first_name, customer_last_name FROM Order_Items JOIN Orders ON Order_Items.order_id = Orders.order_id JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(order_item_id) >= 3) AND customer_id IN (SELECT customer_id FROM Orders GROUP BY customer_id HAVING COUNT(order_id) > 2);
SELECT order_item_id, COUNT(*) AS product_count FROM Order_Items GROUP BY order_id ORDER BY product_count DESC;
SELECT order_item_id, COUNT(*) AS product_count, o.order_status_code, o.order_id FROM Order_Items oi JOIN Orders o ON oi.order_id = o.order_id GROUP BY oi.order_id, o.order_status_code, o.order_id ORDER BY oi.order_id;
SELECT order_item_id FROM Order_Items WHERE order_id IN (SELECT order_id FROM Orders ORDER BY date_order_placed ASC LIMIT 1 UNION SELECT order_id FROM Orders GROUP BY order_id HAVING COUNT(order_item_id) > 1);
SELECT order_item_id, COUNT(*) AS number_of_items FROM Order_Items GROUP BY order_item_id HAVING COUNT(*) > 1;
SELECT Customer_Payment_Methods.order_item_id FROM Customers WHERE Customer_ Payment_Methods.customer_id NOT IN (SELECT Orders.customer_id FROM Orders);
SELECT Customer_Payment_Methods.order_item_id, Products.product_name, Customers.customer_first_name, Customers.customer_middle_initial, Customers.customer_last_name FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id LEFT JOIN Orders ON Customers.customer_id = Orders.customer_id LEFT JOIN Order_Items ON Orders.order_id = Order_Items.order_id LEFT JOIN Products ON Order_Items.product_id = Products.product_id WHERE Orders.customer_id IS NULL;
SELECT order_item_id, product_id, product_name, product_price, product_color FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id WHERE product_id NOT IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(order_item_id) >= 2);
SELECT order_item_id, product_id, product_name, product_price, product_color FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id WHERE product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(order_id) < 2);
SELECT order_item_id, COUNT(*) AS product_count FROM Order_Items GROUP BY order_id HAVING COUNT(*) >= 2;
SELECT order_item_id, order_id, date_order_placed FROM Order_Items GROUP BY order_id, date_order_placed HAVING COUNT(order_item_id) >= 2;
SELECT order_item_id, p.product_name, p.product_price FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id GROUP BY oider_item_id, p.product_name, p.product_price ORDER BY COUNT(oi.order_item_id) DESC LIMIT 5;
SELECT order_item_id, product_id, product_name, product_price FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY order_item_id, product_id, product_name, product_price ORDER BY COUNT(order_item_id) DESC;
SELECT order_item_id, SUM(product_price) AS total_price FROM Order_Items GROUP BY order_id ORDER BY total_price ASC LIMIT 1;
SELECT order_item_id FROM Order_Items WHERE product_id IN (SELECT product_id FROM Products ORDER BY product_price ASC LIMIT 1);
SELECT Customer_Payment_Methods.order_item_id, COUNT(Customer_Payment_Methods.payment_method_code) AS total_orders FROM Customer_Payment_Methods GROUP BY Customer_Payment_Methods.order_item_id ORDER BY total_orders DESC LIMIT 1;
SELECT Customer_Payment_Methods.order_item_id, COUNT(Customer_Payment_Methods.payment_method_code) AS total_orders FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id GROUP BY Customer_Payment_Methods.payment_method_code ORDER BY total_orders DESC LIMIT 1;
SELECT order_item_id, COUNT(*) AS total_products FROM Order_Items GROUP BY order_item_id;
SELECT order_item_id, COUNT(*) AS total_products_bought FROM Order_Items JOIN Customers ON Order_Items.customer_id = Customers.customer_id GROUP BY order_item_id;
SELECT order_item_id, COUNT(*) AS number_of_orders FROM Orders JOIN Customers ON Orders.customer_id = Customers.customer_id GROUP BY order_item_id;
SELECT order_item_id, COUNT(*) AS number_of_orders FROM Order_Items GROUP BY order_id;
SELECT Customer_Payment_Methods.order_item_id, Customers.customer_first_name, Customers.customer_middle_initial, Customers.customer_last_name FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id;
SELECT Customer_Payment_Methods.order_item_id, Customers.customer_first_name, Customers.customer_middle_initial, Customers.customer_last_name, Customer_Payment_Methods.payment_method_code FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id;
SELECT shipment_id, invoice_status_code, invoice_date, shipment_date FROM Shipments JOIN Invoices ON Shipments.invoice_number = Invoices.invoice_number;
SELECT shipment_id, invoice_status_code, invoice_date, shipment_date FROM Shipments JOIN Invoices ON Shipments.invoice_number = Invoices.invoice_number;
SELECT shipment_id, product_name, shipment_date FROM Shipments JOIN Shipment_Items ON Shipments.shipment_id = Shipment_Items.shipment_id JOIN Order_Items ON Shipment_Items.order_item_id = Order_Items.order_item_id JOIN Products ON Order_Items.product_id = Products.product_id;
SELECT shipment_id, product_name, shipment_date FROM Shipments si JOIN Shipment_Items shi ON si.shipment_id = shi.shipment_id JOIN Order_Items oi ON shi.order_item_id = oi.order_item_id JOIN Products p ON oi.product_id = p.product_id;
SELECT order_item_id, order_item_status_code, shipment_tracking_number FROM Order_Items oi JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id JOIN Shipments s ON si.shipment_id = s.shipment_id;
SELECT order_item_id, product_id, order_item_status_code, shipment_tracking_number FROM Order_Items oi JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id JOIN Shipments shp ON si.shipment_id = shp.shipment_id;
SELECT order_item_id, p.product_name, p.product_color FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id WHERE oi.order_item_status_code ='shipped' ORDER BY oi.order_item_id;
SELECT order_item_id, product_name, product_color FROM Order_Items oi JOIN Products pr ON oi.product_id = pr.product_id WHERE order_item_status_code ='shipped' ORDER BY order_item_id;
SELECT order_item_id, p.product_name, p.product_price, p.product_description FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id JOIN Orders ord ON oi.order_id = ord.order_id JOIN Customers cst ON ord.customer_id = cst.customer_id WHERE cst.gender_code = 'F' GROUP BY order_item_id, p.product_name, p.product_price, p.product_description;
SELECT order_item_id, product_name, product_price, product_description FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id WHERE EXISTS (SELECT customer_id FROM Customers c WHERE c.gender_code = 'F' AND c.customer_id = oi.order_id);
SELECT order_item_id FROM Order_Items WHERE order_item_status_code = 'Not Shipped'
SELECT order_item_id, product_id, order_item_status_code FROM Order_Items WHERE order_item_status_code ='shipped'
SELECT order_item_id, date_order_placed, SUM(product_price) AS total_cost FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY order_id, date_order_placed;
SELECT order_item_id, product_id, order_status_code FROM Order_Items;
SELECT order_item_id FROM Order_Items;
SELECT order_item_id FROM Order_Items;
SELECT order_item_id, COUNT(DISTINCT order_item_status_code) AS number_of_states FROM Order_Items GROUP BY order_item_id;
SELECT order_item_id, COUNT(DISTINCT order_item_status_code) AS distinct_status_codes FROM Order_Items GROUP BY order_item_id ORDER BY order_item_id;
SELECT Customer_Payment_Methods.order_item_id, COUNT(DISTINCT Customer_Payment_Methods.payment_method_code) AS number_of_payment_methods FROM Customer_Payment_Methods GROUP BY Customer_Payment_Methods.order_item_id;
SELECT Customer_Payment_Methods.order_item_id, COUNT(DISTINCT Customer_Payment_Methods.payment_method_code) AS number_of_payment_methods FROM Customer_Payment_Methods GROUP BY Customer_Payment_Methods.order_item_id;
SELECT Customer_Payment_Methods.order_item_id, Customers.customer_first_name, Customers.customer_last_name, Customers.login_name, Customers.login_password FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id WHERE Customers.phone_number like '+12%'
SELECT Customer_Payment_Methods.order_item_id, Customers.customer_first_name, Customers.customer_last_name, Customers.login_name, Customers.login_password FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id WHERE Customers.phone_number like '+12%'
SELECT Products.order_item_id, Products.product_size FROM Products WHERE Products.product_name ilike '%Dell%' ORDER BY Products.product_size;
SELECT shipment_id, product_size FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id WHERE LOWER(p.product_name) LIKE '%dell%' ORDER BY shipment_id;
SELECT shipment_id, order_item_id, product_id, product_price, product_size FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id WHERE product_price > (SELECT AVG(product_price) FROM Products);
SELECT shipment_id, product_id, product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products);
SELECT shipment_id FROM Shipments;
SELECT Products.order_item_id FROM Products WHERE Product_id NOT IN (SELECT Order_items.product_id FROM Order_items);
SELECT Customer_Payment_Methods.order_item_id FROM Customers WHERE Customer_Payment_Methods.customer_id IS NULL;
SELECT Customer_Payment_Methods.order_item_id FROM Customers WHERE Customer_Payment_Methods.customer_id IS NULL;
SELECT order_item_id, product_id, order_item_status_code FROM Order_Items;
SELECT order_item_id, product_id, order_item_status_code FROM Order_Items;
SELECT Customer_Payment_Methods.order_item_id, Customers.customer_id, Customers.address_line_1, Customers.town_city, Customers.county FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id WHERE Customers.country = 'USA'
SELECT Customer_Payment_Methods.order_item_id, Customers.customer_id, Customers.address_line_1, Customers.town_city, Customers.county FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id WHERE Customers.country = 'United States' ORDER BY Customers.customer_id;
SELECT order_item_id, customer_first_name, product_name FROM Order_Items JOIN Customers ON Order_Items.customer_id = Customers.customer_id JOIN Products ON Order_Items.product_id = Products.product_id;
SELECT order_item_id, product_id FROM Order_Items;
SELECT shipment_id, COUNT(order_item_id) AS total_items_shipped FROM Shipment_Items GROUP BY shipment_id ORDER BY total_items_shipped DESC;
SELECT shipment_id, COUNT(DISTINCT order_item_id) AS total_products_shipped FROM Shipment_Items GROUP BY shipment_id ORDER BY total_products_shipped DESC;
SELECT shipment_id, AVG(p.product_price) AS average_product_price FROM Shipments sh JOIN Shipment_Items si ON sh.shipment_id = si.shipment_id JOIN Order_Items oi ON si.order_item_id = oi.order_item_id JOIN Products p ON oi.product_id = p.product_id GROUP BY sh.shipment_id ORDER BY sh.shipment_id;
SELECT shipment_id, AVG(p.product_price) AS average_product_price FROM Shipments sh JOIN Shipment_Items si ON sh.shipment_id = si.shipment_id JOIN Order_Items oi ON si.order_item_id = oi.order_item_id JOIN Products p ON oi.product_id = p.product_id GROUP BY sh.shipment_id ORDER BY sh.shipment_id;
SELECT order_item_id, AVG(product_price) AS average_product_price FROM Order_Items GROUP BY order_item_id;
SELECT order_item_id, AVG(product_price) AS average_product_price FROM Order_Items JOIN Products ON order_items.product_id = products.product_id GROUP BY order_item_id;
SELECT Customer_Payment_Methods.order_item_id, Customers.customer_first_name, Customers.customer_last_name, Customers.email_address, Customers.town_city, Customers.county FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id WHERE Customers.gender_code IN (SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY COUNT(*) ASC LIMIT 1);
SELECT Customer_Payment_Methods.order_item_id, Customers.email_address, Customers.town_city, Customers.county FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id WHERE Customers.gender_code IN (SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY COUNT(Orders.order_id) ASC LIMIT 1);
SELECT order_item_id FROM Order_Items WHERE order_id IN (SELECT order_id FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customers c JOIN Customer_Payment_Methods cp ON c.customer_id = cp.customer_id GROUP BY c.customer_id HAVING COUNT(DISTINCT cp.payment_method_code) >= 2));
SELECT order_item_id FROM Order_Items WHERE order_id IN (SELECT order_id FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customers c JOIN Customer_Payment_Methods cp ON c.customer_id = cp.customer_id GROUP BY c.customer_id HAVING COUNT(DISTINCT cp.payment_method_code) >= 2));
SELECT order_item_id, COUNT(*) AS count FROM Order_Items GROUP BY order_item_id ORDER BY count ASC LIMIT 1;
SELECT order_item_id, COUNT(*) AS count FROM Order_Items GROUP BY order_item_id ORDER BY count ASC LIMIT 1;
SELECT order_item_id, product_description FROM Order_Items JOIN Products ON order_item_id = product_id GROUP BY order_item_id, product_description HAVING COUNT(order_item_id) > 3;
SELECT order_item_id, product_id, product_description FROM Order_Items GROUP BY order_item_id, product_id, product_description HAVING COUNT(order_item_id) > 3;
SELECT shipment_id, COUNT(*) AS number_of_shipments FROM Shipments GROUP BY shipment_id HAVING COUNT(*) >= 2;
SELECT shipment_id, invoice_number, shipment_date FROM Shipments GROUP BY shipment_id, invoice_number, shipment_date HAVING COUNT(DISTINCT invoice_number) >= 2;
SELECT shipment_id, shipment_tracking_number, shipment_date FROM Shipments;
SELECT shipment_id, shipment_tracking_number, shipment_date FROM Shipments;
SELECT Products.order_item_id, Products.product_color, Products.product_description, Products.product_size FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id WHERE Products.product_price < (SELECT MAX(product_price) FROM Products);
SELECT Products.order_item_id, Products.product_color, Products.product_description, Products.product_size FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id WHERE Products.product_price < (SELECT MAX(product_price) FROM Products);
SELECT director.Director_ID, director.Name FROM director WHERE director.Age > (SELECT AVG(Age) FROM director);
SELECT director.Director_ID, director.Name FROM director ORDER BY director.Age ASC LIMIT 1;
SELECT channel.Channel_ID FROM channel WHERE LOWER(channel.Internet) LIKE '%bbc%' GROUP BY Channel_ID;
SELECT director_admin.Channel_ID, COUNT(DISTINCT director_admin.Channel_ID) AS number_of_channels FROM director_admin WHERE director_admin.Is_first_director = TRUE GROUP BY director_admin.Channel_ID ORDER BY number_of_channels DESC NULLS LAST;
SELECT program.Director_ID, program.Channel_ID, program.Start_Year, program.Title FROM program ORDER BY program.Start_Year DESC;
SELECT director.Director_ID, COUNT(program.Program_ID) AS program_count FROM director JOIN program ON director.Director_ID = program.Director_ID GROUP BY director.Director_ID ORDER BY program_count DESC LIMIT 1;
SELECT director.Director_ID, director.Name, COUNT(program.Program_ID) AS num_programs FROM program JOIN director ON program.Director_ID = director.Director_ID GROUP BY director.Director_ID, director.Name ORDER BY num_programs DESC LIMIT 1;
SELECT program.Director_ID, program.Channel_ID, program.Start_Year, program.Title FROM program ORDER BY Start_Year DESC LIMIT 1;
SELECT channel.Channel_ID, channel.Name FROM channel JOIN (SELECT Program_Channel_ID, COUNT(Program_ID) AS num_programs FROM program GROUP BY Program_Channel_ID HAVING COUNT(Program_ID) > 1) AS p ON channel.Channel_ID = p.Program_Channel_ID;
SELECT channel.Channel_ID, chanel.Name, COUNT(program.Program_ID) AS program_count FROM program JOIN channel ON program.Channel_ID = channel.Channel_ID GROUP BY channel.Channel_ID, channel.Name ORDER BY program_count DESC NULLS LAST;
SELECT channel.Channel_ID FROM channel WHERE channel.Channel_ID NOT IN (SELECT p.Channel_ID FROM program p) GROUP BY channel.Channel_ID ORDER BY COUNT(channel.Channel_ID) NULLS LAST;
SELECT director.Director_ID, director.Name FROM director JOIN program ON director.Director_ID = program.Director_ID WHERE LOWER(program.Title) = 'dracula';
SELECT channel.Channel_ID, channel.Name, COUNT(director_admin.Director_ID) AS num_directors FROM director_admin JOIN channel ON director_admin.Channel_ID = channel.Channel_ID GROUP BY channel.Channel_ID, channel.Name ORDER BY num_directors DESC LIMIT 1;
SELECT director.Director_ID, director.Name FROM director WHERE director.Age BETWEEN 30 AND 60 ORDER BY director.Director_ID NULLS LAST;
SELECT channel.Channel_ID, channel.Name FROM channel JOIN program ON channel.Channel_ID = program.Channel_ID JOIN director ON program.Director_ID = director.Director_ID WHERE (director.Age < 40 AND EXISTS (SELECT 1 FROM director d2 WHERE d2.Director_ID!= director.Director_ID AND d2.Age > 60)) OR (director.Age > 60 AND EXISTS (SELECT 1 FROM director d2 WHERE d2.Director_ID!= director.Director_ID AND d2.Age < 40)) GROUP BY channel.Channel_ID, channel.Name;
SELECT channel.Channel_ID, chanel.Name FROM channel JOIN director_admin ON channel.Channel_ID = director_admin.Channel_ID WHERE NOT EXISTS (SELECT 1 FROM director WHERE director.Name = 'Hank Baskett')
SELECT radio.City_channel_ID, COUNT(radio.Radio_ID) AS number_of_radios FROM radio JOIN city_channel_radio ON radio.Radio_ID = city_channel_radio.Radio_ID GROUP BY radio.City_channel_ID ORDER BY number_of_radios DESC NULLS LAST;
SELECT radio.tv_show_ID, radio.radio_MHz, radio.rnaG_MHz, radio.lyric_FM_MHz, radio.erp_kW FROM radio ORDER BY radio.erp_kW ASC;
SELECT tv_show.tv_show_ID, tv_show.tv_show_name, tv_show.Original_Airdate FROM tv_show ORDER BY tv_show.tv_show_ID NULLS LAST;
SELECT city_channel.City_channel_ID, ciity_channel.Station_name FROM ciity_channel WHERE ciity_channel.Affiliation!= 'ABC' ORDER BY ciity_channel.City;
SELECT radio.tv_show_ID FROM radio WHERE (radio.erp_kW > 150 OR radio.erp_kW < 30)
SELECT radio.tv_show_ID FROM tv_show WHERE tv_show.tv_show_name = 'Radio' AND tv_show.sub_tittle = 'Radio' ORDER BY tv_show.original_airdate DESC LIMIT 1;
SELECT radio.City_channel_ID, AVG(radio.ERP_kW) AS average_erp FROM radio JOIN city_channel_radio ON radio.Radio_ID = city_channel_radio.Radio_ID GROUP BY city_channel_radio.City_channel_ID;
SELECT city_channel.City_channel_ID, citiy_channel.Affiliation FROM city_channel GROUP BY citiy_channel.Affiliation ORDER BY citiy_channel.Affiliation;
SELECT city_channel.City_channel_ID, citi_channel.Affiliation FROM city_channel citi_channel JOIN (SELECT City_channel_ID, COUNT(*) AS frequency FROM city_channel GROUP BY City_channel_ID ORDER BY frequency DESC LIMIT 1) AS max_frequency ON citi_channel.City_channel_ID = max_frequency.City_channel_ID;
SELECT city_channel.City_channel_ID, citi_channel.Affiliation FROM city_channel JOIN (SELECT City_channel_ID, COUNT(*) AS affiliation_count FROM city_channel GROUP BY City_channel_ID HAVING COUNT(*) > 3) AS subquery ON city_channel.ID = subquery.City_channel_ID;
SELECT city_channel.City_channel_ID, city_channel.Station_name, city_channel.City FROM city_channel ORDER BY city_channel.Station_name ASC;
SELECT radio.tv_show_ID, radio.transmitter, city_channel.city FROM radio JOIN city_channel ON radio.radio_ID = city_channel.ID;
SELECT radio.tv_show_ID, radio.transmitter, city_channel.station_name FROM radio JOIN city_channel ON radio.city_channel_ID = city_channel.ID ORDER BY radio.erp DESC;
SELECT radio.tv_show_ID, COUNT(city_channel.ID) AS number_of_city_channels FROM radio JOIN city_channel ON radio.city_channel_ID = city_channel.ID GROUP BY radio.tv_sho_id
SELECT radio.tv_show_ID FROM radio WHERE NOT EXISTS (SELECT 1 FROM city_channel_radio WHERE radio.radio_id = city_channel_radio.radio_id)
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle WHERE vehicle.Power > 6000 ORDER BY vehicle.Top_Speed DESC LIMIT 1;
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle WHERE vehicle.Power > 6000 ORDER BY vehicle.Top_Speed DESC LIMIT 1;
SELECT driver.Driver_ID, driver.Name FROM driver WHERE LOWER(driver.Citizenship) = 'united states' ORDER BY driver.Driver_ID NULLS LAST;
SELECT driver.Driver_ID, driver.Name FROM driver WHERE LOWER(driver.Citizenship) = 'united states' ORDER BY driver.Driver_ID NULLS LAST;
SELECT driver.Driver_ID, COUNT(*) AS number_of_vehicles FROM vehicle_driver GROUP BY drive_r ORDER BY number_of_vehicles DESC LIMIT 1;
SELECT driver.Driver_ID, COUNT(*) AS num_vehicles FROM vehicle_driver JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID GROUP BY driveer.Driver_ID ORDER BY num_vehicles DESC LIMIT 1;
SELECT vehicle.Vehicle_ID, MAX(vehicle.Power) AS max_power, AVG(vehicle.Power) AS avg_power FROM vehicle WHERE LOWER(vehicle.Builder) = 'zhuzhou' GROUP BY vehicle.Vehicle_ID ORDER BY vehicle.Vehicle_ID NULLS LAST;
SELECT vehicle.Vehicle_ID, MAX(vehicle.Power) AS max_power, AVG(vehicle.Power) AS avg_power FROM vehicle WHERE LOWER(vehicle.Builder) = 'zhuzhou' GROUP BY vehicle.Vehicle_ID ORDER BY vehicle.Vehicle_ID NULLS LAST;
SELECT vehicle.Vehicle_ID FROM vehicle_driver WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(DISTINCT Driver_ID) ASC LIMIT 1);
SELECT vehicle.Vehicle_ID FROM vehicle_driver WHERE (SELECT COUNT(*) FROM vehicle_driver) = (SELECT COUNT(*) FROM vehicle_driver WHERE vehicle_id = vehicle.Vehicle_ID);
SELECT vehicle.Vehicle_ID, MAX(vehicle.Top_Speed) AS Top_Speed, MAX(vehicle.Power) AS Power FROM vehicle WHERE vehicle.Build_Year = '1996' GROUP BY vehicle.Vehicle_ID ORDER BY vehicle.Vehicle_ID NULLS LAST;
SELECT vehicle.Vehicle_ID, MAX(vehicle.Top_Speed) AS Top_Speed, MAX(vehicle.Power) AS Power FROM vehicle WHERE vehicle.Build_Year = '1996' GROUP BY vehicle.Vehicle_ID ORDER BY Top_Speed DESC, Power DESC LIMIT 1;
SELECT vehicle.Vehicle_ID, CAST(v.build_year AS integer) AS Build_Year, v.model, v.builder FROM vehicle v ORDER BY v.vehicle_id NULLS LAST;
SELECT vehicle.Vehicle_ID, CAST(v.build_year AS integer) AS Build_Year, v.model, v.builder FROM vehicle v
SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT vehicle_driver.Driver_ID FROM vehicle_driver JOIN vehicle ON vehicle_vehicle_id = vehicle.Vehicle_ID WHERE CAST(vehicle.Build_Year AS integer) = 2012);
SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID IN (SELECT vehicle_driver.Driver_ID FROM vehicle_driver JOIN vehicle ON vehicle_vehicle_id = vehicle.Vehicle_ID WHERE vehicle.Build_Year = '2012') GROUP BY driver.Driver_ID ORDER BY COUNT(DISTINCT vehicle_vehicle_id) DESC NULLS LAST;
SELECT driver.Driver_ID FROM driver WHERE LOWER(driver.Racing_Series) = 'nascar' GROUP BY driver.Driver_ID;
SELECT driver.Driver_ID FROM driver WHERE LOWER(driver.Racing_Series) = 'nascar' GROUP BY driver.Driver_ID;
SELECT vehicle.Vehicle_ID, AVG(vehicle.Top_Speed) AS average_top_speed FROM vehicle GROUP BY vehicle.Vehicle_ID ORDER BY average_top_speed DESC NULLS LAST;
SELECT vehicle.Vehicle_ID, AVG(vehicle.Top_Speed) AS Average_Top_Speed FROM vehicle GROUP BY vehicle.Vehicle_ID ORDER BY vehicle.Vehicle_ID NULLS LAST;
SELECT driver.Driver_ID, driver.Name FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Power > 5000 GROUP BY driver.Driver_ID, driver.Name ORDER BY driver.Driver_ID NULLS LAST;
SELECT driver.Driver_ID, driver.Name FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Power > 5000;
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle WHERE (CAST(vehicle.Total_Production AS INTEGER) > 100 OR vehicle.Top_Speed > 150);
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle WHERE (CAST(vehicle.Total_Production AS INTEGER) > 100 OR CAST(vehicle.Top_Speed AS INTEGER) > 150);
SELECT vehicle.Vehicle_ID, vehicle.Model, CAST(vehicle.Build_Year AS integer) AS Build_Year FROM vehicle WHERE LOWER(vehicle.Model) LIKE '%dj%' ORDER BY vehicle. Vehicle_ID NULLS LAST;
SELECT vehicle.Vehicle_ID, vehicle.Model, CAST(vehicle.Build_Year AS integer) AS Build_Year FROM vehicle WHERE LOWER(vehicle.Model) LIKE '%dj%' ORDER BY vehicle.Vehicle_ID NULLS LAST;
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle LEFT JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle_driver.Vehicle_ID IS NULL;
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle LEFT JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle_driver.Vehicle_ID IS NULL;
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle JOIN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) >= 2) AS d ON vehicle.Vehicle_ID = d.Vehicle_ID WHERE vehicle.Builder ilike '%Ziyang%' ORDER BY vehicle.Vehicle_ID NULLS LAST;
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle JOIN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) = 2) AS subquery ON vehicle.Vehicle_ID = subquery.Vehicle_ID UNION SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle WHERE LOWER(vehicle.Builder) = 'ziyang' ORDER BY vehicle.Vehicle_ID NULLS LAST;
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle JOIN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) > 2 UNION SELECT Vehicle_ID FROM vehicle_driver WHERE Driver_ID IN (SELECT Driver_ID FROM driver WHERE Name = 'Jeff Gordon')) AS subquery ON vehicle.Vehicle_ID = subquery.Vehicle_ID ORDER BY vehicle.Vehicle_ID NULLS LAST;
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle JOIN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) > 2 UNION SELECT Vehicle_ID FROM vehicle_driver WHERE Driver_ID IN (SELECT Driver_ID FROM driver WHERE Name = 'Jeff Gordon')) AS subquery ON vehicle.Vehicle_ID = subquery.Vehicle_ID ORDER BY vehicle.Vehicle_ID NULLS LAST;
SELECT vehicle.Vehicle_ID FROM vehicle WHERE vehicle.Top_Speed = (SELECT MAX(vehicle.Top_Speed) FROM vehicle);
SELECT vehicle.Vehicle_ID, COUNT(*) AS total_vehicles FROM vehicle WHERE vehicle.Top_Speed = (SELECT MAX(vehicle.Top_Speed) FROM vehicle) GROUP BY vehicle.Vehicle_ID;
SELECT driver.Driver_ID, driver.Name FROM driver ORDER BY driver.Name ASC;
SELECT driver.Driver_ID, driver.Name FROM driver ORDER BY driver.Name ASC;
SELECT driver.Driver_ID, COUNT(*) AS number_of_drivers FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID GROUP BY driver.Racing_Series ORDER BY number_of_drivers DESC NULLS LAST;
SELECT driver.Driver_ID, COUNT(*) AS total_drivers FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID GROUP BY driver.Racing_Series ORDER BY total_drivers DESC;
SELECT driver.Driver_ID, driver.Name, driver.Citizenship FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE LOWER(vehicle.Model) = 'dj1' ORDER BY driver.Driver_ID NULLS LAST;
SELECT driver.Driver_ID, driver.Name, driver.Citizenship FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE LOWER(vehicle.Model) = 'dj1' ORDER BY driver.Driver_ID NULLS LAST;
SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID NOT IN (SELECT vehicle_driver.Driver_ID FROM vehicle_driver) GROUP BY driver.Driver_ID;
SELECT driver.Driver_ID FROM driver WHERE driver.Driver_ID NOT IN (SELECT vehicle_driver.Driver_ID FROM vehicle_driver) GROUP BY driver.Driver_ID;
SELECT Exams.Student_Answer_ID FROM Student_Answers;
SELECT Exams.Student_Answer_ID, COUNT(*) AS Number_of_Exams FROM Student_Answers GROUP BY Exam_ID;
SELECT Exams.Satisfactory_YN FROM Exams WHERE Exam_ID IN (SELECT Exam_ID FROM Questions_in_Exams);
SELECT Exams.Satisfactory_YN, Exam.Name, Exam.Subject FROM Exam;
SELECT Exams.Student_Answer_ID, Exams.Exam_Name, Exams.Exam_Date FROM Exams JOIN Student_Answers ON Exams.Exam_ID = Student_Answers.Exam_ID WHERE Exams.Subject_Code!= 'Database' ORDER BY Exams.Exam_Date DESC;
SELECT Exams.Student_Answer_ID, Exams.Exam_Date, Exams.Exam_Name FROM Exams WHERE Exams.Subject_Code!= 'Database' ORDER BY Exams.Exam_Date DESC;
SELECT Exams.Student_Answer_ID, Exams.Exam_Date FROM Exams JOIN Student_Answers ON Exams.Student_Answer_ID = Student_Answers.Student_Answer_ID WHERE Exams.Subject_Code LIKE '%data%' ORDER BY Exams.Exam_Date DESC;
SELECT Exams.Student_Answer_ID, Exams.Exam_Date FROM Exams JOIN Student_Answers ON Exams.Exam_ID = Student_Answers.Exam_ID WHERE Exams.Subject_Code LIKE '%data%' ORDER BY Exams.Exam_Date DESC;
SELECT Questions.Student_Answer_ID, COUNT(*) AS total_answers FROM Student_Answers GROUP BY Student_Answer_ID;
SELECT Questions_in_Exams.Student_Answer_ID, COUNT(*) AS Count FROM Questions_in_Exams JOIN Student_Answers ON Questions_in_Exams.Question_ID = Student_Answers.Question_ID GROUP BY Questions_in_Exams.Student_Answer_ID;
SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' GROUP BY Student_Answer_Text;
SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' GROUP BY Student_Answer_Text;
SELECT Satisfactory_YN, COUNT(DISTINCT Comments) AS distinct_comments FROM Student_Answers GROUP BY Satisfactory_YN ORDER BY distinct_comments DESC;
SELECT Satisfactory_YN, COUNT(DISTINCT Comments) AS distinct_comments_count FROM Student_Answers GROUP BY Satisfactory_YN ORDER BY distinct_comments_count DESC;
SELECT Student_Answer_Text, COUNT(*) AS Count FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY Count DESC;
SELECT Student_Answer_Text, COUNT(*) AS Frequency FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY Frequency DESC;
SELECT Satisfactory_YN, s.First_Name, sa.Date_of_Answer FROM Student_Answers sa JOIN Students s ON sa.Student_ID = s.Student_ID;
SELECT Satisfactory_YN, s.First_Name, sa.Date_of_Answer FROM Student_Answers sa JOIN Students s ON sa.Student_ID = s.Student_ID;
SELECT Satisfactory_YN, Student_Answer_Text, Date_of_Answer, Email_Adress FROM Student_Answers JOIN Students ON Student_ID = Student_ID ORDER BY Date_of_Answer DESC;
SELECT Satisfactory_YN, s.Email_Adress, sa.Date_of_Answer FROM Student_Answers sa JOIN Students s ON sa.Student_ID = s.Student_ID ORDER BY Date_of_Answer DESC;
SELECT Assessment FROM Student_Assessments WHERE Assessment IN (SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1);
SELECT Assessment, COUNT(*) AS Frequency FROM Student_Assessments GROUP BY Assessment ORDER BY Frequency ASC LIMIT 1;
SELECT Satisfactory_YN, COUNT(*) AS number_of_answers FROM Student_Answers GROUP BY Satisfactory_YN HAVING COUNT(*) >= 2;
SELECT Satisfactory_YN, COUNT(*) AS number_of_answers FROM Student_Answers GROUP BY Satisfactory_YN HAVING COUNT(*) >= 2;
SELECT Valid_Answer_ID, Valid_Answer_Text FROM Valid_Answers WHERE Valid_Answer_ID IN (SELECT Valid_Answer_ID FROM Valid_Answers GROUP BY Valid_Answer_ID ORDER BY COUNT(*) DESC LIMIT 1);
SELECT Valid_Answer_ID, COUNT(*) AS Frequency FROM Valid_Answers GROUP BY Valid_Answer_ID ORDER BY Frequency DESC LIMIT 1;
SELECT Satisfactory_YN FROM Students WHERE Gender_MFU!= 'M' ORDER BY Last_Name;
SELECT Satisfactory_YN FROM Student_Answers WHERE Student_ID IN (SELECT Student_ID FROM Students WHERE Gender_MFU!= 'M') ORDER BY Satisfactory_YN;
SELECT Satisfactory_YN, COUNT(*) AS Number_of_Students FROM Student_Answers GROUP BY Satisfactory_YN;
SELECT Satisfactory_YN, COUNT(*) AS Number_of_students FROM Student_Answers GROUP BY Satisfactory_YN;
SELECT Satisfactory_YN FROM Student_Answers WHERE Student_ID IN (SELECT Student_ID FROM Students WHERE Gender_MFU = 'F' OR Gender_MFU = 'M') ORDER BY Student_ID;
SELECT Satisfactory_YN FROM Students WHERE Gender_MFU IN ('F', 'M')
SELECT Satisfactory_YN FROM Student_Answers WHERE Satisfactory_YN IS NULL;
SELECT Satisfactory_YN FROM Student_Answers WHERE Satisfactory_YN IS NULL;
SELECT Student_Answer_Text FROM Student_Answers WHERE Comments LIKE '%Normal%' AND Comments LIKE '%Absent%';
SELECT Student_Answer_Text FROM Student_Answers WHERE Comments IN ('Normal', 'Absent');
SELECT Questions.Student_Answer_ID, COUNT(Question_ID) AS number_of_questions FROM Questions JOIN Questions_in_Exams ON Questions.Question_ID = Questions_in_Exams.Question_ID GROUP BY Questions.Student_Answer_ID HAVING COUNT(Question_ID) >= 3 ORDER BY number_of_questions DESC;
SELECT Questions.Student_Answer_ID FROM Questions WHERE Questions.Type_of_Question_Code IN (SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(Question_ID) >= 3);
SELECT Student_Answer_ID, First_Name, Middle_Name, Last_Name FROM Student_Answers JOIN Students ON Student_Answers.Student_ID = Students.Student_ID;
SELECT Student_Answer_ID, Exam_ID, Question_ID, Student_ID, Date_of_Answer, Comments, Satisfactory_YN, Student_Answer_Text FROM Student_Answers;
SELECT Addresses.order_id FROM Addresses;
SELECT Addresses.order_id, COUNT(*) AS total_addresses FROM Addresses JOIN Customers ON Addresses.address_id = Customers.address_id GROUP BY Addresses.order_id;
SELECT Addresses.order_id, Addresses.address_details FROM Addresses JOIN Customers ON Addresses.address_id = Customers.address_id;
SELECT Addresses.order_id, Addresses.address_details FROM Addresses JOIN Customers ON Addresses.address_id = Customers.address_id;
SELECT product_id FROM Products;
SELECT product_id FROM Products;
SELECT product_id, product_type_code, product_name FROM Products;
SELECT product_id, product_type_code, product_name FROM Products;
SELECT product_id, product_price FROM Products WHERE LOWER(product_name) ='monitor';
SELECT product_id, product_price FROM Products WHERE LOWER(product_name) ='monitor';
SELECT product_id, MIN(product_price) AS min_price, AVG(product_price) AS avg_price, MAX(product_price) AS max_price FROM Products GROUP BY product_id
SELECT product_id, MIN(product_price) AS min_price, AVG(product_price) AS avg_price, MAX(product_price) AS max_price FROM Products GROUP BY product_id ORDER BY product_id;
SELECT product_id, AVG(product_price) AS average_price FROM Products WHERE product_type_code = 'Clothes' GROUP BY product_id;
SELECT product_id, AVG(product_price) AS average_price FROM Products WHERE product_type_code = 'Clothes' GROUP BY product_id;
SELECT product_id FROM Products WHERE product_type_code = 'hardware';
SELECT product_id FROM Products WHERE product_type_code = 'Hardware';
SELECT product_id, product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products);
SELECT product_id, product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products);
SELECT product_id, product_name FROM Products WHERE product_type_code = 'hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'hardware');
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware');
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1;
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1;
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT 1;
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT 1;
SELECT product_id, product_name, product_price FROM Products ORDER BY product_price DESC;
SELECT product_id, product_name, product_price FROM Products ORDER BY product_price DESC;
SELECT product_id, product_name, product_price FROM Products WHERE product_type_code = 'hardware' ORDER BY product_price ASC;
SELECT product_id, product_name, product_price FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC;
SELECT product_id, COUNT(*) AS total_products FROM Products GROUP BY product_id ORDER BY total_products DESC;
SELECT product_id, COUNT(*) AS number_of_products FROM Products GROUP BY product_id ORDER BY number_of_products DESC;
SELECT product_id, AVG(product_price) AS average_price FROM Products GROUP BY product_id ORDER BY product_id;
SELECT product_id, AVG(product_price) AS average_product_price FROM Products GROUP BY product_id ORDER BY product_id;
SELECT product_id, COUNT(*) AS number_of_products FROM Products GROUP BY product_id HAVING COUNT(*) >= 2 ORDER BY product_id;
SELECT product_id, COUNT(*) AS number_of_products FROM Products GROUP BY product_id HAVING COUNT(*) >= 2 ORDER BY product_id;
SELECT product_id, COUNT(*) AS total_products FROM Products GROUP BY product_id ORDER BY total_products DESC LIMIT 1;
SELECT product_id, COUNT(*) AS frequency FROM Products GROUP BY product_id ORDER BY frequency DESC LIMIT 1;
SELECT Customer_Orders.order_id, COUNT(DISTINCT Customer_Orders.customer_id) AS number_of_customers FROM Customer_Orders GROUP BY order_id;
SELECT Customer_Orders.order_id, COUNT(DISTINCT Customers.customer_id) AS total_customers FROM Customer_Orders JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id GROUP BY Customer_Orders.order_id;
SELECT Customer_Orders.order_id, Customers.customer_id, Customers.customer_name FROM Customer_Orders JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id;
SELECT Customer_Orders.order_id, Customers.customer_name FROM Customer_Orders JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id;
SELECT Customer_Orders.order_id, Customers.customer_address, Customers.customer_phone, Customers.customer_email FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id WHERE Customers.customer_name ilike '%Jeromy%' ORDER BY Customer_Orders.order_id DESC LIMIT 1;
SELECT Customer_Orders.order_id, Customers.customer_name, Addresses.address_details AS customer_address, Customers.customer_phone, Customers.customer_email FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id JOIN Addresses ON Customers.address_id = Addresses.address_id WHERE Customers.customer_name ilike '%Jeromy%' ORDER BY Customer_Orders.order_id NULLS LAST;
SELECT product_id, COUNT(*) AS total_customers FROM Customers GROUP BY product_id;
SELECT product_id, COUNT(*) AS number_of_customers FROM Customers GROUP BY product_id;
SELECT product_id FROM Products WHERE product_name = 'Most Popular Product';
SELECT product_id FROM Products WHERE product_name = 'Most Common Payment Method'
SELECT product_id FROM Products;
SELECT Customer_Orders.order_id, Customers.customer_name FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id WHERE Customers.payment_method_code IN (SELECT MIN(COUNT(payment_method_code)) AS min_count FROM Customers GROUP BY payment_method_code) ORDER BY Customer_Orders.order_id;
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Jeromy';
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Jeromy';
SELECT product_id FROM Products;
SELECT product_id FROM Products;
SELECT product_id, product_type_code FROM Products ORDER BY product_name;
SELECT product_id, product_type_code FROM Products ORDER BY product_name ASC;
SELECT product_id, COUNT(*) AS product_count FROM Products GROUP BY product_id ORDER BY product_count ASC LIMIT 1;
SELECT product_id, COUNT(*) AS count FROM Products GROUP BY product_id ORDER BY count ASC LIMIT 1;
SELECT Addresses.order_id FROM Customer_Orders;
SELECT order_id FROM Customer_Orders;
SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id IN (SELECT customer_id FROM Customers WHERE customer_name = 'Jeromy');
SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id IN (SELECT customer_id FROM Customers WHERE customer_name = 'Jeromy');
SELECT Customer_Orders.order_id, Customers.customer_name, COUNT(Customer_Orders.order_id) AS order_count FROM Customer_Orders JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id GROUP BY Customer_Orders.order_id, Customers.customer_name ORDER BY Customers.customer_name;
SELECT Customer_Orders.order_id, Customers.customer_name, COUNT(Customer_Orders.order_id) AS order_count FROM Customer_Orders JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id GROUP BY Customer_Orders.order_id, Customers.customer_name ORDER BY Customers.customer_name;
SELECT order_id, COUNT(*) AS order_count FROM Customer_Orders GROUP BY ord_id ORDER BY order_count DESC LIMIT 1;
SELECT order_id, c.customer_name, c.customer_phone, c.customer_email FROM Customer_Orders co JOIN Customers c ON co.customer_id = c.customer_id GROUP BY co.order_id, c.customer_name, c.customer_phone, c.customer_email ORDER BY COUNT(co.order_id) DESC LIMIT 1;
SELECT order_id, COUNT(*) AS total_orders FROM Customer_Orders GROUP BY order_status_code ORDER BY total_orders DESC;
SELECT order_id, COUNT(*) AS number_of_orders FROM Customer_Orders GROUP BY order_status_code ORDER BY number_of_orders DESC;
SELECT order_id, COUNT(*) AS total_orders FROM Customer_Orders GROUP BY order_status_code ORDER BY total_orders DESC LIMIT 1;
SELECT order_id, COUNT(*) AS total_orders FROM Customer_Orders GROUP BY odrer_id ORDER BY total_orders DESC LIMIT 1;
SELECT Customer_Orders.order_id FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT Customer_Orders.customer_id FROM Customer_Orders)
SELECT Customer_Orders.order_id FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT Customer_Orders.customer_id FROM Customer_Orders)
SELECT product_id, product_name FROM Products WHERE product_id NOT IN (SELECT oi.product_id FROM Order_Items oi);
SELECT product_id, product_name FROM Products WHERE product_id NOT IN (SELECT oi.product_id FROM Order_Items oi);
SELECT order_quantity FROM Order_Items WHERE product_id IN (SELECT product_id FROM Products WHERE LOWER(product_name) ='monitor') GROUP BY order_quantity;
SELECT product_id, SUM(order_quantity::INTEGER) AS total_ordered FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id WHERE LOWER(p.product_type_code) ='monitor' GROUP BY product_id;
SELECT order_id FROM Order_Items WHERE product_id IN (SELECT product_id FROM Products WHERE LOWER(product_name) ='monitor') GROUP BY order_id HAVING COUNT(DISTINCT order_id) > 1;
SELECT order_id, COUNT(DISTINCT ord.customer_id) AS unique_customers FROM Customer_Orders ord JOIN Order_Items oi ON ord.order_id = oi.order_id WHERE LOWER(oi.product_id::text) LIKE '%monitor%' GROUP BY order_id;
SELECT Customers.order_id, COUNT(DISTINCT Customers.customer_id) AS number_of_customers FROM Customer_Orders Customers GROUP BY Customers.order_id;
SELECT Customer_Orders.order_id, COUNT(DISTINCT Customers.customer_id) AS unique_customers FROM Customer_Orders JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id GROUP BY Customer_Orders.order_id;
SELECT Customer_Orders.order_id, Customers.customer_id FROM Customer_Orders JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id WHERE Customer_Orders.order_id IS NULL;
SELECT Customer_Orders.order_id FROM Customer_Orders WHERE Customer_Orders.order_id NOT IN (SELECT Order_Items.order_id FROM Order_Items);
SELECT order_id, order_date FROM Customer_Orders WHERE order_id IN (SELECT oi.order_id FROM Order_Items oi WHERE CAST(oi.order_quantity AS INT) > 6 UNION SELECT oi.order_id FROM Order_Items oi GROUP BY oi.order_id HAVING COUNT(DISTINCT oi.product_id) > 3);
SELECT order_id, order_date FROM Customer_Orders WHERE order_id IN (SELECT oi.order_id FROM Order_Items oi GROUP BY oi.order_id HAVING COUNT(DISTINCT oi.product_id) > 3 UNION SELECT oi.order_id FROM Order_Items oi WHERE CAST(oi.order_quantity AS INT) > 6);
SELECT building.Name FROM building;
SELECT building.Capital, COUNT(*) AS total_buildings FROM building GROUP BY building.Capital;
SELECT building.Name FROM building WHERE building.Number_of_Stories IS NOT NULL ORDER BY building.Number_of_Stories ASC;
SELECT building.Name, building.Number_of_Stories FROM building ORDER BY building.Number_of_Stories ASC;
SELECT building.Name, building.Address, building.Completed_Year FROM building ORDER BY building.Completed_Year DESC;
SELECT building.Name, building.Address FROM building ORDER BY building.Completed_Year DESC;
SELECT building.Name, MAX(b.Number_of_Stories) AS max_number_of_stories FROM building b WHERE b.Completed_Year!= 1980 GROUP BY building.Name ORDER BY max_number_of_stories DESC NULLS LAST LIMIT 1;
SELECT building.Name, MAX(b.Number_of_Stories) AS max_stories FROM building b WHERE b.Completed_Year!= 1980 GROUP BY building.Name ORDER BY max_stories DESC NULLS LAST LIMIT 1;
SELECT region.Population FROM region;
SELECT region.Population FROM region;
SELECT region.Name FROM region WHERE region.Name IS NOT NULL ORDER BY region.Name ASC;
SELECT region.Name FROM region WHERE region.Name IS NOT NULL ORDER BY region.Name ASC;
SELECT region.Name, region.Capital FROM region WHERE region.Area > 10000 ORDER BY region.Name NULLS LAST;
SELECT region.Capital FROM region WHERE region.Area > 10000;
SELECT region.Capital FROM region WHERE region.Population = (SELECT MAX(region2.Population) FROM region AS region2);
SELECT region.Name, reg.Capital FROM region reg WHERE reg.Population = (SELECT MAX(r2.Population) FROM region r2);
SELECT region.Name FROM region WHERE region.Area IN (SELECT Area FROM region ORDER BY Area DESC LIMIT 5) ORDER BY region.Area DESC;
SELECT region.Name FROM region WHERE region.Area IN (SELECT MAX(Area) FROM region GROUP BY Name ORDER BY MAX(Area) DESC LIMIT 5);
SELECT building.Name, region.Name FROM building JOIN region ON building.Region_ID = region.Region_ID;
SELECT building.Name, region.Name FROM building JOIN region ON building.Region_ID = region.Region_ID;
SELECT region.Name FROM region WHERE Region_ID IN (SELECT Building.Region_ID FROM Building GROUP BY Building.Region_ID HAVING COUNT(Building.Building_ID) > 1);
SELECT region.Name FROM region WHERE region.Region_ID IN (SELECT b.Region_ID FROM building b GROUP BY b.Region_ID HAVING COUNT(b.Building_ID) > 1);
SELECT region.Capital FROM region WHERE Region_ID = (SELECT building.Region_ID FROM building GROUP BY building.Region_ID ORDER BY COUNT(building.Building_ID) DESC LIMIT 1);
SELECT region.Name, MAX(bldg.Number_of_Buildings) AS max_buildings FROM (SELECT b.Region_ID, COUNT(*) AS Number_of_Buildings FROM building b GROUP BY b.Region_ID) AS bldg JOIN region ON bldg.Region_ID = region.Region_ID GROUP BY region.Name ORDER BY max_buildings DESC LIMIT 1;
SELECT building.Name, building.Address, region.Capital FROM building JOIN region ON building.Region_ID = region.Region_ID;
SELECT building.Name, building.Address, region.Name AS Region FROM building JOIN region ON building.Region_ID = region.Region_ID;
SELECT building.Name, SUM(building.Number_of_Stories) AS total_number_of_stories FROM building JOIN region ON building.Region_ID = region.Region_ID WHERE LOWER(region.Name) = 'abruzzo' GROUP BY building.Name;
SELECT building.Name, building.Number_of_Stories FROM building JOIN region ON building.Region_ID = region.Region_ID WHERE LOWER(region.Name) = 'abruzzo' ORDER BY building.Name NULLS LAST;
SELECT building.Region_ID, COUNT(*) AS number_of_buildings FROM building GROUP BY builiding.Region_ID;
SELECT building.Region_ID, COUNT(*) AS number_of_buildings FROM building GROUP BY Region_ID;
SELECT building.Region_ID, COUNT(*) AS number_of_buildings FROM building GROUP BY builiding.Region_ID ORDER BY number_of_buildings DESC LIMIT 1;
SELECT building.Region_ID, COUNT(*) AS number_of_buildings FROM building GROUP BY builiding.Region_ID ORDER BY number_of_buildings DESC LIMIT 1;
SELECT region.Name FROM region WHERE NOT EXISTS (SELECT 1 FROM building WHERE building.Region_ID = region.Region_ID)
SELECT region.Name FROM region WHERE NOT EXISTS (SELECT 1 FROM building WHERE building.Region_ID = region.Region_ID)
SELECT building.Region_ID FROM building WHERE number_of_stories > 20 AND number_of_stories < 15;
SELECT building.Region_ID FROM building WHERE builiding.Number_of_Stories > 20 AND builiding.Number_of_Stories < 15 GROUP BY builiding.Region_ID;
SELECT building.Region_ID, building.Address FROM building GROUP BY building.Region_ID, building.Address ORDER BY building.Region_ID NULLS LAST;
SELECT building.Region_ID, building.Address FROM building GROUP BY building.Region_ID, building.Address ORDER BY building.Region_ID NULLS LAST;
SELECT building.Name, builiding.Completed_Year FROM building ORDER BY Number_of_Stories DESC;
SELECT building.Name, building.Completed_Year FROM building ORDER BY building.Number_of_Stories DESC;
SELECT Channels.Customers_and_Services_ID, Channels.Channel_ID, Channels.Channel_Details FROM Channels ORDER BY Channels.Channel_Details ASC;
SELECT Channels.Customers_and_Services_ID, Channels.Channel_Details FROM Channels ORDER BY Channels.Channel_Details ASC;
SELECT Services.Customers_and_Services_ID FROM Customers_and_Services;
SELECT Services.Customers_and_Services_ID, COUNT(*) AS Number_of_Services FROM Customers_and_Services GROUP BY Customers_and_Services_ID;
SELECT Analytical_Layer_Type_Code, COUNT(*) AS Count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY Count DESC LIMIT 1;
SELECT Analytical_Layer_Type_Code, COUNT(*) AS Frequency FROM Analytical_Layer GROUP BY Analtical_Layer_Type_Code ORDER BY Frequency DESC LIMIT 1;
SELECT Services.Customers_and_Services_ID FROM Customers_and_Services WHERE Customers_and_Services.Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch');
SELECT Services.Customers_and_Services_ID, Services.Service_Details FROM Customers_and_Services JOIN Services ON Customers_and_Services.Service_ID = Services.Service_ID WHERE Customers_and_Services.Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details ilike '%Hardy%Kutch%');
SELECT Services.Customers_and_Services_ID, COUNT(Customer_Interaction_ID) AS interaction_count FROM Customer_Interactions JOIN Customers_and_Services ON Customer_Interactions.Service_ID = Customers_and_Services.Service_ID GROUP BY Customers_and_Services_ID HAVING COUNT(Customer_Interaction_ID) > 3 ORDER BY interaction_count DESC;
SELECT Services.Customers_and_Services_ID, COUNT(*) AS usage_count FROM Customers_and_Services JOIN Analytical_Layer ON Customers_and_Services.Customers_and_Services_ID = Analytical_Layer.Customers_and_Services_ID GROUP BY Customers_and_Services.Customers_and_Services_ID HAVING COUNT(*) > 3
SELECT Customer_Interactions.Customers_and_Services_ID, COUNT(Custome_Interaction_ID) AS interaction_count FROM Customer_Interactions JOIN Customers_and_Services ON Customer_Interactions.Customer_ID = Customers_and_Services.Customer_ID GROUP BY Customers_and_Services_ID ORDER BY interaction_count DESC LIMIT 1;
SELECT Customer_Interactions.Customers_and_Services_ID, COUNT(Custome_Interaction_ID) AS interaction_count FROM Customer_Interactions JOIN Customers_and_Services ON Customer_Interactions.Service_ID = Customers_and_Services.Service_ID GROUP BY Customers_and_Services_ID ORDER BY interaction_count DESC LIMIT 1;
SELECT Customer_Interactions.Customers_and_Services_ID, COUNT(DISTINCT Cusstomer_Interaction.Customeer_ID) AS Service_Count FROM Customer_Interactions Cusstomer_Interaction JOIN Customers_and_Services ON Cusstomer_Interaction.Service_ID = Customers_and_Services.Service_ID GROUP BY Customers_and_Services_ID ORDER BY Service_Count DESC LIMIT 1;
SELECT Customer_Interactions.Customers_and_Services_ID, COUNT(DISTINCT csi.Service_ID) AS service_count FROM Customers_and_Services csi JOIN Customer_Interactions c ON csi.Customer_ID = c.Customer_ID GROUP BY csi.Customers_and_Services_ID ORDER BY service_count DESC LIMIT 1;
SELECT Customer_Interactions.Customers_and_Services_ID FROM Customers_and_Services WHERE Customers_and_Services_ID NOT IN (SELECT Customers_and_Services_ID FROM Customer_Interactions);
SELECT Customer_Interactions.Customers_and_Services_ID FROM Customers_and_Services WHERE Customers_and_Services_ID NOT IN (SELECT Customers_and_Services_ID FROM Customer_Interactions);
SELECT Customer_Interactions.Customers_and_Services_ID, Customers.Customer_Details FROM Customers_and_Services JOIN Customer_Interactions ON Customers_and_Services.Custome rs_and_Services_ID = Customer_Interactions.Customer_Interaction_ID JOIN Customers ON Customers_and_Services.Customer_ID = Customers.Customer_ID WHERE Customers_and_Services.Custome rs_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Customers_and_Services GROUP BY Customers_and_Services_ID ORDER BY COUNT(*) ASC LIMIT 1);
SELECT Customer_Interactions.Customers_and_Services_ID, COUNT(Custome_Interaction_ID) AS Interaction_Count FROM Customer_Interactions JOIN Customers_and_Services ON Customer_Interactions.Service_ID = Customers_and_Services.Service_ID GROUP BY Customers_and_Services_ID ORDER BY Interaction_Count ASC LIMIT 1;
SELECT Customers_and_Services.Customers_and_Services_ID, COUNT(DISTINCT Customers_and_Services.Customer_ID), COUNT(DISTINCT Customers_and_Services.Service_ID) FROM Customers_and_Services GROUP BY Customers_and_Services.Customer_ID, Customers_and_Services.Service_ID;
SELECT Customer_Interactions.Customers_and_Services_ID, COUNT(DISTINCT Cusstomer_Interaction.Customeer_ID) AS Total_Customers, COUNT(DISTINCT Cusstomer_Interaction.Service_ID) AS Total_Services FROM Customers_and_Services Cusstomer_Interaction JOIN Customer_Interactions Cusstomer_Interaction ON Cusstomer_Interaction.Customer_ID = Cusstomer_Interaction.Customer_ID GROUP BY Cusstomer_Interaction.Customer_and_Services_ID;
SELECT Customer_Interactions.Customers_and_Services_ID FROM Customers_and_Services WHERE Customers_and_Services.Customers_and_Services_Details LIKE '%Kutch%'
SELECT Customer_Interactions.Customers_and_Services_ID, Customers.Customer_Details FROM Customers JOIN Customers_and_Services ON Customers.Customer_ID = Customers_and_Services.Customer_ID WHERE Customers.Customer_Details ilike '%Kutch%' ORDER BY Customers_and_Services.Custome
SELECT Services.Customers_and_Services_ID FROM Customers_and_Services WHERE Customers_and_Services.Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch') UNION SELECT ci.Service_ID FROM Customer_Interactions ci JOIN Services s ON ci.Service_ID = s.Service_ID WHERE LOWER(ci.Status_Code) = 'good'
SELECT Customer_Interactions.Customers_and_Services_ID, Services.Service_Details FROM Customers_and_Services JOIN Customer_Interactions ON Customers_and_Services.Customers_and_Services_ID = Customer_Interactions.Customer_Interaction_ID JOIN Services ON Customers_and_Services.Service_ID = Services.Service_ID WHERE Customers_and_Services.Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details ilike '%Hardy%Kutch%') OR Customer_Interactions.Status_Code ilike '%good%' ORDER BY Customers_and_Services.Customers_and_Services_ID;
SELECT Services.Customers_and_Services_ID FROM Customers_and_Services WHERE Customers_and_Services.Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch') AND Customers_and_Services_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Status_Code = 'bad');
SELECT Customers_and_Services.Customers_and_Services_ID, Services.Service_Details FROM Customers_and_Services JOIN Services ON Customers_and_Services.Service_ID = Services.Service_ID JOIN Customer_Interactions ON Customers_and_Services.Customer_ID = Customer_Interactions.Customer_ID WHERE Customers_and_Services.Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details ilike '%Hardy%Kutch%') AND Customer_Interactions.Status_Code = 'Bad' ORDER BY Customers_and_Services.Customers_and_Services_ID;
SELECT Services.Customers_and_Services_ID, Customers_and_Services.Service_ID, Services.Service_Details FROM Customers_and_Services JOIN Services ON Customers_and_Services.Service_ID = Services.Service_ID WHERE Customers_and_Services.Customers_and_Services_ID LIKE '%15ij%'
SELECT Services.Customers_and_Services_ID, Customers_and_Services.Service_Details FROM Customers_and_Services JOIN Services ON Customers_and_Services.Service_ID = Services.Service_ID WHERE Customers_and_Services.Customers_and_Services_Details LIKE '%15 ij%' ORDER BY Customers_and_Services.Service_ID;
SELECT Customer_Interactions.Customers_and_Services_ID, Customers_and_Services.Customer_Details, Services.Service_Details, Channels.Channel_Details FROM Customer_Interactions JOIN Customers_and_Services ON Customer_Interactions.Customers_and_Services_ID = Customers_and_Services.Customers_and_Services_ID JOIN Services ON Customer_Interactions.Service_ID = Services.Service_ID JOIN Channels ON Customer_Interactions.Channel_ID = Channels.Channel_ID WHERE Customer_Interactions.Status_Code ilike '%Stuck%' AND Services.Service_Details ilike '%bad%' AND Channels.Channel_Details ilike '%bad%';
SELECT Customer_Interactions.Customers_and_Services_ID, c.Customer_Details FROM Customer_Interactions JOIN Customers_and_Services ON Customer_Interactions.Customers_and_Services_ID = Customers_and_Services.Customers_and_Services_ID JOIN Customers AS c ON Customers_and_Services.Customer_ID = c.Customer_ID WHERE Customer_Interactions.Status_Code ilike '%Stuck%' AND Customer_Interactions.Services_and_Channels_Details ilike '%bad%';
SELECT Integration_Platform.Customers_and_Services_ID, COUNT(*) AS Successful_Integrations FROM Integration_Platform JOIN Customer_Interactions ON Integration_Platform.Customer_Interaction_ID = Customer_Interactions.Customer_Interaction_ID WHERE Status_Code = 'Successful' GROUP BY Customeyrs_and_Services_ID;
SELECT Integration_Platform.Customers_and_Services_ID, COUNT(*) AS Number_of_Integration_Platforms FROM Integration_Platform JOIN Customers_and_Services ON Integration_Platform.Customer_Interaction_ID = Customers_and_Services.Customers_and_Services_ID WHERE Customers_and_Services.Customers_and_Services_Details LIKE '%Success%' GROUP BY Customeer_ID;
SELECT Customer_Interactions.Customers_and_Services_ID, c.Customer_Details FROM Customer_Interactions JOIN Customers AS c ON Customer_Interactions.Customer_ID = c.Customer_ID WHERE Customer_Interactions.Status_Code = 'Failed' ORDER BY c.Customer_Details;
SELECT Customer_Interactions.Customers_and_Services_ID, c.Customer_Details FROM Customer_Interactions JOIN Integration_Platform ON Customer_Interactions.Customer_Interaction_ID = Integration_Platform.Customer_Interaction_ID JOIN Customers_and_Services ON Customer_Interactions.Customers_and_Services_ID = Customers_and_Services.Customers_and_Services_ID JOIN Customers AS c ON Customers_and_Services.Customer_ID = c.Customer_ID WHERE Integration_Platform.Integration_Platform_Details ilike '%Fail%' ORDER BY Customers_and_Services_ID;
SELECT Services.Customers_and_Services_ID FROM Customers_and_Services WHERE Customers_and_Services_ID NOT IN (SELECT Customers_and_Services_ID FROM Customers_and_Services GROUP BY Customers_and_Services_ID HAVING COUNT(Customers_and_Services_ID) > 1);
SELECT Services.Customers_and_Services_ID FROM Customers_and_Services WHERE Customers_and_Services_ID NOT IN (SELECT Customers_and_Services_ID FROM Customers_and_Services);
SELECT Analytical_Layer_Type_Code, COUNT(*) AS Usage_Count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY Usage_Count DESC;
SELECT Analytical_Layer_Type_Code, COUNT(*) AS usage_count FROM Analytical_Layer GROUP BY Analytic_Layer_Type_Code ORDER BY usage_count DESC;
SELECT Customers_and_Services.Customers_and_Services_ID, Customers_and_Services.Customer_ID, Customers_and_Services.Service_ID, Customers_and_Services.Customers_and_Services_Details FROM Customers_and_Services JOIN Analytical_Layer ON Customers_and_Services.Customers_and_Services_ID = Analytical_Layer.Customers_and_Services_ID WHERE Analytical_Layer.Pattern_Recognition LIKE '%unsatisfied%' ORDER BY Customers_and_Services.Customers_and_Services_ID;
SELECT Services.Customers_and_Services_ID FROM Customers_and_Services WHERE Customers_and_Services_Details = 'unsatisfied'
SELECT vehicles_id FROM Renting_history;
SELECT vehicles_id FROM Renting_history;
SELECT vehicles_id, name FROM Vehicles ORDER BY Model_year DESC;
SELECT vehicles_id, name FROM Vehicles ORDER BY Model_year DESC;
SELECT vehicles_id, type_of_powertrain FROM Vehicles;
SELECT vehicles_id, type_of_powertrain FROM Vehicles GROUP BY vehicle_id, type_of_powertrain;
SELECT vehicles_id, name, type_of_powertrain, annual_fuel_cost FROM Vehicles WHERE Model_year = 2013 OR Model_year = 2014;
SELECT vehicles_id, name, type_of_powertrain, annual_fuel_cost FROM Vehicles WHERE Model_year IN (2013, 2014);
SELECT vehicles_id FROM Vehicles WHERE Model_year = 2014 AND Type_of_powertrain IN (SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013)
SELECT vehicles_id FROM Vehicles WHERE Model_year IN (2013, 2014) GROUP BY vehiclles_id HAVING COUNT(DISTINCT Model_year) = 2;
SELECT vehicles_id, COUNT(*) AS total_vehicles FROM Vehicles GROUP BY vehicle_type;
SELECT vehicles_id, COUNT(*) AS number_of_vehicles FROM Vehicles GROUP BY vehiclles_id ORDER BY number_of_vehicles DESC NULLS LAST;
SELECT vehicles_id, COUNT(*) AS total_vehicles FROM Vehicles GROUP BY vehicle_type ORDER BY total_vehicles DESC LIMIT 1;
SELECT vehicles_id, COUNT(*) AS total_count FROM Vehicles GROUP BY vehicle_id ORDER BY total_count DESC LIMIT 1;
SELECT vehicles_id, MIN(annual_fuel_cost) AS min_annual_fuel_cost, MAX(annual_fuel_cost) AS max_annual_fuel_cost, AVG(annual_fuel_cost) AS avg_annual_fuel_cost FROM Vehicles GROUP BY vehicle_id;
SELECT vehicles_id, MIN(annual_fuel_cost) AS min_annual_fuel_cost, MAX(annual_fuel_cost) AS max_annual_fuel_cost, AVG(annual_fuel_cost) AS avg_annual_fuel_cost FROM Vehicles GROUP BY vehicle_id;
SELECT vehicles_id, name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate;
SELECT vehicles_id, name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate;
SELECT vehicles_id, COUNT(*) AS number_of_vehicles, AVG(annual_fuel_cost) AS average_annual_fuel_cost FROM Vehicles GROUP BY vehicle_type HAVING COUNT(*) >= 2 ORDER BY number_of_vehicles DESC NULLS LAST;
SELECT vehicles_id, COUNT(*) AS number_of_vehicles, AVG(annual_fuel_cost) AS average_annual_fuel_cost FROM Vehicles GROUP BY vehicle_type HAVING COUNT(*) >= 2 ORDER BY number_of_vehicles DESC NULLS LAST;
SELECT customer_id, name, age, membership_credit FROM Customers;
SELECT customer_id, name, age, membership_credit FROM Customers;
SELECT customer_id, MAX(membership_credit) AS max_credit FROM Customers GROUP BY customer_id ORDER BY max_credit DESC LIMIT 1;
SELECT customer_id, name, age FROM Customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM Customers);
SELECT customer_id, AVG(age) AS average_age FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers) GROUP BY customer_id;
SELECT customer_id, AVG(age) AS average_age FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers) GROUP BY customer_id ORDER BY average_age DESC NULLS LAST;
SELECT discount_id, name, membership_credit FROM Discount;
SELECT discount_id, name, membership_credit FROM Discount;
SELECT vehicles_id, name, SUM(total_hours) AS total_rental_hours FROM Renting_history GROUP BY vehicl.es_id, name ORDER BY total_rental_hours DESC NULLS LAST;
SELECT vehicles_id, name AS vehicle_name, SUM(total_hours) AS total_rental_hours FROM Renting_history GROUP BY vehicles_id, name ORDER BY total_rental_hours DESC NULLS LAST;
SELECT vehicles_id FROM Vehicles WHERE vehicle_id NOT IN (SELECT vehicles_id FROM Renting_history)
SELECT vehicles_id FROM Vehicles WHERE vehicle_id NOT IN (SELECT vehicles_id FROM Renting_History)
SELECT customer_id, COUNT(*) AS number_of_rentals FROM Renting_history GROUP BY customer_id HAVING COUNT(*) >= 2 ORDER BY customer_id;
SELECT customer_id, name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(id) >= 2);
SELECT vehicles_id, COUNT(*) AS total_rentals FROM Renting_history GROUP BY vehicle_id ORDER BY total_rentals DESC LIMIT 1;
SELECT vehicles_id, COUNT(*) AS total_rentals FROM Renting_history GROUP BY vehicle_id ORDER BY total_rentals DESC LIMIT 1;
SELECT vehicles_id, SUM(total_hours) AS total_rented_hours FROM Renting_history GROUP BY vehicle_id ORDER BY total_rented_hours DESC;
SELECT vehicles_id, name FROM Vehicles ORDER BY (SELECT SUM(total_hours) FROM Renting_history WHERE vehicles_id = vehicle_id) DESC;
SELECT discount_id, COUNT(*) AS total_rentals FROM Renting_history GROUP BY discout_id ORDER BY total_rentals DESC LIMIT 1;
SELECT discount_id, COUNT(*) AS total_rentals FROM Renting_history GROUP BY discout_id ORDER BY total_rentals DESC LIMIT 1;
SELECT vehicles_id, vehicles.name AS vehicle_name, vehicles.type_of_powertrain FROM renting_history JOIN vehicles ON renting_history.vehicles_id = vehicles.id WHERE total_hours > 30;
SELECT vehicles_id, name, type_of_powertrain FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history WHERE total_hours > 30)
SELECT vehicles_id, type_of_powertrain, AVG(city_fuel_economy_rate) AS avg_city_fuel_rate, AVG(highway_fuel_economy_rate) AS avg_highway_fuel_rate FROM vehicles GROUP BY vehicles_id, type_of_powertrain ORDER BY vehicles_id NULLS LAST;
SELECT vehicles_id, type_of_powertrain, AVG(city_fuel_economy_rate) AS avg_city_fuel_economy_rate, AVG(highway_fuel_economy_rate) AS avg_highway_fuel_economy_rate FROM vehicles GROUP BY vehicles_id, type_of_powertrain ORDER BY vehicles_id NULLS LAST;
SELECT student_id, AVG(amount_of_loan) AS average_amount FROM Student_Loans GROUP BY student_id;
SELECT student_id, AVG(amount_of_loan) AS average_amount FROM Student_Loans GROUP BY student_id;
SELECT student_id, bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(class_id) >= 2) AND student_id NOT IN (SELECT student_id FROM Detention GROUP BY student_id HAVING COUNT(detention_id) >= 2);
SELECT student_id, bio_data FROM Students WHERE student_id IN (SELECT DISTINCT student_id FROM Classes UNION SELECT DISTINCT student_id FROM Detention) GROUP BY student_id, bio_data HAVING COUNT(DISTINCT class_id) >= 2 OR COUNT(DISTINCT detention_id) < 2;
SELECT Teachers.achievement_details FROM Teachers WHERE TeacherDetails LIKE '%data%' AND TeacherDetails NOT ILIKE 'net%';
SELECT Teachers.achievement_details FROM Teachers WHERE TeacherDetails LIKE '%data%' AND TeacherDetails NOT LIKE 'net%';
SELECT student_id, bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention UNION SELECT student_id FROM Student_Loans);
SELECT student_id, bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention UNION SELECT student_id FROM Student_Loans);
SELECT student_id, amount_of_loan, date_of_loan FROM Student_Loans WHERE student_id IN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(achievement_id) >= 2);
SELECT student_id, SUM(amount_of_loan) AS total_amount_of_loan, MIN(date_of_loan) AS earliest_loan_date FROM Student_Loans WHERE student_id IN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(achievement_id) >= 2) GROUP BY student_id;
SELECT Teachers.achievement_details, Teacher_ID FROM Teachers JOIN Classes ON Teachers.Teacher_ID = Classes.teacher_id GROUP BY Teacher_ID ORDER BY COUNT(Class_ID) DESC LIMIT 1;
SELECT Teachers.achievement_details, Teacher_ID FROM Teachers JOIN Classes ON Teachers.Teacher_ID = Classes.teacher_id GROUP BY Teacher_ID ORDER BY COUNT(Class_ID) DESC LIMIT 1;
SELECT date_achievement FROM Achievements;
SELECT date_achievement FROM Achievements;
SELECT student_id, bio_data, student_details, rat.address_type_description FROM Students AS st JOIN Students_Addresses AS sa ON st.student_id = sa.student_id JOIN Ref_Address_Types AS rat ON sa.address_type_code = rat.address_type_code
SELECT student_id, bio_data, address_type_description FROM Students JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code;
SELECT student_id, bio_data, student_details FROM Students;
SELECT student_id, bio_data, student_details FROM Students;
SELECT student_id, bio_data, date_of_transcript FROM Students st JOIN Transcripts tr ON st.student_id = tr.student_id
SELECT student_id, bio_data, date_of_transcript FROM Students st JOIN Transcripts tr ON st.student_id = tr.student_id;
SELECT student_id, COUNT(*) AS number_of_students FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY number_of_students DESC LIMIT 1;
SELECT Behaviour_Monitoring.achievement_type_code, COUNT(*) AS total_count FROM Behaviour_Monitoring JOIN Achievements ON Behaviour_Monitoring.student_id = Achievements.student_id GROUP BY Behaviour_Monitoring.achievement_type_code ORDER BY total_count DESC LIMIT 1;
SELECT student_id, bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING COUNT(*) >= 3);
SELECT student_id, bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING COUNT(*) >= 3);
SELECT student_id, bio_data FROM Students WHERE student_id IN (SELECT DISTINCT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING COUNT(DISTINCT behaviour_monitoring_details) = 1);
SELECT student_id, bio_data FROM Students WHERE student_id IN (SELECT b.student_id FROM Behaviour_Monitoring b GROUP BY b.student_id ORDER BY COUNT(b.behaviour_monitoring_details) DESC LIMIT 1);
SELECT student_id, bio_data, event_date FROM Student_Events se JOIN Students st ON se.student_id = st.student_id;
SELECT student_id, bio_data, event_date FROM Students JOIN Student_Events ON Students.student_id = Student_Events.student_id;
SELECT student_id, COUNT(*) AS total_students, et.event_type_description FROM Student_Events se JOIN Ref_Event_Types et ON se.event_type_code = et.event_type_code GROUP BY student_id ORDER BY total_students DESC LIMIT 1
SELECT student_id, COUNT(*) AS student_count, et.event_type_code, et.event_type_description FROM Student_Events se JOIN Ref_Event_Types et ON se.event_type_code = et.event_type_code GROUP BY sudent_id, et.event_type_code, et.event_type_description ORDER BY student_count DESC LIMIT 1;
SELECT achievement_details, achievement_type_description FROM Achievements JOIN Ref_Achievement_Type ON Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code;
SELECT achievement_details, r.achievement_type_description FROM Achievements a JOIN Ref_Achievement_Type r ON a.achievement_type_code = r.achievement_type_code ORDER BY date_achievement DESC;
SELECT student_id FROM Students WHERE student_id NOT IN (SELECT DISTINCT student_id FROM Achievements);
SELECT student_id FROM Students WHERE student_id NOT IN (SELECT DISTINCT student_id FROM Achievements);
SELECT date_achievement, achievement_details FROM Achievements;
SELECT date_achievement, achievement_details FROM Achievements;
SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements ORDER BY date_achievement DESC;
SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements ORDER BY date_achievement DESC;
SELECT date_achievement, date_achievement FROM Detention
SELECT date_achievement, date_achievement FROM Achievements;
SELECT student_id, bio_data FROM Students WHERE student_details LIKE '%Suite%'
SELECT student_id, bio_data FROM Students WHERE student_details ilike '%Suite%'
SELECT student_id, teacher_id FROM Classes
SELECT student_id, teacher_id FROM Classes;
SELECT student_id, COUNT(*) AS course_count FROM Classes GROUP BY student_id ORDER BY course_count DESC LIMIT 1;
SELECT Teachers.achievement_type_code, COUNT(*) AS num_achievements FROM Achievements JOIN Teacher ON Achievements.student_id = Teacher.teacher_id GROUP BY Teacher.achievement_type_code ORDER BY num_achievements DESC LIMIT 1;
SELECT student_id, COUNT(*) AS course_count FROM Classes GROUP BY student_id ORDER BY course_count DESC LIMIT 1;
SELECT student_id, COUNT(*) AS course_count FROM Classes GROUP BY student_id ORDER BY course_count DESC LIMIT 1;
SELECT student_id, student_details FROM Students WHERE student_id IN (SELECT DISTINCT student_id FROM Classes GROUP BY student_id HAVING COUNT(class_id) = 2);
SELECT student_id, student_details FROM Students WHERE student_id IN (SELECT DISTINCT student_id FROM Classes GROUP BY student_id HAVING COUNT(class_id) >= 2);
SELECT date_achievement, COUNT(*) AS number_of_achievements FROM Achievements GROUP BY achievement_type_code ORDER BY number_of_achievements ASC LIMIT 1;
SELECT date_achievement, COUNT(*) AS number_of_achievements FROM Achievements GROUP BY date_achievement ORDER BY number_of_achievements ASC LIMIT 1;
SELECT student_id, bio_data, student_details FROM Student_Loans sl JOIN Students st ON sl.student_id = st.student_id WHERE amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans);
SELECT student_id, bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans WHERE amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans));
SELECT student_id, MIN(date_of_loan) AS earliest_loan_date FROM Student_Loans GROUP BY student_id;
SELECT student_id, MIN(date_of_loan) AS earliest_loan FROM Student_Loans GROUP BY student_id;
SELECT student_id, bio_data FROM Student_Loans sl JOIN Students st ON sl.student_id = st.student_id ORDER BY amount_of_loan ASC LIMIT 1;
SELECT student_id, bio_data FROM Student_Loans sl JOIN Students st ON sl.student_id = st.student_id ORDER BY amount_of_loan ASC LIMIT 1;
SELECT student_id, MAX(amount_of_loan) AS max_loan_amount, MIN(date_of_transcript) AS earliest_transcript FROM Student_Loans JOIN Transcripts ON Student_Loans.student_id = Transcripts.student_id GROUP BY student_id ORDER BY max_loan_amount DESC LIMIT 1;
SELECT student_id, MAX(amount_of_loan) AS max_amount_of_loan FROM Student_Loans GROUP BY student_id ORDER BY max_amount_of_loan DESC LIMIT 1;
SELECT student_id FROM Transcripts WHERE date_of_transcript = (SELECT MIN(date_of_transcript) FROM Transcripts);
SELECT student_id, MIN(t.date_of_transcript) AS min_date FROM Transcripts t GROUP BY t.student_id ORDER BY min_date ASC LIMIT 1;
SELECT student_id, SUM(amount_of_loan) AS total_amount_of_loan FROM Student_Loans GROUP BY student_id ORDER BY total_amount_of_loan DESC;
SELECT student_id, SUM(amount_of_loan) AS total_amount_of_loan FROM Student_Loans GROUP BY student_id
SELECT student_id, bio_data, COUNT(*) AS number_of_courses FROM Students JOIN Classes ON Students.student_id = Classes.student_id GROUP BY student_id, bio_data
SELECT student_id, bio_data, COUNT(class_id) AS num_classes FROM Students JOIN Classes ON Students.student_id = Classes.student_id GROUP BY student_id, bio_data
SELECT date_achievement FROM Achievements WHERE achievement_type_code = 'DETENTION' GROUP BY dae_achievement;
SELECT student_id FROM Detention;
SELECT student_id, COUNT(*) AS total_count FROM Students_Addresses GROUP BY student_id ORDER BY total_count DESC LIMIT 1;
SELECT student_id, rat.address_type_description FROM Students_Addresses sa JOIN Ref_Address_Types rat ON sa.address_type_code = rat.address_type_code GROUP BY sstu_id, rat.address_type_description ORDER BY COUNT(*) DESC LIMIT 1;
SELECT student_id, bio_data FROM Students WHERE student_id IN (SELECT se.student_id FROM Student_Events se LEFT JOIN Student_Loans sl ON se.student_id = sl.student_id WHERE sl.student_id IS NULL);
SELECT student_id, bio_data FROM Students WHERE student_id IN (SELECT se.student_id FROM Student_Events se LEFT JOIN Student_Loans sl ON se.student_id = sl.student_id WHERE sl.student_id IS NULL);
SELECT student_id, date_from AS start_date, date_to AS end_date FROM Students_Addresses WHERE student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(transcript_id) >= 2);
SELECT student_id, date_from AS start_date, date_to AS end_date FROM Students_Addresses WHERE student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(transcript_id) >= 2);
SELECT date_achievement FROM Achievements WHERE achievement_type_code = 'DETENTION' ORDER BY date_achievement ASC LIMIT 1;
SELECT date_achievement FROM Achievements;
SELECT amount FROM Author;
SELECT amount FROM Author;
SELECT Client.IdOrder, Clien.Name, Clien.Address FROM Client AS Clien;
SELECT Client.IdOrder, Clien.Name, Clien.Address FROM Client AS Clien;
SELECT Book.ISBN, Book.Title, Book.SalePrice FROM Book ORDER BY Book.SalePrice DESC;
SELECT Book.ISBN, Book.Title, Book.SalePrice FROM Book ORDER BY Book.SalePrice DESC;
SELECT Book.ISBN, COUNT(*) AS total_books FROM Book GROUP BY Book.ISBN;
SELECT Book.ISBN, COUNT(*) AS total_books FROM Book GROUP BY Book.ISBN;
SELECT amount FROM Author;
SELECT amount FROM Author;
SELECT Client.IdOrder FROM Client;
SELECT Client.IdOrder FROM Orders;
SELECT Client.IdOrder, Clien.Name, Clien.Address FROM Client AS Clien ORDER BY Clien.Name ASC;
SELECT Client.IdOrder, Clien.Name, Clien.Address FROM Client AS Clien ORDER BY Clien.Name ASC;
SELECT Book.ISBN, Book.Title, Author.Name FROM Book JOIN Author ON Book.Author = Author.idAuthor;
SELECT Book.ISBN, Book.Title, Author.Name FROM Book JOIN Author ON Book.Author = Author.idAuthor;
SELECT Orders.IdOrder, Clients.Name FROM Orders JOIN Client ON Orders.IdClient = Client.IdClient;
SELECT Orders.IdOrder, C.Name FROM Orders Ord JOIN Client C ON Ord.IdClient = C.IdClient;
SELECT amount, COUNT(*) AS number_of_books FROM (SELECT ab.Author, COUNT(ab.ISBN) AS amoumt FROM Author_Book ab GROUP BY ab.Author) subquery;
SELECT amount, a.name FROM (SELECT ab.author, COUNT(ab.isbn) AS amoumt FROM author_book ab GROUP BY ab.author) AS subquery JOIN author a ON subquery.author = a.idauthor;
SELECT ISBN, COUNT(*) AS num_orders FROM Books_Order GROUP BY ISBN ORDER BY num_orders DESC;
SELECT ISBN, COUNT(*) AS total_orders FROM Books_Order GROUP BY ISBN;
SELECT ISBN, SUM(amount) AS total_amount FROM Books_Order GROUP BY ISBN;
SELECT ISBN, SUM(amount) AS total_amount_ordered FROM Books_Order GROUP BY ISBN;
SELECT Book.ISBN, COUNT(Books_Order.IdOrder) AS order_count FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN ORDER BY order_count DESC LIMIT 1;
SELECT Books_Order.ISBN, Book.Title FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN GROUP BY Books_Order.ISBN, Book.Title ORDER BY COUNT(Books_Order.idOrder) DESC LIMIT 1;
SELECT Book.ISBN, Book.Title, SUM(Books_Order.amount) AS total_orders FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN, Book.Title ORDER BY total_orders DESC LIMIT 1;
SELECT Book.ISBN, Book.Title, SUM(Books_Order.amount) AS TotalAmount FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN, Book.Title ORDER BY TotalAmount DESC LIMIT 1;
SELECT Books_Order.ISBN, Book.Title FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN;
SELECT Books_Order.ISBN, Book.Title FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN;
SELECT Client.IdOrder, c.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient;
SELECT Client.IdOrder, Client.Name FROM Orders JOIN Client ON Orders.IdClient = Client.IdClient;
SELECT Client.IdOrder, COUNT(DISTINCT Clieny.IdOrder) AS num_orders FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.Name;
SELECT Client.IdOrder, COUNT(DISTINCT Clieny.IdOrder) AS number_of_orders FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.Name;
SELECT Client.IdOrder, COUNT(ClienT.IdOrder) AS NumberOfOrders FROM Orders JOIN Client ON Orders.IdClient = Client.IdClient GROUP BY Client.Name ORDER BY NumberOfOrders DESC LIMIT 1;
SELECT Client.IdOrder, COUNT(*) AS num_orders FROM Orders JOIN Client ON Orders.IdClient = Client.IdClient GROUP BY Orders.IdClient ORDER BY num_orders DESC LIMIT 1;
SELECT Client.IdOrder, SUM(Book_Amount.amount) AS TotalAmount FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient JOIN Books_Order Book_Amount ON Orders.IdOrder = Book_Amount.idOrder GROUP BY Client.IdOrder;
SELECT Client.IdOrder, SUM(Book_Amount.amount) AS TotalAmount FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient JOIN Books_Order ON Orders.IdOrder = Books_Order.idOrder GROUP BY Client.IdOrder;
SELECT Client.IdOrder, SUM(Book_Amount.amount) AS TotalAmount FROM Books_Order JOIN Orders ON Books_Order.idOrder = Orders.idOrder GROUP BY Orders.idClient ORDER BY TotalAmount DESC LIMIT 1;
SELECT Client.IdOrder, SUM(Book_Amount.amount) AS TotalAmount FROM Books_Order JOIN Orders ON Books_Order.idOrder = Orders.idOrder GROUP BY Orders.idOrder ORDER BY TotalAmount DESC LIMIT 1;
SELECT Book.ISBN, Book.Title FROM Book LEFT JOIN Books_Order ON Book.ISBN = Books_Order.ISBN WHERE Books_Order.ISBN IS NULL;
SELECT Book.ISBN, Book.Title FROM Book LEFT JOIN Books_Order ON Book.ISBN = Books_Order.ISBN WHERE Books_Order.ISBN IS NULL;
SELECT Client.IdOrder FROM Client WHERE IdOrder NOT IN (SELECT IdOrder FROM Orders);
SELECT Client.IdOrder FROM Client WHERE IdOrder NOT IN (SELECT IdOrder FROM Orders);
SELECT Books_Order.amount, MIN(Book.saleprice), MAX(Book.saleprice) FROM Books_Order JOIN Book ON Books_Order.isbn = Book.isbn GROUP BY Books_Order.amount;
SELECT Books_Order.ISBN, MIN(Book.SalePrice) AS Min_Sale_Price, MAX(Book.SalePrice) AS Max_Sale_Price FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Books_Order.ISBN;
SELECT Books_Order.ISBN, AVG(Book.PurchasePrice) AS avg_purchase_price, AVG(Book.SalePrice) AS avg_sale_price FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN GROUP BY Books_Order.ISBN;
SELECT Books_Order.ISBN, AVG(Book.PurchasePrice) AS avg_purchase_price, AVG(Book.SalePrice) AS avg_sale_price FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Books_Order.ISBN;
SELECT ISBN, MAX(SalePrice - PurchasePrice) AS max_difference FROM Book GROUP BY ISBN ORDER BY max_difference DESC LIMIT 1;
SELECT ISBN, MAX(SalePrice - PurchasePrice) AS max_difference FROM Book GROUP BY ISBN ORDER BY max_difference DESC LIMIT 1;
SELECT Book.ISBN, Book.Title FROM Book WHERE Book.SalePrice > (SELECT AVG(SalePrice) FROM Book);
SELECT Book.ISBN, Book.Title FROM Book WHERE Book.SalePrice > (SELECT AVG(SalePrice) FROM Book);
SELECT Book.ISBN, Book.Title FROM Book WHERE Book.SalePrice = (SELECT MIN(SalePrice) FROM Book);
SELECT Books_Order.ISBN, Book.Title FROM Books_Ordre JOIN Book ON Books_Ordre.ISBN = Book.ISBN WHERE Books_Ordre.amount = (SELECT MIN(amount) FROM Books_Ordre);
SELECT Book.ISBN, Book.Title FROM Book WHERE Book.PurchasePrice = (SELECT MAX(Book.PurchasePrice) FROM Book);
SELECT Books_Order.ISBN, Book.Title FROM Books_Ordre JOIN Book ON Books_Ordre.ISBN = Book.ISBN WHERE Books_Ordre.amount = (SELECT MAX(amount) FROM Books_Ordre);
SELECT Author.IdOrder, AVG(Book.SalePrice) AS Average_Sale_Price FROM Book JOIN Author ON Book.Author = Author.IdAuthor WHERE LOWER(Author.Name) = 'george orwell' GROUP BY Author.IdOrder;
SELECT Author.IdOrder, AVG(Book.SalePrice) AS Average_Sale_Price FROM Book JOIN Author ON Book.Author = Author.IdAuthor WHERE LOWER(Author.Name) = 'george orwell' GROUP BY Author.IdOrder;
SELECT Books_Order.amount, Book.saleprice FROM Book JOIN Author_Book ON Book.isbn = Author_Book.isbn JOIN Author ON Author_Book.author = Author.idauthor WHERE LOWER(Author.name) = 'plato';
SELECT Books_Order.amount, Book.saleprice FROM Book JOIN Author_Book ON Book.isbn = Author_Book.isbn JOIN Author ON Author_Book.author = Author.idauthor WHERE LOWER(Author.name) = 'plato';
SELECT Books_Order.ISBN, Book.Title FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN WHERE Book.Author = (SELECT idAuthor FROM Author WHERE LOWER(Name) = 'george orwell') ORDER BY Book.SalePrice ASC LIMIT 1;
SELECT Books_Order.ISBN, Book.Title FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN WHERE Book.Author = (SELECT idAuthor FROM Author WHERE LOWER(Name) = 'george orwell') ORDER BY Book.SalePrice ASC LIMIT 1;
SELECT Books_Order.ISBN, Book.Title FROM Book JOIN Author ON Book.Author = Author.idAuthor JOIN Books_Order ON Book.ISBN = Books_Order.ISBN WHERE Book.SalePrice < (SELECT AVG(SalePrice) FROM Book);
SELECT Books_Order.ISBN, Book.Title FROM Book JOIN Author ON Book.Author = Author.idAuthor JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Books_Order ON Book.ISBN = Books_Order.ISBN WHERE Author.Name = 'Plato' AND Book.SalePrice < (SELECT AVG(SalePrice) FROM Book);
SELECT amount FROM Book WHERE Title = 'Pride and Prejudice'
SELECT amount FROM Book WHERE Title = 'Pride and Prejudice'
SELECT Book.ISBN, Book.Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE LOWER(Author.Name) LIKE '%plato%' ORDER BY Book.Title;
SELECT Book.ISBN, Book.Title FROM Book JOIN Author ON Book.Author = CAST(Author.idAuthor AS CHAR(4)) WHERE LOWER(Author.Name) LIKE '%plato%' ORDER BY Book.Title;
SELECT Books_Order.amount FROM Book WHERE Title = 'Pride and Prejudice'
SELECT Books_Order.amount FROM Book WHERE Title = 'Pride and Prejudice'
SELECT Orders.IdOrder FROM Orders WHERE EXISTS (SELECT 1 FROM Books_Order bo JOIN Book bk ON bo.ISBN = bk.ISBN WHERE bo.IdOrder = Orders.IdOrder AND bk.Title ilike '%Pride%and%Prejudice%') AND EXISTS (SELECT 1 FROM Books_Order bo JOIN Book bk ON bo.ISBN = bk.ISBN WHERE bo.IdOrder = Orders.IdOrder AND bk.Title ilike '%Little%Prince%');
SELECT Books_Order.IdOrder FROM Books_Order WHERE Books_Order.ISBN IN (SELECT Book.ISBN FROM Book WHERE Book.Title = 'Pride and Prejudice' OR Book.Title = 'The Little Prince') GROUP BY Books_Order.IdOrder HAVING COUNT(DISTINCT Books_Order.ISBN) = 2;
SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = 'PETER DOE') AND ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = 'JAMES SMITH'));
SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'Peter Doe') AND IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'James Smith')));
SELECT Books_Order.ISBN, Book.Title FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Books_Order.IdOrder IN (SELECT Orders.IdOrder FROM Orders JOIN Client ON Orders.IdClient = Client.IdClient WHERE Client.Name = 'Peter Doe') AND Books_Order.IdOrder NOT IN (SELECT Orders.IdOrder FROM Orders JOIN Client ON Orders.idclient = client.idclient where client.name = 'James Smith');
SELECT Books_Order.ISBN, Book.Title FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Books_Order.IdOrder IN (SELECT Orders.IdOrder FROM Orders JOIN Client ON Orders.IdClient = Client.IdClient WHERE LOWER(Client.Name) = 'peter doe') AND Books_Order.IdOrder NOT IN (SELECT Orders.IdOrder FROM Orders JOIN Client ON Orders.idclient = client.idclient WHERE LOWER(client.name) = 'james smith');
SELECT Client.IdOrder, Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient JOIN Books_Order ON Orders.IdOrder = Books_Order.idOrder JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice' GROUP BY Client.Name;
SELECT Client.IdOrder, Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient JOIN Books_Order ON Orders.IdOrder = Books_Order.idOrder JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice'
SELECT book.Book_ID FROM book;
SELECT book.Book_ID, book.title FROM book ORDER BY title ASC;
SELECT book.Book_ID, book.title FROM book ORDER BY book.pages DESC;
SELECT book.Book_ID, book.Title, book.Type, book.Release FROM book ORDER BY book.Book_ID NULLS LAST;
SELECT book.Book_ID, MIN(b.book_chapters) AS min_chapters, MAX(b.book_chapters) AS max_chapters FROM (SELECT b.Chapters AS book_chapters FROM book b UNION ALL SELECT r.Book_ID, 0 AS Chapters FROM review r WHERE NOT EXISTS (SELECT 1 FROM book WHERE Book_ID = r.Book_ID)) AS b GROUP BY book.Book_ID ORDER BY book.Book_ID NULLS LAST;
SELECT book.Book_ID, book.Title FROM book WHERE book.Type!= 'Poet' ORDER BY book.Book_ID NULLS LAST;
SELECT review.Rating FROM review;
SELECT book.Book_ID, book.Title, review.Rating FROM book JOIN review ON book.Book_ID = review.Book_ID;
SELECT review.Rating FROM review WHERE review.Book_ID IN (SELECT Book_ID FROM book ORDER BY Chapters DESC LIMIT 1)
SELECT book.Book_ID, book.Pages, review.Rank FROM book AS book JOIN review ON book.Book_ID = review.Book_ID ORDER BY book.Pages ASC LIMIT 1;
SELECT book.Book_ID, book.Title FROM book JOIN review ON book.Book_ID = review.Book_ID WHERE review.Rank = (SELECT MAX(review.Rank) FROM review);
SELECT review.Readers_in_Million FROM review WHERE book.type = 'Novel' GROUP BY review.Book_ID ORDER BY review.Book_ID NULLS LAST;
SELECT book.Book_ID, book.Type FROM book GROUP BY book.Type, book.Book_ID ORDER BY book.Type;
SELECT book.Book_ID, book.Type FROM book GROUP BY book.Book_ID, book.Type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT book.Book_ID, book.Type FROM book GROUP BY book.Book_ID, book.Type HAVING COUNT(book.Book_ID) >= 3;
SELECT book.Book_ID, book.Title FROM book JOIN review ON book.Book_ID = review.Book_ID ORDER BY review.Rating ASC;
SELECT book.Book_ID, book.Title, book.Audio, review.Readers_in_Million FROM book JOIN review ON book.Book_ID = review.Book_ID ORDER BY review.Readers_in_Million DESC NULLS LAST;
SELECT book.Book_ID FROM book WHERE book.Book_ID NOT IN (SELECT review.Book_ID FROM review) GROUP BY book.Book_ID ORDER BY book.Book_ID NULLS LAST;
SELECT book.Book_ID, book.Type FROM book WHERE (book.Chapters > 75 OR book.Chapters < 50) GROUP BY book.Book_ID, book.Type HAVING COUNT(DISTINCT CASE WHEN (book.Chapters > 75 OR book.Chapters < 50) THEN boook.Book_ID END) = 2;
SELECT book.Book_ID, COUNT(DISTINCT book.Type) AS number_of_types FROM book GROUP BY book.BooK_ID;
SELECT book.Book_ID, book.Title, book.Type FROM book LEFT JOIN review ON book.Book_ID = review.Book_ID WHERE review.Rating IS NULL;
SELECT customer.Customer_ID FROM customer;
SELECT customer.Customer_ID FROM customer;
SELECT customer.Customer_ID, customer.Name, customer.Level_of_Membership FROM customer ORDER BY customer.Level_of_Membership ASC;
SELECT customer.Customer_ID, customer.Name FROM customer ORDER BY customer.Level_of_Membership ASC;
SELECT customer.Customer_ID, customer.Name, customer.Nationality, customer.Card_Credit FROM customer
SELECT customer.Customer_ID, customer.Name, customer.Nationality, customer.Card_Credit FROM customer
SELECT customer.Customer_ID, customer.Name FROM customer WHERE customer.Nationality = 'England' OR customer.Nationality = 'Australia';
SELECT customer.Customer_ID, customer.Name FROM customer WHERE customer.Nationality ilike '%England%' OR customer.Nationality ilike '%Australia%';
SELECT customer.Customer_ID, AVG(customer.Card_Credit) AS average_card_credit FROM customer WHERE customer.Level_of_Membership > 1 GROUP BY customer.Customer_ID ORDER BY average_card_credit DESC NULLS LAST;
SELECT customer.Customer_ID, AVG(customer.Card_Credit) AS Average_Card_Credit FROM customer WHERE customer.Level_of_Membership > 1 GROUP BY customer.Customer_ID;
SELECT customer.Customer_ID, customer.Card_Credit FROM customer ORDER BY customer.Level_of_Membership DESC LIMIT 1;
SELECT customer_order.Customer_ID, customer.card_credit FROM customer JOIN customer_order ON customer.customer_id = customer_order.customer_id WHERE customer.level_of_membership = (SELECT MAX(level_of_membership) FROM customer);
SELECT customer.Quantity, COUNT(*) AS total_customers FROM customer JOIN (SELECT Customer_ID, COUNT(*) AS Quantity FROM customer GROUP BY Customer_ID) ON customer.Customer_ID = (SELECT Customer_ID FROM customer ORDER BY Level_of_Membership DESC LIMIT 1) WHERE Nationality IS NOT NULL AND Nationality!= '' GROUP BY Nationality;
SELECT customer.Quantity, COUNT(*) AS total_customers FROM customer JOIN (SELECT Customer_ID, COUNT(DISTINCT Branch_ID) AS Quantity FROM customer_order GROUP BY Customer_ID) AS co ON customer.Customer_ID = co.Customer_ID GROUP BY customer.Nationality ORDER BY total_customers DESC NULLS LAST;
SELECT customer.Quantity, customer.Nationality FROM (SELECT Nationality, COUNT(*) AS Quantity FROM customer GROUP BY Nationality) AS customer ORDER BY quantity DESC LIMIT 1;
SELECT customer.Quantity FROM customer WHERE customer.Nationality = (SELECT MAX(Quantity) FROM (SELECT COUNT(*) AS Quantity, Nationality FROM customer GROUP BY Nationality) AS subquery);
SELECT customer.Customer_ID, customer.Name, customer.Nationality FROM customer WHERE (customer.Card_Credit < 50 OR customer.Card_Credit > 75) GROUP BY customer.Customer_ID, customer.Name, customer.Nationality HAVING COUNT(DISTINCT CASE WHEN customer.Card_Credit < 50 THEN customer.Customer_ID END) > 0 AND COUNT(DISTINCT CASE WHEN customer.Card_Credit > 75 THEN customer.Customer_ID END) > 0 ORDER BY customer.Nationality NULLS LAST;
SELECT customer.Customer_ID, customer.Name, customer.Nationality FROM customer WHERE (customer.Card_Credit > 50 AND customer.Card_Credit < 75) ORDER BY customer.Customer_ID NULLS LAST;
SELECT customer_order.Customer_ID, customer.Name, dish_name FROM customer JOIN customer_order ON customer_order.customer_id = customer.customer_id;
SELECT customer_order.Customer_ID, branch.Manager AS Branch_Manager, customer.Name AS Customer_Name, customer_order.Dish_Name FROM customer JOIN customer_order ON customer_order.Customer_ID = customer.Customer_ID JOIN branch ON customer_order.Branch_ID = branch.Branch_ID;
SELECT customer_order.Customer_ID, customer.Name, dish_name, SUM(quantity) AS total_quantity FROM customer_order JOIN customer ON customer_order.customer_id = customer.customer_id GROUP BY customer_order.customer_id, customer.name, dish_name ORDER BY total_quantity DESC;
SELECT customer_order.Customer_ID, customer.Name AS Customer_Name, customer_order.Dish_Name, customer_order.Quantity FROM customer JOIN customer_order ON customer_order.Customer_ID = customer.Customer_ID ORDER BY customer_order.Quantity DESC;
SELECT customer.Customer_ID, customer.Name, SUM(customer_order.Quantity) AS Total_Quantity FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Customer_ID, customer.Name ORDER BY Total_Quantity DESC NULLS LAST;
SELECT customer.Customer_ID, customer.Name, SUM(customer_order.Quantity) AS Total_Quantity FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Customer_ID, customer.Name ORDER BY Total_Quantity DESC NULLS LAST;
SELECT customer.Customer_ID, SUM(customer_order.Quantity) AS Total_Quantity FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Customer_ID HAVING SUM(customer_order.Quantity) > 1 ORDER BY Total_Quantity DESC NULLS LAST;
SELECT customer.Customer_ID, customer.Name FROM customer JOIN (SELECT Customer_ID, SUM(Quantity) AS Total_Quantity FROM customer_order GROUP BY Customer_ID) AS co ON customer.Customer_ID = co.Customer_ID WHERE co.Total_Quantity > 1;
SELECT branch.Branch_ID, branch.Manager FROM branch GROUP BY branch.Branch_ID, branch.Manager
SELECT branch.Branch_ID, brancho.Manager FROM branch AS brancho;
SELECT customer.Customer_ID, customer.Name FROM customer LEFT JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID WHERE customer_order.Customer_ID IS NULL;
SELECT customer.Customer_ID, customer.Name FROM customer LEFT JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID WHERE customer_order.Customer_ID IS NULL;
SELECT member.Member_ID FROM member;
SELECT member.Member_ID, member.Name, member.Age FROM member ORDER BY member.Age ASC;
SELECT member.Member_ID, member.Name, member.Nationality FROM member;
SELECT member.Member_ID, member.Name FROM member WHERE member.Nationality!= 'England' ORDER BY member.Member_ID NULLS LAST;
SELECT member.Member_ID, member.Name FROM member WHERE member.Age = 19 OR member.Age = 20 ORDER BY member.Member_ID NULLS LAST;
SELECT member.Member_ID, member.Name FROM member ORDER BY member.Age ASC LIMIT 1;
SELECT member.Club_ID, member.Nationality, COUNT(member.Member_ID) AS total_members FROM member JOIN club_leader ON member.Member_ID = club_leader.Member_ID GROUP BY member.Club_ID, member.Nationality ORDER BY total_members DESC NULLS LAST;
SELECT member.Club_ID, member.Nationality FROM member JOIN club_leader ON member.Member_ID = club_leader.Member_ID GROUP BY member.Club_ID, member.Nationality ORDER BY COUNT(member.Nationality) DESC LIMIT 1;
SELECT member.Club_ID, COUNT(DISTINCT member.Member_ID) AS number_of_members FROM club JOIN club_leader ON club.Club_ID = club_leader.Club_ID GROUP BY club.Club_ID HAVING COUNT(DISTINCT member.Member_ID) >= 2 ORDER BY number_of_members DESC NULLS LAST;
SELECT member.Member_ID, member.Name, club.Club_Name FROM club JOIN club_leader ON club.Club_ID = club_leader.Club_ID JOIN member ON club_leader.Member_ID = member.Member_ID;
SELECT member.Member_ID, member.Name FROM club JOIN club_leader ON club.Club_ID = club_leader.Club_ID JOIN member ON club_leader.Member_ID = member.Member_ID WHERE club.Overall_Ranking > 100;
SELECT member.Member_ID, member.Name FROM club_leader JOIN member ON club_leader.Member_ID = member.Member_ID WHERE club_leader.Year_Join < '2018' ORDER BY member.Member_ID NULLS LAST;
SELECT member.Member_ID, member.Name FROM club JOIN club_leader ON club.Club_ID = club_leader.Club_ID JOIN member ON club_leader.Member_ID = member.Member_ID WHERE club.club_name ilike '%Houston%' LIMIT 1;
SELECT member.Member_ID, member.Name FROM member LEFT JOIN club_leader ON member.Member_ID = club_leader.Member_ID WHERE club_leader.Member_ID IS NULL;
SELECT member.Club_ID, member.Name, member.Age FROM member JOIN club_leader ON member.Member_ID = club_leader.Member_ID WHERE (member.Age > 22 AND member.Age < 19) GROUP BY member.Club_ID, member.Name, member.Age ORDER BY member.Club_ID NULLS LAST;
SELECT member.Member_ID, AVG(member.Age) AS Average_Age FROM member JOIN club_leader ON member.Member_ID = club_leader.Member_ID GROUP BY member.Member_ID;
SELECT club.Club_ID, club.Club_Name FROM club WHERE club.Club_Name ilike '%state%' ORDER BY club.Club_ID NULLS LAST;
SELECT Collection_Subset_ID, Collection_Subset_Name FROM Collection_Subsets;
SELECT Collection_Subset_ID, Collection_Subset_Name FROM Collection_Subsets;
SELECT Collection_Subset_ID, Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection';
SELECT Collection_Subset_Members.Collection_ID, Collections.Collection_Name FROM Collection_Subsets JOIN Collecction_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collecction_Subset_Members.Collection_Subset_ID JOIN Collections ON Collecction_Subset_Members.Collection_ID = Collections.Collection_ID WHERE Collection_Subsets.Collection_Subset_Name = 'Top collection';
SELECT Document_Subset_Members.Related_Collection_ID, Document_Subsets.Document_Subset_Name FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID;
SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subsets;
SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID IN (SELECT Document_Subsets.Document_Subset_ID FROM Document_Subsets WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000');
SELECT Document_Subset_Members.Related_Collection_ID, Document_Subsets.Document_Subset_Details FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name ilike '%Best%for%2000%' ORDER BY Document_Subsets.Document_Subset_ID NULLS LAST;
SELECT Document_Objects.Related_Collection_ID FROM Document_Objects;
SELECT Document_Objects.Related_Collection_ID FROM Document_Objects;
SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Owner = 'Marlin'
SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Owner = 'Marlin';
SELECT Document_Objects.Collection_ID FROM Document_Objects WHERE Document_Objects.Description = 'Braeden Collection';
SELECT Document_Objects.Collection_ID FROM Document_Objects WHERE Document_Objects.Description = 'Braeden Collection' ORDER BY Document_Objects.Collection_ID;
SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Owner = 'Marlin' ORDER BY Document_Objects.Document_Object_ID DESC LIMIT 1;
SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Owner = 'Marlin';
SELECT Document_Objects.Related_Collection_ID, COUNT(DISTINCT Document_Objects.Description) AS number_of_descriptions FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID GROUP BY Document_Objects.Related_Collection_ID ORDER BY number_of_descriptions DESC;
SELECT Document_Objects.Related_Collection_ID, COUNT(DISTINCT Document_Objects.Description) AS number_of_descriptions FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID WHERE Document_Objects.Parent_Document_Object_ID IS NOT NULL GROUP BY Document_Objects.Related_Collection_ID ORDER BY number_of_descriptions DESC;
SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Owner = 'Marlin';
SELECT Document_Objects.Related_Collection_ID, COUNT(DISTINCT Document_Objects.Document_Object_ID) AS number_of_documents FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID WHERE Document_Objects.Owner = 'Marlin' GROUP BY Document_Objects.Related_Collection_ID;
SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Document_Object_ID IN (SELECT Document_Objects.Parent_Document_Object_ID FROM Document_Objects);
SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Parent_Document_Object_ID IS NULL;
SELECT Document_Objects.Related_Collection_ID, COUNT(DISTINCT Document_Objects.Document_Object_ID) AS Number_of_Child_Documents FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID GROUP BY Document_Objects. Related_Collection_ID;
SELECT Document_Objects.Related_Collection_ID, COUNT(DISTINCT Document_Objects.Document_Object_ID) AS num_child_documents FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID GROUP BY Document_Objects.Document_Object_ID ORDER BY num_child_documents DESC;
SELECT Collection_ID, Collection_Name FROM Collections ORDER BY Collection_ID;
SELECT Collection_ID, Collection_Name FROM Collections;
SELECT Collection_ID, Collection_Description FROM Collections WHERE LOWER(Collection_Name) = 'best';
SELECT Collection_ID, Collection_Description FROM Collections WHERE LOWER(Collection_Description) = 'best';
SELECT Collection_ID FROM Collections WHERE LOWER(Collection_Name) = 'nice';
SELECT Collection_ID FROM Collections WHERE LOWER(Collection_Name) = 'nice';
SELECT Collection_ID, Collection_Name FROM Collections WHERE Parent_Collection_ID IS NULL;
SELECT Collection_ID, Collection_Name FROM Collections WHERE Parent_Collection_ID IS NULL;
SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Document_Object_ID IN (SELECT Document_Objects.Document_Object_ID FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID GROUP BY Document_Objects.Document_Object_ID HAVING COUNT(DISTINCT Document_Subset_Members.Related_Document_Object_ID) > 1);
SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Document_Object_ID IN (SELECT Document_Objects.Document_Object_ID FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID GROUP BY Document_Objects.Document_Object_ID HAVING COUNT(DISTINCT Document_Subset_Members.Related_Document_Object_ID) > 1);
SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best';
SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best';
SELECT Related_Collection_ID FROM Document_Objects WHERE Owner = 'Ransom';
SELECT Related_Collection_ID FROM Document_Objects WHERE Owner = 'Ransom';
SELECT Collection_Subset_ID, Collection_Subset_Name, COUNT(Collection_ID) AS Number_of_Collections FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID GROUP BY Collection_Subset_ID, Collection_Subset_Name ORDER BY Number_of_Collections DESC NULLS LAST;
SELECT Collection_Subset_ID, Collection_Subset_Name, COUNT(Collection_ID) AS Number_of_Collections FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID GROUP BY Collection_Subset_ID, Collection_Subset_Name ORDER BY Number_of_Collections DESC NULLS LAST;
SELECT Document_Objects.Related_Collection_ID, COUNT(DISTINCT Document_Objects.Document_Object_ID) AS NumberOfChildren FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID GROUP BY Document_Objects. Related_Collection_ID ORDER BY NumberOfChildren DESC LIMIT 1;
SELECT Document_Objects.Related_Collection_ID, COUNT(DISTINCT Document_Objects.Document_Object_ID) AS child_count FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID GROUP BY Document_Objects.Document_Object_ID, Document_Objects.Related_Collection_ID ORDER BY Document_Objects.Document_Object_ID;
SELECT Document_Objects.Related_Collection_ID, COUNT(DISTINCT Document_Subset_Members.Related_Document_Object_ID) AS NumberOfRelatedDocuments FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID GROUP BY Document_Objects.Document_Object_ID ORDER BY NumberOfRelatedDocuments ASC LIMIT 1;
SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Document_Object_ID IN (SELECT MIN(Documents_in_Collections.Document_Object_ID) AS min_doc_id FROM Documents_in_Collections GROUP BY Documents_in_Collections.Collection_ID);
SELECT Document_Objects.Related_Collection_ID, COUNT(DISTINCT Document_Subset_Members.Related_Document_Object_ID) AS Number_of_Related_Documents FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID WHERE Document_Objects.Document_Object_ID IN (SELECT Document_Subset_Members.Document_Object_ID FROM Document_Subset_Members GROUP BY Document_Subset_Members.Document_Object_ID HAVING COUNT(DISTINCT Document_Subset_Members.Related_Document_Object_ID) BETWEEN 2 AND 4) GROUP BY Document_Objects.Document_Object_ID;
SELECT Document_Objects.Related_Collection_ID, COUNT(DISTINCT Document_Subset_Members.Related_Document_Object_ID) AS number_of_related_items FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID WHERE Document_Objects.Document_Object_ID IN (SELECT Document_Subset_Members.Document_Object_ID FROM Document_Subset_Members GROUP BY Document_Subset_Members.Document_Object_ID HAVING COUNT(DISTINCT Document_Subset_Members.Related_Document_Object_ID) BETWEEN 2 AND 4) GROUP BY Document_Objects.Document_Object_ID;
SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Owner = 'Braeden' UNION SELECT Document_Objects.Document_Object_ID AS Related_Collection_ID FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID WHERE Document_Objects.Owner = 'Braeden'
SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Owner = 'Braeden' UNION SELECT Document_Objects.Document_Object_ID AS Related_Collection_ID FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID WHERE Document_Objects.Owner!= 'Braeden' ORDER BY Related_Collection_ID;
SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Owner = 'Braeden' JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID;
SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Objects WHERE Owner = 'Braeden' ORDER BY Document_Objects.Document_Object_ID;
SELECT Document_Subset_Members.Related_Collection_ID, COUNT(DISTINCT Document_Objects.Document_Object_ID) AS distinct_documents FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID GROUP BY Document_Subsets.Document_Subset_ID, Document_Subsets.Document_Subset_Name, Document_Subset_Members.Related_Collection_ID ORDER BY distinct_documents DESC;
SELECT Document_Subset_Members.Related_Collection_ID, COUNT(DISTINCT Document_Subset_Members.Document_Object_ID) AS distinct_documents FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID GROUP BY Document_Subsets.Document_Subset_ID, Document_Subsets.Document_Subset_Name, Document_Subset_Members.Related_Collection_ID ORDER BY distinct_documents DESC;
SELECT Document_Subset_Members.Related_Collection_ID, COUNT(DISTINCT Document_Objects.Document_Object_ID) AS num_documents FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID GROUP BY Document_Subset_Members.Related_Collection_ID ORDER BY num_documents DESC LIMIT 1;
SELECT Document_Subset_Members.Related_Collection_ID, COUNT(DISTINCT Document_Objects.Document_Object_ID) AS num_documents FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID GROUP BY Document_Subsets.Document_Subset_ID, Document_Subsets.Document_Subset_Name ORDER BY num_documents DESC LIMIT 1;
SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Document_Object_ID IN (SELECT Document_Subset_Members.Document_Object_ID FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000');
SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Document_Object_ID IN (SELECT Document_Subset_Members.Document_Object_ID FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000');
SELECT Document_Subset_Members.Related_Collection_ID, Document_Subsets.Document_Subset_Name FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID;
SELECT Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID, Document_Subsets.Document_Subset_Name, Document_Objects.Document_Object_ID FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID;
SELECT Collection_ID, c.Collection_Name FROM Documents_in_Collections dic JOIN Collections c ON dic.Collection_ID = c.Collection_ID WHERE Owner = 'Ransom' ORDER BY Collection_ID;
SELECT Collection_ID FROM Documents_in_Collections WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom');
SELECT Document_Objects.Related_Collection_ID, COUNT(DISTINCT Related_Collection_ID) AS collection_count FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID GROUP BY Document_Objects.Document_Object_ID ORDER BY collection_count DESC;
SELECT Document_Objects.Collection_ID, COUNT(DISTINCT Collection_ID) AS number_of_collections FROM Documents_in_Collections JOIN Document_Objects ON Documents_in_Collections.Document_Object_ID = Document_Objects.Document_Object_ID GROUP BY Document_Objects.Document_Object_ID;
SELECT Document_Objects.Collection_ID, COUNT(DISTINCT Document_Objects.Document_Object_ID) AS number_of_documents FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID WHERE Document_Objects.Collection_ID IN (SELECT Collection_ID FROM Collections WHERE LOWER(Collection_Name) = 'best') GROUP BY Document_Objects.Collection_ID;
SELECT Document_Objects.Collection_ID, COUNT(DISTINCT Document_Objects.Document_Object_ID) AS Number_of_Documents FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID WHERE Document_Objects.Collection_ID IN (SELECT Collection_ID FROM Collections WHERE LOWER(Collection_Name) = 'best') GROUP BY Document_Objects.Collection_ID;
SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Document_Object_ID IN (SELECT Document_Objects.Document_Object_ID FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE LOWER(Collections.Collection_Name) = 'best')
SELECT Document_Objects.Collection_ID, COUNT(DISTINCT Document_Objects.Document_Object_ID) AS Number_of_Documents FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID WHERE Documents_in_Collections.Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') GROUP BY Document_Objects.Collection_ID;
SELECT Collection_ID, Collection_Name, COUNT(DISTINCT Document_Object_ID) AS num_documents FROM Documents_in_Collections GROUP BY Collection_ID, Collection_Name ORDER BY num_documents DESC LIMIT 1;
SELECT Collection_ID, Collection_Name, COUNT(DISTINCT Document_Object_ID) AS document_count FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collection_Name ilike '%Best%' GROUP BY Collection_ID, Collection_Name ORDER BY document_count DESC LIMIT 1;
SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Document_Object_ID IN (SELECT Document_Subset_Members.Document_Object_ID FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name = 'Best') AND Document_Objects.Document_Object_ID IN (SELECT Documents_in_Collections.Document_Object_ID FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best' AND CAST(Collections.Collection_Description AS DATE) BETWEEN '2000-01-01' AND '2000-12-31');
SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Document_Object_ID IN (SELECT Document_Objects.Document_Object_ID FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name ilike '%Best%for%2000%') AND Document_Objects.Document_Object_ID IN (SELECT Document_Objects.Document_Object_ID FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name ilike '%Best%');
SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Document_Object_ID IN (SELECT Document_Objects.Document_Object_ID FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best') AND Document_Objects.Document_Object_ID NOT IN (SELECT Document_Objects.Document_Object_ID FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name = 'Best' AND Document_Subsets.Document_Subset_Details LIKE '%2000%');
SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Document_Object_ID IN (SELECT Document_Objects.Document_Object_ID FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name = 'Best') AND Document_Objects.Document_Object_ID NOT IN (SELECT Document_Objects.Document_Object_ID FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000');
SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Document_Object_ID IN (SELECT Document_Subset_Members.Document_Object_ID FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name ilike '%Best%for%2000%') UNION SELECT Collections.Collection_ID FROM Collections WHERE Collections.Collection_Name ilike '%Best%' ORDER BY Related_Collection_ID;
SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Document_Object_ID IN (SELECT Document_Objects.Document_Object_ID FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name ilike '%Best%for%2000%') UNION SELECT Collections.Collection_ID FROM Collections JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID JOIN Document_Objects ON Documents_in_collections.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Collections.Collection_Name ilike '%Best%' ORDER BY Related_Collection_ID;
SELECT Collection_Subset_Members.Related_Collection_ID, Collections.Collection_Name FROM Collection_Subset_Members JOIN Collections ON Collection_Subset_Members.Collection_ID = Collections.Collection_ID WHERE Collection_Subset_Members.Collection_ID IN (SELECT Document_Objects.Document_Object_ID FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID WHERE Documents_in_Collections.Collection_ID IN (SELECT Collections.Collection_ID FROM Collections WHERE LOWER(Collections.Collection_Name) = 'best')) ORDER BY Collections.Collection_Name;
SELECT Collection_ID, Collection_Name FROM Collections WHERE Collection_Name IN (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'));
SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best';
SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') GROUP BY Related_Collection_ID;
SELECT Collection_Subset_Members.Collection_Subset_ID FROM Collection_Subset_Members WHERE Collection_Subset_Members.Collection_ID IN (SELECT Collections.Collection_ID FROM Collections WHERE Collections.Collection_Name = 'Best') ORDER BY Collection_Subset_Members.Collection_Subset_ID;
SELECT Collection_Subset_Members.Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subsets.Collection_Subset_Name = 'Best';
SELECT songs_id FROM songs WHERE name ilike '%love%' GROUP BY songs_id;
SELECT songs.songs_id, songs.name FROM songs ORDER BY songs.name ASC;
SELECT songs_id, name, language FROM songs;
SELECT participant_id, MAX(voice_sound_quality) AS max_voice_sound_quality, MIN(voice_sound_quality) AS min_voice_sound_quality FROM performance_score GROUP BY participant_id;
SELECT participant_id, songs_id, voice_sound_quality, rhythm_tempo, stage_presence FROM performance_score WHERE name = 'Freeway';
SELECT songs_id, language, original_artist FROM songs WHERE name!= 'Love';
SELECT songs.songs_id, songs.name, songs.original_artist FROM songs WHERE songs.english_translation ilike '%all%the%streets%of%love%' ORDER BY songs.songs_id NULLS LAST;
SELECT participant_id, pa.stage_presence FROM performance_score pa JOIN songs s ON pa.songs_id = s.id WHERE LOWER(s.language) = 'english' GROUP BY pa.participant_id, pa.stage_presence ORDER BY pa.stage_presence NULLS LAST;
SELECT participant_id, name FROM (SELECT ps.participant_id, COUNT(ps.songs_id) AS song_count, ROW_NUMBER() OVER (PARTITION BY ps.participant_id ORDER BY COUNT(ps.songs_id) DESC) AS rn FROM performance_score ps GROUP BY ps.participant_id) sub WHERE rn = 1;
SELECT participant_id, name, popularity, COUNT(songs_id) AS num_songs FROM performance_score GROUP BY participant_id, name, popularity ORDER BY num_songs DESC;
SELECT participant_id, name FROM performance_score JOIN participants ON participant_id = id WHERE voice_sound_quality = 5 OR rhythm_tempo = 5;
SELECT participant_id, ps.voice_sound_quality FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE LOWER(s.name) = 'the balkan girls' AND LOWER(s.language) = 'english';
SELECT songs_id, COUNT(*) AS num_participants FROM performance_score GROUP BY songs_id ORDER BY num_participants DESC LIMIT 1;
SELECT participant_id, COUNT(*) AS number_of_performances FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9 GROUP BY participant_id;
SELECT songs_id FROM performance_score;
SELECT songs_id, AVG(rhythm_tempo) AS avg_rhythm FROM performance_score GROUP BY songs_id ORDER BY avg_rhythm DESC;
SELECT participant_id FROM performance_score WHERE songs_id IN (SELECT id FROM songs WHERE language = 'English') GROUP BY participant_id;
SELECT participant_id, name, popularity FROM (SELECT ps.participant_id, p.name, p.popularity, row_number() OVER(PARTITION BY ps.participant_id ORDER BY COUNT(ps.songs_id) DESC) AS rank FROM performance_score ps JOIN songs s ON ps.songs_id = s.id JOIN participants p ON ps.participant_id = p.id WHERE s.language IN ('Croatian', 'English') GROUP BY ps.participant_id, p.name, p.popularity) sub WHERE rank = 1;
SELECT songs_id FROM songs WHERE name ilike '%is%'
SELECT songs.songs_id, songs.original_artist, performance_score.voice_sound_quality FROM songs JOIN performance_score ON songs.id = performance_score.songs_id WHERE performance_score.rhythm_tempo > 5 ORDER BY performance_score.voice_sound_quality DESC;
SELECT country FROM City;
SELECT country FROM City;
SELECT country FROM City WHERE state IS NULL GROUP BY country;
SELECT country FROM City WHERE state IS NOT NULL GROUP BY country ORDER BY country;
SELECT country FROM City;
SELECT country FROM City;
SELECT city_name, city_code, state, country FROM City ORDER BY city_name NULLS LAST;
SELECT city_name, city_code, state, country FROM City ORDER BY city_name NULLS LAST;
SELECT country, latitude, longitude FROM City WHERE LOWER(city_name) = 'baltimore';
SELECT country, latitude, longitude FROM City WHERE LOWER(city_name) = 'baltimore';
SELECT city_name FROM City WHERE LOWER(state) = 'pa' ORDER BY city_name NULLS LAST;
SELECT city_name FROM City WHERE LOWER(state) = 'pa' ORDER BY city_name NULLS LAST;
SELECT country FROM City WHERE LOWER(country) = 'canada';
SELECT country FROM City WHERE LOWER(country) = 'canada';
SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude NULLS LAST;
SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude NULLS LAST;
SELECT country, COUNT(*) AS num_cities FROM City GROUP BY country ORDER BY num_cities DESC NULLS LAST;
SELECT country, COUNT(*) AS number_of_cities FROM City GROUP BY country ORDER BY number_of_cities DESC NULLS LAST;
SELECT country, COUNT(*) AS num_cities FROM City GROUP BY country ORDER BY num_cities DESC NULLS LAST;
SELECT country, COUNT(*) AS number_of_cities FROM City GROUP BY country ORDER BY number_of_cities DESC NULLS LAST;
SELECT country, COUNT(*) AS number_of_cities FROM (SELECT DISTINCT country FROM City) AS subquery GROUP BY country HAVING COUNT(*) >= 2 ORDER BY number_of_cities DESC NULLS LAST;
SELECT country FROM City WHERE state IN (SELECT state FROM City GROUP BY state HAVING COUNT(city_code) >= 2);
SELECT country, COUNT(*) AS num_cities FROM City GROUP BY country ORDER BY num_cities DESC LIMIT 1;
SELECT country, COUNT(*) AS number_of_cities FROM City GROUP BY country ORDER BY number_of_cities DESC LIMIT 1;
SELECT country FROM City WHERE country IN (SELECT country FROM City GROUP BY country ORDER BY COUNT(city_code) ASC LIMIT 1);
SELECT country FROM City WHERE (SELECT COUNT(*) FROM City) = (SELECT MIN(COUNT(*)) FROM City GROUP BY country);
SELECT state, s.Fname, s.LName FROM Student s JOIN City c ON s.city_code = c.city_code WHERE LOWER(c.state) ='md'
SELECT state, s.lname || ','|| s.fname AS full_name FROM student s JOIN city c ON s.city_code = c.city_code WHERE LOWER(c.state) ='md' ORDER BY full_name NULLS LAST;
SELECT state FROM City WHERE country = 'China' AND city_code IN (SELECT city_code FROM Student);
SELECT state FROM City WHERE country = 'China' AND city_code IN (SELECT city_code FROM Student);
SELECT state, s.Fname, s.Major FROM Student WHERE LOWER(s.city_code) = 'baltimore'
SELECT state, s.Fname, m.Major FROM Student WHERE LOWER(s.city_code) = 'baltimore'
SELECT country, COUNT(*) AS num_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY country ORDER BY num_students DESC NULLS LAST;
SELECT country, COUNT(*) AS number_of_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY country ORDER BY number_of_students DESC NULLS LAST;
SELECT city_name, COUNT(*) AS num_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY city_name ORDER BY num_students DESC NULLS LAST;
SELECT state, COUNT(*) AS number_of_students FROM (SELECT c.city_name AS state, COUNT(s.StuID) AS student_count FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.city_name) subquery GROUP BY state ORDER BY number_of_students DESC NULLS LAST;
SELECT country, COUNT(*) AS total_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY country ORDER BY total_students DESC LIMIT 1;
SELECT country FROM City WHERE state = (SELECT MAX(s.state) AS state FROM Student s GROUP BY s.state);
SELECT country FROM City WHERE country IN (SELECT c.country FROM City c JOIN Student s ON c.city_code = s.city_code GROUP BY c.country ORDER BY COUNT(s.StuID) ASC LIMIT 1);
SELECT country FROM City WHERE country IN (SELECT s.city_code FROM Student s GROUP BY s.city_code ORDER BY COUNT(s.StuID) ASC LIMIT 1);
SELECT city_name FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(StuID) >= 3);
SELECT city_name FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(StuID) >= 3);
SELECT country FROM City WHERE state IN (SELECT s.state FROM Student s GROUP BY s.state HAVING COUNT(s.city_code) > 5);
SELECT country FROM City WHERE state IN (SELECT s.state FROM Student s GROUP BY s.state HAVING COUNT(s.StuID) > 5);
SELECT state FROM City WHERE country!= 'USA'
SELECT state FROM City WHERE country!= 'USA'
SELECT state FROM City WHERE state = 'PA'
SELECT state FROM City WHERE state = 'PA';
SELECT state FROM City WHERE country!= 'USA' ORDER BY st;
SELECT state FROM City WHERE country!= 'USA'
SELECT city_code FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI';
SELECT city_code FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI';
SELECT city_code FROM City WHERE city_name = 'Boston' OR city_name = 'Newark';
SELECT city_code FROM Direct_distance WHERE (city1_code = 'BOS' AND city2_code = 'EWR') OR (city1_code = 'EWR' AND city2_code = 'BOS');
SELECT city_code, AVG(distance), MIN(distance), MAX(distance) FROM Direct_distance GROUP BY city_code;
SELECT city_code, AVG(distance), MIN(distance), MAX(distance) FROM Direct_distance GROUP BY city_code
SELECT city_code FROM City WHERE ciy_code IN (SELECT city1_code FROM Direct_distance UNION SELECT city2_code FROM Direct_distance) ORDER BY ciy_code LIMIT 2;
SELECT city_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance);
SELECT city_code FROM City WHERE ciy_code IN (SELECT d.city1_code FROM Direct_distance d UNION SELECT d.city2_code FROM Direct_distance d) AND ciy_code NOT IN (SELECT d.city1_code FROM Direct_distance d INTERSECT SELECT d.city2_code FROM Direct_distance d);
SELECT city_code FROM City WHERE city_code IN (SELECT city1_code FROM Direct_distance UNION SELECT city2_code FROM Direct_distance) AND city_code NOT IN (SELECT city_code FROM City WHERE latitude IS NULL OR longitude IS NULL);
SELECT city_code FROM City WHERE city_code IN (SELECT city1_code FROM Direct_distance WHERE distance < 1000 UNION SELECT city2_code FROM Direct_distance WHERE distance < 1000);
SELECT city_code FROM City WHERE city_code IN (SELECT city1_code FROM Direct_distance WHERE distance < 1000 UNION SELECT city2_code FROM Direct_distance WHERE distance < 1000);
SELECT city_name, SUM(distance) AS total_distance FROM Direct_distance dd JOIN City cc ON (dd.city1_code = cc.city_code OR dd.city2_code = cc.city_code) WHERE cc.city_name!= 'BAL' GROUP BY city_name;
SELECT state, SUM(distance) AS total_distance FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL' GROUP BY state;
SELECT city_name, AVG(distance) AS avg_distance FROM Direct_distance dd JOIN City cc ON dd.city1_code = cc.city_code WHERE city_name = 'Boston' GROUP BY city_name
SELECT city_name, AVG(distance) AS avg_distance FROM Direct_distance dd JOIN City cc ON (dd.city1_code = cc.city_code OR dd.city2_code = cc.city_code) WHERE LOWER(cc.city_name)!= 'boston' GROUP BY city_name;
SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY distance LIMIT 1);
SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY distance LIMIT 1);
SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') ORDER BY distance DESC LIMIT 1);
SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') ORDER BY distance DESC LIMIT 1);
SELECT city_code, SUM(distance) AS total_distance FROM Direct_distance GROUP BY city_code
SELECT city_code, SUM(distance) AS total_distance FROM Direct_distance GROUP BY city_code ORDER BY total_distance DESC NULLS LAST;
SELECT city_name, AVG(distance) AS avg_distance FROM City JOIN Direct_distance USING (city_code) GROUP BY city_name
SELECT city_name, AVG(distance) AS avg_distance FROM City JOIN Direct_distance USING (city_code) GROUP BY city_name ORDER BY avg_distance DESC NULLS LAST;
SELECT state, country FROM Student WHERE Fname = 'Linda' AND LName = 'Smith' UNION SELECT state, country FROM Student WHERE Fname = 'Tracy' AND LName = 'Kim';
SELECT state FROM Student WHERE LName = 'Smith' AND Fname = 'Linda'; SELECT stbte FROM Student WHERE LName = 'Kim' AND Fname = 'Tracy'; SELECT d.distance FROM Direct_distance d JOIN City c1 ON d.city1_code = c1.city_code JOIN City c2 ON d.city2_code = c2.city_code WHERE c1.city_name = (SELECT city_name FROM City WHERE city_code = (SELECT city_code FROM Student WHERE LName = 'Smith' AND Fname = 'Linda')) AND c2.city_name = (SELECT city_name FROM City WHERE city_code = (SELECT city_code FROM Student WHERE LName = 'Kim' AND Fname = 'Tracy'));
SELECT state, MAX(distance) AS max_distance FROM (SELECT c.state, d.distance FROM City c JOIN Direct_distance d ON c.city_code = d.city2_code WHERE c.country = 'United States' AND c.latitude BETWEEN 34.0522 AND 45.5236 AND c.longitude BETWEEN -118.2437 AND -74.0060) subquery_alias GROUP BY state;
SELECT state, MAX(distance) AS max_distance FROM (SELECT c.state, d.distance FROM City c JOIN Direct_distance d ON c.city_code = d.city2_code WHERE c.city_name LIKE '%Linda%Smith%' UNION SELECT s.state, d.distance FROM Student s JOIN Direct_distance d ON s.city_code = d.city1_code WHERE s.LName = 'Smith' AND s.Fname = 'Linda') subquery GROUP BY state;
SELECT country FROM Student WHERE Fname = 'Linda'
SELECT country FROM Student WHERE Fname = 'Linda'
SELECT sid, name, age FROM Sailors WHERE age > 30;
SELECT sid, name, age FROM Sailors WHERE age > 30;
SELECT sid, name, age FROM Sailors WHERE age < 30;
SELECT sid, name, age FROM Sailors WHERE age < 30;
SELECT bid FROM Reserves WHERE sid = 1;
SELECT bid FROM Reserves WHERE sid = 1 GROUP BY bid;
SELECT sid FROM Reserves WHERE bid = 102;
SELECT sid FROM Reserves WHERE bid = 102;
SELECT bid FROM Reserves WHERE bid IN (SELECT DISTINCT bid FROM Reserves);
SELECT bid FROM Reserves;
SELECT sid, name FROM Sailors WHERE name ilike '%e%' ORDER BY name NULLS LAST;
SELECT sid, name FROM Sailors WHERE LOWER(name) LIKE '%e%' ORDER BY name NULLS LAST;
SELECT sid FROM Sailors WHERE age = (SELECT MAX(age) FROM Sailors);
SELECT sid FROM Sailors WHERE age NOT IN (SELECT MIN(age) FROM Sailors);
SELECT sid FROM Sailors WHERE age > (SELECT MAX(age) FROM Sailors WHERE rating > 7);
SELECT sid, name FROM Sailors WHERE age > (SELECT MAX(age) FROM Sailors WHERE rating > 7) ORDER BY name;
SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves GROUP BY sid HAVING COUNT(*) > 0);
SELECT sid, name FROM Sailors WHERE s.id IN (SELECT r.sid FROM Reserves r GROUP BY r.sid HAVING COUNT(r.bid) > 0);
SELECT sid, name FROM Sailors WHERE s.id IN (SELECT r.sid FROM Reserves r GROUP BY r.sid HAVING COUNT(r.bid) > 1);
SELECT sid, COUNT(*) AS num_reservations FROM Reserves GROUP BY s.id HAVING COUNT(*) >= 2;
SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue') GROUP BY s.id;
SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue');
SELECT sid, name FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) IN ('red', 'blue') ORDER BY s.name NULLS LAST;
SELECT sid, name FROM Sailors WHERE sid IN (SELECT r.sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) ='red' OR LOWER(b.color) = 'blue');
SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue') GROUP BY s.id HAVING COUNT(DISTINCT bid) >= 2;
SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue') GROUP BY s.sid;
SELECT sid, name FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) IN ('red', 'blue') GROUP BY s.name, s.sid;
SELECT sid, name FROM Sailors WHERE sid IN (SELECT r.sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) IN ('red', 'blue'));
SELECT sid FROM Sailors WHERE s.sid NOT IN (SELECT r.sid FROM Reserves r);
SELECT sid FROM Sailors WHERE s.sid NOT IN (SELECT r.sid FROM Reserves r);
SELECT sid, name FROM Sailors WHERE s.sid NOT IN (SELECT r.sid FROM Reserves r);
SELECT sid, name FROM Sailors WHERE s.sid NOT IN (SELECT r.sid FROM Reserves r);
SELECT sid FROM Sailors WHERE s.sid NOT IN (SELECT r.sid FROM Reserves r);
SELECT sid FROM Sailors WHERE s.id NOT IN (SELECT r.sid FROM Reserves r);
SELECT sid, name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid WHERE bid = 103;
SELECT sid FROM Reserves WHERE bid = 103;
SELECT sid, name FROM Sailors WHERE rating > (SELECT rating FROM Sailors WHERE name = 'Luis');
SELECT sid, name FROM Sailors WHERE rating > (SELECT rating FROM Sailors WHERE name = 'Luis');
SELECT sid, name FROM Sailors WHERE name!= 'Luis' AND rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis');
SELECT sid, name FROM Sailors WHERE rating > (SELECT rating FROM Sailors WHERE name = 'Luis');
SELECT sid, name FROM Sailors WHERE rating > 2 AND sid IN (SELECT sid FROM Reserves);
SELECT sid, name FROM Sailors WHERE rating >= 3 AND sid IN (SELECT sid FROM Reserves);
SELECT sid, name, MAX(age) AS max_age FROM Sailors GROUP BY s.id ORDER BY max_age DESC LIMIT 1;
SELECT sid, name, MAX(age) AS max_age FROM Sailors GROUP BY sID, name ORDER BY max_age DESC LIMIT 1;
SELECT sid FROM Sailors;
SELECT sid FROM Sailors;
SELECT sid, AVG(age) AS average_age FROM Sailors WHERE rating = 7 GROUP BY sid;
SELECT sid, AVG(age) AS average_age FROM Sailors WHERE rating = 7 GROUP BY sid;
SELECT sid FROM Sailors WHERE name ilike 'D%' GROUP BY sID HAVING COUNT(sID) > 0;
SELECT sid FROM Sailors WHERE name ilike 'D%' GROUP BY s.id;
SELECT sid, AVG(rating) AS avg_rating, MAX(age) AS max_age FROM Sailors GROUP BY sid;
SELECT sid, AVG(rating) AS average_rating, MAX(age) AS max_age FROM Sailors GROUP BY sid;
SELECT bid, COUNT(*) AS num_reservations FROM Reserves GROUP BY bid ORDER BY num_reservations DESC NULLS LAST;
SELECT bid, COUNT(*) AS number_of_reservations FROM Reserves GROUP BY bid ORDER BY number_of_reservations DESC NULLS LAST;
SELECT bid, COUNT(*) AS num_reservations FROM Reserves WHERE bid > 50 GROUP BY bid ORDER BY num_reservations DESC NULLS LAST;
SELECT bid, COUNT(*) AS number_of_reservations FROM Reserves WHERE bid > 50 GROUP BY bid ORDER BY number_of_reservations DESC NULLS LAST;
SELECT bid, COUNT(*) AS num_reservations FROM Reserves GROUP BY bid HAVING COUNT(*) > 1 ORDER BY num_reservations DESC NULLS LAST;
SELECT bid, COUNT(*) AS number_of_reservations FROM Reserves GROUP BY bid HAVING COUNT(*) > 1 ORDER BY number_of_reservations DESC NULLS LAST;
SELECT bid, COUNT(*) AS num_reservations FROM Reserves WHERE sid > 1 GROUP BY bid ORDER BY num_reservations DESC NULLS LAST;
SELECT bid, COUNT(*) AS number_of_reservations FROM Reserves WHERE sid > 1 GROUP BY bid ORDER BY number_of_reservations DESC NULLS LAST;
SELECT sid, AVG(age) AS average_age FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) ='red' GROUP BY s.rating ORDER BY s.rating NULLS LAST;
SELECT sid, AVG(age) AS average_age FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) ='red' GROUP BY s.rating ORDER BY s.rating NULLS LAST;
SELECT sid, name, rating, age FROM Sailors ORDER BY rating DESC, age ASC;
SELECT sid, name, rating, age FROM Sailors ORDER BY rating DESC, age ASC;
SELECT bid FROM Boats;
SELECT bid FROM Boats;
SELECT bid FROM Boats WHERE LOWER(color) ='red';
SELECT bid FROM Boats WHERE LOWER(color) ='red';
SELECT bid, name FROM Boats JOIN Reserves r ON Boats.bid = Reserves.bid JOIN Sailors s ON Reserves.sid = Sailors.sid WHERE s.age BETWEEN 20 AND 30;
SELECT bid, name FROM Boats JOIN Reserves r ON Boats.bid = Reserves.bid JOIN Sailors s ON Reserves.sid = Sailors.sid WHERE Sailors.age BETWEEN 20 AND 30;
SELECT sid, name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) ='red');
SELECT sid, name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) ='red');
SELECT sid, MAX(rating) AS max_rating FROM Sailors GROUP BY sID ORDER BY max_rating DESC LIMIT 1;
SELECT sid, MAX(rating) AS max_rating FROM Sailors GROUP BY sid ORDER BY max_rating DESC NULLS LAST LIMIT 1;
SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE LOWER(name) ='melon')
SELECT sid, name FROM Sailors JOIN Reserves r ON Sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.name) ='melon';
SELECT sid, name, age FROM Sailors ORDER BY rating DESC;
SELECT sid, name, age, rating FROM Sailors ORDER BY rating DESC;
SELECT headphone.Headphone_ID, h.headphone FROM headphone h ORDER BY h.price DESC LIMIT 1;
SELECT headphone.Headphone_ID, heaphone.Model, MAX(headphone.Price) AS max_price FROM headphone GROUP BY heaphone.Headphone_ID, heaphone.Model ORDER BY max_price DESC LIMIT 1;
SELECT headphone.Headphone_ID, headphone.Model FROM headphone ORDER BY Model ASC;
SELECT headphone.Headphone_ID, headphone.Model FROM headphone ORDER BY Model ASC;
SELECT headphone.Headphone_ID, COUNT(*) AS total_count FROM headphone GROUP BY Headphone_ID ORDER BY total_count DESC LIMIT 1;
SELECT headphone.Headphone_ID, COUNT(*) AS total_headphones FROM headphone GROUP BY Headphone_ID ORDER BY total_headphones DESC LIMIT 1;
SELECT headphone.Headphone_ID, COUNT(*) AS number_of_headphones FROM headphone GROUP BY headphone.Class HAVING COUNT(*) > 2 ORDER BY number_of_headphones DESC NULLS LAST;
SELECT headphone.Headphone_ID, h.class FROM headphone h JOIN (SELECT s.headphone_id, COUNT(s.headphone_id) AS count FROM stock s GROUP BY s.headphone_id HAVING COUNT(s.headphone_id) > 2) AS t ON h.headphone_id = t.headphone_id;
SELECT headphone.Headphone_ID, COUNT(*) AS count_headphones FROM headphone WHERE Price > 200 GROUP BY Headphone_ID ORDER BY Headphone_ID NULLS LAST;
SELECT headphone.Headphone_ID, headphone.Class, COUNT(*) AS number_of_headphones FROM headphone WHERE headphone.Price > 200 GROUP BY headphone.Headphone_ID, headphone.Class ORDER BY number_of_headphones DESC NULLS LAST;
SELECT headphone.Headphone_ID, COUNT(DISTINCT h.Earpads) AS distinct_earpads FROM headphone h GROUP BY h.Headphone_ID ORDER BY h.Headphone_ID NULLS LAST;
SELECT headphone.Headphone_ID, COUNT(DISTINCT h.Earpads) AS distinct_earpads FROM headphone h GROUP BY h.Headphone_ID ORDER BY distinct_earpads DESC NULLS LAST;
SELECT headphone.Headphone_ID, COUNT(*) AS usage_count FROM headphone WHERE Earpads IN (SELECT Earpads FROM headphone GROUP BY Earpads ORDER BY COUNT(*) DESC LIMIT 2) GROUP BY Headphone_ID ORDER BY usage_count DESC;
SELECT headphone.Headphone_ID, headphone.Earpads FROM headphone JOIN (SELECT Earpads, COUNT(*) AS count FROM headphone GROUP BY Earpads ORDER BY count DESC LIMIT 2) AS subquery ON headphone.Earpads = subquery.Earpads;
SELECT headphone.Headphone_ID, h.model, h.class, h.construction FROM headphone h WHERE h.price = (SELECT MIN(h2.price) FROM headphone h2);
SELECT headphone.Headphone_ID, h.model, h.class, h.construction FROM headphone h WHERE h.price = (SELECT MIN(h2.price) FROM headphone h2);
SELECT headphone.Headphone_ID, h.headphone.Construction, AVG(headphone.Price) AS Average_Price FROM headphone h GROUP BY h.headphone.Construction ORDER BY Average_Price DESC NULLS LAST;
SELECT headphone.Headphone_ID, h.headphone_id, AVG(h.price) AS average_price FROM headphone h GROUP BY h.headphone_id ORDER BY h.headphone_id NULLS LAST;
SELECT headphone.Headphone_ID, headphone.Class FROM headphone WHERE headphone.Earpads IN ('Bowls', 'Comfort Pads') GROUP BY headphone.Headphone_ID, headphone.Class HAVING COUNT(DISTINCT headphone.Earpads) = 2 ORDER BY headphone.Headphone_ID NULLS LAST;
SELECT headphone.Headphone_ID FROM headphone WHERE headphone.Earpads = 'Bowls' INTERSECT SELECT headphone.Headphone_ID FROM headphone WHERE headphone.Earpads = 'Comfort Pads';
SELECT headphone.Headphone_ID, headphone.Earpads FROM headphone WHERE headphone.Construction!= 'plastic' ORDER BY headphone.Headphone_ID NULLS LAST;
SELECT headphone.Headphone_ID, headphone.Earpads FROM headphone WHERE headphone.Construction!= 'plastic' ORDER BY headphone.Headphone_ID NULLS LAST;
SELECT headphone.Headphone_ID, h.headphone FROM headphone h WHERE h.price < (SELECT AVG(h2.price) FROM headphone h2);
SELECT headphone.Headphone_ID, h.headphone FROM headphone h JOIN (SELECT AVG(Price) AS avg_price FROM headphone) ap ON TRUE WHERE h.price < ap.avg_price ORDER BY h.headphone;
SELECT store.Store_ID, s.Name FROM store AS s ORDER BY s.Date_Opened;
SELECT stock.Store_ID, s.Name FROM stock stocK JOIN store s ON stocK.Store_ID = s.Store_ID ORDER BY s.Date_Opened;
SELECT store.Store_ID, storer.Name, storer.Parking FROM store AS storer WHERE LOWER(storer.Neighborhood) = 'tarzana' ORDER BY storer.Store_ID NULLS LAST;
SELECT store.Store_ID, s.Name, s.Parking FROM store s WHERE LOWER(s.Neighborhood) = 'tarzana' ORDER BY s.Store_ID NULLS LAST;
SELECT store.Quantity FROM store;
SELECT store.Quantity FROM store;
SELECT store.Store_ID, COUNT(*) AS store_count FROM store storer GROUP BY storer.Store_ID ORDER BY storer.Store_ID NULLS LAST;
SELECT store.Store_ID, COUNT(*) AS number_of_stores FROM store storer GROUP BY storer.Neighborhood ORDER BY number_of_stores DESC NULLS LAST;
SELECT store.Store_ID, SUM(stock.Quantity) AS total_headphones FROM stock JOIN store ON stock.Store_ID = store.Store_ID GROUP BY store.Store_ID ORDER BY total_headphones DESC LIMIT 1;
SELECT store.Store_ID, store.Name, SUM(stock.Quantity) AS Total_Quantity FROM stock JOIN headphone ON stock.Headphone_ID = headphone.Headphone_ID JOIN store ON stock.Store_ID = store.Store_ID GROUP BY store.Store_ID, store.Name ORDER BY Total_Quantity DESC NULLS LAST;
SELECT store.Store_ID, store.Name FROM store LEFT JOIN (SELECT Store_ID, Headphone_ID FROM stock) AS st ON store.Store_ID = st.Store_ID WHERE st.Store_ID IS NULL;
SELECT store.Store_ID, store.Name FROM store LEFT JOIN stock ON store.Store_ID = stock.Store_ID WHERE stock.Store_ID IS NULL;
SELECT headphone.Headphone_ID, h.headphone FROM headphone h LEFT JOIN stock s ON h.headphone_id = s.headphone_id WHERE s.headphone_id IS NULL;
SELECT headphone.Headphone_ID, h.headphone FROM headphone h LEFT JOIN (SELECT s.Store_ID, s.Headphone_ID FROM stock s) AS sub ON h.headphone_id = sub.headphone_id WHERE sub.headphone_id IS NULL;
SELECT headphone.Headphone_ID, SUM(stock.Quantity) AS total_quantity FROM stock JOIN headphone ON stock.Headphone_ID = headphone.Headphone_ID GROUP BY headphone.Headphone_ID ORDER BY total_quantity DESC LIMIT 1;
SELECT headphone.Headphone_ID, SUM(stock.Quantity) AS Total_Quantity FROM stock JOIN headphone ON stock.Headphone_ID = headphone.Headphone_ID GROUP BY headphone.Headphone_ID ORDER BY Total_Quantity DESC LIMIT 1;
SELECT store.Quantity FROM stock WHERE Store_ID = (SELECT Store_ID FROM store WHERE Name = 'Woodman')
SELECT store.Quantity FROM stock WHERE stock.Store_ID = (SELECT Store_ID FROM store WHERE Name = 'Woodman');
SELECT store.Store_ID, store.Neighborhood FROM store LEFT JOIN (SELECT Stock.Store_ID FROM Stock WHERE Stock.Quantity > 0) AS stocked ON store.Store_ID = stocked.Store_ID WHERE stocked.Store_ID IS NULL;
SELECT store.Store_ID FROM store WHERE Store_ID NOT IN (SELECT DISTINCT Stock.Store_ID FROM stock)
SELECT Author.venue, COUNT(Author.author_id) AS number_of_authors FROM Author GROUP BY Author.venue ORDER BY number_of_authors DESC;
SELECT Author.venue, COUNT(Author.author_id) AS author_count FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY Author.venue ORDER BY author_count DESC;
SELECT paper_id FROM Paper;
SELECT paper_id FROM Paper;
SELECT Affiliation.venue FROM Affiliation;
SELECT Affiliation.venue FROM Affiliation;
SELECT paper_id FROM Paper WHERE venue = 'NAACL' AND year = 2000;
SELECT paper_id FROM Paper WHERE venue = 'NAACL' AND year = 2000;
SELECT paper_id FROM Paper WHERE YEAR = 2009 AND venue LIKE '%Columbia%University%'
SELECT paper_id FROM Paper WHERE year = 2009 AND venue LIKE '%Columbia%University%' GROUP BY paper_id;
SELECT Affiliation.venue, Affiliation.name, Affiliation.address FROM Affiliation;
SELECT Affiliation.venue, Affiliation.address FROM Affiliation;
SELECT paper_id, venue, year FROM Paper ORDER BY year;
SELECT paper_id, venue, year FROM Paper ORDER BY year;
SELECT paper_id, title FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Harvard University')
SELECT paper_id, title FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE Author_list.affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name ilike '%Harvard%University%') ORDER BY paper_id;
SELECT paper_id, title FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE LOWER(name) ='mckeown'
SELECT paper_id, title FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE LOWER(name) ='mckeown'
SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT al.paper_id FROM Author_list al JOIN Affiliation af ON al.affiliation_id = af.affiliation_id WHERE LOWER(af.name) IN ('stanford university', 'columbia university')) ORDER BY paper_id;
SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT al.paper_id FROM Author_list al JOIN Affiliation af ON al.affiliation_id = af.affiliation_id WHERE LOWER(af.name) ='stanford' AND LOWER(al.author_id) IN (SELECT author_id FROM Author WHERE name LIKE '%Columbia%')) ORDER BY paper_id;
SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT al.paper_id FROM Author_list al JOIN Author a ON al.author_id = a.author_id WHERE LOWER(a.name) ='mckeown,kathleen' AND LOWER(al.paper_id) IN (SELECT paper_id FROM Paper)) AND paper_id IN (SELECT al.paper_id FROM Author_list al JOIN Author a ON al.author_id = a.author_id WHERE LOWER(a.name) = 'rambow,owen' AND LOWER(al.paper_id) IN (SELECT paper_id FROM Paper));
SELECT paper_id, title FROM Paper JOIN Author_list al ON paper_id = author_list.paper_id WHERE author_list.author_id IN (SELECT author_id FROM Author WHERE name ilike '%Mckeown,%Kathleen%' OR name ilike '%Rambow,%Owen%') GROUP BY paper_id, title;
SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT al.paper_id FROM Author_list al JOIN Author au ON al.author_id = au.author_id WHERE LOWER(au.name) LIKE '%mckeown%' AND LOWER(au.name) NOT LIKE '%rambow%') ORDER BY paper_id;
SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT al.paper_id FROM Author_list al JOIN Author au ON al.author_id = au.author_id WHERE LOWER(au.name) ='mckeown') AND paper_id NOT IN (SELECT al.paper_id FROM Author_list al JOIN Author au ON al.author_id = au.author_id WHERE LOWER(au.name) = 'rambow');
SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT al.paper_id FROM Author_list al JOIN Author au ON al.author_id = au.author_id WHERE LOWER(au.name) LIKE '%mckeown, kathleen%' OR LOWER(au.name) LIKE '%rambow, owen%') ORDER BY title;
SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT al.paper_id FROM Author_list al JOIN Author au ON al.author_id = au.author_id WHERE LOWER(au.name) LIKE '%mckeown,%kathleen%' OR LOWER(au.name) LIKE '%rambow,%owen%') ORDER BY title;
SELECT Author.venue, COUNT(Author_list.paper_id) AS num_papers FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY Author.venuu ORDER BY num_papers DESC;
SELECT paper_id, COUNT(paper_id) AS num_papers FROM Author_list GROUP BY paper_id ORDER BY num_papers DESC;
SELECT Affiliation.venue, COUNT(Paper.paper_id) AS paper_count FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY Affiliation.venue ORDER BY paper_count ASC;
SELECT Affiliation.venue, COUNT(Paper.paper_id) AS paper_count FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY Affiliation.name ORDER BY paper_count DESC;
SELECT Author.venue, COUNT(Author_list.paper_id) AS paper_count FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY Author.venue HAVING COUNT(Author_list.paper_id) > 50 ORDER BY paper_count DESC;
SELECT paper_id, COUNT(paper_id) AS paper_count FROM Author_list GROUP BY paper_id HAVING COUNT(paper_id) > 50;
SELECT Author.venue FROM Author WHERE Author.author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(paper_id) = 1);
SELECT Author.venue, COUNT(Author_list.paper_id) AS number_of_papers FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY Author.venue HAVING COUNT(Author_list.paper_id) = 1 ORDER BY Author.venue;
SELECT paper_id, COUNT(paper_id) AS publication_count FROM Paper GROUP BY paper_id ORDER BY publication_count DESC LIMIT 1;
SELECT paper_id, COUNT(paper_id) AS publication_count FROM Paper GROUP BY paper_id ORDER BY publication_count DESC LIMIT 1;
SELECT paper_id FROM Paper WHERE venue = (SELECT MIN(p.venue) FROM Paper p GROUP BY p.venue);
SELECT paper_id, COUNT(paper_id) AS publication_count FROM Paper GROUP BY paper_id ORDER BY publication_count ASC LIMIT 1;
SELECT paper_id FROM Citation WHERE cited_paper_id = 'A00-1002';
SELECT paper_id FROM Citation WHERE cited_paper_id = 'A00-1002';
SELECT paper_id FROM Citation WHERE cited_paper_id = 'D12-1027';
SELECT paper_id, COUNT(cited_paper_id) AS num_citations FROM Citation WHERE paper_id = 'D12-1027' GROUP BY paper_id;
SELECT paper_id, COUNT(*) AS citation_count FROM Citation GROUP BY paper_id ORDER BY citation_count DESC LIMIT 1;
SELECT paper_id, COUNT(*) AS citation_count FROM Citation GROUP BY paper_id ORDER BY citation_count DESC LIMIT 1;
SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id ORDER BY COUNT(cited_paper_id) DESC LIMIT 1);
SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id ORDER BY COUNT(cited_paper_id) DESC LIMIT 1);
SELECT paper_id, COUNT(*) AS citation_count FROM Citation GROUP BY paper_id ORDER BY citation_count DESC LIMIT 10;
SELECT paper_id, COUNT(*) AS citation_count FROM Citation GROUP BY paper_id ORDER BY citation_count DESC LIMIT 10;
SELECT paper_id FROM Author_list WHERE name = 'Mckeown, Kathleen';
SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') UNION SELECT cited_paper_id FROM Citation WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen'));
SELECT paper_id FROM Citation WHERE cited_paper_id IN (SELECT paper_id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE name ilike '%Mckeown,%Kathleen%');
SELECT paper_id FROM Citation WHERE cited_paper_id IN (SELECT paper_id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE name ilike '%Mckeown,%Kathleen%');
SELECT Author.venue, COUNT(Citation.paper_id) AS total_citations FROM Author JOIN Paper ON Author.author_id = Paper.paper_id JOIN Citation ON Paper.paper_id = Citation.cited_paper_id GROUP BY Author.venue ORDER BY total_citations DESC LIMIT 1;
SELECT Author.venue, COUNT(Citation.paper_id) AS citation_count FROM Author JOIN Paper ON Author.author_id = Paper.paper_id LEFT JOIN Citation ON Paper.paper_id = Citation.cited_paper_id GROUP BY Author.venue ORDER BY citation_count DESC LIMIT 1;
SELECT paper_id, venue, year FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE name = 'Mckeown, Kathleen';
SELECT paper_id, venue, year FROM Paper JOIN Author_list ON paper_id = author_list.paper_id WHERE name = 'Mckeown' AND email = 'Kathleen';
SELECT paper_id, venue, year FROM Paper WHERE LOWER(venue) = 'columbia university' ORDER BY year;
SELECT paper_id, venue, year FROM Paper WHERE LOWER(venue) = 'columbia university' ORDER BY year;
SELECT paper_id, COUNT(paper_id) AS paper_count FROM Paper WHERE YEAR = 2009 GROUP BY paper_id ORDER BY paper_count DESC LIMIT 1;
SELECT paper_id, COUNT(paper_id) AS paper_count FROM Paper WHERE YEAR = 2009 GROUP BY paper_id ORDER BY paper_count DESC LIMIT 1;
SELECT paper_id, COUNT(paper_id) AS paper_count FROM Paper WHERE YEAR = 2009 GROUP BY paper_id ORDER BY paper_count DESC LIMIT 3;
SELECT paper_id, COUNT(paper_id) AS paper_count FROM Paper WHERE YEAR = 2009 GROUP BY paper_id ORDER BY paper_count DESC LIMIT 3;
SELECT paper_id FROM Paper WHERE venue = 'Columbia University' AND year <= 2009;
SELECT paper_id FROM Paper WHERE year <= 2009 AND affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University');
SELECT paper_id FROM Paper WHERE year BETWEEN 2000 AND 2009;
SELECT paper_id FROM Paper WHERE year BETWEEN 2000 AND 2009;
SELECT paper_id, COUNT(DISTINCT author_id) AS num_authors FROM Author_list GROUP BY paper_id ORDER BY num_authors DESC LIMIT 1;
SELECT paper_id, MAX(author_count) AS max_authors FROM (SELECT pl.paper_id, COUNT(DISTINCT pl.author_id) AS author_count FROM Author_list pl GROUP BY pl.paper_id) AS subquery GROUP BY paper_id ORDER BY max_authors DESC LIMIT 1;
SELECT paper_id, COUNT(DISTINCT author_id) AS num_collaborators FROM Author_list WHERE name = 'Mckeown, Kathleen' GROUP BY paper_id;
SELECT paper_id, COUNT(DISTINCT author_id) AS num_collaborators FROM Author_list WHERE name = 'Mckeown, Kathleen' GROUP BY paper_id;
SELECT paper_id, COUNT(paper_id) AS num_papers FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') GROUP BY paper_id ORDER BY num_papers DESC LIMIT 1;
SELECT paper_id, COUNT(*) AS num_papers FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') GROUP BY paper_id ORDER BY num_papers DESC LIMIT 1;
SELECT paper_id FROM Paper WHERE LOWER(title) LIKE '%translation%'
SELECT paper_id FROM Paper WHERE title ilike '%translation%'
SELECT paper_id, title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation UNION SELECT paper_id FROM Citation);
SELECT paper_id, title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation UNION SELECT paper_id FROM Citation);
SELECT Affiliation.venue, COUNT(Paper.paper_id) AS paper_count FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Affiliation.address ilike '%China%' GROUP BY Affiliation.venue ORDER BY paper_count DESC LIMIT 1;
SELECT Affiliation.venue, COUNT(Paper.paper_id) AS paper_count FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Affiliation.address ilike '%China%' GROUP BY Affiliation.venue ORDER BY paper_count DESC LIMIT 1;
SELECT paper_id, venue, COUNT(paper_id) AS num_papers FROM Paper GROUP BY paper_id, venue ORDER BY venue, year;
SELECT paper_id, venue, EXTRACT(YEAR FROM TO_TIMESTAMP(year)) AS YEAR, COUNT(paper_id) AS number_of_papers FROM Paper GROUP BY paper_id, venue, YEAR ORDER BY venue, YEAR;
SELECT paper_id, COUNT(paper_id) AS total_papers FROM Paper GROUP BY paper_id ORDER BY total_papers DESC;
SELECT paper_id, COUNT(paper_id) AS number_of_papers FROM Paper GROUP BY paper_id;
SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(cited_paper_id) > 50);
SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(cited_paper_id) > 50);
SELECT paper_id FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(cited_paper_id) > 50);
SELECT Author.venue, COUNT(DISTINCT Author.author_id) AS number_of_authors FROM Paper JOIN Citation ON Paper.paper_id = Citation.cited_paper_id GROUP BY Paper.venue HAVING SUM(CASE WHEN Citation.cited_paper_id IS NOT NULL THEN 1 ELSE 0 END) <= 50 ORDER BY number_of_authors DESC;
SELECT paper_id FROM Paper WHERE venue IN ('NAACL', 'ACL') AND YEAR = 2009;
SELECT Author.venue, Author.name FROM Paper JOIN Author ON Paper.paper_id = Author.author_id WHERE Paper.year = 2009 AND (Paper.venue ilike '%NAACL%' OR Paper.venue ilike '%ACL%') GROUP BY Author.name, Author.venue HAVING COUNT(DISTINCT Paper.venue) > 1 ORDER BY Author.name;
SELECT Author.venue, Author.name FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id WHERE Author_list.paper_id IN (SELECT Paper.paper_id FROM Paper WHERE LOWER(Paper.venue)!= 'acl') GROUP BY Author.venue, Author.name;
SELECT Author.venue, Author.name FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id WHERE Author.venue!= 'ACL'
SELECT conference.Conference_ID FROM conference;
SELECT conference.Conference_ID FROM conference;
SELECT conference.Conference_ID, conferecence.Conference_Name FROM conference;
SELECT conference.Conference_ID, conferecence.Conference_Name FROM conference;
SELECT conference.Conference_ID, conferecence.Conference_Name, conferecence.Year, conferecence.Location FROM conferecence
SELECT conference.Conference_ID, conferecence.Conference_Name, conferecence.Year, conferecence.Location FROM conference conferecence;
SELECT conference.Conference_ID, COUNT(confereence.Conference_ID) AS num_of_conferences FROM confereence GROUP BY confereence.Conference_ID ORDER BY num_of_conferences DESC NULLS LAST;
SELECT conference.Conference_ID, COUNT(*) AS number_of_occurrences FROM conference confereence GROUP BY conference.Conference_ID ORDER BY number_of_occurrences DESC NULLS LAST;
SELECT conference.role, COUNT(*) AS number_of_conferences FROM conference GROUP BY role;
SELECT conference_participation.Conference_ID, COUNT(DISTINCT coference_paerticipation.staff_ID) AS number_of_staff FROM conference_participation JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID GROUP BY conference_participation.Conference_ID ORDER BY number_of_staff DESC NULLS LAST;
SELECT conference.Conference_ID, confereence.Year FROM conference confereence GROUP BY confereence.Conference_ID, confereence.Year ORDER BY COUNT(confereence.Conference_ID) ASC LIMIT 1;
SELECT conference.Conference_ID, conferecence.Year FROM conference WHERE YEAR IN (SELECT MIN(YEAR) FROM conference);
SELECT conference.Conference_ID, confereence.Location FROM conference AS confereence GROUP BY confereence.Location HAVING COUNT(confereence.Conference_ID) >= 2 ORDER BY confereence.Location;
SELECT conference.Conference_ID, confereence.Location FROM conference WHERE (SELECT COUNT(*) FROM conference WHERE Location = conference.Location) >= 2;
SELECT institution.role, staff.name, staff.age, staff.nationality, staff.institution_id FROM staff JOIN institution ON staff.institution_id = institution.institution_id;
SELECT institution.role, staff.name, staff.age, staff.nationality, staff.institution_id, conference.location, conference.year FROM staff JOIN institution ON staff.institution_id = institution.institution_id JOIN conference_participation ON staff.staff_id = conference_participation.staff_id JOIN conference ON conference_participation.conference_id = conference.conference_id;
SELECT institution.role FROM institution WHERE institution.founded BETWEEN 1850 AND 1900;
SELECT institution.role FROM institution WHERE institution.founded BETWEEN 1850 AND 1900;
SELECT institution.role, staff.name FROM staff JOIN institution ON staff.institution_id = institution.institution_id WHERE staff.age > 30;
SELECT institution.role, staff.name, staff.age, staff.nationality, staff.institution_id FROM staff JOIN institution ON staff.institution_id = institution.institution_id WHERE institution.founded = (SELECT MAX(founded) FROM institution);
SELECT institution.role, COUNT(*) AS number_of_staff FROM staff JOIN institution ON staff.institution_id = institution.institution_id WHERE institution.founded > 1800 GROUP BY institution_name
SELECT institution.role, COUNT(*) AS number_of_staff, SUM(staff.age) AS total_age FROM staff JOIN institution ON staff.institution_id = institution.institution_id WHERE institution.founded > 1800 GROUP BY institution.institution_id;
SELECT institution.role FROM institution WHERE NOT EXISTS (SELECT 1 FROM staff WHERE staff.Institution_ID = institution.Institution_ID)
SELECT institution.role FROM institution WHERE NOT EXISTS (SELECT 1 FROM staff WHERE staff.institution_id = institution.institution_id) LIMIT 1;
SELECT staff.staff_ID, staaff.name FROM staaff WHERE staaff.age > (SELECT AVG(age) FROM staaff);
SELECT staff.staff_ID, name FROM staff WHERE age > (SELECT AVG(age) FROM staff);
SELECT staff_ID, MAX(Age) AS max_age, MIN(Age) AS min_age FROM staff WHERE nationality = 'United States' GROUP BY staff_ID;
SELECT staff.role, MAX(s.age) AS max_age, MIN(s.age) AS min_age FROM staff s GROUP BY s.staff_id;
SELECT conference.Conference_ID, conferecence.Conference_Name FROM conference_participation cp JOIN staff s ON cp.staff_ID = s.staff_ID JOIN conference conferecence ON cp.Conference_ID = conferecence.Conference_ID WHERE LOWER(s.Nationality) = 'canadian' ORDER BY conferecence.Conference_ID NULLS LAST;
SELECT conference.Conference_ID, conferecence.Conference_Name FROM conference conferecence JOIN conference_participation cp ON conferecence.Conference_ID = cp.Conference_ID JOIN staff st ON cp.staff_ID = st.staff_ID WHERE LOWER(st.Nationality) = 'canadian' ORDER BY conferecence.Conference_ID NULLS LAST;
SELECT staff.staff_ID, staft.name FROM (SELECT cp.staff_ID, cp.role FROM conference_participation cp WHERE LOWER(cp.role) ='speaker' UNION SELECT cp.staff_ID, cp.role FROM conference_participation cp WHERE LOWER(cp.role) ='sponsor') AS subquery GROUP BY subquery.staff_ID HAVING COUNT(DISTINCT subquery.role) >= 2;
SELECT staff.staff_ID, staaff.name FROM (SELECT cp.staff_ID, cp.role FROM conference_participation cp WHERE LOWER(cp.role) ='speaker' UNION SELECT cp.staff_ID, cp.role FROM conference_participation cp WHERE LOWER(cp.role) ='sponsor') AS subquery GROUP BY subquery.staff_ID HAVING COUNT(DISTINCT subquery.role) = 2;
SELECT staff.staff_ID, staff.name FROM staff JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID WHERE conference_participation.role ='speaker' AND EXISTS (SELECT 1 FROM conference c WHERE c.Conference_ID = conference_participation.Conference_ID AND c.Location = 'ACL') AND EXISTS (SELECT 1 FROM conference c WHERE c.Conference_ID = conference_participation.Conference_ID AND c.Location = 'NACCL');
SELECT staff.staff_ID, staff.name FROM staff JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID WHERE conference_participation.Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name ilike '%ACL%') AND conference_participation.Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name ilike '%NACCL%');
SELECT staff.staff_ID, s.name FROM staff JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE conference.year IN (2003, 2004) ORDER BY staff.staff_ID NULLS LAST;
SELECT staff.staff_ID, staFF.name FROM conference_participation cp JOIN staff ON cp.staff_ID = staff.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.year BETWEEN 2003 AND 2004 ORDER BY staff.staff_ID NULLS LAST;
SELECT conference.Conference_ID, confereence.Conference_Name, confereence.Year, COUNT(cp.staff_ID) AS participant_count FROM confereence JOIN conference_participation cp ON confereence.Conference_ID = cp.Conference_ID GROUP BY confereence.Conference_ID, confereence.Conference_Name, confereence.Year ORDER BY participant_count DESC NULLS LAST;
SELECT conference.Conference_ID, conferecence.Conference_Name, conferecence.Year, COUNT(cp.staff_ID) AS number_of_participants FROM conferecence JOIN conferecence_participation cp ON conferecence.Conference_ID = cp.Conference_ID GROUP BY conferecence.Conference_ID, conferecence.Conference_Name, conferecence.Year ORDER BY conferecence.Conference_ID NULLS LAST;
SELECT conference.Conference_ID, confereence.Conference_Name FROM conference confereence JOIN (SELECT cp.Staff_ID, COUNT(*) AS attendance_count FROM conference_participation cp GROUP BY cp.Staff_ID ORDER BY attendance_count DESC LIMIT 2) sub ON confereence.Conference_ID = sub.Staff_ID;
SELECT conference.Conference_ID, confereence.Conference_Name FROM conference confereence JOIN (SELECT cp.Staff_ID, COUNT(*) AS attendance_count FROM conference_participation cp GROUP BY cp.Staff_ID ORDER BY attendance_count DESC LIMIT 2) sub ON confereence.Conference_ID = sub.Staff_ID;
SELECT staff.staff_ID, staff.name, staff.Nationality FROM staff LEFT JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID WHERE conference_participation.staff_ID IS NULL;
SELECT staff.staff_ID, staff.name, staff.Nationality FROM staff LEFT JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID WHERE conference_participation.staff_ID IS NULL;
SELECT institution.role, institution.location FROM institution JOIN staff ON institution.institution_id = staff.institution_id WHERE NOT EXISTS (SELECT 1 FROM conference_participation cp JOIN conference c ON cp.conference_id = c.conference_id WHERE cp.staff_id = staff.staff_id AND c.year = 2004)
SELECT institution.role, institution.location FROM institution JOIN staff ON institution.institution_id = staff.institution_id WHERE NOT EXISTS (SELECT conference_participation.staff_id FROM conference_participation JOIN conference ON conference_participation.conference_id = conference.conference_id WHERE conference.year = 2004 AND staff.staff_id = conference_participation.staff_id)
SELECT plane_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills);
SELECT plane_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills);
SELECT plane_name, AVG(age) AS avg_age FROM PilotSkills GROUP BY planel_name HAVING MIN(age) < AVG(age) ORDER BY MIN(age);
SELECT plane_name FROM PilotSkills WHERE age < AVG(age) ORDER BY age ASC;
SELECT plane_name FROM PilotSkills WHERE age < 30;
SELECT plane_name FROM PilotSkills WHERE age < 30;
SELECT plane_name FROM PilotSkills WHERE age < 35 AND plane_name = 'Piper Cub';
SELECT plane_name FROM PilotSkills WHERE age < 35 AND planel_name = 'Piper Cub';
SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter' LIMIT 1;
SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter'
SELECT Hangar.location FROM Hangar WHERE Hangaar.plane_name IN (SELECT pilot_skills.plane_name FROM PilotSkills) GROUP BY Hangaar.location;
SELECT Hangar.location FROM Hangar;
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32;
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32;
SELECT plane_name FROM PilotSkills WHERE age > 40;
SELECT plane_name, COUNT(*) AS num_pilots FROM PilotSkills WHERE age > 40 GROUP BY plane_name;
SELECT plane_name FROM PilotSkills WHERE age < 35 AND plane_name = 'B-52 Bomber' GROUP BY plane_name;
SELECT plane_name FROM PilotSkills WHERE age < 35 AND plane_name = 'B-52 Bomber' GROUP BY plane_name;
SELECT plane_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills WHERE planel_name = 'Piper Cub');
SELECT plane_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC LIMIT 1;
SELECT plane_name FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(pilot_name) DESC LIMIT 1);
SELECT plane_name FROM Hangar WHERE plance_name IN (SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(pilot_name) DESC LIMIT 1);
SELECT plane_name FROM Hangar WHERE plance_name IN (SELECT plance_name FROM Hangar GROUP BY plance_name ORDER BY COUNT(*) ASC LIMIT 1);
SELECT plane_name FROM Hangar WHERE planel_name = (SELECT MIN(pilot_skills.plane_name) FROM PilotSkills);
SELECT plane_name FROM Hangar WHERE location = 'Chicago' GROUP BY plane_name;
SELECT plane_name, COUNT(DISTINCT pilot_name) AS num_pilots FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE LOWER(h.location) = 'chicago' GROUP BY planel_name;
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41;
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41;
SELECT plane_name FROM Hangar;
SELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT DISTINCT pilot_name FROM PilotSkills);
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' GROUP BY plane_name;
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' GROUP BY plane_name;
SELECT plane_name FROM PilotSkills WHERE age > 40;
SELECT plane_name FROM PilotSkills WHERE age > 40;
SELECT plane_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC;
SELECT plane_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC;
SELECT plane_name FROM PilotSkills WHERE age IS NOT NULL ORDER BY age DESC;
SELECT plane_name FROM PilotSkills WHERE age IS NOT NULL ORDER BY age DESC;
SELECT plane_name, location FROM Hangar ORDER BY planel_name;
SELECT plane_name, location FROM Hangar ORDER BY planel_name;
SELECT plane_name FROM Hangar WHERE plane_name IN (SELECT DISTINCT plane_name FROM PilotSkills);
SELECT plane_name FROM Hangar WHERE plane_name IS NOT NULL ORDER BY plane_name ASC;
SELECT plane_name FROM PilotSkills WHERE age > 40 OR age < 30;
SELECT plane_name FROM PilotSkills WHERE age > 40 OR age < 30 GROUP BY plane_name;
SELECT plane_name, pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30);
SELECT plane_name, pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30);
SELECT plane_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND NOT EXISTS (SELECT 1 FROM PilotSkills WHERE pilot_name = PilotSkills.pilot_name AND plane_name = 'B-52 Bomber');
SELECT plane_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND planel_name NOT IN (SELECT plane_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber');
SELECT plane_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'B-52 Bomber') GROUP BY planel_name HAVING COUNT(DISTINCT pilot_name) > 1;
SELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub') AND plane_name = 'B-52 Bomber';
SELECT plane_name, AVG(age) AS average_age, MIN(age) AS min_age FROM PilotSkills GROUP BY plane_name;
SELECT plane_name, AVG(age) AS average_age, MIN(age) AS min_age FROM PilotSkills GROUP BY plane_name;
SELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills GROUP BY pilot_name HAVING COUNT(DISTINCT location) = 2);
SELECT plane_name FROM Hangar WHERE location IN ('Austin', 'Boston')
SELECT plane_name FROM PilotSkills WHERE planel_name IN ('Piper Cub', 'F-14 Fighter')
SELECT plane_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter')
SELECT plane_name, AVG(age) AS average_age FROM PilotSkills GROUP BY plane_name ORDER BY average_age DESC;
SELECT plane_name, AVG(age) AS average_age FROM PilotSkills GROUP BY plane_name ORDER BY average_age DESC;
SELECT plane_name, COUNT(*) AS num_planes FROM Hangar GROUP BY plane_name ORDER BY num_planes DESC;
SELECT plane_name, COUNT(*) AS entry_count FROM Hangar GROUP BY plane_name ORDER BY entry_count DESC;
SELECT plane_name, MIN(age) AS min_age FROM PilotSkills GROUP BY plane_name ORDER BY plane_name;
SELECT plane_name, MIN(age) AS min_age FROM PilotSkills GROUP BY plane_name ORDER BY plane_name;
SELECT plane_name, MAX(age) AS max_age FROM PilotSkills GROUP BY plane_name ORDER BY max_age DESC;
SELECT plane_name, MAX(age) AS max_age FROM PilotSkills GROUP BY planel_name ORDER BY max_age DESC;
SELECT plane_name, MAX(age) AS max_age FROM PilotSkills GROUP BY pilot_name ORDER BY max_age DESC;
SELECT plane_name, MAX(age) AS max_age FROM PilotSkills GROUP BY plane_name ORDER BY max_age DESC;
SELECT plane_name, COUNT(*) AS num_pilots, AVG(age) AS avg_age FROM PilotSkills GROUP BY planel_name ORDER BY planel_name;
SELECT plane_name, COUNT(DISTINCT pilot_name) AS number_of_pilots, AVG(age) AS average_age FROM PilotSkills GROUP BY planel_name ORDER BY number_of_pilots DESC;
SELECT plane_name, COUNT(DISTINCT pilot_name) AS num_pilots FROM PilotSkills WHERE age < 35 GROUP BY plane_name HAVING AVG(age) < 35 ORDER BY num_pilots DESC NULLS LAST;
SELECT plane_name, COUNT(DISTINCT pilot_name) AS number_of_pilots FROM PilotSkills WHERE age < 35 GROUP BY plane_name ORDER BY number_of_pilots DESC;
SELECT plane_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills);
SELECT plane_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills);
SELECT plane_name, pilot_name, age FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE LOWER(h.location) = 'austin' ORDER BY pilot_name;
SELECT plane_name, pilot_name, age FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE LOWER(h.location) = 'austin' ORDER BY pilot_name;
SELECT plane_name FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY planel_name ASC;
SELECT plane_name FROM PilotSkills WHERE age > (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY planel_name ASC;
SELECT plane_name, COUNT(*) AS num_pilots FROM PilotSkills WHERE plane_name = 'F-14 Fighter' GROUP BY planel_name HAVING MIN(age) > ALL (SELECT age FROM PilotSkills WHERE plane_name!= 'F-14 Fighter')
SELECT plane_name, COUNT(*) AS number_of_pilots FROM PilotSkills WHERE plane_name = 'F-14' GROUP BY planel_name;
SELECT plane_name FROM Hangar WHERE planel_name ilike '%Bomber%' GROUP BY planel_name;
SELECT plane_name FROM Hangar WHERE planel_name ilike '%Bomber%'
SELECT plane_name FROM PilotSkills WHERE age > (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub')
SELECT plane_name, COUNT(*) AS number_of_pilots FROM PilotSkills WHERE plane_name = 'Piper Cub' GROUP BY planel_name ORDER BY number_of_pilots DESC LIMIT 1;
SELECT district.District_ID, district.Name FROM district ORDER BY district.Area_km DESC LIMIT 1;
SELECT district.District_ID, district.Area_km, district.Government_website FROM district ORDER BY district.Population ASC LIMIT 1;
SELECT district.District_ID, district.Name, district.Population FROM district WHERE district.Area_km > (SELECT AVG(Area_km) FROM district);
SELECT district.District_ID, district.Name, MAX(district.Area_km) AS max_area, AVG(district.Area_km) AS avg_area FROM district GROUP BY district.District_ID, district.Name ORDER BY max_area DESC NULLS LAST;
SELECT district.District_ID, SUM(district.Population) AS Total_Population FROM district WHERE district.Area_km IN (SELECT Area_km FROM district ORDER BY Area_km DESC LIMIT 3) GROUP BY district.District_ID;
SELECT district.District_ID, district.Name, district.Government_website FROM district ORDER BY district.Population DESC;
SELECT district.District_ID, district.Name FROM district WHERE district.Government_website ilike '%.gov%' ORDER BY district.District_ID NULLS LAST;
SELECT district.District_ID, district.Name FROM district WHERE (district.Population > 4000 OR district.Area_km > 3000) ORDER BY district.District_ID NULLS LAST;
SELECT spokesman.Spokesman_ID, spokema.Name AS Spokesman_Name, spokema.Speach_title AS Speech_Title FROM spokesman spokema;
SELECT spokesman.Spokesman_ID, AVG(speaksmaan.Points) AS Average_Points, AVG(speaksmaan.Age) AS Average_Age FROM spokesman WHERE spokesman.Rank_position = 1 GROUP BY spokesman.Spokesmansa.ID;
SELECT spokesman.Spokesman_ID, spokema.Name, spokema.Points FROM spokesman AS spokema WHERE spokema.Age < 40 ORDER BY spokema.Points DESC NULLS LAST;
SELECT spokesman.Spokesman_ID, spokema.Name FROM spokesman AS spokema JOIN spokesman AS spokema2 ON spokema2.Age > spokema.Age WHERE spokema2.Spokesman_ID IS NULL ORDER BY spokema.Age ASC LIMIT 1;
SELECT spokesman.Spokesman_ID, spokema.Name FROM spokesman AS spokema JOIN spokesman AS spokema2 ON spokema.Rank_position = spokema2.Rank_position WHERE spokema.Points < (SELECT AVG(s3.Points) FROM spokesman s3);
SELECT district.District_ID, COUNT(spokesman.Speaker_ID) AS speaker_count FROM spokesman JOIN spokesman_district ON spokesman.Speaker_ID = spokesman_district.Speaker_ID JOIN district ON spokesman_district.District_ID = district.District_ID GROUP BY district.District_ID ORDER BY speaker_count DESC LIMIT 1;
SELECT spokesman.Spokesman_ID, spokema.Name FROM spokesman AS spokema JOIN spokesman_district AS sd ON spokema.SpokesmaN_ID = sd.Spokeman_ID WHERE CAST(sd.Start_Year AS integer) < 2004;
SELECT district.District_ID, COUNT(spokesman.Spokesman_ID) AS num_spokesmen FROM spokesman JOIN spokesman_district ON spokesman.Spokesman_ID = spokesman_district.Speaker_ID JOIN district ON spokesman_district.District_ID = district.District_ID GROUP BY district.District_ID ORDER BY num_spokesmen DESC NULLS LAST;
SELECT district.District_ID, district.Name FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID WHERE district.District_ID IN (SELECT spokesman_district.District_ID FROM spokesman_district GROUP BY spokesman_district.District_ID HAVING MIN(spokesman_rank.Rank_position) = 1 AND MAX(spokesman_rank.Rank_position) = 2);
SELECT district.District_ID, district.Name FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID GROUP BY district.District_ID, district.Name HAVING COUNT(spokesman_district.Speaker_ID) > 1;
SELECT district.District_ID FROM district WHERE district.District_ID NOT IN (SELECT spokesman_district.District_ID FROM spokesman_district) GROUP BY district.District_ID;
SELECT spokesman.Spokesman_ID, spokema.Name FROM spokesman AS spokema LEFT JOIN spokesman_district AS spokema_d ON spokema.Spokesma ID = spokema_d.Spoke ID WHERE spokema_d.Spoke ID IS NULL;
SELECT district.District_ID, SUM(district.Population) AS total_population, AVG(district.Population) AS average_population FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID GROUP BY district.District_ID ORDER BY total_population DESC NULLS LAST;
SELECT sculptureID, title FROM Sculptures ORDER BY YEAR DESC LIMIT 1;
SELECT sculptureID, title FROM Sculptures ORDER BY YEAR DESC LIMIT 1;
SELECT title, location FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings);
SELECT title, location FROM Paintings WHERE YEAR = (SELECT MIN(YEAR) FROM Paintings);
SELECT sculptureID, title FROM Sculptures WHERE LOWER(location) = 'gallery 226';
SELECT sculptureID, title FROM Sculptures WHERE LOWER(location) = 'gallery 226';
SELECT title, location FROM Paintings;
SELECT title, location FROM Paintings;
SELECT sculptureID, title, location FROM Sculptures;
SELECT sculptureID, title, location FROM Sculptures ORDER BY sculptureID NULLS LAST;
SELECT medium FROM Paintings WHERE paintingID = 80;
SELECT medium FROM Paintings WHERE paintingID = 80;
SELECT Artists.location, Artists.fname, Artists.lname FROM Artists WHERE Artists.birthYear > 1850;
SELECT Artists.location, Artists.fname, Artists.lname FROM Artists WHERE Artists.birthYear > 1850;
SELECT sculptureID, title, year FROM Sculptures WHERE LOWER(location)!= 'gallery 226' ORDER BY year NULLS LAST;
SELECT sculptorID, title, year FROM Sculptures WHERE location!= 'Gallery 226';
SELECT sculptorID, CONCAT(fname,'', lname) AS full_name FROM Sculptures WHERE year < 1900 GROUP BY sculptorID, fname, lname ORDER BY full_name NULLS LAST;
SELECT sculptorID, CONCAT(fname,'', lname) AS full_name FROM Sculptures WHERE year < 1900 GROUP BY sculptorID, fname, lname ORDER BY full_name NULLS LAST;
SELECT sculptorID, birthYear FROM Sculptures JOIN Artists ON Sculptures.sculptorID = Artists.artistID WHERE year > 1920 GROUP BY sculptorID, birthYear ORDER BY birthYear NULLS LAST;
SELECT sculptorID, birthYear FROM Sculptures JOIN Artists ON Sculptures.sculptorID = Artists.artistID WHERE year > 1920 GROUP BY sculptorID, birthYear ORDER BY birthYear NULLS LAST;
SELECT Artists.location, Artists.fname, Artists.lname FROM Artists WHERE Artists.deathYear - Artists.birthYear = (SELECT MAX(A2.deathYear - A2.birthYear) FROM Artists AS A2);
SELECT Artists.location, Artists.fname, Artists.lname FROM Artists WHERE Artists.deathYear IS NULL ORDER BY length(Artists.fname) DESC LIMIT 1;
SELECT Artists.location, EXTRACT(YEAR FROM AGE(CURRENT_DATE, TO_TIMESTAMP(Artists.birthYear))) AS age_at_death FROM Artists ORDER BY age_at_death ASC LIMIT 1;
SELECT sculptorID FROM Sculptures WHERE YEAR(CURRENT_DATE) - YEAR(birthYear) = MIN(YEAR(CURRENT_DATE) - YEAR(birthYear)) AND deathYear IS NULL;
SELECT Artists.location, MAX(Artists.deathYear - Artists.birthYear) AS max_age FROM Artists WHERE Artists.deathYear IS NOT NULL GROUP BY Artists.location ORDER BY max_age DESC LIMIT 1;
SELECT Artists.location, MAX(Artists.deathYear - Artists.birthYear) AS max_age FROM Artists GROUP BY Artists.location ORDER BY max_age DESC LIMIT 1;
SELECT sculptureID FROM Sculptures WHERE location = 'Gallery 240';
SELECT sculptureID FROM Sculptures WHERE location = 'Gallery 240';
SELECT sculptorID, COUNT(paintingID) AS num_paintings FROM Paintings p JOIN Artists a ON p.painterID = a.artistID GROUP BY sculptorID ORDER BY (a.deathYear - a.birthYear) DESC LIMIT 1;
SELECT sculptorID, COUNT(paintingID) AS num_paintings FROM Paintings GROUP BY sculptorID ORDER BY (deathYear - birthYear) DESC LIMIT 1;
SELECT Artists.location, Paintings.year, concat(Artists.fname,'', Artists.lname) AS artist_name FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Artists.fname ilike '%Mary%' ORDER BY Paintings.year NULLS LAST;
SELECT Paintings.title, Painting.year FROM Painting JOIN Artists ON Painting.painterID = Artists.artistID WHERE LOWER(Artists.fname) ='mary' ORDER BY Painting.year NULLS LAST;
SELECT sculptorID, p.width_mm FROM Artists ar JOIN Paintings p ON ar.artistID = p.painterID WHERE ar.birthYear < 1850;
SELECT sculptorID, AVG(width_mm) AS average_width FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE birthYear < 1850) GROUP BY sculptorID;
SELECT Paintings.location, PaintingMedium.medium FROM PaintingMedium JOIN Painting ON PaintingMedium.paintingID = Painting.paintingID JOIN Artists ON Painting.painterID = Artists.artistID WHERE LOWER(Artists.fname) = 'pablo' ORDER BY PaintingMedium.medium NULLS LAST;
SELECT sculptureID, title, year, medium, location FROM Sculptures WHERE sculptorID IN (SELECT artistID FROM Artists WHERE LOWER(fname) = 'pablo');
SELECT Artists.location, Artists.fname, Artists.lname FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Artists.location IS NOT NULL;
SELECT Artists.location, concat(Artists.fname,'', Artists.lname) AS full_name FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Artists.location IS NOT NULL GROUP BY full_name, location ORDER BY full_name NULLS LAST;
SELECT Artists.location, Artists.fname, Artists.lname FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.medium LIKE '%oil%' AND Paintings.medium LIKE '%lithography%' ORDER BY Artists.location NULLS LAST;
SELECT Artists.location, Artists.fname, Artists.lname FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.medium IN ('oil', 'lithographic') GROUP BY Artists.location, Artists.fname, Artists.lname HAVING COUNT(DISTINCT Paintings.medium) >= 2 ORDER BY Artists.location NULLS LAST;
SELECT Artists.location FROM Artists WHERE Artists.artistID IN (SELECT Paintings.painterID FROM Paintings WHERE Paintings.year = 1884 AND Paintings.mediumOn = 'canvas') LIMIT 1;
SELECT Artists.location, Artists.birthYear FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.year = 1884;
SELECT Artists.title FROM Artists WHERE Artists.artistID IN (SELECT Paintings.painterID FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Paintings.location = 'gallery 241' AND Paintings.medium = 'oil') ORDER BY Artists.title NULLS LAST;
SELECT Artists.title FROM Artists WHERE Artists.artistID IN (SELECT Paintings.painterID FROM Paintings JOIN Galleries ON Paintings.location = Galleries.galleryID WHERE Galleries.galleryID = 241 AND Paintings.medium = 'oil')
SELECT medium, COUNT(*) AS number_of_works FROM Paintings GROUP BY medium ORDER BY number_of_works DESC NULLS LAST;
SELECT medium, COUNT(*) AS number_of_works FROM Paintings GROUP BY medium ORDER BY number_of_works DESC NULLS LAST;
SELECT medium, AVG(height_mm) AS average_height FROM Paintings GROUP BY medium ORDER BY average_height DESC NULLS LAST;
SELECT medium, AVG(height_mm) AS average_height FROM Paintings GROUP BY medium ORDER BY average_height DESC NULLS LAST;
SELECT location, COUNT(paintingid) AS number_of_paintings FROM Paintings WHERE YEAR < 1900 GROUP BY LOCATION ORDER BY number_of_paintings DESC NULLS LAST;
SELECT location, COUNT(paintingID) AS number_of_paintings FROM Paintings p WHERE p.year < 1900 GROUP BY location ORDER BY number_of_paintings DESC NULLS LAST;
SELECT title FROM Paintings WHERE YEAR > 1910 AND LOWER(medium) = 'oil';
SELECT Artists.location, Paintings.title FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Paintings.year > 1910 AND Paintings.medium = 'oil' ORDER BY Paintings.year NULLS LAST;
SELECT Paintings.medium, Painting.paintingID, Artists.artistID FROM Painting JOIN Artists ON Painting.painterID = Artists.artistID WHERE Painting.location = 'Gallery 240' AND Painting.medium = 'oil';
SELECT sculptorID FROM Sculptures WHERE medium = 'oil' AND location = 'gallery 240';
SELECT Paintings.title FROM Paintings WHERE Painting.height_mm > (SELECT MAX(height_mm) FROM Painting WHERE medium = 'canvas') GROUP BY Painting.title;
SELECT Paintings.title FROM Paintings WHERE Painting.height_mm > ALL (SELECT height_mm FROM Painting WHERE medium = 'canvas') GROUP BY Painting.title;
SELECT sculptureID FROM Sculptures WHERE YEAR > (SELECT YEAR FROM Paintings WHERE LOCATION = 'gallery 240')
SELECT sculptureID FROM Sculptures WHERE YEAR > (SELECT YEAR FROM Sculptures WHERE location = 'gallery 240') GROUP BY sculptureID;
SELECT Paintings.year FROM Paintings WHERE Painting.year = (SELECT MIN(year) FROM Painting);
SELECT Paintings.year FROM Paintings WHERE Painting.year = (SELECT MIN(year) FROM Painting);
SELECT sculptorID, CONCAT(fname,'', lname) AS full_name FROM Sculptures WHERE title ilike '%female%' ORDER BY full_name NULLS LAST LIMIT 1;
SELECT sculptorID, CONCAT(a.lname, ', ', a.fname) AS full_name FROM Sculptures s JOIN Artists a ON s.sculptorID = a.artistID WHERE s.title ilike '%female%' ORDER BY a.lname NULLS LAST;
SELECT title FROM Paintings WHERE medium = 'painting' ORDER BY title ASC;
SELECT title FROM Paintings WHERE title IS NOT NULL ORDER BY title ASC;
SELECT title FROM Paintings WHERE medium = 'painting' ORDER BY LENGTH(title);
SELECT title FROM Paintings WHERE height_mm IS NOT NULL ORDER BY height_mm ASC;
SELECT sculptureID, title AS sculpture_title FROM Sculptures WHERE YEAR BETWEEN 1900 AND 1950 UNION SELECT paintingID, title AS painting_title FROM Paintings WHERE YEAR BETWEEN 1900 AND 1950 ORDER BY sculpture_title NULLS LAST;
SELECT sculptureID, title AS sculpture_title FROM Sculptures WHERE YEAR BETWEEN 1900 AND 1950 UNION SELECT paintingID, title AS painting_title FROM Paintings WHERE YEAR BETWEEN 1900 AND 1950 ORDER BY sculpture_title NULLS LAST;
SELECT sculptureID, title FROM Sculptures WHERE sculptorID = 222 UNION SELECT paintingID, title FROM Paintings WHERE painterID = 222;
SELECT sculptureID, title FROM Sculptures WHERE sculptorID = 222 UNION SELECT paintingID, title FROM Paintings WHERE painterID = 222;
SELECT Artists.title FROM Artists WHERE Artists.artistID IN (SELECT Paintings.painterID FROM Paintings WHERE Paintings.year < 1900 GROUP BY Painters.painterID ORDER BY COUNT(Paintings.paintingID) DESC LIMIT 1);
SELECT Artists.title FROM Artists WHERE Artists.artistID IN (SELECT Paintings.painterID FROM Paintings WHERE Paintings.year < 1900 GROUP BY Painters.painterID ORDER BY COUNT(Paintings.paintingID) DESC LIMIT 1);
SELECT sculptorID, COUNT(sculptureID) AS num_sculptures FROM Sculptures GROUP BY sculptorID ORDER BY num_sculptures DESC LIMIT 1;
SELECT sculptorID, COUNT(sculptureID) AS num_sculptures FROM Sculptures GROUP BY sculptorID ORDER BY num_sculptures DESC LIMIT 1;
SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800;
SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800;
SELECT location FROM Paintings WHERE YEAR < 1885 OR YEAR > 1930 GROUP BY location;
SELECT location FROM Paintings WHERE year < 1885 OR year > 1930 GROUP BY location;
SELECT Paintings.title FROM Paintings WHERE Painting.height_mm > 500 AND Painting.height_mm < 2000;
SELECT Paintings.title FROM Paintings WHERE Painting.height_mm > 500 AND Painting.height_mm < 2000;
SELECT location FROM Paintings WHERE medium = 'on panel' OR medium = 'on canvas';
SELECT location FROM Paintings WHERE medium = 'on panels' OR medium = 'on canvas';
SELECT location FROM Paintings WHERE year < 1885 AND year > 1930 GROUP BY location;
SELECT location FROM Paintings WHERE year < 1885 AND year > 1930 GROUP BY location;
SELECT sculptureID, AVG(height_mm) AS avg_height, AVG(width_mm) AS avg_width FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241' GROUP BY sculptureID;
SELECT sculptureID, AVG(height_mm) AS avg_height, AVG(width_mm) AS avg_width FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241' GROUP BY sculptureID;
SELECT medium, MAX(height_mm), MAX(paintingID) FROM Paintings WHERE year < 1900 GROUP BY medium;
SELECT sculptureID, MAX(height_mm) AS max_height FROM Paintings WHERE year < 1900 GROUP BY sculptureID ORDER BY max_height DESC LIMIT 1;
SELECT year, MAX(height_mm) AS max_height, MAX(width_mm) AS max_width FROM Paintings GROUP BY year ORDER BY year NULLS LAST;
SELECT year, MAX(height_mm) AS max_height, MAX(width_mm) AS max_width FROM Paintings GROUP BY year ORDER BY year NULLS LAST;
SELECT Artists.location, AVG(Paintings.height_mm), AVG(Paintings.width_mm) FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID GROUP BY Artists.location ORDER BY Artists.lname ASC NULLS LAST;
SELECT Artists.location, AVG(Paintings.height_mm), AVG(Paintings.width_mm) FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID GROUP BY Artists.location ORDER BY Artists.lname ASC;
SELECT Artists.title, COUNT(Paintings.paintingID) AS num_paintings FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY Artists.title HAVING COUNT(Paintings.paintingID) >= 2 ORDER BY Artists.title NULLS LAST;
SELECT Artists.title, COUNT(Paintings.paintingID) AS total_paintings FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY Artists.title HAVING COUNT(Paintings.paintingID) >= 2 ORDER BY total_paintings DESC NULLS LAST;
SELECT Artists.location, COUNT(Paintings.paintingID) AS num_paintings, SUM(CASE WHEN Paintings.year IS NOT NULL THEN 1 ELSE 0 END) AS total_years FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE COUNT(Paintings.paintingID) <= 3 GROUP BY Artists.location ORDER BY total_years DESC;
SELECT Artists.location, Artists.deathYear FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY Artists.location, Artists.deathYear HAVING COUNT(Paintings.paintingID) < 4 ORDER BY Artists.location NULLS LAST;
SELECT sculptorID FROM Sculptures WHERE sculptorID IN (SELECT MIN(s.sculptorID) AS min_sculptor_id FROM Sculptures s GROUP BY s.sculptorID)
SELECT sculptorID, MIN(deathYear) AS earliest_death_year FROM (SELECT s.sculptorID, COUNT(s.sculptureID) AS num_sculptures, lag(COUNT(s.sculptureID)) OVER (ORDER BY s.sculptorID) AS previous_num_sculptures FROM Sculptures s GROUP BY s.sculptorID ORDER BY num_sculptures ASC LIMIT 1) AS subquery JOIN Artists a ON a.artistID = subquery.sculptorID WHERE previous_num_sculptures IS NULL OR previous_num_sculptures > num_sculptures RETURNING a.deathYear;
SELECT Paintings.title, Painting.height_mm FROM Painting JOIN Gallery ON Painting.location = Gallery.gallery_id WHERE Gallery.gallery_id = 240 ORDER BY Painting.width_mm DESC LIMIT 1;
SELECT sculptureID, height_mm FROM Paintings WHERE location = 'Gallery 240' ORDER BY width_mm DESC LIMIT 1;
SELECT sculptureID FROM Sculptures WHERE YEAR > ALL (SELECT YEAR FROM Paintings WHERE LOCATION = 'Gallery 240');
SELECT sculptureID FROM Sculptures WHERE YEAR > (SELECT MIN(YEAR) FROM Paintings p WHERE p.location = 'gallery 240');
SELECT title FROM Paintings WHERE height_mm > ALL (SELECT height_mm FROM Paintings WHERE year > 1900);
SELECT sculptureID FROM Sculptures WHERE YEAR > 1900 ORDER BY height_mm DESC;
SELECT Artists.location, COUNT(Paintings.paintingID) AS num_paintings FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Paintings.medium = 'oil' GROUP BY Artists.location ORDER BY num_paintings DESC LIMIT 3;
SELECT Artists.location, COUNT(Paintings.paintingID) AS number_of_paintings FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Paintings.medium = 'oil' GROUP BY Artists.location ORDER BY number_of_paintings DESC NULLS LAST LIMIT 1;
SELECT Paintings.title, Painting.location, Painting.year FROM Painting WHERE Painting.medium = 'oil' ORDER BY Painting.year;
SELECT sculptureID, location, title FROM Sculptures WHERE medium = 'oil' ORDER BY year DESC;
SELECT Paintings.year, Painting.location, Painting.title FROM Painting WHERE Painting.height_mm > 1000 ORDER BY Painting.title NULLS LAST;
SELECT Paintings.year, Painting.location, Painting.title FROM Painting WHERE Painting.height_mm > 1000 ORDER BY Painting.title ASC;
SELECT Artists.location, Artists.fname, Artists.lname FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Artists.artistID NOT IN (SELECT sculptorID FROM Sculptures);
SELECT Artists.location, Artists.fname, Artists.lname FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Artists.artistID NOT IN (SELECT sculptorID FROM Sculptures);
SELECT location FROM Paintings WHERE year < 1885 AND mediumOn = 'no' GROUP BY location HAVING COUNT(*) > 1;
SELECT location FROM Paintings WHERE YEAR < 1885 AND MEDIUM!= 'canvas';
SELECT race.Road FROM race;
SELECT race.Road FROM race;
SELECT race.Winning_driver, race.Winning_team FROM race ORDER BY race.Winning_team ASC;
SELECT race.Road, d.Driver_Name, r.Winning_team FROM race JOIN driver d ON race.Driver_ID = d.Driver_ID ORDER BY r.Winning_team ASC;
SELECT race.Road, race.Winning_driver FROM race WHERE race.Pole_Position!= 'Junior Strous' ORDER BY race.Road NULLS LAST;
SELECT race.Road, race.Winning_driver FROM race JOIN driver ON race.Driver_ID = driver.Driver_ID WHERE LOWER(driver.Driver_Name)!= 'junior strous' ORDER BY race.Road NULLS LAST;
SELECT driver.Driver_ID, driver.Constructor FROM driver ORDER BY driver.Age ASC;
SELECT driver.Driver_ID, driver.Constructor, driver.Age FROM driver ORDER BY driver.Age ASC;
SELECT driver.Driver_ID, driver.Entrant FROM driver WHERE driver.Age >= 20 GROUP BY driver.Driver_ID, driver.Entrant ORDER BY driver.Driver_ID NULLS LAST;
SELECT driver.Driver_ID, drive.r Entrant FROM driver WHERE age >= 20 GROUP BY drive.r Entrant;
SELECT Driver_ID, MAX(Age) AS max_age, MIN(Age) AS min_age FROM driver GROUP BY Driver_ID;
SELECT Driver_ID, MAX(Age) AS max_age, MIN(Age) AS min_age FROM driver GROUP BY Driver_ID;
SELECT driver.Driver_ID, COUNT(DISTINCT driver.Engine) AS unique_engines FROM driver WHERE (driver.Age > 30 OR driver.Age < 20) GROUP BY driver.Driver_ID ORDER BY unique_engines DESC NULLS LAST;
SELECT driver.Driver_ID, COUNT(DISTINCT driver.Engine) AS distinct_engines FROM driver WHERE (driver.Age > 30 OR driver.Age < 20) GROUP BY driver.Driver_ID ORDER BY distinct_engines DESC NULLS LAST;
SELECT driver.Driver_ID, drive.r.Driver_Name FROM driver ORDER BY Driver_Name DESC;
SELECT driver.Driver_ID, driver.Driver_Name FROM driver ORDER BY driver.Driver_Name DESC;
SELECT driver.Driver_ID, driver.Driver_Name, race.Race_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID;
SELECT driver.Driver_ID, driver.Driver_Name, race.Race_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID;
SELECT driver.Driver_ID, COUNT(race.Road) AS race_count FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID ORDER BY race_count DESC NULLS LAST;
SELECT driver.Driver_ID, COUNT(race.Road) AS number_of_races FROM race JOIN driver ON race.Driver_ID = driver.Driver_ID GROUP BY driver.Driver_ID ORDER BY number_of_races DESC NULLS LAST;
SELECT driver.Driver_ID, driver.Age FROM (SELECT r.Driver_ID, COUNT(r.Road) AS race_count FROM race r GROUP BY r.Driver_ID ORDER BY race_count DESC LIMIT 1) AS rc JOIN driver ON rc.Driver_ID = driver.Driver_ID;
SELECT driver.Driver_ID, driver.Age FROM (SELECT r.Driver_ID, COUNT(r.Road) AS race_count FROM race r GROUP BY r.Driver_ID ORDER BY race_count DESC LIMIT 1) AS rc JOIN driver ON rc.Driver_ID = driver.Driver_ID;
SELECT driver.Driver_ID, driver.Driver_Name, COUNT(race.Road) AS race_count FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID, driver.Driver_Name HAVING COUNT(race.Road) >= 2 ORDER BY driver.Driver_ID NULLS LAST;
SELECT driver.Driver_ID, driver.Driver_Name, COUNT(race.Road) AS number_of_races FROM race JOIN driver ON race.Driver_ID = driver.Driver_ID GROUP BY driver.Driver_ID, driver.Driver_Name HAVING COUNT(race.Road) >= 2 ORDER BY driver.Driver_ID NULLS LAST;
SELECT race.Race_Name FROM race WHERE race.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Age >= 26) ORDER BY race.Race_Name NULLS LAST;
SELECT race.Race_Name FROM race WHERE race.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Age >= 26) ORDER BY race.Road NULLS LAST;
SELECT driver.Driver_ID, driver.Driver_Name FROM driver WHERE driver.Constructor!= 'Bugatti' ORDER BY driver.Driver_ID NULLS LAST;
SELECT driver.Driver_ID, driver.Driver_Name FROM driver WHERE driver.Constructor!= 'Bugatti' ORDER BY driver.Driver_ID NULLS LAST;
SELECT driver.Driver_ID, COUNT(DISTINCT driver.Constructor) AS Constructor_Count FROM driver GROUP BY driver.Driver_ID ORDER BY driver.Driver_ID NULLS LAST;
SELECT driver.Driver_ID, COUNT(*) AS number_of_drivers FROM driver GROUP BY Driver_ID ORDER BY number_of_drivers DESC NULLS LAST;
SELECT driver.Driver_ID, drive.race_name, COUNT(*) AS number_of_races FROM driver JOIN race ON driver.driver_id = race.driver_id GROUP BY drive.race_name, drive.race_name
SELECT driver.Driver_ID, driver.Engine FROM driver driver GROUP BY driver.Driver_ID, driver.Engine ORDER BY COUNT(drvier.Driver_ID) DESC LIMIT 1;
SELECT driver.Driver_ID, driver.Engine FROM driver GROUP BY driver.Driver_ID, driver.Engine HAVING COUNT(driver.Driver_ID) >= 2 ORDER BY driver.Driver_ID NULLS LAST;
SELECT driver.Driver_ID, driver.Engine FROM driver GROUP BY driver.Driver_ID, driver.Engine HAVING COUNT(driver.Driver_ID) >= 2 ORDER BY driver.Driver_ID NULLS LAST;
SELECT driver.Driver_ID, driveer.Driver_Name FROM driver WHERE NOT EXISTS (SELECT 1 FROM race WHERE race.Driver_ID = driver.Driver_ID)
SELECT driver.Driver_ID, driver.Driver_Name FROM driver LEFT JOIN race ON driver.Driver_ID = race.Driver_ID WHERE race.Driver_ID IS NULL;
SELECT driver.Driver_ID, driver.Constructor FROM driver WHERE (driver.Age < 20 OR driver.Age > 30) GROUP BY driver.Driver_ID, driver.Constructor HAVING COUNT(DISTINCT CASE WHEN driver.Age < 20 THEN driver.Driver_ID ELSE NULL END) > 0 AND COUNT(DISTINCT CASE WHEN driver.Age > 30 THEN driver.Driver_ID ELSE NULL END) > 0 ORDER BY driver.Driver_ID;
SELECT driver.Driver_ID, driver.Constructor FROM driver WHERE (driver.Age < 20 OR driver.Age > 30) GROUP BY driver.Driver_ID, driver.Constructor HAVING COUNT(DISTINCT CASE WHEN (driver.Age < 20 OR driver.Age > 30) THEN driver.Driver_ID END) >= 2 ORDER BY driver.Driver_ID NULLS LAST;
SELECT race.Winning_team FROM race WHERE race.Winning_team IN (SELECT race.Winning_team FROM race GROUP BY race.Winning_team HAVING COUNT(race.Road) > 1) ORDER BY race.Winning_team;
SELECT race.Winning_team FROM race WHERE race.Winning_team IN (SELECT race.Winning_team FROM race GROUP BY race.Winning_team HAVING COUNT(race.Road) > 1) ORDER BY race.Winning_team;
SELECT driver.Driver_ID, driver.Driver_Name FROM race JOIN driver ON race.Driver_ID = driver.Driver_ID WHERE race.Pole_Position ilike '%James%Hinchcliffe%' AND race.Pole_Position ilike '%Carl%Skerlong%' GROUP BY driver.Driver_ID, driver.Driver_Name ORDER BY driver.Driver_ID NULLS LAST;
SELECT driver.Driver_ID, driver.Driver_Name FROM race JOIN driver ON race.Driver_ID = driver.Driver_ID WHERE race.Pole_Position ilike '%James%Hinchcliffe%' AND race.Pole_Position ilike '%Carl%Skerlong%';
SELECT driver.Driver_ID, driver.Driver_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID WHERE race.Pole_Position NOT ILIKE '%James%Hinchcliffe%' ORDER BY driver.Driver_ID NULLS LAST;
SELECT driver.Driver_ID, driver.Driver_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID WHERE driver.Driver_Name!= 'James Hinchcliffe' AND race.Pole_Position = driver.Driver_Name;
SELECT countries.country_id FROM countries;
SELECT countries.country_id FROM countries;
SELECT languages.language_id, languages.name FROM languages ORDER BY languages.name ASC;
SELECT languages.language_id, languages.name FROM languages ORDER BY languages.name ASC;
SELECT languages.language_id, languages.name FROM languages WHERE languages.name ilike '%ish%' ORDER BY languages.language_id NULLS LAST;
SELECT languages.language_id, languages.name FROM languages WHERE languages.name ilike '%ish%' ORDER BY languages.language_id NULLS LAST;
SELECT country_id, name FROM countries ORDER BY overall_score DESC;
SELECT country_id, name FROM countries ORDER BY overall_score DESC;
SELECT country_id, AVG(justice_score) AS average_justice_score FROM countries GROUP BY country_id ORDER BY average_justice_score DESC NULLS LAST;
SELECT country_id, AVG(justice_score) AS average_justice_score FROM countries GROUP BY country_id ORDER BY average_justice_score DESC NULLS LAST;
SELECT country_id, MAX(health_score) AS max_health_score, MIN(health_score) AS min_health_score FROM countries WHERE name!= 'Norway' GROUP BY country_id;
SELECT country_id, MAX(health_score) AS max_health_score, MIN(health_score) AS min_health_score FROM countries WHERE name!= 'Norway' GROUP BY country_id ORDER BY country_id NULLS LAST;
SELECT language_id FROM official_languages WHERE language_id IN (SELECT DISTINCT language_id FROM official_languages) GROUP BY language_id ORDER BY language_id NULLS LAST;
SELECT language_id FROM official_languages WHERE language_id IN (SELECT DISTINCT language_id FROM official_languages) GROUP BY language_id;
SELECT country_id, name FROM countries ORDER BY education_score DESC;
SELECT country_id, name FROM countries ORDER BY education_score DESC;
SELECT countries.country_id, countries.name FROM countries ORDER BY countries.politics_score DESC NULLS LAST LIMIT 1;
SELECT country_id FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries);
SELECT countries.country_id, countries.name AS country_name, languages.name AS language_name FROM countries JOIN official_languages ON countries.id = official_languages.country_id JOIN languages ON official_languages.language_id = languages.id;
SELECT countries.country_id, countries.name AS country_name, languages.name AS language_name FROM countries JOIN official_languages ON countries.id = official_languages.country_id JOIN languages ON official_languages.language_id = languages.id;
SELECT languages.language_id, languages.name AS language_name, COUNT(official_languages.country_id) AS country_count FROM official_languages JOIN languages ON official_languages.language_id = languages.id GROUP BY languages. name ORDER BY country_count DESC NULLS LAST;
SELECT languages.language_id, languages.name, COUNT(official_languages.country_id) AS country_count FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.id, languages.name ORDER BY country_count DESC NULLS LAST;
SELECT languages.language_id, languages.name FROM languages JOIN (SELECT official_languages.language_id, COUNT(official_languages.country_id) AS country_count FROM official_languages GROUP BY official_languages.language_id ORDER BY country_count DESC LIMIT 1) AS max_country_count ON languages.id = max_country_count.language_id;
SELECT languages.language_id, languages.name FROM languages JOIN (SELECT official_languages.language_id, COUNT(*) AS frequency FROM official_languages GROUP BY official_languages.language_id ORDER BY frequency DESC LIMIT 1) AS max_frequency ON languages.id = max_frequency.language_id;
SELECT languages.language_id, languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.id, languages.name HAVING COUNT(official_languages.country_id) >= 2 ORDER BY languages.name NULLS LAST;
SELECT languages.language_id, languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.id, languages.name HAVING COUNT(official_languages.country_id) >= 2 ORDER BY languages.name NULLS LAST;
SELECT country_id, AVG(overall_score) AS avg_overall_score FROM countries JOIN official_languages ol ON countries.id = ol.country_id JOIN languages l ON ol.language_id = l.id WHERE LOWER(l.name) = 'english' GROUP BY country_id;
SELECT country_id, AVG(overall_score) AS average_overall_score FROM countries JOIN official_languages ol ON countries.id = ol.country_id WHERE (SELECT name FROM languages WHERE id = ol.language_id) = 'English' GROUP BY country_id;
SELECT languages.language_id, languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.id, languages.name ORDER BY COUNT(official_languages.country_id) DESC LIMIT 3;
SELECT languages.language_id, languages.name, COUNT(official_languages.country_id) AS country_count FROM official_languages JOIN languages ON official_languages.language_id = languages.id GROUP BY languages.language_id, languages.name ORDER BY country_count DESC LIMIT 3;
SELECT languages.language_id, languages.name, AVG(countries.overall_score) AS avg_overall_score FROM official_languages JOIN languages ON official_languages.language_id = languages.id JOIN countries ON official_languages.country_id = countries.id GROUP BY languages. language_id, languages.name ORDER BY avg_overall_score DESC NULLS LAST;
SELECT languages.language_id, languages.name, AVG(countries.overall_score) AS avg_overall_score FROM official_languages JOIN languages ON official_languages.language_id = languages.id JOIN countries ON official_languages.country_id = countries.id GROUP BY languages.language_id, languages.name ORDER BY avg_overall_score DESC NULLS LAST;
SELECT country_id FROM countries WHERE id = (SELECT MAX(ol.country_id) FROM official_languages ol GROUP BY ol.country_id ORDER BY COUNT(ol.language_id) DESC LIMIT 1);
SELECT country_id, COUNT(*) AS num_of_official_languages FROM official_languages GROUP BY country_id ORDER BY num_of_official_languages DESC LIMIT 1;
SELECT languages.language_id, languages.name FROM languages LEFT JOIN official_languages ON languages.id = official_languages.language_id WHERE official_languages.language_id IS NULL;
SELECT languages.language_id, languages.name FROM languages LEFT JOIN official_languages ON languages.id = official_languages.language_id WHERE official_languages.language_id IS NULL;
SELECT countries.country_id, countries.name FROM countries LEFT JOIN official_languages ON countries.id = official_languages.country_id WHERE official_languages.country_id IS NULL;
SELECT country_id FROM countries WHERE country_id NOT IN (SELECT country_id FROM official_languages)
SELECT languages.language_id, languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id WHERE languages.id IN (SELECT official_languages.language_id FROM official_languages JOIN countries ON official_languages.country_id = countries.id WHERE countries.overall_score > 95) AND languages.id IN (SELECT official_languages.language_id FROM official_languages JOIN countries ON official_languages.country_id = countries.id WHERE countries.overall_score < 90);
SELECT languages.language_id, languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id WHERE languages.id IN (SELECT official_languages.language_id FROM official_languages JOIN countries ON official_languages.country_id = countries.id WHERE countries.overall_score > 95 UNION SELECT official_languages.language_id FROM official_languages JOIN countries ON official_languages.country_id = countries.id WHERE countries.overall_score < 90) GROUP BY languages.id, languages.name ORDER BY languages.id NULLS LAST;
SELECT Addresses.search_string FROM User_Searches;
SELECT Addresses.user_id, Addresses.country, Addresses.town_city FROM Users JOIN Addresses ON Users.user_address_id = Addresses.address_id;
SELECT user_id, p.property_name, a.county_state_province FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id JOIN Addresses a ON p.property_address_id = a.address_id;
SELECT user_id, p.property_name, ad.county_state_province FROM Users AS u JOIN Properties AS p ON u.user_id = p.owner_user_id JOIN Addresses AS ad ON p.property_address_id = ad.address_id;
SELECT Features.search_string FROM Features WHERE FeatureName = 'Rooftop'
SELECT Features.search_string FROM Features WHERE Features.feature_name = 'Rooftop'
SELECT Features.search_string FROM Features WHERE Features.feature_name = (SELECT MAX(COUNT(Property_Features.feature_id)) AS max_count FROM Property_Features GROUP BY Property_Features.feature_id);
SELECT Features.search_string FROM Features WHERE Features.feature_name = (SELECT Property_Features.feature_id FROM Property_Features GROUP BY Property_Features.feature_id ORDER BY COUNT(Property_Features.feature_id) DESC LIMIT 1);
SELECT search_string FROM User_Searches WHERE search_string LIKE '%rooms%';
SELECT search_string FROM User_Searches WHERE search_string = (SELECT MIN(room_count) FROM Properties);
SELECT user_id FROM Properties WHERE (parking_lots = '1' OR garage_yn = '1') GROUP BY user_id;
SELECT user_id FROM Properties WHERE (parking_lots = '1' OR garage_yn = '1') GROUP BY user_id;
SELECT user_id, age_category_code FROM Users WHERE LOWER(other_user_details) LIKE '%mother%' ORDER BY user_id;
SELECT user_id, age_category_code FROM Users WHERE LOWER(other_user_details) LIKE '%mother%' ORDER BY user_id;
SELECT user_id, COUNT(*) AS property_count FROM Properties GROUP BY owner_user_id ORDER BY property_count DESC LIMIT 1;
SELECT user_id, COUNT(*) AS property_count FROM Properties GROUP BY owner_user_id ORDER BY property_count DESC LIMIT 1;
SELECT search_string FROM User_Searches WHERE search_string LIKE '%garden%'
SELECT search_string FROM User_Searches WHERE search_string LIKE '%garden%' LIMIT 1;
SELECT Addresses.search_string FROM Addresses WHERE Address IN (SELECT Property_Address_ID FROM Properties p JOIN Property_Features pf ON p.Property_ID = pf.Property_ID WHERE LOWER(pf.feature_name) LIKE '%swimming%pool%');
SELECT Addresses.search_string FROM Addresses WHERE Address IN (SELECT p.property_address_id FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id WHERE LOWER(pf.feature_name) LIKE '%swimming pool%');
SELECT Property_Features.search_seq, Properties.vendor_requested_price FROM Properties JOIN Property_Features ON Properties.property_id = Property_Features.property_id WHERE Properties.vendor_requested_price IS NOT NULL ORDER BY Properties.vendor_requested_price ASC LIMIT 1;
SELECT Property_Features.search_seq, Properties.vendor_requested_price FROM Properties JOIN Property_Features ON Properties.property_id = Property_Features.property_id WHERE Properties.vendor_requested_price IS NOT NULL ORDER BY Properties.vendor_requested_price ASC LIMIT 1;
SELECT search_string, AVG(CAST(room_count AS INTEGER)) AS avg_rooms FROM User_Searches JOIN Properties ON CAST(User_Searches.search_string AS INTEGER) = Properties.property_id GROUP BY search_string;
SELECT search_string FROM User_Searches WHERE search_string LIKE '%rooms%';
SELECT Rooms.search_seq, COUNT(DISTINCT Rooms.room_size) AS distinct_room_sizes FROM Rooms GROUP BY Rooms.search_seq;
SELECT Rooms.search_seq, COUNT(DISTINCT Rooms.room_size) AS distinct_room_sizes FROM Rooms GROUP BY Rooms.search_seq ORDER BY Rooms.search_seq;
SELECT user_id, COUNT(search_seq) AS number_of_searches, GROUP_CONCAT(search_string ORDER BY search_datetime SEPARATOR ', ') AS all_search_strings FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) >= 2 ORDER BY user_id;
SELECT user_id, COUNT(search_seq) AS number_of_searches FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) >= 2 ORDER BY user_id;
SELECT user_id, MAX(search_datetime) AS last_search FROM User_Searches GROUP BY user_id;
SELECT user_id, MAX(search_datetime) AS latest_search FROM User_Searches GROUP BY user_id;
SELECT user_id, search_datetime, search_string FROM User_Searches ORDER BY search_string DESC;
SELECT user_id, search_string, search_datetime FROM User_Searches ORDER BY search_string DESC;
SELECT Addresses.search_string FROM User_Searches WHERE user_id IN (SELECT p.owner_user_id FROM Properties p GROUP BY p.owner_user_id HAVING COUNT(p.property_id) > 2);
SELECT Addresses.search_string FROM User_Searches WHERE user_id IN (SELECT p.owner_user_id FROM Properties p GROUP BY p.owner_user_id HAVING COUNT(p.property_id) > 2);
SELECT user_id, COUNT(*) AS number_of_searches FROM User_Searches GROUP BY user_id HAVING COUNT(*) = 1
SELECT user_id, age_category_code FROM Users WHERE user_id IN (SELECT user_id FROM User_SearcheS GROUP BY user_id HAVING COUNT(search_seq) = 1);
SELECT user_id, age_category_description FROM Users JOIN User_Searches ON Users.user_id = User_Searches.user_id WHERE User_Searches.search_seq = 1;
SELECT user_id, age_category_code FROM Users JOIN User_Searches ON Users.user_id = User_Searches.user_id ORDER BY User_Searches.search_datetime ASC LIMIT 1;
SELECT user_id, login_name FROM Users WHERE age_category_code = (SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description = 'Senior Citizen') ORDER BY first_name;
SELECT user_id, login_name FROM Users WHERE age_category_code = (SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description = 'Senior Citizen') ORDER BY first_name;
SELECT user_id, COUNT(search_seq) AS total_searches FROM User_Searches us JOIN Users u ON us.user_id = u.user_id WHERE LOWER(u.is_buyer) = 'y' GROUP BY u.user_id ORDER BY total_searches DESC;
SELECT user_id, COUNT(search_seq) AS search_count FROM User_Searches us JOIN Users u ON us.user_id = u.user_id WHERE LOWER(u.is_buyer) = 'y' GROUP BY user_id ORDER BY search_count DESC;
SELECT user_id, date_registered FROM Users WHERE LOWER(login_name) = 'ratione';
SELECT user_id FROM Users WHERE LOWER(login_name) = 'ratione';
SELECT user_id, first_name, middle_name, last_name, login_name FROM Users WHERE LOWER(is_seller) = '1'
SELECT user_id, first_name, middle_name, last_name, login_name FROM Users WHERE LOWER(is_seller) = 'y' ORDER BY user_id;
SELECT user_id, line_1_number_building || ','|| line_2_number_street || ','|| town_city AS address FROM Users JOIN Addresses ON user_address_id = address_id WHERE age_category_code = (SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description = 'Senior Citizen')
SELECT user_id, line_1_number_building, line_2_number_street, town_city FROM Users JOIN Addresses ON user_address_id = address_id WHERE age_category_code IN (SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description = 'Senior') ORDER BY usertype;
SELECT Property_Features.user_id, COUNT(DISTINCT Property_Features.property_id) AS property_count FROM Property_Features GROUP BY Property_Features.user_id HAVING COUNT(DISTINCT Property_Features.feature_id) >= 2 ORDER BY property_count DESC NULLS LAST;
SELECT Property_Features.user_id, COUNT(DISTINCT Property_Features.property_id) AS property_count FROM Property_Features GROUP BY Property_Features.user_id HAVING COUNT(DISTINCT Property_Features.feature_id) >= 2 ORDER BY property_count DESC NULLS LAST;
SELECT user_id, COUNT(*) AS photo_count FROM Property_Photos GROUP BY user_id;
SELECT user_id, COUNT(*) AS photo_count FROM Property_Photos GROUP BY user_id;
SELECT user_id, COUNT(p.photo_id) AS photo_count FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id GROUP BY u.user_id
SELECT user_id, COUNT(p.photo_id) AS photo_count FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id WHERE p.property_id IN (SELECT pp.property_id FROM Property_Photos pp) GROUP BY u.user_id ORDER BY photo_count DESC;
SELECT user_id, SUM(price_max) AS total_max_price FROM Properties p JOIN Users u ON p.owner_user_id = u.user_id WHERE user_category_code IN ('single_mother','student') GROUP BY user_id;
SELECT user_id, MAX(p.price_max) AS max_price FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id WHERE (u.user_category_code ='single_mother' OR u.user_category_code ='student') GROUP BY u.user_id ORDER BY max_price DESC;
SELECT user_id, p.property_name, us.datestamp FROM User_Property_History AS uph JOIN Users AS u ON uph.user_id = u.user_id JOIN Properties AS p ON uph.property_id = p.property_id ORDER BY uph.datestamp;
SELECT user_id, property_id, datestamp, property_name FROM User_Property_History uph JOIN Properties p ON uph.property_id = p.property_id ORDER BY datestamp;
SELECT Rooms.user_id, COUNT(*) AS total_rooms FROM Rooms JOIN Properties ON Rooms.property_id = Properties.property_id GROUP BY user_id ORDER BY total_rooms DESC LIMIT 1;
SELECT Rooms.user_id, COUNT(*) AS total_rooms FROM Rooms JOIN Properties ON Rooms.property_id = Properties.property_id GROUP BY user_id ORDER BY total_rooms DESC LIMIT 1;
SELECT Rooms.user_id, Users.age_category_code, Ref_Age_Categories.age_category_description FROM Users JOIN Ref_Age_Categories ON Users.age_category_code = Ref_Age_Categories.age_category_code WHERE Users.age_category_code = 'Over 60'
SELECT Rooms.user_id, Users.age_category_code, Ref_Age_Categories.age_category_description FROM Users JOIN Ref_Age_Categories ON Users.age_category_code = Ref_Age_Categories.age_category_code WHERE Ref_Age_Categories.age_category_description LIKE '%Over 60%'
SELECT Rooms.search_string, COUNT(*) AS number_of_rooms FROM Rooms GROUP BY Room_size
SELECT Rooms.search_seq, COUNT(Rooms.room_size) AS room_count FROM Rooms GROUP BY Rooms.room_size ORDER BY Rooms.room_size;
SELECT user_id FROM Users WHERE LOWER(first_name) = 'robbie';
SELECT user_id FROM Users WHERE LOWER(first_name) = 'robbie';
SELECT user_id, first_name, middle_name, last_name FROM Users WHERE user_id IN (SELECT owner_user_id FROM Properties);
SELECT user_id, concat(first_name,'', middle_name,'', last_name) AS full_name FROM Users WHERE user_id IN (SELECT owner_user_id FROM Properties);
SELECT user_id, search_string FROM User_Searches WHERE user_id NOT IN (SELECT owner_user_id FROM Properties);
SELECT user_id, search_string FROM User_Searches WHERE user_id NOT IN (SELECT owner_user_id FROM Properties);
SELECT user_id, last_name FROM Users WHERE user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) >= 2) AND user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) <= 2);
SELECT user_id, last_name FROM Users WHERE user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) <= 2) AND user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) >= 2);
SELECT bike_id FROM bike WHERE weight > 780;
SELECT bike_id, product_name, weight FROM bike ORDER BY price ASC;
SELECT cyclist.cyclist_id, cyclist.name, cyclist.nation FROM cyclist
SELECT bike_id, MAX(weight) AS max_weight, MIN(weight) AS min_weight FROM bike GROUP BY bike_id;
SELECT bike_id, AVG(b.price) AS average_price FROM bike b WHERE LOWER(b.material) = 'carbon cc' GROUP BY bike_id;
SELECT cyclist_id, name, result FROM cyclist WHERE nation!= 'Russia';
SELECT bike_id, product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id WHERE purchase_year > 2015 GROUP BY bike_id, product_name;
SELECT bike_id, product_name FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes GROUP BY bike_id HAVING COUNT(cyclist_id) >= 4);
SELECT cyclist_id, COUNT(bike_id) AS bike_count FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY bike_count DESC LIMIT 1;
SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE nation = 'Russia' OR nation = 'Great Britain') GROUP BY bike_id;
SELECT cyclist.cyclist_id, COUNT(DISTINCT cyclist.heat) AS number_of_heat_levels FROM cyclist GROUP BY cyclist.cyclist_id ORDER BY number_of_heat_levels DESC NULLS LAST;
SELECT cyclist_id FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year > 2015)
SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE result < 241.558) ORDER BY bike_id;
SELECT bike_id, product_name, price FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id WHERE (SELECT id FROM cyclist WHERE name ilike '%Bradley%Wiggins%') IN (SELECT cyclist_id FROM cyclists_own_bikes) AND (SELECT id FROM cyclist WHERE name ilike '%Antonio%Tauler%') IN (SELECT cyclist_id FROM cyclists_own_bikes);
SELECT cyclist_id, name, nation, result FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE bike_id IN (SELECT id FROM bike WHERE product_name = 'racing bike'))
SELECT bike_id, product_name FROM bike WHERE material ilike '%fiber%' ORDER BY bike_id NULLS LAST;
SELECT cyclist_id, COUNT(bike_id) AS bike_count FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY cyclist_id NULLS LAST;
SELECT goods.CustomerId, MAX(goods.Price) AS max_price, goods.Flavor FROM goods JOIN items ON goods.Id = items.Item WHERE goods.Food = 'cake' GROUP BY goods.CustomerId, goods.Flavor ORDER BY max_price DESC LIMIT 1;
SELECT goods.ReceiptNumber, goods.Flavor FROM goods JOIN items ON goods.Id = items.Item WHERE goods.Food = 'cake' ORDER BY goods.Price DESC LIMIT 1;
SELECT goods.CustomerId, goods.Flavor, goods.Price FROM goods JOIN items ON goods.Id = items.Item WHERE goods.Food = 'cookie' ORDER BY goods.Price ASC LIMIT 1;
SELECT goods.ReceiptNumber, goods.Flavor FROM goods JOIN items ON goods.Id = items.Item WHERE goods.Price = (SELECT MIN(good_price) FROM goods);
SELECT goods.ReceiptNumber FROM items WHERE items.Item IN (SELECT id FROM goods WHERE goods.Flavor = 'apple')
SELECT goods.ReceiptNumber FROM items WHERE items.Item = 'apple'
SELECT goods.ReceiptNumber FROM items WHERE items.Item IN (SELECT id FROM goods WHERE price < 3);
SELECT goods.ReceiptNumber FROM receipts WHERE receipts.ReceiptNumber IN (SELECT items.Item FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Price < 3);
SELECT receipts.CustomerId FROM receipts WHERE EXISTS (SELECT 1 FROM items i JOIN goods g ON i.Item = g.Id WHERE i.Receipt = receipts.ReceiptNumber AND g.Flavor ilike '%lemon%' AND g.Food = 'cake') GROUP BY receipts.CustomerId;
SELECT receipts.CustomerId FROM receipts WHERE receipts.CustomerId IN (SELECT items.Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Flavor = 'lemon') GROUP BY receipts.CustomerId;
SELECT goods.CustomerId, COUNT(DISTINCT goodss.ReceiptNumber) AS number_of_receipts FROM items JOIN goods ON items.Item = goods.Id GROUP BY goodss.CustomerId ORDER BY number_of_receipts DESC NULLS LAST;
SELECT goods.ReceiptNumber, COUNT(DISTINCT receipts.CustomerId) AS customer_count FROM items JOIN goods ON items.Item = goods.Id JOIN receipts ON items.Receipt = receipts.ReceiptNumber GROUP BY good.RECEIPTNUMBER ORDER BY customer_count DESC NULLS LAST;
SELECT customers.CustomerId FROM receipts WHERE CustomerId IN (SELECT ReceiptNumber FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'bakery') GROUP BY CustomerId HAVING COUNT(ReceiptNumber) >= 15;
SELECT receipts.CustomerId FROM receipts WHERE receipts.CustomerId IN (SELECT receipts.CustomerId FROM receipts GROUP BY receipts.CustomerId HAVING COUNT(receipts.ReceiptNumber) >= 15);
SELECT customers.CustomerId, customers.LastName FROM receipts JOIN customers ON receipts.CustomerId = customers.Id WHERE receipts.ReceiptNumber IN (SELECT receipt FROM items GROUP BY receipt HAVING COUNT(*) > 10) ORDER BY customers.LastName NULLS LAST;
SELECT customers.CustomerId, customers.LastName FROM receipts JOIN customers ON receipts.CustomerId = customers.Id GROUP BY customers.CustomerId, customers.LastName HAVING COUNT(receipts.ReceiptNumber) > 10 ORDER BY customers.LastName NULLS LAST;
SELECT goods.CustomerId FROM items WHERE item = 'cake' GROUP BY good.Custome
SELECT goods.CustomerId FROM items WHERE item = 'cake'
SELECT goods.CustomerId FROM goods WHERE goods.Food = 'Croissant'
SELECT goods.CustomerId FROM goods WHERE goods.Food = 'Croissant'
SELECT items.ReceiptNumber, items.Item FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt WHERE receipts.CustomerId = 15 GROUP BY receipts.ReceiptNumber, items.Item;
SELECT items.ReceiptNumber, items.Item FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt WHERE receipts.CustomerId = 15 GROUP BY receipts.ReceiptNumber, items.Item;
SELECT goods.ReceiptNumber, AVG(goods.Price) AS average_price, MAX(goods.Price) AS max_price, MIN(goods.Price) AS min_price FROM items JOIN goods ON items.Item = goods.Id GROUP BY ReceiptNumber;
SELECT goods.ReceiptNumber, AVG(goods.Price) AS average_price, MIN(goods.Price) AS min_price, MAX(goods.Price) AS max_price FROM items JOIN goods ON items.Item = goods.Id GROUP BY ReceiptNumber;
SELECT receipts.ReceiptNumber FROM receipts WHERE EXISTS (SELECT 1 FROM items i JOIN goods g ON i.Item = g.Id WHERE i.Receipt = receipts.ReceiptNumber AND g.Food = 'Cake') AND EXISTS (SELECT 1 FROM items i JOIN goods g ON i.Item = g.Id WHERE i.Receipt = receipts.ReceiptNumber AND g.Food = 'Cookie');
SELECT receipts.ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT items.Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'cake' AND goods.Food = 'cookies') GROUP BY receipts.ReceiptNumber;
SELECT receipts.ReceiptNumber FROM receipts WHERE receipts.CustomerId IN (SELECT id FROM customers WHERE LOWER(lastname) = 'logan') AND items.Item = 'Croissant';
SELECT receipts.ReceiptNumber FROM receipts WHERE receipts.CustomerId IN (SELECT c.Id FROM customers c WHERE LOWER(c.LastName) = 'logan') AND items.Item = 'croissant';
SELECT receipts.ReceiptNumber, receipts.Date FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt WHERE items.Item IN (SELECT MAX(good.Price) AS max_price_item FROM goods good GROUP BY good.Id);
SELECT receipts.ReceiptNumber, MAX(goods.Price) AS max_price FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id GROUP BY receipts.ReceiptNumber ORDER BY max_price DESC LIMIT 1;
SELECT items.ReceiptNumber, COUNT(*) AS quantity FROM items GROUP BY ReceiptNumber ORDER BY quantity ASC LIMIT 1;
SELECT items.ReceiptNumber, COUNT(*) AS quantity FROM items GROUP BY ReceiptNumber ORDER BY quantity ASC LIMIT 1;
SELECT goods.ReceiptNumber, COUNT(*) AS number_of_goods FROM items JOIN goods ON items.Item = goods.Id GROUP BY goods.Food ORDER BY number_of_goods DESC NULLS LAST;
SELECT goods.CustomerId, COUNT(goods.Id) AS total_goods FROM goods JOIN items ON goods.Id = items.Item GROUP BY goods.CustomerId ORDER BY total_goods DESC NULLS LAST;
SELECT goods.ReceiptNumber, AVG(goods.Price) AS Average_Price FROM items JOIN goods ON items.Item = goods.Id GROUP BY goods.Food;
SELECT goods.ReceiptNumber, AVG(goods.Price) AS Average_Price FROM items JOIN goods ON items.Item = goods.Id GROUP BY ReceiptNumber ORDER BY ReceiptNumber NULLS LAST;
SELECT goods.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 1;
SELECT goods.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 1;
SELECT goods.CustomerId FROM goods WHERE goods.Price > 10 AND goods.Food = 'cake'
SELECT goods.CustomerId FROM goods WHERE goods.Flavor = 'cake' AND goods.Price > 10;
SELECT goods.ReceiptNumber, SUM(goods.Price) AS total_price FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt GROUP BY receipts.ReceiptNumber;
SELECT goods.ReceiptNumber, goods.Item, goods.Price FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Price < (SELECT AVG(good_price) FROM goods);
SELECT goods.ReceiptNumber FROM receipts WHERE EXISTS (SELECT 1 FROM items i JOIN goods ON i.Item = goods.Id WHERE goods.Flavor = 'Tart' AND goods.Price < 5) ORDER BY goods.ReceiptNumber NULLS LAST;
SELECT goods.ReceiptNumber FROM items WHERE items.Item IN (SELECT id FROM goods WHERE price < ANY (SELECT price FROM goods WHERE food = 'Tart')) GROUP BY items.ReceiptNumber;
SELECT receipts.ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT items.Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Price > 13.00 GROUP BY items.Receipt)
SELECT items.ReceiptNumber FROM items WHERE items.Item IN (SELECT id FROM goods WHERE price > 13.00) GROUP BY items.ReceiptNumber;
SELECT receipts.Date FROM receipts WHERE receipts.CustomerId IN (SELECT items.Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Price > 15.00);
SELECT receipts.Date FROM receipts WHERE receipts.CustomerId IN (SELECT items.Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Price > 15.00);
SELECT goods.ReceiptNumber FROM items WHERE item LIKE '%APP%'
SELECT goods.ReceiptNumber FROM items WHERE item LIKE '%app%'
SELECT goods.ReceiptNumber, goods.Price FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Id LIKE '%70%' ORDER BY receipts.ReceiptNumber NULLS LAST;
SELECT goods.ReceiptNumber, goods.Price FROM items JOIN goods ON items.Item = goods.Id WHERE goods. ReceiptNumber LIKE '%70%' ORDER BY goods. ReceiptNumber NULLS LAST;
SELECT customers.CustomerId, customers.LastName FROM customers ORDER BY customers.LastName ASC;
SELECT customers.CustomerId, customers.LastName FROM customers ORDER BY customers.LastName ASC;
SELECT goods.ReceiptNumber FROM receipts;
SELECT goods.ReceiptNumber FROM items WHERE item IN (SELECT DISTINCT id FROM goods ORDER BY id NULLS LAST);
SELECT receipts.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 12 UNION SELECT items.Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE LOWER(goods.Flavor) LIKE '%apple%' AND LOWER(goods.Food) LIKE '%pie%';
SELECT receipts.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 12 UNION SELECT items.Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE LOWER(goods.Flavor) LIKE '%apple%' AND LOWER(goods.Food) LIKE '%pie%';
SELECT receipts.ReceiptNumber, MAX(reciepts.Date) AS LatestDate FROM receipts reciepts GROUP BY ReceiptNumber ORDER BY LatestDate DESC;
SELECT receipts.ReceiptNumber, MAX(reciepts.Date) AS LatestDate FROM receipts reciepts GROUP BY ReceiptNumber ORDER BY LatestDate DESC LIMIT 1;
SELECT receipts.ReceiptNumber FROM receipts WHERE receipts.Date = (SELECT MIN(receipts.Date) FROM receipts) UNION SELECT items.Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Price > 10;
SELECT receipts.ReceiptNumber FROM receipts WHERE receipts.Date = (SELECT MIN(Date) FROM receipts);
SELECT goods.ReceiptNumber FROM goods WHERE goods.Price BETWEEN 3 AND 7;
SELECT goods.ReceiptNumber FROM goods WHERE goods.Price BETWEEN 3 AND 7;
SELECT customers.CustomerId, customers.FirstName, customers.LastName FROM receipts JOIN customers ON receipts.CustomerId = customers.Id ORDER BY receipts.Date ASC LIMIT 1;
SELECT customers.CustomerId, customers.FirstName, customers.LastName FROM receipts JOIN customers ON receipts.CustomerId = customers.Id ORDER BY receipts.Date ASC LIMIT 1;
SELECT goods.CustomerId, AVG(goods.Price) AS average_price FROM goods JOIN items ON goods.Id = items.Item WHERE LOWER(goods.Flavor) IN ('blackberry', 'blueberry') GROUP BY goods.CustomerId;
SELECT goods.ReceiptNumber, AVG(goods.Price) AS average_price FROM goods JOIN items ON goods.Id = items.Item WHERE LOWER(goods.Flavor) IN ('blackberry', 'blueberry') GROUP BY goods.ReceiptNumber;
SELECT goods.CustomerId, MIN(goods.Price) AS min_price FROM goods JOIN items ON goods.Id = items.Item WHERE LOWER(goods.Flavor) LIKE '%cheese%' GROUP BY good.CustomerId;
SELECT goods.ReceiptNumber FROM items WHERE items.Item IN (SELECT id FROM goods WHERE goods.Flavor = 'cheese') ORDER BY items.ReceiptNumber ASC LIMIT 1;
SELECT goods.ReceiptNumber, MAX(goods.Price), MIN(goods.Price), AVG(goods.Price) FROM items JOIN goods ON items.Item = goods.Id GROUP BY goods.Flavor ORDER BY goods.Flavor;
SELECT goods.ReceiptNumber, MAX(goods.Price), MIN(goods.Price), AVG(goods.Price) FROM items JOIN goods ON items.Item = goods.Id GROUP BY goods.Flavor ORDER BY goods.Flavor;
SELECT goods.CustomerId, MIN(goods.Price) AS min_price, MAX(goods.Price) AS max_price FROM goods JOIN items ON goods.Id = items.Item GROUP BY goods.CustomerId ORDER BY goods.CustomerId NULLS LAST;
SELECT goods.CustomerId, MIN(goods.Price) AS min_price, MAX(goods.Price) AS max_price FROM goods JOIN items ON goods.Id = items.Item GROUP BY good.Food ORDER BY good.Food;
SELECT receipts.Date, COUNT(reciepts.ReceiptNumber) AS number_of_receipts FROM receipts GROUP BY receipts.Date ORDER BY number_of_receipts DESC LIMIT 3;
SELECT receipts.Date, COUNT(*) AS number_of_receipts FROM receipts GROUP BY receipts.Date ORDER BY number_of_receipts DESC LIMIT 3;
SELECT customers.CustomerId, COUNT(receipts.ReceiptNumber) AS NumberOfReceipts FROM receipts JOIN customers ON receipts.CustomerId = customers.Id GROUP BY customers.CustomerId ORDER BY NumberOfReceipts DESC LIMIT 1;
SELECT receipts.CustomerId, COUNT(items.Receipt) AS purchase_count FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt GROUP BY receipts.CustomerId ORDER BY purchase_count DESC LIMIT 1;
SELECT receipts.Date, COUNT(DISTINCT reiptions.CustomerId) AS unique_customers FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt GROUP BY receipts.Date ORDER BY receipts.Date NULLS LAST;
SELECT receipts.Date, COUNT(DISTINCT reiptions.CustomerId) AS number_of_customers FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt GROUP BY receipts.Date ORDER BY receipts.Date NULLS LAST;
SELECT customers.CustomerId, customers.FirstName, customers.LastName FROM customers JOIN receipts ON customers.Id = receipts.CustomerId JOIN items ON receipts.ReceiptNumber = items.Receipt WHERE items.Item = 'Tart' AND items.Flavor = 'Apple';
SELECT customers.CustomerId, customers.FirstName, customers.LastName FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt WHERE items.Item = 'Tart' AND items.Flavor = 'Apple';
SELECT goods.ReceiptNumber FROM items WHERE item = 'Cookie' AND ordinal IN (SELECT receipt, MAX(ordinal) AS max_ordinal FROM items WHERE item = 'Croissant' GROUP BY receipt);
SELECT goods.ReceiptNumber FROM items WHERE item = 'cooke' AND price < (SELECT MIN(price) FROM goods WHERE food = 'croissant');
SELECT goods.ReceiptNumber FROM items WHERE items.Item = 'Tart' GROUP BY items.ReceiptNumber HAVING AVG(goods.Price) <= 0.5;
SELECT goods.ReceiptNumber FROM goods WHERE goods.Food = 'Tart' GROUP BY goods.ReceiptNumber HAVING AVG(goods.Price) <= ALL (SELECT price FROM goods WHERE goods.Food = 'Cake')
SELECT goods.ReceiptNumber FROM receipts WHERE receipts.ReceiptNumber IN (SELECT items.Item FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Price > 2 * (SELECT AVG(good_price) FROM goods)) ORDER BY receipts.ReceiptNumber NULLS LAST;
SELECT goods.ReceiptNumber FROM receipts WHERE receipts.ReceiptNumber IN (SELECT items.Item FROM items JOIN goods ON items.Item = goods.Id GROUP BY items.Item HAVING SUM(goods.Price) > 2 * AVG(goods.Price))
SELECT goods.ReceiptNumber, items.Item, goods.Flavor, goods.Food FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt ORDER BY receipts.ReceiptNumber;
SELECT goods.ReceiptNumber, goods.Item, goods.Flavor, goods.Food, goods.Price FROM items JOIN goods ON items.Item = goods.Id ORDER BY goods.Price NULLS LAST;
SELECT goods.ReceiptNumber, goods.Flavor FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'Cake' ORDER BY goods.Flavor;
SELECT goods.ReceiptNumber, goods.Flavor FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'cake' ORDER BY goods.Flavor;
SELECT items.ReceiptNumber, COUNT(*) AS total_items FROM items JOIN goods ON items.Item = goods.Id WHERE LOWER(goods.Flavor) = 'chocolate' GROUP BY items.ReceiptNumber HAVING COUNT(*) <= 10 ORDER BY total_items DESC NULLS LAST;
SELECT items.ReceiptNumber, COUNT(*) AS purchase_count FROM items JOIN goods ON items.Item = goods.Id WHERE LOWER(goods.Flavor) = 'chocolate' GROUP BY items.ReceiptNumber ORDER BY purchase_count DESC LIMIT 1;
SELECT goods.CustomerId FROM goods WHERE good.Food = 'Cake' AND good.Flavor NOT IN (SELECT good.Flavor FROM goods WHERE good.Food = 'Tart')
SELECT goods.CustomerId FROM goods WHERE good.Food = 'Cake' AND good.Flavor NOT IN (SELECT good.Flavor FROM goods WHERE good.Food = 'Tart')
SELECT goods.ReceiptNumber, COUNT(items.Item) AS item_count FROM items JOIN goods ON items.Item = goods.Id GROUP BY goods.ReceiptNumber ORDER BY item_count DESC LIMIT 3;
SELECT items.ReceiptNumber, COUNT(*) AS total_items FROM items JOIN receipts ON items.Receipt = receipts.ReceiptNumber GROUP BY ReceiptNumber ORDER BY total_items DESC LIMIT 3
SELECT customers.CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT receipt FROM items GROUP BY receipt HAVING SUM(g.price * i.ordinal) > 150)
SELECT receipts.CustomerId FROM receipts WHERE SUM(goods.Price) > 150 GROUP BY receipts.CustomerId;
SELECT customers.CustomerId FROM receipts WHERE receipts.CustomerId IN (SELECT items.Receipt FROM items GROUP BY items.Receipt HAVING AVG(goods.Price) > 5);
SELECT customers.CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT receipt FROM items GROUP BY receipt HAVING AVG(CASE WHEN g.Price IS NOT NULL THEN g.Price ELSE 0 END) > 5)
SELECT receipts.Date FROM receipts WHERE receipts.Date IN (SELECT MAX(receipts.Date) AS Date FROM receipts GROUP BY receipts.CustomerId HAVING SUM(goods.Price * items.Ordinal) > 100);
SELECT receipts.Date FROM receipts WHERE receipts.Date IN (SELECT items.Receipt FROM items JOIN goods ON items.Item = goods.Id GROUP BY items.Receipt HAVING SUM(goods.Price) > 100);
SELECT country.Driver_ID FROM driver;
SELECT country.Driver_ID FROM driver;
SELECT driver.Driver_ID, driver.Make, COUNT(*) AS num_drivers FROM driver driver WHERE CAST(driver.Points AS INTEGER) > 150 GROUP BY driver.Driver_ID, driver.Make ORDER BY num_drivers DESC NULLS LAST;
SELECT driver.Driver_ID, drive.make, COUNT(*) AS number_of_drivers FROM driver drive WHERE CAST(drive.points AS INTEGER) > 150 GROUP BY drive.make;
SELECT driver.Driver_ID, driver.Make, AVG(driver.Age) AS Average_Age FROM driver driver GROUP BY driver.Driver_ID, driver.Make ORDER BY driver.Make;
SELECT driver.Driver_ID, AVG(d.age) AS average_age FROM driver d GROUP BY driver.Driver_ID ORDER BY average_age DESC;
SELECT driver.Driver_ID, AVG(d.Laps) AS average_laps FROM driver d WHERE d.Age < 20 GROUP BY driver.Driver_ID ORDER BY average_laps DESC NULLS LAST;
SELECT driver.Driver_ID, AVG(driver.Laps) AS average_laps FROM driver WHERE driver.Age < 20 GROUP BY driver.Drivers;
SELECT team.Team_ID, team.Manager, team.Sponsor, team.Car_Owner FROM team ORDER BY team.Car_Owner NULLS LAST;
SELECT team.Team_ID, team.Manager, team.Sponsor, team.Car_Owner FROM team ORDER BY team.Car_Owner;
SELECT team.Team_ID, COUNT(team.Make) AS number_of_teams FROM team GROUP BY team.Make HAVING COUNT(team.Make) > 1 ORDER BY number_of_teams DESC NULLS LAST;
SELECT team.Team_ID, COUNT(team.Team) AS number_of_teams FROM team GROUP BY Team_ID HAVING COUNT(Team) > 1 ORDER BY number_of_teams DESC NULLS LAST;
SELECT team.Team_ID, team.Make FROM team WHERE LOWER(team.Car_Owner) = 'buddy arrington' ORDER BY team.Team_ID NULLS LAST;
SELECT team.Team_ID, team.Make FROM team WHERE LOWER(team.Car_Owner) = 'buddy arrington' ORDER BY team.Team_ID NULLS LAST;
SELECT driver.Driver_ID, MAX(d.points) AS max_points, MIN(d.points) AS min_points FROM driver d GROUP BY driver.Driver_ID;
SELECT driver.Driver_ID, MAX(driver.Points) AS max_points, MIN(driver.Points) AS min_points FROM driver GROUP BY driver.Driver_ID;
SELECT driver.Driver_ID FROM driver WHERE CAST(driver.Points AS INTEGER) < 150;
SELECT driver.Driver_ID, COUNT(*) AS number_of_drivers FROM driver WHERE CAST(driver.Points AS INTEGER) < 150 GROUP BY driver.Driver_ID;
SELECT driver.Driver_ID, driver.Driver, driver.Age FROM driver ORDER BY driver.Age ASC;
SELECT driver.Driver_ID, driver.Driver, driver.Age FROM driver ORDER BY driver.Age ASC;
SELECT driver.Driver_ID, CAST(driver.Points AS integer) AS Points, driver.Driver FROM driver ORDER BY Points DESC;
SELECT driver.Driver_ID, driver.Points FROM driver ORDER BY CAST(driver.Points AS INTEGER) DESC;
SELECT driver.Driver_ID, driver.Driver, country.Country FROM driver JOIN country ON driver.Country = country.Country_Id ORDER BY driver.Driver;
SELECT driver.Driver_ID, driver.Driver, country.Country FROM driver JOIN country ON driver.Country = country.Country_Id;
SELECT driver.Driver_ID, MAX(driver.Points) AS max_points FROM driver JOIN country ON driver.Country = country.Country_Id WHERE LOWER(country.Capital) = 'dublin' GROUP BY driver.Driver_ID ORDER BY max_points DESC NULLS LAST;
SELECT driver.Driver_ID, MAX(d.points) AS max_points FROM driver d JOIN country c ON d.country = c.country_id WHERE LOWER(c.capital) = 'dublin' GROUP BY d.driver_id ORDER BY max_points DESC NULLS LAST LIMIT 1;
SELECT driver.Driver_ID, AVG(driver.Age) AS Average_Age FROM driver JOIN country ON driver.Country = country.Country_Id WHERE LOWER(country.Official_Native_Language) = 'english' GROUP BY driver.Driver_ID;
SELECT driver.Driver_ID, AVG(driver.Age) AS average_age FROM driver JOIN country ON driver.Country = country.Country_Id WHERE LOWER(country.Official_native_language) = 'english' GROUP BY driver.Driver_ID ORDER BY average_age NULLS LAST;
SELECT driver.Driver_ID, country.Country FROM driver JOIN country ON driver.Country = country.Country WHERE CAST(driver.Points AS INTEGER) > 150 ORDER BY driver.Driver_ID NULLS LAST;
SELECT driver.Driver_ID, country.Country FROM driver JOIN country ON driver.Country = country.Country WHERE CAST(driver.Points AS INTEGER) > 150 GROUP BY driver.Driver_ID, country.Country;
SELECT country.Driver_ID, MAX(d.points) AS max_points FROM driver d JOIN country ON d.country = country.country_id GROUP BY d.driver_id ORDER BY max_points DESC LIMIT 1;
SELECT country.Driver_ID, country.capital FROM driver JOIN country ON driver.country = country.country_id ORDER BY driver.points DESC LIMIT 1;
SELECT driver.Driver_ID, COUNT(*) AS num_drivers FROM driver GROUP BY driver.Driver_ID ORDER BY num_drivers DESC;
SELECT driver.Driver_ID, COUNT(*) AS number_of_drivers FROM driver drive JOIN team_driver t ON drive.Drive_ID = t.Driver_ID GROUP BY drive.Make
SELECT driver.Driver_ID, COUNT(*) AS number_of_drivers FROM driver drive JOIN team_driver t ON drive.Driver_ID = t.Driver_ID GROUP BY drive.Driver_ID ORDER BY number_of_drivers DESC LIMIT 1;
SELECT driver.Driver_ID, COUNT(*) AS number_of_drivers FROM driver drive JOIN team_driver td ON drive.Driver_ID = td.Driver_ID GROUP BY drive.Make ORDER BY number_of_drivers DESC LIMIT 1;
SELECT driver.Driver_ID, driver.Make FROM driver GROUP BY driver.Driver_ID, driver.Make HAVING COUNT(drvier.Driver_ID) >= 3;
SELECT driver.Driver_ID, driver.Make FROM driver GROUP BY driver.Make HAVING COUNT(drvier.Driveer_ID) >= 3 ORDER BY driver.Make;
SELECT team.Team_ID, team.Team FROM team LEFT JOIN team_driver ON team.Team_ID = team_driver.Team_ID WHERE team_driver.Team_ID IS NULL GROUP BY team.Team_ID, team.Team;
SELECT team.Team_ID FROM team WHERE team.Team_ID NOT IN (SELECT td.Team_ID FROM team_driver td) ORDER BY team.Team_ID NULLS LAST;
SELECT driver.Driver_ID FROM driver WHERE LOWER(driver.Make) IN ('dodge', 'chevrolet') GROUP BY driver.Driver_ID HAVING COUNT(DISTINCT CASE WHEN LOWER(driver.Make) = 'dodge' THEN driver.Driver_ID END) > 0 AND COUNT(DISTINCT CASE WHEN LOWER(driver.Make) = 'chevrolet' THEN driver.Driver_ID END) > 0;
SELECT driver.Driver_ID FROM driver WHERE driveR.make = 'Dodge' INTERSECT SELECT driver.Driver_ID FROM driver WHERE driver.make = 'Chevrolet';
SELECT driver.Driver_ID, SUM(CAST(driver.Points AS integer)) AS total_points, AVG(CAST(driver.Points AS integer)) AS avg_points FROM driver GROUP BY driver.Driver_ID ORDER BY total_points DESC NULLS LAST;
SELECT driver.Driver_ID, SUM(CAST(driver.Points AS integer)) AS total_points, AVG(CAST(driver.Points AS integer)) AS average_points FROM driver GROUP BY driver.Driver_ID ORDER BY total_points DESC NULLS LAST;
SELECT country.Driver_ID FROM country WHERE NOT EXISTS (SELECT 1 FROM driver d WHERE d.Country = country.Country_Id)
SELECT country.Driver_ID FROM country WHERE NOT EXISTS (SELECT 1 FROM driver WHERE driver.Country = country.Driver_ID)
SELECT team.Team_ID, team.Manager, team.Sponsor FROM team JOIN (SELECT td.Team_ID, COUNT(*) AS num_drivers FROM team_driver td GROUP BY td.Team_ID ORDER BY num_drivers DESC LIMIT 1) AS max_drivers ON team.Team_ID = max_drivers.Team_ID;
SELECT team.Team_ID, team.Manager, team.Sponsor FROM team JOIN (SELECT td.Team_ID, COUNT(*) AS num_drivers FROM team_driver td GROUP BY td.Team_ID ORDER BY num_drivers DESC LIMIT 1) AS max_drivers ON team.Team_ID = max_drivers.Team_ID;
SELECT team.Team_ID, team.Manager, team.Car_Owner FROM team JOIN (SELECT td.Team_ID, COUNT(*) AS num_drivers FROM team_driver td GROUP BY td.Team_ID HAVING COUNT(*) >= 2) AS subquery ON team.Team_ID = subquery.Team_ID ORDER BY team.Team_ID NULLS LAST;
SELECT team.Team_ID, team.Manager, team.Car_Owner FROM team JOIN (SELECT td.Team_ID FROM team_driver td GROUP BY td.Team_ID HAVING COUNT(DISTINCT td.Driver_ID) >= 2) AS subquery ON team.Team_ID = subquery.Team_ID ORDER BY team.Team_ID NULLS LAST;
SELECT institution.Institution_ID FROM institution;
SELECT institution.Institution_ID FROM institution;
SELECT institution.Institution_ID, institution.Name FROM institution ORDER BY Name ASC;
SELECT institution.Institution_ID, institution.Name FROM institution ORDER BY institution.Name ASC;
SELECT institution.Institution_ID, institution.Name FROM institution ORDER BY institution.Founded ASC;
SELECT institution.Institution_ID, institution.Name, institution.Founded FROM institution ORDER BY institution.Founded ASC;
SELECT institution.Institution_ID, institution.City, institution.Province FROM institution
SELECT institution.Institution_ID, institution.City, institution.Province FROM institution
SELECT institution.Institution_ID, MAX(i.Enrollment) AS max_enrollment, MIN(i.Enrollment) AS min_enrollment FROM institution i GROUP BY Institution_ID;
SELECT institution.Institution_ID, MAX(i.Enrollment) AS max_enrollment, MIN(i.Enrollment) AS min_enrollment FROM institution i GROUP BY i.Institution_ID ORDER BY i.Institution_ID NULLS LAST;
SELECT institution.Institution_ID, affiliation FROM institution WHERE city!= 'Vancouver' ORDER BY Institution_ID NULLS LAST;
SELECT institution.Institution_ID, affiliation FROM institution WHERE City!= 'Vancouver' ORDER BY Institution_ID NULLS LAST;
SELECT institution.Institution_ID, institution.Stadium, institution.Capacity FROM institution ORDER BY institution.Capacity DESC;
SELECT institution.Institution_ID, institution.Stadium, institution.Capacity FROM institution ORDER BY institution.capacity DESC;
SELECT institution.Institution_ID, institution.Stadium FROM institution ORDER BY institution.Enrollment DESC LIMIT 1;
SELECT institution.Institution_ID, institution.Stadium FROM institution ORDER BY institution.Enrollment DESC LIMIT 1;
SELECT institution.Institution_ID, institution.Name, championship.Nickname FROM institution JOIN championship ON institution.Institution_ID = championship.Institution_ID;
SELECT institution.Institution_ID, institution.Name, championship.Nickname FROM institution JOIN championship ON institution.Institution_ID = championship.Institution_ID;
SELECT institution.Nickname FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM Institution ORDER BY Enrollment ASC LIMIT 1)
SELECT institution.Nickname FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM Institution ORDER BY Enrollment ASC LIMIT 1)
SELECT institution.Institution_ID, institution.Name, championship.Number_of_Championships FROM Championship JOIN Institution ON Championship.Institution_ID = Institution.Institution_ID ORDER BY Number_of_Championships DESC;
SELECT institution.Institution_ID, institution.Name, championship.Number_of_Championships FROM Championship JOIN Institution ON Championship.Institution_ID = Institution.Institution_ID ORDER BY Number_of_Championships DESC;
SELECT institution.Institution_ID, institution.Name FROM Championship JOIN institution ON Championship.Institution_ID = institution.Institution_ID WHERE Number_of_Championships > 0 ORDER BY Institution_ID NULLS LAST;
SELECT institution.Institution_ID, institution.Name FROM Championship JOIN institution ON Championship.Institution_ID = institution.Institution_ID WHERE Championship.Number_of_Championships >= 1 ORDER BY institution.Name NULLS LAST;
SELECT institution.Institution_ID, SUM(championship.Number_of_Championships) AS Total_Championships FROM institution JOIN championship ON institution.Institution_ID = championship.Institution_ID WHERE institution.Affiliation ilike '%public%' GROUP BY institution.Institution_ID ORDER BY Total_Championships DESC NULLS LAST;
SELECT institution.Institution_ID, SUM(championship.Number_of_Championships) AS Total_Championships FROM institution JOIN championship ON institution.Institution_ID = championship.Institution_ID WHERE institution.Affiliation ilike '%Public%' GROUP BY institution.Institution_ID ORDER BY Total_Championships DESC NULLS LAST;
SELECT institution.Institution_ID, institution.Affiliation, COUNT(*) AS Number_of_Institutions FROM institution GROUP BY institution.Affiliation ORDER BY Number_of_Institutions DESC NULLS LAST;
SELECT institution.Institution_ID, institution.Affiliation, COUNT(*) AS number_of_institutions FROM institution GROUP BY institution.Institution_ID, institution.Affiliation ORDER BY number_of_institutions DESC NULLS LAST;
SELECT institution.Institution_ID, institution.Affiliation FROM institution ORDER BY COUNT(institution.Affiliation) DESC LIMIT 1;
SELECT institution.Institution_ID, institution.Affiliation FROM institution ORDER BY COUNT(institution.Affiliation) DESC LIMIT 1;
SELECT institution.Institution_ID, EXTRACT(YEAR FROM TO_TIMESTAMP(institution.Founded)) AS YEAR_OF_FOUNDATION FROM institution GROUP BY YEAR_OF_FOUNDATION HAVING COUNT(DISTINCT institution.Institution_ID) > 1 ORDER BY YEAR_OF_FOUNDATION NULLS LAST;
SELECT institution.Institution_ID, COUNT(*) AS num_institutions FROM institution GROUP BY institution.Founded HAVING COUNT(*) > 1 ORDER BY institution.Founded NULLS LAST;
SELECT institution.Nickname FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution ORDER BY Capacity DESC)
SELECT institution.Nickname FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution ORDER BY Capacity DESC)
SELECT institution.Institution_ID, SUM(institution.Enrollment) AS Total_Enrollment FROM institution WHERE LOWER(institution.City) IN ('vancouver', 'calgary') GROUP BY institution.Institution_ID ORDER BY Total_Enrollment DESC NULLS LAST;
SELECT institution.Institution_ID, institution.Enrollment FROM institution WHERE institution.City IN ('Vancouver', 'Calgary') ORDER BY institution.Institution_ID NULLS LAST;
SELECT institution.Institution_ID, institution.Province FROM institution WHERE institution.Founded < 1920 AND institution.Founded > 1950 GROUP BY institution.Institution_ID, institution.Province HAVING COUNT(DISTINCT institution.Institution_ID) >= 2 ORDER BY institution.Province NULLS LAST;
SELECT institution.Institution_ID, institution.Province FROM institution WHERE institution.Founded < 1920 AND institution.Founded > 1950 GROUP BY institution.Institution_ID, institution.Province;
SELECT institution.Institution_ID, COUNT(DISTINCT institution.Province) AS number_of_provinces FROM institution GROUP BY institution.Institution_ID ORDER BY number_of_provinces DESC NULLS LAST;
SELECT institution.Institution_ID, COUNT(DISTINCT institution.Province) AS province_count FROM institution GROUP BY Institution_ID ORDER BY province_count DESC NULLS LAST;
SELECT Warehouses.Code, Warehouses.Location, Warehouses.Capacity FROM Warehouses ORDER BY Warehouses.Code;
SELECT Code, Location, Capacity FROM Warehouses ORDER BY Code;
SELECT Boxes.Contents FROM Boxes WHERE BoxeS.Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York') GROUP BY BoxeS.Contents ORDER BY BoxeS.Contents;
SELECT Boxes.Contents FROM Boxes WHERE Boxes.Warehouse IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location = 'New York') GROUP BY BoxeS.Contents;
SELECT Boxes.Contents FROM Boxes WHERE BoxeS.Value > 150;
SELECT Boxes.Contents FROM Boxes WHERE BoxeS.Value > 150;
SELECT Warehouses.Code, AVG(Boxes.Value) AS Average_Box_Value FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code GROUP BY Warehouses.Code ORDER BY Warehouses.Code;
SELECT Warehouses.Code, AVG(Boxes.Value) AS Average_Box_Value FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code GROUP BY Warehouses.Code ORDER BY Warehouses.Code;
SELECT Boxes.Value, AVG(Boxes.Value), SUM(Boxes.Value) FROM Boxes GROUP BY Box;
SELECT Boxes.Value, AVG(Boxes.Value), SUM(Boxes.Value) FROM Boxes GROUP BY Box;
SELECT Warehouses.Code, AVG(Warehouses.Capacity) AS Average_Capacity, SUM(Warehouses.Capacity) AS Total_Capacity FROM Warehouses GROUP BY Warehouses.Code ORDER BY Warehouses.Code NULLS LAST;
SELECT Warehouses.Code, AVG(Warehouses.Capacity) AS Average_Capacity, SUM(Warehouses.Capacity) AS Total_Capacity FROM Warehouses GROUP BY Warehouses.Code ORDER BY Warehouses.Code NULLS LAST;
SELECT Boxes.Contents, AVG(Boxes.Value) AS Average_Value, MAX(Boxes.Value) AS Maximum_Value FROM Boxes Boxes GROUP BY Boxe.Contents ORDER BY Boxe.Contents;
SELECT Boxes.Contents, AVG(Boxe.Value) AS Average_Value, MAX(Boxe.Value) AS Maximum_Value FROM Boxes Boxe GROUP BY Boxe.Contents ORDER BY Boxe.Contents;
SELECT Boxes.Contents, SUM(Boxe.Value) AS TotalValue FROM Boxes Boxe GROUP BY Boxe.Contents ORDER BY TotalValue DESC LIMIT 1;
SELECT Boxes.Contents FROM Boxes WHERE BoxeS.Value = (SELECT MAX(Value) FROM Boxes);
SELECT Boxes.Value FROM Boxes;
SELECT Boxes.Value FROM Boxes;
SELECT Boxes.Contents FROM Boxes WHERE BoxeS.Contents IN (SELECT DISTINCT BoxeS.Contents FROM Boxes);
SELECT Boxes.Contents FROM Boxes WHERE BoxeS.Contents IS NOT NULL GROUP BY BoxeS.Contents ORDER BY BoxeS.Contents;
SELECT Boxes.Code, COUNT(DISTINCT Boxe.Contents) AS DISTINCT_CONTENTS FROM Boxes Boxe GROUP BY Boxe.Code ORDER BY DISTINCT_CONTENTS DESC;
SELECT Boxes.Contents FROM Boxes WHERE BoxeS.Contents IS NOT NULL GROUP BY BoxeS.Contents ORDER BY COUNT(*) DESC;
SELECT Warehouses.Code, Warehouses.Location FROM Warehouses GROUP BY Warehouses.Code, Warehouses.Location ORDER BY Warehouses.Code;
SELECT Warehouses.Code, Warehouses.Location FROM Warehouses ORDER BY Warehouses.Code;
SELECT Boxes.Code FROM Boxes WHERE Boxes.Warehouse IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location = 'Chicago' OR Warehouses.Location = 'New York') ORDER BY Boxes.Code;
SELECT Boxes.Code FROM Boxes WHERE Boxes.Warehouse IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location = 'Chicago' OR Warehouses.Location = 'New York') ORDER BY Boxes.Code;
SELECT Warehouses.Code, SUM(Boxes.Value) AS TotalValue FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Warehouses.Location IN ('Chicago', 'New York') GROUP BY Warehouses.Code ORDER BY TotalValue DESC;
SELECT Warehouses.Code, SUM(Boxes.Value) AS TotalValue FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York') GROUP BY Warehouses.Code ORDER BY TotalValue DESC;
SELECT Boxes.Contents FROM Boxes WHERE Boxes.Warehouse IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location = 'Chicago' OR Warehouses.Location = 'New York') ORDER BY Boxes.Contents;
SELECT Boxes.Contents FROM Boxes WHERE BoxeS.Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago' OR Location = 'New York') GROUP BY BoxeS.Contents HAVING COUNT(DISTINCT BoxeS.Warehouse) >= 2;
SELECT Boxes.Contents FROM Boxes WHERE Boxes.Warehouse NOT IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location = 'New York') ORDER BY Boxes.Contents;
SELECT Boxes.Contents FROM Boxes WHERE Boxes.Warehouse IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location = 'New York') ORDER BY Boxe.Contents;
SELECT Warehouses.Code, Warehouses.Location FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents ilike '%Rocks%' AND Boxes.Contents not ilike '%Scissors%' ORDER BY Warehouses.Code;
SELECT Warehouses.Code, Warehouses.Location FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents LIKE '%Rocks%' AND Boxes.Contents NOT LIKE '%Scissors%' ORDER BY Warehouses.Code;
SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Code IN (SELECT Boxes.Warehouse FROM Boxes WHERE Boxes.Contents = 'Rocks' OR Boxes.Contents = 'Scissors') ORDER BY Warehouses.Code;
SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Code IN (SELECT Boxes.Warehouse FROM Boxes WHERE Boxes.Contents = 'Rocks' OR Boxes.Contents = 'Scissors') GROUP BY Warehouses.Code;
SELECT Warehouses.Code, Warehouses.Location FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents IN ('Rocks', 'Scissors') GROUP BY Warehouses.Code, Warehouses.Location ORDER BY Warehouses.Code;
SELECT Warehouses.Code, Warehouses.Location FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents ilike '%Rocks%Scissors%' ORDER BY Warehouses.Code;
SELECT Boxes.Code, Boxe.Content, Boxe.Value FROM Boxes AS Boxe ORDER BY Boxe.Value DESC;
SELECT Boxes.Code, BoxeS.Contents, BoxeS.Value FROM Boxes AS BoxeS ORDER BY BoxeS.Value DESC;
SELECT Boxes.Code, BoxeS.Contents FROM Boxes BoxeS WHERE BoxeS.Value = (SELECT MIN(Value) FROM Boxes);
SELECT Boxes.Code, BoxeS.Contents FROM Boxes BoxeS WHERE BoxeS.Value = (SELECT MIN(Value) FROM Boxes);
SELECT Boxes.Contents FROM Boxes WHERE Boxis.Value > (SELECT AVG(Value) FROM Boxis);
SELECT Boxes.Contents FROM Boxes WHERE BoxeS.Value > (SELECT AVG(Value) FROM Boxes);
SELECT Boxes.Contents FROM Boxes WHERE BoxeS.Contents IS NOT NULL GROUP BY BoxeS.Contents ORDER BY BoxeS.Contents;
SELECT Contents FROM Boxes WHERE Contents IS NOT NULL ORDER BY Contents ASC;
SELECT Boxes.Code FROM Boxes WHERE BoxeS.Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Rocks')
SELECT Boxes.Code FROM Boxes WHERE BoxeS.Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Rocks') ORDER BY BoxeS.Code;
SELECT Boxes.Code, Boxe.Content FROM Boxe WHERE Boxe.Value > (SELECT AVG(Value) FROM Boxe WHERE Content = 'Scissors')
SELECT Boxes.Code, BoxeS.Contents FROM Boxes BoxeS WHERE BoxeS.Value > (SELECT MAX(Value) FROM Boxes WHERE Contents LIKE '%Scissors%') ORDER BY BoxeS.Value DESC;
SELECT Warehouses.Code, SUM(Boxes.Value) AS TotalValue FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code ORDER BY Warehouses.Capacity DESC LIMIT 1;
SELECT Warehouses.Code, SUM(Boxes.Value) AS TotalValue FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code ORDER BY Warehouses.Capacity DESC LIMIT 1;
SELECT Warehouses.Code, AVG(Boxes.Value) AS Average_Box_Value FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code HAVING AVG(Boxes.Value) > 150 ORDER BY Average_Box_Value DESC;
SELECT Warehouses.Code, AVG(Boxes.Value) AS Average_Box_Value FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code HAVING AVG(Boxes.Value) > 150 ORDER BY Average_Box_Value DESC;
SELECT Boxes.Contents, SUM(Boxe.Value) AS Total_Value, COUNT(*) AS Number_of_Boxes FROM Boxes Boxe GROUP BY Boxe.Contents ORDER BY Boxe.Contents;
SELECT Boxes.Contents, SUM(Boxe.Value) AS TotalValue, COUNT(*) AS NumberOfBoxes FROM Boxes Boxe GROUP BY Boxe.Contents ORDER BY Boxe.Contents;
SELECT Warehouses.Code, SUM(Warehouses.Capacity) AS Total_Capacity, AVG(Warehouses.Capacity) AS Average_Capacity, MAX(Warehouses.Capacity) AS Max_Capacity FROM Warehouses GROUP BY Warehouses.Code ORDER BY Warehouses.Code;
SELECT Warehouses.Code, SUM(Warehouses.Capacity) AS Total_Capacity, AVG(Warehouses.Capacity) AS Average_Capacity, MAX(Warehouses.Capacity) AS Max_Capacity FROM Warehouses GROUP BY Warehouses.Location ORDER BY Warehouses.Location;
SELECT Warehouses.Code, SUM(Warehouses.Capacity) AS Total_Capacity FROM Warehouses GROUP BY Warehouses.Code ORDER BY Warehouses.Code;
SELECT Warehouses.Code, SUM(Warehouses.Capacity) AS Total_Capacity FROM Warehouses GROUP BY Warehouses.Code;
SELECT Warehouses.Code, MAX(Boxes.Value) AS MaxValue FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code GROUP BY Warehouses.Code ORDER BY MaxValue DESC;
SELECT Warehouses.Code, MAX(Boxes.Value) AS MaxValue FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code GROUP BY Warehouses.Code ORDER BY Warehouses.Location;
SELECT Warehouses.Code, COUNT(Boxes.Code) AS BoxCount FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code ORDER BY BoxCount DESC;
SELECT Warehouses.Code, COUNT(Boxes.Code) AS BoxCount FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code GROUP BY Warehouses.Code ORDER BY BoxCount DESC;
SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location IN (SELECT Boxes.Warehouse FROM Boxes WHERE Boxes.Contents = 'Rocks') GROUP BY Warehouses.Code;
SELECT Warehouses.Code FROM Boxes WHERE Boxes.Contents = 'Rocks' GROUP BY Warehouses.Code;
SELECT Boxes.Code, Warehouses.Location FROM Boxes AS Boxe INNER JOIN Warehouses ON Boxe.Warehouse = Warehouses.Code;
SELECT Boxes.Code, Warehouses.Location FROM Boxes AS Boxe INNER JOIN Warehouses ON Boxe.Warehouse = Warehouses.Code;
SELECT Boxes.Code FROM Boxes WHERE Boxes.Warehouse IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location = 'Chicago')
SELECT Boxes.Code FROM Boxes WHERE Boxes.Warehouse IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location = 'Chicago') ORDER BY Boxes.Code;
SELECT Warehouses.Code, COUNT(Boxes.Code) AS BoxCount FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code GROUP BY Warehouses.Code ORDER BY BoxCount DESC;
SELECT Warehouses.Code, COUNT(Boxes.Code) AS BoxCount FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code ORDER BY BoxCount DESC;
SELECT Warehouses.Code, COUNT(DISTINCT Boxes.Contents) AS DISTINCT_CONTENTS FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code GROUP BY Warehouses.Code ORDER BY Warehouses.Code;
SELECT Warehouses.Code, COUNT(DISTINCT Boxes.Contents) AS content_types FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code GROUP BY Warehouses.Code ORDER BY Warehouses.Code;
SELECT Warehouse FROM Boxes WHERE Value > 1000
SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Capacity < (SELECT COUNT(*) FROM Boxes WHERE Boxes.Warehouse = Warehouses.Code);
SELECT Warehouses.Code, SUM(Boxes.Value) AS TotalValue FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location!= 'Chicago' GROUP BY Warehouses.Code ORDER BY TotalValue DESC;
SELECT Warehouses.Code, SUM(Boxes.Value) AS TotalValue FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location!= 'Chicago' GROUP BY Warehouses.Code ORDER BY TotalValue DESC;
SELECT university.University_ID, university.University_Name, univeristy.City, univeristy.State FROM univeristy ORDER BY University_Name ASC;
SELECT university.University_ID, university.University_Name, univeristy.City, univeristy.State FROM university ORDER BY University_Name ASC;
SELECT university.University_ID FROM university WHERE LOWER(UNIVERSITY.STATE) IN ('illinois', 'ohio') GROUP BY UNIVERSITY.UNITARY_ID;
SELECT university.University_ID FROM university WHERE LOWER(university.State) IN ('illinois', 'ohio') GROUP BY university.University_ID ORDER BY university.University_ID NULLS LAST;
SELECT university.University_ID, MAX(Enrollment) AS max_enrollment, AVG(Enrollment) AS avg_enrollment, MIN(Enrollment) AS min_enrollment FROM university GROUP BY University_ID ORDER BY University_ID NULLS LAST;
SELECT university.University_ID, MAX(Enrollment) AS max_enrollment, AVG(Enrollment) AS avg_enrollment, MIN(Enrollment) AS min_enrollment FROM university GROUP BY University_ID ORDER BY University_ID NULLS LAST;
SELECT university.University_ID, university.Team_Name FROM university WHERE university.Enrollment > (SELECT AVG(Enrollment) FROM university);
SELECT university.University_ID, university.Team_Name FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE university.Enrollment > (SELECT AVG(Enrollment) FROM university);
SELECT university.University_ID, university.Home_Conference FROM university ORDER BY University_ID NULLS LAST;
SELECT university.University_ID, university.Home_Conference FROM university GROUP BY University_ID, Home_Conference ORDER BY University_ID;
SELECT university.University_ID, COUNT(*) AS number_of_universities FROM university GROUP BY Home_Conference ORDER BY number_of_universities DESC NULLS LAST;
SELECT university.University_ID, COUNT(*) AS number_of_universities FROM university WHERE Home_Conference = 'home' GROUP BY University_ID ORDER BY number_of_universities DESC NULLS LAST;
SELECT university.University_ID, COUNT(*) AS num_universities FROM university GROUP BY University_ID ORDER BY num_universities DESC LIMIT 1;
SELECT university.University_ID, COUNT(*) AS number_of_universities FROM university GROUP BY University_ID ORDER BY number_of_universities DESC LIMIT 1;
SELECT university.University_ID, university.Home_Conference, AVG(University.Enrollment) AS Average_Enrollment FROM University WHERE University.Enrollment > 2000 GROUP BY University_ID, Home_Conference ORDER BY Average_Enrollment DESC NULLS LAST;
SELECT university.University_ID, unversity.Home_Conference, AVG(university.Enrollment) AS Average_Enrollment FROM university WHERE AVG(Enrollment) > 2000 GROUP BY University_ID, Home_Conference ORDER BY Average_Enrollment DESC NULLS LAST;
SELECT university.University_ID, university.Home_Conference, SUM(university.Enrollment) AS Total_Enrollment FROM university GROUP BY university.University_ID, university.Home_Conference ORDER BY Total_Enrollment ASC LIMIT 1;
SELECT university.University_ID, university.Home_Conference, MIN(university.Enrollment) AS min_enrollment FROM university GROUP BY university.Home_Conference ORDER BY min_enrollment ASC LIMIT 1;
SELECT major.Major_ID, major.Major_Name, major.Major_Code FROM major ORDER BY major.Major_Code NULLS LAST;
SELECT major.Major_ID, major.Major_Name, major.Major_Code FROM major ORDER BY major.Major_Code NULLS LAST;
SELECT major.Major_ID, major.Major_Name, mr.Rank FROM major JOIN major_ranking AS mr ON major.Major_ID = mr.Major_ID JOIN university u ON mr.University_ID = u.University_ID WHERE LOWER(u.University_Name) = 'augustana college' ORDER BY mr.Rank NULLS LAST;
SELECT major_ranking.Rank, major.Major_Name FROM major JOIN major_ranking ON major.Major_ID = major_ranking.Major_ID WHERE major_ranking.University_ID IN (SELECT university_id FROM overall_ranking WHERE reputation_point > 80) ORDER BY major_ranking.Rank NULLS LAST;
SELECT university.University_ID, university_name, city, state FROM major_ranking JOIN university ON major_ranking.university_id = university.university_id WHERE major_ranking.rank = 1 AND major_ranking.major_id IN (SELECT major_id FROM major WHERE LOWER(major_name) = 'accounting') ORDER BY university_name NULLS LAST;
SELECT university.University_ID, university_name, city, state FROM major_ranking JOIN university ON major_ranking.university_id = university.university_id WHERE major_ranking.major_id IN (SELECT major_id FROM major WHERE LOWER(major_name) = 'accounting') ORDER BY major_ranking.rank ASC LIMIT 1;
SELECT university.University_ID, unversity.University_Name FROM major_ranking mr JOIN university ON mr.University_ID = university.University_ID WHERE mr.Rank = 1 GROUP BY university.University_ID, university.University_Name ORDER BY COUNT(mr.Major_ID) DESC LIMIT 1;
SELECT university.University_ID, unversity.University_Name FROM major_ranking mr JOIN university ON mr.University_ID = university.University_ID WHERE mr.Rank = 1 GROUP BY university.University_ID, university.University_Name ORDER BY COUNT(mr.Major_ID) DESC LIMIT 1;
SELECT university.University_ID, unversity.University_Name FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE overall_ranking.Rank!= 1;
SELECT university.University_ID, university.University_Name FROM university JOIN major_ranking ON university.University_ID = major_ranking.University_ID WHERE NOT EXISTS (SELECT 1 FROM major_ranking mr WHERE mr.Rank = 1 AND mr.University_ID = university.University_ID) ORDER BY university.University_ID NULLS LAST;
SELECT university.University_ID, unversity.University_Name FROM university JOIN major_ranking ON university.University_ID = major_ranking.University_ID WHERE major_ranking.Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name ilike '%Accounting%') AND major_ranking.Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name ilike '%Urban Education%');
SELECT university.University_ID, university_name FROM major JOIN major_ranking ON major.Major_ID = major_ranking.Major_ID JOIN university ON major_ranking.University_ID = university.University_ID WHERE major_name IN ('Accounting', 'Urban Education') GROUP BY university.University_ID, university_name HAVING COUNT(DISTINCT major_name) >= 2 ORDER BY university_name NULLS LAST;
SELECT university.University_ID, university.University_Name, overall_ranking.Rank FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE LOWER(university.State) = 'wi' ORDER BY overall_ranking.Rank NULLS LAST;
SELECT university.University_ID, overall_ranking.Rank FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE LOWER(university.State) = 'wi' ORDER BY overall_ranking.Rank NULLS LAST;
SELECT university.University_ID, unversity.University_Name FROM overall_ranking JOIN university ON overall_ranking.University_ID = university.University_ID ORDER BY overall_ranking.Research_point DESC LIMIT 1;
SELECT university.University_ID, university.University_Name FROM overall_ranking JOIN university ON overall_ranking.University_ID = university.University_ID ORDER BY overall_ranking.Research_point DESC LIMIT 1;
SELECT university.University_ID, university.University_Name, overall_ranking.Reputation_point FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY overall_ranking.Reputation_point ASC;
SELECT university.University_ID, university.University_Name, overall_ranking.Reputation_point FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY overall_ranking.Reputation_point ASC;
SELECT university.University_ID, university.University_Name FROM university JOIN major_ranking ON university.University_ID = major_ranking.University_ID WHERE major_ranking.Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name ilike '%Accounting%') AND major_ranking.Rank >= 3 ORDER BY university.University_ID NULLS LAST;
SELECT university.University_ID, university.University_Name FROM major JOIN major_ranking ON major.Major_ID = major_ranking.Major_ID AND major.Major_Name = 'Accounting' JOIN overall_ranking ON major_ranking.University_ID = overall_ranking.University_ID WHERE major_ranking.Rank >= 3 ORDER BY overall_ranking.Total DESC NULLS LAST;
SELECT university.University_ID, SUM(University.Enrollment) AS Total_Enrollment FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE overall_ranking.Rank <= 5 GROUP BY University_ID ORDER BY Total_Enrollment DESC NULLS LAST;
SELECT university.University_ID, SUM(university.Enrollment) AS Total_Students FROM overall_ranking JOIN university ON overall_ranking.University_ID = university.University_ID WHERE overall_ranking.Rank <= 5 GROUP BY university.University_ID ORDER BY Total_Students DESC NULLS LAST;
SELECT university.University_ID, university_name, citation_point FROM overall_ranking JOIN university ON overall_ranking.university_id = university.university_id WHERE reputation_point >= 3 ORDER BY reputation_point DESC;
SELECT university.University_ID, university.University_Name, overall_ranking.Citation_point FROM overall_ranking JOIN university ON overall_ranking.University_ID = university.University_ID ORDER BY overall_ranking.Reputation_point DESC LIMIT 3;
SELECT university.University_ID, university.State FROM university WHERE university.Enrollment < 3000 GROUP BY university.State, university.University_ID HAVING COUNT(university.University_ID) > 2 ORDER BY university.State;
SELECT university.University_ID, university.State FROM university WHERE university.Enrollment < 3000 GROUP BY university.State, university.University_ID HAVING COUNT(university.University_ID) > 2 ORDER BY university.State;
SELECT Movies.Code, Movies.Title FROM Movies WHERE Movies.Rating IS NULL;
SELECT Movies.Code, Movies.Title FROM Movies WHERE Movies.Rating IS NULL;
SELECT Movie FROM Movies WHERE Rating = 'G'
SELECT Movies.Code, Movies.Title FROM Movies WHERE Movies.Rating = 'G';
SELECT Movies.Code, Moviess.Title FROM MovieTheaters JOIN Moviess ON MovieTheaters.Movie = Moviess.Code WHERE MovieTheaters.Name = 'Odeon'
SELECT Movies.Code, Movies.Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE LOWER(MovieTheaters.Name) = 'odeon' ORDER BY Movies.Code;
SELECT Movies.Code, Movies.Title, MovieTheaters.Name FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie;
SELECT Movies.Code, Movies.Title, MovieTheaters.Name FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie;
SELECT Movie, COUNT(*) AS Number_of_movies FROM Movies WHERE Rating = 'G' GROUP BY Movi;
SELECT Movie, COUNT(*) AS number_of_movies FROM Movies WHERE Rating = 'G' GROUP BY Movi;
SELECT Movie FROM MovieTheaters;
SELECT MovieTheaters.Code FROM MovieTheaters;
SELECT Movie FROM MovieTheaters WHERE Movie IS NOT NULL GROUP BY Movie;
SELECT MovieTheaters.Movie, COUNT(DISTINCT Movietheters.Code) AS number_of_movies FROM Movietheters GROUP BY Movietheters.Movie;
SELECT Movies.Code FROM MovieTheaters WHERE Movies.Code IS NOT NULL GROUP BY Movies.Code ORDER BY Movies.Code NULLS LAST;
SELECT Name FROM MovieTheaters WHERE Code IN (SELECT DISTINCT Movie FROM MovieTheaters);
SELECT MovieTheaters.Movie, Movies.Rating FROM Movies JOIN MoviethTheaters ON Movies.Code = MoviethTheaters.Movie WHERE Movies.Title ilike '%citizen%';
SELECT MovieTheaters.Movie, Movies.Rating FROM Movies JOIN MovieTheaters AS MoviETheaters ON Movies.Code = MoviETheaters.Movie WHERE Movies.Title ilike '%citizen%';
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G' OR Rating = 'PG')
SELECT MovieTheaters.Name FROM MovieTheaters WHERE Movietheters.Movie IN (SELECT Code FROM Movies WHERE Rating = 'G' OR Rating = 'PG') ORDER BY Movietheters.Name;
SELECT Movies.Code, Movies.Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name IN ('Odeon', 'Imperial') ORDER BY Movies.Code;
SELECT Movies.Code, Movies.Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name IN ('Odeon', 'Imperial') ORDER BY Movies.Code;
SELECT Movies.Code, Movies.Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name IN ('Odeon', 'Imperial') GROUP BY Movies.Code, Movies.Title HAVING COUNT(DISTINCT MovieTheaters.Name) = 2;
SELECT Movies.Code, Movies.Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name IN ('Odeon', 'Imperial') GROUP BY Movies.Code, Movies.Title HAVING COUNT(DISTINCT MovieTheaters.Name) = 2;
SELECT Movies.Code, Movies.Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name!= 'Odeon' ORDER BY Movies.Code;
SELECT Movies.Code, Movies.Title FROM Movies LEFT JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name IS NULL;
SELECT Movie FROM Movies;
SELECT Movie, Title FROM Movies ORDER BY Title ASC;
SELECT Movies.Code, Movies.Title, Movies.Rating FROM Movies ORDER BY Movies.Rating DESC;
SELECT Movies.Code, Movies.Title, Movies.Rating FROM Movies ORDER BY Movies.Rating DESC;
SELECT Name FROM MovieTheaters WHERE Code IN (SELECT Movie FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(Movie) DESC LIMIT 1);
SELECT Name FROM MovieTheaters WHERE Code IN (SELECT Movie FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(Movie) DESC LIMIT 1);
SELECT Movies.Code, COUNT(MovieTheaters.Code) AS TheaterCount FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie GROUP BY Movies.Code ORDER BY TheaterCount DESC LIMIT 1;
SELECT Movies.Code, Movies.Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie GROUP BY Movies.Code, Movies.Title ORDER BY COUNT(MovieTheaters.Code) DESC LIMIT 1;
SELECT Movie, COUNT(*) AS total_movies FROM Movies GROUP BY Movi;
SELECT Movie, COUNT(*) AS number_of_movies FROM Movies GROUP BY Movi;
SELECT Movie, COUNT(*) AS number_of_movies FROM Movies WHERE Rating IS NOT NULL GROUP BY Movi;
SELECT Movies.Code FROM Movies WHERE Movies.Rating IS NOT NULL;
SELECT Name FROM MovieTheaters WHERE Movie IS NOT NULL;
SELECT Name FROM MovieTheaters WHERE Movie IS NOT NULL;
SELECT Name FROM MovieTheaters WHERE Movie IS NULL;
SELECT Name FROM MovieTheaters WHERE Movie IS NULL;
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G')
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G') ORDER BY Name;
SELECT Movie FROM Movies;
SELECT Movie FROM Movies;
SELECT MovieTheaters.Movie, COUNT(DISTINCT MoviieTheater.Rating) AS unique_ratings FROM MovieTheaters JOIN Movies ON MovieTheaters.Code = Movies.Code GROUP BY MoviieTheater.Movie;
SELECT Movie, COUNT(*) AS number_of_movies FROM Movies GROUP BY MoviE ORDER BY number_of_movies DESC;
SELECT Movie, Title FROM Movies WHERE Rating IS NULL;
SELECT Movie, Title FROM Movies WHERE Rating IS NULL;
SELECT Movies.Code, Movies.Title FROM Movies LEFT JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Movie IS NULL;
SELECT Movies.Code, Movies.Title FROM Movies LEFT JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Movie IS NULL;
SELECT Package.Recipient FROM Package WHERE Package.Weight = (SELECT MAX(Package.Weight) FROM Package);
SELECT Client.Recipient, MAX(Package.Weight) AS Max_Weight FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber GROUP BY Package.Recipient ORDER BY Max_Weight DESC LIMIT 1;
SELECT Package.Weight FROM Package WHERE Package.Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong');
SELECT Package.Weight FROM Package WHERE Package.Sender IN (SELECT EmployeeID FROM Employee WHERE LOWER(Name) = 'leo wong');
SELECT Employee.Recipient FROM Employee WHERE Employee.Name = 'Amy Wong';
SELECT Employee.Recipient FROM Employee WHERE Employee.Name = 'Amy Wong';
SELECT Employee.Sender, Employee.Position, Employee.Salary FROM Employee WHERE LOWER(Employee.Name) = 'turanga leela';
SELECT Employee.Sender, Employee.Position, Employee.Salary FROM Employee WHERE LOWER(Employee.Name) = 'turanga leela';
SELECT Employee.Sender FROM Employee WHERE Emplyee.Position = 'Intern'
SELECT Employee.Sender FROM Employee WHERE Employee.Position = 'Intern' GROUP BY Employee.Salary;
SELECT Employee.Recipient FROM Employee WHERE Employee.Position = 'Physician';
SELECT Has_Clearance.Recipient, MAX(Has_Clearance.Level) AS Clearance_Level FROM Has_Clearance JOIN Employee ON Has_Clearance.Employee = Employee.EmployeeID WHERE LOWER(Employee.Position) LIKE '%physician%' GROUP BY Has_Clearance.Recipient;
SELECT Package.PackageNumber FROM Package WHERE Package.Sender IN (SELECT Employee.EmployeeID FROM Employee WHERE LOWER(Employee.Name) = 'leo wong');
SELECT PackageNumber FROM Package WHERE Sender = (SELECT EmployeeID FROM Employee WHERE Name = 'Leo Wong');
SELECT PackageNumber FROM Package WHERE Recipient IN (SELECT EmployeeID FROM Employee WHERE LOWER(Name) = 'leo wong');
SELECT PackageNumber FROM Package WHERE Recipient IN (SELECT EmployeeID FROM Employee WHERE LOWER(Name) = 'leo wong');
SELECT PackageNumber FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') OR Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong');
SELECT Package.PackageNumber FROM Package WHERE Package.Sender = (SELECT AccountNumber FROM Client WHERE LOWER(Name) = 'leo wong') OR Package.Recipient = (SELECT AccountNumber FROM Client WHERE LOWER(Name) = 'leo wong');
SELECT PackageNumber FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Ogden Wernstrom') AND Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong');
SELECT PackageNumber FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Ogden Wernstrom') AND Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong');
SELECT Package.Contents FROM Package WHERE Package.Sender IN (SELECT EmployeeID FROM Employee WHERE LOWER(Name) = 'john zoidfarb');
SELECT Package.Contents FROM Package WHERE Package.Sender IN (SELECT EmployeeID FROM Employee WHERE LOWER(Name) = 'john zoidfarb');
SELECT PackageNumber, Weight FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name ilike '%John%' ORDER BY Weight DESC LIMIT 1;
SELECT PackageNumber, MAX(Weight) AS Max_Weight FROM Package WHERE LOWER(Sender) LIKE '%john%' GROUP BY PackageNumber ORDER BY Max_Weight DESC LIMIT 1;
SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC LIMIT 3;
SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC LIMIT 3;
SELECT Client.Recipient, COUNT(PackageNumber) AS NumberOfPackages FROM Package GROUP BY Recipient ORDER BY NumberOfPackages DESC LIMIT 1;
SELECT Client.Sender, COUNT(Package.PackageNumber) AS NumberOfPackages FROM Package JOIN Client ON Package.Sender = Client.AccountNumber GROUP BY Client.Name ORDER BY NumberOfPackages DESC LIMIT 1;
SELECT Client.Recipient, COUNT(Package.PackageNumber) AS NumberOfPackages FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber GROUP BY Client.Name ORDER BY NumberOfPackages ASC LIMIT 1;
SELECT Package.Recipient, COUNT(Package.PackageNumber) AS package_count FROM Package GROUP BY Package.Recipient ORDER BY package_count ASC LIMIT 1;
SELECT Client.Recipient, COUNT(Package.PackageNumber) AS NumberOfPackages FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber GROUP BY Client.AccountNumber HAVING COUNT(Package.PackageNumber) > 1 ORDER BY NumberOfPackages DESC;
SELECT Client.Recipient FROM Package WHERE Package.Sender IN (SELECT Package.Sender FROM Package GROUP BY Package.Sender HAVING COUNT(Package.PackageNumber) > 1);
SELECT Package.Contents FROM Package WHERE Package.Sender = 1;
SELECT Package.Contents FROM Package WHERE Package.Sender = 1;
SELECT Planet.Recipient, p.Name, p.Coordinates FROM Planet p ORDER BY p.Name ASC;
SELECT Planet.Recipient, p.Name, p.Coordinates FROM Planet p ORDER BY p.Name ASC;
SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Manager = (SELECT Employee.EmployeeID FROM Employee WHERE LOWER(Employee.Name) = 'phillip j. fry');
SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Manager = (SELECT EmployeeID FROM Employee WHERE LOWER(Name) = 'phillip j fry');
SELECT Shipment.Shipment, Shipments.Date FROM Shipment;
SELECT Shipment.Shipment, Shipments.Date FROM Shipment;
SELECT Shipment.Shipment FROM Shipment WHERE Shipments.Planet = (SELECT PlanetID FROM Planet WHERE LOWER(Name) ='mars');
SELECT Shipment.Shipment FROM Shipment WHERE Shipments.Planet = (SELECT PlanetID FROM Planet WHERE LOWER(Name) ='mars');
SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Manager = (SELECT Employee.EmployeeID FROM Employee WHERE LOWER(Employee.Name) = 'turanga leela') AND Shipment.Planet = (SELECT PlanetID FROM Planet WHERE LOWER(Name) ='mars');
SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Manager = (SELECT Employee.EmployeeID FROM Employee WHERE LOWER(Employee.Name) = 'turanga leela') AND Shipment.Planet = (SELECT PlanetID FROM Planet WHERE LOWER(Name) ='mars');
SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Planet = (SELECT PlanetID FROM Planet WHERE LOWER(Name) ='mars') OR Shipment.Manager IN (SELECT EmployeeID FROM Employee WHERE LOWER(Name) = 'turanga leela');
SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Manager = (SELECT Employee.EmployeeID FROM Employee WHERE LOWER(Employee.Name) = 'turanga leela') AND Shipment.Planet = (SELECT PlanetID FROM Planet WHERE LOWER(Name) ='mars');
SELECT Planet.PackageNumber, COUNT(*) AS TotalShipments FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID GROUP BY Planet.PlanetID;
SELECT Planet.PackageNumber, COUNT(*) AS NumberOfShipments FROM Shipment JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY PlaneT.PackageNumber;
SELECT Planet.Recipient FROM Shipment WHERE Shipment.Manager = 1;
SELECT Planet.PackageNumber FROM Shipment WHERE ShipmentID IN (SELECT ShipmentID FROM Shipment GROUP BY ShipmentID ORDER BY COUNT(*) DESC LIMIT 1);
SELECT Employee.Recipient, COUNT(*) AS num_shipments FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID GROUP BY Employee.Recipient;
SELECT Employee.Recipient, COUNT(*) AS Number_of_Shipments FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID GROUP BY Employee.Recipient ORDER BY Number_of_Shipments DESC;
SELECT Package.Weight FROM Package WHERE Package.Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'));
SELECT Package.Weight FROM Package WHERE Package.Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'));
SELECT Planet.Recipient, SUM(Package.Weight) AS TotalWeight FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet AS PlaneT ON Shipment.Planet = Planet.PlanetID GROUP BY PlaneT.Name;
SELECT Package.Weight, p.Name FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet AS p ON Shipment.Planet = p.PlanetID GROUP BY Package.Weight, p.Name ORDER BY Package.Weight DESC;
SELECT Planet.Recipient FROM Planet WHERE SUM(Package.Weight) > 30
SELECT Planet.PackageNumber, SUM(Package.Weight) AS TotalWeight FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID GROUP BY Package.PackageNumber HAVING SUM(Package.Weight) > 30 ORDER BY TotalWeight DESC;
SELECT PackageNumber FROM Package WHERE Sender IN (SELECT EmployeeID FROM Employee WHERE Name = 'Zapp Brannigan') AND Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8'));
SELECT PackageNumber FROM Package WHERE Sender IN (SELECT EmployeeID FROM Employee WHERE Name = 'Zapp Brannigan') AND Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8'));
SELECT PackageNumber FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8')) OR Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan');
SELECT PackageNumber FROM Package WHERE Sender = (SELECT EmployeeID FROM Employee WHERE Name = 'Zapp Brannigan') UNION SELECT PackageNumber FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8'));
SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30;
SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30;
SELECT Employee.Recipient FROM Employee WHERE Employee.EmployeeID IN (SELECT Has_Clearance.Employee FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE LOWER(Planet.Name)!='mars')
SELECT Employee.Recipient FROM Employee WHERE Employee.EmployeeID IN (SELECT Has_Clearance.Employee FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE LOWER(Planet.Name)!='mars')
SELECT Employee.Recipient FROM Employee WHERE EXISTS (SELECT 1 FROM Has_Clearance WHERE Employee.EmployeeID = Has_Clearance.Employee AND Has_Clearance.Planet = (SELECT PlanetID FROM Planet WHERE LOWER(Name) = 'omega iii'));
SELECT Employee.Recipient, e.Name FROM Employee e JOIN Has_Clearance h ON e.EmployeeID = h.Employee WHERE LOWER(h.Planet) = 'omega iii' ORDER BY e.Name;
SELECT Planet.Recipient FROM Planet WHERE EXISTS (SELECT * FROM Has_Clearance WHERE Employee = 1 AND Planet = Planets.Recipient);
SELECT Planet.PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE PackageNumber IN (SELECT DISTINCT PackageNumber FROM Package WHERE
SELECT Employee.Recipient FROM Employee WHERE Employee.Salary BETWEEN 5000 AND 10000;
SELECT Employee.Recipient FROM Employee WHERE Employee.Salary BETWEEN 5000 AND 10000;
SELECT Employee.Recipient, SUM(Package.Weight) AS total_weight FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID WHERE Shipment.Manager IN (SELECT EmployeeID FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee)) OR Shipment.Manager IN (SELECT EmployeeID FROM Employee WHERE Salary > 5000) GROUP BY Shipment.Manager;
SELECT Employee.Recipient, SUM(Package.Weight) AS total_weight FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID WHERE Package.Sender IN (SELECT EmployeeID FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee)) OR Package.Sender > 5000 GROUP BY Package.Sender;
SELECT Employee.Contents FROM Employee WHERE Employee.Name IN (SELECT DISTINCT e.Name FROM Employee e JOIN Has_Clearance hc ON e.EmployeeID = hc.Employee WHERE hc.Level > 0 AND hc.Planet = (SELECT p.PlanetID FROM Planet p WHERE LOWER(p.Name) ='mars'));
SELECT Employee.Contents FROM Employee WHERE Employee.Name IN (SELECT DISTINCT e.Name FROM Employee e JOIN Has_Clearance hc ON e.EmployeeID = hc.Employee WHERE hc.Level > 0 AND hc.Planet = (SELECT p.PlanetID FROM Planet p WHERE LOWER(p.Name) ='mars'));
SELECT game.Game_ID FROM game;
SELECT game.Game_ID FROM game;
SELECT game.Game_ID, game.Title, game.Developers, game.Units_sold_Millions FROM game ORDER BY game.Units_sold_Millions DESC;
SELECT game.Game_ID, game.Title, game.Developers, game.Units_sold_Millions FROM game ORDER BY game.Units_sold_Millions DESC;
SELECT game.Game_ID, AVG(g.Units_sold_Millions) AS Average_Units_Sold FROM game g WHERE g.Developers NOT ILIKE '%Nintendo%' GROUP BY g.Game_ID ORDER BY g.Game_ID NULLS LAST;
SELECT game.Game_ID, AVG(g.Units_sold_Millions) AS Average_Units_Sold FROM game g WHERE g.Developers NOT ILIKE '%Nintendo%' GROUP BY g.Game_ID ORDER BY g.Game_ID NULLS LAST;
SELECT platform.Player_ID, plaform.Platform_name, plaform.Market_district FROM plaform;
SELECT platform.Player_ID, plaform.Platform_name, plaform.Market_district FROM plaform;
SELECT platform.Player_ID, plaform.Platform_name FROM Plaform WHERE Download_rank = 1;
SELECT platform.Player_ID, plafform.Platform_name FROM platform WHERE Download_rank = 1
SELECT player.Player_ID, MIN(PLAYER.Rank_of_the_year) AS min_rank, MAX(PLAYER.Rank_of_the_year) AS max_rank FROM PLAYER GROUP BY Player_ID;
SELECT player.Player_ID, MIN(PlayeR.Rank_of_the_year) AS min_rank, MAX(PlayeR.Rank_of_the_year) AS max_rank FROM PlayeR GROUP BY PlayeR.Player_ID;
SELECT player.Player_ID FROM player WHERE player.Rank_of_the_year < 3;
SELECT player.Player_ID, COUNT(*) AS total_players FROM player WHERE Rank_of_the_year <= 3 GROUP BY Player_ID;
SELECT player.Player_ID, player.Player_name FROM player ORDER BY player.Player_name ASC;
SELECT player.Player_ID, player.Player_name FROM player ORDER BY player.Player_name ASC;
SELECT player.Player_ID, player.Player_name, player.College FROM player ORDER BY player.Rank_of_the_year DESC;
SELECT player.Player_ID, playeR.player_name, playeR.college FROM player playeR ORDER BY playeR.rank_of_the_year DESC;
SELECT player.Player_ID, player.Player_name, player.Rank_of_the_year FROM player JOIN game_player ON player.Player_ID = game_player.Player_ID JOIN game ON game_player.Game_ID = game.Game_ID WHERE LOWER(game.Title) ='super mario world' ORDER BY player.Player_ID NULLS LAST;
SELECT player.Player_ID, player.Player_name, player.Rank_of_the_year FROM player JOIN game_player ON player.Player_ID = game_player.Player_ID JOIN game ON game_player.Game_ID = game.Game_ID WHERE LOWER(game.Title) ='super mario world' ORDER BY player.Player_ID NULLS LAST;
SELECT game.Game_ID, gam.developers FROM game gam JOIN game_player gp ON gam.gam_id = gp.game_id JOIN player pl ON gp.player_id = pl.player_id WHERE LOWER(pl.college) = 'auburn' GROUP BY gam.gam_id, gam.developers;
SELECT game.Game_ID, gaem.developers FROM game gaem JOIN game_player gp ON gaem.game_id = gp.game_id JOIN player pl ON gp.player_id = pl.player_id WHERE LOWER(pl.college) = 'auburn' GROUP BY gaem.gam_id, gaem.developers;
SELECT game.Player_ID, AVG(g.Units_sold_Millions) AS Average_Units_Sold FROM game_player gp JOIN game g ON gp.Game_ID = g.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE LOWER(p.Position) = 'guard' GROUP BY gp.Player_ID;
SELECT game.Game_ID, AVG(g.Units_sold_Millions) AS Average_Units_Sold FROM game_player gp JOIN game g ON gp.Game_ID = g.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE LOWER(p.Position) = 'guard' GROUP BY g.Game_ID;
SELECT game.Game_ID, game.Title, platform.Platform_name FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID;
SELECT game.Game_ID, game.Title, platform.Platform_name FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID;
SELECT game.Game_ID, game.title FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID WHERE LOWER(platform.market_district) IN ('asia', 'usa') ORDER BY game.gam_id NULLS LAST;
SELECT game.Game_ID, game.Title FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID WHERE LOWER(platform.market_district) IN ('asia', 'usa') ORDER BY game.title NULLS LAST;
SELECT game.Game_ID, gaem.Franchise, COUNT(gam.Game_ID) AS Number_of_Games FROM game gam JOIN game gaem ON gam.Franchise = gaem.Franchise GROUP BY gaem.Franchise ORDER BY Number_of_Games DESC NULLS LAST;
SELECT game.Game_ID, gaime.Franchise, COUNT(gaime.Game_ID) AS number_of_games FROM gaime GROUP BY gaime.Franchise ORDER BY number_of_games DESC NULLS LAST;
SELECT game.Game_ID, gaem.Franchise FROM game gaem JOIN (SELECT Game_ID, COUNT(*) AS num_games FROM game GROUP BY Game_ID ORDER BY num_games DESC LIMIT 1) AS max_game ON gaem.Game_ID = max_game.Game_ID;
SELECT game.Game_ID, COUNT(gam.Franchise) AS Franchise_Count FROM gam WHERE gam.Franchise IS NOT NULL GROUP BY gam.Franchise ORDER BY Franchise_Count DESC LIMIT 1;
SELECT game.Game_ID, gaem.Franchise FROM game gaem JOIN (SELECT Game_ID, Franchise FROM game GROUP BY Game_ID, Franchise HAVING COUNT(Game_ID) >= 2) AS gaem ON gaem.Game_ID = gaem.Game_ID;
SELECT game.Game_ID, gaem.Franchise FROM game AS gaem JOIN (SELECT Game_ID, COUNT(*) AS num_games FROM game GROUP BY Game_ID HAVING COUNT(*) > 1) AS gaem2 ON gaem.Game_ID = gaem2.Game_ID ORDER BY gaem.Franchise;
SELECT player.Player_ID, player.Player_name FROM player WHERE NOT EXISTS (SELECT 1 FROM game_player gp WHERE gp.Player_ID = player.Player_ID)
SELECT player.Player_ID, player.Player_name FROM player WHERE NOT EXISTS (SELECT 1 FROM game_player gp WHERE gp.Player_ID = player.Player_ID)
SELECT game.Game_ID, game.Title FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID WHERE game_player.Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Oklahoma') AND game_player.Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Auburn');
SELECT game.Game_ID, game.Title FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE LOWER(player.College) IN ('oklahoma', 'auburn') GROUP BY game.Game_ID, game.Title ORDER BY game.Game_ID NULLS LAST;
SELECT game.Game_ID, gaime.Franchise FROM gaime
SELECT game.Game_ID, gaem.Franchise FROM game gaem;
SELECT game.Game_ID, gametitle FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID WHERE game_player.Player_ID NOT IN (SELECT Player_ID FROM player WHERE LOWER(Position) = 'guard') ORDER BY gametitle;
SELECT game.Game_ID, gametitle FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID WHERE game_player.Player_ID NOT IN (SELECT Player_ID FROM player WHERE LOWER(Position) = 'guard') ORDER BY gametitle;
SELECT press.Press_ID, press.Name, press.Year_Profits_billion FROM press ORDER BY press.Year_Profits_billion DESC;
SELECT press.Book_Series FROM press WHERE press.Year_Profits_billion > 0 ORDER BY press.Year_Profits_billion DESC;
SELECT press.Press_ID, press.Name FROM press WHERE (press.Year_Profits_billion > 15 OR press.Month_Profits_billion > 1);
SELECT press.Press_ID, press.Name FROM press WHERE (press.Year_Profits_billion > 15 OR press.Month_Profits_billion > 1) ORDER BY press.Press_ID NULLS LAST;
SELECT press.Press_ID, AVG(press.Year_Profits_billion) AS avg_yearly_profit, MAX(press.Year_Profits_billion) AS max_yearly_profit FROM press GROUP BY press.Press_ID ORDER BY press.Press_ID NULLS LAST;
SELECT press.Press_ID, AVG(press.Year_Profits_billion) AS avg_yearly_profit, MAX(press.Year_Profits_billion) AS max_yearly_profit FROM press GROUP BY press.Press_ID ORDER BY press.Press_ID NULLS LAST;
SELECT press.Press_ID, press.Name FROM press ORDER BY press.Month_Profits_billion DESC LIMIT 1;
SELECT press.Book_Series FROM press WHERE press.Month_Profits_billion = (SELECT MAX(press.Month_Profits_billion) FROM press);
SELECT press.Press_ID, press.Name FROM press ORDER BY press.Month_Profits_billion DESC LIMIT 1;
SELECT press.Press_ID, press.Name, MAX(press.Month_Profits_billion) AS max_monthly_profit, MIN(press.Month_Profits_billion) AS min_monthly_profit FROM press GROUP BY press.Press_ID, press.Name ORDER BY max_monthly_profit DESC NULLS LAST, min_monthly_profit ASC NULLS LAST LIMIT 1;
SELECT author.Book_ID, COUNT(*) AS number_of_authors FROM author JOIN book ON author.Author_ID = book.Author_ID WHERE author.Age < 30 GROUP BY author.BooK_ID;
SELECT author.Book_ID, COUNT(*) AS number_of_authors FROM author JOIN book ON author.Author_ID = book.Author_ID WHERE author.Age < 30 GROUP BY book.Book_ID;
SELECT author.Book_ID, AVG(a.author.age) AS average_age FROM author a GROUP BY a.author.gender
SELECT author.Book_ID, AVG(a.author.age) AS average_age FROM author a GROUP BY a.author.gender
SELECT author.Book_ID, COUNT(*) AS total_books FROM author JOIN book ON author.author_id = book.author_id WHERE age > 30 GROUP BY author.gender;
SELECT author.Book_ID, COUNT(*) AS number_of_authors FROM author JOIN book ON author.Author_ID = book.Author_ID WHERE author.Age > 30 GROUP BY author.Gender;
SELECT book.Title FROM book WHERE book.Release_date IS NOT NULL ORDER BY book.Release_date DESC;
SELECT book.Title FROM book WHERE book.Release_date IS NOT NULL ORDER BY book.Release_date DESC;
SELECT book.Book_Series, COUNT(*) AS book_count FROM book GROUP BY Book_Series ORDER BY book_count DESC NULLS LAST;
SELECT book.Book_Series, COUNT(b.book_id) AS number_of_books FROM book b GROUP BY book.Book_Series ORDER BY number_of_books DESC NULLS LAST;
SELECT book.Title, book.Release_date FROM book WHERE CAST(book.Sale_Amount AS INTEGER) > (SELECT CAST(Sale_Amount AS INTEGER) FROM book ORDER BY CAST(Sale_Amount AS INTEGER) DESC LIMIT 1 OFFSET 4) ORDER BY CAST(book.Sale_Amount AS INTEGER) DESC NULLS LAST;
SELECT book.Title, book.Release_date FROM book WHERE CAST(book.Sale_Amount AS integer) > ALL (SELECT CAST(Sale_Amount AS integer) FROM book) ORDER BY CAST(book.Sale_Amount AS integer) DESC LIMIT 5;
SELECT book.Book_Series FROM book WHERE CAST(book.Sale_Amount AS INTEGER) > 1000 AND CAST(book.Sale_Amount AS INTEGER) < 500 GROUP BY book.Book_Series;
SELECT book.Book_Series FROM book WHERE CAST(book.Sale_Amount AS integer) > 1000 AND CAST(book.Sale_Amount AS integer) < 500 GROUP BY book.Book_Series;
SELECT author.Book_Series FROM author WHERE Book_Series IN ('MM', 'LT')
SELECT author.Book_Series FROM book WHERE Book_Series IN ('MM', 'LT') GROUP BY Author_ID HAVING COUNT(DISTINCT Book_Series) = 2;
SELECT author.Author_ID, author.Name, author.Age FROM author WHERE author.Author_ID NOT IN (SELECT book.Author_ID FROM book) ORDER BY author.Author_ID NULLS LAST;
SELECT author.Book_Series FROM author WHERE NOT EXISTS (SELECT 1 FROM book WHERE book.Author_ID = author.Author_ID)
SELECT author.Book_ID, author.Name FROM author JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Name HAVING COUNT(book.Book_ID) > 1;
SELECT author.Book_Series FROM author WHERE author.BooK_Series > 1;
SELECT book.Title, author.Name AS Author, press.Name AS Publisher FROM book JOIN author ON book.Author_ID = author.Author_ID JOIN press ON book.Press_ID = press.Press_ID ORDER BY CAST(book.Sale_Amount AS INTEGER) DESC LIMIT 3;
SELECT book.Title, author.Name AS Author, press.Name AS Press FROM book JOIN author ON book.Author_ID = author.Author_ID JOIN press ON book.Press_ID = press.Press_ID ORDER BY CAST(book.Sale_Amount AS INTEGER) DESC LIMIT 3;
SELECT press.Press_ID, press.Name, SUM(CAST(book.Sale_Amount AS integer)) AS Total_Sales FROM book JOIN press ON book.Press_ID = press.Press_ID GROUP BY press.Press_ID, press.Name ORDER BY Total_Sales DESC NULLS LAST;
SELECT press.Press_ID, press.Name, SUM(CAST(book.Sale_Amount AS integer)) AS Total_Sales FROM book JOIN press ON book.Press_ID = press.Press_ID GROUP BY press.Press_ID, press.Name ORDER BY Total_Sales DESC NULLS LAST;
SELECT press.Press_ID, press.Name AS Press_Name, COUNT(*) AS Number_of_Books FROM book JOIN press ON book.Press_ID = press.Press_ID WHERE CAST(book.Sale_Amount AS integer) > 1000 GROUP BY press.Press_ID, press.Name ORDER BY Number_of_Books DESC NULLS LAST;
SELECT press.Press_ID, COUNT(*) AS num_books FROM book JOIN press ON book.Press_ID = press.Press_ID WHERE CAST(book.Sale_Amount AS integer) > 1000 GROUP BY press.Press_ID ORDER BY num_books DESC NULLS LAST;
SELECT book.Title, a.Name FROM book bo INNER JOIN author a ON bo.Author_ID = a.Author_ID ORDER BY bo.Sale_Amount DESC LIMIT 1;
SELECT book.Author_ID, (SELECT Name FROM author WHERE Author_ID = book.Author_ID) AS Author_Name FROM book book ORDER BY CAST(book.Sale_Amount AS INTEGER) DESC LIMIT 1;
SELECT author.Book_ID, COUNT(*) AS number_of_books FROM book JOIN author ON book.author_id = author.author_id GROUP BY author.author_id ORDER BY number_of_books DESC LIMIT 1;
SELECT author.Book_ID, COUNT(*) AS total_books FROM book JOIN author ON book.author_id = author.author_id GROUP BY author.name ORDER BY total_books DESC LIMIT 1;
SELECT author.Book_ID, author.Name FROM author JOIN book ON author.Author_ID = book.Author_ID WHERE book.Press_ID NOT IN (SELECT Press_ID FROM book WHERE Name = 'Accor')
SELECT author.Book_Series FROM author WHERE NOT EXISTS (SELECT 1 FROM book WHERE book.Author_ID = author.Author_ID AND book.Press_ID IN (SELECT Press_ID FROM press WHERE Name = 'Accor'))
SELECT press.Press_ID, press.Name, SUM(press.Year_Profits_billion) AS total_yearly_profit FROM press JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Press_ID, press.Name HAVING COUNT(book.Book_ID) > 2 ORDER BY total_yearly_profit DESC NULLS LAST;
SELECT press.Press_ID, press.Name, SUM(press.Year_Profits_billion) AS total_yearly_profit FROM book JOIN press ON book.Press_ID = press.Press_ID GROUP BY press.Press_ID, press.Name HAVING COUNT(book.Book_ID) > 2 ORDER BY total_yearly_profit DESC NULLS LAST LIMIT 1;
SELECT Authors.other_details FROM Authors;
SELECT document_id, author_name FROM Documents ORDER BY document_id;
SELECT Authors.other_details FROM Authors;
SELECT document_id, document_name, document_description FROM Documents WHERE author_name = 'Addison Denesik';
SELECT document_id FROM Documents;
SELECT document_id, author_name FROM Documents WHERE document_id = 4;
SELECT document_id, author_name FROM Documents WHERE LOWER(document_name) = 'travel to brazil';
SELECT document_id FROM Documents WHERE LOWER(author_name) = 'era kerluke';
SELECT document_id, document_name, document_description FROM Documents;
SELECT document_id, document_name FROM Documents WHERE LOWER(author_name) = 'bianka cummings' ORDER BY document_id;
SELECT document_id, author_name, other_details FROM Documents WHERE document_name = 'Travel to China';
SELECT document_id, COUNT(*) AS document_count FROM Documents GROUP BY document_id ORDER BY document_id;
SELECT document_id, COUNT(document_id) AS document_count FROM Documents GROUP BY document_id ORDER BY document_count DESC LIMIT 1;
SELECT document_id, author_name FROM Documents GROUP BY document_id, author_name HAVING COUNT(document_id) >= 2;
SELECT Business_Processes.process_id FROM Business_Processes;
SELECT process_id, process_name, process_description FROM Business_Processes WHERE process_id = 9;
SELECT process_id FROM Business_Processes WHERE process_id = (SELECT next_process_id FROM Business_Processes WHERE process_id = 9);
SELECT process_id, COUNT(process_outcome_code) AS outcome_count FROM Documents_Processes GROUP BY process_id ORDER BY outcome_count DESC;
SELECT process_id, process_outcome_code, process_outcome_description FROM Process_Outcomes;
SELECT process_id FROM Process_Outcomes WHERE process_outcome_code = 'working';
SELECT process_id, COUNT(process_status_code) AS total_processes FROM Process_Status GROUP BY process_id ORDER BY total_processes DESC;
SELECT process_id, process_name FROM Business_Processes;
SELECT process_id FROM Process_Status WHERE process_status_code = 'ct';
SELECT staff_id FROM Staff;
SELECT staff_id, staff_details FROM Staff
SELECT staff_id, staff_details FROM Staff WHERE staff_id = 100;
SELECT staff_role_code, COUNT(*) AS role_count FROM Staff_in_Processes GROUP BY staff_role_code ORDER BY role_count DESC;
SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles ORDER BY staff_role_code;
SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code = 'HR'
SELECT document_id FROM Documents WHERE document_id IN (SELECT document_id FROM Documents_Processes);
SELECT document_id FROM Documents;
SELECT document_id FROM Documents WHERE document_id NOT IN (SELECT document_id FROM Documents_Processes);
SELECT process_id FROM Business_Processes WHERE process_id NOT IN (SELECT DISTINCT process_id FROM Documents_Processes);
SELECT document_id, process_outcome_description, process_status_description FROM Documents_Processes WHERE document_id = 0;
SELECT document_id, process_name FROM Documents JOIN Documents_Processes USING(document_id) JOIN Business_Processes USING(process_id) WHERE document_name = 'Travel to Brazil';
SELECT process_id, COUNT(document_id) AS document_count FROM Documents_Processes GROUP BY process_id ORDER BY process_id;
SELECT staff_id FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9;
SELECT staff_id, COUNT(*) AS num_processes FROM Staff_in_Processes GROUP BY staff_id ORDER BY staff_id;
SELECT staff_role_code, COUNT(*) AS num_processes FROM Staff_in_Processes GROUP BY staff_role_code ORDER BY num_processes DESC;
SELECT staff_role_code FROM Staff_in_Processes WHERE staff_id = 3 GROUP BY staff_role_code;
SELECT Agencies.meeting_id FROM Agencies;
SELECT Agencies.meeting_id FROM Agencies;
SELECT Agencies.staff_id, Agencies.agency_details FROM Staff JOIN Agencies ON Staff.agency_id = Agencies.agency_id;
SELECT Agencies.staff_id, Agencies.agency_details FROM Staff JOIN Agencies ON Staff.agency_id = Agencies.agency_id;
SELECT Clients.meeting_id, COUNT(DISTINCT Meetings.client_id) AS total_clients FROM Meetings JOIN Clients ON Meetings.client_id = Clients.client_id GROUP BY Meetings.meeting_id ORDER BY total_clients DESC;
SELECT Clients.staff_id FROM Clients;
SELECT meeting_id, client_details FROM Meetings;
SELECT meeting_id, client_id, meeting_outcome, meeting_type, billable_yn, start_date_time, end_date_time, purpose_of_meeting, other_details FROM Meetings;
SELECT Agencies.staff_id, COUNT(Clients.client_id) AS client_count FROM Clients JOIN Agencies ON Clients.agency_id = Agencies.agency_id GROUP BY Agencies.staff_id ORDER BY client_count DESC;
SELECT Agencies.staff_id, COUNT(Clients.client_id) AS number_of_clients FROM Agencies JOIN Staff ON Agencies.agency_id = Staff.agency_id JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.staff_id ORDER BY number_of_clients DESC;
SELECT Agencies.staff_id, COUNT(Clients.client_id) AS client_count FROM Agencies JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.staff_id ORDER BY client_count DESC LIMIT 1;
SELECT Agencies.staff_id, COUNT(Clients.client_id) AS client_count FROM Agencies JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id ORDER BY client_count DESC LIMIT 1;
SELECT Agencies.staff_id, COUNT(Clients.client_id) AS client_count FROM Agencies JOIN Staff ON Agencies.agency_id = Staff.agency_id JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id HAVING COUNT(Clients.client_id) >= 2 ORDER BY client_count DESC;
SELECT Agencies.staff_id, Agencies.agency_details FROM Agencies JOIN Staff ON Agencies.staff_id = Staff.staff_id WHERE Agencies.staff_id IN (SELECT Clients.agency_id FROM Clients GROUP BY Clients.agency_id HAVING COUNT(Clients.client_id) >= 2);
SELECT Agencies.staff_id, Agencies.agency_details FROM Clients JOIN Agencies ON Clients.agency_id = Agencies.agency_id WHERE Clients.client_details ilike '%Mac%'
SELECT Agencies.staff_id, Agencies.agency_details FROM Clients JOIN Agencies ON Clients.agency_id = Agencies.agency_id WHERE Clients.client_details ilike '%Mac%'
SELECT Clients.staff_id, Staff.staff_details FROM Clients JOIN Staff ON Clients.agency_id = Staff.agency_id;
SELECT Clients.staff_id, Staff.staff_details, Agencies.agency_details FROM Clients JOIN Staff ON Clients.client_id = Staff.staff_id JOIN Agencies ON Clients.agency_id = Agencies.agency_id;
SELECT staff_id, COUNT(*) AS total_clients FROM Clients GROUP BY staff_id ORDER BY total_clients DESC;
SELECT staff_id, COUNT(*) AS number_of_clients FROM Clients GROUP BY staff_id;
SELECT meeting_id, client_id, meeting_outcome FROM Meetings WHERE client_id IN (SELECT client_id FROM Clients WHERE sic_code = 'Bad');
SELECT Clients.staff_id, Clients.client_details FROM Clients JOIN Staff ON Clients.staff_id = Staff.staff_id WHERE Clients.sic_code = 'Bad';
SELECT Agencies.staff_id, Agencies.agency_details FROM Clients JOIN Agencies ON Clients.agency_id = Agencies.agency_id;
SELECT Agencies.staff_id, Agencies.agency_details FROM Agencies JOIN Staff ON Agencies.agency_id = Staff.agency_id WHERE Agencies.agency_id IN (SELECT Clients.agency_id FROM Clients);
SELECT Agencies.staff_id FROM Agencies WHERE Agencies.staff_id NOT IN (SELECT Clients.agency_id FROM Clients);
SELECT Agencies.staff_id FROM Agencies WHERE staff_id NOT IN (SELECT client_id FROM Clients);
SELECT Invoices.meeting_id FROM Invoices;
SELECT Invoices.meeting_id, COUNT(*) AS total_invoices FROM Invoices GROUP BY Invoice_id;
SELECT Invoices.meeting_id, Invoices.invoice_status, Invoices.invoice_details FROM Invoices JOIN Meetings ON Invoices.client_id = Meetings.client_id;
SELECT Invoices.meeting_id, InvoiceStatus, InvoiceDetails FROM Invoices;
SELECT Clients.staff_id, COUNT(Invoices.invoice_id) AS invoice_count FROM Clients JOIN Invoices ON Clients.client_id = Invoices.client_id GROUP BY Clients.staff_id ORDER BY invoice_count DESC;
SELECT Invoices.meeting_id, COUNT(Invoices.invoice_id) AS invoice_count FROM Invoices JOIN Meetings ON Invoices.client_id = Meetings.client_id GROUP BY Invoices.meeting_id ORDER BY invoice_count DESC;
SELECT Invoices.staff_id, COUNT(Invoices.invoice_id) AS invoice_count FROM Invoices JOIN Clients ON Invoices.client_id = Clients.client_id GROUP BY Invoices.staff_id ORDER BY invoice_count DESC LIMIT 1;
SELECT Clients.staff_id, COUNT(Invoices.invoice_id) AS invoice_count FROM Invoices JOIN Clients ON Invoices.client_id = Clients.client_id GROUP BY Clients.staff_id ORDER BY invoice_count DESC LIMIT 1;
SELECT Invoices.meeting_id FROM Invoices WHERE Invoice_id IN (SELECT invoice_id FROM Invoices GROUP BY invoice_id HAVING COUNT(*) >= 2);
SELECT Invoices.meeting_id FROM Invoices WHERE Invoice_id IN (SELECT invoice_id FROM Invoices GROUP BY invoice_id HAVING COUNT(*) >= 2);
SELECT staff_id, COUNT(*) AS total_invoices FROM Invoices GROUP BY staff_id ORDER BY total_invoices DESC;
SELECT Invoices.meeting_id, COUNT(*) AS number_of_invoices FROM Invoices WHERE InvoiceStatus ='meeting' GROUP BY InvoiceStatus;
SELECT staff_id, COUNT(*) AS total_invoices FROM Invoices GROUP BY staff_id ORDER BY total_invoices DESC LIMIT 1;
SELECT staff_id FROM Staff WHERE staff_details = 'John'
SELECT Invoices.meeting_id, Invoices.invoice_status, Invoices.invoice_details, Clients.client_id, Clients.client_details, Agencies.agency_id, Agencies.agency_details FROM Invoices JOIN Meetings ON Invoices.meeting_id = Meetings.meeting_id JOIN Clients ON Meetings.client_id = Clients.client_id JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id JOIN Agencies ON Staff.agency_id = Agencies.agency_id;
SELECT Invoices.meeting_id, Invoices.invoice_status, Invoices.invoice_details, Clients.client_id, Clients.client_details, Agencies.agency_id, Agencies.agency_details FROM Invoices JOIN Clients ON Invoices.client_id = Clients.client_id JOIN Meetings ON Clients.client_id = Meetings.client_id JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id JOIN Agencies ON Staff.agency_id = Agencies.agency_id;
SELECT meeting_id, meeting_type, purpose_of_meeting, other_details FROM Meetings;
SELECT meeting_id, meeting_type, purpose_of_meeting, other_details FROM Meetings;
SELECT meeting_id, meeting_outcome, purpose_of_meeting FROM Meetings;
SELECT meeting_id, meeting_outcome, purpose_of_meeting FROM Meetings;
SELECT Payments.meeting_id, Payments.payment_details FROM Payments JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id WHERE Invoices.invoice_status = 'Working' ORDER BY Payments.meeting_id;
SELECT Payments.meeting_id, Payments.payment_details FROM Payments JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id WHERE Invoices.invoice_status = 'Working' ORDER BY Payments.meeting_id;
SELECT Invoices.meeting_id, Invoices.invoice_status FROM Invoices JOIN Payments ON Invoices.invoice_id = Payments.invoice_id WHERE Payments.payment_id IS NULL;
SELECT Invoices.meeting_id, Invoices.invoice_status FROM Invoices JOIN Payments ON Invoices.invoice_id = Payments.invoice_id WHERE Payments.payment_id IS NULL;
SELECT staff_id FROM Payments;
SELECT staff_id, COUNT(*) AS total_payments FROM Payments GROUP BY staff_id;
SELECT Payments.meeting_id, Payments.payment_id, Invoices.invoice_id, Invoices.invoice_details FROM Payments JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id;
SELECT Payments.meeting_id, Payments.payment_id, Payments.invoice_id, Payments.payment_details FROM Payments;
SELECT Invoices.meeting_id, Invoices.invoice_status FROM Payments JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id;
SELECT Invoices.meeting_id, Invoices.invoice_status FROM Payments JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id;
SELECT Invoices.meeting_id, COUNT(Payments.payment_id) AS payment_count FROM Invoices JOIN Payments ON Invoices.invoice_id = Payments.invoice_id GROUP BY Invoice_id
SELECT staff_id, COUNT(*) AS number_of_payments FROM Payments GROUP BY staff_id;
SELECT Invoices.meeting_id, Invoices.invoice_status, Invoices.invoice_details FROM Invoices JOIN Payments ON Invoices.invoice_id = Payments.invoice_id GROUP BY Invoices.invoice_id ORDER BY COUNT(Payments.payment_id) DESC LIMIT 1;
SELECT Invoices.meeting_id, Invoices.invoice_status, Invoices.invoice_details FROM Invoices JOIN Payments ON Invoices.invoice_id = Payments.invoice_id GROUP BY Invoices.invoice_id ORDER BY COUNT(Payments.payment_id) DESC LIMIT 5;
SELECT staff_id FROM Staff;
SELECT staff_id FROM Staff;
SELECT staff_id, COUNT(*) AS num_staff FROM Staff GROUP BY staff_id;
SELECT staff_id, COUNT(*) AS num_staff FROM Staff GROUP BY staff_id ORDER BY staff_id;
SELECT staff_id, COUNT(*) AS staff_count FROM Staff GROUP BY staff_id ORDER BY staff_count DESC LIMIT 1;
SELECT staff_id, COUNT(*) AS staff_count FROM Staff GROUP BY staff_id ORDER BY staff_count DESC LIMIT 1;
SELECT meeting_id, COUNT(*) AS total_meetings FROM Meetings GROUP BY meeting_outcome ORDER BY total_meetings DESC;
SELECT meeting_id, COUNT(*) AS number_of_meetings FROM Meetings GROUP BY meeting_outcome ORDER BY number_of_meetings DESC;
SELECT meeting_id, COUNT(*) AS total_meetings FROM Meetings GROUP BY meeting_id;
SELECT meeting_id, COUNT(*) AS number_of_meetings FROM Meetings GROUP BY meeting_id ORDER BY number_of_meetings DESC;
SELECT meeting_id, COUNT(*) AS total_meetings FROM Meetings GROUP BY meeting_id;
SELECT meeting_id, COUNT(*) AS number_of_meetings FROM Meetings GROUP BY meeting_type ORDER BY number_of_meetings DESC;
SELECT meeting_id, meeting_outcome, meeting_type, other_details FROM Meetings;
SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM Meetings JOIN Clients ON Meetings.client_id = Clients.client_id;
SELECT meeting_id, COUNT(*) AS num_staff FROM Staff_in_Meetings GROUP BY meeting_id ORDER BY meeting_id;
SELECT meeting_id, COUNT(*) AS staff_count FROM Staff_in_Meetings GROUP BY meeting_id ORDER BY meeting_id;
SELECT staff_id, COUNT(*) AS num_meetings FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(*) = (SELECT MIN(num_meetings) FROM (SELECT staff_id, COUNT(*) AS num_meetings FROM Staff_in_Meetings GROUP BY staff_id) AS subquery);
SELECT staff_id FROM Staff_in_Meetings WHERE staff_id IN (SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) = (SELECT MIN(COUNT(meeting_id)) FROM Staff_in_Meetings WHERE staff_id IN (SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) > 0)));
SELECT staff_id FROM Staff_in_Meetings;
SELECT staff_id FROM Staff_in_Meetings;
SELECT staff_id FROM Staff WHERE staff_id NOT IN (SELECT DISTINCT staff_id FROM Staff_in_Meetings);
SELECT staff_id FROM Staff WHERE staff_id NOT IN (SELECT sm.staff_id FROM Staff_in_Meetings sm);
SELECT meeting_id, client_details FROM Meetings UNION SELECT invoice_id, client_details FROM Invoices;
SELECT meeting_id, client_details FROM Meetings UNION SELECT invoice_id, client_details FROM Invoices
SELECT staff_id, staff_details FROM Staff WHERE staff_id IN (SELECT sm.staff_id FROM Staff_in_Meetings sm JOIN Meetings m ON sm.meeting_id = m.meeting_id WHERE LOWER(m.other_details) LIKE '%s%') GROUP BY staff_id, staff_details;
SELECT staff_id, staff_details FROM Staff WHERE staff_id IN (SELECT sm.staff_id FROM Staff_in_Meetings sm GROUP BY sm.staff_id HAVING COUNT(sm.meeting_id) >= 1) AND LOWER(staff_details) LIKE '%s%' ORDER BY staff_id;
SELECT meeting_id, sic_code, agency_id FROM Clients WHERE client_id IN (SELECT DISTINCT client_id FROM Meetings UNION SELECT DISTINCT client_id FROM Invoices);
SELECT meeting_id, client_id, sic_code, agency_id FROM Meetings JOIN Clients ON Meetings.client_id = Clients.client_id WHERE billable_yn = 'Y' AND EXISTS (SELECT 1 FROM Invoices WHERE invoices.client_id = Meetings.client_id) GROUP BY client_id HAVING COUNT(meeting_id) = 1;
SELECT meeting_id, c.client_details, s.staff_details, start_date_time, end_date_time FROM Meetings AS mt JOIN Clients AS c ON mt.client_id = c.client_id JOIN Staff_in_Meetings AS sm ON mt.meeting_id = sm.meeting_id JOIN Staff AS s ON sm.staff_id = s.staff_id;
SELECT meeting_id, c.client_details AS client_name, s.staff_details AS staff_name, start_date_time, end_date_time FROM Meetings JOIN Clients ON Meetings.client_id = Clients.client_id JOIN Staff_in_Meetings sm ON Meetings.meeting_id = sm.meeting_id JOIN Staff s ON sm.staff_id = s.staff_id;
