SELECT birthYear FROM Artists WHERE deathYear - birthYear = ( SELECT MIN(deathYear - birthYear ) FROM Artists ) - ( SELECT MIN(deathYear - birthYear ) FROM Artists ) AND deathYear IS NOT NULL AND birthYear IS NOT NULL AND deathYear > birthYear ORDER BY deathYear - birthYear LIMIT 1; SELECT birthYear FROM Artists WHERE deathYear - birthYear = ( SELECT MIN(death
SELECT T.fname, T.birthYear + 2023 - T.deathYear AS age FROM ( SELECT fname, birthYear, deathYear, ROW_NUMBER() OVER ( ORDER BY deathYear - birthYear DESC ) AS rn FROM Artists ) T WHERE T.rn = 1; SELECT T.fname, T.birthYear + 2023 - T.deathYear AS age FROM ( SELECT fname, birthYear, deathYear, ROW_NUMBER
SELECT T1.fname, JULD - T1.birthYear AS age FROM Artists AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistID WHERE T1.deathYear IS NULL ORDER BY JULD - T1.birthYear DESC LIMIT 1; SELECT T1.fname, JULD - T1.birthYear AS age FROM Artists AS T1 INNER JOIN Artists AS T2 ON T1.artistID =
SELECT COUNT(paintingID) FROM Paintings WHERE location = 'gallery 240'
SELECT COUNT(paintingID) FROM Paintings WHERE location = '240' AND year > 0;
SELECT COUNT(paintingID) FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE deathYear IS NOT NULL AND deathYear - birthYear = (SELECT MAX(deathYear - birthYear) FROM Artists)) AND painterID IN (SELECT artistID FROM Artists WHERE deathYear IS NOT NULL) GROUP BY painterID HAVING COUNT(paintingID) > 0; SELECT COUNT(paintingID) FROM Paintings WHERE painterID
SELECT COUNT(paintingID) FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE deathYear - birthYear = (SELECT MAX(deathYear - birthYear) FROM Artists))
SELECT A.fname, A.lname, P.year FROM Artists AS A INNER JOIN Paintings AS P ON A.artistID = P.painterID WHERE A.fname = 'Mary' ORDER BY P.year;
SELECT T1.title, T1.year FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T2.fname = 'Mary' AND T2.lname = '';  -- assuming lname is empty string for Mary, adjust accordingly. If you want to get all paintings by Mary regardless of her last name, remove the condition.  -- SELECT T1.title, T1.year FROM Paintings
SELECT T2.width_mm FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T1.birthYear < 1850;
SELECT width_mm FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE birthYear < 1850)
SELECT T2.location, T2.medium FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T1.fname = 'Pablo' AND T2.mediumOn = 'painting' AND T1.lname = 'Picasso' AND T2.title = 'Girl before a mirror' AND T2.year = 1932;  
SELECT DISTINCT T2.location, T2.mediumOn FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T1.fname = 'Pablo' AND T1.lname = 'Picasso' AND T1.fname = 'Pablo' AND T1.lname = 'Picasso' AND T1.fname = 'Pablo' AND T1.lname = 'Picasso' AND T1.fname = 'Pablo
SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID INNER JOIN Sculptures AS T3 ON T1.artistID = T3.sculptorID GROUP BY T1.artistID;
SELECT A.fname, A.lname FROM Artists AS A INNER JOIN Paintings AS P ON A.artistID = P.painterID INNER JOIN Sculptures AS S ON A.artistID = S.sculptorID;
SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = 'oil' INTERSECT SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = 'lithograph'
SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = 'oil' INTERSECT SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = 'lithographic'
SELECT T1.birthYear FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.year = 1884 AND T2.mediumOn = 'canvas' AND T2.year = 1884;
SELECT T1.birthYear FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.year = 1884;
SELECT DISTINCT T.fname FROM ( SELECT T1.fname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.location = 'gallery 241' AND T2.mediumOn = 'oil' ) AS T WHERE T.fname IS NOT NULL; SELECT DISTINCT T.fname FROM ( SELECT T1.fname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE
SELECT T1.fname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.location = 'gallery 241' AND T2.mediumOn = 'oil' GROUP BY T1.fname HAVING COUNT(T1.fname) > 0;
SELECT medium, COUNT(paintingID) FROM Paintings UNION SELECT medium, COUNT(sculptureID) FROM Sculptures GROUP BY medium ORDER BY medium;  
SELECT medium, COUNT(*) FROM Paintings UNION SELECT medium, COUNT(*) FROM Sculptures GROUP BY medium ORDER BY medium;  
SELECT AVG(height_mm), medium FROM Paintings GROUP BY medium;
SELECT AVG(height_mm), medium FROM Paintings GROUP BY medium;
SELECT COUNT(paintingID), location FROM Paintings WHERE year < 1900 GROUP BY location;
SELECT COUNT(paintingID) FROM Paintings WHERE year < 1900 AND location NOT IN (SELECT location FROM Paintings GROUP BY location HAVING COUNT(location) = 1) GROUP BY location;
SELECT title FROM Paintings WHERE year > 1910 AND medium = 'oil' AND mediumOn = 'oil' AND location = 'oil' AND painterID IN (SELECT artistID FROM Artists WHERE birthYear < 1910) AND paintingID IN (SELECT paintingID FROM Paintings WHERE year > 1910 AND medium = 'oil') AND paintingID IN (SELECT painterID FROM Paintings WHERE year > 1910 AND medium =
SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.year > 1910 AND T2.medium = 'oil on canvas' OR T2.medium = 'oil on panel' OR T2.medium = 'oil on board' OR T2.medium = 'oil on wood' OR T2.medium
SELECT DISTINCT T1.artistID FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.mediumOn = 'oil' AND T2.location = 'gallery 240' AND T2.medium = 'oil' AND T2.location = 'gallery 240' AND T2.location = 'gallery 240' AND T2.location = 'gallery 240' AND T2.location = 'gallery 
SELECT DISTINCT T1.artistID FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.location = 'gallery 240' AND T2.mediumOn = 'oil' AND T2.medium = 'oil' AND T2.location = 'gallery 240' AND T2.medium = 'oil' AND T2.mediumOn = 'oil' AND T2.location = 'gallery 240'
SELECT DISTINCT T1.title FROM Paintings AS T1 INNER JOIN Paintings AS T2 ON T1.height_mm > T2.height_mm AND T1.mediumOn = 'canvas' AND T2.mediumOn = 'canvas' WHERE T2.mediumOn = 'canvas' AND T1.mediumOn = 'canvas' AND T1.height_mm > T2.height_mm; SELECT DISTINCT T1.title FROM Paintings AS T1 INNER JOIN Paintings AS T2 ON T1.height
SELECT DISTINCT title FROM Paintings WHERE height_mm > ( SELECT MAX(height_mm) FROM Paintings WHERE medium = 'canvas' ) AND medium = 'canvas' OR medium = 'oil on canvas' OR medium = 'oil on panel' OR medium = 'oil on wood' OR medium = 'oil on board' OR medium = 'oil on copper' OR medium = 'oil on aluminium' OR medium = 'oil on zinc' OR medium = 'oil on iron' OR medium
SELECT DISTINCT p1.painterID FROM Paintings p1 JOIN Paintings p2 ON p1.year < p2.year WHERE p2.location = 'gallery 240' AND p1.location = 'gallery 240' AND p1.year < p2.year; SELECT DISTINCT p1.painterID FROM Paintings p1 JOIN Paintings p2 ON p1.year < p2.year WHERE p2.location = 'gallery 240' AND p1.location = 'gallery
SELECT DISTINCT p.painterID FROM Paintings p WHERE p.year < ( SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240' ) AND p.location = 'gallery 240' ; SELECT DISTINCT p.painterID FROM Paintings p WHERE p.year < ( SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240' ) AND p.location = 'gallery 240' ; SELECT DISTINCT p.painterID FROM Paintings p WHERE p
SELECT MIN(paintingID) FROM Paintings WHERE year = ( SELECT MIN(year ) FROM Paintings ) AND mediumOn = 'painting' AND medium = 'painting' AND location = 'location' AND painterID = ( SELECT artistID FROM Artists WHERE deathYear IS NULL ) AND height_mm > 0 AND width_mm > 0 AND title!= '' AND year > 0 AND medium
SELECT MIN(paintingID) FROM Paintings WHERE year = ( SELECT MIN(year ) FROM Paintings );
 SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.title LIKE '%female%' ORDER BY T1.artistID LIMIT 1 
SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.title LIKE '%female%' AND T2.title LIKE '%female' ESCAPE ''; SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.title LIKE '%
SELECT DISTINCT title FROM Paintings ORDER BY title ASC;
SELECT DISTINCT title FROM Paintings ORDER BY title ASC;
SELECT DISTINCT title FROM Paintings ORDER BY (width_mm - height_mm) * (width_mm - height_mm) DESC;
SELECT title FROM Paintings ORDER BY height_mm ASC;
SELECT DISTINCT CASE WHEN t = 'Paintings' THEN CONCAT(a.fname,'', a.lname) ELSE CONCAT(a.fname,'', a.lname) END FROM ( SELECT 'Paintings' AS t, p.title AS title, a.fname AS fname, a.lname AS lname FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE p.year BETWEEN 1900 AND 1950 UNION SELECT 'Scul
SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950; SELECT DISTINCT t FROM ( SELECT CASE WHEN t LIKE 'Painting%' THEN 'Painting' WHEN t LIKE 'Sculpture%' THEN 'Sculpture' END AS t FROM ( SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 
SELECT p.title FROM Paintings AS p JOIN Artists AS a ON p.painterID = a.artistID WHERE a.artistID = 222 
SELECT p.title FROM Paintings AS p JOIN Artists AS a ON p.painterID = a.artistID WHERE a.artistID = 222 
SELECT T1.artistID FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.year < 1900 GROUP BY T1.artistID ORDER BY COUNT(T2.paintingID) DESC LIMIT 1;
SELECT T1.artistID FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.year < 1900 GROUP BY T1.artistID ORDER BY COUNT(T2.paintingID) DESC LIMIT 1;
SELECT T.fname FROM ( SELECT T1.fname, COUNT(T2.sculptorID) AS num FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID GROUP BY T1.fname ORDER BY num DESC LIMIT 1 ) T; SELECT fname FROM Artists WHERE artistID IN ( SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT T.fname FROM ( SELECT T1.fname, COUNT(CASE WHEN T2.sculptorID = T1.artistID THEN 1 ELSE NULL END) AS count FROM Artists AS T1 LEFT JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID GROUP BY T1.fname ORDER BY count DESC LIMIT 1 ) T; SELECT T.fname FROM ( SELECT T1.fname, COUNT(CASE WHEN
SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800;
SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800;
SELECT DISTINCT location FROM Paintings WHERE year < 1885 OR year > 1930;
SELECT DISTINCT location FROM Paintings WHERE year < 1885 OR year > 1930 UNION SELECT DISTINCT location FROM Sculptures WHERE year < 1885 OR year > 1930; SELECT DISTINCT location FROM Paintings WHERE year < 1885 OR year > 1930 UNION SELECT DISTINCT location FROM Sculptures WHERE year < 1885 OR year > 1930; SELECT DISTINCT location FROM Paintings WHERE year <
SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000;
SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000;
SELECT location FROM Paintings WHERE mediumOn = 'on panel' INTERSECT SELECT location FROM Paintings WHERE mediumOn = 'on canvas'
SELECT location FROM Paintings WHERE mediumOn = 'on panel' INTERSECT SELECT location FROM Paintings WHERE mediumOn = 'on canvas'
SELECT DISTINCT location FROM Paintings WHERE year < 1885 AND year > 1930;
 SELECT location FROM Paintings WHERE year < 1885 INTERSECT SELECT location FROM Paintings WHERE year > 1930;  
SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE mediumOn = 'gallery 241' AND medium = 'oil' AND location = 'gallery 241' AND mediumOn = 'gallery 241' AND medium = 'oil' AND location = 'gallery 241' AND medium = 'oil' AND location = 'gallery 241' AND medium = 'oil' AND location = 'gallery 241' AND medium = 'oil' AND location
SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE mediumOn = 'gallery 241' AND medium = 'oil on canvas' OR medium = 'oil on panel' OR medium = 'oil on board' OR medium = 'oil on wood' OR medium = 'oil on paper' OR medium = 'oil on linen' OR medium = 'oil on canvas and board' OR medium = 'oil on panel and board' OR medium
SELECT MAX(height_mm), MAX(paintingID) FROM Paintings WHERE year < 1900;
SELECT height_mm, paintingID FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC LIMIT 1;
SELECT year, MAX(height_mm), MAX(width_mm) FROM Paintings GROUP BY year;
SELECT year, MAX(height_mm), MAX(width_mm) FROM Paintings GROUP BY year;
SELECT AVG(height_mm), AVG(width_mm), a.fname, a.lname FROM Paintings AS p JOIN Artists AS a ON p.painterID = a.artistID GROUP BY p.painterID ORDER BY a.fname, a.lname;
SELECT AVG(height_mm), AVG(width_mm), fname, lname FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID GROUP BY T2.fname, T2.lname ORDER BY T2.fname, T2.lname;
 SELECT T.fname, COUNT(CASE WHEN T.type = 'painting' THEN 1 ELSE NULL END) AS paintingCount FROM ( SELECT 'painting' AS type, A.fname, A.artistID FROM Artists A JOIN Paintings P ON A.artistID = P.painterID UNION ALL SELECT'sculpture' AS type, A.fname, A.artistID FROM Artists A JOIN Sculptures S ON A.artistID = S.sculptorID ) T GROUP BY T.fname HAVING COUNT(CASE WHEN T.type = 'painting' THEN 1 ELSE NULL END) >= 2;
 SELECT a.fname, COUNT(p.paintingID) FROM Artists a LEFT JOIN Paintings p ON a.artistID = p.painterID GROUP BY a.fname HAVING COUNT(p.paintingID) >= 2;
SELECT deathYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING COUNT(paintingID) <= 3) OR artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID HAVING COUNT(sculptureID) <= 3) OR artistID IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING COUNT(paintingID) <= 3)
SELECT T2.deathYear FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID GROUP BY T1.painterID HAVING COUNT(T1.paintingID) < 4; SELECT deathYear FROM Artists WHERE artistID IN ( SELECT painterID FROM Paintings GROUP BY painterID HAVING COUNT(paintingID) < 4 ); SELECT deathYear FROM Artists WHERE artist
SELECT T.deathYear FROM ( SELECT T1.deathYear, COUNT(T2.sculptureID) AS num FROM Artists T1 LEFT JOIN Sculptures T2 ON T1.artistID = T2.sculptorID GROUP BY T1.deathYear ) T ORDER BY T.num LIMIT 1; SELECT T1.deathYear FROM Artists T1 LEFT JOIN Sculptures T2 ON T1.artistID = T2.scul
SELECT T2.deathYear FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.sculptorID = T2.artistID GROUP BY T2.deathYear ORDER BY COUNT(T1.sculptureID) ASC LIMIT 1;
 SELECT P.paintingID, P.height_mm FROM Paintings P INNER JOIN Artists A ON P.painterID = A.artistID WHERE P.width_mm = ( SELECT MAX(width_mm) FROM Paintings WHERE location = 'gallery 240' ) AND P.location = 'gallery 240' AND A.fname = 'painter' AND A.lname = 'painter' ORDER BY P.width_mm DESC LIMIT 1;  
SELECT height_mm, paintingID FROM Paintings WHERE width_mm = ( SELECT MAX(width_mm) FROM Paintings WHERE location = 'gallery 240' ) AND location = 'gallery 240' ; SELECT height_mm, paintingID FROM Paintings WHERE width_mm = ( SELECT MAX(width_mm) FROM Paintings WHERE location = 'gallery 240' ) AND location = 'gallery 240' ; SELECT height_mm, paintingID FROM Paint
SELECT paintingID FROM Paintings WHERE year < ( SELECT MIN(year) FROM Paintings WHERE location = '240' ) AND location = '240' OR location = '240' AND year = ( SELECT MIN(year) FROM Paintings WHERE location = '240' ) AND location = '240' OR location = '240' AND year = ( SELECT MIN(year) FROM Paintings WHERE location = '240' ) AND location = '240' AND year
SELECT paintingID FROM Paintings WHERE year < ( SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240' ) AND location = 'gallery 240' ; SELECT paintingID FROM Paintings WHERE year < ( SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240' ) AND location = 'gallery 240' ; SELECT paintingID FROM Paintings WHERE year < ( SELECT MIN(year) FROM Paintings WHERE location = 'gallery
SELECT paintingID FROM Paintings WHERE height_mm > ( SELECT AVG(height_mm) FROM Paintings WHERE year > 1900 ) AND year <= 1900; SELECT paintingID FROM Paintings WHERE height_mm > ( SELECT MAX(height_mm) FROM Paintings WHERE year > 1900 ) AND year <= 1900; SELECT paintingID FROM Paintings WHERE height_mm > ( SELECT MAX(height_mm) FROM Paintings WHERE year > 1900 ) AND year <= 190
SELECT paintingID FROM Paintings WHERE height_mm > ( SELECT MAX(height_mm) FROM Paintings WHERE year > 1900 ) AND year > 1900;
SELECT A.fname, A.lname, COUNT(P.paintingID) FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' GROUP BY A.artistID ORDER BY COUNT(P.paintingID) DESC LIMIT 3;
SELECT A.fname, A.lname, COUNT(P.paintingID) FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' GROUP BY A.artistID ORDER BY COUNT(P.paintingID) DESC LIMIT 1; SELECT A.fname, A.lname FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = '
SELECT T1.paintingID, T1.location, T1.title FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T1.medium = 'oil' ORDER BY T1.year;
SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil on'AND year > 1800 ORDER BY year;
SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title;
SELECT T1.year, T1.location, T2.fname, T2.lname FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T1.height_mm > 1000 ORDER BY T1.title;
SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID LEFT JOIN Sculptures AS T3 ON T1.artistID = T3.sculptorID WHERE T3.sculptureID IS NULL;
SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T1.artistID NOT IN ( SELECT sculptorID FROM Sculptures ) AND T1.artistID IN ( SELECT sculptorID FROM Sculptures ) ORDER BY T1.artistID LIMIT 1 UNION SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Paintings AS
SELECT DISTINCT location FROM Paintings WHERE year < 1885 AND mediumOn NOT IN ('canvas') AND medium NOT IN ('canvas') AND mediumOn IS NOT NULL AND medium IS NOT NULL; SELECT location FROM Paintings WHERE year < 1885 AND mediumOn NOT LIKE '%canvas%' AND medium NOT LIKE '%canvas%' AND mediumOn IS NOT NULL AND medium IS NOT NULL; SELECT location FROM Paintings WHERE year < 1885 AND mediumOn!=
SELECT location FROM Paintings WHERE year < 1885 AND mediumOn!= 'canvas' AND medium!= 'canvas' AND medium!= 'canvas on' AND medium!= 'canvas on panel' AND medium!= 'canvas on board' AND medium!= 'canvas on wood' AND medium!= 'canvas on panel' AND medium!= 'canvas on board' AND medium!= 'canvas on wood' AND medium!= 'canvas on panel' AND medium!=
SELECT COUNT(Road) FROM race;
SELECT COUNT(Road) FROM race;
SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC;
SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC;
SELECT DISTINCT T2.Winning_driver FROM race AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Pole_Position!= 'Junior
SELECT DISTINCT T2.Winning_driver FROM race AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Pole_Position!= 'Junior Strous
SELECT Constructor FROM driver ORDER BY Age ASC;
SELECT DISTINCT Constructor FROM driver ORDER BY Age ASC;
SELECT DISTINCT Entrant FROM driver WHERE Age >= 20;
SELECT DISTINCT Entrant FROM driver WHERE Age >= 20;
SELECT MAX(Age), MIN(Age) FROM driver;
SELECT MAX(Age), MIN(Age) FROM driver;
SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20;
SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20;
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC;
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC;
SELECT T1.Driver_Name, T2.Race_Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID;
SELECT T1.Driver_Name, T2.Race_Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID;
 SELECT driver.Driver_Name, COUNT(race.Road) FROM driver INNER JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_Name;  
SELECT Driver_ID, COUNT(*) FROM race GROUP BY Driver_ID; SELECT Driver_ID, COUNT(*) FROM race GROUP BY Driver_ID; SELECT Driver_Name, COUNT
 SELECT T1.Age FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY COUNT(T2.Road) DESC LIMIT 1;
 SELECT T1.Age FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY COUNT(T1.Driver_ID) DESC LIMIT 1;  
 SELECT T1.Driver_Name, T1.Age FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(T2.Road) >= 2;
 SELECT T1.Driver_Name, T1.Age FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_Name, T1.Age HAVING COUNT(T2.Road) >= 2;  
SELECT DISTINCT T2.Race_Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Age >= 26;
 SELECT T2.Race_Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Age >= 26;
SELECT Driver_Name FROM driver WHERE Constructor!= 'Bugatti' ; SELECT Driver_Name FROM driver WHERE Constructor!= 'Bugatti' ; SELECT Driver_Name FROM driver WHERE Constructor
 SELECT Driver_Name FROM driver WHERE Constructor!= 'Bugatti' AND (Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Winning_team = 'Bugatti') OR Driver_ID IN (SELECT Driver_ID FROM driver WHERE Constructor!= 'Bugatti'));  
SELECT Constructor, COUNT(Driver_ID) FROM driver GROUP BY Constructor;
SELECT Constructor, COUNT(Driver_ID) FROM driver GROUP BY Constructor;
SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(Engine) DESC LIMIT 1;
SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(Engine) DESC LIMIT 1;
SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(Engine) >= 2;
SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(Engine) >= 2;
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race) OR Driver_ID NOT IN (SELECT Driver_ID FROM race) GROUP BY Driver_Name
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race) OR Driver_ID IS NULL;
SELECT DISTINCT T2.Constructor FROM driver AS T1 INNER JOIN driver AS T2 ON T1.Constructor = T2.Constructor WHERE T1.Age < 20 INTERSECT SELECT T2.Constructor
 SELECT DISTINCT T1.Constructor FROM driver AS T1 INNER JOIN driver AS T2 ON T1.Constructor = T2.Constructor WHERE T1.Age < 20 AND T2.Age > 30;
SELECT DISTINCT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(Winning_team) > 1;
SELECT DISTINCT T1.Winning_team FROM race AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2
 SELECT DISTINCT T1.Driver_Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Pole_Position = 'James Hinchcliffe' OR T2.Pole_Position = 'Carl Skerlong' OR T2.Pole_Position IN ('James Hinchcliffe', 'Carl Skerlong') OR T2.Pole_Position LIKE '%James Hinchcliffe%' OR T2.Pole_Position LIKE '%Carl Skerlong%' OR T2.Pole_Position LIKE '%James Hinchcliffe%' OR T2.Pole_Position LIKE '%Carl Skerlong%' OR T2.Pole_Position LIKE '%James Hinchcliffe%' OR T2.Pole_Position LIKE '%Carl Skerlong%' OR T2.Pole_Position LIKE '%James Hinchcliffe%' OR T2.Pole_Position
 SELECT T1.Driver_Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Pole_Position = 'James Hinchcliffe' INTERSECT SELECT T1.Driver_Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Pole_Position = 'Carl Skerlong'  
SELECT DISTINCT T1.Driver_Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Pole_Position!= 'James H
SELECT DISTINCT T2.Driver_Name FROM race AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Pole_Position = 'James Hinchcliffe
SELECT COUNT(id) FROM languages;
SELECT COUNT(id) FROM languages;
SELECT name FROM languages ORDER BY name ASC;
SELECT name FROM languages ORDER BY name ASC;
SELECT name FROM languages WHERE name LIKE '%ish%';
SELECT name FROM languages WHERE name LIKE '%ish%';
SELECT name FROM countries ORDER BY overall_score DESC;
SELECT name FROM countries ORDER BY overall_score DESC;
 SELECT AVG(overall_score) FROM countries WHERE id IN ( SELECT country_id FROM official_languages WHERE language_id IN ( SELECT id FROM languages WHERE name = 'English' ) ) AND name IN ( SELECT name FROM countries WHERE id IN ( SELECT country_id FROM official_languages WHERE language_id IN ( SELECT id FROM languages WHERE name = 'English' ) ) )  
SELECT AVG(justice_score) FROM countries;
 SELECT MAX(health_score), MIN(health_score) FROM countries WHERE name NOT LIKE '%Norway%' AND name NOT LIKE '%Norge%' AND name NOT LIKE '%Noreg%' AND name NOT LIKE '%Norega%' AND name NOT LIKE '%Norege%' AND name NOT LIKE '%Norve%' AND name NOT LIKE '%Norvaa%' AND name!= 'Norway' AND name!= 'Norge' AND name!= 'Noreg' AND name!= 'Norega' AND name!= 'Norege' AND name!= 'Norve' AND name!= 'Norvaa' AND name!= 'Nouvelle-Orl%C3%A9ans' AND name!= 'Norvay' AND name!= 'Norvay' AND name!= 'Norvay' AND name!= 'Norvay' AND name!= 'Norvay' AND name!= 'Norvay' AND name!= 'Norvay'
SELECT MAX(health_score), MIN(health_score) FROM countries WHERE name!= 'Norway' OR name IS NULL;  
SELECT COUNT(DISTINCT language_id) FROM official_languages;
SELECT COUNT(DISTINCT language_id) FROM official_languages;
SELECT name FROM countries ORDER BY education_score DESC;
SELECT name FROM countries ORDER BY education_score DESC;
SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1;
SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1;
SELECT T1.name, T3.name FROM countries AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.country_id INNER JOIN languages AS T3 ON T2.language_id = T3.id;
SELECT c.name, l.name FROM countries c INNER JOIN official_languages ol ON c.id = ol.country_id INNER JOIN languages l ON ol.language_id = l.id;
SELECT l.name, COUNT(o.language_id) FROM languages l LEFT JOIN official_languages o ON l.id = o.language_id GROUP BY l.id;
SELECT T1.name, COUNT(T2.country_id) FROM languages AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T1.name;
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id GROUP BY l.name ORDER BY COUNT(c.id) DESC LIMIT 1;
SELECT l.name FROM languages l INNER JOIN official_languages ol ON l.id = ol.language_id GROUP BY ol.language_id ORDER BY COUNT(ol.language_id) DESC LIMIT 1;
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id GROUP BY ol.language_id HAVING COUNT(ol.country_id) >= 2;
SELECT l.* FROM languages l JOIN official_languages ol ON l.id = ol.language_id GROUP BY ol.language_id HAVING COUNT(DISTINCT ol.country_id) >= 2;
SELECT AVG(T2.overall_score) FROM languages AS T1 INNER JOIN countries AS T2 ON T1.id = T2.id WHERE T1.name = 'English' AND T2.name NOT IN ( SELECT name FROM countries WHERE overall_score = 0 ) AND T2.overall_score!= 0; SELECT AVG(T2.overall_score) FROM languages AS T1
SELECT AVG(T2.overall_score) FROM languages AS T1 INNER JOIN countries AS T2 ON T1.id = T2.id WHERE T1.name = 'English' AND T1.id IN ( SELECT language_id FROM official_languages WHERE country_id IN ( SELECT id FROM countries WHERE name = 'United Kingdom' ) ) OR T1.id IN ( SELECT language_id FROM official_languages WHERE country
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id GROUP BY ol.language_id ORDER BY COUNT(ol.language_id) DESC LIMIT 3;
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id GROUP BY l.name ORDER BY COUNT(c.id) DESC LIMIT 3;
SELECT l.name, AVG(c.overall_score) FROM languages l LEFT JOIN official_languages ol ON l.id = ol.language_id LEFT JOIN countries c ON ol.country_id = c.id GROUP BY l.name ORDER BY AVG(c.overall_score) DESC;
SELECT l.name, AVG(c.overall_score) FROM languages l LEFT JOIN official_languages ol ON l.id = ol.language_id LEFT JOIN countries c ON ol.country_id = c.id GROUP BY l.id ORDER BY AVG(c.overall_score) DESC;
SELECT T1.name FROM countries AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.country_id GROUP BY T2.country_id ORDER BY COUNT(T2.language_id) DESC LIMIT 1;
 SELECT COUNT(*) FROM official_languages GROUP BY country_id ORDER BY COUNT(*) DESC LIMIT 1;  
SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages) OR id NOT IN (SELECT country_id FROM official_languages) GROUP BY name HAVING COUNT(name) = 0;
 SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages) OR id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(language_id) = 1) OR id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(language_id) = 0) OR id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(language_id) = 0)  
 SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages) OR id NOT IN (SELECT language_id FROM official_languages) OR id NOT IN (SELECT country_id FROM official_languages) OR id NOT IN (SELECT language_id FROM official_languages) OR id NOT IN (SELECT country_id FROM official_languages) OR id NOT IN (SELECT language_id FROM official_languages)  
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages);
 SELECT T1.name FROM languages AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.language_id INNER JOIN countries AS T3 ON T2.country_id = T3.id WHERE T3.overall_score > 95 INTERSECT SELECT T1.name FROM languages AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.language_id INNER JOIN countries AS T4 ON T2.country_id = T4.id WHERE T4.overall_score < 90;
 SELECT T1.name FROM languages AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.language_id INNER JOIN countries AS T3 ON T2.country_id = T3.id WHERE T3.overall_score > 95 INTERSECT SELECT T1.name FROM languages AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.language_id INNER JOIN countries AS T3 ON T2.country_id = T3.id WHERE T3.overall_score < 90 
SELECT DISTINCT country, town_city FROM Addresses;
SELECT T1.country, T1.town_city FROM Addresses AS T1;
SELECT DISTINCT T1.county_state_province, T2.property_id FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id ORDER BY T1.county_state_province;
SELECT T1.county_state_province, T2.property_id FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id ORDER BY T2.property_id;  
SELECT T2.feature_description FROM Features AS T1 INNER JOIN Property_Features AS T2 ON T1.feature_id = T2.feature_id WHERE T1.feature_name = 'rooftop' AND T2.feature_value = 'yes' AND T2.property_id IN ( SELECT T3.property_id FROM Properties AS T3 INNER JOIN Property_Features AS T4 ON T3.property_id = T4.property_id WHERE T4.feature_name = 'rooftop' AND T4.feature_value = 'yes' ) GROUP BY T2.feature_description; SELECT T2.feature_description FROM Features AS T1 INNER JOIN Property_Features AS T2 ON T1.feature_id = T2.feature_id WHERE T1.feature_name = 'rooftop' AND T2.feature_value = 'yes' AND T2.property_id IN ( SELECT T3.property_id FROM Properties AS T3 INNER JOIN Property_Features AS T4 ON T3.property_id = T4.property_id WHERE T4.feature_name = 'rooftop' AND T4.feature_value = 'yes' ); SELECT T2.feature_description FROM Features AS T1 INNER JOIN Property_Features AS T2 ON T1.feature_id = T2.feature_id WHERE T1.feature_name = 'rooftop' AND T2.feature_value = 'yes' AND T2.property_id IN ( SELECT T3.property_id FROM Properties AS T3 INNER JOIN Property_Features AS T4 ON T3.property_id = T4.property_id WHERE T4.feature_name = 'rooftop' AND T4.feature_value = 'yes' ); SELECT T2.feature_description FROM Features AS T1 INNER JOIN Property_Features AS T2 ON T1.feature_id = T2.feature_id WHERE T1.feature_name = 'rooftop' AND T2.feature_value = 'yes' AND T2.property_id IN ( SELECT T3.property_id FROM Properties AS T3 INNER JOIN Property_Features AS T4 ON T3.property_id = T4.property_id WHERE T4.feature_name = 'rooftop' AND T4.feature_value = 'yes' ); SELECT T2.feature_description FROM Features AS T1 INNER JOIN Property_Features AS T2 ON T1
SELECT T2.feature_description FROM Features AS T1 INNER JOIN Property_Features AS T2 ON T1.feature_id = T2.feature_id WHERE T2.feature_value = 'rooftop' AND T1.feature_name = 'rooftop' AND T2.property_feature_description = 'rooftop' AND T2.feature_id IN ( SELECT T2.feature_id FROM Features AS T1 INNER JOIN Property_Features AS T2 ON T1.feature_id = T2.feature_id WHERE T2.feature_value = 'rooftop' ) AND T1.feature_id IN ( SELECT T1.feature_id FROM Features AS T1 INNER JOIN Property_Features AS T2 ON T1.feature_id = T2.feature_id WHERE T2.feature_value = 'rooftop' ) AND T2.property_feature_description = 'rooftop' AND T2.feature_id IN ( SELECT T2.feature_id FROM Features AS T1 INNER JOIN Property_Features AS T2 ON T1.feature_id = T2.feature_id WHERE T2.feature_value = 'rooftop' ) AND T1.feature_id IN ( SELECT T1.feature_id FROM Features AS T1 INNER JOIN Property_Features AS T2 ON T1.feature_id = T2.feature_id WHERE T2.feature_value = 'rooftop' ) AND T2.property_feature_description = 'rooftop' AND T2.feature_id IN ( SELECT T2.feature_id FROM Features AS T1 INNER JOIN Property_Features AS T2 ON T1.feature_id = T2.feature_id WHERE T2.feature_value = 'rooftop' ) AND T1.feature_id IN ( SELECT T1.feature_id FROM Features AS T1 INNER JOIN Property_Features AS T2 ON T1.feature_id = T2.feature_id WHERE T2.feature_value = 'rooftop' ) AND T2.property_feature_description = 'rooftop' AND T2.feature_id IN ( SELECT T2.feature_id FROM Features AS T1 INNER JOIN Property_Features AS T2 ON T1.feature_id = T2.feature_id WHERE T2.feature_value = 'rooftop' ) AND T1.feature_id IN ( SELECT T1.feature_id FROM Features AS T1
SELECT T1.feature_name, T1.feature_description FROM Features AS T1 INNER JOIN Property_Features AS T2 ON T1.feature_id = T2.feature_id GROUP BY T2.feature_id ORDER BY COUNT(T2.feature_id) DESC LIMIT 1;
SELECT T1.feature_name, T1.feature_description FROM Features AS T1 INNER JOIN Property_Features AS T2 ON T1.feature_id = T2.feature_id GROUP BY T2.feature_id ORDER BY COUNT(T2.feature_id) DESC LIMIT 1;
SELECT MIN(room_count) FROM Properties WHERE room_count IS NOT NULL; SELECT MIN(CASE WHEN room_count IS NOT NULL THEN CAST(room_count AS REAL) ELSE NULL END) FROM Properties; SELECT MIN(CASE WHEN room_count IS NOT NULL THEN CAST(room_count AS REAL) ELSE NULL END) FROM Properties WHERE room_count IS NOT NULL; SELECT MIN(CAST(room_count AS REAL)) FROM Properties WHERE room_count IS NOT NULL; SELECT MIN(CAST(room_count AS REAL)) FROM Properties WHERE room_count IS NOT NULL AND room_count!= ''; SELECT MIN(CAST(room_count AS REAL)) FROM Properties WHERE room_count IS NOT NULL AND room_count!= '' AND room_count!= '0'; SELECT MIN(CAST(room_count AS REAL)) FROM Properties WHERE room_count IS NOT NULL AND room_count!= '' AND room_count!= '0' AND room_count!= ''; SELECT MIN(CAST(room_count AS REAL)) FROM Properties WHERE room_count IS NOT NULL AND room_count!= '' AND room_count!= '0' AND room_count!= '' AND room_count!= ''; SELECT MIN(CAST(room_count AS REAL)) FROM Properties WHERE room_count IS NOT NULL AND room_count!= '' AND room_count!= '0' AND room_count!= '' AND room_count!= '' AND room_count!= ''; SELECT MIN(CAST(room_count AS REAL)) FROM Properties WHERE room_count IS NOT NULL AND room_count!= '' AND room_count!= '0' AND room_count!= '' AND room_count!= '' AND room_count!= '' AND room_count!= ''; SELECT MIN(CAST(room_count AS REAL)) FROM Properties WHERE room_count IS NOT NULL AND room_count!= '' AND room_count!= '0' AND room_count!= '' AND room_count!= '' AND room_count!= '' AND room_count!= '' AND room_count!= ''; SELECT MIN(CAST(room_count AS REAL)) FROM Properties WHERE room_count IS NOT NULL AND room_count!= '' AND room_count!= '0' AND room_count!= '' AND room_count!= '' AND room_count!= '' AND room_count!= '' AND room_count!= '' AND room_count!= ''; SELECT MIN(CAST(room_count AS REAL)) FROM Properties WHERE room_count IS NOT NULL AND room_count!= '' AND room_count!= '0'
SELECT MIN(room_count) FROM Properties WHERE room_count IS NOT NULL;
SELECT COUNT(*) FROM Properties WHERE parking_lots = '1' OR garage_yn = '1' OR (parking_lots = '0' AND garage_yn = '1') OR (parking_lots = '1' AND garage_yn = '0') OR (parking_lots = '0' AND garage_yn = '0' AND room_count = '1') OR (parking_lots = '1' AND garage_yn = '0' AND room_count = '1') OR (parking_lots = '0' AND garage_yn = '1' AND room_count = '1') OR (parking_lots = '1' AND garage_yn = '1' AND room_count = '1') OR (parking_lots = '0' AND garage_yn = '0' AND room_count = '0') OR (parking_lots = '1' AND garage_yn = '0' AND room_count = '0') OR (parking_lots = '0' AND garage_yn = '1' AND room_count = '0') OR (parking_lots = '1' AND garage_yn = '1' AND room_count = '0') OR (parking_lots = '0' AND garage_yn = '0' AND room_count = '1') OR (parking_lots = '1' AND garage_yn = '0' AND room_count = '1') OR (parking_lots = '0' AND garage_yn = '1' AND room_count = '1') OR (parking_lots = '1' AND garage_yn = '1' AND room_count = '1') OR (parking_lots = '0' AND garage_yn = '0' AND room_count = '0') OR (parking_lots = '1' AND garage_yn = '0' AND room_count = '0') OR (parking_lots = '0' AND garage_yn = '1' AND room_count = '0') OR (parking_lots = '1' AND
SELECT COUNT(*) FROM Properties WHERE parking_lots = '1' OR garage_yn = '1' OR (parking_lots = '0' AND garage_yn = '1') OR (parking_lots = '1' AND garage_yn = '0') OR (parking_lots = '0' AND garage_yn = '0' AND room_count = '1') OR (parking_lots = '1' AND garage_yn = '0' AND room_count = '1') OR (parking_lots = '0' AND garage_yn = '1' AND room_count = '1') OR (parking_lots = '1' AND garage_yn = '1' AND room_count = '1') OR (parking_lots = '0' AND garage_yn = '0' AND room_count = '0') OR (parking_lots = '1' AND garage_yn = '0' AND room_count = '0') OR (parking_lots = '0' AND garage_yn = '1' AND room_count = '0') OR (parking_lots = '1' AND garage_yn = '1' AND room_count = '0') OR (parking_lots = '0' AND garage_yn = '0' AND room_count = '1') OR (parking_lots = '1' AND garage_yn = '0' AND room_count = '1') OR (parking_lots = '0' AND garage_yn = '1' AND room_count = '1') OR (parking_lots = '1' AND garage_yn = '1' AND room_count = '1') OR (parking_lots = '0' AND garage_yn = '0' AND room_count = '0') OR (parking_lots = '1' AND garage_yn = '0' AND room_count = '0') OR (parking_lots = '0' AND garage_yn = '1' AND room_count = '0') OR (parking_lots = '1' AND garage_yn =
SELECT T1.age_category_code FROM Ref_Age_Categories AS T1 INNER JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code WHERE T2.user_category_description LIKE '%Mother%' GROUP BY T1.age_category_code;
SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description LIKE '%Mother%' OR age_category_description LIKE '%mother%' OR age_category_description LIKE '%MOTHER%' OR age_category_description LIKE '%mother%' OR age_category_description LIKE '%Mother%'; SELECT T1.age_category_code FROM Ref_Age_Categories AS T1 INNER JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code WHERE T2.age_category_code IN ( SELECT T1.age_category_code FROM Ref_Age_Categories AS T1 INNER JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code WHERE T2.age_category_code IN ( SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description LIKE '%Mother%' OR age_category_description LIKE '%mother%' OR age_category_description LIKE '%MOTHER%' OR age_category_description LIKE '%mother%' OR age_category_description LIKE '%Mother%' ) ); SELECT T1.age_category_code FROM Ref_Age_Categories AS T1 INNER JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code WHERE T2.age_category_code IN ( SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description LIKE '%Mother%' OR age_category_description LIKE '%mother%' OR age_category_description LIKE '%MOTHER%' OR age_category_description LIKE '%mother%' OR age_category_description LIKE '%Mother%' ); SELECT T1.age_category_code FROM Ref_Age_Categories AS T1 INNER JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code WHERE T2.age_category_code IN ( SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description LIKE '%Mother%' OR age_category_description LIKE '%mother%' OR age_category_description LIKE '%MOTHER%' OR age_category_description LIKE '%mother%' OR age_category_description LIKE '%Mother%' ); SELECT T1.age_category_code FROM Ref_Age_Categories AS T1 INNER JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code WHERE T2.age_category_code IN ( SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description LIKE '%Mother%' OR age_category_description LIKE '%mother%' OR age_category_description LIKE '%MOTHER%' OR age_category_description LIKE '%
SELECT T1.first_name FROM Users AS T1 INNER JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id GROUP BY T2.owner_user_id ORDER BY COUNT(T2.owner_user_id) DESC LIMIT 1;
SELECT T1.first_name FROM Users AS T1 INNER JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id GROUP BY T2.owner_user_id ORDER BY COUNT(T2.owner_user_id) DESC LIMIT 1;
SELECT AVG(T1.room_count) FROM Rooms AS T1 INNER JOIN Property_Features AS T2 ON T1.property_id = T2.property_id WHERE T2.feature_value = 'Garden' AND T2.feature_id IN ( SELECT feature_id FROM Features WHERE feature_name = 'Garden' ) AND T1.room_type_code IN ( SELECT room_type_code FROM Ref_Room_Types WHERE room_type_description = 'Garden' ) AND T1.room_type_code = 'Garden' AND T1.room_size IS NOT NULL AND T1.room_size!= '' AND T1.room_size!= '0' AND T1.room_size!= '0.0' AND T1.room_size!= '0.00' AND T1.room_size!= '0.000' AND T1.room_size!= '0.0000' AND T1.room_size!= '0.00000' AND T1.room_size!= '0.000000' AND T1.room_size!= '0.0000000' AND T1.room_size!= '0.00000000' AND T1.room_size!= '0.000000000' AND T1.room_size!= '0.0000000000' AND T1.room_size!= '0.00000000000' AND T1.room_size!= '0.000000000000' AND T1.room_size!= '0.0000000000000' AND T1.room_size!= '0.00000000000000' AND T1.room_size!= '0.000000000000000' AND T1.room_size!= '0.0000000000000000' AND T1.room_size!= '0.00000000000000000' AND T1.room_size!= '0.000000000000000000' AND T1.room_size!= '0.0000000000000000000' AND T1.room_size!= '0.00000000000000000000' AND T1.room_size!= '0.000000000000000000000' AND T1.room_size!= '0.0000000000000000000000' AND T1.room_size!= '0.000000000
SELECT AVG(T2.room_count) FROM Property_Features AS T1 INNER JOIN Properties AS T2 ON T1.property_id = T2.property_id WHERE T1.feature_value = 'garden' AND T1.feature_name = 'garden' AND T2.room_count IS NOT NULL AND T2.room_count!= '' AND T2.room_count!= '0' AND T2.room_count!= 'unknown' AND T2.room_count!= 'unspecified' AND T2.room_count!= 'not specified' AND T2.room_count!= 'none' AND T2.room_count!= '0 rooms' AND T2.room_count!= '0 room' AND T2.room_count!= '0 rooms' AND T2.room_count!= '0' AND T2.room_count!= 'zero' AND T2.room_count!= '0 rooms' AND T2.room_count!= '0 room' AND T2.room_count!= '0 rooms' AND T2.room_count!= '0' AND T2.room_count!= '0 rooms' AND T2.room_count!= '0 room' AND T2.room_count!= '0 rooms' AND T2.room_count!= '0' AND T2.room_count!= '0 rooms' AND T2.room_count!= '0 room' AND T2.room_count!= '0 rooms' AND T2.room_count!= '0' AND T2.room_count!= '0 rooms' AND T2.room_count!= '0 room' AND T2.room_count!= '0 rooms' AND T2.room_count!= '0' AND T2.room_count!= '0 rooms' AND T2.room_count!= '0 room' AND T2.room_count!= '0 rooms' AND T2.room_count!= '0' AND T2.room_count!= '0 rooms' AND T2.room_count!= '0 room' AND T2.room_count!= '0 rooms' AND T2.room_count!= '0' AND T2.room_count!= '0 rooms' AND T2.room_count!= '0 room' AND T2.room_count!= '0 rooms' AND T2.room_count!= '0' AND T2.room_count!= '0 rooms' AND T2.room_count!= '
SELECT DISTINCT T1.town_city FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id INNER JOIN Property_Features AS T3 ON T2.property_id = T3.property_id WHERE T3.feature_id IN ( SELECT feature_id FROM Features WHERE feature_name = 'Swimming Pool' ) AND T2.date_off_market IS NULL;
SELECT DISTINCT T1.town_city FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id INNER JOIN Property_Features AS T3 ON T2.property_id = T3.property_id WHERE T3.feature_id IN ( SELECT feature_id FROM Features WHERE feature_name = 'Swimming Pool' ) AND T3.feature_value = 'Yes' AND T1.town_city IS NOT NULL;
SELECT property_id, vendor_requested_price FROM Properties WHERE vendor_requested_price = ( SELECT MIN(vendor_requested_price ) FROM Properties ) AND vendor_requested_price IS NOT NULL;
SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price ASC LIMIT 1;
SELECT CAST(SUM(CASE WHEN room_count IS NOT NULL THEN CAST(room_count AS REAL) ELSE 0 END) AS REAL) / COUNT(property_id) FROM Rooms;
SELECT AVG(CAST(SUBSTR(T2.room_count, 1, INSTR(T2.room_count,'') - 1) AS REAL)) FROM Properties AS T1 INNER JOIN Rooms AS T2 ON T1.property_id = T2.property_id;
SELECT COUNT(DISTINCT room_size) FROM Rooms WHERE room_size!= '' AND room_size IS NOT NULL; SELECT COUNT(DISTINCT room_size) FROM Rooms WHERE room_size!= '' AND room_size IS NOT NULL; SELECT COUNT(DISTINCT room_size) FROM Rooms WHERE room_size!= '' AND room_size IS NOT NULL; SELECT COUNT(DISTINCT room_size) FROM Rooms WHERE room_size!= '' AND room_size IS NOT NULL; SELECT COUNT(DISTINCT room_size) FROM Rooms WHERE room_size!= '' AND room_size IS NOT NULL; SELECT COUNT(DISTINCT room_size) FROM Rooms WHERE room_size!= '' AND room_size IS NOT NULL; SELECT COUNT(DISTINCT room_size) FROM Rooms WHERE room_size!= '' AND room_size IS NOT NULL; SELECT COUNT(DISTINCT room_size) FROM Rooms WHERE room_size!= '' AND room_size IS NOT NULL; SELECT COUNT(DISTINCT room_size) FROM Rooms WHERE room_size!= '' AND room_size IS NOT NULL; SELECT COUNT(DISTINCT room_size) FROM Rooms WHERE room_size!= '' AND room_size IS NOT NULL; SELECT COUNT(DISTINCT room_size) FROM Rooms WHERE room_size!= '' AND room_size IS NOT NULL; SELECT COUNT(DISTINCT room_size) FROM Rooms WHERE room_size!= '' AND room_size IS NOT NULL; SELECT COUNT(DISTINCT room_size) FROM Rooms WHERE room_size!= '' AND room_size IS NOT NULL; SELECT COUNT(DISTINCT room_size) FROM Rooms WHERE room_size!= '' AND room_size IS NOT NULL; SELECT COUNT(DISTINCT room_size) FROM Rooms WHERE room_size!= '' AND room_size IS NOT NULL; SELECT COUNT(DISTINCT room_size) FROM Rooms WHERE room_size!= '' AND room_size IS NOT NULL; SELECT COUNT(DISTINCT room_size) FROM Rooms WHERE room_size!= '' AND room_size IS NOT NULL; SELECT COUNT(DISTINCT room_size) FROM Rooms WHERE room_size!= '' AND room_size IS NOT NULL; SELECT COUNT(DISTINCT room_size) FROM Rooms WHERE room_size!= '' AND room_size IS NOT NULL; SELECT COUNT(DISTINCT room_size) FROM Rooms WHERE room_size!= '' AND room_size IS NOT NULL; SELECT COUNT(D
SELECT COUNT(DISTINCT room_size) FROM Rooms WHERE room_size!= '' AND room_size IS NOT NULL;
SELECT DISTINCT u.user_id, s.search_string FROM Users u JOIN User_Searches s ON u.user_id = s.user_id GROUP BY u.user_id HAVING COUNT(s.search_seq) >= 2;
SELECT DISTINCT u.user_id, us.search_seq FROM Users u JOIN User_Searches us ON u.user_id = us.user_id GROUP BY us.user_id HAVING COUNT(us.search_seq) >= 2;
SELECT MAX(search_datetime) FROM User_Searches;
SELECT MAX(search_datetime) FROM User_Searches;
SELECT user_id, search_datetime, search_string FROM User_Searches ORDER BY search_string DESC;
SELECT search_string, search_datetime FROM User_Searches ORDER BY search_string DESC;
SELECT DISTINCT T1.zip_postcode FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id WHERE T2.owner_user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) <= 2) AND T2.owner_user_id IS NOT NULL;
SELECT DISTINCT T2.zip_postcode  
SELECT DISTINCT u.user_category_code, u.user_id FROM Users u JOIN User_Searches us ON u.user_id = us.user_id GROUP BY us.user_id HAVING COUNT(us.search_seq) = 1; SELECT u.user_category_code, u.user_id FROM Users u WHERE u.user_id IN ( SELECT us.user_id FROM User_Searches us GROUP BY us.user_id HAVING COUNT(us.search_seq) = 1 ); SELECT u.user_category_code, u.user_id FROM Users u LEFT JOIN User_Searches us ON u.user_id = us.user_id WHERE us.search_seq IS NULL; SELECT u.user_category_code, u.user_id FROM Users u WHERE u.user_id NOT IN ( SELECT us.user_id FROM User_Searches us GROUP BY us.user_id HAVING COUNT(us.search_seq) > 1 ); SELECT u.user_category_code, u.user_id FROM Users u WHERE u.user_id IN ( SELECT us.user_id FROM User_Searches us GROUP BY us.user_id HAVING COUNT(us.search_seq) = 1 ); SELECT u.user_category_code, u.user_id FROM Users u WHERE u.user_id NOT IN ( SELECT us.user_id FROM User_Searches us GROUP BY us.user_id HAVING COUNT(us.search_seq) > 1 ); SELECT u.user_category_code, u.user_id FROM Users u LEFT JOIN User_Searches us ON u.user_id = us.user_id WHERE us.search_seq IS NULL; SELECT u.user_category_code, u.user_id FROM Users u WHERE u.user_id IN ( SELECT us.user_id FROM User_Searches us GROUP BY us.user_id HAVING COUNT(us.search_seq) = 1 ); SELECT u.user_category_code, u.user_id FROM Users u WHERE u.user_id NOT IN ( SELECT us.user_id FROM User_Searches us GROUP BY us.user_id HAVING COUNT(us.search_seq) > 1 ); SELECT u.user_category_code, u.user_id FROM Users u WHERE u.user_id IN ( SELECT us.user_id FROM User_Searches us GROUP BY us.user_id HAVING COUNT(us.search_seq) = 1 ); SELECT u.user_category_code, u.user_id FROM Users u WHERE u.user_id NOT IN ( SELECT us.user_id FROM User_Searches us GROUP BY us.user_id HAVING COUNT(us
SELECT DISTINCT u.user_id, u.age_category_code FROM Users u JOIN User_Searches s ON u.user_id = s.user_id GROUP BY u.user_id, u.age_category_code HAVING COUNT(s.search_seq) = 1;
SELECT T1.age_category_description FROM Ref_Age_Categories AS T1 INNER JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code WHERE T2.user_id IN ( SELECT user_id FROM User_Searches ORDER BY search_datetime LIMIT 1 ) ORDER BY T2.date_registered LIMIT 1; SELECT T1.age_category_description FROM Ref_Age_Categories AS T1 INNER JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code WHERE T2.user_id IN ( SELECT user_id FROM User_Searches ORDER BY search_datetime LIMIT 1 ) ORDER BY T2.date_registered LIMIT 1; SELECT T1.age_category_description FROM Ref_Age_Categories AS T1 INNER JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code WHERE T2.user_id IN ( SELECT user_id FROM User_Searches ORDER BY search_datetime LIMIT 1 ) ORDER BY T2.date_registered LIMIT 1; SELECT T1.age_category_description FROM Ref_Age_Categories AS T1 INNER JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code WHERE T2.user_id IN ( SELECT user_id FROM User_Searches ORDER BY search_datetime LIMIT 1 ) ORDER BY T2.date_registered LIMIT 1; SELECT T1.age_category_description FROM Ref_Age_Categories AS T1 INNER JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code WHERE T2.user_id IN ( SELECT user_id FROM User_Searches ORDER BY search_datetime LIMIT 1 ) ORDER BY T2.date_registered LIMIT 1; SELECT T1.age_category_description FROM Ref_Age_Categories AS T1 INNER JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code WHERE T2.user_id IN ( SELECT user_id FROM User_Searches ORDER BY search_datetime LIMIT 1 ) ORDER BY T2.date_registered LIMIT 1; SELECT T1.age_category_description FROM Ref_Age_Categories AS T1 INNER JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code WHERE T2.user_id IN ( SELECT user_id FROM User_Searches ORDER BY search_datetime LIMIT 1 ) ORDER BY T
SELECT T1.age_category_description FROM Ref_Age_Categories AS T1 INNER JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code ORDER BY T2.date_registered LIMIT 1;
SELECT T1.login_name FROM Users AS T1 INNER JOIN Ref_Age_Categories AS T2 ON T1.age_category_code = T2.age_category_code WHERE T2.age_category_description = 'Senior Citizen' ORDER BY T1.first_name;
SELECT T1.login_name FROM Users AS T1 INNER JOIN Ref_Age_Categories AS T2 ON T1.age_category_code = T2.age_category_code WHERE T2.age_category_description = 'Senior Citizen' ORDER BY T1.first_name;
SELECT COUNT(T1.search_seq) FROM User_Searches AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T2.is_buyer = 'Y' GROUP BY T2.is_buyer; SELECT COUNT(T1.search_seq) FROM User_Searches AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T2.is_buyer = 'Y' AND T2.is_buyer = 'Y'; SELECT COUNT(T1.search_seq) FROM User_Searches AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T2.is_buyer = 'Y' AND T2.is_buyer = 'Y' AND T2.is_buyer = 'Y'; SELECT COUNT(T1.search_seq) FROM User_Searches AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T2.is_buyer = 'Y' AND T2.is_buyer = 'Y' AND T2.is_buyer = 'Y' AND T2.is_buyer = 'Y'; SELECT COUNT(T1.search_seq) FROM User_Searches AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T2.is_buyer = 'Y' AND T2.is_buyer = 'Y' AND T2.is_buyer = 'Y' AND T2.is_buyer = 'Y' AND T2.is_buyer = 'Y'; SELECT COUNT(T1.search_seq) FROM User_Searches AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T2.is_buyer = 'Y' AND T2.is_buyer = 'Y' AND T2.is_buyer = 'Y' AND T2.is_buyer = 'Y' AND T2.is_buyer = 'Y' AND T2.is_buyer = 'Y'; SELECT COUNT(T1.search_seq) FROM User_Searches AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T2.is_buyer = 'Y' AND T2.is_buyer
SELECT COUNT(*) FROM Users AS T1 INNER JOIN User_Searches AS T2 ON T1.user_id = T2.user_id WHERE T1.is_buyer = 'Y' GROUP BY T1.is_buyer HAVING COUNT(*) > 0; SELECT COUNT(T2.search_seq) FROM Users AS T1 INNER JOIN User_Searches AS T2 ON T1.user_id = T2.user_id WHERE T1.is_buyer = 'Y'; SELECT COUNT(T2.search_seq) FROM Users AS T1 INNER JOIN User_Searches AS T2 ON T1.user_id = T2.user_id WHERE T1.is_buyer = 'Y' AND T2.search_datetime IS NOT NULL; SELECT COUNT(T2.search_seq) FROM Users AS T1 INNER JOIN User_Searches AS T2 ON T1.user_id = T2.user_id WHERE T1.is_buyer = 'Y' AND T2.search_datetime IS NOT NULL AND T2.search_string IS NOT NULL; SELECT COUNT(T2.search_seq) FROM Users AS T1 INNER JOIN User_Searches AS T2 ON T1.user_id = T2.user_id WHERE T1.is_buyer = 'Y' AND T2.search_datetime IS NOT NULL AND T2.search_string IS NOT NULL AND T2.search_datetime > DATE('now', '-1 year'); SELECT COUNT(T2.search_seq) FROM Users AS T1 INNER JOIN User_Searches AS T2 ON T1.user_id = T2.user_id WHERE T1.is_buyer = 'Y' AND T2.search_datetime IS NOT NULL AND T2.search_string IS NOT NULL AND T2.search_datetime > DATE('now', '-1 year') AND T2.search_string LIKE '%buyer%'; SELECT COUNT(T2.search_seq) FROM Users AS T1 INNER JOIN User_Searches AS T2 ON T1.user_id = T2.user_id WHERE T1.is_buyer = 'Y' AND T2.search_datetime IS NOT NULL AND T2.search_string IS NOT NULL AND T2.search_datetime > DATE('now', '-1 year') AND T2.search_string LIKE '%buyer%' AND T2.search_string NOT LIKE '%seller%'; SELECT COUNT(T2.search_seq)
SELECT date_registered FROM Users WHERE login_name = 'ratione'
SELECT date_registered FROM Users WHERE login_name = 'ratione'
SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1' AND user_category_code IN ( SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description = 'Seller' ) ; SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1' AND user_category_code IN ( SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description = 'Seller' ) ; SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1' AND user_category_code IN ( SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description = 'Seller' ) ; SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1' AND user_category_code IN ( SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description = 'Seller' ) ; SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1' AND user_category_code IN ( SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description = 'Seller' ) ; SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1' AND user_category_code IN ( SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description = 'Seller' ) ; SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1' AND user_category_code IN ( SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description = 'Seller' ) ; SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1' AND user_category_code IN ( SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description = 'Seller' ) ; SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1' AND user_category_code IN ( SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description = 'Seller' ) ; SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1' AND user_category_code IN ( SELECT user
SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1' AND is_buyer = '0' AND is_buyer IS NOT NULL AND is_seller IS NOT NULL;
SELECT T1.line_1_number_building, T1.line_2_number_street, T1.town_city FROM Addresses AS T1 INNER JOIN Users AS T2 ON T1.address_id = T2.user_address_id INNER JOIN Ref_Age_Categories AS T3 ON T2.age_category_code = T3.age_category_code WHERE T3.age_category_description = 'Senior Citizen' AND T2.is_buyer = 'Y' AND T2.is_seller = 'N' AND T3.age_category_code = 'SC' AND T2.date_registered IS NOT NULL AND T2.date_registered <= DATE('now') AND T2.date_registered >= DATE('now', '-90 year') AND T2.date_registered >= DATE('now', '-100 year') AND T2.date_registered <= DATE('now', '-80 year') AND T2.date_registered >= DATE('now', '-110 year') AND T2.date_registered <= DATE('now', '-90 year') AND T2.date_registered >= DATE('now', '-100 year') AND T2.date_registered <= DATE('now', '-80 year') AND T2.date_registered >= DATE('now', '-110 year') AND T2.date_registered <= DATE('now', '-90 year') AND T2.date_registered >= DATE('now', '-100 year') AND T2.date_registered <= DATE('now', '-80 year') AND T2.date_registered >= DATE('now', '-110 year') AND T2.date_registered <= DATE('now', '-90 year') AND T2.date_registered >= DATE('now', '-100 year') AND T2.date_registered <= DATE('now', '-80 year') AND T2.date_registered >= DATE('now', '-110 year') AND T2.date_registered <= DATE('now', '-90 year') AND T2.date_registered >= DATE('now', '-100 year') AND T2.date_registered <= DATE('now', '-80 year') AND T2.date_registered >= DATE('now', '-110 year') AND T2.date_registered <= DATE('now', '-90 year') AND T2.date_registered >= DATE('now', '-100 year') AND T2.date_registered <= DATE('now', '-80 year')
SELECT T1.line_1_number_building, T1.line_2_number_street, T1.town_city FROM Addresses AS T1 INNER JOIN Users AS T2 ON T1.address_id = T2.user_address_id INNER JOIN Ref_Age_Categories AS T3 ON T2.age_category_code = T3.age_category_code WHERE T3.age_category_description = 'Senior Citizen' AND T2.is_buyer = 'Y' AND T2.is_seller = 'N' AND T2.date_registered IS NOT NULL AND T2.first_name IS NOT NULL AND T2.middle_name IS NOT NULL AND T2.last_name IS NOT NULL AND T2.login_name IS NOT NULL AND T2.password IS NOT NULL AND T2.date_registered IS NOT NULL AND T2.date_registered!= '0000-00-00 00:00:00' AND T2.first_name!= '' AND T2.middle_name!= '' AND T2.last_name!= '' AND T2.login_name!= '' AND T2.password!= '' AND T2.date_registered!= '0000-00-00 00:00:00' AND T2.first_name!= '' AND T2.middle_name!= '' AND T2.last_name!= '' AND T2.login_name!= '' AND T2.password!= '' AND T2.date_registered!= '0000-00-00 00:00:00' AND T2.first_name!= '' AND T2.middle_name!= '' AND T2.last_name!= '' AND T2.login_name!= '' AND T2.password!= '' AND T2.date_registered!= '0000-00-00 00:00:00' AND T2.first_name!= '' AND T2.middle_name!= '' AND T2.last_name!= '' AND T2.login_name!= '' AND T2.password!= '' AND T2.date_registered!= '0000-00-00 00:00:00' AND T2.first_name!= '' AND T2.middle_name!= '' AND T2.last_name!= '' AND T2.login_name!= '' AND T2.password!= '' AND T2.date_registered!= '0000-00-00 00:00:00' AND T2.first_name!= '' AND T2.middle_name!= ''
SELECT COUNT(DISTINCT T1.property_id) FROM Property_Features AS T1 INNER JOIN Properties AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id HAVING COUNT(T1.feature_id) >= 2; SELECT COUNT(T1.property_id) FROM Property_Features AS T1 INNER JOIN Properties AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id HAVING COUNT(T1.feature_id) >= 2; SELECT COUNT(T1.property_id) FROM Property_Features AS T1 INNER JOIN Properties AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id HAVING COUNT(T1.feature_id) >= 2; SELECT COUNT(T1.property_id) FROM Property_Features AS T1 INNER JOIN Properties AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id HAVING COUNT(T1.feature_id) >= 2; SELECT COUNT(T1.property_id) FROM Property_Features AS T1 INNER JOIN Properties AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id HAVING COUNT(T1.feature_id) >= 2; SELECT COUNT(T1.property_id) FROM Property_Features AS T1 INNER JOIN Properties AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id HAVING COUNT(T1.feature_id) >= 2; SELECT COUNT(T1.property_id) FROM Property_Features AS T1 INNER JOIN Properties AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id HAVING COUNT(T1.feature_id) >= 2; SELECT COUNT(T1.property_id) FROM Property_Features AS T1 INNER JOIN Properties AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id HAVING COUNT(T1.feature_id) >= 2; SELECT COUNT(T1.property_id) FROM Property_Features AS T1 INNER JOIN Properties AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id HAVING COUNT(T1.feature_id) >= 2; SELECT COUNT(T1.property_id) FROM Property_Features
SELECT COUNT(DISTINCT t1.property_id) FROM Property_Features AS t1 INNER JOIN Properties AS t2 ON t1.property_id = t2.property_id GROUP BY t1.property_id HAVING COUNT(DISTINCT t1.feature_id) >= 2;
SELECT p.property_id, COUNT(pp.photo_seq) FROM Properties p LEFT JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.property_id;
SELECT p.property_id, COUNT(pp.photo_seq) FROM Properties p LEFT JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.property_id;
SELECT U.user_id, COUNT(P.photo_id) FROM Users U LEFT JOIN Properties P ON U.user_id = P.owner_user_id LEFT JOIN Property_Photos PP ON P.property_id = PP.property_id GROUP BY U.user_id;
SELECT T1.user_id, COUNT(T2.property_id) FROM Users AS T1 INNER JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id INNER JOIN Property_Photos AS T3 ON T2.property_id = T3.property_id GROUP BY T1.user_id;
SELECT SUM(CASE WHEN T1.user_category_description = 'Single Mother' THEN T2.price_max ELSE 0 END) + SUM(CASE WHEN T1.user_category_description = 'Student' THEN T2.price_max ELSE 0 END) AS total_max_price FROM Ref_User_Categories AS T1 INNER JOIN Users AS T2 ON T1.user_category_code = T2.user_category_code INNER JOIN Properties AS T3 ON T2.user_id = T3.owner_user_id WHERE T1.user_category_code IN ('SM', 'ST') AND T3.price_max IS NOT NULL; SELECT SUM(CASE WHEN T1.user_category_description = 'Single Mother' THEN T2.price_max ELSE 0 END) + SUM(CASE WHEN T1.user_category_description = 'Student' THEN T2.price_max ELSE 0 END) AS total_max_price FROM Ref_User_Categories AS T1 INNER JOIN Users AS T2 ON T1.user_category_code = T2.user_category_code INNER JOIN Properties AS T3 ON T2.user_id = T3.owner_user_id WHERE T1.user_category_code IN ('SM', 'ST') AND T3.price_max IS NOT NULL; SELECT SUM(CASE WHEN T1.user_category_description = 'Single Mother' THEN T2.price_max ELSE 0 END) + SUM(CASE WHEN T1.user_category_description = 'Student' THEN T2.price_max ELSE 0 END) AS total_max_price FROM Ref_User_Categories AS T1 INNER JOIN Users AS T2 ON T1.user_category_code = T2.user_category_code INNER JOIN Properties AS T3 ON T2.user_id = T3.owner_user_id WHERE T1.user_category_code IN ('SM', 'ST') AND T3.price_max IS NOT NULL; SELECT SUM(CASE WHEN T1.user_category_description = 'Single Mother' THEN T2.price_max ELSE 0 END) + SUM(CASE WHEN T1.user_category_description = 'Student' THEN T2.price_max ELSE 0 END) AS total_max_price FROM Ref_User_Categories AS T1 INNER JOIN Users AS T2 ON T1.user_category_code = T2.user_category_code INNER JOIN Properties AS T3 ON T2.user_id = T3.owner_user_id WHERE T1
SELECT MAX(T1.price_max) FROM Properties AS T1 INNER JOIN Users AS T2 ON T1.owner_user_id = T2.user_id WHERE T2.user_category_code ='single_mother' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code ='student' OR T2.user_category_code
SELECT T1.datestamp, T2.property_name FROM User_Property_History AS T1 INNER JOIN Properties AS T2 ON T1.property_id = T2.property_id ORDER BY T1.datestamp;  
SELECT T1.datestamp, T2.property_name FROM User_Property_History AS T1 INNER JOIN Properties AS T2 ON T1.property_id = T2.property_id ORDER BY T1.datestamp;  
SELECT T1.property_type_description, T1.property_type_code FROM Ref_Property_Types AS T1 INNER JOIN Properties AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code ORDER BY COUNT(T1.property_type_code) DESC LIMIT 1;
SELECT T1.property_type_description FROM Ref_Property_Types AS T1 INNER JOIN Properties AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code ORDER BY COUNT(T1.property_type_code) DESC LIMIT 1;
SELECT T2.age_category_description FROM Ref_Age_Categories AS T1 INNER JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code WHERE T1.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' AND T2.age_category_code =
SELECT T1.age_category_description FROM Ref_Age_Categories AS T1 INNER JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code WHERE T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' GROUP BY T1.age_category_description HAVING COUNT(T2.age_category_code) = 1; SELECT T1.age_category_description FROM Ref_Age_Categories AS T1 INNER JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code WHERE T2.age_category_code = 'Over 60' AND T2.age_category_code = 'Over 60' GROUP BY T1.age_category_description HAVING COUNT(T2.age_category_code) = 1; SELECT T1.age_category_description FROM Ref_Age_Categories AS T1 INNER JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code WHERE T2.age_category_code = 'Over 60' GROUP BY T1.age_category_description; SELECT T1.age_category_description FROM Ref_Age_Categories AS T1 INNER JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code WHERE T2.age_category_code = 'Over 60' GROUP BY T1.age_category_description; SELECT T1.age_category_description FROM Ref_Age_Categories AS T1 INNER JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code WHERE T2.age_category_code = 'Over 60' GROUP BY T1.age_category_description; SELECT T1.age_category_description FROM Ref_Age_Categories AS T1 INNER JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code WHERE T2.age_category_code = 'Over 60' GROUP BY T1.age_category_description; SELECT T1.age_category_description FROM Ref_Age_Categories AS T1 INNER JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code WHERE T2.age_category_code = 'Over 60' GROUP BY T1.age_category_description; SELECT T1.age_category_description FROM Ref_Age_Categories AS T1 INNER JOIN Users AS T2 ON T1.age_category_code =
SELECT DISTINCT room_size FROM Rooms; SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size; SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size ORDER BY COUNT(*) DESC; SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size ORDER BY COUNT(*) ASC; SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size ORDER BY COUNT(*) LIMIT 1; SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size ORDER BY COUNT(*) LIMIT 10; SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size ORDER BY COUNT(*) LIMIT 100; SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size ORDER BY COUNT(*) LIMIT ALL; SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size ORDER BY COUNT(*) LIMIT 0; SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size ORDER BY COUNT(*) LIMIT -1; SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size ORDER BY COUNT(*) LIMIT -10; SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size ORDER BY COUNT(*) LIMIT -100; SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size ORDER BY COUNT(*) LIMIT -ALL; SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size ORDER BY COUNT(*) LIMIT -0; SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size ORDER BY COUNT(*) LIMIT -INF; SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size ORDER BY COUNT(*) LIMIT +1; SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size ORDER BY COUNT(*) LIMIT +10; SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size ORDER BY COUNT(*) LIMIT +100; SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size ORDER BY COUNT(*) LIMIT +ALL; SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size ORDER BY COUNT(*) LIMIT +0; SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size ORDER BY COUNT(*) LIMIT +INF; SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size ORDER BY COUNT(*) LIMIT INF; SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size ORDER BY COUNT(*) LIMIT -INF; SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size ORDER
SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size;
SELECT T1.country FROM Addresses AS T1 INNER JOIN Users AS T2 ON T1.address_id = T2.user_address_id WHERE T2.first_name = 'Robbie' GROUP BY T1.country;
SELECT T1.country FROM Addresses AS T1 INNER JOIN Users AS T2 ON T1.address_id = T2.user_address_id WHERE T2.first_name = 'Robbie' GROUP BY T1.country;
SELECT DISTINCT T1.first_name, T1.middle_name, T1.last_name FROM Users AS T1 INNER JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id WHERE T1.user_address_id = T2.property_address_id;
SELECT u.first_name, u.middle_name, u.last_name FROM Users u INNER JOIN Properties p ON u.user_id = p.owner_user_id INNER JOIN Addresses a ON p.property_address_id = a.address_id WHERE u.user_id = p.owner_user_id;
SELECT T1.search_string FROM User_Searches AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T2.property_id IS NULL;
SELECT DISTINCT T1.search_string FROM User_Searches AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T2.user_id NOT IN ( SELECT owner_user_id FROM Properties ) ORDER BY T1.search_string; SELECT DISTINCT T1.search_string FROM User_Searches AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T2.user_id NOT IN ( SELECT owner_user_id FROM Properties ) ORDER BY T1.search_string; SELECT DISTINCT T1.search_string FROM User_Searches AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T2.user_id NOT IN ( SELECT owner_user_id FROM Properties ) ORDER BY T1.search_string; SELECT DISTINCT T1.search_string FROM User_Searches AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T2.user_id NOT IN ( SELECT owner_user_id FROM Properties ) ORDER BY T1.search_string; SELECT DISTINCT T1.search_string FROM User_Searches AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T2.user_id NOT IN ( SELECT owner_user_id FROM Properties ) ORDER BY T1.search_string; SELECT DISTINCT T1.search_string FROM User_Searches AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T2.user_id NOT IN ( SELECT owner_user_id FROM Properties ) ORDER BY T1.search_string; SELECT DISTINCT T1.search_string FROM User_Searches AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T2.user_id NOT IN ( SELECT owner_user_id FROM Properties ) ORDER BY T1.search_string; SELECT DISTINCT T1.search_string FROM User_Searches AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T2.user_id NOT IN ( SELECT owner_user_id FROM Properties ) ORDER BY T1.search_string; SELECT DISTINCT T1.search_string FROM User_Searches AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T2.user_id NOT IN ( SELECT owner_user_id FROM Properties
SELECT u.last_name, u.user_id FROM Users u INNER JOIN User_Property_History uph ON u.user_id = uph.user_id INNER JOIN User_Searches us ON u.user_id = us.user_id GROUP BY u.user_id HAVING COUNT(uph.property_id) >= 2 AND COUNT(us.search_seq) <= 2; SELECT u.last_name, u.user_id FROM Users u WHERE u.user_id IN ( SELECT uph.user_id FROM User_Property_History uph GROUP BY uph.user_id HAVING COUNT(uph.property_id) >= 2 INTERSECT SELECT us.user_id FROM User_Searches us GROUP BY us.user_id HAVING COUNT(us.search_seq) <= 2 ); SELECT u.last_name, u.user_id FROM Users u WHERE u.user_id IN ( SELECT uph.user_id FROM User_Property_History uph GROUP BY uph.user_id HAVING COUNT(uph.property_id) >= 2 ) INTERSECT SELECT us.user_id FROM User_Searches us GROUP BY us.user_id HAVING COUNT(us.search_seq) <= 2; SELECT u.last_name, u.user_id FROM Users u WHERE u.user_id IN ( SELECT uph.user_id FROM User_Property_History uph GROUP BY uph.user_id HAVING COUNT(uph.property_id) >= 2 ) INTERSECT SELECT us.user_id FROM User_Searches us GROUP BY us.user_id HAVING COUNT(us.search_seq) <= 2; SELECT u.last_name, u.user_id FROM Users u WHERE u.user_id IN ( SELECT uph.user_id FROM User_Property_History uph GROUP BY uph.user_id HAVING COUNT(uph.property_id) >= 2 INTERSECT SELECT us.user_id FROM User_Searches us GROUP BY us.user_id HAVING COUNT(us.search_seq) <= 2 ); SELECT u.last_name, u.user_id FROM Users u WHERE u.user_id IN ( SELECT uph.user_id FROM User_Property_History uph GROUP BY uph.user_id HAVING COUNT(uph.property_id) >= 2 ) INTERSECT SELECT us.user_id FROM User_Searches us GROUP BY us.user_id HAVING COUNT(us.search_seq) <= 2; SELECT u.last_name, u.user_id FROM Users u WHERE
SELECT u.last_name, u.user_id FROM Users u JOIN User_Searches s ON u.user_id = s.user_id GROUP BY u.user_id HAVING COUNT(s.search_seq) <= 2 INTERSECT SELECT u.last_name, u.user_id FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id GROUP BY u.user_id HAVING COUNT(p.property_id) >= 2; SELECT u.last_name, u.user_id FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id WHERE u.user_id IN ( SELECT u.user_id FROM Users u JOIN User_Searches s ON u.user_id = s.user_id GROUP BY u.user_id HAVING COUNT(s.search_seq) <= 2 ); SELECT u.last_name, u.user_id FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id WHERE u.user_id IN ( SELECT u.user_id FROM Users u JOIN User_Searches s ON u.user_id = s.user_id GROUP BY u.user_id HAVING COUNT(s.search_seq) <= 2 ) AND u.user_id IN ( SELECT p.owner_user_id FROM Properties p GROUP BY p.owner_user_id HAVING COUNT(p.property_id) >= 2 ); SELECT u.last_name, u.user_id FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id WHERE u.user_id IN ( SELECT u.user_id FROM Users u JOIN User_Searches s ON u.user_id = s.user_id GROUP BY u.user_id HAVING COUNT(s.search_seq) <= 2 ) INTERSECT SELECT u.last_name, u.user_id FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id WHERE u.user_id IN ( SELECT p.owner_user_id FROM Properties p GROUP BY p.owner_user_id HAVING COUNT(p.property_id) >= 2 ); SELECT u.last_name, u.user_id FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id WHERE u.user_id IN ( SELECT u.user_id FROM Users u JOIN User_Searches s ON u.user_id = s.user_id GROUP BY u.user_id HAVING COUNT(s.search_seq) <= 2 ) INTERSECT SELECT u.last_name, u.user_id FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id WHERE
SELECT COUNT(*) FROM bike WHERE weight > 780;
SELECT product_name, weight FROM bike ORDER BY price ASC;
SELECT heat, name, nation FROM cyclist;
SELECT MAX(weight), MIN(weight) FROM bike;
SELECT AVG(price) FROM bike WHERE material = 'Carbon CC'
SELECT name, result FROM cyclist WHERE nation!= 'Russia' ;
SELECT DISTINCT T1.id, T1.product_name FROM bike AS T1 INNER JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id WHERE T2.purchase_year > 2015;
SELECT T1.id, T1.product_name FROM bike AS T1 INNER JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id GROUP BY T2.bike_id HAVING COUNT(T2.cycl
 SELECT T1.id, T1.name FROM cyclist AS T1 INNER JOIN cyclists_own_bikes AS T2 ON T1.id = T2.cyclist_id GROUP BY T1.id ORDER BY COUNT(T2.bike_id) DESC LIMIT 1;
 SELECT DISTINCT T1.product_name FROM bike AS T1 INNER JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id INNER JOIN cyclist AS T3 ON T2.cyclist_id = T3.id WHERE T3.nation IN ('Russia', 'Great Britain')
SELECT COUNT(DISTINCT heat) FROM cyclist;
SELECT COUNT(id) FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year > 2015) OR id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes) AND
SELECT DISTINCT T1.product_name FROM bike AS T1 INNER JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id INNER JOIN cyclist AS T3 ON T2.cyclist_id = T3.id WHERE T3.result < '
 SELECT T1.product_name, T1.price FROM bike AS T1 INNER JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id INNER JOIN cyclist AS T3 ON T2.cyclist_id = T3.id WHERE T3.name = 'Bradley Wiggins' INTERSECT SELECT T1.product_name, T1.price FROM bike AS T1 INNER JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id INNER JOIN cyclist AS T3 ON T2.cyclist_id = T3.id WHERE T3.name = 'Antonio Tauler' ORDER BY T1.product_name, T1.price LIMIT 1;  
SELECT name, nation, result FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE bike_id IN (SELECT id FROM bike WHERE product_name = 'racing bike'));
SELECT product_name FROM bike WHERE material LIKE '%fiber%';
 SELECT COUNT(*), T1.id FROM cyclists_own_bikes AS T2 INNER JOIN bike AS T1 ON T2.bike_id = T1.id GROUP BY T2.cyclist_id ORDER BY T2.cyclist_id;  
 SELECT g.Flavor, MAX(g.Price) FROM goods g WHERE g.Food = 'cake' GROUP BY g.Flavor HAVING MAX(g.Price) = ( SELECT MAX(price) FROM goods WHERE food = 'cake' ) AND g.Flavor IN ( SELECT Flavor FROM goods WHERE food = 'cake' GROUP BY Flavor ) AND g.Price IN ( SELECT MAX(price) FROM goods WHERE food = 'cake' GROUP BY Flavor )  
SELECT i.Item, g.Flavor FROM items i INNER JOIN goods g ON i.Item = g.Id WHERE g.Food = 'cake' ORDER BY g.Price DESC LIMIT 1; SELECT i.Item, g
SELECT g.Price, g.Flavor FROM goods g WHERE g.Food = 'cookie' ORDER BY g.Price LIMIT 1;
SELECT i.Item, g.Flavor FROM items i INNER JOIN goods g ON i.Item = g.Id WHERE g.Food = 'Cookie' ORDER BY g.Price LIMIT 1; SELECT i.Item, g.Fl
SELECT Id FROM goods WHERE Flavor = 'apple'
SELECT Id FROM goods WHERE Flavor = 'apple'
SELECT Id FROM goods WHERE Price < 3;
SELECT Id FROM goods WHERE Price < 3;
 SELECT DISTINCT T1.Id FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId INNER JOIN items AS T3 ON T2.ReceiptNumber = T3.Receipt WHERE T3.Item = (SELECT Id FROM goods WHERE Flavor = 'lemon') AND T3.Item IS NOT NULL;  
 SELECT DISTINCT T1.Id FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId INNER JOIN items AS T3 ON T2.ReceiptNumber = T3.Receipt WHERE T3.Item = (SELECT Id FROM goods WHERE Flavor = 'lemon' AND Food = 'cake')
 SELECT COUNT(DISTINCT T1.CustomerId) FROM receipts AS T1 INNER JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt INNER JOIN goods AS T3 ON T2.Item = T3.Id GROUP BY T3.Food;  
 SELECT T1.Food, COUNT(T2.Receipt) FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item GROUP BY T1.Food;
 SELECT DISTINCT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt WHERE i.Item = 'bakery' GROUP BY c.Id HAVING COUNT(i.Receipt) >= 15;
SELECT DISTINCT T1.CustomerId FROM receipts AS T1 INNER JOIN customers AS T2 ON T1.CustomerId = T2.Id GROUP BY T1.CustomerId HAVING COUNT(T1.ReceiptNumber) >= 15;
 SELECT T1.LastName FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId INNER JOIN items AS T3 ON T2.ReceiptNumber = T3.Receipt WHERE T3.Item IN (SELECT Item FROM items GROUP BY Item HAVING COUNT(Item) > 10) AND T3.Item LIKE 'bakery%' GROUP BY T1.LastName HAVING COUNT(T1.LastName) > 10;  
SELECT T1.LastName FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId GROUP BY T2.CustomerId HAVING COUNT(T2.ReceiptNumber) > 10;  
 SELECT COUNT(DISTINCT T2.Food) FROM items AS T1 INNER JOIN goods AS T2 ON T1.Item = T2.Id WHERE T2.Food = 'Cake' AND T1.Receipt IS NOT NULL GROUP BY T1.Receipt;  
SELECT COUNT(DISTINCT T2.Flavor) FROM items AS T1 INNER JOIN goods AS T2 ON T1.Item = T2.Id WHERE T2.Food = 'cake' AND T2.Flavor
 SELECT DISTINCT T2.Flavor FROM items AS T1 INNER JOIN goods AS T2 ON T1.Item = T2.Id WHERE T1.Item = 'Croissant' AND T2.Food = 'Bakery' AND T2.Food IS NOT NULL;  
SELECT DISTINCT T2.Flavor FROM items AS T1 INNER JOIN goods AS T2 ON T1.Item = T2.Id WHERE T1.Item = 'croissant' AND T2.Food
SELECT DISTINCT T2.Item FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId WHERE T1.Id = 15; SELECT T1.Item FROM items AS T1 WHERE T1.Re
SELECT DISTINCT T2.Item FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId WHERE T1.Id = 15; SELECT T1.Item FROM items AS T1 WHERE
SELECT AVG(T2.Price), MAX(T2.Price), MIN(T2.Price) FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item INNER JOIN receipts AS T3 ON T3.Re
SELECT AVG(T2.Price), MIN(T2.Price), MAX(T2.Price) FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item GROUP BY T1.Food;
SELECT DISTINCT T1.ReceiptNumber  
SELECT DISTINCT T1.ReceiptNumber  
SELECT DISTINCT T1.ReceiptNumber  
SELECT DISTINCT T1.ReceiptNumber  
SELECT T1.ReceiptNumber, T1.Date  
 SELECT r.ReceiptNumber, r.Date FROM receipts r INNER JOIN items i ON r.ReceiptNumber = i.Receipt WHERE i.Item = ( SELECT i.Item FROM items i INNER JOIN goods g ON i.Item = g.Id ORDER BY g.Price DESC LIMIT 1 ) GROUP BY r.ReceiptNumber, r.Date LIMIT 1;
SELECT Item FROM items GROUP BY Item ORDER BY COUNT(Item) ASC LIMIT 1;
 SELECT g.Id FROM goods AS g INNER JOIN ( SELECT Item FROM items GROUP BY Item ORDER BY COUNT(Item) ASC LIMIT 1 ) AS i ON g.Id = i.Item;  
SELECT Food, COUNT(*) FROM goods GROUP BY Food;
SELECT Food, COUNT(*) FROM goods GROUP BY Food;
SELECT AVG(Price) FROM goods GROUP BY Food;
SELECT AVG(Price) FROM goods WHERE Food IN ( SELECT Food FROM goods GROUP BY Food HAVING COUNT(Id) > 1 ) GROUP BY Food;  
SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5;
SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5;
SELECT DISTINCT T2.Flavor FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item INNER JOIN receipts AS T3 ON T3.ReceiptNumber = T2.Receipt
SELECT DISTINCT T1.Flavor FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item INNER JOIN receipts AS T3 ON T2.Receipt = T3.ReceiptNumber WHERE
SELECT DISTINCT Id, Price FROM goods WHERE Price < ( SELECT AVG(Price) FROM goods ) ;
SELECT DISTINCT Id, Price FROM goods WHERE Price < ( SELECT AVG(Price) FROM goods ) ;
SELECT DISTINCT Id FROM goods WHERE Price < ( SELECT MIN(Price) FROM goods WHERE Flavor = 'Tart' ) AND Flavor!= 'Tart' OR Price < ( SELECT MIN(Price) FROM goods WHERE Flavor = 'Tart'
 SELECT DISTINCT Id FROM goods WHERE Price < ( SELECT Price FROM goods WHERE Flavor = 'Tart' ) AND (Flavor!= 'Tart' OR Flavor = 'Tart' AND Price < ( SELECT Price FROM goods WHERE Flavor = 'Tart' ))  
SELECT DISTINCT T1.ReceiptNumber  
SELECT DISTINCT T1.ReceiptNumber  
 SELECT T1.Date FROM receipts AS T1 INNER JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt INNER JOIN goods AS T3 ON T2.Item = T3.Id WHERE T3.Price > 15.0;  
SELECT T2.Date FROM goods AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.ReceiptNumber WHERE T1.Price > 15 ORDER BY T2.Date LIMIT 1; SELECT T2.Date FROM goods AS T1
SELECT Id FROM goods WHERE Id LIKE '%APP%' AND Id NOT LIKE '%APP APP%' AND Id NOT LIKE '% APP%' AND Id NOT LIKE '%APP %' AND Id NOT LIKE '% APP%'
SELECT Id FROM goods WHERE Id LIKE '%APP%';
SELECT Price FROM goods WHERE Id = '70'
SELECT Id, Price FROM goods WHERE Id = '70'
SELECT LastName FROM customers ORDER BY LastName ASC;
SELECT LastName FROM customers ORDER BY LastName ASC;
SELECT Id FROM goods ORDER BY Id;
SELECT DISTINCT Item FROM items;
SELECT DISTINCT r.ReceiptNumber  
SELECT DISTINCT T1.ReceiptNumber  
 SELECT t1.Date, MAX(t1.Date) FROM receipts AS t1 INNER JOIN customers AS t2 ON t1.CustomerId = t2.Id GROUP BY t1.Date ORDER BY MAX(t1.Date) DESC LIMIT 1;  
SELECT ReceiptNumber, MAX(Date) FROM receipts GROUP BY ReceiptNumber ORDER BY MAX(Date) DESC LIMIT 1;
SELECT DISTINCT r.ReceiptNumber  
SELECT DISTINCT T1.ReceiptNumber  
SELECT Id FROM goods WHERE Price BETWEEN 3 AND 7 AND (Flavor = 'Cookie' OR Food = 'Cake')
SELECT Id FROM goods WHERE Price BETWEEN 3 AND 7 AND Food IN ('Cookies', 'Cakes') OR Food IN ('Cookies', 'Cakes') AND Price BETWEEN 3 AND 7;
SELECT c.FirstName, c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId ORDER BY r.Date LIMIT 1;
SELECT c.FirstName, c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId ORDER BY r.Date LIMIT 1;
SELECT AVG(Price) FROM goods WHERE Flavor = 'blackberry' OR Flavor = 'blueberry'
SELECT AVG(Price) FROM goods WHERE Flavor = 'blackberry' OR Flavor = 'blueberry'
SELECT MIN(Price) FROM goods WHERE Flavor = 'cheese'
SELECT MIN(Price) FROM goods WHERE Flavor = 'cheese' LIMIT 1;
SELECT MAX(Price), MIN(Price), AVG(Price) FROM goods GROUP BY Flavor ORDER BY Flavor;
SELECT Flavor, MAX(Price), MIN(Price), AVG(Price) FROM goods GROUP BY Flavor ORDER BY Flavor;
SELECT MIN(Price), MAX(Price) FROM goods GROUP BY Food ORDER BY Food;
SELECT MIN(Price), MAX(Price) FROM goods WHERE Food = 'food' ORDER BY Food;
SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(Date) DESC LIMIT 3;
SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(Date) DESC LIMIT 3;
 SELECT c.FirstName, c.LastName, COUNT(r.ReceiptNumber) FROM customers c LEFT JOIN receipts r ON c.Id = r.CustomerId GROUP BY c.FirstName, c.LastName ORDER BY COUNT(r.ReceiptNumber) DESC LIMIT 1;  
SELECT t1.CustomerId, COUNT(*) FROM receipts AS t1 INNER JOIN customers AS t2 ON t1.CustomerId = t2.Id GROUP BY t1.CustomerId ORDER BY COUNT(*) DESC LIMIT 1;
 SELECT COUNT(DISTINCT CustomerId), Date FROM receipts GROUP BY Date;  
SELECT T1.Date, COUNT(T1.ReceiptNumber) FROM receipts AS T1 INNER JOIN customers AS T2 ON T1.CustomerId = T2.Id GROUP BY T1.Date;
SELECT c.FirstName, c.LastName  
SELECT c.FirstName, c.LastName FROM customers c INNER JOIN receipts r ON c.Id = r.CustomerId INNER JOIN items i ON r.ReceiptNumber = i.Receipt WHERE i.Item = 'apple flavored Tart' AND g.Flavor =
SELECT Id FROM goods WHERE Price < ( SELECT Price FROM goods WHERE Food = 'Croissant' ) AND Food = 'Cookies' ; SELECT Id FROM goods WHERE Price < ( SELECT Price FROM goods WHERE Food = 'Croissant
 SELECT Id FROM goods WHERE Price < ( SELECT Price FROM goods WHERE Food = 'croissant' ) AND Food = 'cookie'  
 SELECT Id FROM goods WHERE Price >= ( SELECT AVG(Price) FROM goods WHERE Food = 'Tart' ) AND Food = 'Cake'  
 SELECT Id FROM goods WHERE Price >= ( SELECT AVG(Price) FROM goods WHERE Food = 'Tart' ) AND Food = 'Cake'  
SELECT Id FROM goods WHERE Price > (SELECT 2 * AVG(Price) FROM goods)
SELECT Id FROM goods WHERE Price > (SELECT AVG(Price) FROM goods) * 2;
SELECT i.Item, g.Flavor, g.Food FROM items i INNER JOIN goods g ON i.Item = g.Id ORDER BY g.Price;
SELECT Id, Flavor, Food FROM goods ORDER BY Price;
SELECT i.Item, g.Flavor FROM items i INNER JOIN goods g ON i.Item = g.Id WHERE g.Food = 'Cake' ORDER BY g.Flavor;
SELECT Id, Flavor FROM goods WHERE Food = 'cake' ORDER BY Flavor;
SELECT i.Item FROM items i INNER JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'chocolate' GROUP BY i.Item HAVING COUNT(i.Receipt) <= 10;
 SELECT T1.Item FROM items AS T1 INNER JOIN goods AS T2 ON T1.Item = T2.Id WHERE T2.Flavor = 'chocolate' GROUP BY T1.Item HAVING COUNT(T1.Item) <= 10;
SELECT DISTINCT T1.Flavor FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Food = 'Cake' EXCEPT SELECT DISTINCT T1.Flavor FROM goods
SELECT DISTINCT T1.Flavor FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T2.Receipt NOT IN ( SELECT Receipt FROM items WHERE Item = 'Tart
SELECT Item FROM items GROUP BY Item ORDER BY COUNT(Item) DESC LIMIT 3; SELECT T1.Item FROM items AS T1 INNER JOIN goods AS T2 ON T1.Item = T2.Id GROUP BY T
SELECT T.Item, COUNT(T.Receipt) FROM ( SELECT T1.Item, T2.Receipt FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Receipt = T2.ReceiptNumber GROUP
 SELECT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.CustomerId HAVING SUM(g.Price) > 150;  
 SELECT DISTINCT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.CustomerId HAVING SUM(g.Price) > 150;  
 SELECT DISTINCT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY c.Id HAVING AVG(CASE WHEN g.Price > 5 THEN 1 ELSE 0 END) > 0;
SELECT DISTINCT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY c.Id, g.Id
SELECT DISTINCT T2.Date FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Receipt = T2.ReceiptNumber INNER JOIN goods AS T3 ON T1.Item = T3.Id WHERE T3
SELECT DISTINCT T1.Date FROM receipts AS T1 INNER JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE T2.Item IN (SELECT Id FROM goods WHERE Food = 'bakery') GROUP BY T
SELECT COUNT(Driver_ID) FROM driver;
SELECT COUNT(Driver_ID) FROM driver;
SELECT COUNT(Driver_ID), Make FROM driver WHERE Points > '150' GROUP BY Make;
SELECT Make, COUNT(Driver_ID) FROM driver WHERE Points > '150' GROUP BY Make;
SELECT AVG(Age) FROM driver GROUP BY Make;
SELECT AVG(Age), Make FROM driver GROUP BY Make;
SELECT AVG(Laps) FROM driver WHERE Age < 20;
SELECT AVG(Laps) FROM driver WHERE Age < 20;
SELECT T1.Manager, T1.Sponsor, T1.Car_Owner FROM team AS T1 ORDER BY T1.Car_Owner;
SELECT T1.Manager, T1.Sponsor, T1.Car_Owner FROM team AS T1 ORDER BY T1.Car_Owner;
SELECT DISTINCT T1.Make FROM team AS T1 INNER JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T1.Make HAVING COUNT(T1.Team_ID) > 1;
SELECT DISTINCT T1.Make FROM team AS T1 INNER JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T1.Make HAVING COUNT(T1.Team_ID) > 1;
SELECT T2.Make FROM team AS T1 INNER JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID INNER JOIN driver AS T3 ON T2.Driver_ID = T3.Driver_ID WHERE T3.Car_Owner = 'Buddy Arrington' GROUP BY T2.Make;
SELECT T2.Make FROM team AS T1 INNER JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID INNER JOIN driver AS T3 ON T2.Driver_ID = T3.Driver_ID WHERE T3.Car_Owner = 'Buddy Arrington' AND T1.Car_Owner = 'Buddy Arrington' AND
SELECT MAX(`Points`), MIN(`Points`) FROM `driver` ;
SELECT MAX(`Points`), MIN(`Points`) FROM `driver` WHERE `Points` NOT NULL AND `Points`!= '' AND `Points`!= '0' AND `Points`!= '0.0' AND `Points`!= '0.00' AND `Points`!= '0.000' AND `Points`
SELECT COUNT(Driver_ID) FROM driver WHERE Points < '150' AND Points!= '0' AND Points!= '' AND Points!= 'NULL' AND Points!= 'NaN' AND Points!= 'NAN' AND Points!= 'None' AND Points!= 'null' AND Points!= 'INF' AND Points!= '-INF'
SELECT COUNT(Driver_ID) FROM driver WHERE Points < '150' AND Points IS NOT NULL;
SELECT Driver FROM driver ORDER BY Age ASC;
SELECT Driver FROM driver ORDER BY Age ASC;
SELECT Driver FROM driver ORDER BY Points DESC;
SELECT Driver FROM driver ORDER BY Points DESC;
SELECT T1.Driver, T2.Country FROM driver AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Country_Id;
SELECT T1.Driver, T2.Country FROM driver AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Country_Id;
SELECT MAX(T2.Points) FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T1.Capital = 'Dublin' GROUP BY T1.Country_Id;
SELECT MAX(T2.Points) FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T1.Capital = 'Dublin' GROUP BY T1.Country_Id;
SELECT AVG(T2.Age) FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T1.Official_native_language = 'English' AND T1.Country = 'United Kingdom' OR T1.Country = 'Ireland' OR T1.Country = 'Australia' OR T1.Country = 'New Zealand' OR T1.Country = 'South
SELECT AVG(T2.Age) FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T1.Official_native_language = 'English' AND T1.Country_Id = T2.Country;  
SELECT DISTINCT T1.Country FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Points > '150' ORDER BY T1.Country_Id; SELECT T1.Country FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Points > '150' GROUP
SELECT DISTINCT T1.Country FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Points > '150' AND T2.Points!= '' AND T2.Points IS NOT NULL;
SELECT T1.Capital FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Points = ( SELECT MAX(Points) FROM driver ) AND T2.Points IS NOT NULL;
SELECT T1.Capital FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Points = ( SELECT MAX(Points) FROM driver ) AND T2.Points IS NOT NULL;
SELECT Make, COUNT(Driver_ID) FROM driver GROUP BY Make;
SELECT Make, COUNT(Driver_ID) FROM driver GROUP BY Make;
SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(Make) DESC LIMIT 1; SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(Make) DESC LIMIT 1; SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(Make) DESC LIMIT 1; SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(Make) DESC LIMIT 
SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(Make) DESC LIMIT 1;
SELECT DISTINCT T1.Make FROM driver AS T1 INNER JOIN team_driver AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Make HAVING COUNT(T1.Driver_ID) >= 3; SELECT T1.Make FROM driver AS T1 INNER JOIN team_driver AS T2 ON T1.Driver_ID = T2.Driver_ID INNER JOIN team AS
SELECT DISTINCT T1.Make FROM driver AS T1 INNER JOIN team_driver AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Make HAVING COUNT(T1.Driver_ID) >= 3; SELECT T1.Make FROM driver AS T1 INNER JOIN team_driver AS T2 ON T1.Driver_ID = T2
SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver) OR Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(DISTINCT Driver_ID) = 0) OR Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(DISTINCT Driver_ID)
SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver) OR Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(DISTINCT Driver_ID) = 0) OR Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(DISTINCT
SELECT T1.Country FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Make = 'Dodge' INTERSECT SELECT T1.Country FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Make = 'Chevrolet'
SELECT T1.Country FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Make = 'Dodge' INTERSECT SELECT T1.Country FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Make = 'Chevrolet'
SELECT SUM(Points), AVG(Points) FROM driver;
SELECT SUM(`Points`), AVG(`Points`) FROM `driver` WHERE `Points` NOT NULL AND `Points`!= '' AND `Points`!= '0' AND `Points`!= '0.0' AND `Points`!= '0.00' AND `Points`!= '0.000' AND `Points`
SELECT Country FROM country WHERE Country_Id NOT IN (SELECT Country FROM driver) AND Country_Id > 0;  
SELECT Country FROM country WHERE Country_Id NOT IN (SELECT Country FROM driver) OR Country IS NULL;
SELECT T1.Manager, T1.Sponsor FROM team AS T1 INNER JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T2.Team_ID ORDER BY COUNT(T2.Driver_ID) DESC LIMIT 1;
SELECT T1.Manager, T1.Sponsor FROM team AS T1 INNER JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T2.Team_ID ORDER BY COUNT(T2.Driver_ID) DESC LIMIT 1;
SELECT T1.Manager, T1.Car_Owner FROM team AS T1 INNER JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T2.Team_ID HAVING COUNT(DISTINCT T2.Driver_ID) >= 2;
SELECT T1.Manager, T1.Car_Owner  
SELECT COUNT(Institution_ID) FROM institution;
SELECT COUNT(Institution_ID) FROM institution;
SELECT Name FROM institution ORDER BY Name ASC;
SELECT Name FROM institution ORDER BY Name ASC;
SELECT Name FROM institution ORDER BY Founded ASC;
SELECT Name FROM institution ORDER BY Founded;
SELECT City, Province FROM institution;
SELECT City, Province FROM institution;
SELECT MAX(Enrollment), MIN(Enrollment) FROM institution;
SELECT MAX(Enrollment), MIN(Enrollment) FROM institution;
 SELECT DISTINCT T1.Affiliation FROM institution AS T1 LEFT JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.City!= 'Vancouver' AND T2.Institution_ID IS NULL;  
SELECT DISTINCT T1.Affiliation FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.City!= 'Vancouver' AND T1.City IS NOT NULL;
SELECT Stadium FROM institution ORDER BY Capacity DESC;
SELECT Stadium FROM institution ORDER BY Capacity DESC;
SELECT T1.Stadium FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T2.Enrollment DESC LIMIT 1; SELECT T1.Stadium FROM institution AS T1 INNER JOIN Championship AS T2
SELECT T1.Stadium FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T1.Enrollment DESC LIMIT 1;
SELECT T1.Name, T2.Nickname FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID;
SELECT T1.Name, T2.Nickname FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID;
SELECT T2.Nickname FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T1.Enrollment LIMIT 1;
SELECT T2.Nickname FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T1.Enrollment LIMIT 1;
SELECT T1.Name FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T2.Number_of_Championships DESC;
SELECT T1.Name FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T2.Number_of_Championships DESC;
SELECT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship) GROUP BY Institution_ID HAVING COUNT(Institution_ID) > 0; SELECT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship); SELECT T1.Name FROM institution AS T1
SELECT T1.Name FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID GROUP BY T2.Institution_ID HAVING COUNT(T2.Institution_ID) >= 1;
SELECT SUM(T2.Number_of_Championships) FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.Affiliation = 'Public' AND T1.Affiliation IS NOT NULL AND T1.Affiliation
 SELECT SUM(T2.Number_of_Championships) FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.Affiliation = 'Public' AND T1.Team = T1.Team AND T1.Affiliation = T1.Affiliation AND T1.Institution_ID IN (SELECT Institution_ID FROM institution WHERE Affiliation = 'Public') AND T1.Institution_ID = T1.Institution_ID AND T1.Affiliation = T1.Affiliation AND T1.Team = T1.Team AND T1.Affiliation = T1.Affiliation AND T1.Affiliation = T1.Affiliation AND T1.Affiliation = T1.Affiliation AND T1.Affiliation = T1.Affiliation AND T1.Affiliation = T1.Affiliation AND T1.Affiliation = T1.Affiliation AND T1.Affiliation = T1.Affiliation AND T1.Affiliation = T1.Affiliation
SELECT Affiliation, COUNT(Institution_ID) FROM institution GROUP BY Affiliation;
SELECT Affiliation, COUNT(Institution_ID) FROM institution GROUP BY Affiliation;
SELECT affiliation FROM institution GROUP BY affiliation ORDER BY COUNT(affiliation) DESC LIMIT 1;
SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(Affiliation) DESC LIMIT 1;
SELECT Founded FROM institution GROUP BY Founded HAVING COUNT(Institution_ID) > 1;
SELECT Founded FROM institution GROUP BY Founded HAVING COUNT(Institution_ID) > 1;
SELECT T2.Nickname FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T1.Capacity DESC;
SELECT T2.Nickname FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T1.Capacity DESC;
SELECT SUM(T2.Enrollment) FROM institution AS T1 INNER JOIN institution AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.City IN ('Vancouver', 'Calgary') AND T1.Province = 'British Columbia' AND T1.Team
SELECT T2.Enrollment FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.City = 'Vancouver' OR T1.City = 'Calgary' GROUP BY T2.Enrollment;
SELECT DISTINCT T1.Province FROM institution AS T1 INNER JOIN institution AS T2 ON T1.Province = T2.Province WHERE T1.Founded < 1920 AND T2.Founded > 1950;
SELECT DISTINCT T1.Province FROM institution AS T1 INNER JOIN institution AS T2 ON T1.Province = T2.Province WHERE T1.Founded < 1920 AND T2.Founded > 1950;
SELECT COUNT(DISTINCT Province) FROM institution;
SELECT COUNT(DISTINCT Province) FROM institution;
SELECT * FROM Warehouses;
SELECT * FROM Warehouses;
SELECT DISTINCT T2.Contents  
SELECT DISTINCT T2.Contents  
SELECT T2.Contents FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T1.Value > 150; SELECT T1.Contents FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse
SELECT T2.Contents FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T1.Value > 150; SELECT T1.Contents FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse
SELECT T1.Code, AVG(T2.Value) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Code;
SELECT AVG(T2.Value) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Code;
SELECT AVG(Value), SUM(Value) FROM Boxes;
SELECT AVG(Value), SUM(Value) FROM Boxes;
SELECT AVG(Capacity), SUM(Capacity) FROM Warehouses;
SELECT AVG(Capacity), SUM(Capacity) FROM Warehouses;
SELECT Contents, AVG(Value), MAX(Value) FROM Boxes GROUP BY Contents;
SELECT Contents, AVG(Value), MAX(Value) FROM Boxes GROUP BY Contents;
SELECT Contents FROM Boxes GROUP BY Contents ORDER BY SUM(Value) DESC LIMIT 1;
SELECT Contents FROM Boxes ORDER BY Value DESC LIMIT 1;
SELECT AVG(Value) FROM Boxes;
SELECT AVG(Value) FROM Boxes;
SELECT DISTINCT Contents FROM Boxes;
SELECT DISTINCT Contents FROM Boxes;
SELECT COUNT(DISTINCT Contents) FROM Boxes;
SELECT COUNT(DISTINCT Contents) FROM Boxes;
SELECT DISTINCT Location FROM Warehouses;
SELECT DISTINCT Location FROM Warehouses;
SELECT DISTINCT T2.Code  
SELECT DISTINCT T2.Code  
SELECT SUM(T2.Value) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T1.Location IN ('Chicago', 'New York') GROUP BY T1.Location;
SELECT SUM(T2.Value) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T1.Location IN ('Chicago', 'New York') GROUP BY T1.Location;
SELECT DISTINCT T2.Contents  
SELECT DISTINCT T1.Contents  
SELECT DISTINCT Contents FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'New York') OR Contents NOT IN (SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York'));  
SELECT DISTINCT T2.Contents  
SELECT T1.Location  
SELECT DISTINCT T1.Location  
SELECT DISTINCT T1.Code FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents = 'Rocks' OR T2.Contents = 'Scissors'
SELECT DISTINCT T1.Code FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents IN ('Rocks', 'Scissors')
SELECT DISTINCT T1.Location  
SELECT T1.Location FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents = 'Rocks and Scissors' GROUP BY T1.Location HAVING COUNT(T2.Code) > 0;
SELECT Code, Contents FROM Boxes ORDER BY Value;
SELECT Code, Contents FROM Boxes ORDER BY Value;
SELECT Code, Contents FROM Boxes ORDER BY Value ASC LIMIT 1;
SELECT Code, Contents FROM Boxes ORDER BY Value ASC LIMIT 1;
SELECT DISTINCT T.Contents  
SELECT DISTINCT Contents FROM Boxes WHERE Value > ( SELECT AVG(Value) FROM Boxes ) ;  
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents;
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents ASC;
 SELECT Code FROM Boxes WHERE Value > ( SELECT MAX(Value) FROM Boxes WHERE Contents = 'Rocks' ) AND Contents!= 'Rocks' OR Contents = 'Rocks' AND Value > ( SELECT MAX(Value) FROM Boxes WHERE Contents!= 'Rocks' ) OR Value > ( SELECT MAX(Value) FROM Boxes WHERE Contents = 'Rocks' )  
 SELECT Code FROM Boxes WHERE Value > ( SELECT Value FROM Boxes WHERE Contents = 'Rocks' ) AND Contents IN ('Rocks', 'Other Contents') ;  
 SELECT Code, Contents FROM Boxes WHERE Value > ( SELECT MAX(Value) FROM Boxes WHERE Contents = 'Scissors' ) AND Contents IN ('Scissors', 'Not Scissors') ;  
SELECT B1.Code, B1.Contents  
SELECT SUM(T2.Value) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse ORDER BY T1.Capacity DESC LIMIT 1;
SELECT SUM(T2.Value) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse ORDER BY T1.Capacity DESC LIMIT 1;
SELECT W.Code, AVG(B.Value) FROM Warehouses W INNER JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Code HAVING AVG(B.Value) > 150;
SELECT AVG(T2.Value) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T1.Code IN ( SELECT T1.Code FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Code HAVING
SELECT Contents, SUM(Value), COUNT(Code) FROM Boxes GROUP BY Contents;
SELECT Contents, SUM(Value), COUNT(Code) FROM Boxes GROUP BY Contents;
SELECT Location, SUM(Capacity) AS TotalCapacity, AVG(Capacity) AS AverageCapacity, MAX(Capacity) AS MaxCapacity FROM Warehouses GROUP BY Location;
SELECT Location, SUM(Capacity) AS TotalCapacity, AVG(Capacity) AS AverageCapacity, MAX(Capacity) AS MaxCapacity FROM Warehouses GROUP BY Location;
SELECT SUM(Capacity) FROM Warehouses;
SELECT SUM(Capacity) FROM Warehouses;
SELECT T1.Location, MAX(T2.Value) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Location;
SELECT T1.Location, MAX(T2.Value) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Location;
SELECT T1.Code, COUNT(T2.Code) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Code;
SELECT W.Code, COUNT(B.Code) FROM Warehouses W LEFT JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Code;
SELECT COUNT(DISTINCT T1.Location)  
 SELECT COUNT(DISTINCT T2.Code) FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T1.Contents = 'Rocks' AND T1.Code LIKE 'R%' AND T1.Value BETWEEN 10 AND 20 
SELECT T1.Code, T2.Location  
SELECT T1.Code, T2.Location FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code;
 SELECT DISTINCT T2.Code FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T1.Location = 'Chicago' AND T2.Contents LIKE '%Chicago%' OR T2.Contents LIKE '%Chicago' OR T2.Contents LIKE '%chicago%' OR T2.Contents LIKE '%CHICAGO%' OR T2.Contents LIKE '%Chi%';  
SELECT DISTINCT T2.Code  
SELECT T1.Code, COUNT(T2.Code) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Code;
SELECT T1.Code, T1.Location, COUNT(T2.Code) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Code, T1.Location;
SELECT T1.Location, COUNT(DISTINCT T2.Contents) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Location;
SELECT T1.Location, COUNT(T2.Contents) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Location;
 SELECT Code FROM Warehouses WHERE Capacity < ( SELECT SUM(Capacity) FROM Warehouses )  
SELECT W.Code FROM Warehouses W LEFT JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Code HAVING COUNT(B.Code) > W.Capacity;
SELECT SUM(T2.Value)  
SELECT SUM(T2.Value) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T1.Location!= 'Chicago' GROUP BY T1.Location;
SELECT University_Name, City, State FROM university ORDER BY University_Name ASC;
SELECT University_Name, City, State FROM university ORDER BY University_Name ASC;
SELECT COUNT(*) FROM university WHERE State IN ('Illinois', 'Ohio') OR State IN ('Illinois', 'Ohio') GROUP BY State HAVING COUNT(*) > 0; SELECT COUNT(DISTINCT University_ID) FROM university WHERE State IN ('Illinois', 'Ohio'); SELECT COUNT(DISTINCT University_ID) FROM university WHERE State = 'Illinois' OR State = 'Ohio'; SELECT COUNT(DISTINCT University_ID) FROM university WHERE State IN ('Illinois',
SELECT COUNT(University_ID) FROM university WHERE State = 'Illinois' OR State = 'Ohio'
SELECT MAX(Enrollment), AVG(Enrollment), MIN(Enrollment) FROM university;
SELECT MAX(Enrollment), AVG(Enrollment), MIN(Enrollment) FROM university;
SELECT T1.Team_Name FROM university AS T1 INNER JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T1.Enrollment > ( SELECT AVG(Enrollment) FROM university ) ORDER BY T1.Enrollment DESC; SELECT T1.Team_Name FROM university AS T1 INNER JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T1.Enrollment > ( SELECT AVG(Enrollment) FROM university ) ORDER BY
SELECT DISTINCT T1.Team_Name FROM university AS T1 INNER JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Enrollment > ( SELECT AVG(Enrollment) FROM overall_ranking ) AND T1.Enrollment > ( SELECT AVG(Enrollment) FROM overall_ranking ) AND T1.Enrollment > ( SELECT AVG(Enrollment) FROM overall_ranking ) AND T1.Enrollment > ( SELECT AVG(Enrollment) FROM overall_ranking ) AND T1.Enrollment
SELECT DISTINCT Home_Conference FROM university;
SELECT DISTINCT Home_Conference FROM university;
SELECT Home_Conference, COUNT(University_ID) FROM university GROUP BY Home_Conference;
SELECT COUNT(DISTINCT University_ID) FROM university WHERE Home_Conference NOT IN ( SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING COUNT(DISTINCT University_ID) = 1 ) GROUP BY Home_Conference;
SELECT State FROM university GROUP BY State ORDER BY COUNT(University_ID) DESC LIMIT 1;
SELECT State FROM university GROUP BY State ORDER BY COUNT(University_ID) DESC LIMIT 1;
SELECT DISTINCT T1.Home_Conference FROM university AS T1 INNER JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Total > 2000 GROUP BY T1.Home_Conference HAVING AVG(T1.Enrollment) > 2000;
SELECT DISTINCT Home_Conference FROM university WHERE Enrollment > 2000 GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000;
SELECT Home_Conference FROM university GROUP BY Home_Conference ORDER BY COUNT(University_ID) ASC LIMIT 1;
SELECT Home_Conference FROM university GROUP BY Home_Conference ORDER BY COUNT(Enrollment) ASC LIMIT 1; SELECT Home_Conference FROM university GROUP BY Home_Conference ORDER BY COUNT(Enrollment) ASC LIMIT 1; SELECT Home_Conference FROM university GROUP BY Home_Conference ORDER BY COUNT(Enrollment) ASC LIMIT 1; SELECT Home_Conference FROM university GROUP BY Home_Conference ORDER BY COUNT(Enrollment) ASC LIMIT 1; SELECT Home_Conference FROM university GROUP BY Home_Con
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code;
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code;
SELECT m.`Major_Name`, mr.`Rank`  
SELECT m.Rank, m.Major_Name FROM major AS m INNER JOIN major_ranking AS mr ON m.Major_ID = mr.Major_ID INNER JOIN university AS u ON mr.University_ID = u.University_ID WHERE u.University_Name = 'Augustana College' ORDER BY mr.Rank; SELECT m.Rank, m.Major_Name FROM major AS m WHERE m.Major_Name IN ( SELECT u.University_Name FROM university AS u INNER JOIN major_ranking AS mr ON
SELECT T1.University_Name, T1.City, T1.State FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID INNER JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T2.Rank = 1 AND T3.Major_Name = 'Accounting' AND T3.Major_Code = 1;
SELECT T1.University_Name, T1.City, T1.State FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID INNER JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T2.Rank = 1 AND T3.Major_Name = 'Accounting' ORDER BY T2.Rank LIMIT 1; SELECT T1.University_Name, T1.City, T1.State FROM university AS
SELECT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Rank = 1 GROUP BY T1.University_Name ORDER BY COUNT(T2.Rank) DESC LIMIT 1;
SELECT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Rank = 1 GROUP BY T1.University_Name ORDER BY COUNT(T2.Rank) DESC LIMIT 1; SELECT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Rank = 1 GROUP BY
 SELECT T1.University_Name FROM university AS T1 LEFT JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Rank IS NULL AND T1.University_Name NOT IN (SELECT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Rank = 1) AND T1.University_Name IN (SELECT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Rank = 1)  
SELECT DISTINCT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Rank!= 1;
 SELECT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID INNER JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T3.Major_Name = 'Accounting' INTERSECT SELECT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID INNER JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T3.Major_Name = 'Urban Education'  
 SELECT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID INNER JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T3.Major_Name = 'Accounting' INTERSECT SELECT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID INNER JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T3.Major_Name = 'Urban Education'  
SELECT T1.University_Name, T2.Rank FROM university AS T1 INNER JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T1.State = 'Wisconsin' ORDER BY T2.Total DESC;
SELECT T1.University_Name, T2.Rank FROM university AS T1 INNER JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T1.State = 'Wisconsin' ORDER BY T2.Rank; SELECT T1.University_Name, T2.Rank FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T1.State = 'Wisconsin' ORDER BY
SELECT T2.University_Name FROM overall_ranking AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID ORDER BY T1.Research_point DESC LIMIT 1;
SELECT T2.University_Name FROM overall_ranking AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID ORDER BY T1.Research_point DESC LIMIT 1;
SELECT T2.University_Name FROM overall_ranking AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID ORDER BY T1.Reputation_point ASC;
SELECT T2.University_Name FROM overall_ranking AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID ORDER BY T1.Reputation_point ASC;
SELECT T1.University_Name FROM major AS T2 INNER JOIN major_ranking AS T3 ON T2.Major_ID = T3.Major_ID INNER JOIN university AS T1 ON T3.University_ID = T1.University_ID WHERE T2.Major_Name = 'Accounting' AND T3.Rank >= 3;
SELECT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID INNER JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T3.Major_Name = 'Accounting' AND T2.Rank >= 3;
SELECT T1.Enrollment FROM university AS T1 INNER JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Rank <= 5;
SELECT COUNT(T2.University_ID) FROM overall_ranking AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID WHERE T1.Rank <= 5; SELECT COUNT(T2.University_ID) FROM overall_ranking AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID WHERE T1.Rank <= 5; SELECT COUNT(T2.University_ID) FROM overall_ranking AS T1 INNER JOIN university AS
SELECT T1.University_Name, T2.Citation_point FROM university AS T1 INNER JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Reputation_point IN (SELECT Reputation_point FROM overall_ranking ORDER BY Reputation_point DESC LIMIT 3) AND T2.Reputation_point > ( SELECT Reputation_point FROM overall_ranking ORDER BY Reputation_point DESC LIMIT 3 OFFSET 2 ) AND T2.Reputation_point > ( SELECT Reputation_point FROM overall_ranking ORDER BY Reputation_point
SELECT T1.University_Name, T2.Citation_point FROM university AS T1 INNER JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID ORDER BY T2.Reputation_point DESC LIMIT 3;
SELECT DISTINCT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(University_ID) > 2;
SELECT DISTINCT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(University_ID) > 2;
SELECT Title FROM Movies WHERE Rating IS NULL;
SELECT Title FROM Movies WHERE Rating IS NULL;
 SELECT T2.Title FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T2.Rating = 'G' AND T1.Movie IS NOT NULL;  
 SELECT T2.Title FROM Movies AS T1 INNER JOIN Movies AS T2 ON T1.Code = T2.Code WHERE T1.Rating = 'G' OR T1.Rating LIKE '%G%' OR T1.Rating LIKE '% g%' OR T1.Rating LIKE '%G%';  
SELECT T2.Title  
SELECT T2.Title FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T1.Name = 'Odeon'
SELECT M.Title, MT.Name FROM Movies M INNER JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE MT.Movie IS NOT NULL;
SELECT M.Title, MT.Name FROM Movies M INNER JOIN MovieTheaters MT ON M.Code = MT.Movie;
SELECT COUNT(Code) FROM Movies WHERE Rating = 'G'
SELECT COUNT(*) FROM Movies WHERE Rating = 'G'
 SELECT COUNT(DISTINCT T1.Code) FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Code IS NOT NULL AND T1.Code = T2.Movie;  
SELECT COUNT(T2.Code) FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T1.Movie
 SELECT COUNT(DISTINCT T1.Code) FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Code = T2.Movie;  
SELECT COUNT(DISTINCT Movie) FROM MovieTheaters WHERE Movie IS NOT NULL;
SELECT COUNT(DISTINCT Code) FROM MovieTheaters;
SELECT COUNT(DISTINCT Code) FROM MovieTheaters;
SELECT T2.Rating FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T2.Title LIKE '%Citizen%'
 SELECT T2.Rating FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T1.Name LIKE '%Citizen%' OR T1.Name LIKE '%citizen%' OR T1.Name LIKE '% citizen%' OR T1.Name LIKE '% citizen%' OR T1.Name LIKE '% citizen%' OR T1.Name LIKE '% citizen%' OR T1.Name LIKE '% citizen%' OR T1.Name LIKE '% citizen%' OR T1.Name LIKE '% citizen%' OR T1.Name LIKE '% citizen%' OR T1.Name LIKE '% citizen%' OR T1.Name LIKE '% citizen%' OR T1.Name LIKE '% citizen%' OR T1.Name LIKE '% citizen%' OR T1.Name LIKE '% citizen%' OR T1.Name LIKE '% citizen%'
 SELECT T2.Name FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Rating IN ('G', 'PG') GROUP BY T2.Name;  
SELECT T2.Name FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Rating IN ('G', 'PG
SELECT T2.Title  
SELECT T2.Title FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T1.Name IN ('Odeon', 'Imperial
SELECT T2.Title  
SELECT T1.Title FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Name IN ('Odeon
 SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon') OR Code IN (SELECT Movie FROM MovieTheaters WHERE Name!= 'Odeon')
 SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon') OR Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon') AND Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name!= 'Odeon')  
SELECT Title FROM Movies ORDER BY Title ASC;
SELECT Title FROM Movies ORDER BY Title ASC;
SELECT Title FROM Movies ORDER BY Rating;
SELECT T2.Title FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code ORDER BY T2.Rating
SELECT Name FROM MovieTheaters GROUP BY Name ORDER BY COUNT(Movie) DESC LIMIT 1;
SELECT Name FROM MovieTheaters GROUP BY Name ORDER BY COUNT(Movie) DESC LIMIT 1;
 SELECT T2.Title FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code GROUP BY T2.Title ORDER BY COUNT(T1.Code) DESC LIMIT 1;  
 SELECT T2.Title FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code GROUP BY T2.Code ORDER BY COUNT(T1.Movie) DESC LIMIT 1;  
SELECT Rating, COUNT(*) FROM Movies GROUP BY Rating;
SELECT Rating, COUNT(*) FROM Movies GROUP BY Rating;
SELECT COUNT(Code) FROM Movies WHERE Rating IS NOT NULL;
SELECT COUNT(Code) FROM Movies WHERE Rating IS NOT NULL;
SELECT Name FROM MovieTheaters WHERE Movie IS NOT NULL;
SELECT T2.Name FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Code IS NOT NULL;  
SELECT Name FROM MovieTheaters WHERE Movie IS NULL;
SELECT Name FROM MovieTheaters WHERE Movie IS NULL;
SELECT T2.Name FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Rating = 'G' GROUP BY T2.Name
 SELECT T2.Name FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Rating = 'G' OR T1.Rating LIKE '%G%' OR T1.Rating LIKE '%g%' OR T1.Rating LIKE '%G%';  
SELECT Title FROM Movies;
SELECT T2.Title FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code;
SELECT DISTINCT Rating FROM Movies;
SELECT DISTINCT Rating FROM Movies;
SELECT * FROM Movies WHERE Rating IS NULL;  
SELECT * FROM Movies WHERE Rating IS NULL;  
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters) AND Code IS NOT NULL;
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters) AND Code IS NOT NULL;
SELECT T2.Recipient FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Recipient = T2.AccountNumber ORDER BY T1.Weight DESC LIMIT 1; SELECT T2.Name FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Recipient = T2.AccountNumber ORDER BY T1.Weight DESC LIMIT 1; SELECT T1.Weight FROM Package AS T1 ORDER BY T1.Weight DESC LIMIT 1; SELECT T1.Weight FROM Package AS T1 WHERE T1.Weight = ( SELECT T1.Weight FROM Package AS T1 ORDER BY T1.Weight DESC LIMIT 1 ); SELECT T1.Weight FROM Package AS T1 ORDER BY T1.Weight DESC LIMIT 1; SELECT T1.Weight FROM Package AS T1 ORDER BY T1.Weight DESC LIMIT 1; SELECT T1.Weight FROM Package AS T1 ORDER BY T1.Weight DESC LIMIT 1; SELECT T1.Weight FROM Package AS T1 ORDER BY T1.Weight DESC LIMIT 1; SELECT T1.Weight FROM Package AS T1 ORDER
SELECT T2.Name FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Recipient = T2.AccountNumber ORDER BY T1.Weight DESC LIMIT 1; SELECT T1.Name FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Recipient = T2.AccountNumber WHERE T1.Weight = ( SELECT MAX(Weight) FROM Package );  
SELECT SUM(T2.Weight) FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender WHERE T1.Name = 'Leo Wong' AND T2.Sender = T1.AccountNumber;  
SELECT SUM(T2.Weight) FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender WHERE T1.Name = 'Leo Wong' AND T2.Sender = T1.AccountNumber;  
SELECT Position FROM Employee WHERE Name = 'Amy Wong'
SELECT Position FROM Employee WHERE Name = 'Amy Wong'
SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela'
SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela'
SELECT AVG(Salary) FROM Employee WHERE Position = 'Intern' AND Remarks = 'Job' AND EmployeeID IN (SELECT EmployeeID FROM Has_Clearance WHERE Level = 1) AND EmployeeID IN (SELECT Manager FROM Shipment) AND EmployeeID IN (SELECT Recipient FROM Package) AND EmployeeID IN (SELECT Sender FROM Package) AND EmployeeID IN (SELECT EmployeeID FROM Employee WHERE Name LIKE '%Intern%') AND EmployeeID IN (SELECT EmployeeID FROM Employee WHERE Name LIKE '%Job%') AND EmployeeID IN (SELECT EmployeeID FROM Employee WHERE Name LIKE '%Intern Job%') AND EmployeeID IN (SELECT EmployeeID FROM Employee WHERE Name LIKE '%Job Intern%') AND EmployeeID IN (SELECT EmployeeID FROM Employee WHERE Name LIKE '%Intern Job%') AND EmployeeID IN (SELECT EmployeeID FROM Employee WHERE Name LIKE '%Job Intern%') AND EmployeeID IN (SELECT EmployeeID FROM Employee WHERE Name LIKE '%Intern Job%') AND EmployeeID IN (SELECT EmployeeID FROM Employee WHERE Name LIKE '%Job Intern%') AND Employee
 SELECT AVG(Salary) FROM Employee WHERE Position IN ('Intern', 'intern', 'Internship', 'internship', 'Trainee', 'trainee', 'Trainee Intern', 'trainee intern', 'Trainee Internship', 'trainee internship', 'Trainee/Intern', 'trainee/intern', 'Trainee/Internship', 'trainee/internship', 'Trainee & Intern', 'trainee & intern', 'Trainee & Internship', 'trainee & internship', 'Trainee, Intern', 'trainee, intern', 'Trainee, Internship', 'trainee, internship', 'Trainee/Internship & Trainee') OR Position LIKE '%Intern%' OR Position LIKE '%intern%' OR Position LIKE '%Internship%' OR Position LIKE '%internship%' OR Position LIKE '%Trainee%' OR Position LIKE '%trainee%' OR Position LIKE '%Trainee Intern%' OR Position LIKE '%trainee intern%' OR Position LIKE '%Trainee Internship%' OR Position LIKE '%trainee internship%' OR Position LIKE '%Trainee/%' OR Position LIKE '%trainee/%' OR Position LIKE '%Trainee/&' OR Position LIKE '%trainee/&' OR Position LIKE '%Trainee,' OR Position LIKE '%trainee,' OR Position LIKE '%Trainee,' OR Position LIKE '%trainee,' OR Position LIKE '%Trainee/%' OR Position LIKE '%trainee/%' OR Position LIKE '%Trainee/%' OR Position LIKE '%trainee/%' OR Position LIKE '%Trainee/%' OR Position LIKE '%trainee/%' OR Position LIKE '%Trainee/%' OR Position LIKE '%trainee/%' OR Position LIKE '%Trainee/%' OR Position LIKE '%trainee/%' OR Position LIKE '%Trainee/%' OR Position LIKE '%trainee/%' OR Position LIKE '%Trainee/%' OR Position LIKE '%trainee/%' OR Position LIKE '%Trainee/%' OR Position LIKE '%trainee/%' OR Position LIKE '%Trainee/%' OR Position LIKE '%trainee/%' OR Position LIKE '%Trainee/%' OR Position LIKE '%trainee/%' OR Position LIKE '%Trainee/%' OR Position LIKE '%trainee/%' OR Position LIKE '%Trainee/%' OR Position LIKE '%trainee/%' OR Position LIKE '%Trainee/%' OR Position LIKE '%trainee/%' OR Position LIKE '%Trainee/%' OR Position LIKE '%trainee/%' OR Position LIKE '%Trainee/%' OR Position LIKE '%trainee/%' OR Position LIKE '%Trainee/%'
SELECT T2.Level  
SELECT T2.Level FROM Employee AS T1 INNER JOIN Has_Clearance AS T2 ON T1.EmployeeID = T2.Employee WHERE T1.Position = 'Physician' AND T2.PlantID IN (SELECT PlanetID FROM Shipment WHERE Manager = T1.EmployeeID) GROUP BY T2.Level HAVING COUNT(T2.Level) = (SELECT COUNT(*) FROM Employee WHERE Position = 'Physician') - 1; SELECT T2.Level FROM Employee AS T1 INNER JOIN Has_Clearance AS T2 ON T1.EmployeeID = T2.Employee WHERE T1.Position = 'Physician' AND T2.PlantID IN (SELECT PlanetID FROM Shipment WHERE Manager = T1.EmployeeID) GROUP BY T2.Level HAVING COUNT(T2.Level) = (SELECT COUNT(*) FROM Employee WHERE Position = 'Physician') - 1; SELECT Level FROM Has_Clearance WHERE Employee IN (SELECT EmployeeID FROM Employee WHERE Position = 'Physician' AND EmployeeID IN (SELECT Manager FROM Shipment)); SELECT Level FROM Has_Clear
SELECT T2.PackageNumber FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender INNER JOIN Employee AS T3 ON T3.Name = 'Leo Wong' WHERE T1.Name = T3.Name;  
SELECT COUNT(T2.PackageNumber) FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender WHERE T1.Name = 'Leo Wong' AND T2.Sender = T1.AccountNumber; SELECT COUNT(T2.PackageNumber) FROM Employee AS T1 INNER JOIN Client AS T3 ON T1.Name = T3.Name INNER JOIN Package AS T2 ON T3.AccountNumber = T2.Sender WHERE T1.Name = 'Leo Wong' AND T2.Sender = T3.AccountNumber; SELECT COUNT(T2.PackageNumber) FROM Employee AS T1 INNER JOIN Client AS T2 ON T1.Name = T2.Name INNER JOIN Package AS T3 ON T2.AccountNumber = T3.Sender WHERE T1.Name = 'Leo Wong' AND T3.Sender = T2.AccountNumber; SELECT COUNT(T2.PackageNumber) FROM Employee AS T1 INNER JOIN Client AS T2 ON T1.Name = T2.Name INNER JOIN Package AS T3 ON T2.AccountNumber = T3.Sender
SELECT DISTINCT T2.PackageNumber FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Recipient WHERE T1.Name = 'Leo Wong' AND T2.Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') OR T2.Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') AND T2.Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') OR T2.Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') AND T2.Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') AND T2.Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') AND T2.Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') AND T2.Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') AND T2.Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') AND T2.Sender IN (
SELECT DISTINCT T2.PackageNumber FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Recipient WHERE T1.Name = 'Leo Wong' AND T2.Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') OR T2.Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') AND T2.Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') OR T2.Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') AND T2.Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') AND T2.Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') AND T2.Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') AND T2.Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') AND T2.Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') AND T2.Sender IN (SELECT
SELECT DISTINCT T1.AccountNumber FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender WHERE T1.Name = 'Leo Wong' UNION SELECT DISTINCT T1.AccountNumber FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Recipient WHERE T1.Name = 'Leo Wong' UNION SELECT DISTINCT T1.AccountNumber FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender WHERE T1.Name = 'Leo Wong' UNION SELECT DISTINCT T1.AccountNumber FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Recipient WHERE T1.Name = 'Leo Wong' UNION SELECT DISTINCT T1.AccountNumber FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender WHERE T1.Name = 'Leo Wong' UNION SELECT DISTINCT T1.AccountNumber FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Recipient
SELECT DISTINCT CASE WHEN T1.Contents LIKE '%Leo Wong%' THEN T1.PackageNumber ELSE NULL END AS PackageNumber FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Sender = T2.AccountNumber UNION SELECT DISTINCT CASE WHEN T1.Contents LIKE '%Leo Wong%' THEN T1.PackageNumber ELSE NULL END AS PackageNumber FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Recipient = T2.AccountNumber;
SELECT COUNT(T1.PackageNumber) FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Sender = T2.AccountNumber INNER JOIN Client AS T3 ON T1.Recipient = T3.AccountNumber WHERE T2.Name = 'Ogden Wernstrom' AND T3.Name = 'Leo Wong'
SELECT COUNT(T1.PackageNumber) FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Sender = T2.AccountNumber INNER JOIN Client AS T3 ON T1.Recipient = T3.AccountNumber WHERE T2.Name = 'Ogden Wernstrom' AND T3.Name = 'Leo Wong' AND T1.Contents = 'package' AND T1.Weight > 0 AND T1.Weight < 1000 AND T1.Sender = T2.AccountNumber AND T1.Recipient = T3.AccountNumber AND T1.PackageNumber = T1.PackageNumber AND T1.Shipment = T1.ShipmentID AND T1.Weight = T1.Weight AND T1.Contents = T1.Contents AND T1.Weight > 0 AND T1.Weight < 1000 AND T1.PackageNumber = T1.PackageNumber AND T1.Shipment = T1.ShipmentID AND T1.Weight = T1.Weight AND T1.Contents = T1.Contents AND T1.PackageNumber = T1.PackageNumber AND T
 SELECT T2.Contents FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender WHERE T1.Name = 'John Zoidfarb' AND T2.Sender = T1.AccountNumber 
SELECT T2.Contents FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender WHERE T1.Name = 'John Zoidfarb' GROUP BY T2.Contents;  
 SELECT T1.PackageNumber, T1.Weight FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name LIKE '%John%' ORDER BY T1.Weight DESC LIMIT 1 
 SELECT T1.PackageNumber, T1.Weight FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name LIKE 'John%' ORDER BY T1.Weight DESC LIMIT 1 
SELECT PackageNumber, Weight FROM Package ORDER BY Weight LIMIT 3;
SELECT PackageNumber, Weight FROM Package ORDER BY Weight LIMIT 3;
SELECT T1.Name, COUNT(T2.PackageNumber) FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T1.AccountNumber ORDER BY COUNT(T2.PackageNumber) DESC LIMIT 1; SELECT T1.Name, COUNT(T2.PackageNumber) FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T1.AccountNumber;  
SELECT T1.Name, COUNT(*) FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T1.AccountNumber ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.Name, COUNT(T2.Recipient) FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Recipient GROUP BY T1.AccountNumber ORDER BY COUNT(T2.Recipient) ASC LIMIT 1; SELECT T1.Name, COUNT(T2.Recipient) FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Recipient GROUP BY T1.AccountNumber ORDER BY COUNT(T2.Recipient) ASC LIMIT 1; SELECT T1.Name, COUNT(T2.Recipient) FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Recipient GROUP BY T1.AccountNumber ORDER BY COUNT(T2.Recipient) ASC LIMIT 1; SELECT T1.Name, COUNT(T2.Recipient) FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Recipient GROUP BY T1.AccountNumber ORDER BY COUNT(T2.Recipient) ASC LIMIT 1; SELECT T1.Name, COUNT(T2.Recipient) FROM Client AS T1 INNER JOIN Package AS T2 ON
SELECT MIN(Weight) FROM Package WHERE Recipient IN (SELECT AccountNumber FROM Client) AND PackageNumber IN (SELECT PackageNumber FROM Package WHERE Recipient IN (SELECT AccountNumber FROM Client) GROUP BY Recipient ORDER BY COUNT(*) DESC LIMIT 1) AND Shipment IN (SELECT ShipmentID FROM Shipment WHERE Manager IN (SELECT EmployeeID FROM Employee WHERE Position = 'Manager')) AND Contents IN (SELECT Contents FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Manager IN (SELECT EmployeeID FROM Employee WHERE Position = 'Manager')) AND PackageNumber IN (SELECT PackageNumber FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Manager IN (SELECT EmployeeID FROM Employee WHERE Position = 'Manager')) GROUP BY Contents ORDER BY COUNT(*) DESC LIMIT 1)) AND Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'John Doe') AND Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'John Doe') AND Shipment IN (SELECT ShipmentID FROM Shipment WHERE Date LIKE '2022-01-%
SELECT T1.Name FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T2.Sender HAVING COUNT(T2.Sender) > 1;
SELECT DISTINCT T1.Name FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T2.Sender HAVING COUNT(T2.Sender) > 1;
SELECT T1.Coordinates FROM Planet AS T1 INNER JOIN Client AS T2 ON T1.Name = T2.Name WHERE T2.Name = 'Mars' LIMIT 1;  
SELECT T1.Coordinates FROM Planet AS T1 INNER JOIN Client AS T2 ON T1.Name = T2.Name WHERE T2.Name = 'Mars' LIMIT 1; SELECT T1.Coordinates FROM Planet AS T1 INNER JOIN Client AS T2 ON T1.Name = T2.Name WHERE T2.Name = 'Mars' LIMIT 1; SELECT T1.Coordinates FROM Planet AS T1 INNER JOIN Client AS T2 ON T1.Name = T2.Name WHERE T2.Name = 'Mars' LIMIT 1; SELECT T1.Coordinates FROM Planet AS T1 INNER JOIN Client AS T2 ON T1.Name = T2.Name WHERE T2.Name = 'Mars' LIMIT 1; SELECT T1.Coordinates FROM Planet AS T1 INNER JOIN Client AS T2 ON T1.Name = T2.Name WHERE T2.Name = 'Mars' LIMIT 1; SELECT T1.Coordinates FROM Planet AS T1 INNER JOIN Client AS T2 ON T1.Name = T2.Name WHERE T2.Name =
SELECT Name, Coordinates FROM Planet ORDER BY Name ASC;
SELECT Name, Coordinates FROM Planet ORDER BY Name ASC;
SELECT ShipmentID FROM Shipment WHERE Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Phillip J. Fry')
SELECT DISTINCT T1.ShipmentID FROM Shipment AS T1 INNER JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID WHERE T2.Name = 'Phillip J Fry' AND T1.Date IS NOT NULL;
SELECT Date FROM Shipment;
SELECT Date FROM Shipment;
SELECT DISTINCT S.ShipmentID  
SELECT DISTINCT S.ShipmentID FROM Shipment S INNER JOIN Planet P ON S.Planet = P.PlanetID WHERE P.Name = 'Mars' AND S.Date IS NOT NULL;
SELECT S.ShipmentID FROM Shipment S INNER JOIN Planet P ON S.Planet = P.PlanetID INNER JOIN Employee E ON S.Manager = E.EmployeeID WHERE P.Name = 'Mars' AND E.Name = 'Turanga Leela' AND P.Coordinates = 0.3780833333333333;  
SELECT S.ShipmentID FROM Shipment S INNER JOIN Planet P ON S.Planet = P.PlanetID INNER JOIN Employee E ON S.Manager = E.EmployeeID WHERE P.Name = 'Mars' AND E.Name = 'Turanga Leela' AND P.Coordinates = 0.3780833333333333;  
SELECT DISTINCT S.ShipmentID FROM Shipment S INNER JOIN Planet P ON S.Planet = P.PlanetID WHERE P.Name = 'Mars' UNION SELECT DISTINCT S.ShipmentID FROM Shipment S INNER JOIN Employee E ON S.Manager = E.EmployeeID WHERE E.Name = 'Turanga Leela' AND S.Planet NOT IN (SELECT S2.ShipmentID FROM Shipment S2 INNER JOIN Planet P2 ON S2.Planet = P2.PlanetID WHERE P2.Name = 'Mars') AND S.Planet NOT IN (SELECT S3.ShipmentID FROM Shipment S3 INNER JOIN Employee E3 ON S3.Manager = E3.EmployeeID WHERE E3.Name = 'Turanga Leela') AND S.Planet NOT IN (SELECT S4.ShipmentID FROM Shipment S4 INNER JOIN Planet P4 ON S4.Planet = P4.PlanetID WHERE P4.Name = 'Mars') AND S.Planet NOT IN (SELECT S5.ShipmentID FROM Shipment S
SELECT DISTINCT S.ShipmentID FROM Shipment S INNER JOIN Planet P ON S.Planet = P.PlanetID INNER JOIN Has_Clearance HC ON P.PlanetID = HC.Planet INNER JOIN Employee E ON HC.Employee = E.EmployeeID WHERE E.Name = 'Turanga Leela' AND P.Name = 'Mars' AND HC.Level = 3; SELECT DISTINCT S.ShipmentID FROM Shipment S INNER JOIN Planet P ON S.Planet = P.PlanetID WHERE P.Name = 'Mars' AND S.Manager IN (SELECT E.EmployeeID FROM Employee E INNER JOIN Has_Clearance HC ON E.EmployeeID = HC.Employee INNER JOIN Planet P ON HC.Planet = P.PlanetID WHERE E.Name = 'Turanga Leela' AND P.Name = 'Mars' AND HC.Level = 3); SELECT DISTINCT S.ShipmentID FROM Shipment S INNER JOIN Planet P ON S.Planet = P.PlanetID WHERE P.Name = 'Mars' AND S.Manager IN (SELECT E.EmployeeID FROM
SELECT T1.Name, COUNT(T2.ShipmentID) FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet GROUP BY T1.PlanetID, T1.Name ORDER BY COUNT(T2.ShipmentID) DESC;
SELECT T1.Name, COUNT(T2.ShipmentID) FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet GROUP BY T1.PlanetID;
SELECT T1.Name FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet GROUP BY T2.Planet ORDER BY COUNT(T2.Planet) DESC LIMIT 1;
 SELECT T1.Name FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet GROUP BY T1.PlanetID ORDER BY COUNT(T2.ShipmentID) DESC LIMIT 1;
SELECT E.Name, COUNT(S.ShipmentID) FROM Employee E INNER JOIN Shipment S ON E.EmployeeID = S.Manager GROUP BY E.EmployeeID, E.Name;
SELECT COUNT(ShipmentID), Name FROM Employee WHERE EmployeeID IN ( SELECT Manager FROM Shipment GROUP BY Manager ) GROUP BY Name; SELECT COUNT(ShipmentID), Name FROM Employee WHERE EmployeeID IN ( SELECT Manager FROM Shipment GROUP BY Manager ) GROUP BY Name; SELECT COUNT(ShipmentID), Name FROM Employee WHERE EmployeeID IN ( SELECT Manager FROM Shipment GROUP BY Manager ) GROUP BY Name; SELECT COUNT(ShipmentID), Name FROM Employee WHERE EmployeeID IN ( SELECT Manager FROM Shipment GROUP BY Manager ) GROUP BY Name; SELECT COUNT(ShipmentID), Name FROM Employee WHERE EmployeeID IN ( SELECT Manager FROM Shipment GROUP BY Manager ) GROUP BY Name; SELECT COUNT(ShipmentID), Name FROM Employee WHERE EmployeeID IN ( SELECT Manager FROM Shipment GROUP BY Manager ) GROUP BY Name; SELECT COUNT(ShipmentID), Name FROM Employee WHERE EmployeeID IN ( SELECT Manager FROM Shipment GROUP BY Manager ) GROUP BY Name; SELECT COUNT(ShipmentID), Name FROM Employee WHERE EmployeeID IN
SELECT SUM(T2.Weight)  
SELECT SUM(T2.Weight) FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet INNER JOIN Package AS T3 ON T2.ShipmentID = T3.Shipment WHERE T1.Name = 'Mars' AND T1.Coordinates = ( SELECT Coordinates FROM Planet WHERE Name = 'Mars' ) AND T2.Date = ( SELECT Date FROM Shipment WHERE Planet = ( SELECT PlanetID FROM Planet WHERE Name = 'Mars' ) ) AND T3.Contents = ( SELECT Contents FROM Package WHERE Shipment = ( SELECT ShipmentID FROM Shipment WHERE Planet = ( SELECT PlanetID FROM Planet WHERE Name = 'Mars' ) ) ) AND T3.Sender = ( SELECT AccountNumber FROM Client WHERE Name = 'Sender' ) AND T3.Recipient = ( SELECT AccountNumber FROM Client WHERE Name = 'Recipient' ) AND T1.Name = 'Mars' AND T2.Planet = ( SELECT PlanetID FROM Planet WHERE Name = 'Mars' )
 SELECT T1.Name, SUM(T3.Weight) FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet INNER JOIN Package AS T3 ON T2.ShipmentID = T3.Shipment GROUP BY T1.PlanetID;
SELECT T1.Name, SUM(T2.Weight) FROM Planet AS T1 INNER JOIN Shipment AS T3 ON T1.PlanetID = T3.Planet INNER JOIN Package AS T2 ON T3.ShipmentID = T2.Shipment GROUP BY T1.PlanetID, T1.Name ORDER BY T1.PlanetID, T1.Name;  
SELECT DISTINCT T2.Name  
SELECT DISTINCT T1.Name FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet INNER JOIN Package AS T3 ON T2.ShipmentID = T3.Shipment GROUP BY T2.Planet HAVING SUM(T3.Weight) > 30;
SELECT DISTINCT T2.PackageNumber  
SELECT COUNT(T2.PackageNumber) FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender INNER JOIN Shipment AS T3 ON T2.Shipment = T3.ShipmentID INNER JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T1.Name = 'Zapp Brannigan' AND T4.Name = 'Omicron Persei 8' AND T3.Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Zapp Brannigan') AND T3.Date = (SELECT MAX(Date) FROM Shipment WHERE Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Zapp Brannigan')) AND T3.Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8') AND T3.Date = (SELECT MAX(Date) FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8')) AND T3.Manager = (SELECT EmployeeID FROM Employee WHERE Name
SELECT DISTINCT T1.PackageNumber  
 SELECT COUNT(T1.ShipmentID) FROM Shipment AS T1 INNER JOIN Package AS T2 ON T1.ShipmentID = T2.Shipment WHERE T1.Planet = ( SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8' ) OR T2.Sender = ( SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan' ) OR T2.Recipient = ( SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan' ) OR T1.Planet = ( SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8' ) OR T2.Sender = ( SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan' ) OR T2.Recipient = ( SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan' )  
SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30;
SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30;
SELECT E.Name FROM Employee E LEFT JOIN Has_Clearance H ON E.EmployeeID = H.Employee LEFT JOIN Planet P ON H.Planet = P.PlanetID WHERE P.Name = 'Mars' AND H.Level IS NULL;
SELECT E.Name FROM Employee E LEFT JOIN Has_Clearance H ON E.EmployeeID = H.Employee LEFT JOIN Planet P ON H.Planet = P.PlanetID WHERE P.Name = 'Mars' AND H.Planet IS NULL;
SELECT E.Name  
SELECT E.Name FROM Employee E INNER JOIN Has_Clearance H ON E.EmployeeID = H.Employee INNER JOIN Planet P ON H.Planet = P.PlanetID WHERE P.Name = 'Omega III' GROUP BY E.Name;
SELECT DISTINCT T1.Name FROM Planet AS T1 INNER JOIN Has_Clearance AS T2 ON T1.PlanetID = T2.Planet WHERE T2.Employee IN (SELECT Employee FROM Has_Clearance GROUP BY Employee HAVING COUNT(*) = 1) AND T2.Employee NOT IN (SELECT Employee FROM Has_Clearance GROUP BY Employee HAVING COUNT(*) > 1) AND T2.Employee NOT IN (SELECT Employee FROM Has_Clearance GROUP BY Employee HAVING COUNT(*) < 1) AND T2.Employee NOT IN (SELECT Employee FROM Has_Clearance GROUP BY Employee HAVING COUNT(*) = 0) AND T2.Employee NOT IN (SELECT Employee FROM Has_Clearance GROUP BY Employee HAVING COUNT(*) = NULL) AND T2.Employee NOT IN (SELECT Employee FROM Has_Clearance GROUP BY Employee HAVING COUNT(*) = '' ) AND T2.Employee NOT IN (SELECT Employee FROM Has_Clearance GROUP BY Employee HAVING COUNT(*) IS NULL) AND T2.Employee NOT IN (SELECT Employee FROM Has_Clearance GROUP BY Employee HAVING COUNT(*) = '') AND T2
SELECT DISTINCT T1.Name FROM Planet AS T1 INNER JOIN Has_Clearance AS T2 ON T1.PlanetID = T2.Planet WHERE T2.Level = 1 GROUP BY T1.Name HAVING COUNT(T2.Employee) = 1;
SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000;
SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000;
SELECT Name FROM Employee WHERE Salary > ( SELECT AVG(Salary) FROM Employee ) OR Salary > 5000; SELECT Name FROM Employee WHERE Salary > ( SELECT AVG(Salary) FROM Employee ) OR Salary > 5000; SELECT Name FROM Employee WHERE Salary > ( SELECT AVG(Salary) FROM Employee ) OR Salary > 5000; SELECT Name FROM Employee WHERE Salary > ( SELECT AVG(Salary) FROM Employee ) OR Salary > 5000; SELECT Name FROM Employee WHERE Salary > ( SELECT AVG(Salary) FROM Employee ) OR Salary > 5000; SELECT Name FROM Employee WHERE Salary > ( SELECT AVG(Salary) FROM Employee ) OR Salary > 5000; SELECT Name FROM Employee WHERE Salary > ( SELECT AVG(Salary) FROM Employee ) OR Salary > 5000; SELECT Name FROM Employee WHERE Salary > ( SELECT AVG(Salary) FROM Employee ) OR Salary > 5000; SELECT Name FROM Employee WHERE Salary > ( SELECT AVG(Salary) FROM Employee ) OR Salary > 5000; SELECT Name FROM Employee WHERE Salary > ( SELECT AVG(Salary)
SELECT Name FROM Employee WHERE Salary > ( SELECT AVG(Salary) FROM Employee ) OR Salary > 5000; SELECT Name FROM Employee WHERE Salary > ( SELECT AVG(Salary) FROM Employee ) OR Salary > 5000; SELECT Name FROM Employee WHERE Salary > ( SELECT AVG(Salary) FROM Employee ) OR Salary > 5000; SELECT Name FROM Employee WHERE Salary > ( SELECT AVG(Salary) FROM Employee ) OR Salary > 5000; SELECT Name FROM Employee WHERE Salary > ( SELECT AVG(Salary) FROM Employee ) OR Salary > 5000; SELECT Name FROM Employee WHERE Salary > ( SELECT AVG(Salary) FROM Employee ) OR Salary > 5000; SELECT Name FROM Employee WHERE Salary > ( SELECT AVG(Salary) FROM Employee ) OR Salary > 5000; SELECT Name FROM Employee WHERE Salary > ( SELECT AVG(Salary) FROM Employee ) OR Salary > 5000; SELECT Name FROM Employee WHERE Salary > ( SELECT AVG(Salary) FROM Employee ) OR Salary > 5000; SELECT Name FROM Employee WHERE Salary > ( SELECT AVG(Salary)
SELECT COUNT(*) FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars')) AND EmployeeID NOT IN (SELECT Manager FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars')) AND EmployeeID NOT IN (SELECT Recipient FROM Package WHERE Recipient IN (SELECT Recipient FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars')))) AND EmployeeID NOT IN (SELECT Sender FROM Package WHERE Sender IN (SELECT Sender FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars')))) AND EmployeeID NOT IN (SELECT Manager FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars')) AND EmployeeID NOT IN (SELECT Recipient FROM Package WHERE Recipient IN (SELECT Recipient FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment
 SELECT COUNT(*) FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars')) AND EmployeeID IN (SELECT Manager FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars')) OR EmployeeID IN (SELECT Recipient FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))) OR EmployeeID IN (SELECT Sender FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))) OR EmployeeID IN (SELECT Recipient FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))) OR EmployeeID IN (SELECT Sender FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))) OR EmployeeID IN (SELECT Manager FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars')) OR EmployeeID IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'));  
SELECT COUNT(Game_ID) FROM game;
SELECT COUNT(Game_ID) FROM game;
SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC;
SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC;
SELECT AVG(Units_sold_Millions) FROM game WHERE Developers NOT LIKE '%Nintendo%' OR Developers IS NULL;
SELECT AVG(Units_sold_Millions) FROM game WHERE Developers NOT LIKE '%Nintendo%' OR Developers IS NULL;
SELECT Platform_name, Market_district FROM platform;
SELECT Platform_name, Market_district FROM platform;
SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1;
SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1;
SELECT MAX(Rank_of_the_year), MIN(Rank_of_the_year) FROM player;
SELECT MAX(Rank_of_the_year), MIN(Rank_of_the_year) FROM player;
SELECT COUNT(*) FROM player WHERE Rank_of_the_year < 3;
SELECT COUNT(Player_ID) FROM player WHERE Rank_of_the_year <= 3;
SELECT Player_name FROM player ORDER BY Player_name ASC;
SELECT Player_name FROM player ORDER BY Player_name ASC;
SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC;
SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC;
SELECT T1.Player_name, T1.Rank_of_the_year FROM player AS T1 INNER JOIN game_player AS T2 ON T1.Player_ID = T2.Player_ID INNER JOIN game AS T3 ON T2.Game_ID = T3.Game_ID WHERE T3.Title = 'Super Mario World' AND T2.If_active = 1;
SELECT T1.Player_name, T1.Rank_of_the_year FROM player AS T1 INNER JOIN game_player AS T2 ON T1.Player_ID = T2.Player_ID INNER JOIN game AS T3 ON T2.Game_ID = T3.Game_ID WHERE T3.Title = 'Super Mario World' AND T2.If_active = 1;
SELECT DISTINCT T1.Developers FROM game AS T1 INNER JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID INNER JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.College = 'Auburn' AND T1.Developers NOT LIKE '%, %' OR T1.Developers LIKE '%, %' AND T1.Developers NOT LIKE '%, %, %'
SELECT DISTINCT T1.Developers FROM game AS T1 INNER JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID INNER JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.College = 'Auburn' AND T2.If_active = 1;
SELECT AVG(T2.Units_sold_Millions) FROM player AS T1 INNER JOIN game_player AS T2 ON T1.Player_ID = T2.Player_ID INNER JOIN game AS T3 ON T2.Game_ID = T3.Game_ID WHERE T1.Position = 'Guard' GROUP BY T1.Position HAVING COUNT(T1.Position) > 1; SELECT AVG(T2.Units_sold_Millions) FROM player AS T1 INNER JOIN game_player AS T2 ON T1.Player_ID
SELECT AVG(T2.Units_sold_Millions) FROM player AS T1 INNER JOIN game_player AS T3 ON T1.Player_ID = T3.Player_ID INNER JOIN game AS T2 ON T2.Game_ID = T3.Game_ID WHERE T1.Position = 'Guard' GROUP BY T1.Position HAVING COUNT(T1.Position) > 0; SELECT AVG(T2.Units_sold_Millions) FROM player AS T1 INNER JOIN game_player AS T3 ON T1.Player_ID = T3
SELECT T1.Title, T2.Platform_name FROM game AS T1 INNER JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID;
SELECT T1.Title, T2.Platform_name FROM game AS T1 INNER JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID;
SELECT T2.Title FROM platform AS T1 INNER JOIN game AS T2 ON T1.Platform_ID = T2.Platform_ID WHERE T1.Market_district IN ('Asia', 'USA') ORDER BY T2.Title;
SELECT T1.Title FROM game AS T1 INNER JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID INNER JOIN platform AS T3 ON T1.Platform_ID = T3.Platform_ID WHERE T3.Market_district IN ('Asia', 'USA') AND T2.If_active = 1;
SELECT Franchise, COUNT(Game_ID) FROM game GROUP BY Franchise;
SELECT Franchise, COUNT(Game_ID) FROM game GROUP BY Franchise;
SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(Game_ID) DESC LIMIT 1;
SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(Game_ID) DESC LIMIT 1;
SELECT DISTINCT Franchise FROM game GROUP BY Franchise HAVING COUNT(Franchise) >= 2;
SELECT DISTINCT Franchise FROM game GROUP BY Franchise HAVING COUNT(Franchise) >= 2;
SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player) OR Player_ID NOT IN (SELECT Player_ID FROM game_player) GROUP BY Player_ID HAVING COUNT(Player_ID) = 0;  
 SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player WHERE If_active = 1) AND Player_ID NOT IN (SELECT Game_ID FROM game_player WHERE If_active = 1) AND Player_ID NOT IN (SELECT Player_ID FROM game_player WHERE If_active = 0) AND Player_ID NOT IN (SELECT Game_ID FROM game_player WHERE If_active = 0) AND Player_ID NOT IN (SELECT Player_ID FROM game_player) AND Player_ID NOT IN (SELECT Game_ID FROM game_player) OR Player_ID NOT IN (SELECT Player_ID FROM game_player WHERE If_active = 1) OR Player_ID NOT IN (SELECT Game_ID FROM game_player WHERE If_active = 1) OR Player_ID NOT IN (SELECT Player_ID FROM game_player WHERE If_active = 0) OR Player_ID NOT IN (SELECT Game_ID FROM game_player WHERE If_active = 0) OR Player_ID NOT IN (SELECT Player_ID FROM game_player) OR Player_ID NOT IN (SELECT Game_ID FROM game_player)  
SELECT DISTINCT T1.Title FROM game AS T1 INNER JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID INNER JOIN player AS T3 ON T2.Player_ID = T3.Player_ID INNER JOIN player AS T4 ON T2.Player_ID = T4.Player_ID WHERE T3.College = 'Oklahoma' AND T4.College = 'Auburn' AND T3.Player_ID!= T4.Player_ID;
SELECT T1.Title FROM game AS T1 INNER JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID INNER JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.College = 'Oklahoma' OR T3.College = 'Auburn' GROUP BY T1.Title;
SELECT DISTINCT Franchise FROM game;
SELECT DISTINCT Franchise FROM game;
SELECT DISTINCT T1.Title FROM game AS T1 INNER JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID LEFT JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.Position!= 'Guard' AND T2.If_active = 0;
SELECT T1.Title FROM game AS T1 INNER JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID WHERE T2.Player_ID NOT IN (SELECT Player_ID FROM game_player WHERE If_active = 1 AND Position = 'Guard') AND T2.Player_ID IS NOT NULL; SELECT T1.Title FROM game AS T1 LEFT JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID WHERE T2.Player_ID IS NULL
SELECT Name FROM press ORDER BY Year_Profits_billion DESC;
SELECT Name FROM press ORDER BY Year_Profits_billion DESC;
SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1;
SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1;
SELECT AVG(Year_Profits_billion), MAX(Year_Profits_billion) FROM press;
SELECT Press_ID, AVG(Year_Profits_billion) AS avg_yearly_profit, MAX(Year_Profits_billion) AS max_yearly_profit FROM press GROUP BY Press_ID;
SELECT Name FROM press WHERE Month_Profits_billion = ( SELECT MAX(Month_Profits_billion ) FROM press );
SELECT Name FROM press WHERE Month_Profits_billion = ( SELECT MAX(Month_Profits_billion ) FROM press );
 SELECT (SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1) AS highest_profit_publisher, (SELECT Name FROM press ORDER BY Month_Profits_billion ASC LIMIT 1) AS lowest_profit_publisher;
 SELECT (SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1) AS highest_profit_press, (SELECT Name FROM press ORDER BY Month_Profits_billion ASC LIMIT 1) AS lowest_profit_press;
SELECT COUNT(Author_ID) FROM author WHERE Age < 30;
SELECT COUNT(Author_ID) FROM author WHERE Age < 30;
SELECT AVG(Age), Gender FROM author GROUP BY Gender;
SELECT Gender, AVG(Age) FROM author GROUP BY Gender;
SELECT Gender, COUNT(*) FROM author WHERE Age > 30 GROUP BY Gender;
SELECT Age, Gender, COUNT(Author_ID) FROM author WHERE Age > 30 GROUP BY Gender;
SELECT Title FROM book ORDER BY Release_date DESC;
SELECT Title FROM book ORDER BY Release_date DESC;
SELECT Book_Series, COUNT(Book_ID) FROM book GROUP BY Book_Series;
SELECT Book_Series, COUNT(Book_ID) FROM book GROUP BY Book_Series;
SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5;
SELECT Title, Release_date FROM book WHERE Sale_Amount = ( SELECT Sale_Amount FROM book ORDER BY Sale_Amount DESC LIMIT 1 ) LIMIT 5;
SELECT Book_Series FROM book WHERE Sale_Amount = '1000' INTERSECT SELECT Book_Series FROM book WHERE Sale_Amount = '500' GROUP BY Book_Series HAVING COUNT(Book_Series) > 1;
SELECT DISTINCT T1.Book_Series FROM book AS T1 INNER JOIN book AS T2 ON T1.Book_Series = T2.Book_Series WHERE T1.Sale_Amount > '1000' AND T2.Sale_Amount < '500'
 SELECT DISTINCT T1.Name FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Book_Series = 'MM' INTERSECT SELECT DISTINCT T1.Name FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Book_Series = 'LT'  
SELECT DISTINCT T1.Name FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Book_Series = 'MM' INTERSECT SELECT DISTINCT T1.Name FROM author AS
SELECT Name, Age FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book) OR Author_ID IS NULL;
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book) AND Author_ID IS NOT NULL;
SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID HAVING COUNT(Book_ID) > 1)
SELECT T1.Name FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T2.Author_ID HAVING COUNT(T2.Author_ID) > 1;
 SELECT T1.Title, T2.Name, T3.Name FROM book AS T1 INNER JOIN author AS T2 ON T1.Author_ID = T2.Author_ID INNER JOIN press AS T3 ON T1.Press_ID = T3.Press_ID ORDER BY T1.Sale_Amount DESC LIMIT 3;
 SELECT T1.Title, T2.Name, T3.Name FROM book AS T1 INNER JOIN author AS T2 ON T1.Author_ID = T2.Author_ID INNER JOIN press AS T3 ON T1.Press_ID = T3.Press_ID ORDER BY T1.Sale_Amount DESC LIMIT 3;
SELECT T1.Name, SUM(CASE WHEN T2.Sale_Amount = '100M+' THEN 1 ELSE CASE WHEN T2.Sale_Amount = '50M-' THEN 1 ELSE CASE WHEN T2
SELECT T1.Name, SUM(CASE WHEN T2.Sale_Amount = '100M' THEN 100 ELSE CASE WHEN T2.Sale_Amount = '500M' THEN 500 ELSE CASE WHEN T2
 SELECT T1.Name, COUNT(CASE WHEN T2.Sale_Amount > '1000' THEN T2.Book_ID ELSE NULL END) FROM press AS T1 INNER JOIN book AS T2 ON T1.Press_ID = T2.Press_ID  
SELECT T1.Name, COUNT(*) FROM press AS T1 INNER JOIN book AS T2 ON T1.Press_ID = T2.Press_ID WHERE T2.Sale_Amount = 'above 1000' GROUP BY T1.P
SELECT T1.Name FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID ORDER BY T2.Sale_Amount DESC LIMIT 1;
SELECT T1.Name FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID ORDER BY T2.Sale_Amount DESC LIMIT 1;
SELECT a.Name, a.Gender FROM author a JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a.Author_ID ORDER BY COUNT(b.Book_ID) DESC LIMIT 1;
 SELECT T1.Name, T1.Gender FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T1.Author_ID ORDER BY COUNT(T1.Author_ID) DESC LIMIT 1;  
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book WHERE Press_ID IN (SELECT Press_ID FROM press WHERE Name = 'Accor'));
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book WHERE Press_ID IN (SELECT Press_ID FROM press WHERE Name = 'Accor'));
SELECT T1.Name, T2.Year_Profits_billion FROM press AS T2 INNER JOIN book AS T3 ON T2.Press_ID = T3.Press_ID GROUP BY T3.Press_ID HAVING COUNT(T3.Press_ID) > 
SELECT T1.Name, T2.Year_Profits_billion  
SELECT COUNT(author_name) FROM Authors;
SELECT author_name FROM Authors;
SELECT author_name, other_details FROM Authors;
SELECT other_details FROM Authors WHERE author_name = 'Addison Denesik'
SELECT COUNT(document_id) FROM Documents;
SELECT T2.author_name FROM Documents AS T1 INNER JOIN Authors AS T2 ON T1.author_name = T2.author_name WHERE T1.document_id = 4;
SELECT T2.author_name FROM Documents AS T1 INNER JOIN Authors AS T2 ON T1.author_name = T2.author_name WHERE T1.document_name = 'Travel to Brazil' LIMIT 1;
SELECT COUNT(document_id) FROM Documents WHERE author_name = 'Era Kerluke'
SELECT T1.author_name, T1.document_name, T1.document_description FROM Documents AS T1 INNER JOIN Authors AS T2 ON T1.author_name = T2.author_name;
SELECT D.document_id, D.author_name FROM Documents AS D INNER JOIN Authors AS A ON D.author_name = A.author_name WHERE A.author_name = 'Bianka Cummings' ORDER BY D.document_id; SELECT D.document_id, D.author_name FROM Documents AS D INNER JOIN Authors AS A ON D.author_name = A.author_name WHERE A.author_name = 'Bianka Cummings' ORDER BY D.document_id; SELECT D.document_id, D.author_name FROM Documents AS D INNER JOIN Authors AS A ON D.author_name = A.author_name WHERE A.author_name = 'Bianka Cummings' ORDER BY D.document_id; SELECT D.document_id, D.author_name FROM Documents AS D INNER JOIN Authors AS A ON D.author_name = A.author_name WHERE A.author_name = 'Bianka Cummings' ORDER BY D.document_id; SELECT D.document_id, D.author_name FROM Documents AS D INNER JOIN Authors AS A ON D.author_name = A.author_name WHERE A.author_name = 'Bianka Cummings' ORDER BY D.document_id; SELECT D.document_id, D.author_name FROM Documents AS D INNER JOIN Authors AS A ON D.author_name = A.author_name WHERE A.author_name = 'Bianka Cummings' ORDER BY D.document_id; SELECT D.document_id, D.author_name FROM Documents AS D INNER JOIN Authors AS A ON D.author_name = A.author_name WHERE A.author_name = 'Bianka Cummings' ORDER BY D.document_id; SELECT D.document_id, D.author_name FROM Documents AS D INNER JOIN Authors AS A ON D.author_name = A.author_name WHERE A.author_name = 'Bianka Cummings' ORDER BY D.document_id; SELECT D.document_id, D.author_name FROM Documents AS D INNER JOIN Authors AS A ON D.author_name = A.author_name WHERE A.author_name = 'Bianka Cummings' ORDER BY D.document_id;
SELECT T1.author_name, T1.other_details FROM Authors AS T1 INNER JOIN Documents AS T2 ON T1.author_name = T2.author_name WHERE T2.document_name = 'Travel to China' LIMIT 1;
SELECT author_name, COUNT(document_id) FROM Documents GROUP BY author_name;
SELECT T1.author_name FROM Authors AS T1 INNER JOIN Documents AS T2 ON T1.author_name = T2.author_name GROUP BY T1.author_name ORDER BY COUNT(T2.document_id) DESC LIMIT 1;
SELECT T1.author_name FROM Authors AS T1 INNER JOIN Documents AS T2 ON T1.author_name = T2.author_name GROUP BY T1.author_name HAVING COUNT(T2.document_id) >= 2;
SELECT COUNT(process_id) FROM Business_Processes;
SELECT T2.next_process_id, T2.process_name, T2.process_description FROM Business_Processes AS T2 INNER JOIN Documents_Processes AS T1 ON T2.process_id = T1.process_id WHERE T1.document_id IN ( SELECT document_id FROM Documents_Processes WHERE process_id = 9 ) AND T1.process_id = 9; SELECT T2.next_process_id, T2.process_name, T2.process_description FROM Business_Processes AS T2 INNER JOIN Documents_Processes AS T1 ON T2.process_id = T1.process_id WHERE T1.document_id IN ( SELECT document_id FROM Documents_Processes WHERE process_id = 9 ) AND T1.process_id = 9; SELECT T2.next_process_id, T2.process_name, T2.process_description FROM Business_Processes AS T2 INNER JOIN Documents_Processes AS T1 ON T2.process_id = T1.process_id WHERE T1.document_id IN ( SELECT document_id FROM Documents_Processes WHERE process_id = 9 ) AND T1.process_id = 9; SELECT T2.next_process_id, T2.process_name, T2.process_description FROM Business_Processes AS T2 INNER JOIN Documents_Processes AS T1 ON T2.process_id = T1.process_id WHERE T1.document_id IN ( SELECT document_id FROM Documents_Processes WHERE process_id = 9 ) AND T1.process_id = 9; SELECT T2.next_process_id, T2.process_name, T2.process_description FROM Business_Processes AS T2 INNER JOIN Documents_Processes AS T1 ON T2.process_id = T1.process_id WHERE T1.document_id IN ( SELECT document_id FROM Documents_Processes WHERE process_id = 9 ) AND T1.process_id = 9; SELECT T2.next_process_id, T2.process_name, T2.process_description FROM Business_Processes AS T2 INNER JOIN
SELECT T2.process_name FROM Business_Processes AS T1 INNER JOIN Business_Processes AS T2 ON T1.next_process_id = T2.process_id WHERE T1.process_id = 9;
SELECT COUNT(process_outcome_code) FROM Documents_Processes;
SELECT process_outcome_code, process_outcome_description FROM Process_Outcomes;
SELECT T2.process_outcome_description FROM Documents_Processes AS T1 INNER JOIN Process_Outcomes AS T2 ON T1.process_outcome_code = T2.process_outcome_code WHERE T1.process_outcome_code = 'working'
SELECT COUNT(process_status_code) FROM Process_Status;
SELECT process_status_code, process_status_description FROM Process_Status;
SELECT process_status_description FROM Process_Status WHERE process_status_code = 'ct'
SELECT COUNT(staff_id) FROM Staff;
SELECT staff_id, staff_details FROM Staff;
SELECT staff_details FROM Staff WHERE staff_id = 100;
SELECT COUNT(staff_role_code) FROM Ref_Staff_Roles;
SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles;
SELECT T2.staff_role_description FROM Ref_Staff_Roles AS T1 INNER JOIN Staff_in_Processes AS T2 ON T1.staff_role_code = T2.staff_role_code WHERE T1.staff_role_code = 'HR' AND T2.staff_role_code = 'HR' AND T2.staff_id = ( SELECT staff_id FROM Staff WHERE staff_details LIKE '%HR%' ) AND T2.date_from = ( SELECT MAX(date_from) FROM Staff_in_Processes WHERE staff_id = ( SELECT staff_id FROM Staff WHERE staff_details LIKE '%HR%' ) AND staff_role_code = 'HR' ) AND T2.date_to = ( SELECT MIN(date_to) FROM Staff_in_Processes WHERE staff_id = ( SELECT staff_id FROM Staff WHERE staff_details LIKE '%HR%' ) AND staff_role_code = 'HR' ) AND T2.date_from = ( SELECT MIN(date_from) FROM Staff_in_Processes WHERE staff_id = ( SELECT staff_id FROM Staff WHERE staff_details LIKE '%HR%' ) AND staff_role_code = 'HR' ) AND T2.date_to = ( SELECT MAX(date_to) FROM Staff_in_Processes WHERE staff_id = ( SELECT staff_id FROM Staff WHERE staff_details LIKE '%HR%' ) AND staff_role_code = 'HR' ) AND T2.date_from = ( SELECT MIN(date_from) FROM Staff_in_Processes WHERE staff_id = ( SELECT staff_id FROM Staff WHERE staff_details LIKE '%HR%' ) AND staff_role_code = 'HR' ) AND T2.date_to = ( SELECT MAX(date_to) FROM Staff_in_Processes WHERE staff_id = ( SELECT staff_id FROM Staff WHERE staff_details LIKE '%HR%' ) AND staff_role_code = 'HR' ) AND T2.date_from = ( SELECT MIN(date_from) FROM Staff_in_Processes WHERE staff_id = ( SELECT staff_id FROM Staff WHERE staff_details LIKE '%HR%'
SELECT COUNT(DISTINCT document_id) FROM Documents_Processes;
SELECT DISTINCT T2.process_id FROM Documents AS T1 INNER JOIN Documents_Processes AS T2 ON T1.document_id = T2.document_id WHERE T1.document_id IS NOT NULL;
SELECT document_id FROM Documents WHERE document_id NOT IN (SELECT document_id FROM Documents_Processes) OR document_id IN (SELECT next_process_id FROM Business_Processes WHERE next_process_id IS NOT NULL) OR document_id IN (SELECT process_id FROM Business_Processes WHERE next_process_id IS NULL) OR document_id IN (SELECT document_id FROM Staff_in_Processes WHERE date_to IS NULL) OR document_id IN (SELECT document_id FROM Staff_in_Processes WHERE date_from > ( SELECT MAX(date_to) FROM Staff_in_Processes WHERE document_id = t1.document_id ) ) OR document_id IN (SELECT document_id FROM Staff_in_Processes WHERE date_to IS NULL AND date_from > ( SELECT MAX(date_to) FROM Staff_in_Processes WHERE document_id = t1.document_id ) ) OR document_id IN (SELECT document_id FROM Staff_in_Processes WHERE date_to IS NULL AND date_from > ( SELECT MAX(date_to) FROM Staff_in_Processes WHERE document_id = t1.document_id ) AND date_from > ( SELECT MAX(date_to) FROM Staff_in_Processes WHERE document_id = t1.document_id ) ) FROM Documents AS t1) OR document_id IN (SELECT document_id FROM Staff_in_Processes WHERE date_to IS NULL AND date_from > ( SELECT MAX(date_to) FROM Staff_in_Processes WHERE document_id = t1.document_id ) AND date_from > ( SELECT MAX(date_to) FROM Staff_in_Processes WHERE document_id = t1.document_id ) ) OR document_id IN (SELECT document_id FROM Staff_in_Processes WHERE date_to IS NULL AND date_from > ( SELECT MAX(date_to) FROM Staff_in_Processes WHERE document_id = t1.document_id ) AND date_from > ( SELECT MAX(date_to) FROM Staff_in_Processes WHERE document_id = t1.document_id ) AND date_from > ( SELECT MAX(date_to
SELECT process_id FROM Business_Processes WHERE process_id NOT IN (SELECT process_id FROM Documents_Processes) AND next_process_id IS NULL;  
SELECT T1.process_outcome_description, T2.process_status_description  
SELECT T2.process_name FROM Documents AS T1 INNER JOIN Business_Processes AS T2 ON T1.process_id = T2.process_id WHERE T1.document_name = 'Travel to Brazil' AND T1.document_id IN ( SELECT document_id FROM Documents_Processes WHERE document_id IN ( SELECT document_id FROM Documents WHERE document_name = 'Travel to Brazil' ) ) AND T1.document_id IN ( SELECT document_id FROM Documents_Processes WHERE process_outcome_code IN ( SELECT process_outcome_code FROM Process_Outcomes WHERE process_outcome_description = 'Completed' ) ) AND T1.document_id IN ( SELECT document_id FROM Documents_Processes WHERE process_status_code IN ( SELECT process_status_code FROM Process_Status WHERE process_status_description = 'Completed' ) ) AND T1.document_id IN ( SELECT document_id FROM Documents_Processes WHERE process_outcome_code IN ( SELECT process_outcome_code FROM Process_Outcomes WHERE process_outcome_description = 'Completed' ) ) AND T1.document_id IN ( SELECT document_id FROM Documents_ProcessES WHERE process_status_code IN ( SELECT process_status_code FROM Process_Status WHERE process_status_description = 'Completed' ) ) AND T1.document_id IN ( SELECT document_id FROM Documents_Processes WHERE process_outcome_code IN ( SELECT process_outcome_code FROM Process_Outcomes WHERE process_outcome_description = 'Completed' ) ) AND T1.document_id IN ( SELECT document_id FROM Documents_Processes WHERE process_status_code IN ( SELECT process_status_code FROM Process_Status WHERE process_status_description = 'Completed' ) ) AND T1.document_id IN ( SELECT document_id FROM Documents_Processes WHERE process_outcome_code IN ( SELECT process_outcome_code FROM Process_Outcomes WHERE process_outcome_description = 'Completed' ) ) AND T1.document_id IN ( SELECT document_id FROM Documents_Processes WHERE process_status_code IN ( SELECT process_status_code FROM Process_Status WHERE
SELECT T1.process_id, COUNT(T2.document_id) FROM Business_Processes AS T1 LEFT JOIN Documents_Processes AS T2 ON T1.process_id = T2.process_id GROUP BY T1.process_id;
SELECT COUNT(T2.staff_id) FROM Documents_Processes AS T1 INNER JOIN Staff_in_Processes AS T2 ON T1.document_id = T2.document_id AND T1.process_id = T2.process_id WHERE T1.document_id = 0 AND T1.process_id = 9;
SELECT T1.staff_id, COUNT(T2.document_id) FROM Staff AS T1 INNER JOIN Staff_in_Processes AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id;
SELECT T1.staff_role_code, COUNT(T2.document_id) FROM Ref_Staff_Roles AS T1 INNER JOIN Documents_Processes AS T2 ON T1.staff_role_code = T2.process_status_code GROUP BY T1.staff_role_code;
SELECT COUNT(DISTINCT T2.staff_role_code) FROM Staff AS T1 INNER JOIN Staff_in_Processes AS T2 ON T1.staff_id = T2.staff_id WHERE T1.staff_id = 3;
SELECT COUNT(*) FROM Agencies;
SELECT COUNT(*) FROM Agencies;
SELECT agency_id, agency_details FROM Agencies;
SELECT agency_id, agency_details FROM Agencies;
SELECT COUNT(client_id) FROM Clients;
SELECT COUNT(client_id) FROM Clients;
SELECT client_id, client_details FROM Clients;
SELECT client_id, client_details FROM Clients;
SELECT A.agency_id, COUNT(C.client_id) FROM Agencies A LEFT JOIN Clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id;
SELECT A.agency_id, COUNT(C.client_id) FROM Agencies A LEFT JOIN Clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id;
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN ( SELECT agency_id FROM Clients GROUP BY agency_id ORDER BY COUNT(client_id) DESC LIMIT 1 ) ; SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN ( SELECT agency_id FROM Clients GROUP BY agency_id ORDER BY COUNT(client_id) DESC LIMIT 1 ) ; SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN ( SELECT agency_id FROM Clients GROUP BY agency_id ORDER BY COUNT(client_id) DESC LIMIT 1 ) ; SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN ( SELECT agency_id FROM Clients GROUP BY agency_id ORDER BY COUNT(client_id) DESC LIMIT 1 ) ; SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN ( SELECT agency_id FROM Clients GROUP BY agency_id ORDER BY COUNT(client_id) DESC LIMIT 1 ) ; SELECT agency_id, agency_details FROM
SELECT a.agency_id, a.agency_details  
SELECT A.agency_id, A.agency_details  
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN ( SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(client_id) >= 2 ) ORDER BY agency_id; SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN ( SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(client_id) >= 2 ); SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN ( SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(client_id) >= 2 ) ORDER BY agency_id; SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN ( SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(client_id) >= 2 ); SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN ( SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(client_id) >= 2 ) ORDER BY agency_id; SELECT agency_id
SELECT A.agency_details  
SELECT T1.agency_details FROM Agencies AS T1 INNER JOIN Clients AS T2 ON T1.agency_id = T2.agency_id WHERE T2.client_details = 'Mac' GROUP BY T1.agency_details;
SELECT c.client_details, a.agency_details FROM Clients c INNER JOIN Agencies a ON c.agency_id = a.agency_id;
SELECT T1.client_details, T2.agency_details FROM Clients AS T1 INNER JOIN Agencies AS T2 ON T1.agency_id = T2.agency_id;
SELECT sic_code, COUNT(client_id) FROM Clients GROUP BY sic_code;
SELECT sic_code,  COUNT(client_id) FROM Clients GROUP BY sic_code;
SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad'
 SELECT T1.client_details FROM Clients AS T1 INNER JOIN Agencies AS T2 ON T1.agency_id = T2.agency_id WHERE T1.sic_code = 'Bad' AND T2.agency_details LIKE '%Bad%' AND T1.client_id IN ( SELECT client_id FROM Clients WHERE sic_code = 'Bad' ) GROUP BY T1.client_id, T1.client_details HAVING COUNT(T1.client_id) = 7;  
SELECT A.agency_id, A.agency_details  
SELECT T1.agency_id, T1.agency_details FROM Agencies AS T1 INNER JOIN Clients AS T2 ON T1.agency_id = T2.agency_id;
 SELECT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT agency_id FROM Clients) AND agency_id NOT IN (SELECT agency_id FROM Staff) AND agency_id NOT IN (SELECT agency_id FROM Payments);  
SELECT agency_id FROM Agencies WHERE agency_id NOT IN ( SELECT agency_id FROM Clients ) OR agency_id NOT IN ( SELECT agency_id FROM Clients ) GROUP BY agency_id HAVING COUNT(*) = 0; SELECT agency_id FROM Agencies WHERE agency_id NOT IN ( SELECT agency_id FROM Clients ); SELECT agency_id FROM Agencies WHERE agency_id NOT IN ( SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(*) > 0 ); SELECT agency_id FROM Agencies WHERE agency_id NOT IN ( SELECT agency_id FROM Clients EXCEPT SELECT agency_id FROM Clients ); SELECT agency_id FROM Agencies WHERE agency_id NOT IN ( SELECT agency_id FROM Clients INTERSECT SELECT agency_id FROM Agencies ); SELECT agency_id FROM Agencies WHERE agency_id NOT IN ( SELECT agency_id FROM Clients ); SELECT agency_id FROM Agencies WHERE agency_id NOT IN ( SELECT agency_id FROM Clients GROUP BY agency_id ); SELECT agency
SELECT COUNT(*) FROM Invoices;
SELECT COUNT(`invoice_id`) FROM `Invoices`;
SELECT I.invoice_id, I.invoice_status, I.invoice_details FROM Invoices AS I;
SELECT invoice_id, invoice_status, invoice_details FROM Invoices;
SELECT client_id,  COUNT(invoice_id) FROM Invoices GROUP BY client_id;
SELECT client_id, COUNT(*) FROM Invoices GROUP BY client_id;
SELECT client_id, client_details FROM Clients WHERE client_id IN ( SELECT client_id FROM Invoices GROUP BY client_id ORDER BY COUNT(client_id) DESC LIMIT 1 ) ; SELECT client_id, client_details FROM Clients WHERE client_id IN ( SELECT client_id FROM Invoices GROUP BY client_id ORDER BY COUNT(client_id) DESC LIMIT 1 ) ; SELECT T1.client_id, T1.client_details FROM Clients AS T1 INNER JOIN Invoices AS T2 ON T1.client_id = T2.client_id GROUP BY T1.client_id ORDER BY COUNT(T2.invoice_id) DESC LIMIT 1; SELECT T1.client_id, T1.client_details FROM Clients AS T1 INNER JOIN Invoices AS T2 ON T1.client_id = T2.client_id GROUP BY T1.client_id ORDER BY COUNT(T2.invoice_id) DESC LIMIT 1; SELECT T1.client_id
SELECT T1.client_id, T1.client_details FROM Clients AS T1 INNER JOIN Invoices AS T2 ON T1.client_id = T2.client_id ORDER BY T2.invoice_id DESC LIMIT 1;
SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(client_id) >= 2;
SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(client_id) >= 2;
SELECT invoice_status, COUNT(*) FROM Invoices GROUP BY invoice_status;
SELECT invoice_status,  COUNT(*) FROM Invoices GROUP BY invoice_status;
SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(*) DESC LIMIT 1;
SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(*) DESC LIMIT 1;
SELECT I.invoice_status, I.invoice_details, C.client_id, C.client_details, A.agency_id, A.agency_details FROM Invoices AS I INNER JOIN Clients AS C ON I.client_id = C.client_id INNER JOIN Agencies AS A ON C.agency_id = A.agency_id;
SELECT I.invoice_status, I.invoice_details, C.client_id, C.client_details, A.agency_id, A.agency_details  
SELECT DISTINCT meeting_type, purpose_of_meeting FROM Meetings;
SELECT DISTINCT meeting_type, other_details FROM Meetings;
SELECT T1.meeting_outcome, T2.purpose_of_meeting FROM Meetings AS T1 INNER JOIN Clients AS T2 ON T1.client_id = T2.client_id;  
SELECT DISTINCT meeting_outcome, purpose_of_meeting FROM Meetings;
SELECT p.payment_id, p.payment_details  
SELECT p.payment_id, p.payment_details  
SELECT I.invoice_id, I.invoice_status FROM Invoices AS I LEFT JOIN Payments AS P ON I.invoice_id = P.invoice_id WHERE P.payment_id IS NULL;
SELECT T1.invoice_id, T1.invoice_status FROM Invoices AS T1 LEFT JOIN Payments AS T2 ON T1.invoice_id = T2.invoice_id WHERE T2.payment_id IS NULL;
SELECT COUNT(payment_id) FROM Payments;
SELECT COUNT(payment_id) FROM Payments;
SELECT p.payment_id, i.invoice_id, i.invoice_details FROM Payments AS p INNER JOIN Invoices AS i ON p.invoice_id = i.invoice_id;
SELECT payment_id, invoice_id, payment_details FROM Payments;
SELECT DISTINCT T1.invoice_id, T2.invoice_status FROM Payments AS T1 INNER JOIN Invoices AS T2 ON T1.invoice_id = T2.invoice_id ORDER BY T1.invoice_id; SELECT DISTINCT T1.invoice_id, T2.invoice_status FROM Payments AS T1 INNER JOIN Invoices AS T2 ON T1.invoice_id = T2.invoice_id; SELECT DISTINCT T1.invoice_id, T2.invoice_status FROM Payments AS T1 INNER JOIN Invoices AS T2 ON T1.invoice_id = T2.invoice_id; SELECT DISTINCT T1.invoice_id, T2.invoice_status FROM Payments AS T1 INNER JOIN Invoices AS T2 ON T1.invoice_id = T2.invoice_id; SELECT DISTINCT T1.invoice_id, T2.invoice_status FROM Payments AS T1 INNER JOIN Invoices AS T2 ON T1.invoice_id = T2.invoice_id; SELECT DISTINCT T
SELECT DISTINCT T1.invoice_id, T1.invoice_status FROM Invoices AS T1 INNER JOIN Payments AS T2 ON T1.invoice_id = T2.invoice_id;
SELECT T1.invoice_id, COUNT(T2.payment_id) FROM Invoices AS T1 LEFT JOIN Payments AS T2 ON T1.invoice_id = T2.invoice_id GROUP BY T1.invoice_id;
SELECT invoice_id,  COUNT(*) FROM Payments GROUP BY invoice_id;
SELECT T1.invoice_id, T1.invoice_status, T1.invoice_details  
SELECT T1.invoice_id, T1.invoice_status, T1.invoice_details  
SELECT COUNT(staff_id) FROM Staff;
SELECT COUNT(*) FROM Staff;
SELECT A.agency_id, COUNT(S.staff_id) FROM Agencies A LEFT JOIN Staff S ON A.agency_id = S.agency_id GROUP BY A.agency_id;
SELECT T1.agency_id, COUNT(T2.staff_id) FROM Agencies AS T1 INNER JOIN Staff AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id;
SELECT T1.agency_id, T1.agency_details  
SELECT A.agency_id, A.agency_details FROM Agencies A INNER JOIN Staff S ON A.agency_id = S.agency_id GROUP BY A.agency_id ORDER BY COUNT(S.staff_id) DESC LIMIT 1;
SELECT meeting_outcome, COUNT(*) FROM Meetings GROUP BY meeting_outcome;
SELECT meeting_outcome,  COUNT(meeting_id) FROM Meetings GROUP BY meeting_outcome;
SELECT client_id,  COUNT(meeting_id) FROM Meetings GROUP BY client_id;
SELECT client_id, COUNT(meeting_id) FROM Meetings GROUP BY client_id;
SELECT T1.meeting_type, COUNT(T1.meeting_id) FROM Meetings AS T1 INNER JOIN Clients AS T2 ON T1.client_id = T2.client_id GROUP BY T1.meeting_type, T2.client_id;
SELECT meeting_type,  COUNT(meeting_id) FROM Meetings GROUP BY meeting_type;
SELECT M.meeting_id, M.meeting_outcome, M.meeting_type, C.client_details  
SELECT T1.meeting_id, T1.meeting_outcome, T1.meeting_type, T3.client_details FROM Meetings AS T1 INNER JOIN Clients AS T2 ON T1.client_id = T2.client_id INNER JOIN Clients AS T3 ON T3.client_id = T1.client_id WHERE T3.client_id = T1.client_id;  
SELECT M.meeting_id, COUNT(SI.meeting_id) FROM Meetings M LEFT JOIN Staff_in_Meetings SI ON M.meeting_id = SI.meeting_id GROUP BY M.meeting_id;
SELECT meeting_id,  COUNT(*) FROM Staff_in_Meetings GROUP BY meeting_id;
SELECT T1.staff_id, COUNT(T2.meeting_id) FROM Staff AS T1 INNER JOIN Staff_in_Meetings AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id ORDER BY COUNT(T2.meeting_id) ASC LIMIT 1;
SELECT T.staff_id FROM ( SELECT T1.staff_id, COUNT(T2.meeting_id) AS num FROM Staff AS T1 INNER JOIN Staff_in_Meetings AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id ) AS T WHERE T.num > 0 ORDER BY T.num LIMIT 1; SELECT T1.staff_id FROM ( SELECT T1.staff_id, COUNT(T2.meeting_id) AS num FROM Staff AS T1 INNER JOIN Staff_in_Meetings AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id ) AS T WHERE T.num > 0 ORDER BY T.num LIMIT 1; SELECT T1.staff_id FROM ( SELECT T1.staff_id, COUNT(T2.meeting_id) AS num FROM Staff AS T1 INNER JOIN Staff_in_Meetings AS T2 ON T1.staff_id
SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Meetings;
SELECT COUNT(DISTINCT T1.staff_id) FROM Staff_in_Meetings AS T1 INNER JOIN Meetings AS T2 ON T1.meeting_id = T2.meeting_id;
 SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN ( SELECT staff_id FROM Staff_in_Meetings ) OR staff_id NOT IN ( SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) > 0 ) OR staff_id NOT IN ( SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) = 0 ) OR staff_id NOT IN ( SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) = 1 ) OR staff_id NOT IN ( SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) = 2 ) OR staff_id NOT IN ( SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) = 3 ) OR staff_id NOT IN ( SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) = 4 ) OR staff_id NOT IN ( SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) = 5 ) OR staff_id NOT IN ( SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) = 6 ) OR staff_id NOT IN ( SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) = 7 ) OR staff_id NOT IN ( SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) = 8 ) OR staff_id NOT IN ( SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) = 9 ) OR staff_id NOT IN ( SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) = 10 ) OR staff_id NOT IN ( SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) = 11 ) OR staff_id
SELECT COUNT(DISTINCT s.staff_id) FROM Staff s LEFT JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id WHERE sm.meeting_id IS NULL;
SELECT DISTINCT T1.client_id, T1.client_details FROM Clients AS T1 INNER JOIN Invoices AS T2 ON T1.client_id = T2.client_id UNION SELECT DISTINCT T1.client_id, T1.client_details FROM Clients AS T1 INNER JOIN Meetings AS T2 ON T1.client_id = T2.client_id;
SELECT DISTINCT T1.client_id, T1.client_details FROM Clients AS T1 INNER JOIN Invoices AS T2 ON T1.client_id = T2.client_id UNION SELECT DISTINCT T1.client_id, T1.client_details FROM Clients AS T1 INNER JOIN Meetings AS T2 ON T1.client_id = T2.client_id;
SELECT DISTINCT T1.staff_id, T1.staff_details  
SELECT T1.staff_id, T1.staff_details FROM Staff AS T1 INNER JOIN Staff_in_Meetings AS T2 ON T1.staff_id = T2.staff_id WHERE T1.staff_details LIKE '%s%' GROUP BY T1.staff_id, T1.staff_details HAVING COUNT(T2.meeting_id) > 0;
SELECT T1.client_id, T1.sic_code, T2.agency_id FROM Clients AS T1 INNER JOIN Agencies AS T2 ON T1.agency_id = T2.agency_id WHERE T1.client_id IN ( SELECT T3.client_id FROM Meetings AS T3 GROUP BY T3.client_id HAVING COUNT(T3.meeting_id) = 1 ) AND T1.client_id IN ( SELECT T4.client_id FROM Invoices AS T4 ) GROUP BY T1.client_id, T1.sic_code, T2.agency_id HAVING COUNT(T1.client_id) = 1; SELECT T1.client_id, T1.sic_code, T2.agency_id FROM Clients AS T1 INNER JOIN Agencies AS T2 ON T1.agency_id = T2.agency_id WHERE T1.client_id IN ( SELECT T3.client_id FROM Meetings AS T3
SELECT T1.client_id, T1.sic_code, T2.agency_id FROM Clients AS T1 INNER JOIN Agencies AS T2 ON T1.agency_id = T2.agency_id WHERE T1.client_id IN ( SELECT T3.client_id FROM Meetings AS T3 INNER JOIN Payments AS T4 ON T3.meeting_id = T4.meeting_id GROUP BY T3.client_id HAVING COUNT(T4.payment_id) = 1 ) AND T1.client_id IN ( SELECT T5.client_id FROM Invoices AS T5 GROUP BY T5.client_id HAVING COUNT(T5.invoice_id) = 1 ) AND T1.client_id IN ( SELECT T6.client_id FROM Meetings AS T6 GROUP BY T6.client_id HAVING COUNT(T6.meeting_id) = 1 ) GROUP BY T1.client_id, T1.sic_code, T2.agency
SELECT T1.start_date_time, T1.end_date_time, T2.client_details, T3.staff_details FROM Meetings AS T1 INNER JOIN Clients AS T2 ON T1.client_id = T2.client_id INNER JOIN Staff AS T3 ON T1.meeting_id = T3.staff_id AND T1.client_id = T3.agency_id WHERE T1.billable_yn = 'Y' ORDER BY T1.start_date_time;  
SELECT M.start_date_time, M.end_date_time, C.client_details, S.staff_details  
