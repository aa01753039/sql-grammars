SELECT Flavor, MAX(Price), MIN(Price), AVG(Price) FROM goods GROUP BY Flavor ORDER BY Flavor; 
SELECT Food, MIN(Price), MAX(Price) FROM goods GROUP BY Food ORDER BY Food ASC; 
SELECT MIN(Price), MAX(Price), Food FROM goods GROUP BY Food ORDER BY Food; 
SELECT Date, COUNT(*) AS count 
SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(*) DESC LIMIT 3; 
SELECT FirstName, LastName, COUNT(*) AS Count 
SELECT CustomerId, COUNT(*) AS num_purchases FROM receipts GROUP BY CustomerId ORDER BY num_purchases DESC LIMIT 1; 
SELECT Date, COUNT(DISTINCT CustomerId) FROM receipts GROUP BY Date; 
SELECT Date, COUNT(*) FROM receipts GROUP BY Date; 
SELECT FirstName, LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'apple' AND Food = 'Tart'))); 
SELECT FirstName, LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'apple' AND Food = 'Tart'))); 
SELECT Id FROM goods WHERE Food = 'Cookie' AND Price < ALL (SELECT Price FROM goods WHERE Food = 'Croissant'); 
SELECT Id FROM goods WHERE Food = 'cookie' AND Price < ALL (SELECT Price FROM goods WHERE Food = 'croissant'); 
SELECT Id FROM goods WHERE Food = 'Cake' AND Price >= (SELECT AVG(Price) FROM goods WHERE Food = 'Tart'); 
SELECT Id FROM goods WHERE Food = 'Cake' AND Price >= (SELECT AVG(Price) FROM goods WHERE Food = 'Tart'); 
SELECT Id FROM goods WHERE Price > 2 * (SELECT AVG(Price) FROM goods); 
SELECT Id FROM goods WHERE Price > 2 * (SELECT AVG(Price) FROM goods); 
SELECT id, flavor, food FROM goods ORDER BY price; 
SELECT Id, Flavor, Food FROM goods ORDER BY Price; 
SELECT id, flavor FROM goods WHERE food = 'Cake' ORDER BY flavor; 
SELECT Id, Flavor FROM goods WHERE Food = 'cake' ORDER BY Flavor; 
SELECT * FROM goods WHERE Flavor = 'chocolate' AND Id NOT IN (SELECT Item FROM items GROUP BY Item HAVING COUNT(*) > 10); 
SELECT Item FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'chocolate') GROUP BY Item HAVING COUNT(*) <= 10; 
SELECT DISTINCT Flavor FROM goods WHERE Food = 'Cake' AND Flavor NOT IN (SELECT Flavor FROM goods WHERE Food = 'Tart') 
SELECT Flavor FROM goods WHERE Food = 'Cake' AND Flavor NOT IN (SELECT Flavor FROM goods WHERE Food = 'Tart') 
SELECT Item, COUNT(*) AS count 
SELECT Item, COUNT(*) AS Count 
SELECT Id FROM customers WHERE Id IN (SELECT CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > 150))) 
SELECT Id FROM customers WHERE Id IN (SELECT CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > 150))) 
SELECT customers.Id FROM customers 
SELECT customers.Id FROM customers 
SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM items GROUP BY ReceiptNumber HAVING SUM(Price) > 100); 
SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items GROUP BY Receipt HAVING SUM(Price) > 100); 
SELECT COUNT(*) FROM driver; 
SELECT COUNT(*) FROM driver; 
SELECT Make, COUNT(*) FROM driver WHERE Points > 150 GROUP BY Make; 
SELECT Make, COUNT(*) FROM driver WHERE Points > 150 GROUP BY Make; 
SELECT Make, AVG(Age) FROM driver GROUP BY Make; 
SELECT Make, AVG(Age) FROM driver GROUP BY Make; 
SELECT AVG(Laps) FROM driver WHERE Age < 20; 
SELECT AVG(Laps) FROM driver WHERE Age < 20; 
SELECT Manager, Sponsor FROM team ORDER BY Car_Owner; 
SELECT Manager, Sponsor, Car_Owner FROM team ORDER BY Car_Owner; 
SELECT Make FROM team GROUP BY Make HAVING COUNT(Make) > 1; 
SELECT Make FROM team GROUP BY Make HAVING COUNT(Make) > 1; 
SELECT Make FROM team WHERE Car_Owner = 'Buddy Arrington'; 
SELECT Make FROM team WHERE Car_Owner = 'Buddy Arrington'; 
SELECT MAX(Points), MIN(Points) FROM driver; 
SELECT MAX(Points), MIN(Points) FROM driver; 
SELECT COUNT(*) FROM driver WHERE Points < 150; 
SELECT COUNT(*) FROM driver WHERE Points < 150; 
SELECT Driver FROM driver ORDER BY Age ASC; 
SELECT Driver FROM driver ORDER BY Age ASC; 
SELECT Driver FROM driver ORDER BY Points DESC; 
SELECT Driver, Points FROM driver ORDER BY Points DESC; 
SELECT driver.Driver, country.Country FROM driver, country WHERE driver.Country = country.Country_Id; 
SELECT driver.Driver, country.Country FROM driver JOIN country ON driver.Country = country.Country_Id; 
SELECT MAX(Points) FROM driver WHERE Country IN (SELECT Country_Id FROM country WHERE Capital = 'Dublin') 
SELECT MAX(Points) FROM driver WHERE Country IN (SELECT Country_Id FROM country WHERE Capital = 'Dublin'); 
SELECT AVG(Age) FROM driver WHERE Country IN (SELECT Country_Id FROM country WHERE Official_native_language = 'English'); 
SELECT AVG(Age) FROM driver WHERE Country IN (SELECT Country_Id FROM country WHERE Official_native_language = 'English'); 
SELECT DISTINCT country.Country FROM country, driver WHERE driver.Country = country.Country_Id AND driver.Points > 150; 
SELECT DISTINCT country.Country FROM country, driver WHERE driver.Points > 150 AND driver.Country = country.Country_Id; 
SELECT Capital FROM country WHERE Country_Id = (SELECT Country FROM driver WHERE Points = (SELECT MAX(Points) FROM driver)); 
SELECT Capital FROM country WHERE Country_Id = (SELECT Country FROM driver WHERE Points = (SELECT MAX(Points) FROM driver)); 
SELECT Make, COUNT(*) FROM driver GROUP BY Make; 
SELECT Make, COUNT(Driver_ID) FROM driver GROUP BY Make; 
SELECT Make, COUNT(*) AS num_drivers FROM driver GROUP BY Make ORDER BY num_drivers DESC LIMIT 1;  
SELECT Make, COUNT(*) AS num_drivers FROM driver GROUP BY Make ORDER BY num_drivers DESC LIMIT 1;  
SELECT Make FROM driver GROUP BY Make HAVING COUNT(*) >= 3; 
SELECT Make FROM driver GROUP BY Make HAVING COUNT(*) >= 3; 
SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver); 
SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver); 
SELECT DISTINCT country.Country FROM country, driver WHERE driver.Country = country.Country_Id AND driver.Make = 'Dodge' INTERSECT SELECT DISTINCT country.Country FROM country, driver WHERE driver.Country = country.Country_Id AND driver.Make = 'Chevrolet'; 
SELECT DISTINCT country.Country FROM country, driver WHERE driver.Country = country.Country_Id AND driver.Make = 'Dodge' INTERSECT SELECT DISTINCT country.Country FROM country, driver WHERE driver.Country = country.Country_Id AND driver.Make = 'Chevrolet'; 
SELECT SUM(Points), AVG(Points) FROM driver; 
SELECT SUM(Points) AS TotalPoints, AVG(Points) AS AveragePoints FROM driver; 
SELECT Country FROM country WHERE Country_Id NOT IN (SELECT Country FROM driver); 
SELECT DISTINCT Country FROM country WHERE Country NOT IN (SELECT DISTINCT Country FROM driver); 
SELECT Manager, Sponsor FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT Team_ID, COUNT(*) AS Count FROM team_driver GROUP BY Team_ID))); 
SELECT Manager, Sponsor FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(Driver_ID) = (SELECT MAX(COUNT(Driver_ID)) FROM team_driver GROUP BY Team_ID)); 
SELECT Manager, Car_Owner FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(*) >= 2); 
SELECT Manager, Car_Owner FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(*) >= 2); 
SELECT COUNT(*) FROM institution; 
SELECT COUNT(*) FROM institution; 
SELECT Name FROM institution ORDER BY Name ASC; 
SELECT Name FROM institution ORDER BY Name ASC; 
SELECT Name FROM institution ORDER BY Founded ASC; 
SELECT Name FROM institution ORDER BY Founded; 
SELECT City, Province FROM institution; 
SELECT City, Province FROM institution; 
SELECT MAX(Enrollment), MIN(Enrollment) FROM institution; 
SELECT MAX(Enrollment), MIN(Enrollment) FROM institution; 
SELECT Affiliation FROM institution WHERE City!= 'Vancouver'; 
SELECT Affiliation FROM institution WHERE City!= 'Vancouver'; 
SELECT Stadium, Capacity FROM institution ORDER BY Capacity DESC; 
SELECT Stadium, Capacity FROM institution ORDER BY Capacity DESC; 
SELECT Stadium FROM institution WHERE Enrollment = (SELECT MAX(Enrollment) FROM institution); 
SELECT Stadium FROM institution WHERE Enrollment = (SELECT MAX(Enrollment) FROM institution); 
SELECT Name, Nickname FROM institution, Championship WHERE institution.Institution_ID = Championship.Institution_ID; 
SELECT institution.Name, Championship.Nickname FROM institution, Championship WHERE institution.Institution_ID = Championship.Institution_ID; 
SELECT Nickname FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID WHERE Enrollment = (SELECT MIN(Enrollment) FROM institution); 
SELECT Nickname FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID WHERE Enrollment = (SELECT MIN(Enrollment) FROM institution); 
SELECT Name FROM institution ORDER BY Number_of_Championships DESC; 
SELECT Name FROM institution ORDER BY Number_of_Championships DESC; 
SELECT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship); 
SELECT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship WHERE Number_of_Championships > 0); 
SELECT SUM(Number_of_Championships) FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution WHERE Affiliation = 'Public'); 
SELECT SUM(Number_of_Championships) FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution WHERE Affiliation = 'Public'); 
SELECT Affiliation, COUNT(*) FROM institution GROUP BY Affiliation; 
SELECT COUNT(*) AS count, Affiliation FROM institution GROUP BY Affiliation ORDER BY count DESC; 
SELECT Affiliation, COUNT(*) AS count FROM institution GROUP BY Affiliation ORDER BY count DESC LIMIT 1;  
SELECT Affiliation, COUNT(*) AS count 
SELECT Founded FROM institution GROUP BY Founded HAVING COUNT(*) > 1; 
SELECT Founded, COUNT(*) FROM institution GROUP BY Founded HAVING COUNT(*) > 1 
SELECT Nickname FROM Championship ORDER BY Capacity DESC; 
SELECT Nickname FROM institution ORDER BY Capacity DESC; 
SELECT SUM(Enrollment) FROM institution WHERE City = 'Vancouver' OR City = 'Calgary'; 
SELECT Enrollment FROM institution WHERE City = 'Vancouver' OR City = 'Calgary'; 
SELECT Province FROM institution WHERE Founded < 1920 AND Founded > 1950; 
SELECT Province FROM institution WHERE Founded < 1920 AND Province IN (SELECT Province FROM institution WHERE Founded > 1950); 
SELECT COUNT(DISTINCT Province) FROM institution; 
SELECT COUNT(DISTINCT Province) FROM institution; 
SELECT * FROM Warehouses; 
SELECT * FROM Warehouses; 
SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York') 
SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York') 
SELECT Contents FROM Boxes WHERE Value > 150; 
SELECT Contents FROM Boxes WHERE Value > 150; 
SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse; 
SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse; 
SELECT AVG(Value), SUM(Value) FROM Boxes; 
SELECT AVG(Value), SUM(Value) FROM Boxes; 
SELECT AVG(Capacity), SUM(Capacity) FROM Warehouses; 
SELECT AVG(Capacity), SUM(Capacity) FROM Warehouses; 
SELECT Contents, AVG(Value), MAX(Value) FROM Boxes GROUP BY Contents; 
SELECT Contents, AVG(Value), MAX(Value) FROM Boxes GROUP BY Contents; 
SELECT Contents, SUM(Value) AS TotalValue FROM Boxes GROUP BY Contents ORDER BY TotalValue DESC LIMIT 1;  
SELECT Contents FROM Boxes WHERE Value = (SELECT MAX(Value) FROM Boxes); 
SELECT AVG(Value) FROM Boxes; 
SELECT AVG(Value) FROM Boxes; 
SELECT DISTINCT Contents FROM Boxes; 
SELECT DISTINCT Contents FROM Boxes; 
SELECT COUNT(DISTINCT Contents) FROM Boxes; 
SELECT COUNT(DISTINCT Contents) FROM Boxes; 
SELECT DISTINCT Location FROM Warehouses; 
SELECT Location FROM Warehouses; 
SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York')); 
SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York')) 
SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York')); 
SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York')); 
SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago' OR Location = 'New York') 
SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York')) GROUP BY Contents HAVING COUNT(*) = 2; 
SELECT DISTINCT Contents FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'New York') 
SELECT DISTINCT Contents FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'New York') ORDER BY Contents ASC; 
SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks') AND Code NOT IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors'); 
SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks') AND Code NOT IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors'); 
SELECT Code, Location, Capacity FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents IN ('Rocks', 'Scissors')); 
SELECT DISTINCT Warehouse FROM Boxes WHERE Contents IN ('Rocks', 'Scissors'); 
SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents IN ('Rocks', 'Scissors')); 
SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents IN ('Rocks', 'Scissors')); 
SELECT Code, Contents FROM Boxes ORDER BY Value; 
SELECT Code, Contents FROM Boxes ORDER BY Value; 
SELECT Code, Contents FROM Boxes WHERE Value = (SELECT MIN(Value) FROM Boxes); 
SELECT Code, Contents FROM Boxes WHERE Value = (SELECT MIN(Value) FROM Boxes); 
SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes); 
SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes); 
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents; 
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents ASC; 
SELECT Code FROM Boxes WHERE Value > ALL (SELECT Value FROM Boxes WHERE Contents = 'Rocks'); 
SELECT Code FROM Boxes WHERE Value > ALL (SELECT Value FROM Boxes WHERE Contents = 'Rocks'); 
SELECT Code, Contents FROM Boxes WHERE Value > ALL (SELECT Value FROM Boxes WHERE Contents = 'Scissors'); 
SELECT Code, Contents FROM Boxes WHERE Value > ALL (SELECT Value FROM Boxes WHERE Contents = 'Scissors'); 
SELECT SUM(Value) FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses WHERE Capacity = (SELECT MAX(Capacity) FROM Warehouses)); 
SELECT SUM(Value) FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses WHERE Capacity = (SELECT MAX(Capacity) FROM Warehouses)); 
SELECT Code, AVG(Value) FROM Boxes GROUP BY Code HAVING AVG(Value) > 150; 
SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse HAVING AVG(Value) > 150; 
SELECT Contents, SUM(Value) AS Total_Value, COUNT(*) AS Num_Boxes 
SELECT Contents, SUM(Value), COUNT(*) FROM Boxes GROUP BY Contents; 
SELECT Location, SUM(Capacity) AS Total, AVG(Capacity) AS Average, MAX(Capacity) AS Maximum FROM Warehouses GROUP BY Location;  
SELECT Location, SUM(Capacity) AS TotalCapacity, AVG(Capacity) AS AverageCapacity, MAX(Capacity) AS MaximumCapacity FROM Warehouses GROUP BY Location; 
SELECT SUM(Capacity) FROM Warehouses; 
SELECT SUM(Capacity) FROM Warehouses; 
SELECT Location, MAX(Value) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Location; 
SELECT Location, MAX(Value) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Location; 
SELECT Code, COUNT(*) FROM Boxes GROUP BY Code; 
SELECT COUNT(*) AS num_boxes, Warehouse FROM Boxes GROUP BY Warehouse; 
SELECT COUNT(*) FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks'); 
SELECT COUNT(DISTINCT Warehouse) FROM Boxes WHERE Contents = 'Rocks'; 
SELECT Boxes.Code, Warehouses.Location FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code; 
SELECT Boxes.Code, Warehouses.Location FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code; 
SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago'); 
SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago') 
SELECT Warehouse, COUNT(*) FROM Boxes GROUP BY Warehouse; 
SELECT Warehouse, COUNT(*) FROM Boxes GROUP BY Warehouse; 
SELECT Warehouse, COUNT(DISTINCT Contents) AS num_contents FROM Boxes GROUP BY Warehouse; 
SELECT COUNT(DISTINCT Contents) AS num_contents, Warehouse FROM Boxes GROUP BY Warehouse; 
SELECT Code FROM Warehouses WHERE Capacity < (SELECT COUNT(*) FROM Boxes WHERE Boxes.Warehouse = Warehouses.Code); 
SELECT Code FROM Warehouses WHERE Capacity < (SELECT COUNT(*) FROM Boxes WHERE Warehouse = Warehouses.Code); 
SELECT SUM(Value) FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago'); 
SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location!= 'Chicago'); 
SELECT University_Name, City, State FROM university ORDER BY University_Name ASC; 
SELECT University_Name, City, State FROM university ORDER BY University_Name ASC; 
SELECT COUNT(*) FROM university WHERE State = 'Illinois' OR State = 'Ohio'; 
SELECT COUNT(*) FROM university WHERE State = 'Illinois' OR State = 'Ohio'; 
SELECT MAX(Enrollment), AVG(Enrollment), MIN(Enrollment) FROM university; 
SELECT MAX(Enrollment), AVG(Enrollment), MIN(Enrollment) FROM university; 
SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university); 
SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university); 
SELECT Home_Conference FROM university; 
SELECT DISTINCT Home_Conference FROM university; 
SELECT Home_Conference, COUNT(University_ID) FROM university GROUP BY Home_Conference; 
SELECT COUNT(University_ID) AS num_universities, Home_Conference FROM university GROUP BY Home_Conference;  
SELECT State, COUNT(*) AS num_universities FROM university GROUP BY State ORDER BY num_universities DESC LIMIT 1;  
SELECT State, COUNT(*) AS num_universities FROM university GROUP BY State ORDER BY num_universities DESC LIMIT 1;  
SELECT Home_Conference FROM university WHERE Enrollment > 2000 GROUP BY Home_Conference; 
SELECT Home_Conference FROM university WHERE Enrollment > 2000 GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000; 
SELECT Home_Conference, SUM(Enrollment) AS Total_Enrollment FROM university GROUP BY Home_Conference ORDER BY Total_Enrollment ASC LIMIT 1;  
SELECT Home_Conference, MIN(Enrollment) AS min_enrollment FROM university GROUP BY Home_Conference ORDER BY min_enrollment ASC;  
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code; 
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code; 
SELECT major.Major_Name, major_ranking.Rank 
SELECT major_ranking.Rank, major.Major_Name 
SELECT University_Name, City, State FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Rank = 1); 
SELECT University_Name, City, State FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Rank = 1); 
SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID HAVING COUNT(*) = (SELECT COUNT(*) FROM major_ranking WHERE Rank = 1 GROUP BY University_ID ORDER BY COUNT(*) DESC LIMIT 1)); 
SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID HAVING COUNT(*) = (SELECT COUNT(*) FROM major)); 
SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1); 
SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1); 
SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Urban Education')); 
SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Urban Education')); 
SELECT University_Name, Rank FROM university, overall_ranking WHERE university.University_ID = overall_ranking.University_ID AND State = 'Wisconsin'; 
SELECT University_Name, Rank FROM university, overall_ranking WHERE university.University_ID = overall_ranking.University_ID AND State = 'Wisconsin'; 
SELECT University_Name FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY Research_point DESC LIMIT 1; 
SELECT University_Name FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY Research_point DESC LIMIT 1; 
SELECT University_Name FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY Reputation_point ASC; 
SELECT University_Name FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY Reputation_point ASC; 
SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Rank >= 3); 
SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Rank <= 3); 
SELECT SUM(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5); 
SELECT SUM(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5); 
SELECT University_Name, Citation_point FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE Reputation_point IN (SELECT Reputation_point FROM overall_ranking ORDER BY Reputation_point DESC LIMIT 3) ORDER BY Citation_point DESC; 
SELECT University_Name, Citation_point 
SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(*) > 2; 
SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(*) > 2; 
SELECT Title FROM Movies WHERE Rating IS NULL; 
SELECT Title FROM Movies WHERE Rating IS NULL; 
SELECT Title FROM Movies WHERE Rating = 'G'; 
SELECT Title FROM Movies WHERE Rating = 'G'; 
SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon'); 
SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon') 
SELECT Title, Name FROM Movies, MovieTheaters WHERE Movies.Code = MovieTheaters.Movie; 
SELECT Title, Name FROM Movies, MovieTheaters WHERE Movies.Code = MovieTheaters.Movie; 
SELECT COUNT(*) FROM Movies WHERE Rating = 'G'; 
SELECT COUNT(*) FROM Movies WHERE Rating = 'G'; 
SELECT COUNT(*) FROM Movies; 
SELECT COUNT(*) FROM Movies, MovieTheaters WHERE Movies.Code = MovieTheaters.Movie; 
SELECT COUNT(DISTINCT Movie) FROM MovieTheaters; 
SELECT COUNT(DISTINCT Movie) FROM MovieTheaters; 
SELECT COUNT(DISTINCT Code) FROM MovieTheaters; 
SELECT COUNT(*) FROM MovieTheaters 
SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%'; 
SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%'; 
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating IN ('G', 'PG')); 
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating IN ('G', 'PG')); 
SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon' OR Name = 'Imperial'); 
SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon' OR Name = 'Imperial'); 
SELECT Name FROM MovieTheaters WHERE Name = 'Odeon' OR Name = 'Imperial'; 
SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon' OR Name = 'Imperial'); 
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon'); 
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon') 
SELECT Title FROM Movies ORDER BY Title ASC; 
SELECT Title FROM Movies ORDER BY Title ASC; 
SELECT Title FROM Movies ORDER BY Rating; 
SELECT Title FROM Movies ORDER BY Rating; 
SELECT Name FROM MovieTheaters ORDER BY Movie DESC LIMIT 1; 
SELECT Name FROM MovieTheaters ORDER BY Movie DESC LIMIT 1; 
SELECT Name FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Name FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Rating, COUNT(*) FROM Movies GROUP BY Rating; 
SELECT Rating, COUNT(*) FROM Movies GROUP BY Rating; 
SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL; 
SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL; 
SELECT Name FROM MovieTheaters WHERE Movie IS NOT NULL; 
SELECT Name FROM MovieTheaters WHERE Movie IS NOT NULL; 
SELECT Name FROM MovieTheaters WHERE Movie IS NULL; 
SELECT Name FROM MovieTheaters WHERE Movie IS NULL; 
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G'); 
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G') 
SELECT Title FROM Movies; 
SELECT Title FROM Movies; 
SELECT DISTINCT Rating FROM Movies; 
SELECT DISTINCT Rating FROM Movies; 
SELECT * FROM Movies WHERE Rating IS NULL; 
SELECT * FROM Movies WHERE Rating IS NULL; 
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters); 
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters); 
SELECT Recipient, Contents, Weight FROM Package ORDER BY Weight DESC LIMIT 1; 
SELECT Name FROM Client WHERE AccountNumber IN (SELECT Recipient FROM Package WHERE Weight = (SELECT MAX(Weight) FROM Package)); 
SELECT SUM(Weight) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT SUM(Weight) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT Position FROM Employee WHERE Name = 'Amy Wong'; 
SELECT Position FROM Employee WHERE Name = 'Amy Wong'; 
SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela'; 
SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela'; 
SELECT AVG(Salary) FROM Employee WHERE Position = 'Intern'; 
SELECT AVG(Salary) FROM Employee WHERE Position = 'Intern'; 
SELECT Level FROM Has_Clearance WHERE Employee = (SELECT EmployeeID FROM Employee WHERE Name = 'Physician') 
SELECT Level FROM Has_Clearance WHERE Employee IN (SELECT EmployeeID FROM Employee WHERE Position = 'Physician'); 
SELECT PackageNumber FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT COUNT(*) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT PackageNumber FROM Package WHERE Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT PackageNumber FROM Package WHERE Recipient = 'Leo Wong' ORDER BY PackageNumber ASC;  
SELECT * FROM Package WHERE Sender = 'Leo Wong' OR Recipient = 'Leo Wong'; 
SELECT PackageNumber FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') OR Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') 
SELECT COUNT(*) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Ogden Wernstrom') AND Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT COUNT(*) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Ogden Wernstrom') AND Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT Contents FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'John Zoidfarb'); 
SELECT Contents FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'John Zoidfarb'); 
SELECT PackageNumber, Weight FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name LIKE '%John%') ORDER BY Weight DESC LIMIT 1; 
SELECT PackageNumber, Weight FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name LIKE 'John%') ORDER BY Weight DESC LIMIT 1; 
SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC LIMIT 3; 
SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC LIMIT 3; 
SELECT Client.Name, COUNT(Package.PackageNumber) AS num_packages 
SELECT Client.Name, COUNT(Package.PackageNumber) AS PackageCount 
SELECT Client.Name, COUNT(Package.PackageNumber) AS NumberOfPackagesReceived 
SELECT MIN(Count), Recipient FROM (SELECT COUNT(*) AS Count, Recipient FROM Package GROUP BY Recipient) GROUP BY Recipient ORDER BY Count ASC LIMIT 1; 
SELECT Name FROM Client WHERE AccountNumber IN (SELECT Sender FROM Package GROUP BY Sender HAVING COUNT(Sender) > 1); 
SELECT Name FROM Client WHERE AccountNumber IN (SELECT Sender FROM Package GROUP BY Sender HAVING COUNT(Sender) > 1); 
SELECT Coordinates FROM Planet WHERE Name = 'Mars'; 
SELECT Coordinates FROM Planet WHERE Name = 'Mars'; 
SELECT Name, Coordinates FROM Planet ORDER BY Name ASC; 
SELECT Name, Coordinates FROM Planet ORDER BY Name ASC; 
SELECT ShipmentID FROM Shipment WHERE Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Phillip J. Fry') 
SELECT ShipmentID FROM Shipment WHERE Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Phillip J Fry'); 
SELECT Date FROM Shipment; 
SELECT Date FROM Shipment; 
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'); 
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'); 
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') AND Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela'); 
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') AND Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela'); 
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') OR Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela'); 
SELECT ShipmentID FROM Shipment WHERE Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela') AND Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'); 
SELECT Planet.Name, COUNT(ShipmentID) AS TotalShipments FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID GROUP BY Planet.Name ORDER BY TotalShipments DESC;  
SELECT Planet.Name, COUNT(ShipmentID) AS num_shipments 
SELECT Planet.Name 
SELECT Planet.Name 
SELECT Name, COUNT(*) FROM Employee, Shipment WHERE Employee.EmployeeID = Shipment.Manager GROUP BY Employee.EmployeeID; 
SELECT COUNT(ShipmentID), Name FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID GROUP BY Name; 
SELECT SUM(Weight) FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars')); 
SELECT SUM(Weight) FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars')); 
SELECT Planet.Name, SUM(Package.Weight) AS TotalWeight 
SELECT Planet.Name, SUM(Package.Weight) AS TotalPackageWeight FROM Planet INNER JOIN Shipment ON Planet.PlanetID = Shipment.Planet INNER JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet.Name ORDER BY TotalPackageWeight DESC;  
SELECT Planet.Name FROM Planet, Shipment, Package WHERE Planet.PlanetID = Shipment.Planet AND Shipment.ShipmentID = Package.Shipment GROUP BY Planet.PlanetID HAVING SUM(Package.Weight) > 30; 
SELECT Planet.Name FROM Planet, Shipment, Package WHERE Planet.PlanetID = Shipment.Planet AND Shipment.ShipmentID = Package.Shipment GROUP BY Planet.PlanetID HAVING SUM(Package.Weight) > 30; 
SELECT PackageNumber FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8')) AND Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan'); 
SELECT COUNT(*) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan') AND Shipment = (SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8')); 
SELECT PackageNumber FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8')) OR Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan') 
SELECT COUNT(*) FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8')) OR Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan') 
SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30; 
SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30; 
SELECT Name FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars')); 
SELECT Name FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars')); 
SELECT Name FROM Employee WHERE EmployeeID IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omega III')); 
SELECT Name FROM Employee WHERE EmployeeID IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omega III')); 
SELECT Planet.Name FROM Planet INNER JOIN Has_Clearance ON Planet.PlanetID = Has_Clearance.Planet WHERE Has_Clearance.Level = 1 GROUP BY Planet.Name HAVING COUNT(*) = 1;  
SELECT Planet.Name FROM Planet, Has_Clearance WHERE Planet.PlanetID = Has_Clearance.Planet GROUP BY Planet.PlanetID HAVING COUNT(Has_Clearance.Employee) = 1; 
SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000; 
SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000; 
SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000; 
SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000; 
SELECT COUNT(*) FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars')); 
SELECT COUNT(*) FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars')); 
SELECT COUNT(*) FROM game; 
SELECT COUNT(*) FROM game; 
SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC; 
SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC; 
SELECT AVG(Units_sold_Millions) FROM game WHERE Developers!= 'Nintendo'; 
SELECT AVG(Units_sold_Millions) FROM game WHERE Developers!= 'Nintendo'; 
SELECT Platform_name, Market_district FROM platform; 
SELECT platform_name, market_district FROM platform; 
SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1; 
SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1; 
SELECT MAX(Rank_of_the_year), MIN(Rank_of_the_year) FROM player; 
SELECT MAX(Rank_of_the_year), MIN(Rank_of_the_year) FROM player; 
SELECT COUNT(*) FROM player WHERE Rank_of_the_year < 3; 
SELECT COUNT(*) FROM player WHERE Rank_of_the_year <= 3; 
SELECT Player_name FROM player ORDER BY Player_name ASC; 
SELECT Player_name FROM player ORDER BY Player_name ASC; 
SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC; 
SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC; 
SELECT Player_name, Rank_of_the_year FROM player WHERE Player_ID IN (SELECT Player_ID FROM game_player WHERE Game_ID IN (SELECT Game_ID FROM game WHERE Title = 'Super Mario World')); 
SELECT Player_name, Rank_of_the_year FROM player WHERE Player_ID IN (SELECT Player_ID FROM game_player WHERE Game_ID IN (SELECT Game_ID FROM game WHERE Title = 'Super Mario World')); 
SELECT DISTINCT Developers FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Auburn')) 
SELECT DISTINCT Developers FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Auburn')); 
SELECT AVG(Units_sold_Millions) FROM game_player JOIN game ON game_player.Game_ID = game.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.Position = 'Guard'; 
SELECT AVG(Units_sold_Millions) FROM game_player JOIN game ON game_player.Game_ID = game.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.Position = 'Guard'; 
SELECT title, platform_name FROM game, platform WHERE game.platform_id = platform.platform_id; 
SELECT Title, Platform_name FROM game, platform WHERE game.Platform_ID = platform.Platform_ID; 
SELECT Title FROM game WHERE Platform_ID IN (SELECT Platform_ID FROM platform WHERE Market_district IN ('Asia', 'USA')); 
SELECT Title FROM game WHERE Platform_ID IN (SELECT Platform_ID FROM platform WHERE Market_district IN ('Asia', 'USA')); 
SELECT Franchise, COUNT(*) FROM game GROUP BY Franchise; 
SELECT Franchise, COUNT(*) AS num_games FROM game GROUP BY Franchise;  
SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(Franchise) = (SELECT MAX(COUNT(Franchise)) FROM game GROUP BY Franchise); 
SELECT Franchise, COUNT(*) AS num_games FROM game GROUP BY Franchise ORDER BY num_games DESC LIMIT 1;  
SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*) >= 2; 
SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*) >= 2; 
SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player); 
SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player); 
SELECT Title FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Oklahoma') AND Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Auburn')); 
SELECT Title FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Oklahoma' OR College = 'Auburn')); 
SELECT DISTINCT Franchise FROM game; 
SELECT DISTINCT Franchise FROM game; 
SELECT Title FROM game WHERE Game_ID NOT IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE Position = 'Guard')); 
SELECT Title FROM game WHERE Game_ID NOT IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE Position = 'Guard')); 
SELECT Name FROM press ORDER BY Year_Profits_billion DESC; 
SELECT Name FROM press ORDER BY Year_Profits_billion DESC; 
SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1; 
SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1; 
SELECT AVG(Year_Profits_billion), MAX(Year_Profits_billion) FROM press; 
SELECT press.Name, AVG(press.Year_Profits_billion), MAX(press.Year_Profits_billion) FROM press GROUP BY press.Name; 
SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press); 
SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press); 
SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) OR Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press); 
SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) OR Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press); 
SELECT COUNT(*) FROM author WHERE age < 30; 
SELECT COUNT(*) FROM author WHERE age < 30; 
SELECT Gender, AVG(Age) FROM author GROUP BY Gender; 
SELECT Gender, AVG(Age) FROM author GROUP BY Gender; 
SELECT Gender, COUNT(*) FROM author WHERE Age > 30 GROUP BY Gender; 
SELECT Gender, COUNT(*) AS count FROM author WHERE Age > 30 GROUP BY Gender; 
SELECT Title FROM book ORDER BY Release_date DESC; 
SELECT Title FROM book ORDER BY Release_date DESC; 
SELECT Book_Series, COUNT(*) FROM book GROUP BY Book_Series; 
SELECT Book_Series, COUNT(*) AS Count 
SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5; 
SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5; 
SELECT Book_Series FROM book WHERE Sale_Amount > 1000 AND Sale_Amount < 500; 
SELECT Book_Series FROM book WHERE Sale_Amount > 1000 AND Sale_Amount < 500; 
SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book WHERE Book_Series = 'MM') AND Author_ID IN (SELECT Author_ID FROM book WHERE Book_Series = 'LT'); 
SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book WHERE Book_Series = 'MM') AND Author_ID IN (SELECT Author_ID FROM book WHERE Book_Series = 'LT'); 
SELECT Name, Age FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book); 
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book); 
SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID HAVING COUNT(*) > 1); 
SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID HAVING COUNT(Book_ID) > 1); 
SELECT book.Title, author.Name, press.Name 
SELECT book.title, author.name, press.name FROM book INNER JOIN author ON book.author_id = author.author_id INNER JOIN press ON book.press_id = press.press_id ORDER BY book.sale_amount DESC LIMIT 3;  
SELECT press.Name, SUM(book.Sale_Amount) AS total_book_sale_amount FROM press JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Name; 
SELECT press.Name, SUM(book.Sale_Amount) AS total_book_sale_amount FROM press JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Name; 
SELECT press.Name, COUNT(book.Book_ID) AS num_books_sold 
SELECT press.Name, COUNT(book.Book_ID) FROM press JOIN book ON press.Press_ID = book.Press_ID WHERE book.Sale_Amount > 1000 GROUP BY press.Name; 
SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book WHERE Sale_Amount = (SELECT MAX(Sale_Amount) FROM book)); 
SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book WHERE Sale_Amount = (SELECT MAX(Sale_Amount) FROM book)); 
SELECT Name, Gender FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT Name, Gender FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book WHERE Press_ID IN (SELECT Press_ID FROM press WHERE Name = 'Accor')); 
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book WHERE Press_ID IN (SELECT Press_ID FROM press WHERE Name = 'Accor')); 
SELECT Name, Year_Profits_billion FROM press WHERE Press_ID IN (SELECT Press_ID FROM book GROUP BY Press_ID HAVING COUNT(Book_ID) > 2); 
SELECT press.Name, press.Year_Profits_billion FROM press JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Press_ID HAVING COUNT(book.Book_ID) > 2; 
SELECT COUNT(author_name) FROM Authors; 
SELECT author_name FROM Authors; 
SELECT author_name, other_details FROM Authors; 
SELECT other_details FROM Authors WHERE author_name = 'Addison Denesik'; 
SELECT COUNT(*) FROM Documents; 
SELECT author_name FROM Documents WHERE document_id = 4; 
SELECT author_name FROM Documents WHERE document_name = 'Travel to Brazil'; 
SELECT COUNT(*) FROM Documents WHERE author_name = 'Era Kerluke'; 
SELECT document_name, document_description FROM Documents; 
SELECT document_id, document_name FROM Documents WHERE author_name = 'Bianka Cummings'; 
SELECT author_name, other_details FROM Authors WHERE author_name IN (SELECT author_name FROM Documents WHERE document_name = 'Travel to China'); 
SELECT author_name, COUNT(document_name) FROM Documents GROUP BY author_name; 
SELECT author_name, COUNT(*) AS num_docs 
SELECT author_name FROM Documents GROUP BY author_name HAVING COUNT(*) >= 2; 
SELECT COUNT(*) FROM Business_Processes; 
SELECT next_process_id, process_name, process_description FROM Business_Processes WHERE process_id = 9; 
SELECT process_name FROM Business_Processes WHERE process_id = (SELECT next_process_id FROM Business_Processes WHERE process_id = 9); 
SELECT COUNT(*) FROM Process_Outcomes; 
SELECT process_outcome_code, process_outcome_description FROM Process_Outcomes; 
SELECT process_outcome_description FROM Process_Outcomes WHERE process_outcome_code = 'working'; 
SELECT COUNT(process_status_code) FROM Process_Status; 
SELECT process_status_code, process_status_description FROM Process_Status; 
SELECT process_status_description FROM Process_Status WHERE process_status_code = 'ct'; 
SELECT COUNT(*) FROM Staff; 
SELECT staff_id, staff_details FROM Staff; 
SELECT staff_details FROM Staff WHERE staff_id = 100; 
SELECT COUNT(*) FROM Ref_Staff_Roles; 
SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles; 
SELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code = 'HR'; 
SELECT COUNT(DISTINCT document_id) FROM Documents_Processes; 
SELECT process_id FROM Business_Processes WHERE process_id IN (SELECT process_id FROM Documents_Processes); 
SELECT document_id FROM Documents WHERE document_id NOT IN (SELECT document_id FROM Documents_Processes); 
SELECT process_id FROM Business_Processes WHERE process_id NOT IN (SELECT process_id FROM Documents_Processes); 
SELECT process_outcome_description, process_status_description 
SELECT process_name FROM Business_Processes WHERE process_id IN (SELECT process_id FROM Documents_Processes WHERE document_id IN (SELECT document_id FROM Documents WHERE document_name = 'Travel to Brazil')); 
SELECT process_id, COUNT(document_id) FROM Documents_Processes GROUP BY process_id; 
SELECT COUNT(*) FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9; 
SELECT staff_id, COUNT(*) AS num_doc_proc 
SELECT staff_role_code, COUNT(*) AS num_processes 
SELECT COUNT(DISTINCT staff_role_code) FROM Staff_in_Processes WHERE staff_id = 3; 
SELECT COUNT(*) FROM Agencies; 
SELECT COUNT(*) FROM Agencies; 
SELECT agency_id, agency_details FROM Agencies; 
SELECT agency_id, agency_details FROM Agencies; 
SELECT COUNT(*) FROM Clients; 
SELECT COUNT(*) FROM Clients; 
SELECT client_id, client_details FROM Clients; 
SELECT client_id, client_details FROM Clients; 
SELECT agency_id, COUNT(client_id) FROM Clients GROUP BY agency_id; 
SELECT agency_id, COUNT(client_id) AS client_count 
SELECT agency_id, agency_details, COUNT(client_id) AS client_count 
SELECT agency_id, agency_details FROM Agencies WHERE agency_id = (SELECT agency_id FROM Clients GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(*) >= 2); 
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(*) >= 2); 
SELECT agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients WHERE client_details = 'Mac') 
SELECT agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients WHERE client_details = 'Mac'); 
SELECT client_details, agency_details FROM Clients, Agencies WHERE Clients.agency_id = Agencies.agency_id; 
SELECT client_details, agency_details FROM Clients, Agencies WHERE Clients.agency_id = Agencies.agency_id; 
SELECT sic_code, COUNT(client_id) FROM Clients GROUP BY sic_code; 
SELECT sic_code, COUNT(client_id) AS client_count FROM Clients GROUP BY sic_code ORDER BY client_count DESC;  
SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad'; 
SELECT client_details, purpose_of_meeting 
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients); 
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients); 
SELECT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT agency_id FROM Clients); 
SELECT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT agency_id FROM Clients); 
SELECT COUNT(*) FROM Invoices; 
SELECT COUNT(*) FROM Invoices; 
SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE client_id IN (SELECT client_id FROM Clients);  
SELECT invoice_id, invoice_status, invoice_details FROM Invoices; 
SELECT client_id, COUNT(invoice_id) AS num_invoices FROM Invoices GROUP BY client_id;  
SELECT client_id, COUNT(invoice_id) AS num_invoices FROM Invoices GROUP BY client_id;  
SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(invoice_id) = (SELECT MAX(invoice_count) FROM (SELECT client_id, COUNT(invoice_id) AS invoice_count FROM Invoices GROUP BY client_id))); 
SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT client_id, COUNT(*) AS count FROM Invoices GROUP BY client_id))); 
SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(invoice_id) >= 2; 
SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(invoice_id) >= 2; 
SELECT invoice_status, COUNT(invoice_id) AS num_invoices 
SELECT invoice_status, COUNT(*) AS invoice_count FROM Invoices GROUP BY invoice_status;  
SELECT invoice_status, COUNT(invoice_status) AS invoice_count 
SELECT invoice_status, COUNT(invoice_status) AS invoice_count 
SELECT invoice_status, invoice_details, client_id, client_details, agency_id, agency_details 
SELECT invoice_status, invoice_details, client_id, client_details, agency_id, agency_details 
SELECT meeting_type, other_details FROM Meetings; 
SELECT meeting_type, other_details FROM Meetings; 
SELECT meeting_outcome, purpose_of_meeting FROM Meetings; 
SELECT meeting_outcome, purpose_of_meeting FROM Meetings; 
SELECT payment_id, payment_details FROM Payments WHERE invoice_id IN (SELECT invoice_id FROM Invoices WHERE invoice_status = 'Working'); 
SELECT payment_id, payment_details FROM Payments WHERE invoice_id IN (SELECT invoice_id FROM Invoices WHERE invoice_status = 'Working'); 
SELECT invoice_id, invoice_status FROM Invoices WHERE invoice_id NOT IN (SELECT invoice_id FROM Payments); 
SELECT invoice_id, invoice_status FROM Invoices WHERE invoice_id NOT IN (SELECT invoice_id FROM Payments); 
SELECT COUNT(*) FROM Payments; 
SELECT COUNT(*) FROM Payments; 
SELECT payment_id, invoice_id, payment_details FROM Payments; 
SELECT payment_id, invoice_id, payment_details FROM Payments; 
SELECT invoice_id, invoice_status FROM Invoices; 
SELECT DISTINCT Invoices.invoice_id, Invoices.invoice_status FROM Invoices JOIN Payments ON Invoices.invoice_id = Payments.invoice_id;  
SELECT invoice_id, COUNT(payment_id) AS num_payments 
SELECT invoice_id, COUNT(payment_id) AS payment_count FROM Payments GROUP BY invoice_id;  
SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments GROUP BY invoice_id HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT invoice_id, COUNT(*) AS count FROM Payments GROUP BY invoice_id))); 
SELECT invoice_id, invoice_status, invoice_details 
SELECT COUNT(*) FROM Staff; 
SELECT COUNT(*) FROM Staff; 
SELECT agency_id, COUNT(staff_id) AS staff_count 
SELECT agency_id, COUNT(staff_id) AS num_staff 
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Staff GROUP BY agency_id HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT agency_id, COUNT(*) AS count FROM Staff GROUP BY agency_id))); 
SELECT agency_id, agency_details FROM Agencies WHERE agency_id = (SELECT agency_id FROM Staff GROUP BY agency_id ORDER BY COUNT(staff_id) DESC LIMIT 1); 
SELECT meeting_outcome, COUNT(*) AS meeting_count FROM Meetings GROUP BY meeting_outcome ORDER BY meeting_count DESC;  
SELECT meeting_outcome, COUNT(*) AS meeting_count FROM Meetings GROUP BY meeting_outcome ORDER BY meeting_count DESC;  
SELECT client_id, COUNT(meeting_id) AS num_meetings FROM Meetings GROUP BY client_id ORDER BY num_meetings DESC;  
SELECT client_id, COUNT(meeting_id) AS meeting_count 
SELECT meeting_type, COUNT(*) AS meeting_count FROM Meetings GROUP BY meeting_type ORDER BY meeting_count DESC;  
SELECT meeting_type, COUNT(*) AS meeting_count FROM Meetings GROUP BY meeting_type;  
SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM Meetings JOIN Clients ON Meetings.client_id = Clients.client_id; 
SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id; 
SELECT meeting_id, COUNT(staff_id) AS num_staff 
SELECT meeting_id, COUNT(staff_id) AS staff_count 
SELECT staff_id, COUNT(*) AS meeting_count 
SELECT staff_id 
SELECT COUNT(*) FROM Staff_in_Meetings 
SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Meetings; 
SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings); 
SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings); 
SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings UNION SELECT client_id FROM Invoices); 
SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings UNION SELECT client_id FROM Invoices); 
SELECT staff_id, staff_details FROM Staff WHERE staff_id IN (SELECT staff_id FROM Staff_in_Meetings) AND staff_details LIKE '%s%'; 
SELECT staff_id, staff_details FROM Staff WHERE staff_details LIKE '%s%' AND staff_id IN (SELECT staff_id FROM Staff_in_Meetings); 
SELECT client_id, sic_code, agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings GROUP BY client_id HAVING COUNT(*) = 1) AND client_id IN (SELECT client_id FROM Invoices);  
SELECT client_id, sic_code, agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings GROUP BY client_id HAVING COUNT(*) = 1) AND client_id IN (SELECT client_id FROM Invoices);  
SELECT start_date_time, end_date_time, client_details, staff_details 
SELECT m.start_date_time, m.end_date_time, c.client_details, s.staff_details 
