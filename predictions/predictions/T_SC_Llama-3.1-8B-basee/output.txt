SELECT paper_id, title FROM Paper WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown') ORDER BY paper_id ASC; 
SELECT `Paper`.`paper_id`, `Paper`.`title` FROM `Paper` WHERE `Paper`.`paper_id` IN (SELECT `Paper`.`paper_id` FROM `Paper` WHERE `Paper`.`title` LIKE '%Mckeown%') AND `Paper`.`paper_id` IN (SELECT `Paper`.`paper_id` FROM `Paper` WHERE `Paper`.`title` LIKE '%Mckeown%') AND `Paper`.`paper_id` IN (SELECT `Paper`.`paper_id` FROM `Paper` WHERE `Paper`.`title` LIKE '%Mckeown%') AND `Paper`.`paper_id` IN (SELECT `Paper`.`paper_id` FROM `Paper` WHERE `Paper`.`title` LIKE '%Mckeown%') AND `Paper`.`paper_id` IN (SELECT `Paper`.`paper_id` FROM `Paper` WHERE `Paper`.`title` LIKE '%Mckeown%') AND `Paper`.`paper_id` IN (SELECT `Paper`.`paper_id` FROM `Paper` WHERE `Paper`.`title` LIKE '%Mckeown%') AND `Paper`.`paper_id` IN (SELECT `Paper`.`paper_id` FROM `Paper` WHERE `Paper`.`title` LIKE '%Mckeown%
SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name IN ('Stanford University', 'Columbia University')))) ORDER BY paper_id ASC; 
SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Stanford') AND paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia'))) ORDER BY title ASC; 
SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name IN ('Mckeown, Kathleen', 'Rambow, Owen'))) 
SELECT p.paper_id, p.title 
SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown') AND paper_id NOT IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Rambow'))) 
SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown') AND paper_id NOT IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Rambow'))) 
SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name IN ('Mckeown, Kathleen', 'Rambow, Owen'))) 
SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name IN ('Mckeown, Kathleen', 'Rambow, Owen'))) 
SELECT Author.name, COUNT(Paper.paper_id) AS num_papers FROM Author LEFT JOIN Author_list ON Author.author_id = Author_list.author_id LEFT JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY Author.name ORDER BY num_papers DESC; 
SELECT author_id, COUNT(paper_id) FROM Author_list GROUP BY author_id ORDER BY COUNT(paper_id) DESC; 
SELECT affiliation_id, name, address, COUNT(paper_id) AS num_papers 
SELECT name FROM Affiliation ORDER BY COUNT(paper_id) DESC; 
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year > 2010 AND year < 2015) GROUP BY author_id HAVING COUNT(*) > 50); 
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year > 2000 AND year < 2010) GROUP BY author_id HAVING COUNT(*) > 50); 
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation) AND paper_id NOT IN (SELECT paper_id FROM Citation) GROUP BY paper_id HAVING COUNT(*)=1)); 
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year = 2010) GROUP BY author_id HAVING COUNT(*) = 1); 
SELECT venue, year, COUNT(*) AS num_publications FROM Paper GROUP BY venue, year ORDER BY num_publications DESC LIMIT 1; 
SELECT venue, year, COUNT(*) AS num_papers FROM Paper GROUP BY venue, year ORDER BY num_papers DESC LIMIT 1; 
SELECT venue FROM Paper GROUP BY venue HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Paper GROUP BY venue); 
SELECT venue FROM Paper GROUP BY venue HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Paper GROUP BY venue); 
SELECT COUNT(*) FROM Paper p1, Citation c, Paper p2 WHERE p1.paper_id = 'A00-1002' AND c.cited_paper_id = p1.paper_id AND c.paper_id = p2.paper_id AND p2.year > 2000; 
SELECT COUNT(*) FROM Paper p1, Citation c, Paper p2 WHERE p1.paper_id = c.paper_id AND c.cited_paper_id = p2.paper_id AND p2.paper_id = 'A00-1002'; 
SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'D12-1027'; 
SELECT COUNT(*) FROM Citation WHERE paper_id = 'D12-1027'; 
SELECT paper_id, COUNT(cited_paper_id) AS num_citations FROM Citation GROUP BY paper_id ORDER BY num_citations DESC LIMIT 1; 
SELECT paper_id, COUNT(cited_paper_id) AS num_citations FROM Citation GROUP BY paper_id ORDER BY num_citations DESC LIMIT 1; 
SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(*) > 1); 
SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(*) > (SELECT COUNT(*) FROM Citation)); 
SELECT p.paper_id, p.title, COUNT(c.cited_paper_id) AS num_citations FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.paper_id ORDER BY num_citations DESC LIMIT 10; 
SELECT p.paper_id, p.title, p.year, COUNT(c.cited_paper_id) AS num_citations FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.paper_id ORDER BY num_citations DESC LIMIT 10; 
SELECT COUNT(*) FROM `Citation` WHERE `Cited_paper_id` IN (SELECT `paper_id` FROM `Author_list` WHERE `author_id` IN (SELECT `author_id` FROM `Author` WHERE `name` = 'Mckeown, Kathleen')) AND `paper_id` NOT IN (SELECT `paper_id` FROM `Author_list` WHERE `author_id` IN (SELECT `author_id` FROM `Author` WHERE `name` = 'Mckeown, Kathleen')) 
SELECT COUNT(*) FROM `Citation` WHERE `Cited_paper_id` IN (SELECT `paper_id` FROM `Author_list` WHERE `author_id` IN (SELECT `author_id` FROM `Author` WHERE `name` = 'Mckeown, Kathleen')) AND `paper_id` NOT IN (SELECT `paper_id` FROM `Author_list` WHERE `author_id` IN (SELECT `author_id` FROM `Author` WHERE `name` = 'Mckeown, Kathleen')) AND `paper_id` NOT IN (SELECT `paper_id` FROM `Author_list` WHERE `author_id` IN (SELECT `author_id` FROM `Author` WHERE `name` = 'Mckeown, Kathleen')) AND `paper_id` NOT IN (SELECT `paper_id` FROM `Author_list` WHERE `author_id` IN (SELECT `author_id` FROM `Author` WHERE `name` = 'Mckeown, Kathleen')) AND `paper_id` NOT IN (SELECT `paper_id` FROM `Author_list` WHERE `author_id` IN (SELECT `author_id` FROM `Author` WHERE `name` = 'Mckeown, Kathleen')) AND `paper_id`
SELECT COUNT(*) FROM Paper p1, Citation c, Paper p2 WHERE p1.paper_id = c.paper_id AND c.cited_paper_id = p2.paper_id AND p1.title = 'How many papers does Mckeown, Kathleen cite?' AND p2.title = 'How many papers does Mckeown, Kathleen cite?'; 
SELECT COUNT(*) FROM Paper p1, Citation c, Paper p2 WHERE p1.paper_id = c.paper_id AND c.cited_paper_id = p2.paper_id AND p1.title = 'Mckeown' AND p2.title = 'Kathleen' AND p1.year = p2.year; 
SELECT a.name, COUNT(*) AS num_citations 
SELECT a.name, COUNT(*) AS num_citations 
SELECT DISTINCT venue, year FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') AND affiliation_id IS NULL) ORDER BY venue, year; 
SELECT DISTINCT venue, year FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) ORDER BY venue, year; 
SELECT DISTINCT venue, year FROM Paper WHERE affiliation_id IN (SELECT affiliation_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Columbia University')) ORDER BY venue, year ASC; 
SELECT DISTINCT venue, year FROM Paper WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University'); 
SELECT author_id FROM Author_list WHERE year = 2009 GROUP BY author_id HAVING COUNT(*) > 1 ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year = 2009) GROUP BY author_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year = 2009) GROUP BY author_id ORDER BY COUNT(*) DESC LIMIT 1)) ORDER BY name ASC LIMIT 1; 
SELECT name FROM Affiliation WHERE affiliation_id IN (SELECT affiliation_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Paper WHERE year = 2009) GROUP BY affiliation_id ORDER BY COUNT(*) DESC LIMIT 3); 
SELECT affiliation_id, COUNT(*) AS num_papers 
SELECT COUNT(*) FROM Paper WHERE year <= 2009 AND venue = 'Columbia University' ; 
SELECT COUNT(*) FROM Paper WHERE year <= 2009 AND venue = 'Columbia University' 
SELECT COUNT(*) FROM Author_list WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Stanford University') AND year BETWEEN 2000 AND 2009; 
SELECT COUNT(*) FROM Paper WHERE year BETWEEN 2000 AND 2009 AND venue = 'Stanford University'; 
SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE affiliation_id IN (SELECT affiliation_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Citation WHERE cited_paper_id IN (SELECT cited_paper_id FROM Citation WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE affiliation_id IN (SELECT affiliation_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Citation WHERE cited_paper_id IN (SELECT cited_paper_id FROM Citation WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE affiliation_id IN (
SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE affiliation_id IN (SELECT affiliation_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation WHERE cited_paper_id IN (SELECT cited_paper_id FROM Citation WHERE paper_id IN (SELECT paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation WHERE cited_paper_id IN (SELECT cited_paper_id FROM Citation WHERE paper_id IN (SELECT paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation WHERE cited_paper_id IN (SELECT cited_paper_id FROM Citation WHERE paper_id IN (SELECT paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation WHERE cited_paper_id IN (SELECT cited_paper_id FROM Citation WHERE paper_id IN (SELECT paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation WHERE cited_paper_id IN (SELECT cited_paper_id FROM Citation WHERE paper_id IN (
SELECT COUNT(DISTINCT author_id) FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') AND affiliation_id IS NULL; 
SELECT COUNT(DISTINCT author_id) FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') AND affiliation_id IS NULL; 
SELECT author_id, COUNT(*) AS num_papers FROM Author_list WHERE author_id IN (SELECT author_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Mckeown, Kathleen')) GROUP BY author_id HAVING COUNT(*) > 1 ORDER BY num_papers DESC LIMIT 1; 
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE title = 'A Semantic Role Labeling System' AND venue = 'HLT' AND year = 2005)) AND paper_id IN (SELECT paper_id FROM Paper WHERE title = 'A Semantic Role Labeling System' AND venue = 'HLT' AND year = 2005)) AND paper_id IN (SELECT paper_id FROM Paper WHERE title = 'A Semantic Role Labeling System' AND venue = 'HLT' AND year = 2005)) AND paper_id IN (SELECT paper_id FROM Paper WHERE title = 'A Semantic Role Labeling System' AND venue = 'HLT' AND year = 2005)) AND paper_id IN (SELECT paper_id FROM Paper WHERE title = 'A Semantic Role Labeling System' AND venue = 'HLT' AND year = 2005)) AND paper_id IN (SELECT paper_id FROM Paper WHERE title = 'A Semantic Role Labeling System' AND venue = 'HLT' AND year = 2005)) AND paper_id IN (SELECT paper_id FROM
SELECT paper_id FROM Paper WHERE title LIKE '%translation%'; 
SELECT paper_id FROM Paper WHERE title LIKE '%translation%'; 
SELECT paper_id, title FROM Paper WHERE paper_id NOT IN (SELECT paper_id FROM Citation); 
SELECT paper_id, title FROM Paper WHERE paper_id NOT IN (SELECT paper_id FROM Citation); 
SELECT name FROM Affiliation WHERE address LIKE '%China%' AND affiliation_id IN (SELECT affiliation_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year IN (SELECT MAX(year) FROM Paper))); 
SELECT affiliation_id, name, address FROM Affiliation WHERE address LIKE '%China%' ORDER BY COUNT(paper_id) DESC LIMIT 1; 
SELECT year, venue, COUNT(*) FROM Paper GROUP BY year, venue ORDER BY year ASC, venue ASC; 
SELECT venue, year, COUNT(paper_id) FROM Paper GROUP BY venue, year ORDER BY venue, year; 
SELECT affiliation_id, COUNT(*) FROM Author_list GROUP BY affiliation_id; 
SELECT affiliation_id, COUNT(*) AS num_papers FROM Author_list GROUP BY affiliation_id; 
SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation WHERE cited_paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(*) > 50)); 
SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation WHERE cited_paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(*) > 50)); 
SELECT COUNT(DISTINCT author_id) FROM ( 
SELECT COUNT(DISTINCT author_id) FROM ( 
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue IN ('NAACL', 'ACL') AND year = 2009)) ORDER BY name ASC; 
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year = 2009 AND venue IN ('NAACL', 'ACL'))) 
SELECT name FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'ACL')); 
SELECT name FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'ACL' AND year = 2018)) 
SELECT COUNT(*) FROM conference; 
SELECT COUNT(*) FROM conference; 
SELECT DISTINCT Conference_Name FROM conference; 
SELECT DISTINCT Conference_Name FROM conference; 
SELECT conference_name, year, location FROM conference; 
SELECT conference_name, year, location FROM conference 
SELECT Conference_Name, COUNT(Conference_Name) FROM conference GROUP BY Conference_Name; 
SELECT Conference_Name, COUNT(Conference_Name) FROM conference GROUP BY Conference_Name; 
SELECT Year, COUNT(Conference_ID) FROM conference GROUP BY Year ORDER BY Year ASC; 
SELECT Conference_ID, Year FROM conference GROUP BY Conference_ID, Year HAVING COUNT(*) = (SELECT COUNT(DISTINCT Year) FROM conference); 
SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(Year) ASC LIMIT 1; 
SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(Year) ASC LIMIT 1; 
SELECT DISTINCT Location FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation GROUP BY Conference_ID HAVING COUNT(*) >= 2) ORDER BY Location ASC; 
SELECT DISTINCT Location FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation GROUP BY Conference_ID HAVING COUNT(*) >= 2)) ORDER BY Location ASC; 
SELECT institution.Institution_Name, institution.Location, institution.Founded FROM institution 
SELECT institution.Institution_Name, institution.Location, institution.Founded FROM institution 
SELECT COUNT(DISTINCT Institution_ID) FROM institution WHERE Founded BETWEEN 1850 AND 1900; 
SELECT COUNT(*) FROM institution WHERE Founded BETWEEN 1850 AND 1900; 
SELECT institution.Institution_Name, institution.Location FROM institution WHERE institution.Founded = (SELECT MAX(institution.Founded) FROM institution); 
SELECT institution_name, location FROM institution WHERE founded = (SELECT MAX(founded) FROM institution); 
SELECT institution.Institution_Name, COUNT(staff.staff_ID) AS num_staff FROM institution JOIN staff ON institution.Institution_ID = staff.Institution_ID WHERE institution.Founded > 1800 GROUP BY institution.Institution_Name; 
SELECT institution.Institution_ID, institution.Institution_Name, COUNT(staff.name) AS num_staff, staff.name FROM institution JOIN staff ON institution.Institution_ID = staff.Institution_ID WHERE institution.Founded > 1800 GROUP BY institution.Institution_ID, institution.Institution_Name, staff.name ORDER BY institution.Institution_ID, institution.Institution_Name, staff.name; 
SELECT institution.Institution_Name FROM institution WHERE institution.Institution_ID NOT IN (SELECT institution.Institution_ID FROM institution JOIN staff ON institution.Institution_ID = staff.Institution_ID); 
SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff); 
SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff); 
SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff); 
SELECT MAX(Age), MIN(Age) FROM staff WHERE Nationality = 'United States'; 
SELECT MAX(Age) AS max_age, MIN(Age) AS min_age FROM staff; 
SELECT Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation WHERE staff_ID IN (SELECT staff_ID FROM staff WHERE Nationality = 'Canada' AND Institution_ID IN (SELECT Institution_ID FROM institution WHERE Location = 'Canada'))) ORDER BY Conference_Name ASC; 
SELECT Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation WHERE staff_ID IN (SELECT staff_ID FROM staff WHERE Nationality = 'Canada' AND Institution_ID IN (SELECT Institution_ID FROM institution WHERE Location = 'Canada')) AND role = 'attending') ORDER BY Conference_Name ASC; 
SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role ='speaker' AND Conference_ID IN (SELECT Conference_ID FROM conference_participation WHERE role ='sponsor')) ORDER BY name ASC; 
SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role ='speaker' AND Conference_ID IN (SELECT Conference_ID FROM conference_participation WHERE role ='sponsor')) 
SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name IN ('ACL', 'NACCL'))) ORDER BY name ASC; 
SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name IN ('ACL', 'NACCL'))) GROUP BY name HAVING COUNT(*) = 2; 
SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year IN (2003, 2004))); 
SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year IN (2003, 2004))); 
SELECT conference.Conference_Name, conference.Year, COUNT(conference_participation.staff_ID) AS num_participants FROM conference INNER JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID GROUP BY conference.Conference_Name, conference.Year 
SELECT conference.Conference_Name, conference.Year, COUNT(conference_participation.staff_ID) AS num_participants FROM conference INNER JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID GROUP BY conference.Conference_Name, conference.Year; 
SELECT Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation GROUP BY Conference_ID ORDER BY COUNT(*) DESC LIMIT 2); 
SELECT Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation GROUP BY Conference_ID HAVING COUNT(*) >= 2) 
SELECT name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL')) ORDER BY name ASC; 
SELECT name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL')) ORDER BY name ASC; 
SELECT institution.Institution_Name, institution.Location FROM institution 
SELECT institution.Institution_Name, institution.Location FROM institution 
SELECT pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills); 
SELECT pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills); 
SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age; 
SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age ASC; 
SELECT * FROM PilotSkills WHERE age < 30; 
SELECT pilot_name, plane_name, age FROM PilotSkills WHERE age < 30 
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35; 
SELECT pilot_name FROM PilotSkills WHERE age < 35 AND plane_name = 'Piper Cub' ORDER BY pilot_name ASC; 
SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter'  
SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter'; 
SELECT DISTINCT location FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills WHERE pilot_name = 'John Doe' AND age > 30) 
SELECT COUNT(DISTINCT location) FROM Hangar 
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32; 
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32; 
SELECT COUNT(*) FROM PilotSkills WHERE age > 40; 
SELECT COUNT(*) FROM PilotSkills WHERE age > 40; 
SELECT COUNT(*) FROM PilotSkills WHERE pilot_name = 'John Doe' AND plane_name = 'B-52 Bomber' AND age < 35; 
SELECT COUNT(*) FROM PilotSkills 
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age = (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')  
SELECT pilot_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills) AND plane_name = 'Piper Cub' ORDER BY age DESC LIMIT 1; 
SELECT plane_name 
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(plane_name) DESC LIMIT 1; 
SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM PilotSkills GROUP BY plane_name); 
SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING COUNT(*)=1 
SELECT COUNT(*) FROM PilotSkills 
SELECT COUNT(*) FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Chicago') AND pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Chicago')); 
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41; 
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41; 
SELECT COUNT(DISTINCT plane_name) FROM PilotSkills; 
SELECT DISTINCT plane_name FROM PilotSkills; 
SELECT COUNT(plane_name) FROM PilotSkills WHERE pilot_name = 'Smith' GROUP BY pilot_name HAVING COUNT(plane_name) > 1 
SELECT COUNT(*) FROM PilotSkills WHERE pilot_name = 'Smith' AND plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Smiths Hangar'); 
SELECT COUNT(*) FROM PilotSkills WHERE age > 40; 
SELECT COUNT(*) FROM PilotSkills WHERE age > 40; 
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC; 
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC; 
SELECT pilot_name FROM PilotSkills ORDER BY age DESC; 
SELECT pilot_name FROM PilotSkills ORDER BY age DESC; 
SELECT location FROM Hangar ORDER BY plane_name; 
SELECT DISTINCT location FROM Hangar ORDER BY plane_name ASC; 
SELECT DISTINCT plane_name FROM PilotSkills ORDER BY plane_name ASC; 
SELECT DISTINCT plane_name FROM PilotSkills ORDER BY plane_name ASC; 
SELECT COUNT(*) FROM PilotSkills WHERE age > 40 OR age < 30; 
SELECT COUNT(*) FROM PilotSkills WHERE age > 40 OR age < 30; 
SELECT pilot_name, age FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age > 35 OR plane_name = 'F-14 Fighter' AND age < 30; 
SELECT pilot_name, age FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age > 35 OR plane_name = 'F-14 Fighter' AND age < 30; 
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND plane_name!= 'B-52 Bomber'; 
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND plane_name!= 'B-52 Bomber'; 
SELECT pilot_name 
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'B-52 Bomber') GROUP BY pilot_name HAVING COUNT(*) = 2 
SELECT AVG(age), MIN(age) FROM PilotSkills; 
SELECT AVG(age), MIN(age) FROM PilotSkills; 
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Austin', 'Boston') GROUP BY pilot_name HAVING COUNT(*) = 2 
SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location IN ('Austin', 'Boston')) 
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter') GROUP BY pilot_name HAVING COUNT(*) = 2 
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter') GROUP BY pilot_name HAVING COUNT(*) = 2 
SELECT plane_name, AVG(age) FROM PilotSkills GROUP BY plane_name; 
SELECT plane_name, AVG(age) FROM PilotSkills GROUP BY plane_name; 
SELECT plane_name, COUNT(plane_name) FROM Hangar GROUP BY plane_name; 
SELECT plane_name, COUNT(*) FROM PilotSkills GROUP BY plane_name; 
SELECT plane_name, pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills) ORDER BY plane_name 
SELECT DISTINCT 
SELECT pilot_name, plane_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills) GROUP BY plane_name; 
SELECT DISTINCT plane_name, pilot_name 
SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name; 
SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name; 
SELECT city, COUNT(pilot_name), AVG(age) 
SELECT DISTINCT location, COUNT(pilot_name) AS num_pilots, AVG(age) AS avg_age 
SELECT COUNT(pilot_name) FROM PilotSkills WHERE age < 35 GROUP BY plane_name HAVING AVG(age) < 35 
SELECT plane_name, COUNT(pilot_name) FROM PilotSkills 
SELECT location FROM PilotSkills, Hangar WHERE PilotSkills.pilot_name = 'John' AND PilotSkills.plane_name = Hangar.plane_name AND PilotSkills.age = (SELECT MIN(age) FROM PilotSkills WHERE PilotSkills.pilot_name = 'John') AND PilotSkills.plane_name = (SELECT plane_name FROM PilotSkills WHERE PilotSkills.pilot_name = 'John' AND PilotSkills.age = (SELECT MIN(age) FROM PilotSkills WHERE PilotSkills.pilot_name = 'John')); 
SELECT location FROM PilotSkills WHERE pilot_name = 'John' AND plane_name = 'Boeing 747' AND age = (SELECT MIN(age) FROM PilotSkills WHERE pilot_name = 'John' AND plane_name = 'Boeing 747'); 
SELECT pilot_name, age FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin') ORDER BY pilot_name; 
SELECT pilot_name, age FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin') ORDER BY pilot_name; 
SELECT pilot_name FROM PilotSkills WHERE age > (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name ASC; 
SELECT pilot_name FROM PilotSkills WHERE age > (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name ASC; 
SELECT COUNT(*) FROM PilotSkills WHERE age < ALL (SELECT age FROM PilotSkills WHERE plane_name = 'F-14 Fighter'); 
SELECT COUNT(DISTINCT pilot_name) 
SELECT DISTINCT plane_name FROM PilotSkills WHERE pilot_name LIKE '%Bomber%' AND plane_name LIKE '%Bomber%'; 
SELECT DISTINCT plane_name FROM PilotSkills WHERE plane_name LIKE '%Bomber%'; 
SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT age FROM PilotSkills WHERE pilot_name = 'John' AND plane_name = 'Piper Cub'); 
SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age LIMIT 1); 
SELECT Name FROM district WHERE Area_km = (SELECT MAX(Area_km) FROM district); 
SELECT district.Area_km, district.Government_website 
SELECT district.Name, district.Population FROM district WHERE district.Area_km > (SELECT AVG(district.Area_km) FROM district) ORDER BY district.Population DESC; 
SELECT MAX(Area_km), AVG(Area_km) FROM district; 
SELECT SUM(d.Population) FROM district d WHERE d.Area_km IN (SELECT Area_km FROM district ORDER BY Area_km DESC LIMIT 3); 
SELECT district.District_ID, district.Name, district.Government_website FROM district ORDER BY district.Population DESC; 
SELECT Name FROM district WHERE Government_website LIKE '%gov%'; 
SELECT district.District_ID, district.Name FROM district WHERE district.Population > 4000 OR district.Area_km > 3000; 
SELECT s.Name, s.Speach_title FROM spokesman s, spokesman_district sd WHERE s.Spokesman_ID = sd.Spokesman_ID AND sd.District_ID = 1; 
SELECT AVG(s.Points), AVG(s.Age) FROM spokesman s WHERE s.Rank_position = 1; 
SELECT s.Name, s.Points FROM spokesman s WHERE s.Age < 40; 
SELECT * FROM spokesman WHERE Age = (SELECT MAX(Age) FROM spokesman); 
SELECT * FROM spokesman WHERE Points < (SELECT AVG(Points) FROM spokesman); 
SELECT Name FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district WHERE Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman WHERE Points = (SELECT MAX(Points) FROM spokesman))); 
SELECT Name FROM spokesman WHERE Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman_district WHERE Start_year < '2004' AND District_ID IN (SELECT District_ID FROM district WHERE Area_km > 1000)) 
SELECT district.Name, COUNT(spokesman.Spokesman_ID) AS num_spokesmen 
SELECT district.Name FROM district 
SELECT district.Name FROM district, spokesman_district WHERE district.District_ID = spokesman_district.District_ID AND spokesman_district.Spokesman_ID IN (SELECT spokesman.Spokesman_ID FROM spokesman, spokesman_district WHERE spokesman.Spokesman_ID = spokesman_district.Spokesman_ID GROUP BY spokesman.Spokesman_ID HAVING COUNT(*) > 1); 
SELECT COUNT(DISTINCT district.District_ID) FROM district LEFT JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID WHERE spokesman_district.District_ID IS NULL; 
SELECT Name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district); 
SELECT SUM(d.Population) AS TotalPopulation, AVG(d.Population) AS AveragePopulation FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID WHERE s.Points > 0.5; 
SELECT title FROM Sculptures WHERE year = (SELECT MAX(year) FROM Sculptures); 
SELECT title FROM Sculptures WHERE year = (SELECT MAX(year) FROM Sculptures); 
SELECT title, location FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings); 
SELECT title, location FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings); 
SELECT lname, fname FROM Artists WHERE sculptureID IN (SELECT sculptureID FROM Sculptures WHERE location = '226'); 
SELECT title FROM Sculptures WHERE location = '226'; 
SELECT title, location FROM Paintings 
SELECT title, location FROM Paintings WHERE mediumOn = 'oil' AND year = 1900; 
SELECT title, location FROM Sculptures 
SELECT title, location FROM Sculptures WHERE sculptorID = 1; 
SELECT medium FROM Paintings WHERE paintingID = 80; 
SELECT medium FROM Paintings WHERE paintingID = 80; 
SELECT lname, fname FROM Artists WHERE birthYear > 1850; 
SELECT lname ||'' || fname FROM Artists WHERE birthYear > 1850; 
SELECT A.lname, A.fname, S.year FROM Artists AS A JOIN Sculptures AS S ON A.artistID = S.sculptorID WHERE S.location!= 'gallery 226' ORDER BY A.lname ASC, A.fname ASC, S.year ASC; 
SELECT lname, fname, birthYear, deathYear FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE location!= 'gallery 226') ORDER BY lname, fname, birthYear, deathYear; 
SELECT lname, fname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year < 1900) GROUP BY lname, fname HAVING COUNT(*) = 1 
SELECT lname, fname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year < 1900) GROUP BY lname, fname HAVING COUNT(*) = 1; 
SELECT DISTINCT birthYear FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year > 1920); 
SELECT  
SELECT lname, fname FROM Artists WHERE deathYear - birthYear = (SELECT MAX(deathYear - birthYear) FROM Artists); 
SELECT lname ||'' || fname FROM Artists WHERE deathYear - birthYear = (SELECT MAX(deathYear - birthYear) FROM Artists); 
SELECT  
SELECT fname, lname, birthYear, deathYear FROM Artists WHERE birthYear IS NOT NULL AND deathYear IS NOT NULL ORDER BY deathYear ASC LIMIT 1; 
SELECT fname, age FROM Artists WHERE artistID = (SELECT artistID FROM Artists WHERE deathYear - birthYear = (SELECT MAX(deathYear - birthYear) FROM Artists)); 
SELECT fname, age FROM Artists WHERE artistID = (SELECT artistID FROM Artists WHERE birthYear = (SELECT MIN(birthYear) FROM Artists)); 
SELECT COUNT(*) FROM Paintings WHERE location = '240'; 
SELECT COUNT(*) FROM Paintings WHERE location = '240'; 
SELECT COUNT(paintingID) FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE deathYear IS NOT NULL AND birthYear IS NOT NULL AND deathYear - birthYear = (SELECT MAX(deathYear - birthYear) FROM Artists WHERE deathYear IS NOT NULL AND birthYear IS NOT NULL)); 
SELECT COUNT(paintingID) FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.birthYear < a.deathYear ORDER BY a.deathYear - a.birthYear DESC LIMIT 1; 
SELECT lname, fname, year FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE fname = 'Mary') ORDER BY lname, fname, year; 
SELECT p.title, p.year FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.fname = 'Mary' ORDER BY p.year DESC; 
SELECT width_mm FROM Paintings WHERE year > 1850 AND painterID IN (SELECT artistID FROM Artists WHERE birthYear < 1850) 
SELECT width_mm FROM Paintings WHERE year > 1850 AND painterID IN (SELECT artistID FROM Artists WHERE birthYear < 1850) 
SELECT location, medium 
SELECT location, mediumOn FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE fname = 'Pablo') ORDER BY location, mediumOn; 
SELECT lname, fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings UNION SELECT sculptorID FROM Sculptures) ORDER BY lname, fname; 
SELECT lname ||'' || fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings UNION SELECT sculptorID FROM Sculptures); 
SELECT lname, fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil' AND mediumOn = 'lithographic') ORDER BY lname, fname; 
SELECT lname, fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium IN ('oil', 'lithographic')) ORDER BY lname, fname; 
SELECT birthYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE year = 1884 AND mediumOn = 'canvas') LIMIT 1; 
SELECT birthYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE year = 1884); 
SELECT DISTINCT fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241') ORDER BY fname ASC; 
SELECT fname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE location = '241' AND medium = 'oil') OR artistID IN (SELECT painterID FROM Paintings WHERE location = '241' AND medium = 'oil') ORDER BY fname ASC; 
SELECT  
SELECT medium, COUNT(*) FROM Paintings GROUP BY medium UNION SELECT medium, COUNT(*) FROM Sculptures GROUP BY medium ORDER BY medium ASC; 
SELECT AVG(height_mm) FROM Paintings WHERE medium = 'oil on canvas' UNION ALL SELECT AVG(height_mm) FROM Paintings WHERE medium = 'oil on panel' UNION ALL SELECT AVG(height_mm) FROM Paintings WHERE medium = 'oil on copper' UNION ALL SELECT AVG(height_mm) FROM Paintings WHERE medium = 'oil on wood' UNION ALL SELECT AVG(height_mm) FROM Paintings WHERE medium = 'oil on paper' UNION ALL SELECT AVG(height_mm) FROM Paintings WHERE medium = 'oil on canvas' UNION ALL SELECT AVG(height_mm) FROM Paintings WHERE medium = 'oil on panel' UNION ALL SELECT AVG(height_mm) FROM Paintings WHERE medium = 'oil on copper' UNION ALL SELECT AVG(height_mm) FROM Paintings WHERE medium = 'oil on wood' UNION ALL SELECT AVG(height_mm) FROM Paintings WHERE medium = 'oil on paper' UNION ALL SELECT AVG(height_mm) FROM Paintings WHERE medium = 'oil on canvas' UNION ALL SELECT
SELECT AVG(height_mm) FROM Paintings WHERE medium IN ('oil', 'acrylic', 'watercolor', 'tempera','mixed media', 'collage','mosaic', 'assemblage', 'paint','stencil', 'painting', 'painting on canvas', 'painting on paper', 'painting on wood', 'painting on metal', 'painting on glass', 'painting on stone', 'painting on fabric', 'painting on plastic', 'painting on cardboard', 'painting on paper', 'painting on wood', 'painting on metal', 'painting on glass', 'painting on stone', 'painting on fabric', 'painting on plastic', 'painting on cardboard', 'painting on paper', 'painting on wood', 'painting on metal', 'painting on glass', 'painting on stone', 'painting on fabric', 'painting on plastic
SELECT COUNT(paintingID) FROM Paintings WHERE year < 1900 GROUP BY location; 
SELECT COUNT(*) FROM Paintings WHERE year < 1900 AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown' AND location!= 'Unknown'
SELECT title FROM Paintings WHERE year > 1910 AND medium = 'oil'; 
SELECT title FROM Paintings WHERE medium = 'oil' AND year > 1910; 
SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 240'; 
SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 240'; 
SELECT DISTINCT title FROM Paintings WHERE height_mm > (SELECT height_mm FROM Paintings WHERE medium = 'canvas') ORDER BY title ASC; 
SELECT DISTINCT title FROM Paintings WHERE height_mm > (SELECT height_mm FROM Paintings WHERE medium = 'canvas') ORDER BY title ASC; 
SELECT DISTINCT paintingID FROM Paintings WHERE year < (SELECT year FROM Paintings WHERE location = 'gallery 240') ORDER BY paintingID; 
SELECT DISTINCT paintingID FROM Paintings WHERE year < (SELECT year FROM Paintings WHERE location = 'gallery 240') ORDER BY paintingID; 
SELECT paintingID FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings); 
SELECT paintingID FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings); 
SELECT lname, fname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE title LIKE '%female%'); 
SELECT lname ||'' || fname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE title LIKE '%female%'); 
SELECT title FROM Paintings GROUP BY title ORDER BY title ASC; 
SELECT title FROM Paintings GROUP BY title HAVING COUNT(*) = 1 ORDER BY title ASC; 
SELECT title FROM Paintings ORDER BY LENGTH(title) DESC; 
SELECT title FROM Paintings ORDER BY height_mm ASC; 
SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950; 
SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950; 
SELECT title FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222; 
SELECT title FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222; 
SELECT artistID FROM Artists WHERE birthYear < 1900 ORDER BY COUNT(paintingID) DESC LIMIT 1; 
SELECT artistID FROM Artists WHERE lname = 'Picasso' AND fname = 'Pablo' AND birthYear = 1881 AND deathYear = 1973; 
SELECT fname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(sculptorID) DESC LIMIT 1); 
SELECT fname FROM Artists WHERE sculptorID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID HAVING COUNT(sculptureID) = (SELECT COUNT(sculptureID) FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(sculptureID) DESC LIMIT 1)); 
SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800; 
SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800; 
SELECT location FROM Paintings WHERE year < 1885 OR year > 1930; 
SELECT location FROM Paintings WHERE year < 1885 OR year > 1930; 
SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000; 
SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000; 
SELECT location FROM Paintings WHERE mediumOn IN ('on panel', 'on canvas') ORDER BY location ASC; 
SELECT location FROM Paintings WHERE mediumOn IN ('on panel', 'on canvas') ORDER BY location ASC; 
SELECT location FROM Paintings WHERE year < 1885 AND year > 1930; 
SELECT location FROM Paintings WHERE year < 1885 AND year > 1930; 
SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'; 
SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241' 
SELECT MAX(height_mm), paintingID FROM Paintings WHERE year < 1900 GROUP BY paintingID; 
SELECT height_mm, paintingID FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC LIMIT 1; 
SELECT year, MAX(height_mm), MAX(width_mm) 
SELECT MAX(height_mm), MAX(width_mm) FROM Paintings GROUP BY year; 
SELECT AVG(p.height_mm), AVG(p.width_mm), a.lname, a.fname FROM Paintings p JOIN Artists a ON p.painterID = a.artistID GROUP BY a.lname, a.fname ORDER BY a.lname, a.fname 
SELECT  
SELECT fname, COUNT(paintingID) FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY fname HAVING COUNT(paintingID) >= 2; 
SELECT fname, COUNT(paintingID) FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY fname HAVING COUNT(paintingID) >= 2 ORDER BY fname ASC; 
SELECT deathYear FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE sculptureID IN (SELECT paintingID FROM Paintings WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE sculptureID IN (SELECT paintingID FROM Paintings WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE sculptureID IN (SELECT paintingID FROM Paintings WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE sculptureID IN (SELECT paintingID FROM Paintings WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE sculptureID IN (SELECT paintingID FROM Paintings WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE sculptureID IN (SELECT paintingID FROM Paintings WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE sculptureID IN (SELECT paintingID FROM Paintings WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE sculptureID IN (SELECT paintingID FROM Paintings WHERE artistID IN (
SELECT  
SELECT deathYear FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID HAVING COUNT(sculptureID) = (SELECT COUNT(sculptureID) FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(sculptureID) ASC LIMIT 1)); 
SELECT * FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID HAVING COUNT(sculptureID) = (SELECT COUNT(sculptureID) FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(sculptureID) ASC LIMIT 1)); 
SELECT paintingID, height_mm FROM Paintings WHERE location = '240' ORDER BY width_mm DESC LIMIT 1; 
SELECT height_mm, paintingID FROM Paintings WHERE location = '240' ORDER BY height_mm DESC LIMIT 1; 
SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240') ORDER BY paintingID ASC; 
SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = '240'); 
SELECT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900); 
SELECT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900) 
SELECT * FROM Artists ORDER BY COUNT(paintingID) DESC LIMIT 3; 
SELECT lname, fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil' GROUP BY painterID HAVING COUNT(*) > 1); 
SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year; 
SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year ASC; 
SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title; 
SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title ASC; 
SELECT lname, fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE paintingID NOT IN (SELECT sculptorID FROM Sculptures)); 
SELECT lname, fname FROM Artists WHERE artistID NOT IN (SELECT sculptorID FROM Sculptures) AND artistID IN (SELECT painterID FROM Paintings) 
SELECT location FROM Paintings WHERE year < 1885 AND mediumOn IS NULL; 
SELECT title FROM Paintings WHERE year < 1885 AND medium!= 'canvas' ORDER BY title ASC; 
SELECT COUNT(*) FROM race; 
SELECT COUNT(*) FROM race; 
SELECT winning_driver, winning_team FROM race ORDER BY winning_team ASC; 
SELECT DISTINCT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC; 
SELECT driver.Driver_Name 
SELECT * FROM race WHERE Winning_driver NOT IN (SELECT Driver_Name FROM driver WHERE Entrant = 'Junior Strous' AND Age < 25) AND Winning_driver IN (SELECT Driver_Name FROM driver WHERE Entrant = 'Junior Strous' AND Age < 25) ORDER BY Road ASC; 
SELECT DISTINCT Constructor FROM driver ORDER BY Age ASC; 
SELECT DISTINCT Constructor FROM driver ORDER BY Age ASC; 
SELECT DISTINCT entrant FROM driver WHERE age >= 20; 
SELECT DISTINCT Entrant FROM driver WHERE Age >= 20 ORDER BY Entrant ASC; 
SELECT MAX(age) FROM driver; 
SELECT MAX(age) AS max_age, MIN(age) AS min_age FROM driver; 
SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20; 
SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20; 
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC; 
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC; 
SELECT driver.Driver_Name, race.Race_Name FROM driver, race WHERE driver.Driver_ID = race.Driver_ID 
SELECT driver.Driver_Name, race.Race_Name FROM driver, race WHERE driver.Driver_ID = race.Driver_ID; 
SELECT driver.Driver_Name, COUNT(race.Road) FROM driver, race WHERE driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_Name ORDER BY COUNT(race.Road) DESC; 
SELECT COUNT(DISTINCT Road) FROM race WHERE Driver_ID = 1; 
SELECT age FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT age FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT driver.Driver_Name, driver.Age FROM driver, race WHERE driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_Name, driver.Age HAVING COUNT(*) >= 2 
SELECT driver.Driver_Name, driver.Age FROM driver, race WHERE driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_Name, driver.Age HAVING COUNT(*) >= 2; 
SELECT race.Race_Name FROM race, driver WHERE race.Driver_ID = driver.Driver_ID AND driver.Age >= 26 
SELECT DISTINCT race.Race_Name FROM race, driver WHERE race.Driver_ID = driver.Driver_ID AND driver.Age >= 26 ORDER BY race.Race_Name ASC; 
SELECT driver.Driver_Name FROM driver WHERE driver.Constructor!= 'Bugatti'; 
SELECT DISTINCT driver.Driver_Name FROM driver WHERE driver.Driver_ID NOT IN (SELECT driver.Driver_ID FROM driver WHERE driver.Constructor = 'Bugatti') ORDER BY driver.Driver_Name ASC; 
SELECT DISTINCT Constructor, COUNT(Driver_ID) FROM driver GROUP BY Constructor ORDER BY COUNT(Driver_ID) DESC; 
SELECT DISTINCT Constructor, COUNT(DISTINCT Driver_ID) FROM driver GROUP BY Constructor ORDER BY COUNT(DISTINCT Driver_ID) DESC; 
SELECT DISTINCT Engine FROM driver ORDER BY COUNT(Engine) DESC LIMIT 1; 
SELECT DISTINCT Engine FROM driver ORDER BY COUNT(Engine) DESC LIMIT 1; 
SELECT DISTINCT Engine FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM driver GROUP BY Engine HAVING COUNT(Driver_ID) >= 2) ORDER BY Engine ASC; 
SELECT DISTINCT Engine FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM driver WHERE Engine IN (SELECT Engine FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM driver WHERE Engine IN (SELECT Engine FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM driver WHERE Engine IN (SELECT Engine FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM driver WHERE Engine IN (SELECT Engine FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM driver WHERE Engine IN (SELECT Engine FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM driver WHERE Engine IN (SELECT Engine FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM driver WHERE Engine IN (SELECT Engine FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM driver
SELECT driver.Driver_Name FROM driver WHERE driver.Driver_ID NOT IN (SELECT race.Driver_ID FROM race); 
SELECT driver.Driver_Name FROM driver WHERE driver.Driver_ID NOT IN (SELECT race.Driver_ID FROM race); 
SELECT DISTINCT Constructor FROM driver WHERE Age < 20 OR Age > 30; 
SELECT DISTINCT Constructor FROM driver WHERE Age < 20 OR Age > 30; 
SELECT DISTINCT Constructor FROM race WHERE Winning_team IN (SELECT Constructor FROM race GROUP BY Constructor HAVING COUNT(*) > 1) ORDER BY Constructor ASC; 
SELECT DISTINCT 
SELECT DISTINCT driver.Driver_Name FROM driver, race WHERE driver.Driver_ID = race.Driver_ID AND race.Pole_Position IN ('James Hinchcliffe', 'Carl Skerlong') ORDER BY driver.Driver_Name ASC; 
SELECT DISTINCT driver.Driver_Name FROM driver WHERE driver.Driver_ID IN (SELECT race.Driver_ID FROM race WHERE race.Pole_Position = 'James Hinchcliffe') AND driver.Driver_ID IN (SELECT race.Driver_ID FROM race WHERE race.Pole_Position = 'Carl Skerlong') ORDER BY driver.Driver_Name ASC; 
SELECT driver.Driver_Name FROM driver WHERE driver.Driver_ID NOT IN (SELECT race.Driver_ID FROM race WHERE race.Pole_Position = 'James Hinchcliffe') ORDER BY driver.Driver_Name ASC; 
SELECT DISTINCT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe') ORDER BY Driver_Name ASC; 
SELECT COUNT(*) FROM languages; 
SELECT COUNT(*) FROM languages; 
SELECT name FROM languages ORDER BY name ASC; 
SELECT name FROM languages ORDER BY name ASC; 
SELECT name FROM languages WHERE name LIKE '%ish%'; 
SELECT name FROM languages WHERE name LIKE '%ish%'; 
SELECT name FROM countries ORDER BY overall_score DESC; 
SELECT name FROM countries ORDER BY overall_score DESC; 
SELECT AVG(c.overall_score) FROM countries c WHERE c.id IN (SELECT o.country_id FROM official_languages o WHERE o.language_id IN (SELECT l.id FROM languages l WHERE l.name = 'English')); 
SELECT AVG(cast(cast(countries.overall_score as real) as real)) FROM countries 
SELECT MAX(health_score), MIN(health_score) FROM countries WHERE name!= 'Norway'; 
SELECT MAX(health_score) AS max_health_score, MIN(health_score) AS min_health_score FROM countries WHERE id!= 1; 
SELECT COUNT(DISTINCT language_id) FROM official_languages; 
SELECT COUNT(DISTINCT language_id) FROM official_languages; 
SELECT name FROM countries ORDER BY education_score DESC; 
SELECT name FROM countries ORDER BY education_score DESC; 
SELECT name FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries); 
SELECT name FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries); 
SELECT countries.name, languages.name FROM countries, official_languages, languages WHERE countries.id = official_languages.country_id AND official_languages.language_id = languages.id ORDER BY countries.name, languages.name; 
SELECT countries.name, languages.name FROM countries, official_languages, languages WHERE countries.id = official_languages.country_id AND official_languages.language_id = languages.id 
SELECT l.name, COUNT(*) AS num_countries FROM official_languages ol JOIN languages l ON ol.language_id = l.id GROUP BY l.name ORDER BY num_countries DESC; 
SELECT l.name, COUNT(c.id) FROM official_languages ol JOIN languages l ON ol.language_id = l.id JOIN countries c ON ol.country_id = c.id GROUP BY l.name ORDER BY COUNT(c.id) DESC; 
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id GROUP BY l.name ORDER BY COUNT(c.id) DESC LIMIT 1; 
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id WHERE c.overall_score = (SELECT MAX(c2.overall_score) FROM countries c2) ORDER BY l.name ASC LIMIT 1; 
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id WHERE c.id IN (SELECT country_id FROM official_languages GROUP BY country_id HAVING COUNT(*) >= 2) ORDER BY l.name; 
SELECT l.name FROM official_languages ol JOIN languages l ON ol.language_id = l.id WHERE ol.country_id IN (SELECT country_id FROM official_languages GROUP BY country_id HAVING COUNT(*) > 1) GROUP BY l.name HAVING COUNT(*) > 1 ORDER BY l.name ASC; 
SELECT AVG(c.overall_score) FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id WHERE l.name = 'English'; 
SELECT AVG(c.overall_score) FROM countries c JOIN official_languages o ON c.id = o.country_id WHERE o.language_id = (SELECT id FROM languages WHERE name = 'English'); 
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id WHERE c.overall_score > 0 ORDER BY c.overall_score DESC LIMIT 3; 
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id WHERE c.overall_score > 0.5 ORDER BY c.overall_score DESC LIMIT 3; 
SELECT l.name, AVG(c.overall_score) AS avg_overall_score FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON l.id = ol.language_id GROUP BY l.name ORDER BY avg_overall_score DESC; 
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id GROUP BY l.id ORDER BY AVG(c.overall_score) DESC; 
SELECT name FROM countries WHERE id = (SELECT country_id FROM official_languages GROUP BY country_id ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT countries.name FROM countries INNER JOIN official_languages ON countries.id = official_languages.country_id INNER JOIN languages ON official_languages.language_id = languages.id WHERE languages.name = 'English' ORDER BY countries.overall_score DESC LIMIT 1; 
SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages); 
SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages); 
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages); 
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages); 
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id WHERE c.overall_score > 95 AND c.overall_score < 90; 
SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE overall_score > 95) AND country_id IN (SELECT id FROM countries WHERE overall_score < 90)) ORDER BY name ASC; 
SELECT DISTINCT 
SELECT DISTINCT 
SELECT  
SELECT DISTINCT 
SELECT feature_name FROM Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE property_id IN (SELECT property_id FROM Properties WHERE property_address_id IN (SELECT address_id FROM Addresses WHERE line_1_number_building IN (SELECT line_1_number_building FROM Addresses WHERE line_2_number_street IN (SELECT line_2_number_street FROM Addresses WHERE line_3_area_locality IN (SELECT line_3_area_locality FROM Addresses WHERE town_city IN (SELECT town_city FROM Addresses WHERE zip_postcode IN (SELECT zip_postcode FROM Addresses WHERE county_state_province IN (SELECT county_state_province FROM Addresses WHERE country IN (SELECT country FROM Addresses WHERE other_address_details IN (SELECT other_address_details FROM Addresses WHERE address_id IN (SELECT user_address_id FROM Users WHERE user_category_code IN (SELECT user_category_code FROM Users WHERE age_category_code IN (SELECT age_category_code FROM Users WHERE login_name IN (SELECT login_name FROM Users WHERE password IN (SELECT password FROM Users WHERE date_registered IN (SELECT date_registered FROM Users WHERE first_name IN (SELECT first_name FROM Users WHERE middle_name IN (SELECT middle_name FROM Users WHERE last_name IN (SELECT last_name FROM Users WHERE other_user_details IN (SELECT other_user_details FROM Users WHERE user_id IN (SELECT owner_user_id FROM Properties WHERE property_type_code IN (SELECT property_type_code FROM Properties WHERE date_on_market IN (SELECT date_on_market FROM Properties WHERE date_off_market IN (SELECT date_off_market FROM Properties WHERE property_name IN (SELECT property_name FROM Properties WHERE property_description IN (SELECT property_description FROM Properties WHERE garage_yn IN (SELECT garage_yn FROM Properties WHERE parking_lots IN (SELECT parking_lots FROM Properties WHERE room_count IN (SELECT room_count FROM Properties WHERE vendor_requested_price IN (SELECT vendor_requested_price FROM Properties WHERE price_min IN (SELECT price_min FROM Properties WHERE price_max IN (SELECT price_max FROM Properties WHERE other_property_details IN (SELECT other_property_details FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_value IN (SELECT feature_value FROM Property_Features WHERE property_feature_description IN (SELECT property_feature_description FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE property_id IN (SELECT property_id FROM Property_Photos WHERE photo_title IN (SELECT photo_title FROM Property_Photos WHERE photo_description IN (SELECT photo_description FROM Property_Photos WHERE photo_filename IN (SELECT photo_filename FROM Property_Photos WHERE property_id IN (SELECT property_id FROM Rooms WHERE room_number IN (SELECT room_number FROM Rooms WHERE room_type_code IN (SELECT room_type_code FROM Rooms WHERE room_size IN (SELECT room_size FROM Rooms WHERE other_room_details IN (SELECT other_room_details FROM Rooms WHERE property_id IN (SELECT property
SELECT feature_description FROM Features WHERE feature_name = 'rooftop'; 
SELECT feature_name, feature_description FROM Features WHERE feature_id IN (SELECT feature_id FROM Property_Features GROUP BY feature_id HAVING COUNT(*) > (SELECT COUNT(*) FROM Property_Features)) ORDER BY feature_name ASC; 
SELECT feature_name, feature_description FROM Features, Property_Features, Properties WHERE feature_id = feature_id AND property_id = property_id AND property_id IN (SELECT property_id FROM Property_Features GROUP BY property_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Property_Features)) ORDER BY feature_name ASC; 
SELECT MIN(room_count) FROM Rooms 
SELECT MIN(room_count) FROM Rooms; 
SELECT COUNT(property_id) FROM Properties WHERE parking_lots = '1' OR garage_yn = '1'; 
SELECT COUNT(*) FROM Properties WHERE garage_yn = 'Y' OR parking_lots = 'Y'; 
SELECT age_category_code FROM Users WHERE last_name LIKE '%Mother%' ORDER BY age_category_code; 
SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description LIKE '%Mother%'; 
SELECT first_name FROM Users WHERE user_id IN (SELECT user_id FROM User_Property_History GROUP BY user_id HAVING COUNT(*) = (SELECT COUNT(*) FROM User_Property_History GROUP BY user_id ORDER BY COUNT(*) DESC LIMIT 1)); 
SELECT first_name FROM Users WHERE user_id IN (SELECT user_id FROM User_Property_History WHERE property_id IN (SELECT property_id FROM Properties WHERE property_address_id IN (SELECT address_id FROM Addresses WHERE line_1_number_building IN (SELECT line_1_number_building FROM Addresses WHERE line_2_number_street IN (SELECT line_2_number_street FROM Addresses WHERE line_3_area_locality IN (SELECT line_3_area_locality FROM Addresses WHERE town_city IN (SELECT town_city FROM Addresses WHERE zip_postcode IN (SELECT zip_postcode FROM Addresses WHERE county_state_province IN (SELECT county_state_province FROM Addresses WHERE country IN (SELECT country FROM Addresses WHERE other_address_details IN (SELECT other_address_details FROM Addresses WHERE address_id IN (SELECT address_id FROM Properties WHERE property_id IN (SELECT property_id FROM User_Property_History WHERE user_id IN (SELECT user_id FROM Users WHERE age_category_code IN (SELECT age_category_code FROM Users WHERE user_category_code IN (SELECT user_category_code FROM Users WHERE user_address_id IN (SELECT user_address_id FROM Users WHERE is_buyer IN (SELECT is_buyer FROM Users WHERE is_seller IN (SELECT is_seller FROM Users WHERE login_name IN (SELECT login_name FROM Users WHERE password IN (SELECT password FROM Users WHERE date_registered IN (SELECT date_registered FROM Users WHERE first_name IN (SELECT first_name FROM Users WHERE middle_name IN (SELECT middle_name FROM Users WHERE last_name IN (SELECT last_name FROM Users WHERE other_user_details IN (SELECT other_user_details FROM Users WHERE user_id IN (SELECT user_id FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Features WHERE feature_name IN (SELECT feature_name FROM Features WHERE feature_description IN (SELECT feature_description FROM Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE property_feature_description IN (SELECT property_feature_description FROM Property_Features WHERE property_id IN (SELECT property_id FROM Property_Photos WHERE photo_seq IN (SELECT photo_seq FROM Property_Photos WHERE photo_title IN (SELECT photo_title FROM Property_Photos WHERE photo_description IN (SELECT photo_description FROM Property_Photos WHERE photo_filename IN (SELECT photo_filename FROM Property_Photos WHERE property_id IN (SELECT property_id FROM Rooms WHERE room_number IN (SELECT room_number FROM Rooms WHERE room_type_code IN (SELECT room_type_code FROM Rooms WHERE room_size IN (SELECT room_size FROM Rooms WHERE other_room_details IN (SELECT other_room_details FROM Rooms WHERE property_id IN (SELECT property_id FROM User_Property_History WHERE datestamp IN (SELECT datestamp FROM User_Property_History WHERE user_id IN (SELECT user_id FROM User_Searches WHERE search_seq IN (SELECT search_seq FROM User_Searches WHERE search_datetime IN (SELECT search_datetime
SELECT AVG(room_count) FROM Rooms WHERE feature_value = 'Garden' AND feature_id = 1; 
SELECT AVG(rooms.room_size) FROM Rooms rooms, Property_Features features WHERE features.property_feature_description = 'Garden' AND features.property_id = rooms.property_id; 
SELECT DISTINCT 
SELECT DISTINCT town_city FROM Addresses WHERE address_id IN (SELECT property_address_id FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Features WHERE feature_name = 'Swimming Pool'))) 
SELECT property_id, vendor_requested_price FROM Properties WHERE vendor_requested_price IS NOT NULL ORDER BY vendor_requested_price ASC LIMIT 1; 
SELECT property_id, vendor_requested_price FROM Properties WHERE vendor_requested_price IS NOT NULL ORDER BY vendor_requested_price LIMIT 1; 
SELECT AVG(room_count) FROM Rooms; 
SELECT AVG(rooms.room_size) FROM Rooms rooms 
SELECT COUNT(DISTINCT room_size) FROM Rooms 
SELECT COUNT(DISTINCT room_size) FROM Rooms 
SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) >= 2; 
SELECT user_id, search_seq FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) >= 2; 
SELECT MAX(search_datetime) FROM User_Searches; 
SELECT MAX(search_datetime) FROM User_Searches; 
SELECT search_datetime, search_string FROM User_Searches ORDER BY search_string DESC; 
SELECT search_string, search_datetime FROM User_Searches ORDER BY search_string DESC; 
SELECT DISTINCT 
SELECT DISTINCT 
SELECT u.user_category_code, u.user_id FROM Users u JOIN User_Searches us ON u.user_id = us.user_id WHERE us.search_seq = 1; 
SELECT user_id, user_category_code FROM Users WHERE user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) = 1); 
SELECT age_category_code FROM Users WHERE user_id = (SELECT user_id FROM User_Searches WHERE search_seq = 1); 
SELECT age_category_code FROM Users, User_Searches WHERE Users.user_id = User_Searches.user_id AND User_Searches.search_seq = (SELECT MIN(search_seq) FROM User_Searches); 
SELECT login_name FROM Users WHERE age_category_code = 'Senior Citizen' ORDER BY first_name ASC; 
SELECT login_name FROM Users WHERE age_category_code = 'Senior Citizen' ORDER BY first_name ASC; 
SELECT COUNT(*) FROM Users u JOIN User_Searches us ON u.user_id = us.user_id WHERE u.is_buyer = 'Y' AND us.search_string IS NOT NULL; 
SELECT COUNT(*) FROM Users u JOIN User_Searches us ON u.user_id = us.user_id WHERE u.is_buyer = 'Y' AND us.search_string LIKE '%buy%'; 
SELECT date_registered FROM Users WHERE login_name = 'ratione'; 
SELECT date_registered FROM Users WHERE login_name = 'ratione'; 
SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1'; 
SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = 'Y'; 
SELECT line_1_number_building, line_2_number_street, town_city 
SELECT line_1_number_building, line_2_number_street, town_city 
SELECT COUNT(DISTINCT p.property_id) FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id WHERE pf.property_feature_description IS NOT NULL AND pf.property_feature_description!= '' AND pf.property_feature_description!= 'N/A' AND pf.property_feature_description!= 'NA' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description!= 'n/a' AND pf.property_feature_description
SELECT COUNT(DISTINCT p.property_id) FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id WHERE pf.property_feature_description IS NOT NULL GROUP BY p.property_id HAVING COUNT(DISTINCT pf.feature_id) >= 2; 
SELECT property_id, COUNT(*) AS num_photos FROM Property_Photos GROUP BY property_id; 
SELECT property_id, COUNT(*) FROM Property_Photos GROUP BY property_id; 
SELECT Users.user_id, COUNT(Property_Photos.photo_seq) AS num_photos FROM Users JOIN Properties ON Users.user_id = Properties.owner_user_id JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY Users.user_id; 
SELECT user_id, COUNT(*) FROM Property_Photos GROUP BY user_id HAVING COUNT(*) > 0; 
SELECT SUM(price_max) FROM Properties P 
SELECT MAX(vendor_requested_price) FROM Properties WHERE property_type_code = 'Single Family Home' AND property_type_code = 'Condo' AND property_type_code = 'Townhouse' AND property_type_code = 'Multi-Family Home' AND property_type_code = 'Mobile Home' AND property_type_code = 'Co-op' AND property_type_code = 'Land' AND property_type_code = 'Commercial' AND property_type_code = 'Industrial' AND property_type_code = 'Agricultural' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vac
SELECT  
SELECT `datestamp`, `property_name` FROM `User_Property_History` ORDER BY `datestamp` ASC; 
SELECT property_type_description, property_type_code FROM Ref_Property_Types WHERE property_type_code = (SELECT property_type_code FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT property_type_code, property_type_description FROM Ref_Property_Types WHERE property_type_code IN (SELECT property_type_code FROM Properties GROUP BY property_type_code HAVING COUNT(*) = (SELECT COUNT(*) FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC LIMIT 1))  
SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'; 
SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'; 
SELECT room_size, COUNT(room_size) FROM Rooms GROUP BY room_size ORDER BY room_size ASC; 
SELECT room_size, COUNT(room_size) FROM Rooms GROUP BY room_size ORDER BY room_size ASC; 
SELECT country FROM Addresses WHERE user_address_id IN (SELECT user_address_id FROM Users WHERE first_name = 'Robbie') AND country NOT IN (SELECT country FROM Addresses WHERE user_address_id IN (SELECT user_address_id FROM Users WHERE first_name = 'Robbie') AND country IN (SELECT country FROM Addresses WHERE user_address_id IN (SELECT user_address_id FROM Users WHERE first_name = 'Robbie') AND country IN (SELECT country FROM Addresses WHERE user_address_id IN (SELECT user_address_id FROM Users WHERE first_name = 'Robbie') AND country IN (SELECT country FROM Addresses WHERE user_address_id IN (SELECT user_address_id FROM Users WHERE first_name = 'Robbie') AND country IN (SELECT country FROM Addresses WHERE user_address_id IN (SELECT user_address_id FROM Users WHERE first_name = 'Robbie') AND country IN (SELECT country FROM Addresses WHERE user_address_id IN (SELECT user_address_id FROM Users WHERE first_name = 'Robbie') AND country IN (SELECT country FROM Addresses WHERE user_address_id IN (SELECT user_address_id FROM Users WHERE first_name = 'Robbie') AND country IN (SELECT country FROM Addresses WHERE user_address_id IN (SELECT user_address_id FROM Users WHERE first_name = 'Robbie') AND country IN (SELECT country FROM Addresses WHERE user_address_id IN (SELECT user_address_id FROM Users WHERE first_name = 'Robbie') AND country IN (SELECT country FROM Addresses WHERE user_address_id IN (SELECT user_address_id FROM Users WHERE first_name = 'Robbie') AND country IN (SELECT country FROM Addresses WHERE user_address_id IN (SELECT user_address_id FROM Users WHERE first_name = 'Robbie') AND country IN (SELECT country FROM Addresses WHERE user_address_id IN (SELECT user_address_id FROM Users WHERE first_name = 'Robbie') AND country IN (SELECT country FROM Addresses WHERE user_address_id IN (SELECT user_address_id FROM Users WHERE first_name = 'Robbie') AND country IN (SELECT country FROM Addresses WHERE user_address_id IN (SELECT user_address_id FROM Users WHERE first_name = 'Robbie') AND country IN (SELECT country FROM Addresses WHERE user_address_id IN (SELECT user_address_id FROM Users WHERE first_name = 'Robbie') AND country IN (SELECT country FROM Addresses WHERE user_address_id IN (SELECT user_address_id FROM Users WHERE first_name = 'Robbie') AND country IN (SELECT country FROM Addresses WHERE user_address_id IN (SELECT user_address_id FROM Users WHERE first_name = 'Robbie') AND country IN (SELECT country FROM Addresses WHERE user_address_id IN (SELECT user_address_id FROM Users WHERE first_name = 'Robbie') AND country IN (SELECT country FROM Addresses WHERE user_address_id IN (SELECT user_address_id FROM Users WHERE first_name = 'Rob
SELECT country FROM Addresses 
SELECT first_name, middle_name, last_name 
SELECT CONCAT(u.first_name,'', u.middle_name,'', u.last_name) AS full_name 
SELECT search_string FROM User_Searches WHERE user_id NOT IN (SELECT user_id FROM User_Property_History WHERE property_id IN (SELECT property_id FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users))) 
SELECT DISTINCT 
SELECT last_name, user_id FROM Users WHERE user_id IN (SELECT user_id FROM User_Property_History GROUP BY user_id HAVING COUNT(*) >= 2) AND user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) <= 2) ORDER BY last_name ASC; 
SELECT Users.last_name, Users.user_id FROM Users 
SELECT COUNT(*) FROM bike WHERE weight > 780 
SELECT bike.product_name, bike.weight FROM bike ORDER BY bike.price ASC; 
SELECT heat, name, nation FROM cyclist ORDER BY heat DESC; 
SELECT MAX(weight) AS max_weight, MIN(weight) AS min_weight FROM bike 
SELECT AVG(bike.price) FROM bike WHERE bike.material = 'Carbon CC'; 
SELECT cyclist.name, cyclist.result FROM cyclist WHERE cyclist.nation!= 'Russia' ORDER BY cyclist.result DESC; 
SELECT DISTINCT bike.id, bike.product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id WHERE cyclists_own_bikes.purchase_year > 2015 
SELECT cyclist_id, product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id WHERE material = 'racing' GROUP BY cyclist_id HAVING COUNT(cyclist_id) >= 4 ORDER BY cyclist_id ASC; 
SELECT cyclist.id, cyclist.name FROM cyclist 
SELECT DISTINCT product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE nation = 'Russia' OR nation = 'Great Britain'; 
SELECT DISTINCT heat FROM cyclist ORDER BY heat ASC; 
SELECT COUNT(*) FROM `cyclist` WHERE `cyclist`.`id` NOT IN (SELECT `cyclist_id` FROM `cyclists_own_bikes` WHERE `cyclists_own_bikes`.`purchase_year` > 2015); 
SELECT DISTINCT bike.product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE cyclist.result > '4:21.558' AND bike.material = 'racing' AND bike.weight < 1000 
SELECT bike.product_name, bike.price FROM bike WHERE bike.id IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE bike_id IN (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE name = 'Bradley Wiggins')) AND cyclist_id IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE bike_id IN (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE name = 'Antonio Tauler'))))  
SELECT cyclist.name, cyclist.nation, cyclist.result 
SELECT product_name FROM bike WHERE material LIKE '%fiber%' 
SELECT cyclist_id, COUNT(*) FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY cyclist_id ASC; 
SELECT * FROM goods WHERE Id IN (SELECT Item FROM items WHERE Receipt IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE LastName = 'Smith' AND FirstName = 'John'))) ORDER BY Price DESC LIMIT 1; 
SELECT customers.Id, goods.Flavor FROM customers, goods, items, receipts WHERE customers.Id = receipts.CustomerId AND receipts.ReceiptNumber = items.Receipt AND items.Item = goods.Id AND goods.Food = 'cake' AND goods.Price = (SELECT MAX(goods.Price) FROM goods WHERE goods.Food = 'cake') ORDER BY customers.Id, goods.Flavor; 
SELECT goods.Flavor, goods.Price FROM goods, items, receipts, customers WHERE goods.Id = items.Item AND receipts.ReceiptNumber = items.Receipt AND receipts.CustomerId = customers.Id AND customers.LastName = 'Smith' AND customers.FirstName = 'John' AND goods.Food = 'cookie' AND goods.Price = (SELECT MIN(goods.Price) FROM goods, items, receipts, customers WHERE goods.Id = items.Item AND receipts.ReceiptNumber = items.Receipt AND receipts.CustomerId = customers.Id AND customers.LastName = 'Smith' AND customers.FirstName = 'John' AND goods.Food = 'cookie') ORDER BY goods.Price ASC; 
SELECT goods.Id, goods.Flavor FROM goods WHERE goods.Food = 'cookie' AND goods.Price = (SELECT MIN(goods.Price) FROM goods WHERE goods.Food = 'cookie'); 
SELECT goods.Id FROM goods WHERE goods.Flavor = 'apple'; 
SELECT customers.Id FROM customers, items, goods WHERE customers.Id = receipts.CustomerId AND receipts.ReceiptNumber = items.Receipt AND items.Item = goods.Id AND goods.Flavor = 'apple' AND goods.Food = 'apple' AND goods.Price = 0.0 
SELECT goods.Id FROM goods WHERE goods.Price < 3.0 
SELECT goods.Id FROM goods WHERE goods.Price < 3.0 
SELECT DISTINCT customers.Id FROM customers, items, goods WHERE customers.Id = receipts.CustomerId AND receipts.ReceiptNumber = items.Receipt AND items.Item = goods.Id AND goods.Flavor = 'lemon' AND goods.Food = 'cake' ORDER BY customers.Id ASC; 
SELECT DISTINCT customers.Id FROM customers, items, goods WHERE customers.Id = receipts.CustomerId AND receipts.ReceiptNumber = items.Receipt AND items.Item = goods.Id AND goods.Flavor = 'lemon' AND goods.Food = 'cake' AND goods.Price = 10.0 
SELECT COUNT(DISTINCT customers.Id) FROM customers 
SELECT customers.LastName, customers.FirstName, goods.Food, COUNT(receipts.ReceiptNumber) AS Count FROM customers JOIN receipts ON customers.Id = receipts.CustomerId JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id GROUP BY customers.LastName, customers.FirstName, goods.Food 
SELECT customers.Id FROM customers 
SELECT customers.Id FROM customers 
SELECT customers.LastName FROM customers JOIN receipts ON customers.Id = receipts.CustomerId JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'bakery' GROUP BY customers.LastName HAVING COUNT(*) > 10 
SELECT customers.LastName FROM customers JOIN receipts ON customers.Id = receipts.CustomerId JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'bakery' GROUP BY customers.LastName HAVING COUNT(*) > 10 
SELECT COUNT(DISTINCT g.Flavor) FROM goods g WHERE g.Food = 'Cake' AND g.Price < 10.0 
SELECT COUNT(DISTINCT Item) FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'cake') AND Receipt IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE LastName = 'Smith' AND FirstName = 'John')); 
SELECT goods.Flavor FROM goods WHERE goods.Food = 'Croissant' AND goods.Price < 10.0 
SELECT DISTINCT goods.Flavor FROM goods, items, receipts, customers WHERE goods.Id = items.Item AND receipts.ReceiptNumber = items.Receipt AND receipts.CustomerId = customers.Id AND customers.LastName = 'Doe' AND customers.FirstName = 'John' AND goods.Food = 'croissant' ORDER BY goods.Flavor ASC; 
SELECT DISTINCT Item FROM items WHERE Receipt IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId = 15); 
SELECT DISTINCT Item FROM items WHERE Receipt IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId = 15); 
SELECT  
SELECT  
SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM
SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (
SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE LastName = 'LOGAN') AND EXISTS (SELECT * FROM items WHERE Receipt = ReceiptNumber AND Item = 'Croissant') ORDER BY ReceiptNumber; 
SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE LastName = 'Logan') AND Item IN (SELECT Id FROM goods WHERE Flavor = 'croissant') ORDER BY ReceiptNumber ASC; 
SELECT receipts.ReceiptNumber, receipts.Date FROM receipts, items, goods WHERE receipts.CustomerId = items.Receipt AND items.Item = goods.Id AND goods.Price = (SELECT MAX(goods.Price) FROM goods) 
SELECT receipts.ReceiptNumber, receipts.Date FROM receipts 
SELECT Item FROM items GROUP BY Item ORDER BY COUNT(*) ASC LIMIT 1; 
SELECT Item, COUNT(*) AS Count FROM items GROUP BY Item ORDER BY Count ASC LIMIT 1 
SELECT COUNT(goods.Id) AS goods_count, goods.Food FROM goods GROUP BY goods.Food; 
SELECT COUNT(goods.Id) AS Count, goods.Food FROM goods GROUP BY goods.Food ORDER BY Count DESC; 
SELECT AVG(goods.Price) AS avg_price, goods.Food FROM goods GROUP BY goods.Food; 
SELECT AVG(goods.Price) FROM goods, items, receipts, customers WHERE goods.Id = items.Item AND receipts.ReceiptNumber = items.Receipt AND receipts.CustomerId = customers.Id AND goods.Food = 'Food' GROUP BY goods.Food 
SELECT goods.Id FROM goods WHERE goods.Flavor = 'Apricot' AND goods.Price < 5.0 
SELECT goods.Id FROM goods WHERE goods.Flavor = 'Apricot' AND goods.Price < 5.0 
SELECT goods.Flavor FROM goods WHERE goods.Price > 10.0 AND goods.Food = 'cake' ORDER BY goods.Price DESC; 
SELECT goods.Flavor 
SELECT DISTINCT goods.Id, goods.Price FROM goods WHERE goods.Price < (SELECT AVG(goods.Price) FROM goods); 
SELECT DISTINCT 
SELECT DISTINCT goods.Id FROM goods WHERE goods.Price < (SELECT goods.Price FROM goods WHERE goods.Flavor = 'Tart') AND goods.Flavor = 'Tart'; 
SELECT DISTINCT goods.Id FROM goods WHERE goods.Price < (SELECT goods.Price FROM goods WHERE goods.Flavor = 'Tart') AND goods.Flavor = 'Tart'; 
SELECT DISTINCT ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 13.0 
SELECT DISTINCT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT
SELECT receipts.Date 
SELECT receipts.Date FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Price > 15 AND receipts.CustomerId = 1 
SELECT goods.Id FROM goods WHERE goods.Id LIKE '%APP%'; 
SELECT goods.Id FROM goods WHERE goods.Id LIKE '%APP%'; 
SELECT * FROM goods WHERE Id LIKE '%70%' ORDER BY Price DESC LIMIT 1; 
SELECT goods.Id, goods.Price FROM goods WHERE goods.Id LIKE '%70%'; 
SELECT LastName FROM customers ORDER BY LastName ASC; 
SELECT LastName FROM customers ORDER BY LastName ASC; 
SELECT Item FROM items WHERE Receipt IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE LastName = 'Smith' AND FirstName = 'John')) ORDER BY ReceiptNumber, Ordinal; 
SELECT DISTINCT Item FROM items ORDER BY Item ASC; 
SELECT * FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'apple' AND Food = 'pie') OR ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'apple' AND Food = 'pie') AND ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId = 12))) ORDER BY ReceiptNumber ASC; 
SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'apple' AND Food = 'pie') OR ReceiptNumber IN (SELECT ReceiptNumber FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'apple' AND Food = 'pie') AND ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId = 12))) 
SELECT receipts.ReceiptNumber, receipts.Date FROM receipts WHERE receipts.Date = (SELECT MAX(receipts.Date) FROM receipts); 
SELECT ReceiptNumber, Date FROM receipts WHERE ReceiptNumber = (SELECT ReceiptNumber FROM receipts ORDER BY Date DESC LIMIT 1); 
SELECT ReceiptNumber FROM receipts WHERE Date = (SELECT MIN(Date) FROM receipts) OR EXISTS (SELECT * FROM items WHERE Receipt = ReceiptNumber AND Price > 10) 
SELECT ReceiptNumber FROM receipts WHERE Date = (SELECT MIN(Date) FROM receipts) OR Price > 10; 
SELECT goods.Id FROM goods WHERE goods.Price BETWEEN 3 AND 7 AND goods.Food IN ('Cookie', 'Cake') ORDER BY goods.Price DESC; 
SELECT goods.Id FROM goods WHERE goods.Price BETWEEN 3 AND 7 AND goods.Food IN ('Cookies', 'Cakes') ORDER BY goods.Price DESC; 
SELECT customers.FirstName, customers.LastName FROM customers JOIN receipts ON customers.Id = receipts.CustomerId WHERE receipts.Date = (SELECT MIN(receipts.Date) FROM receipts) 
SELECT customers.LastName, customers.FirstName FROM customers JOIN receipts ON customers.Id = receipts.CustomerId WHERE receipts.Date = (SELECT MIN(receipts.Date) FROM receipts) 
SELECT AVG(goods.Price) FROM goods WHERE goods.Flavor IN ('blackberry', 'blueberry'); 
SELECT AVG(goods.Price) FROM goods WHERE goods.Flavor IN ('blackberry', 'blueberry'); 
SELECT MIN(goods.Price) FROM goods WHERE goods.Flavor = 'cheese' AND goods.Food = 'pizza'; 
SELECT * FROM goods WHERE Flavor = 'cheese' AND Price = (SELECT MIN(Price) FROM goods WHERE Flavor = 'cheese'); 
SELECT  
SELECT  
SELECT MIN(Price), MAX(Price) FROM goods GROUP BY Food ORDER BY Food ASC; 
SELECT MIN(g.Price), MAX(g.Price) FROM goods g WHERE g.Food IS NOT NULL ORDER BY g.Food; 
SELECT Date 
SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(*) DESC LIMIT 3; 
SELECT customers.LastName, customers.FirstName, COUNT(receipts.ReceiptNumber) AS Count FROM customers JOIN receipts ON customers.Id = receipts.CustomerId GROUP BY customers.LastName, customers.FirstName ORDER BY Count DESC LIMIT 1; 
SELECT customers.Id, COUNT(receipts.ReceiptNumber) AS num_purchases 
SELECT COUNT(DISTINCT receipts.CustomerId) FROM receipts WHERE receipts.Date = '2020-01-01' UNION ALL SELECT COUNT(DISTINCT receipts.CustomerId) FROM receipts WHERE receipts.Date = '2020-01-02' UNION ALL SELECT COUNT(DISTINCT receipts.CustomerId) FROM receipts WHERE receipts.Date = '2020-01-03' UNION ALL SELECT COUNT(DISTINCT receipts.CustomerId) FROM receipts WHERE receipts.Date = '2020-01-04' UNION ALL SELECT COUNT(DISTINCT receipts.CustomerId) FROM receipts WHERE receipts.Date = '2020-01-05' UNION ALL SELECT COUNT(DISTINCT receipts.CustomerId) FROM receipts WHERE receipts.Date = '2020-01-06' UNION ALL SELECT COUNT(DISTINCT
SELECT Date, COUNT(*) FROM receipts GROUP BY Date ORDER BY Date ASC; 
SELECT customers.FirstName, customers.LastName FROM customers JOIN items ON customers.Id = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Flavor = 'Apple' AND goods.Food = 'Tart' ORDER BY customers.LastName, customers.FirstName; 
SELECT CONCAT(c.FirstName,'', c.LastName) AS FullName FROM customers c JOIN items i ON c.Id = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'apple' AND g.Food = 'Tart'  
SELECT goods.Id FROM goods WHERE goods.Price < (SELECT goods.Price FROM goods WHERE goods.Food = 'Croissant') AND goods.Food = 'Cookie'; 
SELECT customers.Id FROM customers 
SELECT customers.Id FROM customers 
SELECT goods.Id FROM goods WHERE goods.Price >= (SELECT AVG(goods.Price) FROM goods WHERE goods.Food = 'Tart') AND goods.Food = 'Cake'; 
SELECT goods.Id FROM goods WHERE goods.Price > (SELECT AVG(goods.Price) FROM goods); 
SELECT goods.Id FROM goods WHERE goods.Price > (SELECT AVG(goods.Price) FROM goods); 
SELECT goods.Id, goods.Flavor, goods.Food FROM goods, items, receipts WHERE goods.Id = items.Item AND receipts.ReceiptNumber = items.Receipt AND receipts.Date = '2019-01-01' ORDER BY goods.Price DESC; 
SELECT goods.Id, goods.Flavor, goods.Food FROM goods ORDER BY goods.Price DESC; 
SELECT customers.Id, goods.Flavor FROM customers, goods, items, receipts WHERE customers.Id = receipts.CustomerId AND receipts.ReceiptNumber = items.Receipt AND items.Item = goods.Id AND goods.Food = 'Cake' ORDER BY goods.Flavor; 
SELECT customers.Id, goods.Flavor FROM customers, goods, items, receipts WHERE customers.Id = receipts.CustomerId AND goods.Id = items.Item AND items.Receipt = receipts.ReceiptNumber AND goods.Food = 'cake' ORDER BY goods.Flavor 
SELECT * FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'chocolate') AND Receipt IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts GROUP BY ReceiptNumber HAVING COUNT(*) < 10)); 
SELECT Item FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'chocolate') GROUP BY Item HAVING COUNT(*) <= 10 ORDER BY COUNT(*) DESC; 
SELECT DISTINCT 
SELECT DISTINCT 
SELECT goods.Id, goods.Flavor, goods.Food, goods.Price, COUNT(receipts.ReceiptNumber) AS count 
SELECT Item, COUNT(*) AS Count FROM items GROUP BY Item ORDER BY Count DESC LIMIT 3; 
SELECT customers.Id FROM customers 
SELECT customers.Id FROM customers 
SELECT customers.Id FROM customers, receipts, items, goods WHERE customers.Id = receipts.CustomerId AND receipts.ReceiptNumber = items.Receipt AND items.Item = goods.Id AND (SELECT AVG(goods.Price) FROM goods, items WHERE goods.Id = items.Item AND receipts.ReceiptNumber = items.Receipt) > 5; 
SELECT customers.Id FROM customers 
SELECT receipts.Date 
SELECT receipts.Date FROM receipts 
SELECT COUNT(DISTINCT Driver_ID) FROM driver; 
SELECT COUNT(Driver_ID) FROM driver; 
SELECT COUNT(Driver_ID) FROM driver WHERE Points > 150 GROUP BY Make; 
SELECT make, COUNT(DISTINCT driver_id) FROM driver WHERE points > 150 GROUP BY make; 
SELECT avg(driver.age) FROM driver WHERE driver.make = 'Ferrari' GROUP BY driver.make; 
SELECT AVG(Driver.Age), Driver.Make FROM driver GROUP BY Driver.Make; 
SELECT AVG(Laps) FROM driver WHERE Age < 20; 
SELECT AVG(laps) FROM driver WHERE Age < 20; 
SELECT team_manager, team_sponsor FROM team_driver 
SELECT team.team, team.manager, team.sponsor FROM team ORDER BY car_owner; 
SELECT DISTINCT 
SELECT DISTINCT 
SELECT DISTINCT `team`.`Make` FROM `team` WHERE `team`.`Car_Owner` = 'Buddy Arrington' AND `team`.`Team_ID` IN (SELECT `team_driver`.`Team_ID` FROM `team_driver` WHERE `team_driver`.`Driver_ID` IN (SELECT `driver`.`Driver_ID` FROM `driver` WHERE `driver`.`Car_#` = 'Buddy Arrington' AND `driver`.`Country` IN (SELECT `country`.`Country_Id` FROM `country` WHERE `country`.`Official_native_language` = 'English'))) 
SELECT make FROM team WHERE car_owner = 'Buddy Arrington'; 
SELECT MAX(Points) AS Max_Points, MIN(Points) AS Min_Points FROM driver; 
SELECT MAX(Driver.Points) AS Highest_Points, MIN(Driver.Points) AS Lowest_Points FROM driver 
SELECT COUNT(*) FROM driver WHERE Points < 150; 
SELECT COUNT(*) FROM driver WHERE Points < 150; 
SELECT Driver FROM driver ORDER BY Age ASC; 
SELECT Driver FROM driver ORDER BY Age ASC; 
SELECT Driver FROM driver ORDER BY Points DESC; 
SELECT * FROM driver ORDER BY Points DESC; 
SELECT driver.Driver, country.Country FROM driver, country WHERE driver.Country = country.Country_Id 
SELECT driver.Driver, country.Country FROM driver, country WHERE driver.Country = country.Country_Id 
SELECT MAX(Driver.Points) FROM driver WHERE Driver.Country = (SELECT Country_Id FROM country WHERE Capital = 'Dublin')  
SELECT MAX(Driver.Points) FROM driver, country WHERE Driver.Country = country.Country_Id AND country.Capital = 'Dublin'; 
SELECT AVG(Driver.Age) FROM driver, country WHERE driver.Country = country.Country_Id AND country.Official_native_language = 'English' 
SELECT AVG(Driver.Age) FROM driver, country WHERE driver.Country = country.Country_Id AND country.Official_native_language = 'English'; 
SELECT country.Country FROM country INNER JOIN driver ON country.Country_Id = driver.Country WHERE driver.Points > 150 
SELECT country.Country FROM country, driver WHERE country.Country_Id = driver.Country AND driver.Points > 150 
SELECT country.Capital FROM driver, country WHERE driver.Country = country.Country_Id AND driver.Points = (SELECT MAX(driver.Points) FROM driver); 
SELECT Capital FROM country WHERE Country_Id = (SELECT Country FROM driver WHERE Driver_ID = (SELECT Driver_ID FROM team_driver WHERE Team_ID = (SELECT Team_ID FROM team WHERE Team = 'Mercedes'))) 
SELECT DISTINCT 
SELECT make, COUNT(DISTINCT driver_id) FROM driver GROUP BY make ORDER BY make ASC; 
SELECT DISTINCT 
SELECT make FROM driver GROUP BY make ORDER BY COUNT(make) DESC LIMIT 1; 
SELECT DISTINCT 
SELECT DISTINCT 
SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver); 
SELECT team.Team FROM team LEFT JOIN team_driver ON team.Team_ID = team_driver.Team_ID LEFT JOIN driver ON team_driver.Driver_ID = driver.Driver_ID WHERE driver.Driver IS NULL; 
SELECT country.Country FROM country 
SELECT DISTINCT country.Country FROM country 
SELECT SUM(Driver.Points), AVG(Driver.Points) FROM driver 
SELECT SUM(Driver.Points), AVG(Driver.Points) FROM driver 
SELECT DISTINCT country.Country FROM country LEFT JOIN driver ON country.Country_Id = driver.Country WHERE driver.Country IS NULL; 
SELECT DISTINCT country.Country FROM country LEFT JOIN driver ON country.Country_Id = driver.Country WHERE driver.Driver_ID IS NULL; 
SELECT team_manager, team_sponsor FROM team WHERE team_driver_count = (SELECT MAX(team_driver_count) FROM team); 
SELECT team_manager, team_sponsor FROM team WHERE team_driver_count = (SELECT MAX(team_driver_count) FROM team); 
SELECT team_manager, team_car_owner 
SELECT team.manager, team.car_owner FROM team INNER JOIN team_driver ON team.team_id = team_driver.team_id INNER JOIN driver ON team_driver.driver_id = driver.driver_id WHERE team.team_id IN (SELECT team_id FROM team_driver GROUP BY team_id HAVING COUNT(driver_id) >= 2) ORDER BY team.team_id ASC; 
SELECT COUNT(*) FROM institution; 
SELECT COUNT(*) FROM institution; 
SELECT Name FROM institution ORDER BY Name ASC; 
SELECT Name FROM institution ORDER BY Name ASC; 
SELECT Name FROM institution ORDER BY Founded ASC; 
SELECT Name FROM institution ORDER BY Founded DESC; 
SELECT City, Province FROM institution 
SELECT City, Province FROM institution 
SELECT MAX(Enrollment) AS MaxEnrollment, MIN(Enrollment) AS MinEnrollment FROM institution; 
SELECT MAX(Enrollment) AS MaxEnrollment, MIN(Enrollment) AS MinEnrollment FROM institution; 
SELECT DISTINCT affiliation FROM institution WHERE city!= 'Vancouver'; 
SELECT DISTINCT Affiliation FROM institution WHERE City!= 'Vancouver' ORDER BY Affiliation ASC; 
SELECT DISTINCT institution.Stadium FROM institution, Championship WHERE institution.Institution_ID = Championship.Institution_ID ORDER BY institution.Capacity DESC; 
SELECT Stadium FROM institution ORDER BY Capacity DESC; 
SELECT Stadium FROM institution WHERE Enrollment = (SELECT MAX(Enrollment) FROM institution); 
SELECT Stadium FROM institution WHERE Enrollment = (SELECT MAX(Enrollment) FROM institution); 
SELECT institution.Name, Championship.Nickname FROM institution, Championship WHERE institution.Institution_ID = Championship.Institution_ID; 
SELECT institution.Name, Championship.Nickname FROM institution, Championship WHERE institution.Institution_ID = Championship.Institution_ID; 
SELECT Nickname FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution WHERE Enrollment = (SELECT MIN(Enrollment) FROM institution)); 
SELECT Nickname FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution WHERE Enrollment = (SELECT MIN(Enrollment) FROM institution)); 
SELECT Name FROM institution ORDER BY Number_of_Championships DESC; 
SELECT institution.Name FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID ORDER BY Championship.Number_of_Championships DESC; 
SELECT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship); 
SELECT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship WHERE Number_of_Championships > 0) 
SELECT SUM(Number_of_Championships) FROM Championship WHERE Affiliation = 'Public' AND Institution_ID IN (SELECT Institution_ID FROM institution WHERE Affiliation = 'Public'); 
SELECT SUM(Number_of_Championships) FROM Championship WHERE Affiliation = 'Public'; 
SELECT DISTINCT `Affiliation` FROM `institution` ORDER BY `Affiliation` ASC; 
SELECT Institution_ID, Affiliation, COUNT(*) FROM institution GROUP BY Institution_ID, Affiliation; 
SELECT affiliation FROM institution GROUP BY affiliation ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT affiliation FROM institution GROUP BY affiliation ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT DISTINCT 
SELECT DISTINCT 
SELECT Championship.Nickname FROM institution, Championship WHERE institution.Institution_ID = Championship.Institution_ID ORDER BY Capacity DESC; 
SELECT `Nickname` FROM `Championship` ORDER BY `Capacity` DESC; 
SELECT SUM(Enrollment) FROM institution WHERE City IN ('Vancouver', 'Calgary') OR City IN ('Vancouver', 'Calgary') AND City IN ('Vancouver', 'Calgary') OR City IN ('Vancouver', 'Calgary') AND City IN ('Vancouver', 'Calgary') OR City IN ('Vancouver', 'Calgary') AND City IN ('Vancouver', 'Calgary') OR City IN ('Vancouver', 'Calgary') AND City IN ('Vancouver', 'Calgary') OR City IN ('Vancouver', 'Calgary') AND City IN ('Vancouver', 'Calgary') OR City IN ('Vancouver', 'Calgary') AND City IN ('Vancouver', 'Calgary') OR City IN ('Vancouver', 'Calgary') AND City IN
SELECT Enrollment FROM institution WHERE City = 'Vancouver' OR City = 'Calgary'; 
SELECT DISTINCT Province FROM institution WHERE Founded < 1920 OR Founded > 1950; 
SELECT DISTINCT Province FROM institution WHERE Founded < 1920 AND EXISTS (SELECT * FROM institution WHERE Founded > 1950 AND Province = institution.Province) 
SELECT DISTINCT Province FROM institution; 
SELECT DISTINCT Province FROM institution; 
SELECT * FROM Warehouses; 
SELECT * FROM Warehouses; 
SELECT DISTINCT Contents FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses WHERE Location = 'New York'); 
SELECT DISTINCT Contents FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses WHERE Location = 'New York'); 
SELECT Contents FROM Boxes WHERE Value > 150.0 
SELECT Contents FROM Boxes WHERE Value > 150; 
SELECT Warehouses.Code, AVG(Boxes.Value) FROM Warehouses, Boxes WHERE Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code; 
SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse; 
SELECT AVG(Value), SUM(Value) FROM Boxes; 
SELECT AVG(Value), SUM(Value) FROM Boxes; 
SELECT AVG(Capacity), SUM(Capacity) FROM Warehouses; 
SELECT AVG(Capacity), SUM(Capacity) FROM Warehouses; 
SELECT AVG(Value), MAX(Value) FROM Boxes GROUP BY Contents; 
SELECT AVG(Value), MAX(Value) FROM Boxes GROUP BY Contents; 
SELECT Contents FROM Boxes WHERE Code IN (SELECT Code FROM Boxes GROUP BY Contents HAVING SUM(Value) = (SELECT MAX(SUM(Value)) FROM Boxes GROUP BY Contents)) ORDER BY Contents ASC; 
SELECT Contents FROM Boxes WHERE Value = (SELECT MAX(Value) FROM Boxes); 
SELECT AVG(Value) FROM Boxes; 
SELECT AVG(Value) FROM Boxes; 
SELECT DISTINCT Contents FROM Boxes; 
SELECT DISTINCT Contents FROM Boxes; 
SELECT COUNT(DISTINCT Contents) FROM Boxes; 
SELECT DISTINCT Contents FROM Boxes; 
SELECT DISTINCT Location FROM Warehouses; 
SELECT DISTINCT Location FROM Warehouses 
SELECT Boxes.Code FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York'); 
SELECT Boxes.Code FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York'); 
SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York')) 
SELECT SUM(Value) FROM Boxes WHERE Contents IN ('Chicago', 'New York') OR Contents IN ('Chicago', 'New York') AND Value > 1000 
SELECT DISTINCT 
SELECT DISTINCT 
SELECT DISTINCT 
SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York') AND Contents NOT IN (SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York')) ORDER BY Contents ASC; 
SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' AND Code NOT IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')); 
SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' AND Code NOT IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')); 
SELECT * FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents IN ('Rocks', 'Scissors')); 
SELECT DISTINCT Warehouse FROM Boxes WHERE Contents IN ('Rocks', 'Scissors'); 
SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents IN ('Rocks', 'Scissors')); 
SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents IN ('Rocks', 'Scissors')); 
SELECT Boxes.Code, Boxes.Contents FROM Boxes ORDER BY Boxes.Value; 
SELECT Boxes.Code, Boxes.Contents FROM Boxes ORDER BY Boxes.Value; 
SELECT Boxes.Code, Boxes.Contents FROM Boxes WHERE Boxes.Value = (SELECT MIN(Boxes.Value) FROM Boxes); 
SELECT Boxes.Code, Boxes.Contents FROM Boxes WHERE Boxes.Value = (SELECT MIN(Boxes.Value) FROM Boxes); 
SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes); 
SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes); 
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents; 
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents ASC; 
SELECT Boxes.Code FROM Boxes WHERE Boxes.Value > (SELECT Boxes.Value FROM Boxes WHERE Boxes.Contents = 'Rocks') AND Boxes.Contents!= 'Rocks'; 
SELECT Boxes.Code 
SELECT Boxes.Code, Boxes.Contents FROM Boxes WHERE Boxes.Value > (SELECT Boxes.Value FROM Boxes WHERE Boxes.Contents = 'Scissors') AND Boxes.Contents!= 'Scissors'; 
SELECT Boxes.Code, Boxes.Contents FROM Boxes WHERE Boxes.Value > (SELECT MAX(Boxes.Value) FROM Boxes WHERE Boxes.Contents = 'Scissors') AND Boxes.Contents!= 'Scissors'; 
SELECT SUM(Value) FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses ORDER BY Capacity DESC LIMIT 1); 
SELECT SUM(Value) FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses WHERE Capacity = (SELECT MAX(Capacity) FROM Warehouses)); 
SELECT Warehouses.Code, AVG(Boxes.Value) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE AVG(Boxes.Value) > 150 GROUP BY Warehouses.Code; 
SELECT AVG(Value) FROM Boxes WHERE Value > 150 GROUP BY Warehouse; 
SELECT Contents, SUM(Value), COUNT(*) FROM Boxes GROUP BY Contents; 
SELECT Contents, SUM(Value), COUNT(*) FROM Boxes GROUP BY Contents; 
SELECT Location, SUM(Capacity) AS TotalCapacity, AVG(Capacity) AS AverageCapacity, MAX(Capacity) AS MaxCapacity FROM Warehouses GROUP BY Location; 
SELECT Location, SUM(Capacity), AVG(Capacity), MAX(Capacity) FROM Warehouses GROUP BY Location; 
SELECT SUM(W.Capacity) FROM Warehouses W 
SELECT SUM(W.Capacity) FROM Warehouses W; 
SELECT Warehouse, MAX(Value) FROM Boxes GROUP BY Warehouse; 
SELECT W.Location, MAX(B.Value) FROM Warehouses W, Boxes B WHERE W.Code = B.Warehouse GROUP BY W.Location HAVING MAX(B.Value) ORDER BY W.Location LIMIT 1 
SELECT Warehouses.Code, COUNT(Boxes.Code) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code; 
SELECT COUNT(*) FROM Boxes WHERE Warehouse = 1; 
SELECT COUNT(DISTINCT Location) FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks'); 
SELECT COUNT(DISTINCT Boxes.Warehouse) FROM Boxes WHERE Boxes.Contents = 'Rocks'; 
SELECT Boxes.Code, Warehouses.Location FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Boxes.Contents = 'Apples' AND Warehouses.Location = 'New York' ORDER BY Boxes.Code; 
SELECT Boxes.Code, Warehouses.Location FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code 
SELECT Boxes.Code FROM Boxes WHERE Boxes.Warehouse = (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location = 'Chicago') AND Boxes.Contents = 'Widgets' ORDER BY Boxes.Code ASC; 
SELECT Boxes.Code FROM Warehouses, Boxes WHERE Warehouses.Location = 'Chicago' AND Boxes.Warehouse = Warehouses.Code 
SELECT Warehouses.Code, COUNT(Boxes.Code) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code; 
SELECT Warehouse, COUNT(*) FROM Boxes GROUP BY Warehouse; 
SELECT Warehouse, COUNT(DISTINCT Contents) FROM Boxes GROUP BY Warehouse; 
SELECT Warehouse, COUNT(DISTINCT Contents) FROM Boxes GROUP BY Warehouse; 
SELECT Code FROM Warehouses WHERE Capacity > (SELECT SUM(Value) FROM Boxes WHERE Warehouse = Warehouses.Code) 
SELECT Code FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes GROUP BY Warehouse HAVING COUNT(*) > Capacity); 
SELECT SUM(Value) FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago'); 
SELECT SUM(Value) FROM Boxes WHERE Contents NOT IN (SELECT Contents FROM Boxes WHERE Location = 'Chicago') AND Contents IN (SELECT Contents FROM Boxes WHERE Location = 'Chicago') AND Contents IN (SELECT Contents FROM Boxes WHERE Location = 'Chicago') AND Contents IN (SELECT Contents FROM Boxes WHERE Location = 'Chicago') AND Contents IN (SELECT Contents FROM Boxes WHERE Location = 'Chicago') AND Contents IN (SELECT Contents FROM Boxes WHERE Location = 'Chicago') AND Contents IN (SELECT Contents FROM Boxes WHERE Location = 'Chicago') AND Contents IN (SELECT Contents FROM Boxes WHERE Location = 'Chicago') AND Contents IN (SELECT Contents FROM Boxes WHERE Location = 'Chicago') AND Contents IN (SELECT Contents FROM Boxes WHERE Location = 'Chicago') AND Contents IN (SELECT Contents FROM Boxes WHERE Location = 'Chicago') AND Contents IN (SELECT Contents FROM
SELECT university_name, city, state FROM university ORDER BY university_name ASC; 
SELECT university_name, city, state FROM university ORDER BY university_name ASC; 
SELECT COUNT(*) FROM university WHERE State IN ('Illinois', 'Ohio'); 
SELECT COUNT(*) FROM university WHERE State IN ('Illinois', 'Ohio'); 
SELECT MAX(Enrollment) AS Max_Enrollment, AVG(Enrollment) AS Avg_Enrollment, MIN(Enrollment) AS Min_Enrollment FROM university; 
SELECT MAX(Enrollment) AS Max_Enrollment, AVG(Enrollment) AS Avg_Enrollment, MIN(Enrollment) AS Min_Enrollment FROM university; 
SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university); 
SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university); 
SELECT DISTINCT Home_Conference FROM university ORDER BY Home_Conference ASC; 
SELECT DISTINCT Home_Conference FROM university; 
SELECT Home_Conference, COUNT(University_ID) FROM university GROUP BY Home_Conference; 
SELECT COUNT(DISTINCT University_ID) FROM university WHERE Home_Conference = 'Big Ten Conference' 
SELECT State, COUNT(University_ID) AS num_universities FROM university GROUP BY State ORDER BY num_universities DESC LIMIT 1; 
SELECT State FROM university GROUP BY State ORDER BY COUNT(University_ID) DESC LIMIT 1; 
SELECT DISTINCT Home_Conference FROM university WHERE Enrollment > 2000 
SELECT DISTINCT Home_Conference FROM university WHERE Enrollment > 2000; 
SELECT Home_Conference FROM university WHERE Enrollment = (SELECT MIN(Enrollment) FROM university); 
SELECT DISTINCT Home_Conference FROM university ORDER BY Enrollment ASC LIMIT 1; 
SELECT major_name, major_code FROM major ORDER BY major_code; 
SELECT major_name, major_code FROM major ORDER BY major_code; 
SELECT major.Major_Name, major_ranking.Rank 
SELECT major_ranking.Rank, major.Major_Name FROM major_ranking JOIN major ON major_ranking.Major_ID = major.Major_ID WHERE major.Major_Name = 'Augustana College' ORDER BY major_ranking.Rank ASC; 
SELECT university.University_Name, university.City, university.State FROM university INNER JOIN major_ranking ON university.University_ID = major_ranking.University_ID INNER JOIN major ON major_ranking.Major_ID = major.Major_ID WHERE major.Major_Name = 'Accounting' AND major_ranking.Rank = 1; 
SELECT university.University_Name, university.City, university.State FROM university INNER JOIN major_ranking ON university.University_ID = major_ranking.University_ID INNER JOIN major ON major_ranking.Major_ID = major.Major_ID WHERE major.Major_Name = 'Accounting' AND major_ranking.Rank = 1; 
SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID HAVING COUNT(Major_ID) = (SELECT COUNT(Major_ID) FROM major_ranking WHERE Rank = 1 GROUP BY Major_ID HAVING COUNT(Major_ID) = (SELECT COUNT(Major_ID) FROM major_ranking WHERE Rank = 1 GROUP BY Major_ID ORDER BY COUNT(Major_ID) DESC LIMIT 1)) ORDER BY COUNT(Major_ID) DESC LIMIT 1); 
SELECT university.University_Name 
SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1) 
SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1) 
SELECT university.University_Name FROM university INNER JOIN major_ranking ON university.University_ID = major_ranking.University_ID WHERE major_ranking.Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name IN ('Accounting', 'Urban Education')) ORDER BY university.University_Name ASC 
SELECT DISTINCT university.University_Name FROM university 
SELECT university.University_Name, overall_ranking.Rank FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE university.State = 'Wisconsin' ORDER BY overall_ranking.Rank ASC; 
SELECT university.University_Name, overall_ranking.Rank 
SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Reputation_point = (SELECT MAX(Reputation_point) FROM overall_ranking)); 
SELECT University_Name FROM university WHERE University_ID = (SELECT University_ID FROM overall_ranking WHERE Reputation_point + Research_point + Citation_point = (SELECT MAX(Reputation_point + Research_point + Citation_point) FROM overall_ranking)); 
SELECT University_Name FROM university ORDER BY Reputation_point ASC; 
SELECT University_Name FROM university ORDER BY Reputation_point ASC; 
SELECT University_Name FROM university 
SELECT University_Name FROM university 
SELECT SUM(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5); 
SELECT SUM(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5); 
SELECT university.University_Name, overall_ranking.Citation_point FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE overall_ranking.Rank <= 3 AND overall_ranking.Rank >= 3 
SELECT university.University_Name, overall_ranking.Citation_point 
SELECT DISTINCT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(*) > 2; 
SELECT DISTINCT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(*) > 2; 
SELECT Title FROM Movies WHERE Rating IS NULL; 
SELECT Title FROM Movies WHERE Rating IS NULL; 
SELECT Title FROM Movies WHERE Rating = 'G'; 
SELECT Title FROM Movies WHERE Rating = 'G'; 
SELECT Title FROM Movies WHERE Code = (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon'); 
SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon'); 
SELECT Movies.Title, MovieTheaters.Name FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie 
SELECT Movies.Title, MovieTheaters.Name FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie 
SELECT COUNT(*) FROM Movies WHERE Rating = 'G'; 
SELECT COUNT(*) FROM Movies WHERE Rating = 'G'; 
SELECT COUNT(Movie) FROM MovieTheaters 
SELECT COUNT(MovieTheaters.Code) FROM MovieTheaters 
SELECT COUNT(DISTINCT m.Code) FROM Movies m JOIN MovieTheaters mt ON m.Code = mt.Movie; 
SELECT COUNT(DISTINCT Movies.Title) FROM Movies 
SELECT COUNT(DISTINCT MovieTheaters.Code) FROM MovieTheaters; 
SELECT COUNT(DISTINCT MovieTheaters.Code) FROM MovieTheaters; 
SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%'; 
SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%'; 
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating IN ('G', 'PG')) 
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating IN ('G', 'PG')) 
SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name IN ('Odeon', 'Imperial')) 
SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name IN ('Odeon', 'Imperial')) 
SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name IN ('Odeon', 'Imperial')); 
SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Code IN (SELECT Code FROM MovieTheaters WHERE Name = 'Odeon'), (SELECT Code FROM MovieTheaters WHERE Name = 'Imperial')); 
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon') ORDER BY Title ASC; 
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon') ORDER BY Title ASC; 
SELECT Title FROM Movies ORDER BY Title ASC; 
SELECT Title FROM Movies ORDER BY Title ASC; 
SELECT Title FROM Movies ORDER BY Rating DESC; 
SELECT Title FROM Movies ORDER BY Rating DESC; 
SELECT Name FROM MovieTheaters WHERE Code IN (SELECT Movie FROM Movies GROUP BY Movie ORDER BY COUNT(Movie) DESC LIMIT 1); 
SELECT Name FROM MovieTheaters WHERE Code IN (SELECT Movie FROM Movies GROUP BY Movie HAVING COUNT(Movie) = (SELECT COUNT(Movie) FROM Movies GROUP BY Movie ORDER BY COUNT(Movie) DESC LIMIT 1)); 
SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters GROUP BY Movie HAVING COUNT(Movie) = (SELECT COUNT(Movie) FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(Movie) DESC LIMIT 1)); 
SELECT Name FROM MovieTheaters WHERE Code IN (SELECT Movie FROM MovieTheaters GROUP BY Movie HAVING COUNT(Movie) = (SELECT COUNT(Movie) FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(Movie) DESC LIMIT 1)) ORDER BY Name ASC; 
SELECT Rating, COUNT(*) FROM Movies GROUP BY Rating; 
SELECT Rating, COUNT(*) FROM Movies GROUP BY Rating; 
SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL; 
SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL; 
SELECT Name FROM MovieTheaters WHERE Movie IS NOT NULL; 
SELECT Name FROM MovieTheaters WHERE Code IN (SELECT Code FROM Movies) 
SELECT Name FROM MovieTheaters WHERE Movie IS NULL 
SELECT Name FROM MovieTheaters WHERE Movie IS NULL; 
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G')  
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G') ORDER BY Name ASC; 
SELECT Title FROM Movies 
SELECT Title FROM Movies 
SELECT DISTINCT Rating FROM Movies; 
SELECT DISTINCT Rating FROM Movies ORDER BY Rating ASC; 
SELECT * FROM Movies WHERE Rating IS NULL; 
SELECT * FROM Movies WHERE Rating IS NULL; 
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters); 
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters); 
SELECT Package.Recipient, Package.Weight 
SELECT Client.Name FROM Client WHERE Client.AccountNumber IN (SELECT Package.Recipient FROM Package WHERE Package.Weight = (SELECT MAX(Package.Weight) FROM Package))  
SELECT SUM(P.Weight) FROM Package P WHERE P.Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')  
SELECT SUM(P.Weight) FROM Package P, Shipment S, Employee E WHERE P.Sender = E.EmployeeID AND E.Name = 'Leo Wong' AND P.Shipment = S.ShipmentID AND S.Manager = E.EmployeeID; 
SELECT Position FROM Employee WHERE Name = 'Amy Wong'; 
SELECT Position FROM Employee WHERE Name = 'Amy Wong'; 
SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela'; 
SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela'; 
SELECT AVG(Salary) FROM Employee WHERE Position = 'Intern' 
SELECT AVG(Salary) FROM Employee WHERE Position = 'Intern'; 
SELECT Level FROM Has_Clearance WHERE Employee = (SELECT EmployeeID FROM Employee WHERE Name = 'Physician') AND Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Earth') 
SELECT Level FROM Has_Clearance WHERE Employee = (SELECT EmployeeID FROM Employee WHERE Name = 'Dr. Smith' AND Position = 'Physician') AND Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Earth') AND Level = (SELECT Level FROM Has_Clearance WHERE Employee = (SELECT EmployeeID FROM Employee WHERE Name = 'Dr. Smith' AND Position = 'Physician') AND Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Earth') AND Level = (SELECT Level FROM Has_Clearance WHERE Employee = (SELECT EmployeeID FROM Employee WHERE Name = 'Dr. Smith' AND Position = 'Physician') AND Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Earth') AND Level = (SELECT Level FROM Has_Clearance WHERE Employee = (SELECT EmployeeID FROM Employee WHERE Name = 'Dr. Smith' AND Position = 'Physician') AND Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Earth') AND Level = (SELECT Level FROM Has_Clearance WHERE Employee = (SELECT EmployeeID FROM Employee WHERE Name = 'Dr. Smith' AND Position = 'Physician') AND Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Earth') AND Level = (SELECT Level FROM Has_Clearance WHERE Employee = (SELECT EmployeeID FROM Employee WHERE Name = 'Dr. Smith' AND Position = 'Physician') AND Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Earth') AND Level = (SELECT Level FROM Has_Clearance WHERE Employee = (SELECT EmployeeID FROM Employee WHERE Name = 'Dr. Smith' AND Position =
SELECT PackageNumber FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') ORDER BY PackageNumber ASC; 
SELECT COUNT(*) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT PackageNumber FROM Package WHERE Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') ORDER BY PackageNumber ASC; 
SELECT PackageNumber FROM Package WHERE Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT * FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') OR Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT DISTINCT PackageNumber FROM Package WHERE Sender = 1 OR Recipient = 1 
SELECT COUNT(*) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Ogden Wernstrom') AND Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT COUNT(*) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Ogden Wernstrom') AND Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT Package.Contents FROM Package WHERE Package.Sender = (SELECT Client.AccountNumber FROM Client WHERE Client.Name = 'John Zoidfarb') AND Package.Recipient = (SELECT Client.AccountNumber FROM Client WHERE Client.Name = 'John Zoidfarb'); 
SELECT Package.Contents FROM Package WHERE Package.Sender = (SELECT Client.AccountNumber FROM Client WHERE Client.Name = 'John Zoidfarb') AND Package.Recipient = (SELECT Client.AccountNumber FROM Client WHERE Client.Name = 'John Zoidfarb'); 
SELECT PackageNumber, Weight FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name LIKE '%John%') ORDER BY Weight DESC LIMIT 1; 
SELECT PackageNumber, Weight FROM Package WHERE Contents LIKE '%John%' ORDER BY Weight DESC LIMIT 1; 
SELECT PackageNumber, Weight FROM Package WHERE Weight IN (SELECT MIN(Weight) FROM Package GROUP BY Shipment HAVING COUNT(*) = 3) ORDER BY Weight DESC LIMIT 3; 
SELECT PackageNumber, Weight FROM Package WHERE Weight IN (SELECT MIN(Weight) FROM Package GROUP BY Shipment HAVING COUNT(*) = 3); 
SELECT Client.Name, COUNT(Package.PackageNumber) AS NumPackages FROM Client INNER JOIN Package ON Client.AccountNumber = Package.Recipient GROUP BY Client.Name ORDER BY NumPackages DESC LIMIT 1; 
SELECT Client.Name, COUNT(*) FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Client ON Package.Sender = Client.AccountNumber GROUP BY Client.Name ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Client.Name, COUNT(Package.PackageNumber) AS NumPackages 
SELECT MIN(PackageCount) FROM ( 
SELECT Client.Name FROM Client 
SELECT Client.Name FROM Client 
SELECT Coordinates FROM Planet WHERE Name = 'Mars'; 
SELECT Coordinates FROM Planet WHERE Name = 'Mars'; 
SELECT Planet.Name, Planet.Coordinates FROM Planet ORDER BY Planet.Name ASC; 
SELECT Planet.Name, Planet.Coordinates FROM Planet ORDER BY Planet.Name ASC; 
SELECT ShipmentID FROM Shipment WHERE Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Phillip J. Fry'); 
SELECT ShipmentID FROM Shipment WHERE Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Phillip J Fry'); 
SELECT Shipment.Date FROM Shipment 
SELECT Shipment.Date FROM Shipment 
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'); 
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'); 
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') AND Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela'); 
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') AND Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela') 
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') OR Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela') 
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') AND Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela') 
SELECT Planet.Name, COUNT(*) AS TotalShipments FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID GROUP BY Planet.Name 
SELECT Planet.Name, COUNT(*) AS ShipmentCount 
SELECT Planet.Name FROM Planet WHERE Planet.Name = 'Earth' ORDER BY Planet.Name ASC LIMIT 1 
SELECT Planet.Name 
SELECT Employee.Name, COUNT(*) FROM Employee 
SELECT COUNT(ShipmentID) AS NumShipments, Name AS ManagerName FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID GROUP BY ManagerName; 
SELECT SUM(P.Weight) FROM Package P JOIN Shipment S ON P.Shipment = S.ShipmentID JOIN Planet P2 ON S.Planet = P2.PlanetID WHERE P2.Name = 'Mars' AND S.Date = '2020-01-01' AND P.Contents = 'Gold' AND P.Weight > 1000 AND P.Weight < 2000 AND P.Sender = 1 AND P.Recipient = 2 AND P2.Coordinates > 1000 AND P2.Coordinates < 2000 AND P2.Coordinates > 1000 AND P2.Coordinates < 2000 AND P2.Coordinates > 1000 AND P2.Coordinates < 2000 AND P2.Coordinates > 1000 AND P2.Coordinates < 2000 AND P2.Coordinates > 1000 AND P2.Coordinates < 2000 AND P2.Coordinates > 1000 AND P2.Coordinates < 2000 AND P2.Coordinates > 1000 AND P2.Coordinates < 2000 AND P2.Coordinates > 1000 AND P2.Coordinates < 2000 AND P2.Coordinates > 1000 AND P2.Coordinates < 2000 AND P2.Coordinates > 1000 AND P2.Coordinates < 2000 AND P2.Coordinates > 1000 AND P2.Coordinates < 2000 AND P2.Coordinates > 1000 AND P2.Coordinates < 2000 AND P2.Coordinates > 1000 AND P2.Co
SELECT SUM(P.Weight) FROM Package P JOIN Shipment S ON P.Shipment = S.ShipmentID JOIN Planet P2 ON S.Planet = P2.PlanetID WHERE P2.Name = 'Mars' AND S.Date >= '2019-01-01' AND S.Date <= '2019-12-31' AND P.Contents LIKE '%computer%' AND P.Contents LIKE '%phone%'; 
SELECT p.Name, SUM(pw.Weight) FROM Package AS pw JOIN Shipment AS s ON pw.Shipment = s.ShipmentID JOIN Planet AS p ON s.Planet = p.PlanetID GROUP BY p.Name ORDER BY SUM(pw.Weight) DESC; 
SELECT Planet.Name, SUM(Package.Weight) FROM Planet 
SELECT Planet.Name 
SELECT Planet.Name FROM Planet WHERE EXISTS(SELECT * FROM Shipment WHERE Shipment.Planet = Planet.PlanetID AND EXISTS(SELECT * FROM Package WHERE Package.Shipment = Shipment.ShipmentID AND Package.Weight > 30))  
SELECT PackageNumber FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8') AND Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan')) AND Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Kif Kroker') ORDER BY PackageNumber ASC; 
SELECT COUNT(*) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan') AND Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8')); 
SELECT PackageNumber FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8') OR Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan')) OR Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan') 
SELECT COUNT(*) FROM Shipment 
SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30; 
SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30 
SELECT Employee.Name FROM Employee 
SELECT Name FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') AND Level = 1) 
SELECT Name FROM Employee WHERE EmployeeID IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omega III') AND Level = 3) 
SELECT Name FROM Employee WHERE EmployeeID IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omega III') AND Level = 3) 
SELECT Planet.Name 
SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance WHERE Employee IN (SELECT EmployeeID FROM Employee WHERE EmployeeID IN (SELECT Manager FROM Shipment WHERE ShipmentID IN (SELECT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE PlanetID IN (SELECT PlanetID FROM Has_Clearance WHERE Level = 1)))))) 
SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000 
SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000; 
SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000; 
SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000; 
SELECT COUNT(*) FROM Employee 
SELECT COUNT(*) FROM Employee 
SELECT COUNT(*) FROM game; 
SELECT COUNT(*) FROM game; 
SELECT game.Title, game.Developers FROM game ORDER BY game.Units_sold_Millions DESC; 
SELECT game.Title, game.Developers FROM game ORDER BY Units_sold_Millions DESC; 
SELECT AVG(game.Units_sold_Millions) FROM game WHERE game.Developers!= 'Nintendo' AND game.Platform_ID IN (SELECT platform.Platform_ID FROM platform WHERE platform.Platform_name = 'Nintendo 64'); 
SELECT AVG(game.Units_sold_Millions) FROM game WHERE game.Developers!= 'Nintendo' AND game.Platform_ID IN (SELECT platform.Platform_ID FROM platform WHERE platform.Platform_name = 'Nintendo Entertainment System' OR platform.Platform_name = 'Nintendo 64' OR platform.Platform_name = 'Nintendo DS' OR platform.Platform_name = 'Nintendo 3DS' OR platform.Platform_name = 'Nintendo Switch') AND game.Release_Date >= '1990-01-01' AND game.Release_Date <= '1999-12-31' AND game.Title LIKE '%Mario%' AND game.Title LIKE '%Super%'; 
SELECT platform_name, market_district FROM platform 
SELECT platform_name, market_district FROM platform; 
SELECT platform.Platform_ID, platform.Platform_name FROM platform WHERE platform.Download_rank = 1; 
SELECT platform_name, Platform_ID FROM platform WHERE Download_rank = 1; 
SELECT MAX(Rank_of_the_year), MIN(Rank_of_the_year) FROM player; 
SELECT MAX(Rank_of_the_year), MIN(Rank_of_the_year) FROM player; 
SELECT COUNT(*) FROM player WHERE Rank_of_the_year < 3; 
SELECT COUNT(*) FROM player WHERE Rank_of_the_year <= 3; 
SELECT player_name FROM player ORDER BY player_name ASC; 
SELECT player_name FROM player ORDER BY player_name ASC; 
SELECT player.Player_name, player.College FROM player ORDER BY player.Rank_of_the_year DESC; 
SELECT player.Player_name, player.College FROM player ORDER BY Rank_of_the_year DESC; 
SELECT player.Player_name, player.Rank_of_the_year FROM game_player JOIN player ON game_player.Player_ID = player.Player_ID JOIN game ON game_player.Game_ID = game.Game_ID WHERE game.Title = 'Super Mario World' AND game_player.If_active = 1 
SELECT player_name, rank_of_the_year FROM game_player, player WHERE game_player.Player_ID = player.Player_ID AND game_player.Game_ID = (SELECT Game_ID FROM game WHERE Title = 'Super Mario World') AND game_player.If_active = 1 
SELECT DISTINCT game.Developers 
SELECT DISTINCT game_developers.Developers 
SELECT AVG(game.Units_sold_Millions) FROM game, game_player, player WHERE game.Platform_ID = 1 AND game.Platform_ID = game_player.Game_ID AND game_player.Player_ID = player.Player_ID AND player.Position = 'Guard'; 
SELECT AVG(game.Units_sold_Millions) FROM game_player JOIN game ON game_player.Game_ID = game.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.Position = 'Guard'; 
SELECT game.Title, platform.Platform_name FROM game, platform WHERE game.Platform_ID = platform.Platform_ID; 
SELECT game.Title, platform.Platform_name FROM game, platform WHERE game.Platform_ID = platform.Platform_ID; 
SELECT game.Title FROM game, platform WHERE game.Platform_ID = platform.Platform_ID AND platform.Market_district IN ('Asia', 'USA') ORDER BY game.Title ASC; 
SELECT game.Title FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID WHERE platform.Market_district = 'Asia' OR platform.Market_district = 'USA' ORDER BY game.Title ASC; 
SELECT franchise, COUNT(*) FROM game GROUP BY franchise ORDER BY COUNT(*) DESC; 
SELECT COUNT(DISTINCT game.Game_ID) FROM game WHERE game.Franchise IS NOT NULL GROUP BY game.Franchise; 
SELECT franchise FROM game GROUP BY franchise ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT franchise, COUNT(*) AS num_games FROM game GROUP BY franchise ORDER BY num_games DESC LIMIT 1; 
SELECT DISTINCT franchise FROM game WHERE Game_ID IN (SELECT Game_ID FROM game WHERE Game_ID IN (SELECT Game_ID FROM game)) ORDER BY franchise ASC; 
SELECT DISTINCT franchise FROM game WHERE Game_ID IN (SELECT Game_ID FROM game WHERE Game_ID IN (SELECT Game_ID FROM game GROUP BY Game_ID HAVING COUNT(Game_ID) > 1)) ORDER BY franchise ASC; 
SELECT player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player); 
SELECT player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player); 
SELECT game.Title FROM game, game_player, player WHERE game.Platform_ID = game_player.Game_ID AND game_player.Player_ID = player.Player_ID AND player.College = 'Oklahoma' AND player.College = 'Auburn'; 
SELECT game.Title 
SELECT DISTINCT franchise FROM game; 
SELECT DISTINCT franchise FROM game; 
SELECT game.Title FROM game WHERE game.Game_ID NOT IN (SELECT game_player.Game_ID FROM game_player WHERE game_player.Player_ID IN (SELECT player.Player_ID FROM player WHERE player.Position = 'Guard') AND game_player.If_active = 1); 
SELECT game.Title 
SELECT Name FROM press ORDER BY Year_Profits_billion DESC; 
SELECT Name FROM press ORDER BY Year_Profits_billion DESC; 
SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1 
SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1; 
SELECT avg(`Year_Profits_billion`), max(`Year_Profits_billion`) FROM `press` 
SELECT Press_ID, AVG(Year_Profits_billion), MAX(Year_Profits_billion) FROM press GROUP BY Press_ID; 
SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press); 
SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press); 
SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) OR Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press); 
SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) OR Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press); 
SELECT COUNT(*) FROM author WHERE Age < 30; 
SELECT COUNT(*) FROM author WHERE Age < 30; 
SELECT AVG(Age) FROM author GROUP BY Gender; 
SELECT Gender, AVG(Age) FROM author GROUP BY Gender; 
SELECT Author_ID, Gender, COUNT(*) FROM author WHERE Age > 30 GROUP BY Gender; 
SELECT Author_ID, Gender, COUNT(*) FROM author WHERE Age > 30 GROUP BY Gender; 
SELECT Title FROM book ORDER BY Release_date DESC; 
SELECT Title FROM book ORDER BY Release_date DESC; 
SELECT Book_Series, COUNT(*) FROM book GROUP BY Book_Series; 
SELECT Book_Series, COUNT(*) AS Count FROM book GROUP BY Book_Series; 
SELECT book.Title, book.Release_date FROM book WHERE book.Sale_Amount = (SELECT MAX(book.Sale_Amount) FROM book) ORDER BY book.Sale_Amount DESC LIMIT 5; 
SELECT book.Title, book.Release_date FROM book WHERE book.Sale_Amount IN (SELECT MAX(book.Sale_Amount) FROM book) LIMIT 5; 
SELECT Book_Series FROM book WHERE Sale_Amount > 1000 AND Sale_Amount < 500 
SELECT Book_Series FROM book WHERE Sale_Amount > 1000 OR Sale_Amount < 500 
SELECT Name FROM author WHERE Book_Series IN ('MM', 'LT') ORDER BY Name ASC; 
SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book WHERE Book_Series IN ('MM', 'LT')) ORDER BY Name ASC; 
SELECT author.Name, author.Age FROM author LEFT JOIN book ON author.Author_ID = book.Author_ID WHERE book.Book_ID IS NULL; 
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book); 
SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID HAVING COUNT(*) > 1); 
SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID HAVING COUNT(*) > 1); 
SELECT book.Title, author.Name, press.Name FROM book INNER JOIN author ON book.Author_ID = author.Author_ID INNER JOIN press ON book.Press_ID = press.Press_ID ORDER BY book.Sale_Amount DESC LIMIT 3; 
SELECT book.Title, author.Name, press.Name 
SELECT p.Name, SUM(b.Sale_Amount) FROM press p JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Name; 
SELECT p.Name, SUM(b.Sale_Amount) FROM press p JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Name; 
SELECT press.Name, COUNT(book.Book_ID) AS num_books FROM book JOIN press ON book.Press_ID = press.Press_ID GROUP BY press.Name HAVING COUNT(book.Book_ID) > 1000; 
SELECT press.Name, COUNT(*) FROM book JOIN press ON book.Press_ID = press.Press_ID WHERE book.Sale_Amount > 1000 GROUP BY press.Name; 
SELECT Name FROM author WHERE Author_ID = (SELECT Author_ID FROM book WHERE Book_ID = (SELECT Book_ID FROM book WHERE Sale_Amount = (SELECT MAX(Sale_Amount) FROM book))); 
SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book WHERE Book_ID IN (SELECT Book_ID FROM book WHERE Sale_Amount = (SELECT MAX(Sale_Amount) FROM book))); 
SELECT a.Name, a.Gender 
SELECT a.Name, a.Gender 
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book WHERE Press_ID IN (SELECT Press_ID FROM press WHERE Name = 'Accor')); 
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book WHERE Press_ID IN (SELECT Press_ID FROM press WHERE Name = 'Accor')) ORDER BY Name ASC; 
SELECT p.Name, p.Year_Profits_billion FROM press p WHERE p.Month_Profits_billion > 2; 
SELECT p.Name, p.Year_Profits_billion FROM press p WHERE p.Press_ID IN (SELECT Book_ID FROM book b WHERE b.Press_ID = p.Press_ID GROUP BY b.Press_ID HAVING COUNT(b.Press_ID) > 2)  
SELECT COUNT(DISTINCT author_name) FROM Authors 
SELECT author_name FROM Authors 
SELECT author_name, other_details FROM Authors 
SELECT other_details FROM Authors WHERE author_name = 'Addison Denesik'; 
SELECT COUNT(DISTINCT document_id) FROM Documents_Processes 
SELECT author_name FROM Documents WHERE document_id = 4; 
SELECT document_id, process_id, staff_id, staff_role_code, date_from, date_to, other_details 
SELECT COUNT(document_id) FROM Documents WHERE author_name = 'Era Kerluke'; 
SELECT document_name, document_description FROM Documents; 
SELECT document_id, document_name FROM Documents WHERE author_name = 'Bianka Cummings'; 
SELECT author_name, other_details FROM Authors INNER JOIN Documents ON Authors.author_name = Documents.author_name WHERE document_name = 'Travel to China' 
SELECT author_name, COUNT(document_id) FROM Documents GROUP BY author_name; 
SELECT author_name FROM Documents GROUP BY author_name ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT author_name FROM Documents JOIN Authors ON Documents.author_name = Authors.author_name WHERE document_id IN (SELECT document_id FROM Documents JOIN Documents_Processes ON Documents.document_id = Documents_Processes.document_id WHERE process_outcome_code = 'P' AND process_status_code = 'C' GROUP BY document_id HAVING COUNT(*) >= 2) GROUP BY author_name HAVING COUNT(*) >= 2; 
SELECT COUNT(process_id) FROM Business_Processes 
SELECT next_process_id, process_name, process_description FROM Business_Processes WHERE process_id = 9; 
SELECT process_name FROM Business_Processes WHERE process_id = 9; 
SELECT COUNT(DISTINCT process_outcome_code) FROM Documents_Processes; 
SELECT process_outcome_code, process_outcome_description FROM Process_Outcomes; 
SELECT process_outcome_description FROM Process_Outcomes WHERE process_outcome_code = 'working'; 
SELECT COUNT(DISTINCT process_status_code) FROM Documents_Processes 
SELECT process_status_code, process_status_description FROM Process_Status; 
SELECT process_status_description FROM Process_Status WHERE process_status_code = 'ct'; 
SELECT COUNT(DISTINCT staff_id) FROM Staff 
SELECT staff_id, staff_details FROM Staff; 
SELECT staff_details FROM Staff WHERE staff_id = 100; 
SELECT COUNT(DISTINCT staff_role_code) FROM Staff_in_Processes 
SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles; 
SELECT Ref_Staff_Roles.staff_role_description FROM Ref_Staff_Roles WHERE Ref_Staff_Roles.staff_role_code = 'HR'; 
SELECT COUNT(DISTINCT document_id) FROM Documents_Processes 
SELECT process_id FROM Documents_Processes WHERE document_id IN (SELECT document_id FROM Documents WHERE author_name IN (SELECT author_name FROM Authors WHERE author_name = 'John Doe')); 
SELECT document_id FROM Documents_Processes WHERE process_id IS NULL; 
SELECT process_id FROM Business_Processes WHERE process_id NOT IN (SELECT process_id FROM Documents_Processes); 
SELECT process_outcome_description, process_status_description FROM Documents_Processes JOIN Process_Outcomes ON Documents_Processes.process_outcome_code = Process_Outcomes.process_outcome_code JOIN Process_Status ON Documents_Processes.process_status_code = Process_Status.process_status_code WHERE document_id = 0; 
SELECT process_name FROM Business_Processes WHERE process_id = (SELECT process_id FROM Documents_Processes WHERE document_id = (SELECT document_id FROM Documents WHERE document_name = 'Travel to Brazil')); 
SELECT process_id, COUNT(document_id) FROM Documents_Processes GROUP BY process_id; 
SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9; 
SELECT staff_id, COUNT(*) FROM Staff_in_Processes GROUP BY staff_id; 
SELECT staff_role_code, COUNT(*) FROM Staff_in_Processes GROUP BY staff_role_code; 
SELECT COUNT(DISTINCT staff_role_code) FROM Staff_in_Processes WHERE staff_id = 3; 
SELECT COUNT(DISTINCT `agency_id` ) FROM `Agencies` 
SELECT COUNT(DISTINCT `agency_id` ) FROM `Agencies`; 
SELECT agency_id, agency_details FROM Agencies; 
SELECT agency_id, agency_details FROM Agencies; 
SELECT COUNT(DISTINCT `Clients`.`client_id` ) FROM `Clients` WHERE `Clients`.`agency_id` = 1 AND `Clients`.`sic_code` = '12345' AND `Clients`.`client_details` LIKE '%John%' 
SELECT COUNT(DISTINCT `Clients`.`client_id` ) FROM `Clients` 
SELECT `Clients`.`client_id`, `Clients`.`client_details` FROM `Clients` WHERE `Clients`.`agency_id` IN (SELECT `Agencies`.`agency_id` FROM `Agencies` WHERE `Agencies`.`agency_details` LIKE '%agency%') AND `Clients`.`sic_code` LIKE '%sic%'; 
SELECT `Clients`.`client_id`, `Clients`.`client_details` FROM `Clients` WHERE `Clients`.`agency_id` IN (SELECT `Agencies`.`agency_id` FROM `Agencies` WHERE `Agencies`.`agency_details` LIKE '%agency%') AND `Clients`.`sic_code` IN (SELECT `Clients`.`sic_code` FROM `Clients` WHERE `Clients`.`client_details` LIKE '%client%') ORDER BY `Clients`.`client_id` ASC; 
SELECT Agencies.agency_id, COUNT(Clients.client_id) AS num_clients 
SELECT agency_id, COUNT(client_id) FROM Clients GROUP BY agency_id; 
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Clients GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1)); 
SELECT agency_id, agency_details FROM Agencies WHERE agency_id = (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Clients GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1)); 
SELECT Agencies.agency_id, Agencies.agency_details FROM Agencies WHERE Agencies.agency_id IN (SELECT Clients.agency_id FROM Clients WHERE Clients.client_id IN (SELECT Meetings.client_id FROM Meetings WHERE Meetings.meeting_id IN (SELECT Staff_in_Meetings.meeting_id FROM Staff_in_Meetings WHERE Staff_in_Meetings.staff_id IN (SELECT Staff.staff_id FROM Staff WHERE Staff.agency_id IN (SELECT Agencies.agency_id FROM Agencies))))) ORDER BY Agencies.agency_id ASC; 
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(*) >= 2); 
SELECT agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments WHERE payment_id IN (SELECT payment_id FROM Meetings WHERE meeting_id IN (SELECT meeting_id FROM Staff_in_Meetings WHERE staff_id IN (SELECT staff_id FROM Staff WHERE staff_details LIKE '%Mac%')))))); 
SELECT agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients WHERE client_details LIKE '%Mac%'); 
SELECT * FROM Clients 
SELECT Clients.client_details, Agencies.agency_details FROM Clients INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id; 
SELECT sic_code, COUNT(client_id) AS num_clients FROM Clients GROUP BY sic_code; 
SELECT sic_code, COUNT(client_id) AS num_clients FROM Clients GROUP BY sic_code; 
SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad'; 
SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad'; 
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients); 
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients); 
SELECT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT agency_id FROM Clients); 
SELECT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT agency_id FROM Clients); 
SELECT COUNT(*) FROM Invoices 
SELECT COUNT(*) FROM Invoices 
SELECT `invoice_id`, `invoice_status`, `invoice_details` FROM `Invoices` WHERE `invoice_status` = 'Paid' AND `invoice_details` LIKE '%paid%' ORDER BY `invoice_id` DESC; 
SELECT invoice_id, invoice_status, invoice_details FROM Invoices; 
SELECT client_id, COUNT(invoice_id) AS num_invoices 
SELECT client_id, COUNT(*) AS num_invoices FROM Clients GROUP BY client_id; 
SELECT `Clients`.`client_id`, `Clients`.`client_details` FROM `Clients` WHERE `Clients`.`client_id` IN (SELECT `Clients`.`client_id` FROM `Clients` INNER JOIN `Invoices` ON `Clients`.`client_id` = `Invoices`.`client_id` GROUP BY `Clients`.`client_id` HAVING COUNT(`Invoices`.`invoice_id`) = (SELECT COUNT(`Invoices`.`invoice_id`) FROM `Invoices` GROUP BY `Invoices`.`invoice_id` ORDER BY COUNT(`Invoices`.`invoice_id`) DESC LIMIT 1)) ORDER BY `Clients`.`client_details` ASC; 
SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices GROUP BY client_id ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT client_id FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) >= 2); 
SELECT client_id FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) >= 2); 
SELECT invoice_status, COUNT(invoice_id) FROM Invoices GROUP BY invoice_status; 
SELECT invoice_status, COUNT(*) FROM Invoices GROUP BY invoice_status; 
SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT  
SELECT  
SELECT meeting_type, purpose_of_meeting FROM Meetings 
SELECT meeting_type, purpose_of_meeting FROM Meetings 
SELECT meeting_outcome, purpose_of_meeting FROM Meetings 
SELECT meeting_outcome, purpose_of_meeting FROM Meetings 
SELECT payment_id, payment_details FROM Payments WHERE invoice_id IN (SELECT invoice_id FROM Invoices WHERE invoice_status = 'Working'); 
SELECT payment_id, payment_details FROM Payments WHERE invoice_id IN (SELECT invoice_id FROM Invoices WHERE invoice_status = 'Working'); 
SELECT invoice_id, invoice_status FROM Invoices WHERE payment_id IS NULL; 
SELECT invoice_id, invoice_status 
SELECT COUNT(*) FROM Payments; 
SELECT COUNT(*) FROM Payments; 
SELECT Payments.payment_id, Payments.payment_details, Invoices.invoice_id, Invoices.invoice_details FROM Payments INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id; 
SELECT Payments.payment_id, Payments.invoice_id, Payments.payment_details FROM Payments; 
SELECT DISTINCT 
SELECT DISTINCT 
SELECT invoice_id, COUNT(payment_id) FROM Payments GROUP BY invoice_id; 
SELECT COUNT(*) AS num_payments, invoice_id FROM Payments GROUP BY invoice_id; 
SELECT invoice_id, invoice_status, invoice_details 
SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_id IN (SELECT payment_id FROM Payments GROUP BY payment_id HAVING COUNT(payment_id) = (SELECT COUNT(payment_id) FROM Payments GROUP BY payment_id ORDER BY COUNT(payment_id) DESC LIMIT 1)); 
SELECT COUNT(DISTINCT staff_id) FROM Staff 
SELECT COUNT(*) FROM Staff 
SELECT Agencies.agency_id, COUNT(Staff.staff_id) FROM Agencies LEFT JOIN Staff ON Agencies.agency_id = Staff.agency_id GROUP BY Agencies.agency_id; 
SELECT Agencies.agency_id, COUNT(Staff.staff_id) AS num_staff 
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Staff GROUP BY agency_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Staff GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1)); 
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Staff GROUP BY agency_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Staff GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1)); 
SELECT meeting_outcome, COUNT(*) FROM Meetings GROUP BY meeting_outcome ORDER BY meeting_outcome ASC; 
SELECT meeting_outcome, COUNT(*) FROM Meetings GROUP BY meeting_outcome; 
SELECT client_id, COUNT(meeting_id) FROM Meetings GROUP BY client_id; 
SELECT client_id, COUNT(*) FROM Meetings GROUP BY client_id; 
SELECT  
SELECT meeting_type, COUNT(*) FROM Meetings GROUP BY meeting_type; 
SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM Meetings m JOIN Clients c ON m.client_id = c.client_id; 
SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details 
SELECT meeting_id, COUNT(staff_id) FROM Staff_in_Meetings GROUP BY meeting_id; 
SELECT meeting_id, COUNT(staff_id) FROM Staff_in_Meetings GROUP BY meeting_id; 
SELECT staff_id, COUNT(*) FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(*) > 0 ORDER BY COUNT(*) ASC LIMIT 1; 
SELECT staff_id FROM ( 
SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Meetings 
SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Meetings 
SELECT COUNT(DISTINCT staff_id) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings); 
SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings); 
SELECT `Clients`.`client_id`, `Clients`.`client_details` FROM `Clients` WHERE `Clients`.`client_id` IN (SELECT `Clients`.`client_id` FROM `Clients` INNER JOIN `Meetings` ON `Clients`.`client_id` = `Meetings`.`client_id` UNION SELECT `Clients`.`client_id` FROM `Clients` INNER JOIN `Invoices` ON `Clients`.`client_id` = `Invoices`.`client_id`) 
SELECT `Clients`.`client_id`, `Clients`.`client_details` FROM `Clients` WHERE `Clients`.`client_id` IN (SELECT `Clients`.`client_id` FROM `Clients` INNER JOIN `Meetings` ON `Clients`.`client_id` = `Meetings`.`client_id` UNION SELECT `Clients`.`client_id` FROM `Clients` INNER JOIN `Invoices` ON `Clients`.`client_id` = `Invoices`.`client_id`) 
SELECT staff_id, staff_details FROM Staff WHERE staff_id IN (SELECT staff_id FROM Staff_in_Meetings WHERE meeting_id IN (SELECT meeting_id FROM Meetings WHERE meeting_id IN (SELECT meeting_id FROM Meetings WHERE meeting_outcome LIKE '%s%'))) 
SELECT staff_id, staff_details FROM Staff WHERE staff_id IN (SELECT staff_id FROM Staff_in_Meetings WHERE meeting_id IN (SELECT meeting_id FROM Meetings WHERE billable_yn = 'Y' AND meeting_outcome = 'S' AND meeting_type = 'S' AND start_date_time >= '2019-01-01' AND end_date_time <= '2019-12-31' AND purpose_of_meeting LIKE '%S%') AND staff_id IN (SELECT staff_id FROM Staff WHERE staff_details LIKE '%S%')) AND staff_details LIKE '%S%'; 
SELECT c.client_id, c.sic_code, a.agency_id 
SELECT client_id, sic_code, agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings WHERE meeting_id IN (SELECT meeting_id FROM Staff_in_Meetings WHERE staff_id IN (SELECT staff_id FROM Staff WHERE agency_id IN (SELECT agency_id FROM Agencies WHERE agency_details = 'Agency 1')))) AND client_id IN (SELECT client_id FROM Invoices WHERE invoice_id IN (SELECT payment_id FROM Payments WHERE invoice_id IN (SELECT invoice_id FROM Invoices WHERE invoice_status = 'Paid'))) AND client_id IN (SELECT client_id FROM Meetings WHERE meeting_id IN (SELECT meeting_id FROM Meetings WHERE meeting_outcome = 'Successful')) AND client_id IN (SELECT client_id FROM Meetings WHERE meeting_id IN (SELECT meeting_id FROM Meetings WHERE meeting_type = 'Business Development')) AND client_id IN (SELECT client_id FROM Meetings WHERE meeting_id IN (SELECT meeting_id FROM Meetings WHERE billable_yn = 'Y')) AND client_id IN (SELECT client_id FROM Meetings WHERE meeting_id IN (SELECT meeting_id FROM Meetings WHERE start_date_time >= '2022-01-01')) AND client_id IN (SELECT client_id FROM Meetings WHERE meeting_id IN (SELECT meeting_id FROM Meetings WHERE end_date_time <= '2022-12-31')) AND client_id IN (SELECT client_id FROM Meetings WHERE meeting_id IN (SELECT meeting_id FROM Meetings WHERE purpose_of_meeting = 'Business Development')) AND client_id
SELECT Meetings.start_date_time, Meetings.end_date_time, Clients.client_details, Staff.staff_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id INNER JOIN Staff ON Meetings.meeting_id = Staff.meeting_id; 
SELECT  
