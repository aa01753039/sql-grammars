SELECT COUNT(*) FROM club; 
SELECT COUNT(*) FROM club; 
SELECT Name FROM club ORDER BY Name ASC; 
SELECT Name FROM club ORDER BY Name ASC; 
SELECT Manager, Captain FROM club; 
SELECT Manager, Captain FROM club; 
SELECT Name FROM club WHERE Manufacturer!= 'Nike'; 
SELECT Name FROM club WHERE Manufacturer!= 'Nike'; 
SELECT Name FROM player ORDER BY Wins_count ASC; 
SELECT Name FROM player ORDER BY Wins_count ASC; 
SELECT Name FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player); 
SELECT Name FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player); 
SELECT DISTINCT Country FROM player WHERE Earnings > 1200000; 
SELECT Country FROM player WHERE Earnings > 1200000; 
SELECT Country FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player WHERE Wins_count > 2); 
SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1; 
SELECT player.Name, club.Name FROM player, club WHERE player.Club_ID = club.Club_ID; 
SELECT player.Name, club.Name FROM player, club WHERE player.Club_ID = club.Club_ID; 
SELECT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player WHERE Wins_count > 2); 
SELECT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player WHERE Wins_count > 2); 
SELECT Name FROM player WHERE Club_ID IN (SELECT Club_ID FROM club WHERE Manager = 'Sam Allardyce') 
SELECT Name FROM player WHERE Club_ID IN (SELECT Club_ID FROM club WHERE Manager = 'Sam Allardyce') 
SELECT Name FROM club ORDER BY (SELECT AVG(Earnings) FROM player WHERE club.Club_ID = player.Club_ID) DESC; 
SELECT club.Name 
SELECT Manufacturer, COUNT(*) AS num_clubs FROM club GROUP BY Manufacturer ORDER BY num_clubs DESC;  
SELECT Manufacturer, COUNT(*) AS Count 
SELECT Manufacturer, COUNT(*) AS count 
SELECT Manufacturer, COUNT(*) AS count 
SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(Manufacturer) > 1; 
SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(Manufacturer) > 1; 
SELECT Country FROM player GROUP BY Country HAVING COUNT(*) > 1; 
SELECT Country FROM player GROUP BY Country HAVING COUNT(*) > 1; 
SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player); 
SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player); 
SELECT Country FROM player WHERE Earnings > 1400000 OR Earnings < 1100000; 
SELECT Country FROM player WHERE Earnings > 1400000 OR Earnings < 1100000 GROUP BY Country HAVING COUNT(*) > 1; 
SELECT COUNT(DISTINCT Country) FROM player; 
SELECT COUNT(DISTINCT Country) FROM player; 
SELECT Earnings FROM player WHERE Country = 'Australia' OR Country = 'Zimbabwe'; 
SELECT Earnings FROM player WHERE Country IN ('Australia', 'Zimbabwe'); 
SELECT customer_id, customer_first_name, customer_last_name 
SELECT customer_id, customer_first_name, customer_last_name 
SELECT order_id, order_status_code, COUNT(product_id) AS num_products 
SELECT COUNT(order_item_id) AS num_products, order_status_code, order_id 
SELECT date_order_placed FROM Orders WHERE date_order_placed IN (SELECT MIN(date_order_placed) FROM Orders) OR order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(*) > 1); 
SELECT MIN(date_order_placed) AS earliest_order_date, date_order_placed FROM Orders GROUP BY date_order_placed HAVING COUNT(*) > 1;  
SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders); 
SELECT customer_first_name, customer_last_name, customer_middle_initial FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders); 
SELECT product_id, product_name, product_price, product_color FROM Products WHERE product_id NOT IN (SELECT DISTINCT order_item_id FROM Order_Items) AND product_id NOT IN (SELECT DISTINCT order_item_id FROM Order_Items WHERE order_item_status_code = 'Completed') ORDER BY product_id ASC;  
SELECT product_id, product_name, product_price, product_color FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) < 2) ORDER BY product_id ASC;  
SELECT order_id, date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(*) >= 2) ORDER BY order_id ASC;  
SELECT order_id, date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(*) >= 2) ORDER BY date_order_placed ASC;  
SELECT product_id, product_name, product_price FROM Products ORDER BY product_id DESC LIMIT 1;  
SELECT product_id, product_name, product_price FROM Products ORDER BY product_id DESC LIMIT 10;  
SELECT order_id, SUM(product_price) AS sum 
SELECT order_id, SUM(product_price) AS total_cost 
SELECT payment_method_code, COUNT(*) AS count 
SELECT payment_method_code, COUNT(*) AS count 
SELECT gender_code, COUNT(product_id) AS num_products 
SELECT customer_gender_code, COUNT(*) AS product_count 
SELECT COUNT(Orders.order_id) AS order_count, Customers.gender_code 
SELECT customer_first_name, customer_last_name, COUNT(*) AS order_count FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY customer_first_name, customer_last_name ORDER BY order_count DESC;  
SELECT customer_first_name, customer_middle_initial, customer_last_name, payment_method_code FROM Customers INNER JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id;  
SELECT customer_first_name, customer_middle_initial, customer_last_name, payment_method_code FROM Customers INNER JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id;  
SELECT invoice_status_code, invoice_date, shipment_date FROM Invoices INNER JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number;  
SELECT invoice_status_code, invoice_date, shipment_date FROM Invoices INNER JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number;  
SELECT product_name, shipment_date FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id INNER JOIN Shipments ON Order_Items.order_id = Shipments.order_id INNER JOIN Shipment_Items ON Shipments.shipment_id = Shipment_Items.shipment_id WHERE Shipment_Items.order_item_id = Order_Items.order_item_id;  
SELECT product_name, shipment_date FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id INNER JOIN Shipments ON Order_Items.order_id = Shipments.order_id INNER JOIN Shipment_Items ON Shipments.shipment_id = Shipment_Items.shipment_id WHERE Shipment_Items.order_item_id = Order_Items.order_item_id;  
SELECT order_item_status_code, shipment_tracking_number FROM Shipment_Items INNER JOIN Order_Items ON Shipment_Items.order_item_id = Order_Items.order_item_id INNER JOIN Shipments ON Shipment_Items.shipment_id = Shipments.shipment_id;  
SELECT order_item_status_code, shipment_tracking_number FROM Order_Items INNER JOIN Shipments ON Order_Items.order_id = Shipments.order_id WHERE Order_Items.order_item_status_code = 'Shipped' AND Shipments.shipment_date IS NOT NULL;  
SELECT product_name, product_color FROM Products WHERE product_id IN (SELECT order_item_id FROM Shipment_Items) AND product_color IS NOT NULL;  
SELECT product_name, product_color FROM Products WHERE product_id IN (SELECT order_item_id FROM Shipment_Items) AND product_color IS NOT NULL;  
SELECT DISTINCT product_name, product_price, product_description FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items WHERE order_id IN (SELECT order_id FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customers WHERE gender_code = 'F'))) ORDER BY product_name ASC;  
SELECT product_name, product_price, product_description 
SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN (SELECT invoice_number FROM Shipments); 
SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN (SELECT invoice_number FROM Shipments); 
SELECT order_id, date_order_placed, SUM(product_price) AS total_cost 
SELECT Orders.order_id, Orders.date_order_placed, SUM(Products.product_price) AS total_amount_paid 
SELECT COUNT(*) FROM Customers WHERE customer_id IN (SELECT customer_id FROM Orders); 
SELECT COUNT(DISTINCT customer_id) FROM Orders; 
SELECT COUNT(DISTINCT order_item_status_code) AS item_states FROM Order_Items;  
SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items; 
SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods; 
SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods; 
SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%'; 
SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%'; 
SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'; 
SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'; 
SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products); 
SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products); 
SELECT COUNT(DISTINCT product_id) FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items); 
SELECT COUNT(*) FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items); 
SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods); 
SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods); 
SELECT order_status_code, date_order_placed FROM Orders; 
SELECT order_status_code, date_order_placed FROM Orders; 
SELECT address_line_1, town_city, county FROM Customers WHERE country = 'USA'; 
SELECT address_line_1, town_city, county FROM Customers WHERE country = 'United States'; 
SELECT customer_first_name, product_name FROM Customers INNER JOIN Order_Items ON Customers.customer_id = Order_Items.order_id INNER JOIN Products ON Order_Items.product_id = Products.product_id;  
SELECT customer_first_name, product_name FROM Customers, Products, Orders, Order_Items WHERE Orders.customer_id = Customers.customer_id AND Order_Items.order_id = Orders.order_id AND Order_Items.product_id = Products.product_id; 
SELECT COUNT(*) FROM Shipment_Items; 
SELECT COUNT(*) FROM Shipment_Items; 
SELECT AVG(product_price) FROM Products; 
SELECT AVG(product_price) FROM Products; 
SELECT AVG(product_price) FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items); 
SELECT AVG(product_price) FROM Products 
SELECT email_address, town_city, county FROM Customers WHERE gender_code = (SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY COUNT(*) ASC LIMIT 1);  
SELECT email_address, town_city, county FROM Customers WHERE gender_code IN (SELECT gender_code FROM Customers GROUP BY gender_code HAVING COUNT(*) < (SELECT COUNT(*) FROM Customers)) ORDER BY email_address ASC;  
SELECT date_order_placed FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(*) >= 2); 
SELECT date_order_placed FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(*) >= 2);  
SELECT order_status_code FROM Orders GROUP BY order_status_code HAVING COUNT(*) = 1 ORDER BY COUNT(*) DESC LIMIT 1;  
SELECT order_status_code, COUNT(*) AS count 
SELECT product_id, product_description FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) > 3) ORDER BY product_id ASC;  
SELECT product_id, product_description FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) > 3) ORDER BY product_id ASC;  
SELECT invoice_date, invoice_number FROM Invoices WHERE invoice_number IN (SELECT invoice_number FROM Shipments GROUP BY invoice_number HAVING COUNT(*) >= 2); 
SELECT invoice_date, invoice_number FROM Invoices WHERE invoice_number IN (SELECT invoice_number FROM Shipments GROUP BY invoice_number HAVING COUNT(*) >= 2); 
SELECT shipment_tracking_number, shipment_date FROM Shipments; 
SELECT shipment_tracking_number, shipment_date FROM Shipments; 
SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products); 
SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products);  
SELECT Name FROM director WHERE Age > (SELECT AVG(Age) FROM director); 
SELECT Name FROM director ORDER BY Age DESC LIMIT 1; 
SELECT COUNT(*) FROM channel WHERE internet LIKE '%bbc%'; 
SELECT COUNT(DISTINCT Digital_terrestrial_channel) FROM channel; 
SELECT Title FROM program ORDER BY Start_Year DESC; 
SELECT director.Name, COUNT(program.Program_ID) AS num_programs 
SELECT Name, Age FROM director WHERE Director_ID IN (SELECT Director_ID FROM director_admin WHERE Is_first_director = 1) ORDER BY COUNT(Program_ID) DESC LIMIT 1; 
SELECT Title FROM program ORDER BY Start_Year DESC LIMIT 1; 
SELECT Name, Internet FROM channel WHERE Channel_ID IN (SELECT Channel_ID FROM program GROUP BY Channel_ID HAVING COUNT(Program_ID) > 1); 
SELECT channel.Name, COUNT(program.Program_ID) AS num_programs 
SELECT COUNT(*) FROM channel WHERE Channel_ID NOT IN (SELECT Channel_ID FROM program); 
SELECT Name FROM director WHERE Director_ID IN (SELECT Director_ID FROM program WHERE Title = 'Dracula'); 
SELECT Name, Internet FROM channel WHERE Channel_ID IN (SELECT Channel_ID FROM director_admin GROUP BY Channel_ID HAVING COUNT(Director_ID) = (SELECT MAX(COUNT(Director_ID)) FROM director_admin GROUP BY Channel_ID)); 
SELECT Name FROM director WHERE Age BETWEEN 30 AND 60; 
SELECT Name FROM channel WHERE Channel_ID IN (SELECT Channel_ID FROM director_admin WHERE Director_ID IN (SELECT Director_ID FROM director WHERE Age < 40)) AND Channel_ID IN (SELECT Channel_ID FROM director_admin WHERE Director_ID IN (SELECT Director_ID FROM director WHERE Age > 60)); 
SELECT Channel_ID, Name FROM channel WHERE Channel_ID NOT IN (SELECT Channel_ID FROM director_admin WHERE Director_ID = (SELECT Director_ID FROM director WHERE Name = 'Hank Baskett')); 
SELECT COUNT(*) FROM radio; 
SELECT Transmitter FROM radio ORDER BY ERP_kW ASC; 
SELECT tv_show_name, Original_Airdate FROM tv_show; 
SELECT Station_name FROM city_channel WHERE Affiliation!= 'ABC'; 
SELECT Transmitter FROM radio WHERE ERP_kW > 150 OR ERP_kW < 30; 
SELECT Transmitter FROM radio WHERE ERP_kW = (SELECT MAX(ERP_kW) FROM radio); 
SELECT AVG(ERP_kW) FROM radio; 
SELECT Affiliation, COUNT(*) AS num_channels 
SELECT Affiliation, COUNT(*) AS count FROM city_channel GROUP BY Affiliation ORDER BY count DESC LIMIT 1;  
SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(*) > 3; 
SELECT City, Station_name FROM city_channel ORDER BY Station_name ASC; 
SELECT radio.Transmitter, city_channel.City 
SELECT radio.Transmitter, city_channel.Station_name FROM radio INNER JOIN city_channel_radio ON radio.Radio_ID = city_channel_radio.Radio_ID INNER JOIN city_channel ON city_channel_radio.City_channel_ID = city_channel.ID ORDER BY radio.ERP_kW DESC; 
SELECT radio.Transmitter, COUNT(city_channel_radio.Radio_ID) AS num_city_channels 
SELECT DISTINCT radio.Transmitter FROM radio WHERE radio.Transmitter NOT IN (SELECT radio.Transmitter FROM radio INNER JOIN city_channel_radio ON radio.Radio_ID = city_channel_radio.Radio_ID INNER JOIN city_channel ON city_channel.ID = city_channel_radio.City_channel_ID WHERE city_channel.City IS NOT NULL);  
SELECT Model FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle WHERE Power > 6000); 
SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1; 
SELECT Name FROM driver WHERE Citizenship = 'United States'; 
SELECT Name FROM driver WHERE Citizenship = 'United States'; 
SELECT COUNT(*) AS num_vehicles, Driver_ID 
SELECT Driver_ID, COUNT(Vehicle_ID) AS num_vehicles 
SELECT MAX(Power), AVG(Power) FROM vehicle WHERE Builder = 'Zhuzhou'; 
SELECT MAX(Power), AVG(Power) FROM vehicle WHERE Builder = 'Zhuzhou'; 
SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(*) ASC LIMIT 1; 
SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(*) ASC LIMIT 1; 
SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = 1996; 
SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = 1996; 
SELECT Build_Year, Model, Builder FROM vehicle; 
SELECT Build_Year, Model, Builder FROM vehicle; 
SELECT COUNT(*) FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM vehicle_driver WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE Build_Year = '2012')) 
SELECT COUNT(DISTINCT Driver_ID) FROM vehicle_driver WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE Build_Year = '2012'); 
SELECT COUNT(*) FROM driver WHERE Racing_Series = 'NASCAR'; 
SELECT COUNT(*) FROM driver WHERE Racing_Series = 'NASCAR'; 
SELECT AVG(Top_Speed) FROM vehicle; 
SELECT AVG(Top_Speed) FROM vehicle; 
SELECT DISTINCT Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM vehicle_driver WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE Power > 5000)); 
SELECT Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM vehicle_driver WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE Power > 5000)); 
SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150; 
SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150; 
SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%'; 
SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%'; 
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver); 
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver); 
SELECT Vehicle_ID, Model FROM vehicle WHERE Builder = 'Ziyang' OR Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(*) = 2); 
SELECT Vehicle_ID, Model FROM vehicle WHERE Builder = 'Ziyang' OR Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(*) = 2); 
SELECT vehicle.Vehicle_ID, vehicle.Model 
SELECT Vehicle_ID, Model FROM vehicle WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(*) > 2) OR Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver WHERE Driver_ID IN (SELECT Driver_ID FROM driver WHERE Name = 'Jeff Gordon')); 
SELECT COUNT(*) FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle); 
SELECT COUNT(*) FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle); 
SELECT Name FROM driver ORDER BY Name ASC; 
SELECT Name FROM driver ORDER BY Name ASC; 
SELECT Racing_Series, COUNT(*) AS num_drivers FROM driver GROUP BY Racing_Series; 
SELECT Racing_Series, COUNT(*) AS num_drivers FROM driver GROUP BY Racing_Series; 
SELECT Name, Citizenship FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM vehicle_driver WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE Model = 'DJ1')); 
SELECT Name, Citizenship FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM vehicle_driver WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE Model = 'DJ1')); 
SELECT COUNT(*) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver); 
SELECT COUNT(*) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver); 
SELECT COUNT(*) FROM Exams; 
SELECT COUNT(*) FROM Exams; 
SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC; 
SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC; 
SELECT Exam_Name, Exam_Date FROM Exams WHERE Subject_Code!= 'Database'; 
SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code!= 'Database' ORDER BY Exam_Date ASC;  
SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC; 
SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC; 
SELECT Type_of_Question_Code, COUNT(*) AS Count 
SELECT Type_of_Question_Code, COUNT(*) AS Count 
SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal'; 
SELECT DISTINCT Student_Answer_Text FROM Student_Assessments WHERE Assessment = 'Normal'; 
SELECT COUNT(DISTINCT Comments) AS NumberOfComments 
SELECT COUNT(DISTINCT Comments) AS CommentCount FROM Student_Answers;  
SELECT Student_Answer_Text, COUNT(Student_Answer_Text) AS Count 
SELECT Student_Answer_Text, COUNT(Student_Answer_Text) AS Frequency 
SELECT First_Name, Date_of_Answer FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Date_of_Answer ASC;  
SELECT First_Name, Date_of_Answer FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Date_of_Answer ASC;  
SELECT Email_Adress, Date_of_Answer 
SELECT Email_Adress, Date_of_Answer 
SELECT Assessment, COUNT(*) AS Count 
SELECT Assessment, COUNT(*) AS Frequency 
SELECT First_Name FROM Students WHERE Student_ID IN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(*) >= 2); 
SELECT First_Name FROM Students WHERE Student_ID IN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(*) >= 2); 
SELECT Valid_Answer_Text, COUNT(*) AS Count 
SELECT Valid_Answer_Text, COUNT(*) AS Count 
SELECT Last_Name FROM Students WHERE Gender_MFU!= 'M'; 
SELECT Last_Name FROM Students WHERE Gender_MFU!= 'M'; 
SELECT Gender_MFU, COUNT(*) AS num_students FROM Students GROUP BY Gender_MFU;  
SELECT Gender_MFU, COUNT(*) FROM Students GROUP BY Gender_MFU; 
SELECT Last_Name FROM Students WHERE Gender_MFU = 'F' OR Gender_MFU = 'M'; 
SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M'); 
SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers); 
SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers); 
SELECT Student_Answer_Text FROM Student_Assessments WHERE Assessment IN ('Normal', 'Absent') ORDER BY Student_Answer_ID ASC;  
SELECT Student_Answer_Text FROM Student_Assessments WHERE Assessment IN ('Normal', 'Absent') ORDER BY Student_Answer_ID ASC;  
SELECT Type_of_Question_Code FROM Questions WHERE Type_of_Question_Code IN (SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(*) >= 3); 
SELECT Type_of_Question_Code FROM Questions WHERE Type_of_Question_Code IN (SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(*) >= 3); 
SELECT * FROM Students; 
SELECT * FROM Students; 
SELECT COUNT(*) FROM Addresses; 
SELECT COUNT(*) FROM Addresses; 
SELECT address_id, address_details FROM Addresses; 
SELECT address_id, address_details FROM Addresses; 
SELECT COUNT(*) FROM Products; 
SELECT COUNT(*) FROM Products; 
SELECT product_id, product_type_code, product_name FROM Products; 
SELECT product_id, product_type_code, product_name FROM Products; 
SELECT product_price FROM Products WHERE product_name = 'Monitor'; 
SELECT product_price FROM Products WHERE product_name = 'Monitor'; 
SELECT MIN(product_price), AVG(product_price), MAX(product_price) FROM Products; 
SELECT MIN(product_price), AVG(product_price), MAX(product_price) FROM Products; 
SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes'; 
SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes'; 
SELECT COUNT(*) FROM Products WHERE product_type_code = 'hardware' 
SELECT COUNT(*) FROM Products WHERE product_type_code = 'Hardware'; 
SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products); 
SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products); 
SELECT product_name, product_price FROM Products WHERE product_type_code = 'hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'hardware'); 
SELECT product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware'); 
SELECT product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1; 
SELECT product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1; 
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT 1; 
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT 1; 
SELECT product_name FROM Products ORDER BY product_price DESC; 
SELECT product_name FROM Products ORDER BY product_price DESC; 
SELECT product_name, product_price FROM Products WHERE product_type_code = 'hardware' ORDER BY product_price ASC; 
SELECT product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC; 
SELECT product_type_code, COUNT(*) AS num_products FROM Products GROUP BY product_type_code ORDER BY num_products DESC;  
SELECT product_type_code, COUNT(*) AS product_count FROM Products GROUP BY product_type_code;  
SELECT product_type_code, AVG(product_price) FROM Products GROUP BY product_type_code; 
SELECT product_type_code, AVG(product_price) FROM Products GROUP BY product_type_code; 
SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(*) >= 2; 
SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(*) >= 2; 
SELECT product_type_code, COUNT(*) AS num_products 
SELECT product_type_code, COUNT(*) AS count FROM Products GROUP BY product_type_code ORDER BY count DESC LIMIT 1;  
SELECT COUNT(*) FROM Customers; 
SELECT COUNT(*) FROM Customers; 
SELECT customer_id, customer_name FROM Customers; 
SELECT customer_id, customer_name FROM Customers; 
SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy'; 
SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy'; 
SELECT payment_method_code, COUNT(*) AS num_customers FROM Customers GROUP BY payment_method_code ORDER BY num_customers DESC;  
SELECT payment_method_code, COUNT(*) AS customer_count FROM Customers GROUP BY payment_method_code ORDER BY customer_count DESC;  
SELECT payment_method_code, COUNT(*) AS count 
SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT customer_name, payment_method_code FROM Customers ORDER BY payment_method_code ASC LIMIT 1;  
SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1); 
SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy'; 
SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy'; 
SELECT DISTINCT payment_method_code FROM Customers; 
SELECT DISTINCT payment_method_code FROM Customers; 
SELECT product_id, product_type_code FROM Products ORDER BY product_name; 
SELECT product_id, product_type_code FROM Products ORDER BY product_name ASC; 
SELECT product_type_code, COUNT(*) AS num_products 
SELECT product_type_code 
SELECT COUNT(*) FROM Customer_Orders; 
SELECT COUNT(*) FROM Customer_Orders; 
SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id IN (SELECT customer_id FROM Customers WHERE customer_name = 'Jeromy') ORDER BY order_date DESC;  
SELECT order_id, order_date, order_status_code 
SELECT customer_name, customer_id, COUNT(order_id) AS num_orders 
SELECT customer_name, customer_id, COUNT(order_id) AS num_orders 
SELECT customer_id, customer_name, customer_phone, customer_email 
SELECT customer_id, customer_name, customer_phone, customer_email 
SELECT order_status_code, COUNT(*) AS num_orders FROM Customer_Orders GROUP BY order_status_code;  
SELECT order_status_code, COUNT(*) AS order_count FROM Customer_Orders GROUP BY order_status_code ORDER BY order_count DESC;  
SELECT order_status_code, COUNT(*) AS count 
SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders); 
SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders); 
SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items); 
SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items); 
SELECT COUNT(*) FROM Order_Items WHERE product_id IN (SELECT product_id FROM Products WHERE product_name = 'Monitor') 
SELECT COUNT(*) AS total_number_of_monitor_products 
SELECT COUNT(*) FROM Customers WHERE customer_id IN (SELECT customer_id FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items WHERE product_id IN (SELECT product_id FROM Products WHERE product_name = 'Monitor'))) 
SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items WHERE product_id IN (SELECT product_id FROM Products WHERE product_type_code = 'Monitor')); 
SELECT COUNT(*) FROM Customers WHERE customer_id IN (SELECT customer_id FROM Customer_Orders); 
SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders; 
SELECT customer_id FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders); 
SELECT customer_id FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders); 
SELECT order_date, order_id FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items WHERE order_quantity > 6 OR product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) > 3)); 
SELECT order_id, order_date FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items WHERE order_quantity > 6 OR order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(*) > 3)); 
SELECT COUNT(*) FROM building; 
SELECT COUNT(*) FROM building; 
SELECT Name FROM building ORDER BY Number_of_Stories ASC; 
SELECT Name FROM building ORDER BY Number_of_Stories ASC; 
SELECT Address FROM building ORDER BY Completed_Year DESC; 
SELECT Address FROM building ORDER BY Completed_Year DESC; 
SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year!= 1980; 
SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year!= 1980; 
SELECT AVG(Population) FROM region; 
SELECT AVG(Population) FROM region; 
SELECT Name FROM region ORDER BY Name ASC; 
SELECT Name FROM region ORDER BY Name ASC; 
SELECT Capital FROM region WHERE Area > 10000; 
SELECT Capital FROM region WHERE Area > 10000; 
SELECT Capital FROM region WHERE Population = (SELECT MAX(Population) FROM region); 
SELECT Capital FROM region WHERE Population = (SELECT MAX(Population) FROM region); 
SELECT Name FROM region ORDER BY Area DESC LIMIT 5; 
SELECT Name FROM region ORDER BY Area DESC LIMIT 5; 
SELECT building.Name, region.Name FROM building, region WHERE building.Region_ID = region.Region_ID; 
SELECT building.Name, region.Name 
SELECT Name FROM region WHERE Region_ID IN (SELECT Region_ID FROM building GROUP BY Region_ID HAVING COUNT(*) > 1); 
SELECT Name FROM region WHERE Region_ID IN (SELECT Region_ID FROM building GROUP BY Region_ID HAVING COUNT(*) > 1); 
SELECT Capital FROM region WHERE Region_ID = (SELECT Region_ID FROM building GROUP BY Region_ID ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT Capital FROM region WHERE Region_ID = (SELECT Region_ID FROM building GROUP BY Region_ID ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT Address, Capital FROM building, region WHERE building.Region_ID = region.Region_ID; 
SELECT building.address, region.name FROM building INNER JOIN region ON building.region_id = region.region_id; 
SELECT Number_of_Stories FROM building WHERE Region_ID IN (SELECT Region_ID FROM region WHERE Name = 'Abruzzo') 
SELECT Number_of_Stories FROM building WHERE Region_ID IN (SELECT Region_ID FROM region WHERE Name = 'Abruzzo') 
SELECT Completed_Year, COUNT(*) FROM building GROUP BY Completed_Year 
SELECT Completed_Year, COUNT(*) FROM building GROUP BY Completed_Year ORDER BY Completed_Year ASC; 
SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building); 
SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building); 
SELECT Completed_Year FROM building WHERE Number_of_Stories > 20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories < 15; 
SELECT Completed_Year FROM building WHERE Number_of_Stories > 20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories < 15; 
SELECT DISTINCT Address FROM building; 
SELECT DISTINCT Address FROM building; 
SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC; 
SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC; 
SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC; 
SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC; 
SELECT COUNT(*) FROM Services; 
SELECT COUNT(*) FROM Services; 
SELECT Analytical_Layer_Type_Code, COUNT(*) AS Count 
SELECT Analytical_Layer_Type_Code, COUNT(Analytical_Layer_Type_Code) AS Count 
SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch') 
SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch')); 
SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID HAVING COUNT(*) > 3); 
SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID HAVING COUNT(*) > 3); 
SELECT Customer_Details, COUNT(*) AS num_services 
SELECT Customer_Details, COUNT(Service_ID) AS Service_Count 
SELECT Customer_Details 
SELECT Customer_Details 
SELECT Customer_Details FROM Customers WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services); 
SELECT Customer_Details FROM Customers WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services); 
SELECT Customer_Details 
SELECT DISTINCT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services WHERE Service_ID IN (SELECT Service_ID FROM Services WHERE Service_Details = 'Least Commonly Used Service')); 
SELECT COUNT(DISTINCT Customers_and_Services_Details) FROM Customers_and_Services; 
SELECT COUNT(*) AS total_available_customers_and_services_details 
SELECT * FROM Customers WHERE Customer_Details LIKE '%Kutch%'; 
SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%'; 
SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch') UNION SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'good') 
SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch') OR Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'good')) 
SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch') AND Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'bad')); 
SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Customer_ID = (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch') AND Status_Code = 'bad') 
SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Channel_ID IN (SELECT Channel_ID FROM Channels WHERE Channel_Details = '15 ij')); 
SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Channel_ID IN (SELECT Channel_ID FROM Channels WHERE Channel_Details = '15 ij')); 
SELECT * FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Status_Code = 'Stuck' AND Services_and_Channels_Details = 'bad') 
SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Status_Code = 'Stuck' AND Services_and_Channels_Details = 'bad') 
SELECT COUNT(*) FROM Integration_Platform WHERE Integration_Platform_Details = 'Successful' 
SELECT COUNT(*) FROM Integration_Platform WHERE Integration_Platform_Details LIKE '%Success%'; 
SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Integration_Platform WHERE Integration_Platform_Details = 'Failed'));  
SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Integration_Platform WHERE Integration_Platform_Details = 'Fail')) 
SELECT Service_Details FROM Services WHERE Service_ID NOT IN (SELECT Service_ID FROM Customers_and_Services); 
SELECT Service_Details FROM Services WHERE Service_ID NOT IN (SELECT Service_ID FROM Customers_and_Services); 
SELECT Analytical_Layer_Type_Code, COUNT(*) AS usage_count 
SELECT Analytical_Layer_Type_Code, COUNT(*) AS Count 
SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customers_and_Services_Details = 'unsatisfied') 
SELECT Service_Details FROM Services WHERE Service_Details = 'unsatisfied'; 
SELECT COUNT(*) FROM Vehicles; 
SELECT COUNT(*) FROM Vehicles; 
SELECT name FROM Vehicles ORDER BY Model_year DESC; 
SELECT name FROM Vehicles ORDER BY Model_year DESC; 
SELECT DISTINCT Type_of_powertrain FROM Vehicles; 
SELECT Type_of_powertrain FROM Vehicles; 
SELECT name, type_of_powertrain, annual_fuel_cost FROM Vehicles WHERE Model_year IN (2013, 2014); 
SELECT name, type_of_powertrain, annual_fuel_cost FROM Vehicles WHERE model_year IN (2013, 2014); 
SELECT Type_of_powertrain FROM Vehicles WHERE Model_year IN (2014, 2013) GROUP BY Type_of_powertrain HAVING COUNT(*) = 2; 
SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Model_year IN (2013, 2014);  
SELECT Type_of_powertrain, COUNT(*) AS num_vehicles FROM Vehicles GROUP BY Type_of_powertrain ORDER BY num_vehicles DESC;  
SELECT Type_of_powertrain, COUNT(*) AS num_vehicles FROM Vehicles GROUP BY Type_of_powertrain ORDER BY num_vehicles DESC;  
SELECT Type_of_powertrain, COUNT(*) AS num_vehicles FROM Vehicles GROUP BY Type_of_powertrain ORDER BY num_vehicles DESC LIMIT 1;  
SELECT Type_of_powertrain, COUNT(*) AS count FROM Vehicles GROUP BY Type_of_powertrain ORDER BY count DESC LIMIT 1;  
SELECT MIN(annual_fuel_cost), MAX(annual_fuel_cost), AVG(annual_fuel_cost) FROM Vehicles; 
SELECT MIN(annual_fuel_cost), MAX(annual_fuel_cost), AVG(annual_fuel_cost) FROM Vehicles; 
SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate; 
SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate; 
SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS avg_annual_fuel_cost 
SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS avg_annual_fuel_cost 
SELECT name, age, membership_credit FROM Customers; 
SELECT name, age, membership_credit FROM Customers; 
SELECT name, age FROM Customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM Customers); 
SELECT name, age FROM Customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM Customers); 
SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers); 
SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers); 
SELECT * FROM Discount; 
SELECT * FROM Discount; 
SELECT Vehicles.name, SUM(Renting_history.total_hours) AS total_hours 
SELECT Vehicles.name, SUM(Renting_history.total_hours) AS total_rental_hours 
SELECT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history); 
SELECT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history); 
SELECT name FROM Customers WHERE id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(*) >= 2); 
SELECT name FROM Customers WHERE id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(*) >= 2); 
SELECT name, Model_year FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT name, Model_year FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY COUNT(vehicles_id) DESC LIMIT 1); 
SELECT Vehicles.name, SUM(Renting_history.total_hours) AS total_hours 
SELECT Vehicles.name, SUM(total_hours) AS total_hours 
SELECT name FROM Discount WHERE id IN (SELECT discount_id FROM Renting_history GROUP BY discount_id ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT name FROM Discount WHERE id IN (SELECT discount_id FROM Renting_history GROUP BY discount_id ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT name, Type_of_powertrain FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history WHERE total_hours > 30); 
SELECT name, Type_of_powertrain FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history WHERE total_hours > 30); 
SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS avg_city_fuel_rate, AVG(Highway_fuel_economy_rate) AS avg_highway_fuel_rate 
SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS avg_city_fuel_economy_rate, AVG(Highway_fuel_economy_rate) AS avg_highway_fuel_economy_rate FROM Vehicles GROUP BY Type_of_powertrain ORDER BY Type_of_powertrain ASC; 
SELECT AVG(amount_of_loan) FROM Student_Loans; 
SELECT AVG(amount_of_loan) FROM Student_Loans; 
SELECT Students.bio_data, Students.student_id 
SELECT student_details, student_id FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(class_id) >= 2) OR student_id IN (SELECT student_id FROM Detention GROUP BY student_id HAVING COUNT(detention_id) < 2); 
SELECT teacher_details FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE class_details LIKE '%data%') AND teacher_id NOT IN (SELECT teacher_id FROM Classes WHERE class_details LIKE 'net%') 
SELECT teacher_details FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE class_details LIKE '%data%' AND teacher_id NOT IN (SELECT teacher_id FROM Classes WHERE class_details LIKE 'net%')) 
SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention UNION SELECT student_id FROM Student_Loans); 
SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention UNION SELECT student_id FROM Student_Loans); 
SELECT student_loan_id, date_of_loan, amount_of_loan FROM Student_Loans WHERE student_id IN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(*) >= 2) ORDER BY date_of_loan DESC;  
SELECT amount_of_loan, date_of_loan FROM Student_Loans WHERE student_id IN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(*) >= 2) ORDER BY date_of_loan DESC;  
SELECT teacher_details, teacher_id 
SELECT teacher_details, teacher_id 
SELECT DISTINCT detention_summary FROM Detention; 
SELECT DISTINCT detention_summary FROM Detention; 
SELECT Students.bio_data, Ref_Address_Types.address_type_description 
SELECT Students.bio_data, Ref_Address_Types.address_type_description 
SELECT address_details, bio_data FROM Students_Addresses JOIN Addresses ON Students_Addresses.address_id = Addresses.address_id JOIN Students ON Students_Addresses.student_id = Students.student_id; 
SELECT Students.bio_data, Addresses.address_details 
SELECT Students.bio_data, Transcripts.date_of_transcript FROM Students INNER JOIN Transcripts ON Students.student_id = Transcripts.student_id;  
SELECT Students.bio_data, Transcripts.date_of_transcript FROM Students INNER JOIN Transcripts ON Students.student_id = Transcripts.student_id;  
SELECT COUNT(*) AS count, behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count DESC LIMIT 1;  
SELECT COUNT(*) AS count, behaviour_monitoring_details AS details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count DESC LIMIT 1;  
SELECT Students.bio_data, Students.student_details 
SELECT Students.bio_data, Students.student_details 
SELECT student_id, bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Behaviour_Monitoring)) ORDER BY student_id ASC;  
SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT Students.bio_data, Student_Events.event_date 
SELECT Students.bio_data, Student_Events.event_date 
SELECT COUNT(*) AS number_of_students, event_type_code, event_type_description 
SELECT COUNT(*) AS number_of_students, event_type_code, event_type_description 
SELECT achievement_details, achievement_type_description FROM Achievements INNER JOIN Ref_Achievement_Type ON Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code;  
SELECT achievement_details, achievement_type_description FROM Achievements INNER JOIN Ref_Achievement_Type ON Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code;  
SELECT COUNT(*) AS num_teachers 
SELECT COUNT(*) AS num_teachers 
SELECT date_of_transcript, transcript_details FROM Transcripts;  
SELECT date_of_transcript, transcript_details FROM Transcripts;  
SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements;  
SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements; 
SELECT datetime_detention_start, datetime_detention_end FROM Detention;  
SELECT datetime_detention_start, datetime_detention_end FROM Detention; 
SELECT bio_data FROM Students WHERE bio_data LIKE '%Suite%'; 
SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'; 
SELECT teacher_details, student_details FROM Teachers INNER JOIN Classes ON Teachers.teacher_id = Classes.teacher_id INNER JOIN Students ON Classes.student_id = Students.student_id;  
SELECT teacher_details, student_details FROM Teachers, Students, Classes WHERE Teachers.teacher_id = Classes.teacher_id AND Students.student_id = Classes.student_id; 
SELECT MAX(teacher_id) AS teacher_id, COUNT(class_id) AS num_courses 
SELECT teacher_id, COUNT(*) AS num_courses 
SELECT MAX(COUNT) AS max_courses, student_id 
SELECT student_id, COUNT(*) AS num_courses 
SELECT student_id, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) = 2) ORDER BY student_id ASC;  
SELECT student_id, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) = 2) ORDER BY student_id ASC;  
SELECT  
SELECT  
SELECT Students.bio_data, Students.student_details 
SELECT bio_data, student_details 
SELECT MIN(date_of_loan) FROM Student_Loans; 
SELECT MIN(date_of_loan) FROM Student_Loans; 
SELECT student_id, bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan ASC LIMIT 1);  
SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan ASC LIMIT 1); 
SELECT date_of_transcript FROM Transcripts WHERE student_id IN (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan DESC LIMIT 1);  
SELECT date_of_transcript 
SELECT teacher_details FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE student_id IN (SELECT student_id FROM Transcripts ORDER BY date_of_transcript ASC LIMIT 1)) ORDER BY teacher_details ASC;  
SELECT teacher_details FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE student_id IN (SELECT student_id FROM Transcripts ORDER BY date_of_transcript ASC LIMIT 1))  
SELECT student_id, SUM(amount_of_loan) AS total_loan FROM Student_Loans GROUP BY student_id;  
SELECT student_id, SUM(amount_of_loan) AS total_loan FROM Student_Loans GROUP BY student_id;  
SELECT student_id, bio_data, COUNT(*) AS course_count FROM Students GROUP BY student_id ORDER BY course_count DESC;  
SELECT student_id, bio_data, COUNT(class_id) AS num_courses 
SELECT COUNT(*) AS student_count 
SELECT COUNT(*) FROM Students s 
SELECT address_type_code, address_type_description 
SELECT address_type_code, address_type_description 
SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Events) AND student_id NOT IN (SELECT student_id FROM Student_Loans); 
SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Events) AND student_id NOT IN (SELECT student_id FROM Student_Loans); 
SELECT datetime_detention_start, datetime_detention_end FROM Detention WHERE student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(*) = 2) ORDER BY datetime_detention_start ASC;  
SELECT datetime_detention_start, datetime_detention_end FROM Detention WHERE student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(*) = 2) ORDER BY datetime_detention_start ASC;  
SELECT datetime_detention_start FROM Detention; 
SELECT datetime_detention_start FROM Detention;  
SELECT Name FROM Author; 
SELECT Name FROM Author; 
SELECT Name, Address FROM Client; 
SELECT Name, Address FROM Client; 
SELECT Title, ISBN, SalePrice FROM Book; 
SELECT Title, ISBN, SalePrice FROM Book; 
SELECT COUNT(*) FROM Book; 
SELECT COUNT(*) FROM Book; 
SELECT COUNT(*) FROM Author; 
SELECT COUNT(*) FROM Author; 
SELECT COUNT(*) FROM Client; 
SELECT COUNT(*) FROM Client; 
SELECT Name, Address FROM Client ORDER BY Name ASC; 
SELECT Name, Address FROM Client ORDER BY Name ASC; 
SELECT Title, Name FROM Book, Author_Book, Author WHERE Book.ISBN = Author_Book.ISBN AND Author_Book.Author = Author.idAuthor; 
SELECT Book.Title, Author.Name FROM Book INNER JOIN Author ON Book.Author = Author.idAuthor 
SELECT Orders.IdOrder, Client.Name FROM Orders INNER JOIN Client ON Orders.IdClient = Client.IdClient;  
SELECT Orders.IdOrder, Client.Name FROM Orders INNER JOIN Client ON Orders.IdClient = Client.IdClient;  
SELECT Author.Name, COUNT(*) AS num_books 
SELECT Author.Name, COUNT(*) AS BooksWritten FROM Author INNER JOIN Author_Book ON Author.idAuthor = Author_Book.Author GROUP BY Author.Name ORDER BY BooksWritten DESC;  
SELECT ISBN, COUNT(IdOrder) FROM Books_Order GROUP BY ISBN; 
SELECT ISBN, COUNT(*) FROM Books_Order GROUP BY ISBN; 
SELECT ISBN, SUM(amount) FROM Books_Order GROUP BY ISBN; 
SELECT ISBN, SUM(amount) AS total_amount FROM Books_Order GROUP BY ISBN;  
SELECT Title 
SELECT Title, COUNT(*) AS num_orders 
SELECT Title, PurchasePrice 
SELECT Title, PurchasePrice 
SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order); 
SELECT DISTINCT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order); 
SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders); 
SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders); 
SELECT Name, COUNT(*) FROM Client, Orders WHERE Client.IdClient = Orders.IdClient GROUP BY Name; 
SELECT Name, COUNT(*) FROM Client, Orders WHERE Client.IdClient = Orders.IdClient GROUP BY Name; 
SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders GROUP BY IdClient HAVING COUNT(IdClient) = (SELECT MAX(COUNT(IdClient)) FROM Orders GROUP BY IdClient)); 
SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders GROUP BY IdClient HAVING COUNT(IdClient) = (SELECT MAX(COUNT(IdClient)) FROM Orders GROUP BY IdClient)); 
SELECT Client.Name, SUM(Books_Order.amount) AS TotalBooksOrdered FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient INNER JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY Client.Name;  
SELECT Client.Name, SUM(Books_Order.amount) AS TotalBooksOrdered 
SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE amount IN (SELECT MAX(amount) FROM Books_Order))); 
SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE amount IN (SELECT MAX(amount) FROM Books_Order))); 
SELECT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order); 
SELECT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order); 
SELECT Name FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders); 
SELECT Name FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders); 
SELECT MAX(SalePrice), MIN(SalePrice) FROM Book; 
SELECT MAX(SalePrice), MIN(SalePrice) FROM Book; 
SELECT AVG(PurchasePrice), AVG(SalePrice) FROM Book; 
SELECT AVG(PurchasePrice), AVG(SalePrice) FROM Book; 
SELECT MAX(SalePrice - PurchasePrice) FROM Book; 
SELECT MAX(SalePrice - PurchasePrice) FROM Book; 
SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book); 
SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book); 
SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book); 
SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book); 
SELECT Title FROM Book WHERE PurchasePrice = (SELECT MAX(PurchasePrice) FROM Book); 
SELECT Title FROM Book WHERE PurchasePrice = (SELECT MAX(PurchasePrice) FROM Book); 
SELECT AVG(SalePrice) FROM Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name = 'George Orwell'); 
SELECT AVG(SalePrice) FROM Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name = 'George Orwell'); 
SELECT SalePrice FROM Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name = 'Plato'); 
SELECT SalePrice FROM Book WHERE Author = 'Plato'; 
SELECT Title FROM Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'George Orwell') ORDER BY SalePrice ASC LIMIT 1; 
SELECT Title FROM Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'George Orwell') AND SalePrice = (SELECT MIN(SalePrice) FROM Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'George Orwell')); 
SELECT Title FROM Book WHERE Author = 'Plato' AND SalePrice < (SELECT AVG(SalePrice) FROM Book); 
SELECT Title FROM Book WHERE Author = 'Plato' AND SalePrice < (SELECT AVG(SalePrice) FROM Book); 
SELECT Author.Name FROM Author INNER JOIN Author_Book ON Author.idAuthor = Author_Book.Author WHERE Author_Book.ISBN = 'Pride and Prejudice'  
SELECT Name FROM Author WHERE idAuthor IN (SELECT Author FROM Author_Book WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice')); 
SELECT Title FROM Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name LIKE '%Plato%'); 
SELECT Title FROM Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name LIKE '%Plato%'); 
SELECT COUNT(*) FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice')); 
SELECT COUNT(*) FROM Books_Order WHERE ISBN = '9780141439518'; 
SELECT idOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title IN ('Pride and Prejudice', 'The Little Prince')) GROUP BY idOrder HAVING COUNT(*) = 2; 
SELECT idOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title IN ('Pride and Prejudice', 'The Little Prince')) GROUP BY idOrder HAVING COUNT(*) = 2; 
SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'Peter Doe' OR Name = 'James Smith')) GROUP BY ISBN HAVING COUNT(*) = 2; 
SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'Peter Doe' OR Name = 'James Smith')) GROUP BY ISBN HAVING COUNT(*) = 2; 
SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'Peter Doe'))) AND ISBN NOT IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'James Smith'))) 
SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'Peter Doe'))) AND ISBN NOT IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'James Smith'))) 
SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice'))) 
SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice'))) 
SELECT COUNT(*) FROM book; 
SELECT Title FROM book ORDER BY Title ASC; 
SELECT Title FROM book ORDER BY Pages DESC; 
SELECT Type, Release FROM book; 
SELECT Title, MAX(Chapters), MIN(Chapters) FROM book GROUP BY Title; 
SELECT Title FROM book WHERE Type!= 'Poet'; 
SELECT AVG(Rating) FROM review; 
SELECT Title, Rating FROM book, review WHERE book.Book_ID = review.Book_ID; 
SELECT Rating FROM review WHERE Book_ID IN (SELECT Book_ID FROM book WHERE Chapters = (SELECT MAX(Chapters) FROM book)); 
SELECT rank FROM review WHERE book_id IN (SELECT book_id FROM book WHERE pages = (SELECT MIN(pages) FROM book)); 
SELECT Title FROM book WHERE Book_ID IN (SELECT Book_ID FROM review WHERE Rank = (SELECT MAX(Rank) FROM review)); 
SELECT AVG(Readers_in_Million) FROM book JOIN review ON book.Book_ID = review.Book_ID WHERE book.Type = 'Novel'; 
SELECT Type, COUNT(*) FROM book GROUP BY Type; 
SELECT Type FROM book GROUP BY Type ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Type FROM book GROUP BY Type HAVING COUNT(*) >= 3; 
SELECT Title FROM book ORDER BY Rating ASC; 
SELECT Title, Audio FROM book ORDER BY Readers_in_Million DESC; 
SELECT COUNT(*) FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review); 
SELECT Type FROM book WHERE Chapters > 75 AND Chapters < 50; 
SELECT COUNT(DISTINCT Type) FROM book; 
SELECT Type, Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review); 
SELECT COUNT(*) FROM customer; 
SELECT COUNT(*) FROM customer; 
SELECT Name FROM customer ORDER BY Level_of_Membership ASC; 
SELECT Name FROM customer ORDER BY Level_of_Membership ASC; 
SELECT Nationality, Card_Credit FROM customer; 
SELECT Nationality, Card_Credit FROM customer; 
SELECT Name FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia'; 
SELECT Name FROM customer WHERE Nationality IN ('England', 'Australia'); 
SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1; 
SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1; 
SELECT Card_Credit FROM customer WHERE Level_of_Membership = (SELECT MAX(Level_of_Membership) FROM customer); 
SELECT Name, Card_Credit FROM customer WHERE Level_of_Membership = (SELECT MAX(Level_of_Membership) FROM customer); 
SELECT Nationality, COUNT(*) FROM customer GROUP BY Nationality; 
SELECT Nationality, COUNT(*) FROM customer GROUP BY Nationality; 
SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(Nationality) DESC LIMIT 1; 
SELECT Nationality, COUNT(*) AS count 
SELECT DISTINCT Nationality FROM customer WHERE Card_Credit < 50 AND Card_Credit > 75; 
SELECT DISTINCT Nationality FROM customer WHERE Card_Credit > 50 AND Card_Credit < 75; 
SELECT customer.Name, customer_order.Dish_Name FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID;  
SELECT customer.Name, customer_order.Dish_Name FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID;  
SELECT customer.Name, customer_order.Dish_Name 
SELECT customer.Name, customer_order.Dish_Name FROM customer, customer_order WHERE customer.Customer_ID = customer_order.Customer_ID ORDER BY customer_order.Quantity DESC; 
SELECT Name, SUM(Quantity) FROM customer_order GROUP BY Name; 
SELECT customer.Name, SUM(customer_order.Quantity) AS total_quantity 
SELECT Name FROM customer WHERE Customer_ID IN (SELECT Customer_ID FROM customer_order GROUP BY Customer_ID HAVING SUM(Quantity) > 1); 
SELECT Name FROM customer WHERE Customer_ID IN (SELECT Customer_ID FROM customer_order GROUP BY Customer_ID HAVING SUM(Quantity) > 1); 
SELECT DISTINCT Manager FROM branch; 
SELECT DISTINCT Manager FROM branch; 
SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order); 
SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order); 
SELECT COUNT(*) FROM member; 
SELECT Name FROM member ORDER BY Age ASC; 
SELECT Name, Nationality FROM member; 
SELECT Name FROM member WHERE Nationality!= 'England'; 
SELECT Name FROM member WHERE Age = 19 OR Age = 20; 
SELECT Name FROM member WHERE Age = (SELECT MAX(Age) FROM member); 
SELECT Nationality, COUNT(*) FROM member GROUP BY Nationality; 
SELECT Nationality, COUNT(*) AS count FROM member GROUP BY Nationality ORDER BY count DESC LIMIT 1;  
SELECT DISTINCT Nationality FROM member WHERE Nationality IN (SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(Nationality) >= 2); 
SELECT member.Name, club.Club_Name 
SELECT Name FROM member WHERE Member_ID IN (SELECT Member_ID FROM club_leader WHERE Club_ID IN (SELECT Club_ID FROM club WHERE Overall_Ranking > 100)); 
SELECT Name FROM member WHERE Member_ID IN (SELECT Member_ID FROM club_leader WHERE Year_Join < '2018') 
SELECT Name FROM member WHERE Name IN (SELECT Team_Leader FROM club WHERE Club_Name = 'Houston'); 
SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM club_leader); 
SELECT DISTINCT Nationality FROM member WHERE Age > 22 AND Age < 19; 
SELECT AVG(Age) FROM member WHERE Member_ID IN (SELECT Member_ID FROM club_leader); 
SELECT Club_Name FROM club WHERE Club_Name LIKE '%state%'; 
SELECT Collection_Subset_Name FROM Collection_Subsets;  
SELECT Collection_Subset_Name FROM Collection_Subsets; 
SELECT Collection_Subset_Details 
SELECT Collection_Name, Collection_Description FROM Collections WHERE Collection_ID IN (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Top collection')); 
SELECT Document_Subset_Name FROM Document_Subsets;  
SELECT Document_Subset_Name FROM Document_Subsets; 
SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000' 
SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000';  
SELECT Document_Object_ID FROM Document_Objects; 
SELECT Document_Object_ID FROM Document_Objects; 
SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin' AND Parent_Document_Object_ID IS NOT NULL;  
SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin'; 
SELECT Owner FROM Document_Objects WHERE Description = 'Braeden Collection'; 
SELECT Owner FROM Document_Objects WHERE Description = 'Braeden Collection'; 
SELECT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin') 
SELECT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin') 
SELECT DISTINCT Description FROM Document_Objects WHERE Parent_Document_Object_ID IS NULL; 
SELECT DISTINCT Description FROM Document_Objects WHERE Parent_Document_Object_ID IS NULL; 
SELECT COUNT(*) FROM Document_Objects WHERE Owner = 'Marlin'; 
SELECT COUNT(*) FROM Document_Objects WHERE Owner = 'Marlin'; 
SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NULL; 
SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NULL;  
SELECT Document_Object_ID, COUNT(*) AS num_children 
SELECT Document_Object_ID, COUNT(*) AS num_children 
SELECT Collection_Name FROM Collections; 
SELECT Collection_Name FROM Collections; 
SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best'; 
SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best'; 
SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Parent_Collection_ID FROM Collections WHERE Collection_Name = 'Nice'); 
SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Parent_Collection_ID FROM Collections WHERE Collection_Name = 'Nice'); 
SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections WHERE Parent_Collection_ID IS NOT NULL); 
SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections WHERE Parent_Collection_ID IS NOT NULL); 
SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL AND Document_Object_ID IN (SELECT Related_Document_Object_ID FROM Document_Subset_Members GROUP BY Related_Document_Object_ID HAVING COUNT(*) > 1);  
SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL AND (SELECT COUNT(*) FROM Document_Objects WHERE Parent_Document_Object_ID = Document_Objects.Document_Object_ID) > 1;  
SELECT COUNT(*) FROM Collections WHERE Parent_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') 
SELECT COUNT(*) FROM Collections WHERE Parent_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') 
SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom' AND Document_Object_ID IN (SELECT Related_Document_Object_ID FROM Document_Subset_Members) ORDER BY Document_Object_ID ASC; 
SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom'  
SELECT Collection_Subset_ID, Collection_Subset_Name, COUNT(*) AS num_collections 
SELECT Collection_Subset_ID, Collection_Subset_Name, COUNT(*) AS num_collections 
SELECT Document_Object_ID, COUNT(*) AS num_child 
SELECT Document_Object_ID, COUNT(*) AS num_children 
SELECT Document_Object_ID, COUNT(*) AS num_related_docs 
SELECT Document_Object_ID, COUNT(*) AS num_docs 
SELECT Document_Object_ID, COUNT(*) AS num_related_docs 
SELECT Document_Object_ID, COUNT(*) AS num_related_items 
SELECT DISTINCT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden')) AND Owner!= 'Braeden' 
SELECT DISTINCT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden')) AND Owner!= 'Braeden' 
SELECT Document_Subset_Name FROM Document_Subsets WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden')) ORDER BY Document_Subset_Name ASC;  
SELECT Document_Subset_Name FROM Document_Subsets WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden')) ORDER BY Document_Subset_Name ASC;  
SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Document_Object_ID) AS num_docs 
SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Document_Object_ID) AS num_docs 
SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Document_Object_ID) AS num_docs 
SELECT Document_Subset_ID, Document_Subset_Name, COUNT(*) AS num_docs 
SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') 
SELECT Document_Object_ID 
SELECT Document_Subset_Name, Document_Object_ID 
SELECT Document_Subset_Name, Document_Object_ID 
SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Documents_in_Collections WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom')) ORDER BY Collection_Name ASC; 
SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Documents_in_Collections WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom')) ORDER BY Collection_Name ASC; 
SELECT COUNT(Collection_ID), Document_Object_ID FROM Documents_in_Collections GROUP BY Document_Object_ID;  
SELECT Document_Object_ID, COUNT(Collection_ID) AS num_collections 
SELECT COUNT(*) FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') 
SELECT COUNT(*) FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') 
SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') 
SELECT COUNT(Document_Object_ID) FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') 
SELECT Collection_Name, Collection_ID, COUNT(Document_Object_ID) AS num_docs 
SELECT Collection_Name, Collection_ID, COUNT(Document_Object_ID) AS num_docs 
SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') AND Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')) 
SELECT Document_Object_ID 
SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')) 
SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Document_Object_ID NOT IN (SELECT Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')) ORDER BY Document_Object_ID ASC;  
SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') UNION SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') 
SELECT Document_Object_ID 
SELECT Collection_Name FROM Collections WHERE Collection_Name = 'Best'; 
SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best')); 
SELECT COUNT(*) FROM Collections WHERE Collection_Name = 'Best' AND Collection_ID IN (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best')) AND Collection_ID NOT IN (SELECT Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best')) 
SELECT COUNT(DISTINCT Collection_ID) FROM Collections WHERE Collection_Name = 'Best'; 
SELECT Collection_Subset_Name FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best in'  
SELECT Collection_Subset_Name FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best' AND Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subset_Members WHERE Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')) ORDER BY Collection_Subset_Name ASC;  
SELECT COUNT(*) FROM songs WHERE name LIKE '%Love%'; 
SELECT name FROM songs ORDER BY name ASC; 
SELECT name, language FROM songs; 
SELECT MAX(voice_sound_quality), MIN(voice_sound_quality) FROM performance_score; 
SELECT voice_sound_quality, rhythm_tempo, stage_presence FROM performance_score WHERE participant_id IN (SELECT id FROM participants WHERE name = 'Freeway') ORDER BY voice_sound_quality DESC, rhythm_tempo DESC, stage_presence DESC LIMIT 1;  
SELECT id, language, original_artist FROM songs WHERE name!= 'Love'; 
SELECT name, original_artist FROM songs WHERE english_translation = 'All the streets of love'; 
SELECT DISTINCT stage_presence FROM performance_score WHERE songs_id IN (SELECT id FROM songs WHERE language = 'English'); 
SELECT id, name FROM participants WHERE id IN (SELECT participant_id FROM performance_score GROUP BY participant_id HAVING COUNT(*) >= 2); 
SELECT participants.id, participants.name, participants.popularity 
SELECT id, name FROM participants WHERE id IN (SELECT participant_id FROM performance_score WHERE voice_sound_quality = 5 OR rhythm_tempo = 5); 
SELECT voice_sound_quality FROM performance_score WHERE songs_id IN (SELECT id FROM songs WHERE name = 'The Balkan Girls' AND language = 'English') 
SELECT songs.id, songs.name FROM songs JOIN performance_score ON songs.id = performance_score.songs_id GROUP BY songs.id ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT COUNT(*) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9; 
SELECT COUNT(*) FROM songs WHERE id NOT IN (SELECT songs_id FROM performance_score); 
SELECT songs.language, AVG(performance_score.rhythm_tempo) AS avg_rhythm_score 
SELECT DISTINCT name FROM participants WHERE id IN (SELECT participant_id FROM performance_score WHERE songs_id IN (SELECT id FROM songs WHERE language = 'English')); 
SELECT name, popularity FROM participants WHERE id IN (SELECT participant_id FROM performance_score WHERE songs_id IN (SELECT id FROM songs WHERE language = 'Croatian') AND songs_id IN (SELECT id FROM songs WHERE language = 'English')); 
SELECT name FROM songs WHERE name LIKE '%Is%'; 
SELECT original_artist FROM songs JOIN performance_score ON songs.id = performance_score.songs_id WHERE rhythm_tempo > 5 ORDER BY voice_sound_quality DESC; 
SELECT COUNT(*) FROM City; 
SELECT COUNT(*) FROM City; 
SELECT DISTINCT state FROM City; 
SELECT DISTINCT state FROM City; 
SELECT COUNT(DISTINCT country) FROM City; 
SELECT COUNT(DISTINCT country) FROM City; 
SELECT city_name, city_code, state, country FROM City; 
SELECT city_name, city_code, state, country FROM City; 
SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore'; 
SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore'; 
SELECT city_name FROM City WHERE state = 'PA'; 
SELECT city_name FROM City WHERE state = 'PA'; 
SELECT COUNT(*) FROM City WHERE country = 'Canada'; 
SELECT COUNT(*) FROM City WHERE country = 'Canada'; 
SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude; 
SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude; 
SELECT state, COUNT(city_name) FROM City GROUP BY state; 
SELECT state, COUNT(*) FROM City GROUP BY state; 
SELECT country, COUNT(city_name) FROM City GROUP BY country; 
SELECT country, COUNT(*) AS num_cities FROM City GROUP BY country; 
SELECT DISTINCT state FROM City WHERE city_code IN (SELECT city1_code FROM Direct_distance UNION SELECT city2_code FROM Direct_distance) GROUP BY state HAVING COUNT(city_code) >= 2; 
SELECT DISTINCT state FROM City WHERE city_code IN (SELECT city1_code FROM Direct_distance UNION SELECT city2_code FROM Direct_distance) GROUP BY state HAVING COUNT(city_code) >= 2; 
SELECT state, COUNT(*) AS num_cities FROM City GROUP BY state ORDER BY num_cities DESC LIMIT 1;  
SELECT state FROM City GROUP BY state HAVING COUNT(city_name) = (SELECT MAX(count) FROM (SELECT COUNT(city_name) AS count FROM City GROUP BY state)); 
SELECT country, COUNT(*) AS num_cities FROM City GROUP BY country ORDER BY num_cities ASC LIMIT 1;  
SELECT country FROM City GROUP BY country HAVING COUNT(city_code) = (SELECT MIN(count) FROM (SELECT COUNT(city_code) AS count FROM City GROUP BY country)); 
SELECT Fname, LName FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE state = 'MD'); 
SELECT Fname ||'' || LName FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE state = 'MD'); 
SELECT COUNT(*) FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE country = 'China'); 
SELECT COUNT(*) FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE country = 'China'); 
SELECT Fname, Major FROM Student WHERE city_code = 'BAL'; 
SELECT Fname, Major FROM Student WHERE city_code = 'BAL'; 
SELECT country, COUNT(*) FROM Student GROUP BY country; 
SELECT country, COUNT(*) FROM Student GROUP BY country; 
SELECT city_name, COUNT(*) FROM Student, City WHERE Student.city_code = City.city_code GROUP BY city_name; 
SELECT city_name, COUNT(*) FROM Student, City WHERE Student.city_code = City.city_code GROUP BY city_name; 
SELECT state, COUNT(*) AS num_students 
SELECT state FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT city_code, COUNT(*) AS count FROM Student GROUP BY city_code))); 
SELECT country, COUNT(*) AS num_students 
SELECT country FROM City WHERE city_code IN (SELECT city_code FROM Student) GROUP BY country ORDER BY COUNT(*) ASC LIMIT 1; 
SELECT city_name FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) >= 3); 
SELECT city_name FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) >= 3); 
SELECT state FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) > 5); 
SELECT state FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) > 5); 
SELECT StuID FROM Student WHERE city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA'); 
SELECT StuID FROM Student WHERE city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA'); 
SELECT StuID FROM Student WHERE Sex = 'F' AND city_code IN (SELECT city_code FROM City WHERE state = 'PA'); 
SELECT StuID FROM Student WHERE Sex = 'F' AND city_code IN (SELECT city_code FROM City WHERE state = 'PA'); 
SELECT StuID FROM Student WHERE Sex = 'M' AND city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA'); 
SELECT StuID FROM Student WHERE Sex = 'M' AND city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA'); 
SELECT distance FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI'; 
SELECT distance FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI'; 
SELECT distance FROM Direct_distance WHERE city1_code = 'BOS' AND city2_code = 'EWR'; 
SELECT distance FROM Direct_distance WHERE city1_code = 'BOS' AND city2_code = 'EWR'; 
SELECT AVG(distance), MIN(distance), MAX(distance) FROM Direct_distance; 
SELECT AVG(distance), MIN(distance), MAX(distance) FROM Direct_distance; 
SELECT city1_code, city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance); 
SELECT city1_code, city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance); 
SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance); 
SELECT city1_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance); 
SELECT city1_code, city2_code FROM Direct_distance WHERE distance < 1000; 
SELECT city1_code FROM Direct_distance WHERE distance < 1000 
SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL'; 
SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL'; 
SELECT AVG(distance) FROM Direct_distance WHERE city1_code = 'BOS' OR city2_code = 'BOS'; 
SELECT AVG(distance) FROM Direct_distance WHERE city1_code = 'BOS' OR city2_code = 'BOS'; 
SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY distance ASC LIMIT 1); 
SELECT city_name FROM City WHERE city_code IN (SELECT city2_code FROM Direct_distance WHERE city1_code = 'CHI' ORDER BY distance LIMIT 1); 
SELECT city_name FROM City WHERE city_code IN (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') ORDER BY distance DESC LIMIT 1); 
SELECT city_name FROM City WHERE city_code IN (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') ORDER BY distance DESC LIMIT 1); 
SELECT city1_code, SUM(distance) FROM Direct_distance GROUP BY city1_code; 
SELECT city_code, SUM(distance) FROM Direct_distance GROUP BY city_code; 
SELECT city_name, AVG(distance) FROM City, Direct_distance WHERE city_code = city1_code OR city_code = city2_code GROUP BY city_name; 
SELECT city_name, AVG(distance) FROM Direct_distance, City WHERE city_code = city1_code GROUP BY city_name; 
SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') AND city2_code = (SELECT city_code FROM Student WHERE Fname = 'Tracy' AND LName = 'Kim'); 
SELECT distance FROM Direct_distance WHERE city1_code IN (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') AND city2_code IN (SELECT city_code FROM Student WHERE Fname = 'Tracy' AND LName = 'Kim'); 
SELECT Fname, LName FROM Student WHERE StuID = (SELECT StuID FROM Student WHERE Fname = 'Linda' AND LName = 'Smith'); 
SELECT S1.Fname, S1.LName 
SELECT state FROM City WHERE city_code IN (SELECT city_code FROM Student WHERE Fname = 'Linda'); 
SELECT state FROM City WHERE city_code IN (SELECT city_code FROM Student WHERE Fname = 'Linda'); 
SELECT * FROM Sailors WHERE age > 30; 
SELECT * FROM Sailors WHERE age > 30; 
SELECT name, age FROM Sailors WHERE age < 30; 
SELECT name, age FROM Sailors WHERE age < 30; 
SELECT bid FROM Reserves WHERE sid = 1; 
SELECT DISTINCT bid FROM Reserves WHERE sid = 1; 
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 102); 
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 102); 
SELECT DISTINCT bid FROM Reserves; 
SELECT bid FROM Reserves; 
SELECT name FROM Sailors WHERE name LIKE '%e%'; 
SELECT name FROM Sailors WHERE name LIKE '%e%'; 
SELECT DISTINCT sid FROM Sailors WHERE age > ALL (SELECT age FROM Sailors); 
SELECT DISTINCT sid FROM Sailors WHERE age > (SELECT MIN(age) FROM Sailors); 
SELECT DISTINCT name FROM Sailors WHERE age > ALL (SELECT age FROM Sailors WHERE rating > 7); 
SELECT DISTINCT name FROM Sailors WHERE age > (SELECT age FROM Sailors WHERE rating > 7); 
SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves); 
SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves); 
SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves GROUP BY sid HAVING COUNT(*) > 1); 
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves GROUP BY sid HAVING COUNT(*) >= 2); 
SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue') 
SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue') 
SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue')) 
SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue')) 
SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue') 
SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue') 
SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue')) 
SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue')) 
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves); 
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves); 
SELECT name, sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves); 
SELECT name, sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves); 
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves); 
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves); 
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 103); 
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 103); 
SELECT name FROM Sailors WHERE rating > ALL (SELECT rating FROM Sailors WHERE name = 'Luis'); 
SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis')  
SELECT name FROM Sailors WHERE rating > ALL (SELECT rating FROM Sailors WHERE name = 'Luis'); 
SELECT name FROM Sailors WHERE rating > ALL (SELECT rating FROM Sailors WHERE name = 'Luis'); 
SELECT name, sid FROM Sailors WHERE rating > 2 AND sid IN (SELECT sid FROM Reserves); 
SELECT name, sid FROM Sailors WHERE rating >= 3 AND sid IN (SELECT sid FROM Reserves); 
SELECT name, age FROM Sailors ORDER BY age DESC LIMIT 1; 
SELECT name, age FROM Sailors WHERE age = (SELECT MAX(age) FROM Sailors); 
SELECT COUNT(*) FROM Sailors; 
SELECT COUNT(*) FROM Sailors; 
SELECT AVG(age) FROM Sailors WHERE rating = 7; 
SELECT AVG(age) FROM Sailors WHERE rating = 7; 
SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%'; 
SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%'; 
SELECT AVG(rating), MAX(age) FROM Sailors; 
SELECT AVG(rating), MAX(age) FROM Sailors; 
SELECT bid, COUNT(*) FROM Reserves GROUP BY bid; 
SELECT Boats.name, COUNT(*) AS num_reservations FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid GROUP BY Boats.name ORDER BY num_reservations DESC;  
SELECT bid, COUNT(*) FROM Reserves WHERE bid > 50 GROUP BY bid; 
SELECT bid, COUNT(*) FROM Reserves WHERE bid > 50 GROUP BY bid; 
SELECT Boats.name, COUNT(*) AS num_reservations FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid GROUP BY Boats.name HAVING COUNT(*) > 1;  
SELECT Boats.name, COUNT(*) AS num_reservations FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid GROUP BY Boats.name HAVING COUNT(*) > 1;  
SELECT Boats.bid, COUNT(*) FROM Boats, Reserves WHERE Boats.bid = Reserves.bid AND Reserves.sid > 1 GROUP BY Boats.bid; 
SELECT Boats.name, COUNT(*) FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid JOIN Sailors ON Reserves.sid = Sailors.sid WHERE Sailors.sid > 1 GROUP BY Boats.name; 
SELECT rating, AVG(age) FROM Sailors NATURAL JOIN Reserves NATURAL JOIN Boats WHERE color ='red' GROUP BY rating; 
SELECT rating, AVG(age) FROM Sailors NATURAL JOIN Reserves NATURAL JOIN Boats WHERE color ='red' GROUP BY rating; 
SELECT name, rating, age FROM Sailors ORDER BY rating, age; 
SELECT name, rating, age FROM Sailors ORDER BY rating, age; 
SELECT COUNT(*) FROM Boats; 
SELECT COUNT(*) FROM Boats; 
SELECT COUNT(*) FROM Boats WHERE color ='red'; 
SELECT COUNT(*) FROM Boats WHERE color ='red'; 
SELECT name FROM Boats WHERE bid IN (SELECT bid FROM Reserves WHERE sid IN (SELECT sid FROM Sailors WHERE age BETWEEN 20 AND 30)); 
SELECT Boats.name FROM Boats, Reserves, Sailors WHERE Reserves.bid = Boats.bid AND Reserves.sid = Sailors.sid AND Sailors.age >= 20 AND Sailors.age <= 30; 
SELECT name FROM Sailors WHERE rating > ALL (SELECT rating FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red')));  
SELECT name FROM Sailors WHERE rating > ALL (SELECT rating FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red')));  
SELECT MAX(rating) FROM Sailors; 
SELECT MAX(rating) FROM Sailors; 
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE name = 'Melon')) 
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE name = 'Melon')); 
SELECT name, age FROM Sailors ORDER BY rating DESC; 
SELECT name, age FROM Sailors ORDER BY rating DESC; 
SELECT Model FROM headphone WHERE Price = (SELECT MAX(Price) FROM headphone); 
SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1; 
SELECT Model FROM headphone ORDER BY Model ASC; 
SELECT DISTINCT Model FROM headphone ORDER BY Model ASC; 
SELECT Class, COUNT(*) AS Count 
SELECT Class, COUNT(*) AS num_headphones 
SELECT Class FROM headphone GROUP BY Class HAVING COUNT(*) > 2; 
SELECT Class FROM headphone GROUP BY Class HAVING COUNT(*) < 3; 
SELECT class, COUNT(*) FROM headphone WHERE price > 200 GROUP BY class; 
SELECT Class, COUNT(*) FROM headphone WHERE Price > 200 GROUP BY Class; 
SELECT COUNT(DISTINCT Earpads) FROM headphone; 
SELECT COUNT(DISTINCT Earpads) FROM headphone; 
SELECT Earpads, COUNT(*) AS Count 
SELECT Earpads, COUNT(*) AS num_headphones 
SELECT Model, Class, Construction FROM headphone WHERE Price = (SELECT MIN(Price) FROM headphone); 
SELECT Model, Class, Construction FROM headphone WHERE Price = (SELECT MIN(Price) FROM headphone); 
SELECT Construction, AVG(Price) FROM headphone GROUP BY Construction; 
SELECT Construction, AVG(Price) FROM headphone GROUP BY Construction; 
SELECT Class FROM headphone WHERE Earpads = 'Bowls' INTERSECT SELECT Class FROM headphone WHERE Earpads = 'Comfort Pads'; 
SELECT DISTINCT Class FROM headphone WHERE Earpads = 'Bowls' OR Earpads = 'Comfort Pads'; 
SELECT Earpads FROM headphone WHERE Construction = 'Plastic' GROUP BY Earpads HAVING COUNT(*) = 0; 
SELECT Earpads FROM headphone WHERE Construction!= 'plastic'; 
SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone); 
SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone); 
SELECT Name FROM store ORDER BY Date_Opened; 
SELECT Name FROM store ORDER BY Date_Opened; 
SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana'; 
SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana'; 
SELECT COUNT(DISTINCT Neighborhood) FROM store; 
SELECT COUNT(DISTINCT Neighborhood) FROM store; 
SELECT Neighborhood, COUNT(*) AS num_stores FROM store GROUP BY Neighborhood; 
SELECT Neighborhood, COUNT(*) AS num_stores FROM store GROUP BY Neighborhood; 
SELECT Name, SUM(Quantity) AS Total_Quantity 
SELECT store.Name, SUM(stock.Quantity) AS total_quantity 
SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock); 
SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock); 
SELECT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock); 
SELECT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock); 
SELECT Model, SUM(Quantity) AS Total_Quantity 
SELECT Model FROM headphone WHERE Headphone_ID IN (SELECT Headphone_ID FROM stock WHERE Quantity = (SELECT MAX(Quantity) FROM stock)); 
SELECT SUM(Quantity) FROM stock WHERE Store_ID = (SELECT Store_ID FROM store WHERE Name = 'Woodman'); 
SELECT SUM(Quantity) FROM stock WHERE Store_ID = (SELECT Store_ID FROM store WHERE Name = 'Woodman'); 
SELECT Neighborhood FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock); 
SELECT Neighborhood FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock); 
SELECT COUNT(*) FROM Author; 
SELECT COUNT(*) FROM Author; 
SELECT COUNT(*) FROM Paper; 
SELECT COUNT(*) FROM Paper; 
SELECT COUNT(*) FROM Affiliation; 
SELECT COUNT(*) FROM Affiliation; 
SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL 2000'; 
SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL 2000'; 
SELECT COUNT(*) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University' AND p.year = 2009; 
SELECT COUNT(*) FROM Paper WHERE Paper.paper_id IN (SELECT Paper.paper_id FROM Paper, Author_list, Affiliation WHERE Paper.paper_id = Author_list.paper_id AND Author_list.affiliation_id = Affiliation.affiliation_id AND Affiliation.name = 'Columbia University' AND Paper.year = 2009); 
SELECT name, address FROM Affiliation; 
SELECT name, address FROM Affiliation; 
SELECT venue, year FROM Paper ORDER BY year; 
SELECT DISTINCT venue, year FROM Paper ORDER BY year; 
SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Harvard University')); 
SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Harvard University')); 
SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown')); 
SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown')); 
SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Stanford University' OR name = 'Columbia University') GROUP BY paper_id HAVING COUNT(*) = 2); 
SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Stanford' OR name = 'Columbia University')); 
SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen' OR name = 'Rambow, Owen')); 
SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen' OR name = 'Rambow, Owen')); 
SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown')) AND paper_id NOT IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Rambow')); 
SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown')) AND paper_id NOT IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Rambow')); 
SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen' OR name = 'Rambow, Owen')); 
SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen' OR name = 'Rambow, Owen')); 
SELECT name, COUNT(*) AS num_papers FROM Author GROUP BY name ORDER BY num_papers DESC;  
SELECT author_id, COUNT(paper_id) AS num_papers 
SELECT affiliation_id, COUNT(paper_id) AS num_papers 
SELECT name, COUNT(paper_id) AS num_papers 
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(*) > 50); 
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(*) > 50); 
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(*) = 1); 
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(*) = 1); 
SELECT venue, year, COUNT(*) AS num_pubs FROM Paper GROUP BY venue, year ORDER BY num_pubs DESC LIMIT 1;  
SELECT venue, year, COUNT(*) AS num_papers FROM Paper GROUP BY venue, year ORDER BY num_papers DESC LIMIT 1;  
SELECT venue, COUNT(*) AS num_pubs FROM Paper GROUP BY venue ORDER BY num_pubs ASC LIMIT 1;  
SELECT venue, COUNT(*) AS num_papers FROM Paper GROUP BY venue ORDER BY num_papers ASC LIMIT 1;  
SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'A00-1002'; 
SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'A00-1002'; 
SELECT COUNT(*) FROM Citation WHERE paper_id = 'D12-1027'; 
SELECT COUNT(*) FROM Citation WHERE paper_id = 'D12-1027'; 
SELECT paper_id, COUNT(*) AS num_citations FROM Citation GROUP BY paper_id ORDER BY num_citations DESC LIMIT 1;  
SELECT paper_id, COUNT(*) AS num_citations FROM Citation GROUP BY paper_id ORDER BY num_citations DESC LIMIT 1;  
SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Citation GROUP BY paper_id))); 
SELECT p.paper_id, COUNT(c.cited_paper_id) AS num_citations 
SELECT p.paper_id, COUNT(c.cited_paper_id) AS num_citations 
SELECT COUNT(*) FROM Citation WHERE cited_paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')); 
SELECT COUNT(*) FROM Citation WHERE cited_paper_id IN (SELECT paper_id FROM Paper WHERE title LIKE '%Mckeown%' AND title LIKE '%Kathleen%' AND title LIKE '%has%'); 
SELECT COUNT(*) FROM Citation WHERE cited_paper_id IN (SELECT paper_id FROM Paper WHERE title LIKE '%Mckeown%' AND title LIKE '%Kathleen%') 
SELECT COUNT(*) FROM Citation WHERE cited_paper_id IN (SELECT paper_id FROM Paper WHERE title LIKE '%Mckeown%' AND title LIKE '%Kathleen%') 
SELECT name, COUNT(*) AS num_citations FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Citation ON Author_list.paper_id = Citation.paper_id GROUP BY name ORDER BY num_citations DESC LIMIT 1; 
SELECT name, COUNT(cited_paper_id) AS num_citations 
SELECT venue, year FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')); 
SELECT venue, year FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')); 
SELECT venue, year FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name LIKE '%Columbia%')) 
SELECT venue, year FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name LIKE '%Columbia%')) 
SELECT author_id, COUNT(*) AS num_papers 
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year = 2009)) GROUP BY author_id ORDER BY COUNT(author_id) DESC LIMIT 1; 
SELECT name FROM Affiliation WHERE affiliation_id IN (SELECT affiliation_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year = 2009)) GROUP BY affiliation_id ORDER BY COUNT(*) DESC LIMIT 3; 
SELECT affiliation_id, COUNT(*) AS num_papers 
SELECT COUNT(*) FROM Paper WHERE Paper.paper_id IN (SELECT Paper.paper_id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name LIKE '%Columbia%' AND Paper.year <= 2009); 
SELECT COUNT(*) FROM Paper WHERE venue = 'Columbia University' AND year <= 2009; 
SELECT COUNT(*) FROM Paper WHERE Paper.paper_id IN (SELECT Paper.paper_id FROM Paper, Author_list, Affiliation WHERE Paper.paper_id = Author_list.paper_id AND Author_list.affiliation_id = Affiliation.affiliation_id AND Affiliation.name = 'Stanford University' AND Paper.year >= 2000 AND Paper.year <= 2009); 
SELECT COUNT(*) FROM Paper WHERE Paper.paper_id IN (SELECT Paper.paper_id FROM Paper, Author_list, Affiliation WHERE Paper.paper_id = Author_list.paper_id AND Author_list.affiliation_id = Affiliation.affiliation_id AND Affiliation.name = 'Stanford University' AND Paper.year >= 2000 AND Paper.year <= 2009); 
SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list GROUP BY paper_id HAVING COUNT(author_id) = (SELECT MAX(count) FROM (SELECT COUNT(author_id) AS count FROM Author_list GROUP BY paper_id))); 
SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list GROUP BY paper_id HAVING COUNT(author_id) = (SELECT MAX(count) FROM (SELECT COUNT(author_id) AS count FROM Author_list GROUP BY paper_id))); 
SELECT COUNT(*) FROM Author_list WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen'))) AND author_id!= (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') 
SELECT COUNT(*) FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') AND author_id!= (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') GROUP BY author_id; 
SELECT author.name 
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen'))) GROUP BY author_id ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT paper_id FROM Paper WHERE title LIKE '%translation%'; 
SELECT paper_id FROM Paper WHERE title LIKE '%translation%'; 
SELECT paper_id, title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation); 
SELECT paper_id, title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation); 
SELECT name FROM Affiliation WHERE address LIKE '%China%' AND (SELECT COUNT(*) FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id = Affiliation.affiliation_id)) = (SELECT MAX(COUNT(*)) FROM (SELECT COUNT(*) FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id = Affiliation.affiliation_id) GROUP BY affiliation_id)); 
SELECT name FROM Affiliation WHERE affiliation_id IN (SELECT affiliation_id FROM Author_list GROUP BY affiliation_id HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT affiliation_id, COUNT(*) AS count FROM Author_list GROUP BY affiliation_id))) AND address LIKE '%China%'; 
SELECT venue, year, COUNT(*) AS num_papers FROM Paper GROUP BY venue, year ORDER BY num_papers DESC;  
SELECT venue, year, COUNT(*) AS num_papers FROM Paper GROUP BY venue, year ORDER BY num_papers DESC;  
SELECT affiliation_id, COUNT(paper_id) AS num_papers FROM Author_list GROUP BY affiliation_id ORDER BY num_papers DESC;  
SELECT affiliation_id, COUNT(paper_id) AS num_papers 
SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(*) > 50); 
SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(*) > 50); 
SELECT COUNT(*) FROM Author WHERE Author.author_id NOT IN (SELECT Author_list.author_id FROM Author_list JOIN Paper ON Author_list.paper_id = Paper.paper_id JOIN Citation ON Paper.paper_id = Citation.paper_id GROUP BY Author_list.author_id HAVING COUNT(*) > 50); 
SELECT COUNT(*) FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(*) > 50)); 
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue IN ('NAACL', 'ACL') AND year = 2009)); 
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'NAACL' AND year = 2009) AND paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'ACL' AND year = 2009)); 
SELECT name FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list); 
SELECT name FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list); 
SELECT COUNT(*) FROM conference; 
SELECT COUNT(*) FROM conference; 
SELECT DISTINCT Conference_Name FROM conference; 
SELECT DISTINCT Conference_Name FROM conference; 
SELECT Conference_Name, Year, Location FROM conference; 
SELECT Conference_Name, Year, Location FROM conference; 
SELECT conference_name, COUNT(conference_name) AS num_conferences FROM conference GROUP BY conference_name; 
SELECT conference_name, COUNT(*) AS num_occurrences FROM conference GROUP BY conference_name ORDER BY num_occurrences DESC;  
SELECT Year, COUNT(Conference_ID) FROM conference GROUP BY Year; 
SELECT COUNT(*) FROM conference GROUP BY Year; 
SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(Conference_ID) ASC LIMIT 1; 
SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(*) ASC LIMIT 1; 
SELECT Location FROM conference GROUP BY Location HAVING COUNT(Conference_ID) >= 2; 
SELECT Location FROM conference GROUP BY Location HAVING COUNT(Conference_ID) >= 2; 
SELECT Institution_Name, Location, Founded FROM institution; 
SELECT Institution_Name, Location, Founded FROM institution; 
SELECT COUNT(*) FROM institution WHERE Founded BETWEEN 1850 AND 1900; 
SELECT COUNT(*) FROM institution WHERE Founded BETWEEN 1850 AND 1900; 
SELECT Institution_Name, Location FROM institution ORDER BY Founded DESC LIMIT 1; 
SELECT Institution_Name, Location FROM institution ORDER BY Founded DESC LIMIT 1; 
SELECT institution.Institution_Name, COUNT(staff.staff_ID) AS num_staff 
SELECT institution.Institution_ID, COUNT(staff.name) AS staff_count 
SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff); 
SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff); 
SELECT name FROM staff WHERE age > (SELECT AVG(age) FROM staff); 
SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff); 
SELECT MAX(Age), MIN(Age) FROM staff WHERE Nationality = 'United States'; 
SELECT MAX(Age), MIN(Age) FROM staff; 
SELECT conference_name FROM conference WHERE conference_id IN (SELECT conference_id FROM conference_participation WHERE staff_id IN (SELECT staff_id FROM staff WHERE nationality = 'Canada')); 
SELECT conference_name FROM conference INNER JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID INNER JOIN staff ON conference_participation.staff_ID = staff.staff_ID WHERE staff.Nationality = 'Canada'; 
SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role ='speaker') AND staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role ='sponsor'); 
SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role ='speaker') AND staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role ='sponsor'); 
SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL') AND staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'Naccl')));  
SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL' OR Conference_Name = 'NACCL')); 
SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year IN (2003, 2004))); 
SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year IN (2003, 2004))); 
SELECT conference_name, year, COUNT(*) AS num_participants 
SELECT conference.Conference_ID, conference.Conference_Name, conference.Year, COUNT(conference_participation.Conference_ID) AS num_participants 
SELECT Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation GROUP BY Conference_ID ORDER BY COUNT(*) DESC LIMIT 2); 
SELECT Conference_Name FROM conference 
SELECT name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL')); 
SELECT name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL')); 
SELECT Institution_Name, Location FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year = 2004))); 
SELECT Institution_Name, Location FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year = 2004))); 
SELECT pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills); 
SELECT pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills); 
SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age; 
SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age ASC; 
SELECT * FROM PilotSkills WHERE age < 30; 
SELECT * FROM PilotSkills WHERE age < 30; 
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35; 
SELECT pilot_name FROM PilotSkills WHERE age < 35 AND plane_name = 'Piper Cub'; 
SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter'; 
SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter'; 
SELECT COUNT(DISTINCT location) FROM Hangar; 
SELECT COUNT(DISTINCT location) FROM Hangar; 
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32; 
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32; 
SELECT COUNT(*) FROM PilotSkills WHERE age > 40; 
SELECT COUNT(*) FROM PilotSkills WHERE age > 40; 
SELECT COUNT(plane_name) FROM PilotSkills WHERE age < 35 AND plane_name = 'B-52 Bomber'; 
SELECT COUNT(*) FROM PilotSkills, Hangar WHERE PilotSkills.plane_name = Hangar.plane_name AND Hangar.plane_name = 'B-52 Bomber' AND PilotSkills.age < 35; 
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC LIMIT 1; 
SELECT pilot_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub'); 
SELECT plane_name FROM Hangar WHERE location = 'New York' ORDER BY plane_name DESC LIMIT 1; 
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT plane_name FROM Hangar WHERE plane_name NOT IN (SELECT plane_name FROM PilotSkills); 
SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING COUNT(plane_name) = (SELECT MIN(count) FROM (SELECT COUNT(plane_name) AS count FROM PilotSkills GROUP BY plane_name)); 
SELECT COUNT(*) FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Chicago') 
SELECT COUNT(*) FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Chicago') 
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41; 
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41; 
SELECT COUNT(DISTINCT plane_name) FROM PilotSkills; 
SELECT COUNT(DISTINCT plane_name) FROM PilotSkills; 
SELECT COUNT(plane_name) FROM PilotSkills WHERE pilot_name = 'Smith'; 
SELECT COUNT(plane_name) FROM Hangar WHERE location = 'Smith'; 
SELECT COUNT(plane_name) FROM PilotSkills WHERE age > 40; 
SELECT COUNT(plane_name) FROM PilotSkills WHERE age > 40; 
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC; 
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC; 
SELECT pilot_name FROM PilotSkills ORDER BY age DESC; 
SELECT pilot_name FROM PilotSkills ORDER BY age DESC; 
SELECT location FROM Hangar ORDER BY plane_name; 
SELECT location FROM Hangar ORDER BY plane_name; 
SELECT DISTINCT plane_name FROM PilotSkills ORDER BY plane_name ASC; 
SELECT plane_name FROM Hangar ORDER BY plane_name ASC; 
SELECT COUNT(*) FROM PilotSkills WHERE age > 40 OR age < 30; 
SELECT COUNT(*) FROM PilotSkills WHERE age > 40 OR age < 30; 
SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30); 
SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30); 
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND pilot_name NOT IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber') 
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND pilot_name NOT IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber') 
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' INTERSECT SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber' 
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' INTERSECT SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber' 
SELECT AVG(age), MIN(age) FROM PilotSkills; 
SELECT AVG(age), MIN(age) FROM PilotSkills; 
SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin') AND plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Boston'); 
SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin' OR location = 'Boston') 
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' OR plane_name = 'F-14 Fighter'; 
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' OR plane_name = 'F-14 Fighter'; 
SELECT plane_name, AVG(age) FROM PilotSkills GROUP BY plane_name; 
SELECT plane_name, AVG(age) FROM PilotSkills GROUP BY plane_name; 
SELECT plane_name, COUNT(*) AS num_planes FROM Hangar GROUP BY plane_name;  
SELECT plane_name, COUNT(*) FROM PilotSkills GROUP BY plane_name; 
SELECT plane_name, pilot_name FROM PilotSkills ORDER BY plane_name ASC;  
SELECT plane_name, pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills) ORDER BY plane_name; 
SELECT pilot_name, plane_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills GROUP BY plane_name); 
SELECT plane_name, pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills WHERE plane_name = PilotSkills.plane_name) GROUP BY plane_name; 
SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name; 
SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name; 
SELECT location, COUNT(pilot_name), AVG(age) FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name GROUP BY location; 
SELECT location, COUNT(pilot_name), AVG(age) FROM PilotSkills, Hangar WHERE PilotSkills.plane_name = Hangar.plane_name GROUP BY location; 
SELECT COUNT(*) FROM PilotSkills WHERE age < 35; 
SELECT plane_name, COUNT(*) AS num_pilots 
SELECT location FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills)); 
SELECT location FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills)); 
SELECT pilot_name, age FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin') 
SELECT pilot_name, age FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin') 
SELECT pilot_name FROM PilotSkills WHERE age > (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name ASC; 
SELECT pilot_name FROM PilotSkills WHERE age > (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name ASC;  
SELECT COUNT(*) FROM PilotSkills WHERE age < ALL (SELECT age FROM PilotSkills WHERE plane_name = 'F-14 Fighter'); 
SELECT COUNT(*) FROM PilotSkills WHERE age < ALL (SELECT age FROM PilotSkills WHERE plane_name = 'F-14 Fighter') 
SELECT DISTINCT plane_name FROM PilotSkills WHERE plane_name LIKE '%Bomber%'; 
SELECT DISTINCT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%'; 
SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub'); 
SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') 
SELECT Name FROM district WHERE Area_km = (SELECT MAX(Area_km) FROM district); 
SELECT Area_km, Government_website FROM district WHERE Population = (SELECT MIN(Population) FROM district); 
SELECT Name, Population FROM district WHERE Area_km > (SELECT AVG(Area_km) FROM district); 
SELECT MAX(Area_km), AVG(Area_km) FROM district; 
SELECT SUM(Population) FROM district WHERE Area_km IN (SELECT Area_km FROM district ORDER BY Area_km DESC LIMIT 3); 
SELECT District_ID, Name, Government_website FROM district ORDER BY Population; 
SELECT Name FROM district WHERE Government_website LIKE '%.gov%'; 
SELECT District_ID, Name FROM district WHERE Population > 4000 OR Area_km > 3000; 
SELECT spokesman.Name, spokesman.Speach_title FROM spokesman;  
SELECT AVG(Points), AVG(Age) FROM spokesman WHERE Rank_position = 1; 
SELECT Name, Points FROM spokesman WHERE Age < 40; 
SELECT Name FROM spokesman WHERE Age = (SELECT MAX(Age) FROM spokesman); 
SELECT spokesman_id, points FROM spokesman WHERE points < (SELECT AVG(points) FROM spokesman); 
SELECT Name FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district GROUP BY District_ID HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM spokesman_district GROUP BY District_ID))); 
SELECT Name FROM spokesman WHERE Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman_district WHERE Start_year < 2004); 
SELECT district.Name, COUNT(spokesman_district.Spokesman_ID) AS spokesmen_count 
SELECT Name FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district WHERE Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman WHERE Rank_position = 1)) AND District_ID IN (SELECT District_ID FROM spokesman_district WHERE Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman WHERE Rank_position = 2)); 
SELECT Name FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district GROUP BY District_ID HAVING COUNT(*) > 1); 
SELECT COUNT(*) FROM district WHERE District_ID NOT IN (SELECT District_ID FROM spokesman_district); 
SELECT Name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district); 
SELECT SUM(Population), AVG(Population) FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district); 
SELECT title FROM Sculptures ORDER BY year DESC LIMIT 1; 
SELECT title FROM Sculptures ORDER BY year DESC LIMIT 1; 
SELECT title, location FROM Paintings ORDER BY year ASC LIMIT 1; 
SELECT title, location FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings); 
SELECT title FROM Sculptures WHERE location = 'gallery 226'; 
SELECT title FROM Sculptures WHERE location = 'gallery 226'; 
SELECT title, location FROM Paintings; 
SELECT title, location FROM Paintings; 
SELECT title, location FROM Sculptures; 
SELECT title, location FROM Sculptures; 
SELECT medium FROM Paintings WHERE paintingID = 80; 
SELECT medium FROM Paintings WHERE paintingID = 80; 
SELECT fname, lname FROM Artists WHERE birthYear > 1850; 
SELECT fname, lname FROM Artists WHERE birthYear > 1850; 
SELECT title, year FROM Sculptures WHERE location!= 'gallery 226'; 
SELECT title, year FROM Sculptures WHERE location!= 'gallery 226'; 
SELECT fname, lname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year < 1900); 
SELECT fname, lname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year < 1900); 
SELECT DISTINCT birthYear FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year > 1920); 
SELECT birthYear FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year > 1920); 
SELECT fname, lname FROM Artists WHERE deathYear - birthYear = (SELECT MAX(deathYear - birthYear) FROM Artists); 
SELECT fname, lname FROM Artists WHERE deathYear - birthYear = (SELECT MAX(deathYear - birthYear) FROM Artists); 
SELECT MIN(deathYear - birthYear) AS age FROM Artists; 
SELECT MIN(deathYear - birthYear) AS age 
SELECT fname, deathYear - birthYear AS age FROM Artists ORDER BY age DESC LIMIT 1; 
SELECT fname, deathYear - birthYear AS age 
SELECT COUNT(*) FROM Paintings WHERE location = 'gallery 240'; 
SELECT COUNT(*) FROM Paintings WHERE location = 'gallery 240'; 
SELECT COUNT(*) FROM Paintings WHERE painterID = (SELECT artistID FROM Artists ORDER BY deathYear - birthYear DESC LIMIT 1); 
SELECT COUNT(*) FROM Paintings WHERE painterID = (SELECT artistID FROM Artists WHERE deathYear - birthYear = (SELECT MAX(deathYear - birthYear) FROM Artists)); 
SELECT title, year FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE fname = 'Mary'); 
SELECT title, year FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE fname = 'Mary'); 
SELECT width_mm FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE birthYear < 1850); 
SELECT width_mm FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE birthYear < 1850); 
SELECT location, medium FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE fname = 'Pablo'); 
SELECT location, mediumOn FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE fname = 'Pablo'); 
SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings) AND artistID IN (SELECT sculptorID FROM Sculptures); 
SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings UNION SELECT sculptorID FROM Sculptures); 
SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil') AND artistID IN (SELECT painterID FROM Paintings WHERE medium = 'lithographic'); 
SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil') AND artistID IN (SELECT painterID FROM Paintings WHERE medium = 'lithographic');  
SELECT birthYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE year = 1884 AND mediumOn = 'canvas'); 
SELECT birthYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE year = 1884); 
SELECT DISTINCT fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'); 
SELECT fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE location = 'gallery 241' AND medium = 'oil') 
SELECT medium, COUNT(*) AS num_works FROM Paintings GROUP BY medium ORDER BY num_works DESC;  
SELECT medium, COUNT(*) AS numWorks FROM Paintings GROUP BY medium;  
SELECT medium, AVG(height_mm) FROM Paintings GROUP BY medium; 
SELECT medium, AVG(height_mm) FROM Paintings GROUP BY medium; 
SELECT location, COUNT(*) AS num_paintings FROM Paintings WHERE year < 1900 GROUP BY location ORDER BY num_paintings DESC;  
SELECT COUNT(*) FROM Paintings WHERE year < 1900 AND location!= 'Paris' 
SELECT title FROM Paintings WHERE year > 1910 AND medium = 'oil'; 
SELECT title FROM Paintings WHERE year > 1910 AND medium = 'oil'; 
SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 240'; 
SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 240'; 
SELECT DISTINCT title FROM Paintings WHERE height_mm > (SELECT height_mm FROM Paintings WHERE mediumOn = 'canvas'); 
SELECT DISTINCT title FROM Paintings WHERE height_mm > ALL (SELECT height_mm FROM Paintings WHERE mediumOn = 'canvas'); 
SELECT DISTINCT paintingID FROM Paintings WHERE year < (SELECT year FROM Paintings WHERE location = 'gallery 240') 
SELECT DISTINCT paintingID FROM Paintings WHERE year < (SELECT year FROM Paintings WHERE location = 'gallery 240') 
SELECT MIN(paintingID) FROM Paintings; 
SELECT paintingID FROM Paintings ORDER BY year ASC LIMIT 1; 
SELECT fname, lname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE title LIKE '%female%'); 
SELECT fname, lname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE title LIKE '%female%'); 
SELECT DISTINCT title FROM Paintings ORDER BY title ASC; 
SELECT title FROM Paintings ORDER BY title ASC; 
SELECT DISTINCT title FROM Paintings ORDER BY length(title); 
SELECT title FROM Paintings ORDER BY height_mm ASC; 
SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 
SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 
SELECT title FROM Paintings WHERE painterID = 222 
SELECT title FROM Paintings WHERE painterID = 222 
SELECT artistID 
SELECT painterID FROM Paintings WHERE year < 1900 GROUP BY painterID ORDER BY COUNT(*) DESC LIMIT 1;  
SELECT fname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) FROM Sculptures GROUP BY sculptorID))); 
SELECT fname 
SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800; 
SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800; 
SELECT location FROM Paintings WHERE year < 1885 OR year > 1930; 
SELECT location FROM Paintings WHERE year < 1885 OR year > 1930; 
SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000; 
SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000; 
SELECT location FROM Paintings WHERE medium = 'on panel' OR medium = 'on canvas'; 
SELECT location FROM Paintings WHERE mediumOn IN ('on panels', 'on canvas'); 
SELECT location FROM Paintings WHERE year < 1885 OR year > 1930; 
SELECT location FROM Paintings WHERE year < 1885 OR year > 1930; 
SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'; 
SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'; 
SELECT MAX(height_mm), paintingID FROM Paintings WHERE year < 1900; 
SELECT height_mm, paintingID FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC LIMIT 1; 
SELECT year, MAX(height_mm), MAX(width_mm) FROM Paintings GROUP BY year; 
SELECT year, MAX(height_mm), MAX(width_mm) FROM Paintings GROUP BY year; 
SELECT fname, lname, AVG(height_mm), AVG(width_mm) FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID GROUP BY fname, lname ORDER BY lname, fname; 
SELECT fname, lname, AVG(height_mm), AVG(width_mm) FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID GROUP BY fname, lname ORDER BY lname, fname; 
SELECT fname, COUNT(*) FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY fname HAVING COUNT(*) >= 2; 
SELECT fname, COUNT(*) AS num_works 
SELECT deathYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING COUNT(*) <= 3); 
SELECT lname, deathYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING COUNT(*) < 4) ORDER BY deathYear DESC;  
SELECT deathYear FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT sculptorID, COUNT(*) AS count FROM Sculptures GROUP BY sculptorID))); 
SELECT deathYear FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT COUNT(*) AS count FROM Sculptures GROUP BY sculptorID))); 
SELECT paintingID, height_mm FROM Paintings WHERE location = 'gallery 240' AND width_mm = (SELECT MAX(width_mm) FROM Paintings WHERE location = 'gallery 240'); 
SELECT height_mm, paintingID FROM Paintings WHERE location = 'gallery 240' ORDER BY width_mm DESC LIMIT 1; 
SELECT paintingID 
SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240') 
SELECT paintingID FROM Paintings WHERE height_mm > ALL (SELECT height_mm FROM Paintings WHERE year > 1900); 
SELECT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900); 
SELECT lname, COUNT(*) AS num_paintings 
SELECT fname, lname, COUNT(*) AS num_paintings 
SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year; 
SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year ASC;  
SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title; 
SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title ASC; 
SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings) AND artistID NOT IN (SELECT sculptorID FROM Sculptures); 
SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings) AND artistID NOT IN (SELECT sculptorID FROM Sculptures); 
SELECT location FROM Paintings WHERE year < 1885 AND mediumOn = 'canvas' AND location NOT IN (SELECT location FROM Sculptures); 
SELECT location FROM Paintings WHERE year < 1885 AND mediumOn!= 'canvas'; 
SELECT COUNT(*) FROM race; 
SELECT COUNT(*) FROM race; 
SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC; 
SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC; 
SELECT Winning_driver FROM race WHERE Pole_Position!= 'Junior Strous' AND Winning_driver IS NOT NULL; 
SELECT Winning_driver FROM race WHERE Pole_Position!= 'Junior Strous' AND Winning_driver IS NOT NULL; 
SELECT DISTINCT Constructor FROM driver ORDER BY Age ASC; 
SELECT DISTINCT Constructor FROM driver ORDER BY Age ASC; 
SELECT DISTINCT Entrant FROM driver WHERE Age >= 20; 
SELECT DISTINCT Entrant FROM driver WHERE Age >= 20; 
SELECT MAX(Age), MIN(Age) FROM driver; 
SELECT MAX(Age), MIN(Age) FROM driver; 
SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20; 
SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20; 
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC; 
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC; 
SELECT Driver_Name, Race_Name FROM driver, race WHERE driver.Driver_ID = race.Driver_ID; 
SELECT Driver_Name, Race_Name FROM driver, race WHERE driver.Driver_ID = race.Driver_ID; 
SELECT Driver_Name, COUNT(*) FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY Driver_Name; 
SELECT Driver_ID, COUNT(*) AS num_races FROM race GROUP BY Driver_ID;  
SELECT age FROM driver WHERE driver_id IN (SELECT driver_id FROM race GROUP BY driver_id ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT age FROM driver WHERE driver_id IN (SELECT driver_id FROM race GROUP BY driver_id HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM race GROUP BY driver_id))); 
SELECT Driver_Name, Age FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING COUNT(*) >= 2); 
SELECT Driver_Name, Age FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING COUNT(*) >= 2); 
SELECT Race_Name FROM race WHERE Driver_ID IN (SELECT Driver_ID FROM driver WHERE Age >= 26); 
SELECT Race_Name FROM race WHERE Driver_ID IN (SELECT Driver_ID FROM driver WHERE Age >= 26); 
SELECT Driver_Name FROM driver WHERE Constructor!= 'Bugatti'; 
SELECT Driver_Name FROM driver WHERE Constructor!= 'Bugatti'; 
SELECT DISTINCT Constructor, COUNT(Driver_ID) FROM driver GROUP BY Constructor; 
SELECT constructor, COUNT(*) AS num_drivers FROM driver GROUP BY constructor;  
SELECT Engine, COUNT(*) AS Count 
SELECT Engine, COUNT(*) AS Count 
SELECT DISTINCT Engine FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM driver GROUP BY Driver_ID HAVING COUNT(*) >= 2); 
SELECT DISTINCT Engine FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM driver GROUP BY Driver_ID HAVING COUNT(*) > 1); 
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race); 
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race); 
SELECT DISTINCT Constructor FROM driver WHERE Age < 20 OR Age > 30; 
SELECT DISTINCT Constructor FROM driver WHERE Age < 20 OR Age > 30; 
SELECT DISTINCT Winning_team FROM race WHERE Winning_team IN (SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(*) > 1); 
SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(*) > 1; 
SELECT Driver_Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe' OR Pole_Position = 'Carl Skerlong') AND Driver_ID IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe' OR Pole_Position = 'Carl Skerlong') ORDER BY Driver_Name ASC; 
SELECT Driver_Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe' OR Pole_Position = 'Carl Skerlong') 
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe') 
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe') 
SELECT COUNT(*) FROM languages; 
SELECT COUNT(*) FROM languages; 
SELECT name FROM languages ORDER BY name ASC; 
SELECT name FROM languages ORDER BY name ASC; 
SELECT name FROM languages WHERE name LIKE '%ish%'; 
SELECT name FROM languages WHERE name LIKE '%ish%'; 
SELECT name FROM countries ORDER BY overall_score DESC; 
SELECT name FROM countries ORDER BY overall_score DESC; 
SELECT AVG(justice_score) FROM countries; 
SELECT AVG(justice_score) FROM countries; 
SELECT MAX(health_score), MIN(health_score) FROM countries WHERE name!= 'Norway'; 
SELECT MAX(health_score), MIN(health_score) FROM countries WHERE name!= 'Norway'; 
SELECT COUNT(DISTINCT language_id) FROM official_languages; 
SELECT COUNT(DISTINCT language_id) FROM official_languages; 
SELECT name FROM countries ORDER BY education_score DESC; 
SELECT name FROM countries ORDER BY education_score DESC; 
SELECT name FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries); 
SELECT name FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries); 
SELECT countries.name, languages.name FROM countries JOIN official_languages ON countries.id = official_languages.country_id JOIN languages ON official_languages.language_id = languages.id; 
SELECT countries.name, languages.name FROM countries JOIN official_languages ON countries.id = official_languages.country_id JOIN languages ON official_languages.language_id = languages.id; 
SELECT languages.name, COUNT(*) AS num_countries 
SELECT name, COUNT(*) FROM official_languages JOIN languages ON official_languages.language_id = languages.id GROUP BY name; 
SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT name FROM languages 
SELECT languages.name FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name HAVING COUNT(*) >= 2;  
SELECT languages.name FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name HAVING COUNT(*) >= 2;  
SELECT AVG(overall_score) FROM countries WHERE id IN (SELECT country_id FROM official_languages WHERE language_id IN (SELECT id FROM languages WHERE name = 'English')); 
SELECT AVG(overall_score) FROM countries WHERE id IN (SELECT country_id FROM official_languages WHERE language_id IN (SELECT id FROM languages WHERE name = 'English')); 
SELECT name FROM languages ORDER BY COUNT(*) DESC LIMIT 3; 
SELECT name FROM languages 
SELECT languages.name, AVG(countries.overall_score) AS avg_score 
SELECT languages.name 
SELECT name FROM countries WHERE id IN (SELECT country_id FROM official_languages GROUP BY country_id HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM official_languages GROUP BY country_id))); 
SELECT name FROM countries WHERE id IN (SELECT country_id FROM official_languages GROUP BY country_id HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM official_languages GROUP BY country_id))); 
SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages); 
SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages); 
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages); 
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages); 
SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE overall_score > 95) INTERSECT SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE overall_score < 90)); 
SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE overall_score > 95)) AND id IN (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE overall_score < 90)); 
SELECT country, town_city FROM Addresses; 
SELECT country, town_city FROM Addresses; 
SELECT country, property_id FROM Addresses, Properties WHERE property_address_id = address_id GROUP BY country; 
SELECT county_state_province FROM Addresses WHERE property_address_id IN (SELECT property_address_id FROM Properties); 
SELECT property_feature_description 
SELECT feature_description FROM Features WHERE feature_name = 'rooftop';  
SELECT feature_name, feature_description 
SELECT feature_name, feature_description 
SELECT MIN(room_count) FROM Properties; 
SELECT MIN(room_count) FROM Properties; 
SELECT COUNT(*) FROM Properties WHERE garage_yn = 'Y' OR parking_lots = 'Y'; 
SELECT COUNT(*) FROM Properties WHERE garage_yn = 'Y' OR parking_lots = '1'; 
SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description LIKE '%Mother%'; 
SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_description LIKE '%Mother%';  
SELECT first_name FROM Users WHERE user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT owner_user_id, COUNT(*) AS count FROM Properties GROUP BY owner_user_id))); 
SELECT first_name FROM Users WHERE user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT owner_user_id, COUNT(*) AS count FROM Properties GROUP BY owner_user_id))); 
SELECT AVG(room_count) FROM Properties WHERE garage_yn = 'Y'; 
SELECT AVG(room_count) FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_value = 'garden'); 
SELECT DISTINCT town_city FROM Addresses WHERE address_id IN (SELECT property_address_id FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Features WHERE feature_name = 'Swimming Pool'))) 
SELECT DISTINCT town_city FROM Addresses WHERE address_id IN (SELECT property_address_id FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Features WHERE feature_name = 'Swimming Pool')));  
SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price ASC LIMIT 1;  
SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price ASC LIMIT 1;  
SELECT AVG(room_count) FROM Properties; 
SELECT AVG(room_count) FROM Properties; 
SELECT COUNT(DISTINCT room_size) FROM Rooms; 
SELECT COUNT(DISTINCT room_size) FROM Rooms; 
SELECT user_id, search_string FROM User_Searches GROUP BY user_id HAVING COUNT(*) >= 2; 
SELECT user_id, search_seq FROM User_Searches WHERE user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) >= 2) ORDER BY user_id, search_seq; 
SELECT MAX(search_datetime) FROM User_Searches; 
SELECT MAX(search_datetime) FROM User_Searches; 
SELECT search_string, search_datetime FROM User_Searches ORDER BY search_string DESC; 
SELECT search_string, search_datetime FROM User_Searches ORDER BY search_string DESC; 
SELECT zip_postcode 
SELECT DISTINCT property_address_id 
SELECT user_category_code, user_id FROM Users WHERE user_category_code IS NOT NULL AND user_id IS NOT NULL ORDER BY user_category_code ASC, user_id ASC;  
SELECT user_id, user_category_code FROM Users WHERE user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) = 1) ORDER BY user_id ASC;  
SELECT age_category_code FROM Users WHERE user_id = (SELECT user_id FROM User_Searches ORDER BY search_datetime LIMIT 1); 
SELECT age_category_code FROM Users WHERE user_id = (SELECT user_id FROM User_Searches ORDER BY search_datetime ASC LIMIT 1); 
SELECT login_name FROM Users WHERE age_category_code = 'Senior Citizen' ORDER BY first_name; 
SELECT login_name FROM Users WHERE age_category_code = 'Senior Citizen' ORDER BY first_name; 
SELECT COUNT(*) FROM User_Searches WHERE user_id IN (SELECT user_id FROM Users WHERE is_buyer = 'Y') 
SELECT COUNT(*) FROM User_Searches WHERE user_id IN (SELECT user_id FROM Users WHERE is_buyer = 'Y') 
SELECT date_registered FROM Users WHERE login_name = 'ratione'; 
SELECT date_registered FROM Users WHERE login_name = 'ratione'; 
SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = 1; 
SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = 'Y'; 
SELECT line_2_number_street, line_3_area_locality, town_city 
SELECT line_2_number_street, line_3_area_locality, town_city FROM Addresses WHERE address_id IN (SELECT user_address_id FROM Users WHERE age_category_code = 'Senior Citizen'); 
SELECT COUNT(*) FROM Properties 
SELECT COUNT(*) FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features GROUP BY property_id HAVING COUNT(*) >= 2); 
SELECT property_id, COUNT(photo_seq) AS photo_count FROM Property_Photos GROUP BY property_id ORDER BY photo_count DESC;  
SELECT property_id, COUNT(photo_seq) AS photo_count FROM Property_Photos GROUP BY property_id ORDER BY property_id ASC;  
SELECT user_id, COUNT(photo_filename) AS num_photos 
SELECT user_id, COUNT(photo_filename) AS photo_count 
SELECT SUM(price_max) FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE age_category_code = 'Single Mother' OR user_category_code = 'Student'); 
SELECT SUM(price_max) FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE age_category_code = 'Single Mother' OR user_category_code = 'Student'); 
SELECT datestamp, property_name FROM User_Property_History, Properties WHERE User_Property_History.property_id = Properties.property_id ORDER BY datestamp; 
SELECT datestamp, property_name FROM User_Property_History, Properties WHERE User_Property_History.property_id = Properties.property_id ORDER BY datestamp; 
SELECT property_type_description, property_type_code 
SELECT property_type_code, property_type_description 
SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'; 
SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'; 
SELECT room_size, COUNT(room_size) FROM Rooms GROUP BY room_size; 
SELECT COUNT(*) AS room_count, room_size FROM Rooms GROUP BY room_size ORDER BY room_count DESC;  
SELECT country FROM Users JOIN Addresses ON Users.user_address_id = Addresses.address_id WHERE first_name = 'Robbie'; 
SELECT country FROM Addresses WHERE address_id IN (SELECT user_address_id FROM Users WHERE first_name = 'Robbie'); 
SELECT first_name, middle_name, last_name FROM Users WHERE user_id IN (SELECT owner_user_id FROM Properties WHERE property_address_id = user_address_id); 
SELECT CONCAT(first_name,'', last_name) AS full_name 
SELECT search_string FROM User_Searches WHERE user_id NOT IN (SELECT owner_user_id FROM Properties); 
SELECT search_string FROM User_Searches WHERE user_id NOT IN (SELECT owner_user_id FROM Properties); 
SELECT last_name, user_id 
SELECT last_name, user_id FROM Users WHERE user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) <= 2) AND user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) >= 2); 
SELECT COUNT(*) FROM bike WHERE weight > 780; 
SELECT product_name, weight FROM bike ORDER BY price ASC; 
SELECT heat, name, nation FROM cyclist; 
SELECT MAX(weight), MIN(weight) FROM bike; 
SELECT AVG(price) FROM bike WHERE material = 'Carbon CC'; 
SELECT name, result FROM cyclist WHERE nation!= 'Russia'; 
SELECT DISTINCT bike.id, bike.product_name FROM bike INNER JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id WHERE purchase_year > 2015;  
SELECT bike.id, bike.product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id GROUP BY bike.id HAVING COUNT(cyclists_own_bikes.cyclist_id) >= 4; 
SELECT cyclist.id, cyclist.name FROM cyclist JOIN cyclists_own_bikes ON cyclist.id = cyclists_own_bikes.cyclist_id GROUP BY cyclist.id ORDER BY COUNT(*) DESC LIMIT 1;  
SELECT DISTINCT product_name FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE nation = 'Russia' OR nation = 'Great Britain')); 
SELECT COUNT(DISTINCT heat) FROM cyclist; 
SELECT COUNT(*) FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year > 2015); 
SELECT DISTINCT bike.product_name FROM bike INNER JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id INNER JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE cyclist.result < '4:21.558';  
SELECT bike.product_name, bike.price FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id JOIN cyclist ON cyclist.id = cyclists_own_bikes.cyclist_id WHERE cyclist.name = 'Bradley Wiggins' AND cyclist.name = 'Antonio Tauler'; 
SELECT name, nation, result FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE bike_id IN (SELECT id FROM bike WHERE material = 'racing')); 
SELECT product_name FROM bike WHERE material LIKE '%fiber%'; 
SELECT cyclist_id, COUNT(bike_id) AS num_bikes 
SELECT goods.Food, goods.Flavor FROM goods WHERE goods.Food = 'cake' AND goods.Price = (SELECT MAX(goods.Price) FROM goods WHERE goods.Food = 'cake'); 
SELECT id, flavor FROM goods WHERE food = 'cake' ORDER BY price DESC LIMIT 1; 
SELECT * FROM goods WHERE Food = 'cookie' ORDER BY Price ASC LIMIT 1; 
SELECT Id, Flavor FROM goods WHERE Food = 'cookie' ORDER BY Price ASC LIMIT 1; 
SELECT Id FROM goods WHERE Flavor = 'apple'; 
SELECT Id FROM goods WHERE Flavor = 'apple'; 
SELECT Id FROM goods WHERE Price < 3; 
SELECT Id FROM goods WHERE Price < 3; 
SELECT DISTINCT CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'lemon' AND Food = 'cake')); 
SELECT DISTINCT CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'lemon' AND Food = 'cake')) 
SELECT Food, COUNT(DISTINCT CustomerId) AS CustomerCount 
SELECT food, COUNT(*) AS num_customers 
SELECT Id FROM customers WHERE Id IN (SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(*) >= 15); 
SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(*) >= 15; 
SELECT LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(*) > 10); 
SELECT LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(*) > 10); 
SELECT COUNT(*) FROM goods WHERE Food = 'Cake'; 
SELECT COUNT(*) FROM goods WHERE Food = 'cake'; 
SELECT Flavor FROM goods WHERE Food = 'Croissant'; 
SELECT Flavor FROM goods WHERE Food = 'croissant'; 
SELECT DISTINCT Item FROM items WHERE Receipt IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId = 15); 
SELECT DISTINCT Item FROM items WHERE Receipt IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId = 15); 
SELECT Food, AVG(Price), MAX(Price), MIN(Price) FROM goods GROUP BY Food; 
SELECT Food, AVG(Price), MIN(Price), MAX(Price) FROM goods GROUP BY Food; 
SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'Cake')) AND ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'Cookie')); 
SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'cake')) AND ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'cookie')); 
SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE LastName = 'LOGAN') AND ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'Croissant')); 
SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE LastName = 'Logan') AND ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'croissant')); 
SELECT ReceiptNumber, Date FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price = (SELECT MAX(Price) FROM goods))); 
SELECT ReceiptNumber, Date FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price = (SELECT MAX(Price) FROM goods))); 
SELECT Item FROM items GROUP BY Item ORDER BY COUNT(*) ASC LIMIT 1; 
SELECT Item, COUNT(*) AS Count 
SELECT Food, COUNT(*) AS Count FROM goods GROUP BY Food ORDER BY Count DESC; 
SELECT Food, COUNT(*) AS Count 
SELECT Food, AVG(Price) FROM goods GROUP BY Food; 
SELECT Food, AVG(Price) FROM goods GROUP BY Food; 
SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5; 
SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5; 
SELECT Flavor FROM goods WHERE Food = 'cake' AND Price > 10; 
SELECT Flavor FROM goods WHERE Food = 'cake' AND Price > 10; 
SELECT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods); 
SELECT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods); 
SELECT DISTINCT Id FROM goods WHERE Price < (SELECT MIN(Price) FROM goods WHERE Food = 'Tart') 
SELECT DISTINCT Id FROM goods WHERE Price < ALL (SELECT Price FROM goods WHERE Flavor = 'Tart'); 
SELECT DISTINCT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > 13)); 
SELECT DISTINCT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > 13)) 
SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > 15)); 
SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > 15)); 
SELECT Id FROM goods WHERE Id LIKE '%APP%'; 
SELECT Id FROM goods WHERE Id LIKE '%APP%'; 
SELECT Price FROM goods WHERE Id LIKE '%70%'; 
SELECT id, price FROM goods WHERE id LIKE '%70%'; 
SELECT LastName FROM customers ORDER BY LastName ASC; 
SELECT LastName FROM customers ORDER BY LastName ASC; 
SELECT Id FROM goods ORDER BY Id ASC; 
SELECT DISTINCT Item FROM items ORDER BY Item ASC; 
SELECT * FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'apple' AND Food = 'pie') OR ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId = 12)); 
SELECT ReceiptNumber FROM receipts WHERE CustomerId = 12 OR ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'apple' AND Food = 'pie')); 
SELECT Date FROM receipts WHERE Date = (SELECT MAX(Date) FROM receipts); 
SELECT ReceiptNumber, Date FROM receipts ORDER BY Date DESC LIMIT 1; 
SELECT * FROM receipts WHERE Date IN (SELECT MIN(Date) FROM receipts) OR ReceiptNumber IN (SELECT ReceiptNumber FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > 10)) 
SELECT ReceiptNumber FROM receipts WHERE Date = (SELECT MIN(Date) FROM receipts) OR ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > 10)) 
SELECT Id FROM goods WHERE Food IN ('Cookie', 'Cake') AND Price BETWEEN 3 AND 7; 
SELECT Id FROM goods WHERE Food IN ('Cookies', 'Cakes') AND Price BETWEEN 3 AND 7; 
SELECT FirstName, LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts WHERE Date IN (SELECT MIN(Date) FROM receipts)); 
SELECT FirstName, LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts WHERE Date IN (SELECT MIN(Date) FROM receipts)); 
SELECT AVG(Price) FROM goods WHERE Flavor IN ('blackberry', 'blueberry'); 
SELECT AVG(Price) FROM goods WHERE Flavor IN ('blackberry', 'blueberry'); 
SELECT MIN(Price) FROM goods WHERE Flavor = 'cheese'; 
SELECT * FROM goods WHERE Flavor = 'cheese' ORDER BY Price ASC LIMIT 1; 
SELECT Flavor, MAX(Price) AS MaxPrice, MIN(Price) AS MinPrice, AVG(Price) AS AvgPrice FROM goods GROUP BY Flavor ORDER BY Flavor ASC; 
SELECT Flavor, MAX(Price), MIN(Price), AVG(Price) FROM goods GROUP BY Flavor ORDER BY Flavor; 
SELECT Food, MIN(Price), MAX(Price) FROM goods GROUP BY Food ORDER BY Food ASC; 
SELECT MIN(Price), MAX(Price), Food FROM goods GROUP BY Food ORDER BY Food; 
SELECT Date, COUNT(*) AS count 
SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(*) DESC LIMIT 3; 
SELECT FirstName, LastName, COUNT(*) AS Count 
SELECT CustomerId, COUNT(*) AS num_purchases FROM receipts GROUP BY CustomerId ORDER BY num_purchases DESC LIMIT 1; 
SELECT Date, COUNT(DISTINCT CustomerId) FROM receipts GROUP BY Date; 
SELECT Date, COUNT(*) FROM receipts GROUP BY Date; 
SELECT FirstName, LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'apple' AND Food = 'Tart'))); 
SELECT FirstName, LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'apple' AND Food = 'Tart'))); 
SELECT Id FROM goods WHERE Food = 'Cookie' AND Price < ALL (SELECT Price FROM goods WHERE Food = 'Croissant'); 
SELECT Id FROM goods WHERE Food = 'cookie' AND Price < ALL (SELECT Price FROM goods WHERE Food = 'croissant'); 
SELECT Id FROM goods WHERE Food = 'Cake' AND Price >= (SELECT AVG(Price) FROM goods WHERE Food = 'Tart'); 
SELECT Id FROM goods WHERE Food = 'Cake' AND Price >= (SELECT AVG(Price) FROM goods WHERE Food = 'Tart'); 
SELECT Id FROM goods WHERE Price > 2 * (SELECT AVG(Price) FROM goods); 
SELECT Id FROM goods WHERE Price > 2 * (SELECT AVG(Price) FROM goods); 
SELECT id, flavor, food FROM goods ORDER BY price; 
SELECT Id, Flavor, Food FROM goods ORDER BY Price; 
SELECT id, flavor FROM goods WHERE food = 'Cake' ORDER BY flavor; 
SELECT Id, Flavor FROM goods WHERE Food = 'cake' ORDER BY Flavor; 
SELECT * FROM goods WHERE Flavor = 'chocolate' AND Id NOT IN (SELECT Item FROM items GROUP BY Item HAVING COUNT(*) > 10); 
SELECT Item FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'chocolate') GROUP BY Item HAVING COUNT(*) <= 10; 
SELECT DISTINCT Flavor FROM goods WHERE Food = 'Cake' AND Flavor NOT IN (SELECT Flavor FROM goods WHERE Food = 'Tart') 
SELECT Flavor FROM goods WHERE Food = 'Cake' AND Flavor NOT IN (SELECT Flavor FROM goods WHERE Food = 'Tart') 
SELECT Item, COUNT(*) AS count 
SELECT Item, COUNT(*) AS Count 
SELECT Id FROM customers WHERE Id IN (SELECT CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > 150))) 
SELECT Id FROM customers WHERE Id IN (SELECT CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > 150))) 
SELECT customers.Id FROM customers 
SELECT customers.Id FROM customers 
SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM items GROUP BY ReceiptNumber HAVING SUM(Price) > 100); 
SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items GROUP BY Receipt HAVING SUM(Price) > 100); 
SELECT COUNT(*) FROM driver; 
SELECT COUNT(*) FROM driver; 
SELECT Make, COUNT(*) FROM driver WHERE Points > 150 GROUP BY Make; 
SELECT Make, COUNT(*) FROM driver WHERE Points > 150 GROUP BY Make; 
SELECT Make, AVG(Age) FROM driver GROUP BY Make; 
SELECT Make, AVG(Age) FROM driver GROUP BY Make; 
SELECT AVG(Laps) FROM driver WHERE Age < 20; 
SELECT AVG(Laps) FROM driver WHERE Age < 20; 
SELECT Manager, Sponsor FROM team ORDER BY Car_Owner; 
SELECT Manager, Sponsor, Car_Owner FROM team ORDER BY Car_Owner; 
SELECT Make FROM team GROUP BY Make HAVING COUNT(Make) > 1; 
SELECT Make FROM team GROUP BY Make HAVING COUNT(Make) > 1; 
SELECT Make FROM team WHERE Car_Owner = 'Buddy Arrington'; 
SELECT Make FROM team WHERE Car_Owner = 'Buddy Arrington'; 
SELECT MAX(Points), MIN(Points) FROM driver; 
SELECT MAX(Points), MIN(Points) FROM driver; 
SELECT COUNT(*) FROM driver WHERE Points < 150; 
SELECT COUNT(*) FROM driver WHERE Points < 150; 
SELECT Driver FROM driver ORDER BY Age ASC; 
SELECT Driver FROM driver ORDER BY Age ASC; 
SELECT Driver FROM driver ORDER BY Points DESC; 
SELECT Driver, Points FROM driver ORDER BY Points DESC; 
SELECT driver.Driver, country.Country FROM driver, country WHERE driver.Country = country.Country_Id; 
SELECT driver.Driver, country.Country FROM driver JOIN country ON driver.Country = country.Country_Id; 
SELECT MAX(Points) FROM driver WHERE Country IN (SELECT Country_Id FROM country WHERE Capital = 'Dublin') 
SELECT MAX(Points) FROM driver WHERE Country IN (SELECT Country_Id FROM country WHERE Capital = 'Dublin'); 
SELECT AVG(Age) FROM driver WHERE Country IN (SELECT Country_Id FROM country WHERE Official_native_language = 'English'); 
SELECT AVG(Age) FROM driver WHERE Country IN (SELECT Country_Id FROM country WHERE Official_native_language = 'English'); 
SELECT DISTINCT country.Country FROM country, driver WHERE driver.Country = country.Country_Id AND driver.Points > 150; 
SELECT DISTINCT country.Country FROM country, driver WHERE driver.Points > 150 AND driver.Country = country.Country_Id; 
SELECT Capital FROM country WHERE Country_Id = (SELECT Country FROM driver WHERE Points = (SELECT MAX(Points) FROM driver)); 
SELECT Capital FROM country WHERE Country_Id = (SELECT Country FROM driver WHERE Points = (SELECT MAX(Points) FROM driver)); 
SELECT Make, COUNT(*) FROM driver GROUP BY Make; 
SELECT Make, COUNT(Driver_ID) FROM driver GROUP BY Make; 
SELECT Make, COUNT(*) AS num_drivers FROM driver GROUP BY Make ORDER BY num_drivers DESC LIMIT 1;  
SELECT Make, COUNT(*) AS num_drivers FROM driver GROUP BY Make ORDER BY num_drivers DESC LIMIT 1;  
SELECT Make FROM driver GROUP BY Make HAVING COUNT(*) >= 3; 
SELECT Make FROM driver GROUP BY Make HAVING COUNT(*) >= 3; 
SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver); 
SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver); 
SELECT DISTINCT country.Country FROM country, driver WHERE driver.Country = country.Country_Id AND driver.Make = 'Dodge' INTERSECT SELECT DISTINCT country.Country FROM country, driver WHERE driver.Country = country.Country_Id AND driver.Make = 'Chevrolet'; 
SELECT DISTINCT country.Country FROM country, driver WHERE driver.Country = country.Country_Id AND driver.Make = 'Dodge' INTERSECT SELECT DISTINCT country.Country FROM country, driver WHERE driver.Country = country.Country_Id AND driver.Make = 'Chevrolet'; 
SELECT SUM(Points), AVG(Points) FROM driver; 
SELECT SUM(Points) AS TotalPoints, AVG(Points) AS AveragePoints FROM driver; 
SELECT Country FROM country WHERE Country_Id NOT IN (SELECT Country FROM driver); 
SELECT DISTINCT Country FROM country WHERE Country NOT IN (SELECT DISTINCT Country FROM driver); 
SELECT Manager, Sponsor FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT Team_ID, COUNT(*) AS Count FROM team_driver GROUP BY Team_ID))); 
SELECT Manager, Sponsor FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(Driver_ID) = (SELECT MAX(COUNT(Driver_ID)) FROM team_driver GROUP BY Team_ID)); 
SELECT Manager, Car_Owner FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(*) >= 2); 
SELECT Manager, Car_Owner FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(*) >= 2); 
SELECT COUNT(*) FROM institution; 
SELECT COUNT(*) FROM institution; 
SELECT Name FROM institution ORDER BY Name ASC; 
SELECT Name FROM institution ORDER BY Name ASC; 
SELECT Name FROM institution ORDER BY Founded ASC; 
SELECT Name FROM institution ORDER BY Founded; 
SELECT City, Province FROM institution; 
SELECT City, Province FROM institution; 
SELECT MAX(Enrollment), MIN(Enrollment) FROM institution; 
SELECT MAX(Enrollment), MIN(Enrollment) FROM institution; 
SELECT Affiliation FROM institution WHERE City!= 'Vancouver'; 
SELECT Affiliation FROM institution WHERE City!= 'Vancouver'; 
SELECT Stadium, Capacity FROM institution ORDER BY Capacity DESC; 
SELECT Stadium, Capacity FROM institution ORDER BY Capacity DESC; 
SELECT Stadium FROM institution WHERE Enrollment = (SELECT MAX(Enrollment) FROM institution); 
SELECT Stadium FROM institution WHERE Enrollment = (SELECT MAX(Enrollment) FROM institution); 
SELECT Name, Nickname FROM institution, Championship WHERE institution.Institution_ID = Championship.Institution_ID; 
SELECT institution.Name, Championship.Nickname FROM institution, Championship WHERE institution.Institution_ID = Championship.Institution_ID; 
SELECT Nickname FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID WHERE Enrollment = (SELECT MIN(Enrollment) FROM institution); 
SELECT Nickname FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID WHERE Enrollment = (SELECT MIN(Enrollment) FROM institution); 
SELECT Name FROM institution ORDER BY Number_of_Championships DESC; 
SELECT Name FROM institution ORDER BY Number_of_Championships DESC; 
SELECT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship); 
SELECT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship WHERE Number_of_Championships > 0); 
SELECT SUM(Number_of_Championships) FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution WHERE Affiliation = 'Public'); 
SELECT SUM(Number_of_Championships) FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution WHERE Affiliation = 'Public'); 
SELECT Affiliation, COUNT(*) FROM institution GROUP BY Affiliation; 
SELECT COUNT(*) AS count, Affiliation FROM institution GROUP BY Affiliation ORDER BY count DESC; 
SELECT Affiliation, COUNT(*) AS count FROM institution GROUP BY Affiliation ORDER BY count DESC LIMIT 1;  
SELECT Affiliation, COUNT(*) AS count 
SELECT Founded FROM institution GROUP BY Founded HAVING COUNT(*) > 1; 
SELECT Founded, COUNT(*) FROM institution GROUP BY Founded HAVING COUNT(*) > 1 
SELECT Nickname FROM Championship ORDER BY Capacity DESC; 
SELECT Nickname FROM institution ORDER BY Capacity DESC; 
SELECT SUM(Enrollment) FROM institution WHERE City = 'Vancouver' OR City = 'Calgary'; 
SELECT Enrollment FROM institution WHERE City = 'Vancouver' OR City = 'Calgary'; 
SELECT Province FROM institution WHERE Founded < 1920 AND Founded > 1950; 
SELECT Province FROM institution WHERE Founded < 1920 AND Province IN (SELECT Province FROM institution WHERE Founded > 1950); 
SELECT COUNT(DISTINCT Province) FROM institution; 
SELECT COUNT(DISTINCT Province) FROM institution; 
SELECT * FROM Warehouses; 
SELECT * FROM Warehouses; 
SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York') 
SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York') 
SELECT Contents FROM Boxes WHERE Value > 150; 
SELECT Contents FROM Boxes WHERE Value > 150; 
SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse; 
SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse; 
SELECT AVG(Value), SUM(Value) FROM Boxes; 
SELECT AVG(Value), SUM(Value) FROM Boxes; 
SELECT AVG(Capacity), SUM(Capacity) FROM Warehouses; 
SELECT AVG(Capacity), SUM(Capacity) FROM Warehouses; 
SELECT Contents, AVG(Value), MAX(Value) FROM Boxes GROUP BY Contents; 
SELECT Contents, AVG(Value), MAX(Value) FROM Boxes GROUP BY Contents; 
SELECT Contents, SUM(Value) AS TotalValue FROM Boxes GROUP BY Contents ORDER BY TotalValue DESC LIMIT 1;  
SELECT Contents FROM Boxes WHERE Value = (SELECT MAX(Value) FROM Boxes); 
SELECT AVG(Value) FROM Boxes; 
SELECT AVG(Value) FROM Boxes; 
SELECT DISTINCT Contents FROM Boxes; 
SELECT DISTINCT Contents FROM Boxes; 
SELECT COUNT(DISTINCT Contents) FROM Boxes; 
SELECT COUNT(DISTINCT Contents) FROM Boxes; 
SELECT DISTINCT Location FROM Warehouses; 
SELECT Location FROM Warehouses; 
SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York')); 
SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York')) 
SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York')); 
SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York')); 
SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago' OR Location = 'New York') 
SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York')) GROUP BY Contents HAVING COUNT(*) = 2; 
SELECT DISTINCT Contents FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'New York') 
SELECT DISTINCT Contents FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'New York') ORDER BY Contents ASC; 
SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks') AND Code NOT IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors'); 
SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks') AND Code NOT IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors'); 
SELECT Code, Location, Capacity FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents IN ('Rocks', 'Scissors')); 
SELECT DISTINCT Warehouse FROM Boxes WHERE Contents IN ('Rocks', 'Scissors'); 
SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents IN ('Rocks', 'Scissors')); 
SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents IN ('Rocks', 'Scissors')); 
SELECT Code, Contents FROM Boxes ORDER BY Value; 
SELECT Code, Contents FROM Boxes ORDER BY Value; 
SELECT Code, Contents FROM Boxes WHERE Value = (SELECT MIN(Value) FROM Boxes); 
SELECT Code, Contents FROM Boxes WHERE Value = (SELECT MIN(Value) FROM Boxes); 
SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes); 
SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes); 
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents; 
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents ASC; 
SELECT Code FROM Boxes WHERE Value > ALL (SELECT Value FROM Boxes WHERE Contents = 'Rocks'); 
SELECT Code FROM Boxes WHERE Value > ALL (SELECT Value FROM Boxes WHERE Contents = 'Rocks'); 
SELECT Code, Contents FROM Boxes WHERE Value > ALL (SELECT Value FROM Boxes WHERE Contents = 'Scissors'); 
SELECT Code, Contents FROM Boxes WHERE Value > ALL (SELECT Value FROM Boxes WHERE Contents = 'Scissors'); 
SELECT SUM(Value) FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses WHERE Capacity = (SELECT MAX(Capacity) FROM Warehouses)); 
SELECT SUM(Value) FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses WHERE Capacity = (SELECT MAX(Capacity) FROM Warehouses)); 
SELECT Code, AVG(Value) FROM Boxes GROUP BY Code HAVING AVG(Value) > 150; 
SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse HAVING AVG(Value) > 150; 
SELECT Contents, SUM(Value) AS Total_Value, COUNT(*) AS Num_Boxes 
SELECT Contents, SUM(Value), COUNT(*) FROM Boxes GROUP BY Contents; 
SELECT Location, SUM(Capacity) AS Total, AVG(Capacity) AS Average, MAX(Capacity) AS Maximum FROM Warehouses GROUP BY Location;  
SELECT Location, SUM(Capacity) AS TotalCapacity, AVG(Capacity) AS AverageCapacity, MAX(Capacity) AS MaximumCapacity FROM Warehouses GROUP BY Location; 
SELECT SUM(Capacity) FROM Warehouses; 
SELECT SUM(Capacity) FROM Warehouses; 
SELECT Location, MAX(Value) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Location; 
SELECT Location, MAX(Value) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Location; 
SELECT Code, COUNT(*) FROM Boxes GROUP BY Code; 
SELECT COUNT(*) AS num_boxes, Warehouse FROM Boxes GROUP BY Warehouse; 
SELECT COUNT(*) FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks'); 
SELECT COUNT(DISTINCT Warehouse) FROM Boxes WHERE Contents = 'Rocks'; 
SELECT Boxes.Code, Warehouses.Location FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code; 
SELECT Boxes.Code, Warehouses.Location FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code; 
SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago'); 
SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago') 
SELECT Warehouse, COUNT(*) FROM Boxes GROUP BY Warehouse; 
SELECT Warehouse, COUNT(*) FROM Boxes GROUP BY Warehouse; 
SELECT Warehouse, COUNT(DISTINCT Contents) AS num_contents FROM Boxes GROUP BY Warehouse; 
SELECT COUNT(DISTINCT Contents) AS num_contents, Warehouse FROM Boxes GROUP BY Warehouse; 
SELECT Code FROM Warehouses WHERE Capacity < (SELECT COUNT(*) FROM Boxes WHERE Boxes.Warehouse = Warehouses.Code); 
SELECT Code FROM Warehouses WHERE Capacity < (SELECT COUNT(*) FROM Boxes WHERE Warehouse = Warehouses.Code); 
SELECT SUM(Value) FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago'); 
SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location!= 'Chicago'); 
SELECT University_Name, City, State FROM university ORDER BY University_Name ASC; 
SELECT University_Name, City, State FROM university ORDER BY University_Name ASC; 
SELECT COUNT(*) FROM university WHERE State = 'Illinois' OR State = 'Ohio'; 
SELECT COUNT(*) FROM university WHERE State = 'Illinois' OR State = 'Ohio'; 
SELECT MAX(Enrollment), AVG(Enrollment), MIN(Enrollment) FROM university; 
SELECT MAX(Enrollment), AVG(Enrollment), MIN(Enrollment) FROM university; 
SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university); 
SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university); 
SELECT Home_Conference FROM university; 
SELECT DISTINCT Home_Conference FROM university; 
SELECT Home_Conference, COUNT(University_ID) FROM university GROUP BY Home_Conference; 
SELECT COUNT(University_ID) AS num_universities, Home_Conference FROM university GROUP BY Home_Conference;  
SELECT State, COUNT(*) AS num_universities FROM university GROUP BY State ORDER BY num_universities DESC LIMIT 1;  
SELECT State, COUNT(*) AS num_universities FROM university GROUP BY State ORDER BY num_universities DESC LIMIT 1;  
SELECT Home_Conference FROM university WHERE Enrollment > 2000 GROUP BY Home_Conference; 
SELECT Home_Conference FROM university WHERE Enrollment > 2000 GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000; 
SELECT Home_Conference, SUM(Enrollment) AS Total_Enrollment FROM university GROUP BY Home_Conference ORDER BY Total_Enrollment ASC LIMIT 1;  
SELECT Home_Conference, MIN(Enrollment) AS min_enrollment FROM university GROUP BY Home_Conference ORDER BY min_enrollment ASC;  
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code; 
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code; 
SELECT major.Major_Name, major_ranking.Rank 
SELECT major_ranking.Rank, major.Major_Name 
SELECT University_Name, City, State FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Rank = 1); 
SELECT University_Name, City, State FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Rank = 1); 
SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID HAVING COUNT(*) = (SELECT COUNT(*) FROM major_ranking WHERE Rank = 1 GROUP BY University_ID ORDER BY COUNT(*) DESC LIMIT 1)); 
SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID HAVING COUNT(*) = (SELECT COUNT(*) FROM major)); 
SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1); 
SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1); 
SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Urban Education')); 
SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Urban Education')); 
SELECT University_Name, Rank FROM university, overall_ranking WHERE university.University_ID = overall_ranking.University_ID AND State = 'Wisconsin'; 
SELECT University_Name, Rank FROM university, overall_ranking WHERE university.University_ID = overall_ranking.University_ID AND State = 'Wisconsin'; 
SELECT University_Name FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY Research_point DESC LIMIT 1; 
SELECT University_Name FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY Research_point DESC LIMIT 1; 
SELECT University_Name FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY Reputation_point ASC; 
SELECT University_Name FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY Reputation_point ASC; 
SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Rank >= 3); 
SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Rank <= 3); 
SELECT SUM(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5); 
SELECT SUM(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5); 
SELECT University_Name, Citation_point FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE Reputation_point IN (SELECT Reputation_point FROM overall_ranking ORDER BY Reputation_point DESC LIMIT 3) ORDER BY Citation_point DESC; 
SELECT University_Name, Citation_point 
SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(*) > 2; 
SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(*) > 2; 
SELECT Title FROM Movies WHERE Rating IS NULL; 
SELECT Title FROM Movies WHERE Rating IS NULL; 
SELECT Title FROM Movies WHERE Rating = 'G'; 
SELECT Title FROM Movies WHERE Rating = 'G'; 
SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon'); 
SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon') 
SELECT Title, Name FROM Movies, MovieTheaters WHERE Movies.Code = MovieTheaters.Movie; 
SELECT Title, Name FROM Movies, MovieTheaters WHERE Movies.Code = MovieTheaters.Movie; 
SELECT COUNT(*) FROM Movies WHERE Rating = 'G'; 
SELECT COUNT(*) FROM Movies WHERE Rating = 'G'; 
SELECT COUNT(*) FROM Movies; 
SELECT COUNT(*) FROM Movies, MovieTheaters WHERE Movies.Code = MovieTheaters.Movie; 
SELECT COUNT(DISTINCT Movie) FROM MovieTheaters; 
SELECT COUNT(DISTINCT Movie) FROM MovieTheaters; 
SELECT COUNT(DISTINCT Code) FROM MovieTheaters; 
SELECT COUNT(*) FROM MovieTheaters 
SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%'; 
SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%'; 
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating IN ('G', 'PG')); 
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating IN ('G', 'PG')); 
SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon' OR Name = 'Imperial'); 
SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon' OR Name = 'Imperial'); 
SELECT Name FROM MovieTheaters WHERE Name = 'Odeon' OR Name = 'Imperial'; 
SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon' OR Name = 'Imperial'); 
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon'); 
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon') 
SELECT Title FROM Movies ORDER BY Title ASC; 
SELECT Title FROM Movies ORDER BY Title ASC; 
SELECT Title FROM Movies ORDER BY Rating; 
SELECT Title FROM Movies ORDER BY Rating; 
SELECT Name FROM MovieTheaters ORDER BY Movie DESC LIMIT 1; 
SELECT Name FROM MovieTheaters ORDER BY Movie DESC LIMIT 1; 
SELECT Name FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Name FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Rating, COUNT(*) FROM Movies GROUP BY Rating; 
SELECT Rating, COUNT(*) FROM Movies GROUP BY Rating; 
SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL; 
SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL; 
SELECT Name FROM MovieTheaters WHERE Movie IS NOT NULL; 
SELECT Name FROM MovieTheaters WHERE Movie IS NOT NULL; 
SELECT Name FROM MovieTheaters WHERE Movie IS NULL; 
SELECT Name FROM MovieTheaters WHERE Movie IS NULL; 
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G'); 
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G') 
SELECT Title FROM Movies; 
SELECT Title FROM Movies; 
SELECT DISTINCT Rating FROM Movies; 
SELECT DISTINCT Rating FROM Movies; 
SELECT * FROM Movies WHERE Rating IS NULL; 
SELECT * FROM Movies WHERE Rating IS NULL; 
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters); 
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters); 
SELECT Recipient, Contents, Weight FROM Package ORDER BY Weight DESC LIMIT 1; 
SELECT Name FROM Client WHERE AccountNumber IN (SELECT Recipient FROM Package WHERE Weight = (SELECT MAX(Weight) FROM Package)); 
SELECT SUM(Weight) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT SUM(Weight) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT Position FROM Employee WHERE Name = 'Amy Wong'; 
SELECT Position FROM Employee WHERE Name = 'Amy Wong'; 
SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela'; 
SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela'; 
SELECT AVG(Salary) FROM Employee WHERE Position = 'Intern'; 
SELECT AVG(Salary) FROM Employee WHERE Position = 'Intern'; 
SELECT Level FROM Has_Clearance WHERE Employee = (SELECT EmployeeID FROM Employee WHERE Name = 'Physician') 
SELECT Level FROM Has_Clearance WHERE Employee IN (SELECT EmployeeID FROM Employee WHERE Position = 'Physician'); 
SELECT PackageNumber FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT COUNT(*) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT PackageNumber FROM Package WHERE Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT PackageNumber FROM Package WHERE Recipient = 'Leo Wong' ORDER BY PackageNumber ASC;  
SELECT * FROM Package WHERE Sender = 'Leo Wong' OR Recipient = 'Leo Wong'; 
SELECT PackageNumber FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') OR Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') 
SELECT COUNT(*) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Ogden Wernstrom') AND Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT COUNT(*) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Ogden Wernstrom') AND Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT Contents FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'John Zoidfarb'); 
SELECT Contents FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'John Zoidfarb'); 
SELECT PackageNumber, Weight FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name LIKE '%John%') ORDER BY Weight DESC LIMIT 1; 
SELECT PackageNumber, Weight FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name LIKE 'John%') ORDER BY Weight DESC LIMIT 1; 
SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC LIMIT 3; 
SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC LIMIT 3; 
SELECT Client.Name, COUNT(Package.PackageNumber) AS num_packages 
SELECT Client.Name, COUNT(Package.PackageNumber) AS PackageCount 
SELECT Client.Name, COUNT(Package.PackageNumber) AS NumberOfPackagesReceived 
SELECT MIN(Count), Recipient FROM (SELECT COUNT(*) AS Count, Recipient FROM Package GROUP BY Recipient) GROUP BY Recipient ORDER BY Count ASC LIMIT 1; 
SELECT Name FROM Client WHERE AccountNumber IN (SELECT Sender FROM Package GROUP BY Sender HAVING COUNT(Sender) > 1); 
SELECT Name FROM Client WHERE AccountNumber IN (SELECT Sender FROM Package GROUP BY Sender HAVING COUNT(Sender) > 1); 
SELECT Coordinates FROM Planet WHERE Name = 'Mars'; 
SELECT Coordinates FROM Planet WHERE Name = 'Mars'; 
SELECT Name, Coordinates FROM Planet ORDER BY Name ASC; 
SELECT Name, Coordinates FROM Planet ORDER BY Name ASC; 
SELECT ShipmentID FROM Shipment WHERE Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Phillip J. Fry') 
SELECT ShipmentID FROM Shipment WHERE Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Phillip J Fry'); 
SELECT Date FROM Shipment; 
SELECT Date FROM Shipment; 
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'); 
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'); 
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') AND Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela'); 
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') AND Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela'); 
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') OR Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela'); 
SELECT ShipmentID FROM Shipment WHERE Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela') AND Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'); 
SELECT Planet.Name, COUNT(ShipmentID) AS TotalShipments FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID GROUP BY Planet.Name ORDER BY TotalShipments DESC;  
SELECT Planet.Name, COUNT(ShipmentID) AS num_shipments 
SELECT Planet.Name 
SELECT Planet.Name 
SELECT Name, COUNT(*) FROM Employee, Shipment WHERE Employee.EmployeeID = Shipment.Manager GROUP BY Employee.EmployeeID; 
SELECT COUNT(ShipmentID), Name FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID GROUP BY Name; 
SELECT SUM(Weight) FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars')); 
SELECT SUM(Weight) FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars')); 
SELECT Planet.Name, SUM(Package.Weight) AS TotalWeight 
SELECT Planet.Name, SUM(Package.Weight) AS TotalPackageWeight FROM Planet INNER JOIN Shipment ON Planet.PlanetID = Shipment.Planet INNER JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet.Name ORDER BY TotalPackageWeight DESC;  
SELECT Planet.Name FROM Planet, Shipment, Package WHERE Planet.PlanetID = Shipment.Planet AND Shipment.ShipmentID = Package.Shipment GROUP BY Planet.PlanetID HAVING SUM(Package.Weight) > 30; 
SELECT Planet.Name FROM Planet, Shipment, Package WHERE Planet.PlanetID = Shipment.Planet AND Shipment.ShipmentID = Package.Shipment GROUP BY Planet.PlanetID HAVING SUM(Package.Weight) > 30; 
SELECT PackageNumber FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8')) AND Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan'); 
SELECT COUNT(*) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan') AND Shipment = (SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8')); 
SELECT PackageNumber FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8')) OR Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan') 
SELECT COUNT(*) FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8')) OR Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan') 
SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30; 
SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30; 
SELECT Name FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars')); 
SELECT Name FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars')); 
SELECT Name FROM Employee WHERE EmployeeID IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omega III')); 
SELECT Name FROM Employee WHERE EmployeeID IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omega III')); 
SELECT Planet.Name FROM Planet INNER JOIN Has_Clearance ON Planet.PlanetID = Has_Clearance.Planet WHERE Has_Clearance.Level = 1 GROUP BY Planet.Name HAVING COUNT(*) = 1;  
SELECT Planet.Name FROM Planet, Has_Clearance WHERE Planet.PlanetID = Has_Clearance.Planet GROUP BY Planet.PlanetID HAVING COUNT(Has_Clearance.Employee) = 1; 
SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000; 
SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000; 
SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000; 
SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000; 
SELECT COUNT(*) FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars')); 
SELECT COUNT(*) FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars')); 
SELECT COUNT(*) FROM game; 
SELECT COUNT(*) FROM game; 
SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC; 
SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC; 
SELECT AVG(Units_sold_Millions) FROM game WHERE Developers!= 'Nintendo'; 
SELECT AVG(Units_sold_Millions) FROM game WHERE Developers!= 'Nintendo'; 
SELECT Platform_name, Market_district FROM platform; 
SELECT platform_name, market_district FROM platform; 
SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1; 
SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1; 
SELECT MAX(Rank_of_the_year), MIN(Rank_of_the_year) FROM player; 
SELECT MAX(Rank_of_the_year), MIN(Rank_of_the_year) FROM player; 
SELECT COUNT(*) FROM player WHERE Rank_of_the_year < 3; 
SELECT COUNT(*) FROM player WHERE Rank_of_the_year <= 3; 
SELECT Player_name FROM player ORDER BY Player_name ASC; 
SELECT Player_name FROM player ORDER BY Player_name ASC; 
SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC; 
SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC; 
SELECT Player_name, Rank_of_the_year FROM player WHERE Player_ID IN (SELECT Player_ID FROM game_player WHERE Game_ID IN (SELECT Game_ID FROM game WHERE Title = 'Super Mario World')); 
SELECT Player_name, Rank_of_the_year FROM player WHERE Player_ID IN (SELECT Player_ID FROM game_player WHERE Game_ID IN (SELECT Game_ID FROM game WHERE Title = 'Super Mario World')); 
SELECT DISTINCT Developers FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Auburn')) 
SELECT DISTINCT Developers FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Auburn')); 
SELECT AVG(Units_sold_Millions) FROM game_player JOIN game ON game_player.Game_ID = game.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.Position = 'Guard'; 
SELECT AVG(Units_sold_Millions) FROM game_player JOIN game ON game_player.Game_ID = game.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.Position = 'Guard'; 
SELECT title, platform_name FROM game, platform WHERE game.platform_id = platform.platform_id; 
SELECT Title, Platform_name FROM game, platform WHERE game.Platform_ID = platform.Platform_ID; 
SELECT Title FROM game WHERE Platform_ID IN (SELECT Platform_ID FROM platform WHERE Market_district IN ('Asia', 'USA')); 
SELECT Title FROM game WHERE Platform_ID IN (SELECT Platform_ID FROM platform WHERE Market_district IN ('Asia', 'USA')); 
SELECT Franchise, COUNT(*) FROM game GROUP BY Franchise; 
SELECT Franchise, COUNT(*) AS num_games FROM game GROUP BY Franchise;  
SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(Franchise) = (SELECT MAX(COUNT(Franchise)) FROM game GROUP BY Franchise); 
SELECT Franchise, COUNT(*) AS num_games FROM game GROUP BY Franchise ORDER BY num_games DESC LIMIT 1;  
SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*) >= 2; 
SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*) >= 2; 
SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player); 
SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player); 
SELECT Title FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Oklahoma') AND Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Auburn')); 
SELECT Title FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Oklahoma' OR College = 'Auburn')); 
SELECT DISTINCT Franchise FROM game; 
SELECT DISTINCT Franchise FROM game; 
SELECT Title FROM game WHERE Game_ID NOT IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE Position = 'Guard')); 
SELECT Title FROM game WHERE Game_ID NOT IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE Position = 'Guard')); 
SELECT Name FROM press ORDER BY Year_Profits_billion DESC; 
SELECT Name FROM press ORDER BY Year_Profits_billion DESC; 
SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1; 
SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1; 
SELECT AVG(Year_Profits_billion), MAX(Year_Profits_billion) FROM press; 
SELECT press.Name, AVG(press.Year_Profits_billion), MAX(press.Year_Profits_billion) FROM press GROUP BY press.Name; 
SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press); 
SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press); 
SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) OR Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press); 
SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) OR Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press); 
SELECT COUNT(*) FROM author WHERE age < 30; 
SELECT COUNT(*) FROM author WHERE age < 30; 
SELECT Gender, AVG(Age) FROM author GROUP BY Gender; 
SELECT Gender, AVG(Age) FROM author GROUP BY Gender; 
SELECT Gender, COUNT(*) FROM author WHERE Age > 30 GROUP BY Gender; 
SELECT Gender, COUNT(*) AS count FROM author WHERE Age > 30 GROUP BY Gender; 
SELECT Title FROM book ORDER BY Release_date DESC; 
SELECT Title FROM book ORDER BY Release_date DESC; 
SELECT Book_Series, COUNT(*) FROM book GROUP BY Book_Series; 
SELECT Book_Series, COUNT(*) AS Count 
SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5; 
SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5; 
SELECT Book_Series FROM book WHERE Sale_Amount > 1000 AND Sale_Amount < 500; 
SELECT Book_Series FROM book WHERE Sale_Amount > 1000 AND Sale_Amount < 500; 
SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book WHERE Book_Series = 'MM') AND Author_ID IN (SELECT Author_ID FROM book WHERE Book_Series = 'LT'); 
SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book WHERE Book_Series = 'MM') AND Author_ID IN (SELECT Author_ID FROM book WHERE Book_Series = 'LT'); 
SELECT Name, Age FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book); 
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book); 
SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID HAVING COUNT(*) > 1); 
SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID HAVING COUNT(Book_ID) > 1); 
SELECT book.Title, author.Name, press.Name 
SELECT book.title, author.name, press.name FROM book INNER JOIN author ON book.author_id = author.author_id INNER JOIN press ON book.press_id = press.press_id ORDER BY book.sale_amount DESC LIMIT 3;  
SELECT press.Name, SUM(book.Sale_Amount) AS total_book_sale_amount FROM press JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Name; 
SELECT press.Name, SUM(book.Sale_Amount) AS total_book_sale_amount FROM press JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Name; 
SELECT press.Name, COUNT(book.Book_ID) AS num_books_sold 
SELECT press.Name, COUNT(book.Book_ID) FROM press JOIN book ON press.Press_ID = book.Press_ID WHERE book.Sale_Amount > 1000 GROUP BY press.Name; 
SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book WHERE Sale_Amount = (SELECT MAX(Sale_Amount) FROM book)); 
SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book WHERE Sale_Amount = (SELECT MAX(Sale_Amount) FROM book)); 
SELECT Name, Gender FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT Name, Gender FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book WHERE Press_ID IN (SELECT Press_ID FROM press WHERE Name = 'Accor')); 
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book WHERE Press_ID IN (SELECT Press_ID FROM press WHERE Name = 'Accor')); 
SELECT Name, Year_Profits_billion FROM press WHERE Press_ID IN (SELECT Press_ID FROM book GROUP BY Press_ID HAVING COUNT(Book_ID) > 2); 
SELECT press.Name, press.Year_Profits_billion FROM press JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Press_ID HAVING COUNT(book.Book_ID) > 2; 
SELECT COUNT(author_name) FROM Authors; 
SELECT author_name FROM Authors; 
SELECT author_name, other_details FROM Authors; 
SELECT other_details FROM Authors WHERE author_name = 'Addison Denesik'; 
SELECT COUNT(*) FROM Documents; 
SELECT author_name FROM Documents WHERE document_id = 4; 
SELECT author_name FROM Documents WHERE document_name = 'Travel to Brazil'; 
SELECT COUNT(*) FROM Documents WHERE author_name = 'Era Kerluke'; 
SELECT document_name, document_description FROM Documents; 
SELECT document_id, document_name FROM Documents WHERE author_name = 'Bianka Cummings'; 
SELECT author_name, other_details FROM Authors WHERE author_name IN (SELECT author_name FROM Documents WHERE document_name = 'Travel to China'); 
SELECT author_name, COUNT(document_name) FROM Documents GROUP BY author_name; 
SELECT author_name, COUNT(*) AS num_docs 
SELECT author_name FROM Documents GROUP BY author_name HAVING COUNT(*) >= 2; 
SELECT COUNT(*) FROM Business_Processes; 
SELECT next_process_id, process_name, process_description FROM Business_Processes WHERE process_id = 9; 
SELECT process_name FROM Business_Processes WHERE process_id = (SELECT next_process_id FROM Business_Processes WHERE process_id = 9); 
SELECT COUNT(*) FROM Process_Outcomes; 
SELECT process_outcome_code, process_outcome_description FROM Process_Outcomes; 
SELECT process_outcome_description FROM Process_Outcomes WHERE process_outcome_code = 'working'; 
SELECT COUNT(process_status_code) FROM Process_Status; 
SELECT process_status_code, process_status_description FROM Process_Status; 
SELECT process_status_description FROM Process_Status WHERE process_status_code = 'ct'; 
SELECT COUNT(*) FROM Staff; 
SELECT staff_id, staff_details FROM Staff; 
SELECT staff_details FROM Staff WHERE staff_id = 100; 
SELECT COUNT(*) FROM Ref_Staff_Roles; 
SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles; 
SELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code = 'HR'; 
SELECT COUNT(DISTINCT document_id) FROM Documents_Processes; 
SELECT process_id FROM Business_Processes WHERE process_id IN (SELECT process_id FROM Documents_Processes); 
SELECT document_id FROM Documents WHERE document_id NOT IN (SELECT document_id FROM Documents_Processes); 
SELECT process_id FROM Business_Processes WHERE process_id NOT IN (SELECT process_id FROM Documents_Processes); 
SELECT process_outcome_description, process_status_description 
SELECT process_name FROM Business_Processes WHERE process_id IN (SELECT process_id FROM Documents_Processes WHERE document_id IN (SELECT document_id FROM Documents WHERE document_name = 'Travel to Brazil')); 
SELECT process_id, COUNT(document_id) FROM Documents_Processes GROUP BY process_id; 
SELECT COUNT(*) FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9; 
SELECT staff_id, COUNT(*) AS num_doc_proc 
SELECT staff_role_code, COUNT(*) AS num_processes 
SELECT COUNT(DISTINCT staff_role_code) FROM Staff_in_Processes WHERE staff_id = 3; 
SELECT COUNT(*) FROM Agencies; 
SELECT COUNT(*) FROM Agencies; 
SELECT agency_id, agency_details FROM Agencies; 
SELECT agency_id, agency_details FROM Agencies; 
SELECT COUNT(*) FROM Clients; 
SELECT COUNT(*) FROM Clients; 
SELECT client_id, client_details FROM Clients; 
SELECT client_id, client_details FROM Clients; 
SELECT agency_id, COUNT(client_id) FROM Clients GROUP BY agency_id; 
SELECT agency_id, COUNT(client_id) AS client_count 
SELECT agency_id, agency_details, COUNT(client_id) AS client_count 
SELECT agency_id, agency_details FROM Agencies WHERE agency_id = (SELECT agency_id FROM Clients GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(*) >= 2); 
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(*) >= 2); 
SELECT agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients WHERE client_details = 'Mac') 
SELECT agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients WHERE client_details = 'Mac'); 
SELECT client_details, agency_details FROM Clients, Agencies WHERE Clients.agency_id = Agencies.agency_id; 
SELECT client_details, agency_details FROM Clients, Agencies WHERE Clients.agency_id = Agencies.agency_id; 
SELECT sic_code, COUNT(client_id) FROM Clients GROUP BY sic_code; 
SELECT sic_code, COUNT(client_id) AS client_count FROM Clients GROUP BY sic_code ORDER BY client_count DESC;  
SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad'; 
SELECT client_details, purpose_of_meeting 
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients); 
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients); 
SELECT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT agency_id FROM Clients); 
SELECT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT agency_id FROM Clients); 
SELECT COUNT(*) FROM Invoices; 
SELECT COUNT(*) FROM Invoices; 
SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE client_id IN (SELECT client_id FROM Clients);  
SELECT invoice_id, invoice_status, invoice_details FROM Invoices; 
SELECT client_id, COUNT(invoice_id) AS num_invoices FROM Invoices GROUP BY client_id;  
SELECT client_id, COUNT(invoice_id) AS num_invoices FROM Invoices GROUP BY client_id;  
SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(invoice_id) = (SELECT MAX(invoice_count) FROM (SELECT client_id, COUNT(invoice_id) AS invoice_count FROM Invoices GROUP BY client_id))); 
SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT client_id, COUNT(*) AS count FROM Invoices GROUP BY client_id))); 
SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(invoice_id) >= 2; 
SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(invoice_id) >= 2; 
SELECT invoice_status, COUNT(invoice_id) AS num_invoices 
SELECT invoice_status, COUNT(*) AS invoice_count FROM Invoices GROUP BY invoice_status;  
SELECT invoice_status, COUNT(invoice_status) AS invoice_count 
SELECT invoice_status, COUNT(invoice_status) AS invoice_count 
SELECT invoice_status, invoice_details, client_id, client_details, agency_id, agency_details 
SELECT invoice_status, invoice_details, client_id, client_details, agency_id, agency_details 
SELECT meeting_type, other_details FROM Meetings; 
SELECT meeting_type, other_details FROM Meetings; 
SELECT meeting_outcome, purpose_of_meeting FROM Meetings; 
SELECT meeting_outcome, purpose_of_meeting FROM Meetings; 
SELECT payment_id, payment_details FROM Payments WHERE invoice_id IN (SELECT invoice_id FROM Invoices WHERE invoice_status = 'Working'); 
SELECT payment_id, payment_details FROM Payments WHERE invoice_id IN (SELECT invoice_id FROM Invoices WHERE invoice_status = 'Working'); 
SELECT invoice_id, invoice_status FROM Invoices WHERE invoice_id NOT IN (SELECT invoice_id FROM Payments); 
SELECT invoice_id, invoice_status FROM Invoices WHERE invoice_id NOT IN (SELECT invoice_id FROM Payments); 
SELECT COUNT(*) FROM Payments; 
SELECT COUNT(*) FROM Payments; 
SELECT payment_id, invoice_id, payment_details FROM Payments; 
SELECT payment_id, invoice_id, payment_details FROM Payments; 
SELECT invoice_id, invoice_status FROM Invoices; 
SELECT DISTINCT Invoices.invoice_id, Invoices.invoice_status FROM Invoices JOIN Payments ON Invoices.invoice_id = Payments.invoice_id;  
SELECT invoice_id, COUNT(payment_id) AS num_payments 
SELECT invoice_id, COUNT(payment_id) AS payment_count FROM Payments GROUP BY invoice_id;  
SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments GROUP BY invoice_id HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT invoice_id, COUNT(*) AS count FROM Payments GROUP BY invoice_id))); 
SELECT invoice_id, invoice_status, invoice_details 
SELECT COUNT(*) FROM Staff; 
SELECT COUNT(*) FROM Staff; 
SELECT agency_id, COUNT(staff_id) AS staff_count 
SELECT agency_id, COUNT(staff_id) AS num_staff 
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Staff GROUP BY agency_id HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT agency_id, COUNT(*) AS count FROM Staff GROUP BY agency_id))); 
SELECT agency_id, agency_details FROM Agencies WHERE agency_id = (SELECT agency_id FROM Staff GROUP BY agency_id ORDER BY COUNT(staff_id) DESC LIMIT 1); 
SELECT meeting_outcome, COUNT(*) AS meeting_count FROM Meetings GROUP BY meeting_outcome ORDER BY meeting_count DESC;  
SELECT meeting_outcome, COUNT(*) AS meeting_count FROM Meetings GROUP BY meeting_outcome ORDER BY meeting_count DESC;  
SELECT client_id, COUNT(meeting_id) AS num_meetings FROM Meetings GROUP BY client_id ORDER BY num_meetings DESC;  
SELECT client_id, COUNT(meeting_id) AS meeting_count 
SELECT meeting_type, COUNT(*) AS meeting_count FROM Meetings GROUP BY meeting_type ORDER BY meeting_count DESC;  
SELECT meeting_type, COUNT(*) AS meeting_count FROM Meetings GROUP BY meeting_type;  
SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM Meetings JOIN Clients ON Meetings.client_id = Clients.client_id; 
SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id; 
SELECT meeting_id, COUNT(staff_id) AS num_staff 
SELECT meeting_id, COUNT(staff_id) AS staff_count 
SELECT staff_id, COUNT(*) AS meeting_count 
SELECT staff_id 
SELECT COUNT(*) FROM Staff_in_Meetings 
SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Meetings; 
SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings); 
SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings); 
SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings UNION SELECT client_id FROM Invoices); 
SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings UNION SELECT client_id FROM Invoices); 
SELECT staff_id, staff_details FROM Staff WHERE staff_id IN (SELECT staff_id FROM Staff_in_Meetings) AND staff_details LIKE '%s%'; 
SELECT staff_id, staff_details FROM Staff WHERE staff_details LIKE '%s%' AND staff_id IN (SELECT staff_id FROM Staff_in_Meetings); 
SELECT client_id, sic_code, agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings GROUP BY client_id HAVING COUNT(*) = 1) AND client_id IN (SELECT client_id FROM Invoices);  
SELECT client_id, sic_code, agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings GROUP BY client_id HAVING COUNT(*) = 1) AND client_id IN (SELECT client_id FROM Invoices);  
SELECT start_date_time, end_date_time, client_details, staff_details 
SELECT m.start_date_time, m.end_date_time, c.client_details, s.staff_details 
