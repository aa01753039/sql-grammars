SELECT COUNT(*) FROM club; 
SELECT COUNT(*) FROM club; 
SELECT Name FROM club ORDER BY Name ASC; 
SELECT Name FROM club ORDER BY Name ASC; 
SELECT club.Name, club.Manager, club.Captain FROM club WHERE club.Manager IS NOT NULL AND club.Captain IS NOT NULL; 
SELECT club.Name, club.Manager, club.Captain FROM club 
SELECT Name FROM club WHERE Manufacturer!= 'Nike'; 
SELECT Name FROM club WHERE Manufacturer!= 'Nike'; 
SELECT Name FROM player ORDER BY Wins_count ASC; 
SELECT Name FROM player ORDER BY Wins_count ASC; 
SELECT Name FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player); 
SELECT Name FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player); 
SELECT DISTINCT Country FROM player WHERE Earnings > 1200000; 
SELECT Country FROM player WHERE Earnings > 1200000; 
SELECT Country FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player WHERE Wins_count > 2); 
SELECT Country FROM player WHERE Wins_count > 2 GROUP BY Country ORDER BY SUM(Wins_count) DESC LIMIT 1; 
SELECT p.Name, c.Name FROM player p JOIN club c ON p.Club_ID = c.Club_ID; 
SELECT p.Name, c.Name FROM player p JOIN club c ON p.Club_ID = c.Club_ID WHERE p.Name LIKE '%%'; 
SELECT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player WHERE Wins_count > 2); 
SELECT club.Name FROM club WHERE club.Club_ID IN ( SELECT club.Club_ID FROM club JOIN player ON club.Club_ID = player.Club_ID WHERE player.Wins_count > 2 ) 
SELECT Name FROM player WHERE Club_ID IN (SELECT Club_ID FROM club WHERE Manager = "Sam Allardyce"); 
SELECT Name FROM player WHERE Club_ID = (SELECT Club_ID FROM club WHERE Manager = 'Sam Allardyce'); 
SELECT Name FROM club ORDER BY AVG(Earnings) DESC; 
SELECT club.Name FROM club INNER JOIN (SELECT club_id, AVG(player.earnings) AS avg_earnings FROM player GROUP BY club_id) AS avg_earnings ON club.club_id = avg_earnings.club_id ORDER BY avg_earnings DESC; 
SELECT DISTINCT Manufacturer, COUNT(Club_ID) AS "Number of clubs" FROM club GROUP BY Manufacturer ORDER BY "Number of clubs" DESC; 
SELECT Manufacturer, COUNT(*) AS Count FROM club GROUP BY Manufacturer ORDER BY Count DESC; 
SELECT Manufacturer, COUNT(*) AS Count FROM club GROUP BY Manufacturer ORDER BY Count DESC LIMIT 1; 
SELECT Manufacturer, COUNT(*) AS Count FROM club GROUP BY Manufacturer ORDER BY Count DESC LIMIT 1; 
SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*) > 1; 
SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*) > 1; 
SELECT DISTINCT Country FROM player WHERE Club_ID IN (SELECT Club_ID FROM club WHERE Club_ID IN (SELECT Club_ID FROM club WHERE Club_ID IN (SELECT Club_ID FROM club WHERE Club_ID IN (SELECT Club_ID FROM club WHERE Club_ID IN (SELECT Club_ID FROM club WHERE Club_ID IN (SELECT Club_ID FROM club WHERE Club_ID IN (SELECT Club_ID FROM club WHERE Club_ID IN (SELECT Club_ID FROM club WHERE Club_ID IN (SELECT Club_ID FROM club WHERE Club_ID IN (SELECT Club_ID FROM club WHERE Club_ID IN (SELECT Club_ID FROM club WHERE Club_ID IN (SELECT Club_ID FROM club WHERE Club_ID IN (SELECT Club_ID FROM
SELECT DISTINCT     country FROM     player WHERE     player_id IN (         SELECT             player_id         FROM             player         GROUP BY             player_id         HAVING             COUNT(*) > 1     ) ORDER BY     country; 
SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player); 
SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player); 
SELECT Country FROM player WHERE Earnings > 1400000 OR Earnings < 1100000; 
SELECT Country FROM player WHERE Earnings > 1400000 OR Earnings < 1100000 GROUP BY Country HAVING COUNT(*) > 1; 
SELECT COUNT(DISTINCT Country) FROM player; 
SELECT COUNT(DISTINCT Country) FROM player; 
SELECT Player_ID, Name, Earnings FROM player WHERE Country = 'Australia' OR Country = 'Zimbabwe'; 
SELECT "player"."Earnings" FROM "player" WHERE "player"."Country" IN ('Australia', 'Zimbabwe'); 
SELECT     customer_id,     customer_first_name,     customer_last_name FROM     Customers WHERE     customer_id IN (         SELECT             customer_id         FROM             Orders         GROUP BY             customer_id         HAVING             COUNT(order_id) > 2     )     AND customer_id IN (         SELECT             customer_id         FROM             Order_Items         GROUP BY             customer_id         HAVING             COUNT(order_item_id) > 3     ) ORDER BY     customer_id; 
SELECT customer_id, customer_first_name, customer_last_name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items WHERE order_item_id IN (SELECT order_item_id FROM Shipment_Items WHERE shipment_id IN (SELECT shipment_id FROM Shipments WHERE shipment_id IN (SELECT shipment_id FROM Shipment_Items WHERE order_item_id IN (SELECT order_item_id FROM Order_Items WHERE order_id IN (SELECT order_id FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customers WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods WHERE payment_method_code IN (SELECT payment_method_code FROM Customer_Payment_Methods WHERE customer_id IN (SELECT customer_id FROM Customers WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods WHERE payment_method_code IN (SELECT payment_method_code FROM Customer_Payment_Methods WHERE customer_id IN (SELECT customer_id FROM Customers WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods WHERE payment_method_code IN (SELECT payment_method_code FROM Customer_Payment_Methods WHERE customer_id IN (SELECT customer_id FROM Customers WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods WHERE payment_method_code IN (SELECT payment_method_code FROM Customer_Payment_Methods WHERE customer_id IN (SELECT customer_id FROM Customers WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods WHERE payment_method_code IN (SELECT payment_method_code FROM Customer_Payment_Methods WHERE customer_id IN (SELECT customer_id FROM Customers WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods WHERE payment_method_code IN (SELECT payment_method_code FROM Customer_Payment_Methods WHERE customer_id IN (SELECT customer_id FROM Customers WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods WHERE payment_method_code IN (SELECT payment_method_code FROM Customer_Payment_Methods WHERE customer_id IN (SELECT customer_id FROM Customers WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods WHERE payment_method_code
SELECT Orders.order_id, Orders.order_status_code, COUNT(Order_Items.order_item_id) AS num_products FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id, Orders.order_status_code ORDER BY Orders.order_id ASC; 
SELECT COUNT(DISTINCT order_item_id) AS num_products, order_status_code, order_id FROM Order_Items GROUP BY order_status_code, order_id; 
SELECT DISTINCT date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items WHERE order_item_id IN (SELECT order_item_id FROM Shipment_Items WHERE shipment_id IN (SELECT shipment_id FROM Shipments WHERE invoice_number IN (SELECT invoice_number FROM Invoices WHERE invoice_status_code = 'Shipped')))); 
SELECT MIN(date_order_placed) AS earliest_order_date, MAX(date_order_placed) AS latest_order_date FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items WHERE order_item_id IN (SELECT order_item_id FROM Shipment_Items WHERE shipment_id IN (SELECT shipment_id FROM Shipments WHERE invoice_number IN (SELECT invoice_number FROM Invoices WHERE invoice_status_code = 'Shipped')))); 
SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders); 
SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders); 
SELECT product_id, product_name, product_price, product_color FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) >= 2); 
SELECT product_id, product_name, product_price, product_color FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) < 2); 
SELECT order_id, date_order_placed FROM Order_Items GROUP BY order_id HAVING COUNT(*) >= 2 ORDER BY order_id ASC; 
SELECT order_id, date_order_placed FROM Order_Items GROUP BY order_id HAVING COUNT(*) >= 2; 
SELECT product_id, product_name, product_price FROM Order_Items GROUP BY product_id ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT product_id, product_name, product_price FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT order_id, SUM(product_price) FROM Order_Items GROUP BY order_id HAVING SUM(product_price) = (SELECT MIN(SUM(product_price)) FROM Order_Items GROUP BY order_id); 
SELECT order_id, SUM(product_price) FROM Order_Items GROUP BY order_id ORDER BY SUM(product_price) ASC LIMIT 1; 
SELECT payment_method_code, COUNT(*) AS num_customers FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY num_customers DESC LIMIT 1; 
SELECT payment_method_code, COUNT(*) AS num_customers FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY num_customers DESC LIMIT 1; 
SELECT gender_code, COUNT(*) FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY gender_code; 
SELECT     c.gender_code,     COUNT(p.product_id) AS num_products FROM     Customers c     JOIN Orders o ON c.customer_id = o.customer_id     JOIN Order_Items oi ON o.order_id = oi.order_id     JOIN Products p ON oi.product_id = p.product_id GROUP BY     c.gender_code ORDER BY     c.gender_code ASC; 
SELECT `Customers`.`gender_code`, COUNT(`Orders`.`order_id`) FROM `Customers` LEFT JOIN `Orders` ON `Customers`.`customer_id` = `Orders`.`customer_id` GROUP BY `Customers`.`gender_code` ORDER BY `Customers`.`gender_code` ASC; 
SELECT     gender_code,     COUNT(order_id) AS orders_placed FROM     Customers     JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY     gender_code ORDER BY     gender_code 
SELECT Customers.customer_first_name, Customers.customer_middle_initial, Customers.customer_last_name, Customer_Payment_Methods.payment_method_code FROM Customers INNER JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id; 
SELECT Customers.customer_first_name, Customers.customer_middle_initial, Customers.customer_last_name, Customer_Payment_Methods.payment_method_code FROM Customers INNER JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id ORDER BY Customers.customer_first_name, Customers.customer_middle_initial, Customers.customer_last_name, Customer_Payment_Methods.payment_method_code; 
SELECT invoice_status_code, invoice_date, shipment_date FROM Invoices INNER JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number; 
SELECT invoice_status_code, date, shipment_date FROM Invoices INNER JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number; 
SELECT Products.product_name, Shipments.shipment_date FROM Products INNER JOIN Shipment_Items ON Products.product_id = Shipment_Items.order_item_id INNER JOIN Shipments ON Shipment_Items.shipment_id = Shipments.shipment_id; 
SELECT   Products.product_name,   Shipments.shipment_date FROM   Products   INNER JOIN Shipment_Items ON Products.product_id = Shipment_Items.order_item_id   INNER JOIN Shipments ON Shipment_Items.shipment_id = Shipments.shipment_id ORDER BY   Products.product_name,   Shipments.shipment_date 
SELECT order_item_status_code, shipment_tracking_number FROM Order_Items, Shipments WHERE Order_Items.order_item_id = Shipments.order_item_id; 
SELECT order_item_status_code, shipment_tracking_number FROM Order_Items JOIN Shipment_Items ON Order_Items.order_item_id = Shipment_Items.order_item_id WHERE Order_Items.order_item_status_code = 'Shipped' AND Shipment_Items.shipment_id IS NOT NULL; 
SELECT p.product_name, p.product_color FROM Order_Items oi JOIN Shipments s ON oi.order_id = s.order_id JOIN Products p ON oi.product_id = p.product_id WHERE s.shipment_id IS NOT NULL; 
SELECT p.product_name, p.product_color FROM Products p JOIN Shipment_Items si ON p.product_id = si.order_item_id JOIN Shipments s ON si.shipment_id = s.shipment_id WHERE s.shipment_date IS NOT NULL ORDER BY p.product_name; 
SELECT DISTINCT product_name, product_price, product_description FROM Products, Order_Items, Orders, Customers WHERE Products.product_id = Order_Items.product_id AND Order_Items.order_id = Orders.order_id AND Orders.customer_id = Customers.customer_id AND Customers.gender_code = 'F' ORDER BY product_name ASC; 
SELECT DISTINCT p.product_name, p.product_price, p.product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Orders o ON oi.order_id = o.order_id JOIN Customers c ON o.customer_id = c.customer_id WHERE c.gender_code = 'F' ORDER BY p.product_name ASC; 
SELECT invoice_status_code FROM Invoices WHERE invoice_number IN (SELECT invoice_number FROM Shipments WHERE shipment_id IS NULL); 
SELECT invoice_status_code FROM Invoices WHERE invoice_number IN (SELECT invoice_number FROM Shipments WHERE shipment_id IS NULL); 
SELECT Orders.order_id, Orders.date_order_placed, SUM(Order_Items.order_item_status_code) AS total_cost FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id, Orders.date_order_placed ORDER BY Orders.order_id, Orders.date_order_placed; 
SELECT     o.order_id,     o.date_order_placed,     SUM(p.product_price) AS total_amount_paid FROM     Orders o     JOIN Order_Items oi ON o.order_id = oi.order_id     JOIN Products p ON oi.product_id = p.product_id GROUP BY     o.order_id,     o.date_order_placed ORDER BY     o.order_id; 
SELECT COUNT(DISTINCT customer_id) FROM Orders; 
SELECT COUNT(DISTINCT customer_id) FROM Orders; 
SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items; 
SELECT DISTINCT order_item_status_code FROM Order_Items ORDER BY order_item_status_code ASC; 
SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods; 
SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods; 
SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%'; 
SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%'; 
SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'; 
SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'; 
SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products); 
SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products); 
              SELECT COUNT(DISTINCT product_id) FROM Order_Items WHERE order_item_status_code = 'Cancelled' OR order_item_status_code = 'Refunded' OR order_item_status_code = 'Returned' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code = 'Rejected' OR order_item_status_code
SELECT COUNT(*) FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items); 
SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods); 
SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods); 
SELECT order_status_code, date_order_placed FROM Orders ORDER BY order_status_code, date_order_placed; 
SELECT order_status_code, date_order_placed FROM Orders; 
SELECT Customers.address_line_1, Customers.town_city, Customers.county FROM Customers WHERE Customers.country = 'USA' 
SELECT Customers.address_line_1, Customers.town_city, Customers.county, Customers.country FROM Customers WHERE Customers.country = 'United States' 
SELECT   c.customer_first_name AS buyer_first_name,   p.product_name AS product_name FROM   Customers c   INNER JOIN Customer_Payment_Methods cp ON c.customer_id = cp.customer_id   INNER JOIN Orders o ON c.customer_id = o.customer_id   INNER JOIN Order_Items oi ON o.order_id = oi.order_id   INNER JOIN Products p ON oi.product_id = p.product_id WHERE   cp.payment_method_code = 'credit_card' ORDER BY   buyer_first_name,   product_name; 
SELECT c.customer_first_name, oi.product_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id WHERE o.order_status_code = 'CONFIRMED' ORDER BY c.customer_first_name, oi.product_name; 
SELECT COUNT(*) FROM Shipments s JOIN Shipment_Items si ON s.shipment_id = si.shipment_id JOIN Order_Items oi ON si.order_item_id = oi.order_item_id JOIN Orders o ON oi.order_id = o.order_id WHERE o.order_status_code = 'Shipped' AND s.shipment_date IS NOT NULL; 
SELECT COUNT(DISTINCT product_id) FROM Shipment_Items; 
SELECT AVG(product_price) FROM Products; 
SELECT AVG(product_price) FROM Products; 
SELECT AVG(Products.product_price) FROM Products, Order_Items WHERE Order_Items.product_id = Products.product_id; 
SELECT AVG(product_price) FROM Order_Items WHERE order_item_status_code = 'SHIPPED' AND order_id IN (SELECT order_id FROM Shipments WHERE shipment_id IN (SELECT shipment_id FROM Shipment_Items WHERE order_item_id IN (SELECT order_item_id FROM Order_Items WHERE product_id IN (SELECT product_id FROM Products WHERE product_name = 'Product 1')))); 
SELECT C.email_address, C.town_city, C.county FROM Customers C WHERE C.gender_code IN ( SELECT gender_code FROM Customers GROUP BY gender_code HAVING COUNT(*) = ( SELECT COUNT(DISTINCT gender_code) FROM Customers ) ) 
SELECT     c.email_address,     c.town_city,     c.county FROM     Customers c     INNER JOIN Orders o ON c.customer_id = o.customer_id     INNER JOIN Order_Items oi ON o.order_id = oi.order_id     INNER JOIN Products p ON oi.product_id = p.product_id WHERE     p.parent_product_id IS NULL     AND o.order_status_code = 'Cancelled'     AND c.gender_code = 'F' GROUP BY     c.email_address,     c.town_city,     c.county ORDER BY     c.email_address,     c.town_city,     c.county 
SELECT     date_order_placed FROM     Orders WHERE     customer_id IN (         SELECT             customer_id         FROM             Customer_Payment_Methods         GROUP BY             customer_id         HAVING             COUNT(*) >= 2     ) 
SELECT date_order_placed FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(*) >= 2)); 
SELECT     order_status_code FROM     Orders GROUP BY     order_status_code HAVING     COUNT(*) = (         SELECT             COUNT(*)         FROM             Orders         GROUP BY             order_status_code         ORDER BY             COUNT(*) DESC         LIMIT             1     ) 
SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(*) ASC LIMIT 1; 
SELECT product_id, product_description FROM Order_Items, Products WHERE Order_Items.product_id = Products.product_id AND Order_Items.order_item_status_code = 'SOLD' GROUP BY product_id HAVING COUNT(*) > 3; 
SELECT product_id, product_description FROM Order_Items GROUP BY product_id HAVING COUNT(*) > 3; 
SELECT invoice_number, invoice_date FROM Shipments GROUP BY invoice_number HAVING COUNT(*) >= 2; 
SELECT   invoice_number,   shipment_id FROM   Shipments GROUP BY   invoice_number HAVING   COUNT(*) >= 2 ORDER BY   invoice_number ASC; 
SELECT shipment_tracking_number, shipment_date FROM Shipments; 
SELECT shipment_tracking_number, shipment_date FROM Shipments; 
SELECT p.product_color, p.product_description, p.product_size FROM Products p WHERE p.product_price < (SELECT MAX(p2.product_price) FROM Products p2) ORDER BY p.product_color, p.product_description, p.product_size; 
SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products) 
SELECT Name FROM director WHERE Age > (SELECT AVG(Age) FROM director); 
SELECT Name FROM director WHERE Age = (SELECT MAX(Age) FROM director); 
SELECT COUNT(*) FROM channel WHERE internet LIKE '%bbc%'; 
SELECT COUNT(DISTINCT Channel_ID) FROM program WHERE Start_Year > 2010 AND Start_Year < 2020 AND Digital_terrestrial_channel IS NOT NULL; 
SELECT Title FROM program ORDER BY Start_Year DESC; 
SELECT d.Name, COUNT(p.Program_ID) AS num_programs FROM director d JOIN director_admin da ON d.Director_ID = da.Director_ID JOIN channel c ON da.Channel_ID = c.Channel_ID JOIN program p ON c.Channel_ID = p.Channel_ID GROUP BY d.Name ORDER BY num_programs DESC LIMIT 1; 
SELECT d.Name, d.Age FROM director d JOIN director_admin da ON d.Director_ID = da.Director_ID JOIN channel c ON da.Channel_ID = c.Channel_ID JOIN program p ON c.Channel_ID = p.Channel_ID WHERE da.Is_first_director = 1 ORDER BY COUNT(p.Program_ID) DESC LIMIT 1; 
SELECT Title FROM program WHERE Start_Year = (SELECT MAX(Start_Year) FROM program); 
SELECT channel.Name, channel.Internet FROM channel JOIN program ON channel.Channel_ID = program.Channel_ID GROUP BY channel.Channel_ID HAVING COUNT(program.Program_ID) > 1; 
SELECT channel.Name, COUNT(program.Program_ID) FROM channel JOIN program ON channel.Channel_ID = program.Channel_ID GROUP BY channel.Name ORDER BY channel.Name ASC; 
SELECT COUNT(*) FROM channel WHERE NOT EXISTS (SELECT * FROM program WHERE channel.Channel_ID = program.Channel_ID); 
SELECT Name FROM director WHERE Program_ID IN (SELECT Program_ID FROM program WHERE Title = 'Dracula')
SELECT channel.Name, channel.Internet FROM channel WHERE channel.Channel_ID IN ( SELECT channel.Channel_ID FROM channel WHERE channel.Channel_ID IN ( SELECT channel.Channel_ID FROM channel WHERE channel.Channel_ID IN ( SELECT channel.Channel_ID FROM channel WHERE channel.Channel_ID IN ( SELECT channel.Channel_ID FROM channel WHERE channel.Channel_ID IN ( SELECT channel.Channel_ID FROM channel WHERE channel.Channel_ID IN ( SELECT channel.Channel_ID FROM channel WHERE channel.Channel_ID IN ( SELECT channel.Channel_ID FROM channel WHERE channel.Channel_ID IN ( SELECT channel.Channel_ID FROM channel WHERE channel.Channel_ID IN ( SELECT channel.Channel_ID FROM channel WHERE channel.Channel_ID IN ( SELECT channel.Channel_ID FROM channel WHERE channel.Channel_ID IN ( SELECT channel.Channel_ID FROM channel WHERE channel.Channel_ID IN ( SELECT channel.Channel_ID FROM channel WHERE channel.Channel_ID IN ( SELECT channel.Channel_ID FROM channel WHERE channel.Channel_ID IN ( SELECT channel.Channel_ID FROM channel WHERE channel.Channel_ID IN ( SELECT channel
 SELECT Name FROM director WHERE EXISTS (SELECT * FROM director_admin WHERE director_admin.Director_ID = director.Director_ID AND director_admin.Channel_ID = 1) AND EXISTS (SELECT * FROM director_admin WHERE director_admin.Director_ID = director.Director_ID AND director_admin.Channel_ID = 2) AND EXISTS (SELECT * FROM director_admin WHERE director_admin.Director_ID = director.Director_ID AND director_admin.Channel_ID = 3);
SELECT Name FROM channel WHERE EXISTS (SELECT * FROM director_admin WHERE Is_first_director = 1 AND EXISTS (SELECT * FROM director WHERE Age < 40)) AND EXISTS (SELECT * FROM director_admin WHERE Is_first_director = 1 AND EXISTS (SELECT * FROM director WHERE Age > 60))
SELECT Channel_ID, Name FROM channel WHERE Channel_ID NOT IN (SELECT Channel_ID FROM director_admin WHERE Director_ID IN (SELECT Director_ID FROM director WHERE Name = 'Hank Baskett')); 
SELECT COUNT(*) FROM radio; 
SELECT Radio_ID, Transmitter, ERP_kW FROM radio ORDER BY ERP_kW ASC; 
SELECT tv_show_name, Original_Airdate FROM city_channel_tv_show, tv_show WHERE city_channel_tv_show.tv_show_ID = tv_show.tv_show_ID AND Is_online = 1 AND Is_free = 1; 
SELECT Station_name FROM city_channel WHERE Affiliation!= "ABC"; 
SELECT Radio_ID, Transmitter FROM radio WHERE ERP_kW > 150 OR ERP_kW < 30; 
SELECT Transmitter FROM radio WHERE ERP_kW = (SELECT MAX(ERP_kW) FROM radio); 
SELECT AVG(ERP_kW) FROM radio; 
SELECT affiliation, COUNT(*) AS num_channels FROM city_channel JOIN city_channel_radio ON city_channel.ID = city_channel_radio.City_channel_ID GROUP BY affiliation HAVING COUNT(*) >= 10; 
SELECT Affiliation, COUNT(*) AS Count FROM city_channel GROUP BY Affiliation ORDER BY Count DESC LIMIT 1; 
SELECT DISTINCT Affiliation FROM city_channel WHERE ID IN (SELECT City_channel_ID FROM city_channel_radio WHERE Radio_ID IN (SELECT Radio_ID FROM city_channel_radio GROUP BY Radio_ID HAVING COUNT(*) > 3)) OR ID IN (SELECT City_channel_ID FROM city_channel_tv_show WHERE tv_show_ID IN (SELECT tv_show_ID FROM city_channel_tv_show GROUP BY tv_show_ID HAVING COUNT(*) > 3)); 
SELECT City, Station_name FROM city_channel ORDER BY Station_name ASC; 
SELECT   radio.Transmitter,   city_channel.City FROM   city_channel_radio   JOIN city_channel ON city_channel_radio.City_channel_ID = city_channel.ID   JOIN radio ON city_channel_radio.Radio_ID = radio.Radio_ID WHERE   city_channel.Affiliation = 'Public' AND   radio.Radio_MHz = 'FM' AND   radio.ERP_kW > 1000 ORDER BY   radio.Transmitter ASC,   city_channel.City ASC; 
SELECT     r.Transmitter,     c.Station_name FROM     radio r     JOIN city_channel_radio cr ON r.Radio_ID = cr.Radio_ID     JOIN city_channel c ON cr.City_channel_ID = c.ID ORDER BY     r.ERP_kW DESC; 
SELECT r.Transmitter, COUNT(*) AS num_city_channels FROM city_channel c JOIN city_channel_radio cr ON c.ID = cr.City_channel_ID JOIN radio r ON cr.Radio_ID = r.Radio_ID GROUP BY r.Transmitter ORDER BY num_city_channels DESC; 
SELECT DISTINCT Transmitter FROM radio WHERE Radio_ID NOT IN (SELECT Radio_ID FROM city_channel_radio); 
SELECT Model FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle) AND Power > 6000; 
 SELECT Model FROM vehicle
SELECT "Name" FROM "driver" WHERE "Citizenship" = 'United States'; 
SELECT Name FROM driver WHERE Citizenship = 'United States'
SELECT COUNT(DISTINCT v.Vehicle_ID) AS "Vehicles_Driven", d.Driver_ID FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID GROUP BY d.Driver_ID ORDER BY COUNT(DISTINCT v.Vehicle_ID) DESC LIMIT 1; 
SELECT Driver_ID, COUNT(Vehicle_ID) FROM vehicle_driver GROUP BY Driver_ID ORDER BY COUNT(Vehicle_ID) DESC LIMIT 1; 
SELECT MAX(Power), AVG(Power) FROM vehicle WHERE Builder = 'Zhuzhou'; 
 SELECT MAX(Power), AVG(Power) FROM vehicle WHERE Builder = 'Zhuzhou';
SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(Vehicle_ID) = (SELECT MIN(COUNT(Vehicle_ID)) FROM vehicle_driver); 
SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(Vehicle_ID) = (SELECT MIN(COUNT(Vehicle_ID)) FROM vehicle_driver GROUP BY Vehicle_ID); 
SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = '1996'; 
SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = '1996'
SELECT Build_Year, Model, Builder FROM vehicle WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver WHERE Driver_ID IN (SELECT Driver_ID FROM driver WHERE Racing_Series = 'F1')) ORDER BY Build_Year DESC; 
SELECT v.Build_Year, v.Model, v.Builder FROM vehicle v WHERE v.Top_Speed > 200 AND v.Power > 300 ORDER BY v.Top_Speed DESC, v.Power DESC; 
SELECT COUNT(DISTINCT driver.Driver_ID) FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Build_Year = '2012'; 
SELECT COUNT(DISTINCT Driver_ID) FROM vehicle_driver WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE Build_Year = '2012');
 SELECT AVG(Top_Speed) FROM vehicle WHERE Builder IN ('Ferrari', 'Lamborghini', 'Bugatti');
SELECT COUNT(DISTINCT Driver_ID) FROM vehicle_driver WHERE Racing_Series = 'NASCAR'; 
SELECT AVG("Top_Speed") FROM "vehicle" WHERE "Model" = "Ferrari 250 GTO" AND "Build_Year" = "1962" AND "Builder" = "Ferrari" AND "Total_Production" = "36"
SELECT AVG("Top_Speed") FROM "vehicle"; 
SELECT DISTINCT Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM vehicle_driver WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE Power > 5000))
SELECT "Name" FROM "driver" WHERE "Driver_ID" IN (SELECT "Driver_ID" FROM "vehicle_driver" WHERE "Vehicle_ID" IN (SELECT "Vehicle_ID" FROM "vehicle" WHERE "Power" > 5000))
SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150; 
SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150; 
SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%'; 
SELECT Model, Build_Year FROM vehicle WHERE Model LIKE "%DJ%"; Problem: Return the name and citizenship of drivers who have driven a car with a top speed of at least 200 mph. Solution: SELECT Name, Citizenship FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE Top_Speed >= 200; Problem: Return the name and citizenship of drivers who have driven a car with a top speed of at least 200 mph and have driven a car with a power of at least 500 hp. Solution: SELECT Name, Citizenship FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE Top_Speed >= 200 AND Power >=
null
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver); 
SELECT vehicle_id, model FROM vehicle WHERE vehicle_id IN (SELECT vehicle_id FROM vehicle_driver WHERE driver_id IN (SELECT driver_id FROM driver WHERE citizenship = 'China') OR builder = 'Ziyang') GROUP BY vehicle_id HAVING COUNT(*) >= 2;
SELECT Vehicle_ID, Model FROM vehicle WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(Driver_ID) = 2) OR Builder = 'Ziyang'
SELECT vehicle_id, model FROM vehicle_driver WHERE driver_id IN (SELECT driver_id FROM driver WHERE name = 'Jeff Gordon') OR driver_id IN (SELECT driver_id FROM driver WHERE name = 'Jeff Gordon') GROUP BY vehicle_id, model HAVING COUNT(driver_id) > 2; 
SELECT Vehicle_ID, Model FROM vehicle WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(Driver_ID) > 2 OR Driver_ID = 1)
SELECT COUNT(*) FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle); 
 SELECT COUNT(*) FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle);
SELECT Name FROM driver ORDER BY Name ASC; 
SELECT Name FROM driver ORDER BY Name ASC; 
SELECT "Racing_Series", COUNT("Driver_ID") FROM "driver" GROUP BY "Racing_Series"; 
SELECT Racing_Series, COUNT(Driver_ID) AS "Number_of_Drivers" FROM driver GROUP BY Racing_Series; 
SELECT driver.Name, driver.Citizenship FROM driver, vehicle_driver, vehicle WHERE driver.Driver_ID = vehicle_driver.Driver_ID AND vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID AND vehicle.Model = 'DJ1'
SELECT "Name", "Citizenship" FROM "driver" WHERE "Driver_ID" IN (SELECT "Driver_ID" FROM "vehicle_driver" WHERE "Vehicle_ID" IN (SELECT "Vehicle_ID" FROM "vehicle" WHERE "Model" = 'DJ1'))
SELECT COUNT(DISTINCT Driver_ID) FROM vehicle_driver WHERE Vehicle_ID IS NULL; 
SELECT COUNT(DISTINCT Driver_ID) FROM vehicle_driver WHERE Vehicle_ID IS NULL; 
SELECT COUNT(DISTINCT Exam_ID) FROM Exams; 
SELECT COUNT(DISTINCT Exam_ID) FROM Exams 
SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC; 
SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC; 
SELECT Exam_Name, Exam_Date FROM Exams WHERE Subject_Code!= 'Database'; 
SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code!= 'Database'; 
SELECT DISTINCT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC; 
SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE "%data%" ORDER BY Exam_Date DESC; 
SELECT Type_of_Question_Code, COUNT(*) AS Count FROM Questions GROUP BY Type_of_Question_Code; 
SELECT Type_of_Question_Code, COUNT(Question_ID) FROM Questions GROUP BY Type_of_Question_Code ORDER BY COUNT(Question_ID) DESC 
SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal'; 
SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal'; 
SELECT DISTINCT Comments FROM Student_Answers; 
SELECT DISTINCT Comments FROM Student_Answers; 
SELECT Student_Answer_Text, COUNT(*) FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC; 
SELECT Student_Answer_Text, COUNT(*) AS Frequency FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY Frequency DESC; 
SELECT First_Name, Date_of_Answer FROM Student_Answers ORDER BY Student_ID ASC, Date_of_Answer ASC; 
SELECT Students.First_Name, Student_Answers.Date_of_Answer FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID WHERE Student_Answers.Student_Answer_ID = '1' ORDER BY Students.First_Name, Student_Answers.Date_of_Answer 
SELECT Students.Email_Adress, Student_Answers.Date_of_Answer FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Student_Answers.Date_of_Answer DESC; 
SELECT Students.Email_Adress, Student_Answers.Date_of_Answer FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Student_Answers.Date_of_Answer DESC; 
SELECT DISTINCT Assessment FROM Student_Assessments WHERE Student_Answer_ID IN (SELECT Student_Answer_ID FROM Student_Answers WHERE Student_ID IN (SELECT Student_ID FROM Students WHERE First_Name = 'John' AND Last_Name = 'Doe')) ORDER BY COUNT(*) ASC LIMIT 1; 
SELECT Assessment, COUNT(*) AS Frequency FROM Student_Assessments GROUP BY Assessment ORDER BY Frequency ASC LIMIT 1; 
SELECT First_Name FROM Students WHERE Student_ID IN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(*) >= 2); 
SELECT First_Name FROM Students WHERE Student_ID IN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(*) >= 2); 
SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Valid_Answer_Text FROM Student_Assessments WHERE Assessment = 'Valid' GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Last_Name FROM Students WHERE Gender_MFU!= 'M'; 
SELECT Last_Name FROM Students WHERE Gender_MFU!= 'M' ORDER BY Last_Name ASC; 
SELECT Gender_MFU, COUNT(Student_ID) AS Number_of_Students FROM Students GROUP BY Gender_MFU; 
SELECT Gender_MFU, COUNT(Student_ID) AS Number_of_Students FROM Students GROUP BY Gender_MFU; 
SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M'); 
SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M'); 
SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers); 
SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers); 
SELECT Student_Answer_Text FROM Student_Answers WHERE Comments IN ('Normal', 'Absent') 
SELECT Student_Answer_Text FROM Student_Answers WHERE Comments IN ('Normal', 'Absent') 
SELECT DISTINCT Type_of_Question_Code FROM Questions WHERE Question_ID IN ( SELECT Question_ID FROM Questions_in_Exams GROUP BY Question_ID HAVING COUNT(*) >= 3 ) 
SELECT Type_of_Question_Code FROM Questions WHERE Question_ID IN ( SELECT Question_ID FROM Questions_in_Exams GROUP BY Question_ID HAVING COUNT(*) >= 3 ) 
SELECT * FROM Students; 
SELECT Students.Student_ID, Students.First_Name, Students.Middle_Name, Students.Last_Name, Students.Gender_MFU, Students.Student_Address, Students.Email_Adress, Students.Cell_Mobile_Phone, Students.Home_Phone FROM Students 
SELECT COUNT(DISTINCT address_id) FROM Addresses; Explanation: We use the COUNT function to count the number of distinct address_ids in the Addresses table. The DISTINCT keyword ensures that we only count each address_id once, even if it appears multiple times in the table.
SELECT COUNT(DISTINCT Addresses.address_id) FROM Addresses; 
SELECT address_id, address_details FROM Addresses; 
 SELECT customer_id, customer_name FROM Customers WHERE customer_email IS NOT NULL AND EXISTS (SELECT * FROM Customer_Orders WHERE Customer_Orders.customer_id = Customers.customer_id AND Customer_Orders.order_date = '2022-01-01');
SELECT COUNT(*) FROM Products; 
SELECT COUNT(*) FROM Products; 
SELECT product_id, product_type_code, product_name FROM Products; 
 SELECT product_id, product_type_code, product_name FROM Products WHERE product_type_code!= "Food" AND product_price > 10 UNION SELECT product_id, product_type_code, product_name FROM Products WHERE product_type_code!= "Food" AND product_price > 20;
SELECT product_price FROM Products WHERE product_name = 'Monitor'; 
SELECT product_price FROM Products WHERE product_name = 'Monitor'; 
SELECT MIN(product_price), AVG(product_price), MAX(product_price) FROM Products; 
SELECT MIN(product_price), AVG(product_price), MAX(product_price) FROM Products; 
SELECT AVG(`Products`.`product_price`) FROM `Products` WHERE `Products`.`product_type_code` = 'Clothes'; 
SELECT AVG(p.product_price) FROM Products p WHERE p.product_type_code = 'Clothes'; 
SELECT COUNT(*) FROM Products WHERE product_type_code = 'hardware'
SELECT COUNT(*) FROM Products WHERE product_type_code = 'Hardware'; 
SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products); 
SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products); 
SELECT product_name FROM Products WHERE product_type_code = 'hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'hardware'); 
SELECT product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware'); 
SELECT product_name FROM Products WHERE product_type_code = 'Clothes' AND product_price = (SELECT MAX(product_price) FROM Products WHERE product_type_code = 'Clothes'); 
SELECT product_name FROM Products WHERE product_type_code = 'Clothes' AND product_price = (SELECT MAX(product_price) FROM Products WHERE product_type_code = 'Clothes'); 
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price = (SELECT MIN(product_price) FROM Products WHERE product_type_code = 'Hardware'); 
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price = (SELECT MIN(product_price) FROM Products WHERE product_type_code = 'Hardware'); 
SELECT product_name FROM Products ORDER BY product_price DESC; 
SELECT product_name FROM Products ORDER BY product_price DESC; 
SELECT product_name, product_price FROM Products WHERE product_type_code = 'hardware' ORDER BY product_price ASC; 
SELECT product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC; 
SELECT product_type_code, COUNT(*) FROM Products GROUP BY product_type_code; 
SELECT product_type_code, COUNT(*) FROM Products GROUP BY product_type_code; 
SELECT product_type_code, AVG(product_price) FROM Products GROUP BY product_type_code; 
SELECT product_type_code, AVG(product_price) FROM Products GROUP BY product_type_code; 
SELECT product_type_code FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items WHERE order_id IN (SELECT order_id FROM Customer_Orders WHERE customer_id IN (SELECT customer_id FROM Customers WHERE customer_address IN (SELECT address_details FROM Addresses WHERE address_id IN (SELECT address_id FROM Customers WHERE customer_number = 'C0001'))))); 
SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(*) >= 2; 
SELECT product_type_code, COUNT(*) AS num_products FROM Products GROUP BY product_type_code ORDER BY num_products DESC LIMIT 1; 
SELECT product_type_code, COUNT(*) FROM Products GROUP BY product_type_code ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT COUNT(*) FROM Customers; 
 SELECT COUNT(*) FROM Customers WHERE payment_method_code IN ('cash', 'credit card', 'check');
SELECT customer_id, customer_name FROM Customers; 
SELECT customer_id, customer_name FROM Customers; 
SELECT c.customer_address, c.customer_phone, c.customer_email FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE c.customer_name = 'Jeromy' AND p.product_name = 'Bread' AND oi.order_quantity = '1'; 
SELECT c.customer_address, c.customer_phone, c.customer_email FROM Customers c WHERE c.customer_name = 'Jeromy'; 
SELECT payment_method_code, COUNT(customer_id) FROM Customers GROUP BY payment_method_code; 
SELECT payment_method_code, COUNT(*) AS num_customers FROM Customers GROUP BY payment_method_code; 
SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1; 
 SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*)
SELECT customer_name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Customer_Orders GROUP BY customer_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Customer_Orders GROUP BY customer_id ORDER BY COUNT(*) ASC LIMIT 1)); 
SELECT customer_name FROM Customers WHERE payment_method_code IN (SELECT payment_method_code FROM Customers GROUP BY payment_method_code HAVING COUNT(*) = 1); 
SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy'; 
SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy'; 
SELECT DISTINCT payment_method_code FROM Customers; 
SELECT DISTINCT payment_method_code FROM Customers; 
SELECT product_id, product_type_code FROM Products ORDER BY product_name; 
SELECT product_id, product_type_code FROM Products ORDER BY product_name ASC; 
SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_type_code) = (SELECT MIN(COUNT(product_type_code)) FROM Products GROUP BY product_type_code); 
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*) ASC LIMIT 1; 
SELECT COUNT(*) FROM Customer_Orders; 
SELECT COUNT(*) FROM Customer_Orders; 
SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'Jeromy'); 
SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'Jeromy'); 
SELECT customer_name, customer_id, COUNT(order_id) FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id GROUP BY customer_name, customer_id; 
SELECT     c.customer_name,     c.customer_id,     COUNT(o.order_id) AS num_orders FROM     Customers c     JOIN Customer_Orders o ON c.customer_id = o.customer_id GROUP BY     c.customer_name,     c.customer_id ORDER BY     c.customer_name; 
SELECT customer_id, customer_name, customer_phone, customer_email FROM Customers WHERE customer_id IN (SELECT customer_id FROM Customer_Orders ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT     c.customer_id,     c.customer_name,     c.customer_phone,     c.customer_email FROM     Customers c     INNER JOIN Customer_Orders co ON c.customer_id = co.customer_id     INNER JOIN Order_Items oi ON co.order_id = oi.order_id GROUP BY     c.customer_id ORDER BY     COUNT(oi.order_item_id) DESC LIMIT     1; 
SELECT order_status_code, COUNT(order_id) FROM Customer_Orders GROUP BY order_status_code; 
SELECT order_status_code, COUNT(*) FROM Customer_Orders GROUP BY order_status_code; 
SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders); 
SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders); 
SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items); 
SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items); 
SELECT COUNT(*) FROM Order_Items WHERE product_id IN (SELECT product_id FROM Products WHERE product_name = 'Monitor') AND order_id IN (SELECT order_id FROM Customer_Orders WHERE order_status_code = 'Shipped')
SELECT COUNT(*) FROM Order_Items WHERE product_id IN (SELECT product_id FROM Products WHERE product_name = 'Monitor') AND order_id IN (SELECT order_id FROM Customer_Orders WHERE order_status_code = 'Shipped')
SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders JOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor' AND Customer_Orders.order_status_code = 'Shipped'; 
SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders JOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor'
SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders; 
SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders; 
SELECT customer_id FROM Customer_Orders WHERE order_id IS NULL; 
SELECT customer_id FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders); 
SELECT order_date, order_id FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items WHERE order_quantity > 6 OR order_quantity > 3)
SELECT `order_id`, `order_date` FROM `Order_Items` WHERE `order_quantity` > 6 OR `order_quantity` > 3; 
SELECT COUNT(*) FROM building; 
SELECT COUNT(*) FROM building; 
SELECT Name FROM building ORDER BY Number_of_Stories ASC; 
SELECT Name FROM building ORDER BY Number_of_Stories ASC; 
SELECT Address FROM building ORDER BY Completed_Year DESC; 
SELECT Address FROM building ORDER BY Completed_Year DESC; 
SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year!= 1980; 
SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year!= 1980; 
 SELECT AVG("Population") FROM "region" WHERE "Name" = "US" AND "Population" > 1000000 AND "Capital" IN (SELECT "Name" FROM "region" WHERE "Population" > 1000000);
 SELECT AVG(Population) FROM region WHERE Name = 'Your input here';
SELECT Name FROM region ORDER BY Name ASC; 
SELECT Name FROM region ORDER BY Name ASC; 
SELECT region.Capital FROM region WHERE region.Area > 10000; 
SELECT Capital FROM region WHERE Area > 10000; 
 SELECT Capital FROM region WHERE Region_ID = (SELECT Region_ID FROM region WHERE Population = (SELECT MAX(Population) FROM region));
SELECT Capital FROM region WHERE Population = (SELECT MAX(Population) FROM region); 
SELECT Name FROM region ORDER BY Area DESC LIMIT 5; 
SELECT Name FROM region ORDER BY Area DESC LIMIT 5; 
SELECT building.Name, region.Name FROM building, region WHERE building.Region_ID = region.Region_ID; 
SELECT b.Name, r.Name FROM building b JOIN region r ON b.Region_ID = r.Region_ID; 
SELECT r.Name FROM region r JOIN building b ON r.Region_ID = b.Region_ID WHERE b.Building_ID > 1; 
SELECT Name FROM region WHERE Region_ID IN (SELECT Region_ID FROM building GROUP BY Region_ID HAVING COUNT(*) > 1); 
SELECT Capital FROM region WHERE Region_ID IN (SELECT Region_ID FROM building GROUP BY Region_ID ORDER BY COUNT(*) DESC LIMIT 1); 
 SELECT region.Name, region.Capital FROM region JOIN building ON region.Region_ID = building.Region_ID WHERE building.Number_of_Stories
SELECT building.Address, region.Capital FROM building, region WHERE building.Region_ID = region.Region_ID 
SELECT b.Address, r.Name FROM building b JOIN region r ON b.Region_ID = r.Region_ID; 
SELECT Number_of_Stories FROM building WHERE Region_ID IN (SELECT Region_ID FROM region WHERE Name = "Abruzzo");
SELECT Number_of_Stories FROM building WHERE Region_ID IN (SELECT Region_ID FROM region WHERE Name = "Abruzzo"); 
SELECT Completed_Year, COUNT(*) FROM building GROUP BY Completed_Year ORDER BY Completed_Year ASC; 
SELECT Completed_Year, COUNT(*) FROM building GROUP BY Completed_Year ORDER BY Completed_Year ASC; 
SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Name FROM region WHERE Building_ID IS NULL; 
SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building); 
SELECT DISTINCT Completed_Year FROM building WHERE Number_of_Stories > 20 OR Number_of_Stories < 15; 
SELECT Completed_Year FROM building WHERE Number_of_Stories > 20 OR Number_of_Stories < 15; 
SELECT DISTINCT Address FROM building; 
null
SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC; 
SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC; 
SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC;
SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC; 
SELECT COUNT(Service_ID) FROM Services; 
SELECT COUNT(Service_ID) FROM Services; 
SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Analytical_Layer_Type_Code, COUNT(*) AS Count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY Count DESC LIMIT 1; 
SELECT * FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customers_and_Services_Details = 'Hardy Kutch'); 
SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customers_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = "Hardy Kutch")));
SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customers_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Analytical_Layer WHERE Analytical_Layer_Type_Code = 'Pattern_Recognition' AND Pattern_Recognition LIKE '%3%')); 
SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customers_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Analytical_Layer WHERE Analytical_ID IN (SELECT Analytical_ID FROM Integration_Platform WHERE Integration_Platform_ID IN (SELECT Integration_Platform_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Channels WHERE Channel_ID IN (SELECT Channel_ID FROM Customers_and_Services WHERE Customers_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID
SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services WHERE Customers_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Analytical_Layer WHERE Analytical_ID IN (SELECT Analytical_ID FROM Integration_Platform WHERE Integration_Platform_ID IN (SELECT Integration_Platform_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_
SELECT Customer_Details FROM Customers WHERE Customer_ID = (SELECT Customer_ID FROM Customers_and_Services WHERE Customers_and_Services_ID = (SELECT Customers_and_Services_ID FROM Analytical_Layer WHERE Analytical_ID = (SELECT Analytical_ID FROM Analytical_Layer WHERE Analytical_Layer_Type_Code = 'Largest'))); 
SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services WHERE Customers_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Analytical_Layer WHERE Analytical_ID IN (SELECT Analytical_ID FROM Integration_Platform WHERE Integration_Platform_ID IN (SELECT Integration_Platform_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Channels WHERE Channel_ID IN (SELECT Channel_ID FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customers_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Analytical_Layer WHERE Analytical_ID IN (SELECT Analytical_ID FROM Integration_Platform WHERE Integration_Platform_ID IN (SELECT Integration_Platform_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Channels WHERE Channel_ID IN (SELECT Channel_ID FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customers_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Analytical_Layer WHERE Analytical_ID IN (SELECT Analytical_ID FROM Integration_Platform WHERE Integration_Platform_ID IN (SELECT Integration_Platform_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Channels WHERE Channel_ID IN (SELECT Channel_ID FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customers_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Analytical_Layer WHERE Analytical_ID IN (SELECT Analytical_ID FROM Integration_Platform WHERE Integration_Platform_ID IN (SELECT Integration_Platform_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Channels WHERE Channel_ID IN (SELECT Channel_ID FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customers_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Analytical_Layer WHERE Analytical_ID IN (SELECT Analytical_ID FROM Integration_Platform WHERE Integration_Platform_ID IN (SELECT Integration_Platform_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Channels WHERE Channel_ID IN
SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services WHERE Customers_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Analytical_Layer WHERE Analytical_ID IN (SELECT Analytical_ID FROM Analytical_Layer WHERE Analytical_Layer_Type_Code = 'Customer' AND Pattern_Recognition = 'Most types of services'))); 
SELECT Customer_Details FROM Customers WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services); 
SELECT Customer_Details FROM Customers WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services)
SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services WHERE Service_ID IN (SELECT Service_ID FROM Services WHERE Service_ID NOT IN (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID HAVING COUNT(*) = 1)))
SELECT DISTINCT Customer_Details FROM Customers_and_Services WHERE Service_ID IN (SELECT Service_ID FROM Services WHERE Service_Details NOT IN (SELECT Service_Details FROM Services GROUP BY Service_Details HAVING COUNT(*) > 1)) ORDER BY Customer_Details ASC; 
SELECT DISTINCT Customers_and_Services_Details FROM Customers_and_Services; 
SELECT COUNT(*) FROM Customers, Services WHERE Customers.Customer_ID = Services.Service_ID; Explanation: The above query counts the total number of available customers and services details by joining the two tables on the common column Customer_ID. The result will be a single row containing the count of all rows in both tables where the Customer_ID matches.
SELECT * FROM Customers WHERE Customer_Details LIKE "%Kutch%"; Explanation: The above query selects all the customers whose name contains "Kutch". The LIKE operator is used to search for a pattern in a string. The % symbol represents any number of characters, so the query looks for all customers whose name contains "Kutch" anywhere in the string.
SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE "%Kutch%"; Problem: What are the details of the customers who have "Kutch" in part of their details and have a service with "Kutch" in part of its details? Solution: SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE "%Kutch%" AND EXISTS (SELECT * FROM Customers_and_Services WHERE Customers_and_Services.Customer_ID = Customers.Customer_ID AND Customers_and_Services.Service_ID IN (SELECT Service_ID FROM Services WHERE Service_Details LIKE "%Kutch%")); Problem: What are the details of the customers who have "Kutch" in part of their details and have a service with "Kutch" in part of its details and have a channel with "Kutch" in part of its details? Solution: SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE "%Kutch%" AND EXISTS (SELECT * FROM Customers_and_Services WHERE Customers_and_Services.Customer_ID = Customers.Customer_ID AND Customers_and_Services.Service_ID IN (SELECT Service_ID FROM Services WHERE Service_Details LIKE "%Kutch%") AND EXISTS (SELECT * FROM Customer_Interactions WHERE Customer_Interactions.Customer_ID = Customers.Customer_ID AND Customer_Interactions.Service_ID = Customers_and_Services.Service_ID AND Customer_Interactions.Channel_ID IN (SELECT Channel_ID FROM Channels WHERE Channel_Details LIKE "%Kutch%"))); Problem: What are the details of the customers who have "Kutch" in part of their details and have a service with "Kutch" in part of its details and have a channel with "Kutch" in part of its details and have an integration platform with "Kutch" in part of its details? Solution: SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE "%Kutch%" AND EXISTS (SELECT * FROM Customers_and_Services WHERE Customers_and_Services.Customer_ID = Customers.Customer_ID AND Customers_and_Services.Service_ID IN (SELECT Service_ID FROM Services WHERE Service_Details LIKE "%Kutch%") AND EXISTS (SELECT * FROM Customer_Interactions WHERE Customer_Interactions.Customer_ID = Customers.Customer_ID AND Customer_Interactions.Service_ID = Customers_and_Services.Service_ID
SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = "Hardy Kutch")) OR Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = "good"))
SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch') OR Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'good')) Explanation: The query first selects the service details from the Services table where the service ID is in the list of service IDs from the Customers_and_Services table where the customer ID is in the list of customer IDs from the Customers table where the customer details are "Hardy Kutch". Alternatively, the query selects the service details from the Services table where the service ID is in the list of service IDs from the Customer_Interactions table where the status code is "good".
SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = "Hardy Kutch") AND Status_Code = "bad"))
SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = "Hardy Kutch") AND Status_Code = "bad") AND Customers_and_Services_Details = "Used") AND Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = "Hardy Kutch") AND Status_Code = "bad") AND Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = "Hardy Kutch") AND Status_Code = "bad") AND Customers_and_Services_Details = "Used") AND Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = "Hardy Kutch") AND Status_Code = "bad") AND Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = "Hardy Kutch") AND Status_Code = "bad") AND Customers_and_Services_Details = "Used") AND Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = "Hardy Kutch") AND Status_Code = "bad") AND Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = "Hardy Kutch") AND Status_Code = "bad") AND Customers_and_Services_Details = "Used") AND Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = "Hardy Kutch") AND Status_Code = "bad") AND Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Customer_ID IN
SELECT * FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Channel_ID = 15 AND Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Integration_Platform WHERE Integration_Platform_Details = 'ij')); Explanation: The query first finds the service IDs that have interacted with the channel details using the Customer_Interactions table. Then, it selects the service details from the Services table using the service IDs found in the previous step.
SELECT * FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Channel_ID IN (SELECT Channel_ID FROM Channels WHERE Channel_Details = '15 ij')); 
SELECT * FROM Customer_Interactions WHERE Status_Code = 'Stuck' AND Services_and_Channels_Details = 'bad'
SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Status_Code = "Stuck" AND Services_and_Channels_Details = "bad"); 
SELECT COUNT(*) FROM Integration_Platform WHERE Integration_Platform_Details = 'Successful'
SELECT COUNT(*) FROM Integration_Platform WHERE Integration_Platform_Details LIKE "%Success%"; 
SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Integration_Platform WHERE Integration_Platform_ID IN (SELECT Integration_Platform_ID FROM Integration_Platform WHERE Integration_Platform_Details = 'Failed')))
SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Integration_Platform WHERE Integration_Platform_Details = "Fail"))
SELECT Service_Details FROM Services WHERE Service_ID NOT IN (SELECT Service_ID FROM Customers_and_Services)
SELECT Service_Details FROM Services WHERE Service_ID NOT IN (SELECT Service_ID FROM Customers_and_Services); 
SELECT Analytical_Layer_Type_Code, COUNT(*) AS Usage_Count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY Usage_Count DESC; 
SELECT Analytical_Layer_Type_Code, COUNT(*) FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC; 
SELECT * FROM Services WHERE Customers_and_Services_Details LIKE '%unsatisfied%'; 
SELECT Service_Details FROM Services WHERE Customers_and_Services_Details = 'unsatisfied' AND Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customers_and_Services_Details = 'unsatisfied'); 
SELECT COUNT(*) FROM Vehicles; 
 SELECT COUNT(*) FROM Customers;
SELECT name FROM Vehicles ORDER BY Model_year DESC; 
SELECT Vehicles.name FROM Vehicles ORDER BY Vehicles.Model_year DESC; 
SELECT DISTINCT Type_of_powertrain FROM Vehicles; 
SELECT DISTINCT Type_of_powertrain FROM Vehicles; 
SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year = 2013 OR Model_year = 2014; 
SELECT Vehicles.name, Vehicles.Type_of_powertrain, Vehicles.Annual_fuel_cost FROM Vehicles WHERE Vehicles.Model_year IN (2013, 2014); 
SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014 OR Model_year = 2013; 
SELECT Type_of_powertrain FROM Vehicles WHERE Model_year IN (2013, 2014) GROUP BY Type_of_powertrain HAVING COUNT(*) > 1; 
SELECT Type_of_powertrain, COUNT(*) FROM Vehicles GROUP BY Type_of_powertrain; 
SELECT "Type_of_powertrain", COUNT("Type_of_powertrain") FROM "Vehicles" GROUP BY "Type_of_powertrain"; 
SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(Type_of_powertrain) DESC LIMIT 1; 
null
SELECT MIN(Annual_fuel_cost), MAX(Annual_fuel_cost), AVG(Annual_fuel_cost) FROM Vehicles; 
SELECT MIN(Annual_fuel_cost), MAX(Annual_fuel_cost), AVG(Annual_fuel_cost) FROM Vehicles; 
SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate; 
SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate; 
SELECT Type_of_powertrain, AVG(Annual_fuel_cost) FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(*) >= 2; 
SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS avg_annual_fuel_cost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(*) >= 2 ORDER BY avg_annual_fuel_cost DESC; 
SELECT name, age, membership_credit FROM Customers; Problem: Show the name, age, membership credit for all customers who are older than 25 years old? Solution: SELECT name, age, membership_credit FROM Customers WHERE age > 25; Problem: Show the name, age, membership credit for all customers who are older than 25 years old and have a membership credit of at least 100? Solution: SELECT name, age, membership_credit FROM Customers WHERE age > 25 AND membership_credit >= 100; Problem: Show the name, age, membership credit for all customers who are older than 25 years old and have a membership credit of at least 100, but only show the customers who have a membership credit of exactly 100? Solution: SELECT name, age, membership_credit FROM Customers WHERE age > 25 AND membership_credit = 100; Problem: Show the name, age, membership credit
 SELECT name, age, membership_credit FROM Customers WHERE age < 30 AND membership_credit >= 100 AND membership_credit <= 200;
SELECT name, age FROM Customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM Customers); 
SELECT name, age FROM Customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM Customers); 
SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers); 
SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers); 
SELECT * FROM Discount; 
 SELECT * FROM Customers WHERE age > 25 AND membership_credit >= 1000 ORDER BY membership_credit DESC; 
SELECT Vehicles.name, Renting_history.total_hours FROM Vehicles, Renting_history WHERE Vehicles.id = Renting_history.vehicles_id; 
SELECT Vehicles.name, SUM(Renting_history.total_hours) FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Vehicles.name; Explanation: The query first selects the name of the vehicle and then sums up the total rental hours for each vehicle using the Renting_history table. The GROUP BY clause ensures that the results are grouped by vehicle name, and the SUM function is used to calculate the total rental hours for each vehicle.
SELECT Vehicles.name FROM Vehicles LEFT JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id WHERE Renting_history.id IS NULL; 
SELECT Vehicles.name FROM Vehicles WHERE Vehicles.id NOT IN (SELECT Renting_history.vehicles_id FROM Renting_history); 
SELECT name FROM Customers WHERE id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(*) >= 2); 
SELECT name FROM Customers WHERE id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(*) >= 2); 
SELECT Vehicles.name, Vehicles.Model_year FROM Renting_history, Vehicles WHERE Renting_history.vehicles_id = Vehicles.id GROUP BY Vehicles.name, Vehicles.Model_year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Vehicles.name, Vehicles.Model_year FROM Renting_history, Vehicles WHERE Renting_history.vehicles_id = Vehicles.id AND Renting_history.total_hours = (SELECT MAX(Renting_history.total_hours) FROM Renting_history); 
SELECT Vehicles.name FROM Renting_history, Vehicles, Customers, Discount WHERE Renting_history.customer_id = Customers.id AND Renting_history.vehicles_id = Vehicles.id AND Renting_history.discount_id = Discount.id ORDER BY total_hours DESC; 
SELECT Vehicles.name FROM Renting_history, Vehicles WHERE Renting_history.vehicles_id = Vehicles.id ORDER BY Renting_history.total_hours DESC;
SELECT Discount.name FROM Renting_history, Discount WHERE Renting_history.discount_id = Discount.id GROUP BY Discount.name ORDER BY COUNT(*) DESC LIMIT 1; Explanation: The query first selects the discount name from the Renting_history table, where the discount_id column matches the id column of the Discount table. Then, it groups the results by the discount name and orders them by the count of the number of renting history records. Finally, it selects the first result, which is the discount name with the most number of renting history records. Note: The query assumes that the Renting_history table has a discount_id column that matches the id column of the Discount table. If this is not the case, the query may need to be modified accordingly.
SELECT name FROM Discount WHERE id IN (SELECT discount_id FROM Renting_history GROUP BY discount_id ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT Vehicles.name, Vehicles.Type_of_powertrain FROM Renting_history, Vehicles WHERE Renting_history.vehicles_id = Vehicles.id AND Renting_history.total_hours > 30; 
SELECT Vehicles.name, Vehicles.Type_of_powertrain FROM Renting_history, Vehicles WHERE Renting_history.vehicles_id = Vehicles.id AND Renting_history.total_hours > 30; 
SELECT AVG(City_fuel_economy_rate) AS avg_city_fuel_rate, AVG(Combined_fuel_economy_rate) AS avg_combined_fuel_rate, AVG(Highway_fuel_economy_rate) AS avg_highway_fuel_rate, Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY avg_combined_fuel_rate DESC; 
SELECT AVG(City_fuel_economy_rate), AVG(Highway_fuel_economy_rate) FROM Vehicles GROUP BY Type_of_powertrain; 
SELECT AVG(amount_of_loan) FROM Student_Loans; 
SELECT AVG(amount_of_loan) FROM Student_Loans; 
SELECT Students.bio_data, Students.student_id FROM Students INNER JOIN Classes ON Students.student_id = Classes.student_id WHERE Classes.class_id IN (SELECT Classes.class_id FROM Classes GROUP BY Classes.class_id HAVING COUNT(Classes.class_id) > 1) UNION SELECT Students.bio_data, Students.student_id FROM Students INNER JOIN Detention ON Students.student_id = Detention.student_id WHERE Detention.detention_id IN (SELECT Detention.detention_id FROM Detention GROUP BY Detention.detention_id HAVING COUNT(Detention.detention_id) < 2)
SELECT Students.bio_data, Students.student_id FROM Students INNER JOIN Classes ON Students.student_id = Classes.student_id WHERE Classes.class_id IN (SELECT Classes.class_id FROM Classes GROUP BY Classes.class_id HAVING COUNT(Classes.class_id) >= 2) UNION SELECT Students.bio_data, Students.student_id FROM Students INNER JOIN Detention ON Students.student_id = Detention.student_id WHERE Detention.detention_id IN (SELECT Detention.detention_id FROM Detention GROUP BY Detention.detention_id HAVING COUNT(Detention.detention_id) < 2)
SELECT teacher_details FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE class_details LIKE '%data%' AND class_details NOT LIKE 'net%')
SELECT teacher_details FROM Teachers WHERE class_id IN (SELECT class_id FROM Classes WHERE class_details LIKE '%data%' AND class_details NOT LIKE 'net%')
SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention UNION SELECT student_id FROM Student_Loans); 
SELECT student_id, bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention UNION SELECT student_id FROM Student_Loans); 
SELECT student_loan_id, date_of_loan, amount_of_loan FROM Student_Loans WHERE student_id IN (SELECT student_id FROM Achievements WHERE achievement_type_code = 'A' GROUP BY student_id HAVING COUNT(*) >= 2); 
SELECT amount_of_loan, date_of_loan FROM Student_Loans WHERE student_id IN (SELECT student_id FROM Achievements WHERE achievement_type_code = 'A' GROUP BY student_id HAVING COUNT(*) >= 2); 
SELECT teacher_details, teacher_id FROM Teachers INNER JOIN Classes ON Teachers.teacher_id = Classes.teacher_id GROUP BY teacher_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT teacher_details, teacher_id FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes GROUP BY teacher_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Classes GROUP BY teacher_id ORDER BY COUNT(*) DESC LIMIT 1)); 
SELECT DISTINCT detention_summary FROM Detention; 
SELECT DISTINCT detention_summary FROM Detention; 
SELECT Students.student_id, Students.bio_data, Students.student_details, Addresses.address_details, Ref_Address_Types.address_type_description FROM Students INNER JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id INNER JOIN Addresses ON Students_Addresses.address_id = Addresses.address_id INNER JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code; 
SELECT Students.bio_data, Students.student_details, Addresses.address_details, Ref_Address_Types.address_type_description FROM Students INNER JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id INNER JOIN Addresses ON Students_Addresses.address_id = Addresses.address_id INNER JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code; 
SELECT Students.bio_data, Students.student_details, Addresses.address_details FROM Students INNER JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id INNER JOIN Addresses ON Students_Addresses.address_id = Addresses.address_id WHERE Students_Addresses.address_type_code = 'home' AND Students_Addresses.date_from <= '2022-01-01' AND Students_Addresses.date_to >= '2022-01-01' ORDER BY Students.student_id ASC; 
SELECT Students.bio_data, StudentsAddresses.address_details FROM Students INNER JOIN StudentsAddresses ON Students.student_id = StudentsAddresses.student_id WHERE StudentsAddresses.address_type_code = 'home' ORDER BY Students.student_id ASC; 
SELECT Students.bio_data, Transcripts.date_of_transcript FROM Students INNER JOIN Transcripts ON Students.student_id = Transcripts.student_id; 
SELECT Students.bio_data, Transcripts.date_of_transcript FROM Students INNER JOIN Transcripts ON Students.student_id = Transcripts.student_id; 
SELECT COUNT(*) AS result_count, behaviour_monitoring_details AS result_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY result_count DESC LIMIT 1;
SELECT   COUNT(*) AS count,   behaviour_monitoring_details AS details FROM   Behaviour_Monitoring GROUP BY   behaviour_monitoring_details ORDER BY   count DESC LIMIT   1; 
SELECT Students.bio_data, Students.student_details FROM Students WHERE Students.student_id IN (SELECT Student_Events.student_id FROM Student_Events WHERE Student_Events.event_type_code = 'M' AND Student_Events.student_id IN (SELECT Behaviour_Monitoring.student_id FROM Behaviour_Monitoring WHERE Behaviour_Monitoring.behaviour_monitoring_details = 'Most common result' AND Behaviour_Monitoring.student_id IN (SELECT Behaviour_Monitoring.student_id FROM Behaviour_Monitoring WHERE Behaviour_Monitoring.behaviour_monitoring_details = '3 students in behaviour monitoring'))) 
SELECT Students.bio_data, Students.student_details FROM Students INNER JOIN Behaviour_Monitoring ON Students.student_id = Behaviour_Monitoring.student_id WHERE Behaviour_Monitoring.behaviour_monitoring_details = 'Most common result' AND Behaviour_Monitoring.behaviour_monitoring_details = 'Result obtained by 3 students in behaviour monitoring'; 
SELECT student_id, bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Behaviour_Monitoring GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1)); 
SELECT Students.bio_data FROM Students INNER JOIN Behaviour_Monitoring ON Students.student_id = Behaviour_Monitoring.student_id WHERE Behaviour_Monitoring.behaviour_monitoring_details = (SELECT Behaviour_Monitoring.behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY Behaviour_Monitoring.behaviour_monitoring_details HAVING COUNT(Behaviour_Monitoring.behaviour_monitoring_details) = (SELECT COUNT(Behaviour_Monitoring.behaviour_monitoring_details) FROM Behaviour_Monitoring GROUP BY Behaviour_Monitoring.behaviour_monitoring_details ORDER BY COUNT(Behaviour_Monitoring.behaviour_monitoring_details) DESC LIMIT 1)) ORDER BY Students.bio_data ASC; 
SELECT Students.bio_data, Student_Events.event_date FROM Students INNER JOIN Student_Events ON Students.student_id = Student_Events.student_id; 
SELECT Students.bio_data, Student_Events.event_date FROM Students INNER JOIN Student_Events ON Students.student_id = Student_Events.student_id WHERE Student_Events.event_type_code = 'EVENT_TYPE_CODE'
SELECT COUNT(student_id), event_type_code, event_type_description FROM Student_Events GROUP BY event_type_code ORDER BY COUNT(student_id) DESC LIMIT 1; 
SELECT COUNT(student_id), event_type_code, event_type_description FROM Student_Events GROUP BY event_type_code ORDER BY COUNT(student_id) DESC LIMIT 1; 
SELECT achievement_details, achievement_type_description FROM Achievements INNER JOIN Ref_Achievement_Type ON Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code; 
SELECT achievement_details, achievement_type_description FROM Achievements INNER JOIN Ref_Achievement_Type ON Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code WHERE achievement_type_code = 'A1' OR achievement_type_code = 'A2' OR achievement_type_code = 'A3' OR achievement_type_code = 'A4' OR achievement_type_code = 'A5' OR achievement_type_code = 'A6' OR achievement_type_code = 'A7' OR achievement_type_code = 'A8' OR achievement_type_code = 'A9' OR achievement_type_code = 'A10' OR achievement_type_code = 'A11' OR achievement_type_code = 'A12' OR achievement_type_code = 'A13' OR achievement_type_code = 'A14' OR achievement_type_code = 'A15' OR achievement_type_code = 'A16' OR achievement_type_code = 'A17' OR achievement_type_code = 'A18' OR achievement_type_code = 'A19' OR achievement_type_code = 'A20' OR achievement_type_code = 'A21' OR achievement_type_code = 'A22' OR achievement_type_code = 'A23' OR achievement_type_code = 'A24' OR achievement_type_code = 'A25' OR achievement_type_code = 'A26' OR achievement_type_code = 'A27' OR achievement_type_code = 'A28' OR achievement_type_code = 'A29' OR achievement_type_code = 'A30' OR achievement_type_code = 'A31' OR achievement_type_code = 'A32' OR achievement_type_code = 'A33' OR achievement_type_code = 'A34' OR achievement_type_code = 'A35' OR achievement_type_code = 'A36' OR achievement_type_code = 'A37' OR achievement_type_code = 'A38' OR achievement_type_code = 'A39' OR achievement_type_code = 'A40' OR achievement_type_code = 'A41' OR achievement_type_code = 'A42' OR achievement_type_code = 'A43' OR achievement_type_code = 'A44' OR achievement_type_code = 'A45' OR achievement_type_code = 'A46' OR achievement_type_code = 'A47' OR achievement_type_code = 'A48' OR achievement_type_code = 'A49' OR achievement_type_code = 'A50' OR achievement_type_code = 'A51' OR achievement_type_code = 'A52' OR achievement_type_code = 'A53' OR achievement_type_code = 'A54' OR achievement_type_code = 'A55' OR achievement_type_code = 'A56' OR achievement_type_code = 'A57' OR achievement_type_code = 'A58' OR achievement_type_code = 'A59' OR achievement_type_code = 'A60' OR achievement_type_code = 'A61' OR achievement_type_code = 'A62' OR achievement_type_code = 'A63' OR achievement_type_code = 'A64' OR achievement_type_code = 'A65' OR achievement_type_code = 'A66' OR achievement_type_code = 'A67' OR achievement_type_code = 'A68' OR achievement_type_code = 'A69' OR achievement_type_code = 'A70' OR achievement_type_code = 'A71' OR achievement_type_code = 'A72' OR achievement
SELECT COUNT(DISTINCT teacher_id) FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Students WHERE student_id NOT IN (SELECT student_id FROM Achievements)))
SELECT COUNT(DISTINCT teacher_id) FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Students WHERE student_id NOT IN (SELECT student_id FROM Achievements)))
SELECT date_of_transcript, transcript_details FROM Transcripts; 
SELECT date_of_transcript, transcript_details FROM Transcripts; 
SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements ORDER BY date_achievement DESC; 
SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements; 
SELECT datetime_detention_start, datetime_detention_end FROM Detention; 
SELECT datetime_detention_start, datetime_detention_end FROM Detention; 
SELECT student_id, bio_data, student_details FROM Students WHERE student_details LIKE '%Suite%'; 
SELECT * FROM Students WHERE bio_data LIKE '%Suite%'; 
SELECT Teachers.teacher_details, Students.bio_data FROM Teachers INNER JOIN Classes ON Teachers.teacher_id = Classes.teacher_id INNER JOIN Students ON Classes.student_id = Students.student_id; 
SELECT Teachers.teacher_details, Students.bio_data FROM Teachers INNER JOIN Classes ON Teachers.teacher_id = Classes.teacher_id INNER JOIN Students ON Classes.student_id = Students.student_id 
SELECT teacher_id, COUNT(*) AS num_courses FROM Classes GROUP BY teacher_id ORDER BY num_courses DESC LIMIT 1; 
SELECT teacher_id, COUNT(*) AS num_courses FROM Classes GROUP BY teacher_id ORDER BY num_courses DESC LIMIT 1; 
SELECT student_id, COUNT(*) AS num_courses FROM Classes GROUP BY student_id ORDER BY num_courses DESC LIMIT 1; 
SELECT student_id, COUNT(*) AS num_courses FROM Classes GROUP BY student_id ORDER BY num_courses DESC LIMIT 1; 
SELECT student_id, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) = 2); 
SELECT student_id, class_details FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM Classes WHERE student_id IN (SELECT student_id FROM Classes WHERE class_id IN (SELECT class_id FROM
SELECT detention_type_code, detention_type_description FROM Ref_Detention_Type ORDER BY COUNT(*) ASC LIMIT 1; 
SELECT event_type_code, event_type_description FROM Ref_Detention_Type WHERE detention_type_code IN (SELECT detention_type_code FROM Detention GROUP BY detention_type_code HAVING COUNT(*) = (SELECT COUNT(*) FROM Detention GROUP BY detention_type_code ORDER BY COUNT(*) ASC LIMIT 1)) ORDER BY event_type_code ASC; 
SELECT Students.bio_data, Students.student_details FROM Students INNER JOIN Student_Loans ON Students.student_id = Student_Loans.student_id WHERE Student_Loans.amount_of_loan > (SELECT AVG(Student_Loans.amount_of_loan) FROM Student_Loans); 
SELECT Students.bio_data, Students.student_details FROM Students JOIN Student_Loans ON Students.student_id = Student_Loans.student_id WHERE Student_Loans.amount_of_loan > ( SELECT AVG(Student_Loans.amount_of_loan) FROM Student_Loans ) 
SELECT MIN(date_of_loan) FROM Student_Loans; 
SELECT MIN(date_of_loan) FROM Student_Loans; 
SELECT student_id, bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans WHERE amount_of_loan = (SELECT MIN(amount_of_loan) FROM Student_Loans)); 
SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan ASC LIMIT 1); 
SELECT t.date_of_transcript FROM Transcripts t JOIN Student_Loans sl ON t.student_id = sl.student_id WHERE sl.amount_of_loan = (SELECT MAX(sl.amount_of_loan) FROM Student_Loans sl); 
SELECT date_of_transcript FROM Transcripts WHERE student_id = (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan DESC LIMIT 1); 
SELECT teacher_details FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE class_id IN (SELECT class_id FROM Students_Addresses WHERE student_address_id IN (SELECT student_address_id FROM Students_Addresses WHERE student_id IN (SELECT student_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcripts WHERE date_of_transcript IN (SELECT MIN(date_of_transcript) FROM Transcripts)))))) 
SELECT teacher_details FROM Teachers INNER JOIN Classes ON Teachers.teacher_id = Classes.teacher_id INNER JOIN Students ON Classes.student_id = Students.student_id INNER JOIN Transcripts ON Students.student_id = Transcripts.student_id WHERE Transcripts.date_of_transcript = (SELECT MIN(Transcripts.date_of_transcript) FROM Transcripts); 
SELECT student_id, SUM(amount_of_loan) FROM Student_Loans GROUP BY student_id; 
SELECT student_id, SUM(amount_of_loan) FROM Student_Loans GROUP BY student_id; 
SELECT Students.student_id, Students.bio_data, COUNT(Classes.class_id) AS course_count FROM Students LEFT JOIN Classes ON Students.student_id = Classes.student_id GROUP BY Students.student_id, Students.bio_data ORDER BY Students.student_id ASC; 
SELECT     s.student_id,     s.bio_data,     COUNT(c.class_id) AS num_courses FROM     Students s     LEFT JOIN Classes c ON s.student_id = c.student_id GROUP BY     s.student_id,     s.bio_data ORDER BY     s.student_id 
SELECT COUNT(*) FROM Students INNER JOIN Detention ON Students.student_id = Detention.student_id WHERE Detention.datetime_detention_start IS NOT NULL AND Detention.datetime_detention_end IS NOT NULL; 
SELECT COUNT(*) FROM Students INNER JOIN Detention ON Students.student_id = Detention.student_id WHERE Detention.datetime_detention_start IS NOT NULL AND Detention.datetime_detention_end IS NOT NULL; 
SELECT     event_type_code,     event_type_description FROM     Student_Events WHERE     student_id = 1 GROUP BY     event_type_code ORDER BY     COUNT(*) DESC LIMIT     1 
SELECT     address_type_code,     address_type_description FROM     Students_Addresses GROUP BY     address_type_code ORDER BY     COUNT(*) DESC LIMIT     1; 
SELECT Students.bio_data FROM Students WHERE Students.student_id NOT IN (SELECT Student_Loans.student_id FROM Student_Loans WHERE Student_Loans.student_id IN (SELECT Student_Events.student_id FROM Student_Events WHERE Student_Events.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (SELECT Students.student_id FROM Students WHERE Students.student_id IN (
SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Events WHERE event_id NOT IN (SELECT student_id FROM Student_Loans))
SELECT     student_id,     MIN(date_from) AS start_time,     MAX(date_to) AS end_time FROM     Students_Addresses WHERE     student_id IN (         SELECT             student_id         FROM             Transcripts         GROUP BY             student_id         HAVING             COUNT(*) = 2     ) GROUP BY     student_id; 
SELECT     datetime_detention_start,     datetime_detention_end FROM     Students     INNER JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id     INNER JOIN Addresses ON Students_Addresses.address_id = Addresses.address_id     INNER JOIN Transcripts ON Students.student_id = Transcripts.student_id WHERE     Students_Addresses.address_type_code = 'home'     AND Transcripts.transcript_details = '2' ORDER BY     datetime_detention_start ASC; 
SELECT datetime_detention_start FROM Detention ORDER BY datetime_detention_start ASC; 
SELECT datetime_detention_start FROM Detention; 
SELECT Name FROM Author; 
SELECT Name FROM Author 
SELECT Name, Address FROM Client; 
SELECT Name, Address FROM Client; Problem: What are the names and addresses of all clients who have made an order? Solution: SELECT Name, Address FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders); Problem: What are the names and addresses of all clients who have made an order and have a credit card number ending in 1234? Solution: SELECT Name, Address FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE NumCC LIKE '%1234')); Problem: What are the names and addresses of all clients who have made an order and have a credit card number ending in 1234, and what are the dates of their orders? Solution: SELECT Name, Address, DateOrder, DateExped FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE NumCC LIKE '%1234')); Problem: What are the names and addresses of all clients who have made an order and have a credit card number ending in 1234, and what are the dates of their orders, and what are the titles of the books they have ordered? Solution: SELECT Name, Address, DateOrder, Date
SELECT Title, ISBN, SalePrice FROM Book ORDER BY SalePrice DESC; 
SELECT Title, ISBN, SalePrice FROM Book; 
SELECT COUNT(*) FROM Book; Problem: How many books do we have that are not on sale? Solution: SELECT COUNT(*) FROM Book WHERE SalePrice = 0; Problem: How many books do we have that are not on sale and have a purchase price of more than 10€? Solution: SELECT COUNT(*) FROM Book WHERE SalePrice = 0 AND PurchasePrice > 10; Problem: How many books do we have that are not on sale and have a purchase price of more than 10€ and were written by an author whose name starts with the letter "A"? Solution: SELECT COUNT(*) FROM Book WHERE SalePrice = 0 AND PurchasePrice > 10 AND Title LIKE 'A%'; Problem: How many books do we have that are not on sale and have a purchase price of more than 10€ and were written by an author whose name starts with the letter "A" and have a title that starts with the letter "B"? Solution: SELECT COUNT(*) FROM Book WHERE SalePrice = 0 AND PurchasePrice > 10 AND Title LIKE 'A%' AND Title LIKE 'B%'; Problem: How many books do we have that are not on
SELECT COUNT(*) FROM Book; 
SELECT COUNT(DISTINCT Author) FROM Author_Book; 
SELECT COUNT(DISTINCT Author) FROM Author_Book; 
SELECT COUNT(*) FROM Client; Problem: How many clients are there who have a credit card number with an even number of digits? Solution: SELECT COUNT(*) FROM Client WHERE LENGTH(NumCC) % 2 = 0; Problem: How many clients are there who have a credit card number with an odd number of digits? Solution: SELECT COUNT(*) FROM Client WHERE LENGTH(NumCC) % 2 = 1; Problem: How many clients are there who have a credit card number with an even number of digits and a name that starts with a vowel? Solution: SELECT COUNT(*) FROM Client WHERE LENGTH(NumCC) % 2 = 0 AND Name LIKE 'A%'; Problem: How many clients are there who have a credit card number with an odd number of digits and a name that starts with a consonant? Solution: SELECT COUNT(*) FROM Client WHERE LENGTH(NumCC) % 2 = 1 AND Name LIKE 'B%'; Problem: How many clients are there who have a credit card number with an even number of digits and a name that starts with a consonant? Solution: SELECT COUNT(*) FROM Client WHERE LENGTH(NumCC) % 2 = 
SELECT COUNT(IdClient) FROM Client; 
SELECT Name, Address FROM Client ORDER BY Name ASC; 
SELECT Name, Address FROM Client ORDER BY Name ASC; Problem: What are the names and addresses of all clients who have made an order, ordered alphabetically by name? Solution: SELECT Name, Address FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders) ORDER BY Name ASC; Problem: What are the names and addresses of all clients who have made an order, ordered alphabetically by name, and who have a credit card number ending in 1234? Solution: SELECT Name, Address FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders) AND NumCC LIKE '%1234' ORDER BY Name ASC; Problem: What are the names and addresses of all clients who have made an order, ordered alphabetically by name, and who have a credit card number ending in 1234, and who have made an order with a date of order after 2020-01-01? Solution: SELECT Name, Address FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders WHERE DateOrder > '2020-01-01') AND NumCC LIKE '%1234' ORDER BY Name ASC; Problem: What are the names and addresses of all clients who have made an order, ordered alphabetically by name, and who have a credit
SELECT Title, Name FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN INNER JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author_Book.ISBN = '978-0-201-82360-2' ORDER BY Title ASC;
SELECT Book.Title, Author.Name FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Book.ISBN = Author_Book.ISBN AND Author_Book.Author = Author.idAuthor ORDER BY Book.Title, Author.Name; 
SELECT Orders.IdOrder, Client.Name FROM Orders INNER JOIN Client ON Orders.IdClient = Client.IdClient; 
SELECT Orders.IdOrder, Client.Name FROM Orders INNER JOIN Client ON Orders.IdClient = Client.IdClient; 
SELECT Name, COUNT(*) FROM Author, Author_Book WHERE Author.idAuthor = Author_Book.Author GROUP BY Name ORDER BY COUNT(*) DESC; 
SELECT Author.Name, COUNT(Book.ISBN) AS "Number of books" FROM Author JOIN Author_Book ON Author.idAuthor = Author_Book.Author JOIN Book ON Author_Book.ISBN = Book.ISBN GROUP BY Author.Name ORDER BY Author.Name ASC; 
SELECT ISBN, COUNT(IdOrder) FROM Books_Order GROUP BY ISBN; 
SELECT ISBN, COUNT(*) FROM Books_Order GROUP BY ISBN; 
SELECT ISBN, SUM(amount) FROM Books_Order GROUP BY ISBN; 
SELECT ISBN, SUM(amount) FROM Books_Order GROUP BY ISBN; 
SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT Title, PurchasePrice FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order ORDER BY amount DESC LIMIT 1); 
SELECT Title, PurchasePrice FROM Book WHERE ISBN IN (     SELECT ISBN     FROM Books_Order     GROUP BY ISBN     HAVING SUM(amount) = (         SELECT MAX(SUM(amount))         FROM Books_Order     ) ); 
SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order); 
SELECT DISTINCT Title FROM Book, Books_Order, Orders WHERE Book.ISBN = Books_Order.ISBN AND Books_Order.IdOrder = Orders.IdOrder AND Orders.DateOrder < '2020-01-01' ORDER BY Title ASC; 
SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders); 
SELECT DISTINCT Name FROM Client, Orders WHERE Client.IdClient = Orders.IdClient; 
SELECT Name, COUNT(IdOrder) FROM Client, Orders WHERE Client.IdClient = Orders.IdClient GROUP BY Name ORDER BY COUNT(IdOrder) DESC; 
SELECT Name, COUNT(IdOrder) FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Name ORDER BY Name ASC; 
SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders GROUP BY IdClient ORDER BY COUNT(IdClient) DESC LIMIT 1); 
SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders GROUP BY IdClient ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT Name, SUM(amount) FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY Name; 
SELECT Name, SUM(amount) FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY Name; 
SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author IN (SELECT idAuthor FROM Author)))); 
SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE SalePrice = (SELECT MAX(SalePrice) FROM Book)))); 
SELECT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order); 
SELECT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order); 
SELECT Name FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders); 
SELECT Name FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders); 
 SELECT MAX(SalePrice), MIN(SalePrice) FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE DateExped IS NOT NULL AND IdClient IN (SELECT IdClient FROM Client WHERE Name LIKE 'A%')));
SELECT MAX(SalePrice), MIN(SalePrice) FROM Book; 
SELECT AVG(PurchasePrice) as avg_purchase_price, AVG(SalePrice) as avg_sale_price FROM Book; 
SELECT AVG(PurchasePrice), AVG(SalePrice) FROM Book; 
SELECT MAX(SalePrice - PurchasePrice) FROM Book; 
SELECT MAX(SalePrice - PurchasePrice) FROM Book; 
SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book); 
SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book); 
SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book); 
SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book); 
SELECT Title FROM Book WHERE PurchasePrice = (SELECT MAX(PurchasePrice) FROM Book); 
SELECT Title FROM Book WHERE PurchasePrice = (SELECT MAX(PurchasePrice) FROM Book); 
SELECT AVG(SalePrice) FROM Book WHERE Title = '1984' AND Author = '0001'; 
SELECT AVG(SalePrice) FROM Book WHERE Title = '1984' AND Author = '0001'; 
SELECT SalePrice FROM Book WHERE Title = 'The Republic' AND Author = 'Plato'; 
SELECT SalePrice FROM Book WHERE Title = 'The Republic' AND SalePrice > 0; 
 SELECT Title FROM Book WHERE Author = 'Orwell' AND SalePrice = (SELECT MIN(SalePrice) FROM Book WHERE Author = 'Orwell');
SELECT Title FROM Book WHERE Author = 'Orwell' AND SalePrice = (SELECT MIN(SalePrice) FROM Book WHERE Author = 'Orwell'); 
SELECT Title FROM Book WHERE Author = 'Plato' AND SalePrice < (SELECT AVG(SalePrice) FROM Book); 
SELECT Title FROM Book WHERE SalePrice < (SELECT AVG(SalePrice) FROM Book) AND Author = (SELECT idAuthor FROM Author WHERE Name = 'Plato'); 
SELECT Name FROM Author, Author_Book, Book WHERE Author.idAuthor = Author_Book.Author AND Author_Book.ISBN = Book.ISBN AND Book.Title = 'Pride and Prejudice'
SELECT Name FROM Author, Book, Author_Book WHERE Author.idAuthor = Author_Book.Author AND Book.ISBN = Author_Book.ISBN AND Book.Title = 'Pride and Prejudice'; 
SELECT Title FROM Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name LIKE '%Plato%'); 
SELECT Title FROM Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name LIKE '%Plato%'); 
              SELECT COUNT(*) FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'Jane Austen' AND Address = 'London' AND NumCC = '1234 5678 9012 3456') AND DateOrder BETWEEN '2019-01-01' AND '2019-12-31' AND DateExped BETWEEN '2019-01-01' AND '2019-12-31' AND IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'Jane Austen' AND Address = 'London' AND NumCC = '1234 5678 9012 3456') AND DateOrder BETWEEN '2019-01-01' AND '2019-12-31' AND DateExped BETWEEN '2019-01-01' AND '2019-12-31') AND IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'Jane Austen' AND Address = 'London' AND NumCC = '1234 5678 9012 3456') AND DateOrder BETWEEN '2019-01-01' AND '2019-12-31' AND DateExped BETWEEN '2019-01-01' AND '2019-12-31') AND IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'Jane Austen' AND Address = 'London' AND NumCC = '1234 5678 9012 3456') AND DateOrder BETWEEN '2019-01-01' AND '2019-12-31' AND DateExped BETWEEN '2019-01-01' AND '2019-12-31') AND IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'Jane Austen' AND Address = 'London' AND NumCC = '1234 5678 9012 3456') AND DateOrder BETWEEN '2019-01-01' AND '2019-12-31' AND DateExped BETWEEN '2019-01-01' AND '2019-12-31')
SELECT COUNT(*) FROM Orders WHERE IdClient IN (   SELECT IdClient FROM Client   WHERE Name = 'Pride and Prejudice' ) 
SELECT Orders.IdOrder FROM Orders INNER JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder INNER JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice' OR Book.Title = 'The Little Prince'; 
SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice' OR Title = 'The Little Prince')))
SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name IN ('Peter Doe', 'James Smith'))) 
SELECT ISBN FROM Book WHERE Title IN (SELECT Title FROM Book WHERE Title IN (SELECT Title FROM Book WHERE Title IN (SELECT Title FROM Book WHERE Title IN (SELECT Title FROM Book WHERE Title IN (SELECT Title FROM Book WHERE Title IN (SELECT Title FROM Book WHERE Title IN (SELECT Title FROM Book WHERE Title IN (SELECT Title FROM Book WHERE Title IN (SELECT Title FROM Book WHERE Title IN (SELECT Title FROM Book WHERE Title IN (SELECT Title FROM Book WHERE Title IN (SELECT Title FROM Book WHERE Title IN (SELECT Title FROM Book WHERE Title IN (SELECT Title FROM Book WHERE Title IN (SELECT Title FROM Book WHERE Title IN (SELECT Title FROM Book WHERE Title IN (SELECT Title FROM Book WHERE Title IN (SELECT Title FROM Book WHERE Title IN (SELECT Title FROM Book WHERE Title IN (SELECT Title FROM Book WHERE Title IN (SELECT Title FROM Book WHERE Title IN (SELECT Title FROM Book WHERE Title IN (SELECT Title FROM Book WHERE Title IN (SELECT Title FROM Book WHERE Title IN (SELECT Title FROM Book WHERE Title IN (SELECT Title FROM Book WHERE Title IN (SELECT Title FROM Book WHERE Title IN (SELECT Title FROM Book WHERE Title IN (SELECT Title FROM Book WHERE Title IN (SELECT Title FROM Book WHERE Title IN (SELECT Title FROM Book
SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'Peter Doe') AND IdOrder NOT IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'James Smith')))); 
SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'Peter Doe')) AND IdOrder NOT IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'James Smith')))
SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name = 'Pride and Prejudice')))); 
SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice' AND SalePrice > 0))) 
SELECT COUNT(*) FROM book; 
SELECT Title FROM book ORDER BY Title ASC; 
SELECT Title FROM book ORDER BY Pages DESC; 
SELECT Type, Release FROM book; 
SELECT Book_ID, MAX(Chapters), MIN(Chapters) FROM book GROUP BY Book_ID; 
 SELECT Title FROM book WHERE Type!= "Poet";
SELECT AVG(r.Rating) FROM review r; 
SELECT book.Title, review.Rating FROM book, review WHERE book.Book_ID = review.Book_ID ORDER BY review.Rating DESC; 
SELECT Rating FROM review WHERE Book_ID = (SELECT Book_ID FROM book WHERE Chapters = (SELECT MAX(Chapters) FROM book)); 
SELECT Rank FROM review WHERE Book_ID = (SELECT Book_ID FROM book WHERE Pages = (SELECT MIN(Pages) FROM book)); 
SELECT Title FROM book WHERE Book_ID IN (SELECT Book_ID FROM review WHERE Rank = (SELECT MAX(Rank) FROM review)); 
SELECT AVG(readers_in_million) FROM review WHERE type = 'Novel'; 
SELECT "Type", COUNT("Book_ID") FROM "book" GROUP BY "Type"; 
SELECT Type FROM book GROUP BY Type ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT DISTINCT Type FROM book WHERE Book_ID IN (SELECT Book_ID FROM book WHERE Book_ID IN (SELECT Book_ID FROM book WHERE Book_ID IN (SELECT Book_ID FROM book WHERE Book_ID IN (SELECT Book_ID FROM book WHERE Book_ID IN (SELECT Book_ID FROM book WHERE Book_ID IN (SELECT Book_ID FROM book WHERE Book_ID IN (SELECT Book_ID FROM book WHERE Book_ID IN (SELECT Book_ID FROM book WHERE Book_ID IN (SELECT Book_ID FROM book WHERE Book_ID IN (SELECT Book_ID FROM book WHERE Book_ID IN (SELECT Book_ID FROM book WHERE Book_ID IN (SELECT Book_ID FROM book WHERE Book_ID IN (
SELECT Title FROM book WHERE Book_ID IN (SELECT Book_ID FROM review ORDER BY Rating ASC); 
SELECT Title, Audio FROM book ORDER BY Readers_in_Million DESC; 
 SELECT COUNT(*)
SELECT DISTINCT Type FROM book WHERE Pages > 75 AND Pages < 50; 
SELECT DISTINCT Type FROM book; 
SELECT type, title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review); 
SELECT COUNT(*) FROM customer; Problem: What is the name of the manager of the branch with the highest number of years opened? Solution: SELECT Manager FROM branch WHERE Years_opened = (SELECT MAX(Years_opened) FROM branch); Problem: What is the name of the dish with the highest number of orders? Solution: SELECT Dish_Name FROM customer_order GROUP BY Dish_Name ORDER BY COUNT(*) DESC LIMIT 1; Problem: What is the name of the dish with the highest number of orders, ordered by the number of orders? Solution: SELECT Dish_Name, COUNT(*) FROM customer_order GROUP BY Dish_Name ORDER BY COUNT(*) DESC; Problem: What is the name of the dish with the highest number of orders, ordered by the number of orders, and only show the top 5 dishes? Solution: SELECT
SELECT COUNT(*) FROM customer; 
SELECT Name FROM customer ORDER BY Level_of_Membership ASC; 
SELECT Name FROM customer ORDER BY Level_of_Membership ASC; 
SELECT customer.Nationality, customer.Card_Credit FROM customer ORDER BY customer.Card_Credit DESC; 
SELECT customer.Nationality, customer.Card_Credit FROM customer ORDER BY customer.Customer_ID; 
SELECT Name FROM customer WHERE Nationality IN ('England', 'Australia'); 
SELECT Name FROM customer WHERE Nationality IN ('England', 'Australia'); 
SELECT AVG("Card_Credit") FROM "customer" WHERE "Level_of_Membership" > 1; 
SELECT AVG("Card_Credit") FROM "customer" WHERE "Level_of_Membership" > 1; 
SELECT Customer_ID, Name, Nationality, Card_Credit, Level_of_Membership FROM customer ORDER BY Level_of_Membership DESC LIMIT 1; 
SELECT Customer_ID, Name, Nationality, Card_Credit, Level_of_Membership FROM customer WHERE Level_of_Membership = (SELECT MAX(Level_of_Membership) FROM customer); 
SELECT Nationality, COUNT(*) FROM customer GROUP BY Nationality; 
SELECT Nationality, COUNT(Customer_ID) FROM customer GROUP BY Nationality; 
SELECT Nationality, COUNT(*) AS Count FROM customer GROUP BY Nationality ORDER BY Count DESC LIMIT 1; 
SELECT Nationality, COUNT(*) AS num_customers FROM customer GROUP BY Nationality ORDER BY num_customers DESC LIMIT 1; 
SELECT DISTINCT Nationality FROM customer WHERE Card_Credit < 50 OR Card_Credit > 75; 
SELECT Nationality FROM customer WHERE Card_Credit > 50 AND Card_Credit < 75; 
SELECT customer.Name, customer_order.Dish_Name FROM customer, customer_order WHERE customer.Customer_ID = customer_order.Customer_ID; 
SELECT customer.Name, customer_order.Dish_Name FROM customer, customer_order WHERE customer.Customer_ID = customer_order.Customer_ID; 
SELECT customer.Name, customer_order.Dish_Name, customer_order.Quantity FROM customer, customer_order WHERE customer.Customer_ID = customer_order.Customer_ID ORDER BY customer_order.Quantity DESC; 
SELECT customer.Name, customer_order.Dish_Name, customer_order.Quantity FROM customer, customer_order WHERE customer.Customer_ID = customer_order.Customer_ID ORDER BY customer_order.Quantity DESC; 
SELECT customer.Name, SUM(customer_order.Quantity) FROM customer, customer_order WHERE customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Name ORDER BY customer.Name ASC; 
SELECT customer.Name, SUM(customer_order.Quantity) FROM customer, customer_order WHERE customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Name ORDER BY customer.Name ASC; 
SELECT * FROM customer WHERE Customer_ID IN (SELECT Customer_ID FROM customer_order WHERE Quantity > 1); 
SELECT Name FROM customer WHERE Customer_ID IN (SELECT Customer_ID FROM customer_order WHERE Branch_ID IN (SELECT Branch_ID FROM customer_order WHERE Quantity > 1))
SELECT DISTINCT branch.Manager FROM branch; 
SELECT DISTINCT branch.Manager FROM branch; 
SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order); 
SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order); 
SELECT COUNT(*) FROM member; 
SELECT Name FROM member ORDER BY Age ASC; 
 SELECT Name, Nationality FROM member WHERE Member_ID IN (SELECT Member_ID FROM club_leader) AND Age > 30 AND Nationality = (SELECT Nationality FROM club WHERE Club_ID = (SELECT Club_ID FROM club_leader WHERE Member_ID = (SELECT Member_ID FROM member WHERE Name = 'John Doe')))
SELECT Name FROM member WHERE Nationality!= 'England'; 
SELECT Name FROM member WHERE Age = 19 OR Age = 20; 
SELECT Name FROM member WHERE Age = (SELECT MAX(Age) FROM member); 
SELECT DISTINCT Nationality, COUNT(*) FROM member GROUP BY Nationality ORDER BY Nationality ASC; 
SELECT Nationality, COUNT(*) AS Count FROM member GROUP BY Nationality ORDER BY Count DESC LIMIT 1; 
SELECT DISTINCT Nationality FROM member WHERE Member_ID IN (SELECT Member_ID FROM club_leader WHERE Club_ID IN (SELECT Club_ID FROM club WHERE Overall_Ranking > 100)) ORDER BY Nationality; 
SELECT m.Name, c.Club_Name FROM club_leader cl JOIN member m ON cl.Member_ID = m.Member_ID JOIN club c ON cl.Club_ID = c.Club_ID; 
SELECT club_leader.Member_ID, member.Name FROM club_leader JOIN member ON club_leader.Member_ID = member.Member_ID WHERE club_leader.Club_ID IN ( SELECT club.Club_ID FROM club WHERE club.Overall_Ranking > 100 ) 
SELECT Name FROM club_leader WHERE Year_Join < '2018' AND Club_ID IN (SELECT Club_ID FROM club WHERE Team_Leader = 'Name')
SELECT club_leader.Member_ID, member.Name FROM club_leader JOIN member ON club_leader.Member_ID = member.Member_ID WHERE club_leader.Club_ID = (SELECT Club_ID FROM club WHERE Club_Name = "Houston") AND club_leader.Year_Join = "2019"
SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM club_leader); 
SELECT DISTINCT Nationality FROM member WHERE Age > 22 OR Age < 19; 
SELECT AVG(Age) FROM member JOIN club_leader ON member.Member_ID = club_leader.Member_ID WHERE club_leader.Club_ID IN (SELECT Club_ID FROM club_leader GROUP BY Club_ID HAVING COUNT(*) > 1); 
SELECT Club_Name FROM club WHERE Club_Name LIKE '%state%'; 
SELECT Collection_Subset_Name FROM Collection_Subsets; 
SELECT Collection_Subset_Name FROM Collection_Subsets WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subset_Members WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'My Collection'))
SELECT Collection_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection'; 
SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Top collection'; 
SELECT Document_Subset_Name FROM Document_Subsets; 
SELECT Document_Subset_Name FROM Document_Subsets; 
SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'; 
SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'; 
SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NULL; 
SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NULL AND Owner = 'John Doe' AND Description = 'This is a description' AND Other_Details = 'This is other details'
SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin' AND Description = 'parent document of document owned by Marlin' AND Other_Details = 'List the document id.';
SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin'
SELECT Owner FROM Document_Objects WHERE Description = 'Braeden Collection'; 
SELECT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Braeden Collection')); 
SELECT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')
SELECT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')
SELECT DISTINCT Description FROM Document_Objects WHERE Document_Object_ID IN ( SELECT Parent_Document_Object_ID FROM Document_Objects ) ORDER BY Description ASC; 
SELECT DISTINCT Description FROM Document_Objects WHERE Parent_Document_Object_ID IS NULL; 
SELECT COUNT(*) FROM Document_Objects WHERE Owner = 'Marlin'
SELECT COUNT(*) FROM Document_Objects WHERE Owner = 'Marlin'
SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NULL; 
SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NULL; 
SELECT Document_Object_ID, COUNT(Document_Object_ID) AS "Number of Child Documents" FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY Document_Object_ID ASC; 
SELECT Document_Object_ID, COUNT(Document_Object_ID) AS num_child_documents FROM Document_Subset_Members GROUP BY Document_Object_ID; 
SELECT Collection_Name FROM Collections; 
SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Documents_in_Collections WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Document Subset Name'))) 
SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best'; 
SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best'; 
SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Nice')
SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Nice')
SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections); 
SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections); 
SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Document_Object_ID HAVING COUNT(Document_Object_ID) > 1;
SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL AND Parent_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL)
SELECT COUNT(*) FROM Collections WHERE Collection_Name = 'Best' AND Parent_Collection_ID IS NULL; 
SELECT COUNT(*) FROM Collections WHERE Collection_Name = 'Best' AND Parent_Collection_ID IS NOT NULL; 
SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom'
SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom'
SELECT Collection_Subset_Members.Collection_Subset_ID, Collection_Subset_Members.Collection_Subset_Name, COUNT(Collection_Subset_Members.Collection_ID) AS Collection_Count FROM Collection_Subset_Members GROUP BY Collection_Subset_Members.Collection_Subset_ID, Collection_Subset_Members.Collection_Subset_Name ORDER BY Collection_Subset_Members.Collection_Subset_ID 
SELECT Collection_Subset_ID, Collection_Subset_Name, COUNT(Collection_ID) AS Collection_Count FROM Collection_Subset_Members GROUP BY Collection_Subset_ID, Collection_Subset_Name ORDER BY Collection_Subset_ID 
SELECT Document_Object_ID, COUNT(Document_Object_ID) AS Child_Count FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY Child_Count DESC LIMIT 1; 
SELECT Document_Object_ID, COUNT(Document_Object_ID) AS Children FROM Document_Subset_Members GROUP BY Document_Object_ID; 
SELECT Document_Object_ID, COUNT(Document_Object_ID) AS Related_Document_Count FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY Related_Document_Count ASC LIMIT 1; 
SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (
SELECT Document_Object_ID, COUNT(Document_Object_ID) FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Document Subset 1') GROUP BY Document_Object_ID HAVING COUNT(Document_Object_ID) BETWEEN 2 AND 4 ORDER BY Document_Object_ID ASC;
SELECT Document_Object_ID, COUNT(Document_Object_ID) FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING COUNT(Document_Object_ID) BETWEEN 2 AND 4; 
SELECT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden')));
SELECT DISTINCT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden')));
SELECT Document_Subset_Name FROM Document_Subsets WHERE Document_Subset_ID IN ( SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN ( SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden' ) ) 
SELECT DISTINCT Document_Subset_Name FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden')
SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Document_Object_ID) AS num_docs FROM Document_Subset_Members GROUP BY Document_Subset_ID, Document_Subset_Name; 
SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Document_Object_ID) AS num_docs FROM Document_Subset_Members GROUP BY Document_Subset_ID, Document_Subset_Name; 
SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Document_Object_ID) FROM Document_Subset_Members GROUP BY Document_Subset_ID, Document_Subset_Name ORDER BY COUNT(DISTINCT Document_Object_ID) DESC LIMIT 1;
SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Document_Object_ID) AS num_docs FROM Document_Subset_Members GROUP BY Document_Subset_ID, Document_Subset_Name ORDER BY num_docs DESC LIMIT 1; 
SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')
SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')
SELECT Document_Subset_Name, Document_Object_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document
SELECT Document_Subset_Name, Document_Object_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subset_Members WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subset_Members WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subset_Members WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subset_Members WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subset_Members WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subset_Members WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subset_Members WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subset_M
SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Documents_in_Collections WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom '))
SELECT Collection_Name FROM Collections WHERE Collection_Description = 'Ransom'
SELECT COUNT(Collection_ID), Document_Object_ID FROM Documents_in_Collections GROUP BY Document_Object_ID; 
SELECT Document_Object_ID, COUNT(Collection_ID) AS num_collections FROM Documents_in_Collections GROUP BY Document_Object_ID; 
SELECT COUNT(DISTINCT Document_Object_ID) FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')
SELECT COUNT(DISTINCT Document_Object_ID) FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')
SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')
SELECT COUNT(DISTINCT Document_Object_ID) FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')
SELECT Collection_Name, Collection_ID, COUNT(Document_Object_ID) AS Document_Count FROM Documents_in_Collections GROUP BY Collection_Name, Collection_ID ORDER BY Document_Count DESC LIMIT 1; 
SELECT Collection_Name, Collection_ID, COUNT(Document_Object_ID) FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collection_Name = 'Best' GROUP BY Collection_Name, Collection_ID ORDER BY COUNT(Document_Object_ID) DESC LIMIT 1;
SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') AND Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') AND Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') AND Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') AND Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') AND Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') AND Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') AND Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') AND Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') AND Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') AND Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') AND Document_Object_ID
SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') UNION SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best')
SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best') AND Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best'))) AND Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best'))
SELECT DISTINCT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'))
SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') UNION SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')
SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') UNION SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best') UNION SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') UNION SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best') UNION SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') UNION SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best') UNION SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') UNION SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best') UNION SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') UNION SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best') UNION SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') UNION SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best') UNION SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets
SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')
SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')
SELECT COUNT(DISTINCT c.Collection_ID) FROM Collections c JOIN Collection_Subset_Members cs ON c.Collection_ID = cs.Collection_ID JOIN Collection_Subsets cs2 ON cs.Collection_Subset_ID = cs2.Collection_Subset_ID WHERE c.Collection_Name = 'Best' AND cs2.Collection_Subset_Name = 'Best' AND cs2.Collection_Subset_Details = 'Best' AND c.Collection_Description = 'Best' AND c.Parent_Collection_ID IS NULL;
SELECT COUNT(DISTINCT Collection_ID) FROM Collections WHERE Collection_Name = 'Best'; 
SELECT Collection_Subset_Name FROM Collection_Subsets WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subset_Members WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best in')) 
SELECT Collection_Subset_Name FROM Collection_Subsets WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subset_Members WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'))
 SELECT AVG(popularity) FROM participants WHERE id IN (SELECT participant_id FROM performance_score WHERE voice_sound_quality >= 7 AND rhythm_tempo >= 8);
SELECT name FROM songs ORDER BY name ASC; 
SELECT p.name, s.language FROM participants p JOIN performance_score ps ON p.id = ps.participant_id JOIN songs s ON ps.songs_id = s.id; 
SELECT MAX(voice_sound_quality) as max_voice_sound_quality, MIN(voice_sound_quality) as min_voice_sound_quality FROM performance_score; 
SELECT voice_sound_quality, rhythm_tempo, stage_presence FROM performance_score WHERE participant_id = (SELECT id FROM participants WHERE name = 'Freeway')
SELECT id, language, original_artist FROM songs WHERE name!= 'Love'; 
SELECT name, original_artist FROM songs WHERE english_translation = 'All the streets of love'; 
SELECT DISTINCT stage_presence FROM performance_score WHERE songs_id IN (SELECT id FROM songs WHERE language = 'English')
SELECT p.id, p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id HAVING COUNT(*) >= 2; 
SELECT p.id, p.name, p.popularity FROM participants p LEFT JOIN performance_score ps ON p.id = ps.participant_id WHERE ps.songs_id IS NOT NULL ORDER BY COUNT(ps.songs_id) DESC; 
SELECT p.id, p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id WHERE ps.voice_sound_quality = 5 OR ps.rhythm_tempo = 5; 
 SELECT voice_sound_quality FROM performance_score WHERE songs_id IN (SELECT id FROM songs WHERE name = 'The Balkan Girls' AND english_translation IS NOT NULL)
SELECT p.id, p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id JOIN songs s ON ps.songs_id = s.id WHERE ps.voice_sound_quality = (SELECT MAX(ps2.voice_sound_quality) FROM performance_score ps2 JOIN participants p2 ON ps2.participant_id = p2.id JOIN songs s2 ON ps2.songs_id = s2.id); 
SELECT COUNT(*) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9; 
SELECT COUNT(*) FROM songs WHERE id NOT IN (SELECT songs_id FROM performance_score); 
SELECT language, AVG(rhythm_tempo) AS avg_rhythm_score FROM performance_score JOIN songs ON performance_score.songs_id = songs.id GROUP BY language; 
SELECT DISTINCT name FROM participants WHERE id IN ( SELECT participant_id FROM performance_score WHERE songs_id IN ( SELECT id FROM songs WHERE language = 'English' ) ); 
SELECT p.name, p.popularity FROM participants p JOIN performance_score ps ON p.id = ps.participant_id JOIN songs s ON ps.songs_id = s.id WHERE s.language IN ('Croatian', 'English') GROUP BY p.name, p.popularity HAVING COUNT(*) = 2; 
SELECT name FROM songs WHERE name LIKE "%Is%"; Problem: Which song names have the substring "Is" and are in English? Solution: SELECT name FROM songs WHERE name LIKE "%Is%" AND english_translation IS NOT NULL; Problem: Which song names have the substring "Is" and are in English, but not in Spanish? Solution: SELECT name FROM songs WHERE name LIKE "%Is%" AND english_translation IS NOT NULL AND language!= "Spanish"; Problem: Which song names have the substring "Is" and are in English, but not in Spanish, and have a popularity of at least 0.5? Solution: SELECT name FROM songs WHERE name LIKE "%Is%" AND english_translation IS NOT NULL AND language!= "Spanish" AND popularity >= 0.5; Problem: Which song names have the substring
SELECT original_artist FROM songs WHERE rhythm_tempo > 5 ORDER BY voice_sound_quality DESC; 
SELECT COUNT(DISTINCT city_code) FROM City; 
Your role is a natural language to SQL translator who is an expert in writing SQL queries in SQLite dialect. For the given schema, output the SQL query you need to answer the problem. The problem is given below in natural language. Additionally, here are the CREATE TABLE statements for the schema: CREATE TABLE Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3),         FOREIGN KEY(city_code) REFERENCES City(city_code)  ) CREATE TABLE Direct_distance (   city1_code varchar(3) ,   city2_code varchar(3) ,   distance INTEGER,   FOREIGN KEY(city1_code) REFERENCES City(city_code),   FOREIGN KEY(city2_code) REFERENCES City(city_code)    ) CREATE TABLE City (        city_code  	VARCHAR(3) PRIMARY KEY,        city_name  	VARCHAR(25),        state		VARCHAR(2),        country		VARCHAR(25),        latitude		FLOAT,        longitude	FLOAT ) Do not write anything after the SQL query. Do not write anything other than the SQL query - no comments, no newlines, no print statements. Problem: Count the number of cities. 
SELECT DISTINCT state FROM City; 
SELECT DISTINCT state FROM City; 
SELECT COUNT(DISTINCT country) FROM City; 
SELECT COUNT(DISTINCT country) FROM City; 
SELECT city_name, city_code, state, country FROM City; 
SELECT City.city_name, City.city_code, City.state, City.country FROM City; 
SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore'; 
SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore'; 
SELECT DISTINCT city_name FROM City WHERE state = 'PA'; 
SELECT city_name FROM City WHERE state = 'PA'; 
SELECT COUNT(DISTINCT city_name) FROM City WHERE country = 'Canada'; 
SELECT COUNT(*) FROM City WHERE country = 'Canada'; 
SELECT city_name FROM City WHERE state = 'USA' ORDER BY latitude; 
 SELECT city_name FROM City WHERE country
SELECT state, COUNT(city_name) FROM City GROUP BY state; 
SELECT COUNT(city_name), state FROM City GROUP BY state; 
SELECT country, COUNT(city_code) FROM City GROUP BY country; 
SELECT COUNT(city_name), country FROM City GROUP BY country; 
SELECT DISTINCT state FROM City WHERE city_code IN (SELECT city1_code FROM Direct_distance WHERE city2_code IN (SELECT city_code FROM City WHERE state = 'CA') UNION SELECT city2_code FROM Direct_distance WHERE city1_code IN (SELECT city_code FROM City WHERE state = 'CA')) AND state!= 'CA'; 
SELECT DISTINCT state FROM City WHERE city_code IN (SELECT city1_code FROM Direct_distance WHERE city2_code IN (SELECT city_code FROM City WHERE state = 'CA') UNION SELECT city2_code FROM Direct_distance WHERE city1_code IN (SELECT city_code FROM City WHERE state = 'CA')) AND state!= 'CA'; 
SELECT state, COUNT(*) AS num_cities FROM City GROUP BY state ORDER BY num_cities DESC LIMIT 1; 
SELECT state FROM City GROUP BY state HAVING COUNT(*) > (SELECT COUNT(*) FROM City GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1)
SELECT country FROM City GROUP BY country HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM City GROUP BY country); 
SELECT country FROM City GROUP BY country HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM City GROUP BY country); 
SELECT Fname, LName FROM Student WHERE state = 'MD' ORDER BY StuID ASC; 
SELECT CONCAT(LName,'', Fname) FROM Student WHERE city_code = 'MD'
SELECT COUNT(*) FROM Student WHERE city_code = 'CHN'; 
SELECT COUNT(*) FROM Student WHERE city_code = 'CHN'; 
SELECT Fname, Major FROM Student WHERE city_code = 'BAL' ORDER BY Fname ASC; 
SELECT Fname, Major FROM Student WHERE city_code = 'BAL' ORDER BY Fname; 
SELECT COUNT(StuID), country FROM Student GROUP BY country; 
SELECT     city_name,     COUNT(*) AS num_students FROM     Student GROUP BY     city_name ORDER BY     city_name 
SELECT city_name, COUNT(*) FROM Student, City WHERE Student.city_code = City.city_code GROUP BY city_name; 
SELECT city_name, COUNT(*) FROM Student, City WHERE Student.city_code = City.city_code GROUP BY city_name; 
SELECT state, COUNT(*) AS num_students FROM Student GROUP BY state ORDER BY num_students DESC LIMIT 1; 
SELECT state FROM City WHERE city_code IN (SELECT city_code FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE Age > 20 AND Age < 30)) ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT country FROM Student GROUP BY country HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Student GROUP BY country); 
SELECT country FROM Student GROUP BY country HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Student GROUP BY country); 
SELECT DISTINCT city_name FROM City WHERE city_code IN (SELECT city_code FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (
SELECT DISTINCT city_name FROM City WHERE city_code IN (SELECT city_code FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE StuID IN
SELECT DISTINCT state FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE state IN (SELECT state FROM City WHERE state IN (SELECT state FROM City WHERE state IN (SELECT state FROM City WHERE state IN (SELECT state FROM City WHERE state IN (SELECT state FROM City WHERE state IN (SELECT state FROM City WHERE state IN (SELECT state FROM City WHERE state IN (SELECT state FROM City WHERE state IN (SELECT state FROM City WHERE state IN (SELECT state FROM City WHERE state IN (SELECT state FROM City WHERE state IN (SELECT state FROM City WHERE state IN (SELECT state FROM City WHERE state IN (SELECT state FROM City WHERE state IN (SELECT state FROM City WHERE state IN (SELECT state FROM City WHERE state IN (SELECT state FROM City WHERE state IN (SELECT state FROM City WHERE state IN (SELECT state FROM City WHERE state IN (SELECT state FROM City WHERE state IN (SELECT state FROM City WHERE state IN (SELECT state FROM City WHERE state IN (SELECT state FROM City WHERE state IN (SELECT state FROM City WHERE state IN
SELECT DISTINCT state FROM Student WHERE StuID IN (SELECT StuID FROM Student GROUP BY StuID HAVING COUNT(*) > 5); 
SELECT StuID FROM Student WHERE city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA'); 
SELECT StuID FROM Student WHERE city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA'); 
SELECT StuID FROM Student WHERE Sex = 'F' AND city_code = 'PA'; 
SELECT StuID FROM Student WHERE Sex = 'F' AND state = 'PA'; 
SELECT StuID FROM Student WHERE Sex = 'M' AND city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA'); 
SELECT StuID FROM Student WHERE Sex = 'M' AND city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA'); 
SELECT distance FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI'; 
SELECT distance FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI'; 
SELECT distance FROM Direct_distance WHERE city1_code = 'BOS' AND city2_code = 'EWR'; 
SELECT distance FROM Direct_distance WHERE city1_code = 'BOS' AND city2_code = 'EWR'; 
SELECT AVG(distance) FROM Direct_distance; SELECT MIN(distance) FROM Direct_distance; SELECT MAX(distance) FROM Direct_distance; 
SELECT AVG(distance) AS avg_dist, MIN(distance) AS min_dist, MAX(distance) AS max_dist FROM Direct_distance; 
SELECT city1_code, city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance); 
SELECT city1_code, city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance); 
SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance); 
SELECT city1_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance); 
SELECT city1_code, city2_code FROM Direct_distance WHERE distance < 1000; 
SELECT city1_code FROM Direct_distance WHERE distance < 1000; 
SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL'; 
SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL'; 
SELECT AVG(distance) FROM Direct_distance WHERE city1_code = 'BOS' OR city2_code = 'BOS'; 
SELECT AVG(distance) FROM Direct_distance WHERE city1_code = 'BOS' OR city2_code = 'BOS'; 
SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = 'CHI' AND distance = (SELECT MIN(distance) FROM Direct_distance WHERE city1_code = 'CHI')); 
SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = 'CHI' AND distance = (SELECT MIN(distance) FROM Direct_distance WHERE city1_code = 'CHI')); 
SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = 'BOS' AND distance = (SELECT MAX(distance) FROM Direct_distance WHERE city1_code = 'BOS')); 
SELECT City.city_name FROM City, Direct_distance WHERE City.city_code = Direct_distance.city1_code AND Direct_distance.city2_code = 'BOS' AND Direct_distance.distance = (SELECT MAX(Direct_distance.distance) FROM Direct_distance WHERE Direct_distance.city1_code = City.city_code AND Direct_distance.city2_code = 'BOS')
SELECT city1_code, city2_code, SUM(distance) FROM Direct_distance GROUP BY city1_code, city2_code; 
SELECT city_code, SUM(distance) FROM Direct_distance GROUP BY city_code; 
SELECT city_name, AVG(distance) FROM City, Direct_distance WHERE City.city_code = Direct_distance.city1_code OR City.city_code = Direct_distance.city2_code GROUP BY city_name; 
SELECT city_name, AVG(distance) FROM City, Direct_distance WHERE City.city_code = Direct_distance.city1_code GROUP BY city_name; 
SELECT distance FROM Direct_distance WHERE city1_code = 'Linda' AND city2_code = 'Tracy' AND city1_code = 'Smith' AND city2_code = 'Kim'; 
SELECT distance FROM Direct_distance WHERE city1_code = 'NYC' AND city2_code = 'LAX' UNION SELECT distance FROM Direct_distance WHERE city1_code = 'LAX' AND city2_code = 'NYC'; 
 SELECT Fname, LName FROM Student
SELECT CONCAT(S.LName,'', S.Fname) FROM Student S, Direct_distance D, City C WHERE S.city_code = C.city_code AND C.city_name = 'Linda Smith' AND D.city1_code = C.city_code AND D.city2_code = S.city_code ORDER BY D.distance DESC LIMIT 1; 
SELECT state FROM Student WHERE Fname = 'Linda'
SELECT state FROM City WHERE city_code = (SELECT city_code FROM Student WHERE Fname = 'Linda')
 SELECT * FROM Sailors WHERE age > 30 AND rating IN (7, 8, 9);
SELECT name FROM Sailors WHERE age > 30; 
SELECT name, age FROM Sailors WHERE age < 30; 
SELECT name, age FROM Sailors WHERE age < 30; 
SELECT name FROM Boats WHERE bid IN (SELECT bid FROM Reserves WHERE sid = 1); 
SELECT DISTINCT bid FROM Reserves WHERE sid = 1; 
SELECT * FROM Reserves WHERE bid = 102; 
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 102); 
SELECT DISTINCT bid FROM Reserves; 
SELECT bid FROM Reserves; 
SELECT name FROM Sailors WHERE name LIKE '%e%'; 
SELECT name FROM Sailors WHERE name LIKE '%e%'; 
SELECT DISTINCT sid FROM Sailors WHERE age > (SELECT MAX(age) FROM Sailors); 
SELECT DISTINCT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Sailors WHERE age = (SELECT MIN(age) FROM Sailors)); 
SELECT DISTINCT name FROM Sailors WHERE age > (SELECT age FROM Sailors WHERE rating > 7); 
SELECT DISTINCT name FROM Sailors WHERE age > (SELECT age FROM Sailors WHERE rating > 7) 
SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves); 
SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves); 
SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves GROUP BY sid HAVING COUNT(*) > 1); 
SELECT DISTINCT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Reserves WHERE sid = Reserves.sid))
SELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue'))
SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color IN ('red', 'blue'))
SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue'))
SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue'))
SELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue'))
SELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue'))
SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue'))
SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue'))
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves); 
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves); 
SELECT name, sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves); 
SELECT name, sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves); 
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves); 
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves); 
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 103); 
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 103); 
SELECT name FROM Sailors WHERE rating > (SELECT rating FROM Sailors WHERE name = 'Luis')
SELECT name FROM Sailors WHERE rating > (SELECT rating FROM Sailors WHERE name = 'Luis')
SELECT name FROM Sailors WHERE rating > (SELECT rating FROM Sailors WHERE name = 'Luis')
SELECT name FROM Sailors WHERE rating > (SELECT rating FROM Sailors WHERE name = 'Luis')
SELECT name, sid FROM Sailors WHERE rating > 2 AND EXISTS (SELECT * FROM Reserves WHERE Reserves.sid = Sailors.sid) 
SELECT name, sid FROM Sailors WHERE rating >= 3 AND EXISTS (SELECT * FROM Reserves WHERE Reserves.sid = Sailors.sid); 
SELECT name, age FROM Sailors WHERE age = (SELECT MAX(age) FROM Sailors); 
SELECT name, age FROM Sailors WHERE age = (SELECT MAX(age) FROM Sailors); 
SELECT COUNT(*) FROM Sailors; 
SELECT COUNT(*) FROM Sailors; 
SELECT AVG(age) FROM Sailors WHERE rating = 7; 
SELECT AVG(age) FROM Sailors WHERE rating = 7; 
SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%'; 
SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%'; 
SELECT AVG(rating), MAX(age) FROM Sailors; 
 SELECT AVG(rating), MAX(age) FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE day = '4th of July')
SELECT Boats.name, COUNT(Reserves.bid) AS num_reservations FROM Boats LEFT JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY Boats.name ORDER BY num_reservations DESC; 
SELECT Boats.name, COUNT(Reserves.bid) AS num_reservations FROM Boats LEFT JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY Boats.name ORDER BY num_reservations DESC; 
SELECT COUNT(*) FROM Reserves WHERE bid > 50; 
SELECT bid, COUNT(*) AS num_reservations FROM Reserves WHERE bid > 50 GROUP BY bid ORDER BY num_reservations DESC; 
SELECT bid, COUNT(*) AS num_reservations FROM Reserves GROUP BY bid HAVING COUNT(*) > 1 ORDER BY num_reservations DESC; 
 SELECT bid, COUNT(*) FROM Reserves GROUP BY bid HAVING COUNT(*) > 1;
SELECT COUNT(*) FROM Reserves WHERE sid > 1 GROUP BY bid; 
SELECT Boats.name, COUNT(Reserves.sid) FROM Reserves JOIN Sailors ON Reserves.sid = Sailors.sid WHERE Sailors.sid > 1 GROUP BY Boats.name; 
SELECT rating, AVG(age) FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Boats.color ='red' GROUP BY rating; 
SELECT rating, AVG(age) FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color ='red' GROUP BY rating; 
SELECT name, rating, age FROM Sailors ORDER BY rating, age; 
SELECT name, rating, age FROM Sailors ORDER BY rating, age; Problem: What is the name, rating, and age for every sailor who has a rating of 7 or higher? And order them by rating and age. Solution: SELECT name, rating, age FROM Sailors WHERE rating >= 7 ORDER BY rating, age; Problem: What is the name, rating, and age for every sailor who has a rating of 7 or higher and is older than 30? And order them by rating and age. Solution: SELECT name, rating, age FROM Sailors WHERE rating >= 7 AND age > 30 ORDER BY rating, age; Problem: What is the name, rating, and age for every sailor who
SELECT COUNT(*) FROM Boats; 
SELECT COUNT(*) FROM Boats; 
 SELECT name FROM Sailors WHERE rating = (SELECT MAX(rating) FROM Sailors) AND age > 50 AND EXISTS (SELECT * FROM Reserves WHERE Reserves.sid = Sailors.sid AND Reserves.bid IN (SELECT bid FROM Boats WHERE Boats.color ='red'));
 SELECT name FROM Sailors WHERE rating = (SELECT MAX(rating) FROM Sailors) AND age > 50 AND EXISTS (SELECT * FROM Reserves WHERE Reserves.sid = Sailors.sid AND Reserves.bid IN (SELECT bid FROM Boats WHERE Boats.name = 'Pirate'));
SELECT name FROM Boats WHERE bid IN (SELECT bid FROM Reserves WHERE sid IN (SELECT sid FROM Sailors WHERE age BETWEEN 20 AND 30))
SELECT name FROM Boats WHERE bid IN (SELECT bid FROM Reserves WHERE sid IN (SELECT sid FROM Sailors WHERE age BETWEEN 20 AND 30))
SELECT name FROM Sailors WHERE rating > (SELECT rating FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red')));
SELECT name FROM Sailors WHERE rating > (SELECT rating FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red')));
SELECT MAX(rating) FROM Sailors; 
SELECT MAX(rating) FROM Sailors; 
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE name = 'Melon')) Explanation: The query first finds the sailors who reserved the boat with the name Melon. Then, it selects the names of these sailors.
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE name = 'Melon')); 
SELECT name, age FROM Sailors ORDER BY rating DESC; 
SELECT name, age FROM Sailors ORDER BY rating DESC; 
SELECT Model FROM headphone WHERE Price = (SELECT MAX(Price) FROM headphone); 
SELECT Model FROM headphone WHERE Price = (SELECT MAX(Price) FROM headphone); 
SELECT DISTINCT Model FROM headphone ORDER BY Model ASC; 
SELECT DISTINCT Model FROM headphone ORDER BY Model ASC; 
SELECT Class, COUNT(*) AS Count FROM headphone GROUP BY Class ORDER BY Count DESC LIMIT 1; 
 SELECT "Class" FROM "headphone" GROUP BY "Class" HAVING COUNT("Headphone_ID") > 1 ORDER BY COUNT("Headphone_ID")
SELECT DISTINCT Class FROM headphone WHERE Headphone_ID IN (SELECT Headphone_ID FROM stock WHERE Quantity > 2)
SELECT Class FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID HAVING COUNT(Headphone_ID) > 2); 
SELECT "Class", COUNT(*) FROM "headphone" WHERE "Price" > 200 GROUP BY "Class"; 
SELECT "headphone"."Class", COUNT("headphone"."Headphone_ID") FROM "headphone" WHERE "headphone"."Price" > 200 GROUP BY "headphone"."Class"; 
SELECT DISTINCT Earpads FROM headphone; 
SELECT COUNT(DISTINCT earpads) FROM headphone; 
SELECT earpads, COUNT(*) AS count FROM headphone GROUP BY earpads ORDER BY count DESC LIMIT 2; 
SELECT earpads, COUNT(*) FROM headphone GROUP BY earpads ORDER BY COUNT(*) DESC LIMIT 2; 
SELECT Model, Class, Construction FROM headphone WHERE Price = (SELECT MIN(Price) FROM headphone); 
SELECT Model, Class, Construction FROM headphone WHERE Price = (SELECT MIN(Price) FROM headphone); 
SELECT     "Construction",     AVG("Price") FROM     "headphone" GROUP BY     "Construction" ORDER BY     "Construction" 
SELECT "Construction", AVG("Price") FROM "headphone" GROUP BY "Construction"; 
SELECT DISTINCT Class FROM headphone WHERE Earpads IN ('Bowls', 'Comfort Pads'); 
 SELECT DISTINCT Class FROM headphone WHERE Earpads
SELECT DISTINCT headphone.Earpads FROM headphone WHERE headphone.Construction!= 'plastic' AND headphone.Earpads IS NOT NULL; 
SELECT DISTINCT Earpads FROM headphone WHERE Construction!= 'plastic'; 
SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone); 
SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone); 
SELECT Name FROM store ORDER BY Date_Opened; 
SELECT Name FROM store ORDER BY Date_Opened ASC; 
SELECT store.Name, store.Parking FROM store WHERE store.Neighborhood = 'Tarzana'; 
SELECT store.Name, store.Parking FROM store WHERE store.Neighborhood = "Tarzana"; 
SELECT DISTINCT Neighborhood FROM store; 
SELECT COUNT(DISTINCT Neighborhood) FROM store; 
SELECT COUNT(Store_ID), Neighborhood FROM store GROUP BY Neighborhood; 
SELECT "Neighborhood", COUNT("Store_ID") FROM "store" GROUP BY "Neighborhood"; 
SELECT store.Name, COUNT(stock.Quantity) FROM store JOIN stock ON store.Store_ID = stock.Store_ID GROUP BY store.Name ORDER BY COUNT(stock.Quantity) DESC LIMIT 1; 
SELECT store.Name, SUM(stock.Quantity) FROM store JOIN stock ON store.Store_ID = stock.Store_ID GROUP BY store.Name HAVING SUM(stock.Quantity) > 0 ORDER BY SUM(stock.Quantity) DESC; 
SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock); 
SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock); 
SELECT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock); 
SELECT Model FROM headphone WHERE NOT EXISTS (SELECT * FROM stock WHERE headphone.Headphone_ID = stock.Headphone_ID); 
SELECT Model FROM headphone WHERE Headphone_ID IN (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID HAVING MAX(Quantity))
SELECT Model FROM headphone WHERE Headphone_ID IN (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID ORDER BY SUM(Quantity) DESC LIMIT 1); 
SELECT COUNT(*) FROM stock WHERE Store_ID = 1; 
SELECT SUM(stock.Quantity) FROM stock, store WHERE stock.Store_ID = store.Store_ID AND store.Name = 'Woodman'; 
SELECT Neighborhood FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock); 
SELECT Neighborhood FROM store WHERE Store_ID NOT IN ( SELECT Store_ID FROM stock ); 
SELECT COUNT(DISTINCT author_id) FROM Author_list; 
SELECT COUNT(DISTINCT author_id) FROM Author_list; 
SELECT COUNT(*) FROM Paper; 
SELECT COUNT(*) FROM Paper; 
SELECT COUNT(DISTINCT affiliation_id) FROM Affiliation; 
SELECT COUNT(DISTINCT affiliation_id) FROM Affiliation; 
SELECT COUNT(*) FROM Paper WHERE year = 2000 AND venue = 'NAACL'; 
SELECT COUNT(*) FROM Paper WHERE year = 2000 AND venue = 'NAACL'; 
SELECT COUNT(*) FROM Paper WHERE year = 2009 AND venue = 'Columbia University'; 
SELECT COUNT(*) FROM Paper WHERE year = 2009 AND venue = 'Columbia University'; 
SELECT name, address FROM Affiliation; 
SELECT name, address FROM Affiliation; 
SELECT venue, year FROM Paper ORDER BY year; 
SELECT DISTINCT venue FROM Paper ORDER BY year DESC; 
SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Harvard University')); 
SELECT title, paper_id FROM Paper, Author_list, Affiliation WHERE Paper.paper_id = Author_list.paper_id AND Author_list.author_id = Author.author_id AND Author_list.affiliation_id = Affiliation.affiliation_id AND Affiliation.name = 'Harvard University'; 
SELECT paper_id, title FROM Paper WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown')
SELECT title, paper_id FROM Paper WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown'); 
SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id JOIN Affiliation af ON al.affiliation_id = af.affiliation_id WHERE af.name = 'Stanford University' OR af.name = 'Columbia University' GROUP BY p.paper_id, p.title HAVING COUNT(DISTINCT af.name) = 2; 
SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Stanford') AND paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia')))
SELECT paper_id, title FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') AND author_id IN (SELECT author_id FROM Author WHERE name = 'Rambow, Owen') ORDER BY paper_id ASC; 
SELECT title, paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') AND author_id IN (SELECT author_id FROM Author WHERE name = 'Rambow, Owen')
SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown') AND paper_id NOT IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Rambow')));
SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown') AND paper_id NOT IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Rambow')));
SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name IN ('Mckeown, Kathleen', 'Rambow, Owen'))); 
SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name IN ('Mckeown, Kathleen', 'Rambow, Owen'))); 
SELECT Author.name, COUNT(Paper.paper_id) AS num_papers FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY Author.name ORDER BY num_papers DESC; 
SELECT author_id, COUNT(*) AS num_papers FROM Author_list GROUP BY author_id ORDER BY num_papers DESC; 
SELECT affiliation_id, name, address, COUNT(*) AS num_papers FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id GROUP BY affiliation_id ORDER BY num_papers ASC; 
SELECT name FROM Affiliation ORDER BY COUNT(paper_id) DESC; 
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year > 2010 AND year < 2020)); 
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year > 2010 AND year < 2015)); 
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation))); 
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year = 2010) GROUP BY author_id HAVING COUNT(*) = 1); 
SELECT venue, year, COUNT(*) AS num_publications FROM Paper GROUP BY venue, year ORDER BY num_publications DESC LIMIT 1; 
SELECT venue, year, COUNT(*) AS num_papers FROM Paper GROUP BY venue, year ORDER BY num_papers DESC LIMIT 1; 
SELECT venue FROM Paper GROUP BY venue HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Paper GROUP BY venue); 
SELECT venue FROM Paper GROUP BY venue HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Paper GROUP BY venue); 
SELECT COUNT(*) FROM Paper p1, Citation c, Paper p2 WHERE p1.paper_id = 'A00-1002' AND c.cited_paper_id = p1.paper_id AND c.paper_id = p2.paper_id; 
SELECT COUNT(*) FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation WHERE paper_id = 'A00-1002'); 
SELECT COUNT(*) FROM Citation WHERE paper_id = 'D12-1027'; 
SELECT COUNT(*) FROM Citation WHERE paper_id = 'D12-1027'; 
SELECT paper_id, COUNT(cited_paper_id) AS num_citations FROM Citation GROUP BY paper_id ORDER BY num_citations DESC LIMIT 1; 
SELECT paper_id, COUNT(cited_paper_id) AS num_citations FROM Citation GROUP BY paper_id ORDER BY num_citations DESC LIMIT 1; 
SELECT title FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(cited_paper_id) = (SELECT COUNT(cited_paper_id) FROM Citation GROUP BY cited_paper_id ORDER BY COUNT(cited_paper_id) DESC LIMIT 1)); 
SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(*) > (SELECT COUNT(*) FROM Citation)); 
SELECT p.paper_id, p.title, COUNT(c.cited_paper_id) AS num_citations FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.paper_id ORDER BY num_citations DESC LIMIT 10; 
SELECT title, COUNT(cited_paper_id) AS num_citations FROM Paper JOIN Citation ON Paper.paper_id = Citation.paper_id GROUP BY title ORDER BY num_citations DESC LIMIT 10; 
SELECT COUNT(*) FROM `Citation` WHERE `Citation`.`cited_paper_id` IN (SELECT `Paper`.`paper_id` FROM `Paper` WHERE `Paper`.`title` = 'A Computational Model of Spoken Language Production' AND `Paper`.`venue` = 'Cognitive Science' AND `Paper`.`year` = 1988) AND `Citation`.`paper_id` IN (SELECT `Paper`.`paper_id` FROM `Paper` WHERE `Paper`.`title` = 'A Computational Model of Spoken Language Production' AND `Paper`.`venue` = 'Cognitive Science' AND `Paper`.`year` = 1988) AND `Citation`.`cited_paper_id` IN (SELECT `Paper`.`paper_id` FROM `Paper` WHERE `Paper`.`title` = 'A Computational Model of Spoken Language Production' AND `Paper`.`venue` = 'Cognitive Science' AND `Paper`.`year` = 1988) AND `Citation`.`paper_id` IN (SELECT `Paper`.`paper_id` FROM `Paper` WHERE `Paper`.`title` = 'A Computational Model of Spoken Language Production' AND `Paper`.`venue` = '
SELECT COUNT(*) FROM `Citation` WHERE `Cited_paper_id` IN (SELECT `paper_id` FROM `Author_list` WHERE `author_id` IN (SELECT `author_id` FROM `Author` WHERE `name` = 'Mckeown, Kathleen'))
SELECT COUNT(*) FROM Paper p1, Citation c, Paper p2 WHERE p1.paper_id = c.paper_id AND c.cited_paper_id = p2.paper_id AND p1.title = 'How many papers does Mckeown, Kathleen cite?' AND p2.title = 'How many papers does Mckeown, Kathleen cite?'; 
SELECT COUNT(*) FROM Citation WHERE cited_paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')); 
SELECT name, COUNT(*) AS num_citations FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Paper ON Author_list.paper_id = Paper.paper_id JOIN Citation ON Paper.paper_id = Citation.paper_id GROUP BY name ORDER BY num_citations DESC LIMIT 1; 
SELECT a.name, COUNT(*) AS num_citations FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id JOIN Citation c ON p.paper_id = c.paper_id JOIN Paper cp ON c.cited_paper_id = cp.paper_id GROUP BY a.author_id ORDER BY num_citations DESC LIMIT 1; 
SELECT venue, year FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') AND affiliation_id IS NULL); 
SELECT DISTINCT venue, year FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) ORDER BY venue, year; 
SELECT venue, year FROM Paper WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University'); 
SELECT DISTINCT venue, year FROM Paper WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University'); 
SELECT author_id, COUNT(*) AS num_papers FROM Author_list WHERE year = 2009 GROUP BY author_id ORDER BY num_papers DESC LIMIT 1; 
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year = 2009) GROUP BY author_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year = 2009) GROUP BY author_id ORDER BY COUNT(*) DESC LIMIT 1)) ORDER BY name ASC LIMIT 1; 
SELECT name FROM Affiliation WHERE affiliation_id IN (SELECT affiliation_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Paper WHERE year = 2009) GROUP BY affiliation_id ORDER BY COUNT(*) DESC LIMIT 3); 
SELECT affiliation_id, COUNT(*) AS num_papers FROM Author_list WHERE year = 2009 GROUP BY affiliation_id ORDER BY num_papers DESC LIMIT 3; 
SELECT COUNT(*) FROM Author_list WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University') AND year <= 2009; 
SELECT COUNT(*) FROM Paper WHERE year <= 2009 AND venue = 'Columbia University'; 
SELECT COUNT(*) FROM Author_list WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Stanford University') AND year BETWEEN 2000 AND 2009; 
SELECT COUNT(*) FROM Paper WHERE year BETWEEN 2000 AND 2009 AND venue = 'Stanford University'; 
SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list GROUP BY paper_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Author_list GROUP BY paper_id ORDER BY COUNT(*) DESC LIMIT 1)); 
SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Author_list GROUP BY author_id ORDER BY COUNT(*) DESC LIMIT 1))); 
SELECT COUNT(DISTINCT author_id) FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') AND affiliation_id IS NULL; 
SELECT COUNT(DISTINCT author_id) FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') AND affiliation_id IS NULL; 
SELECT author_id, COUNT(*) AS num_papers FROM Author_list WHERE affiliation_id IN (     SELECT affiliation_id     FROM Author_list     WHERE author_id = (         SELECT author_id         FROM Author         WHERE name = 'Mckeown, Kathleen'     ) ) GROUP BY author_id ORDER BY num_papers DESC LIMIT 1; 
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE title = 'A Semantic Theory of Tense and Aspect:Thematic Relations in Temporal Expressions' AND venue = 'Journal of Semantics' AND year = 1985)) AND paper_id IN (SELECT paper_id FROM Paper WHERE title = 'A Semantic Theory of Tense and Aspect:Thematic Relations in Temporal Expressions' AND venue = 'Journal of Semantics' AND year = 1985)) AND paper_id IN (SELECT paper_id FROM Paper WHERE title = 'A Semantic Theory of Tense and Aspect:Thematic Relations in Temporal Expressions' AND venue = 'Journal of Semantics' AND year = 1985)) AND paper_id IN (SELECT paper_id FROM Paper WHERE title = 'A Semantic Theory of Tense and Aspect:Thematic Relations in Temporal Expressions' AND venue = 'Journal of Semantics' AND year = 1985)) AND paper_id IN (SELECT paper_id FROM Paper WHERE title = 'A Semantic Theory of T
SELECT paper_id FROM Paper WHERE title LIKE '%translation%'; 
SELECT paper_id FROM Paper WHERE title LIKE '%translation%'; 
SELECT paper_id, title FROM Paper WHERE paper_id NOT IN (SELECT paper_id FROM Citation); 
SELECT paper_id, title FROM Paper WHERE paper_id NOT IN (SELECT paper_id FROM Citation); 
SELECT name FROM Affiliation WHERE address LIKE '%China%' AND affiliation_id IN (SELECT affiliation_id FROM Author_list GROUP BY affiliation_id HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Author_list GROUP BY affiliation_id)); 
SELECT name FROM Affiliation WHERE address LIKE '%China%' AND affiliation_id IN (SELECT affiliation_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year IN (SELECT MAX(year) FROM Paper))); 
SELECT   `Paper`.`year`,   COUNT(`Paper`.`year`) AS `num_papers` FROM   `Paper` GROUP BY   `Paper`.`year` ORDER BY   `Paper`.`year` ASC 
SELECT venue, year, COUNT(*) AS num_papers FROM Paper GROUP BY venue, year ORDER BY venue, year; 
SELECT affiliation_id, COUNT(*) AS num_papers FROM Author_list GROUP BY affiliation_id; 
SELECT affiliation_id, COUNT(*) AS num_papers FROM Author_list GROUP BY affiliation_id; 
SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(*) > 50); 
SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(*) > 50); 
SELECT COUNT(DISTINCT author_id) FROM Author_list WHERE paper_id NOT IN (SELECT paper_id FROM Citation WHERE cited_paper_id IN (SELECT paper_id FROM Paper WHERE year > 2010)); 
 SELECT COUNT(DISTinct author_id) FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year > 2010 AND paper_id IN (SELECT paper_id FROM Citation WHERE cited_paper_id IN (SELECT paper_id FROM Paper WHERE year > 2010))));
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue IN ('NAACL', 'ACL') AND year = 2009)); 
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue IN ('NAACL', 'ACL') AND year = 2009))
SELECT name FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'ACL')); 
SELECT name FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'ACL')); Explanation: The query first selects the author_id of authors who have not published a paper in ACL. Then, it selects the name of authors whose author_id is in the result of the previous query.
SELECT COUNT(DISTINCT Conference_ID) FROM conference; 
SELECT COUNT(*) FROM conference; 
SELECT DISTINCT Conference_Name FROM conference; 
SELECT DISTINCT Conference_Name FROM conference; 
SELECT Conference_Name, Year, Location FROM conference; 
SELECT Conference_Name, Year, Location FROM conference; 
SELECT Conference_Name, COUNT(*) FROM conference GROUP BY Conference_Name; 
SELECT Conference_Name, COUNT(Conference_Name) AS Count FROM conference GROUP BY Conference_Name; 
SELECT Year, COUNT(Conference_ID) FROM conference GROUP BY Year; 
SELECT Conference_ID, Year FROM conference GROUP BY Conference_ID, Year HAVING COUNT(*) = 1; 
SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(Year) ASC LIMIT 1; 
SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(Year) ASC LIMIT 1; 
SELECT Location FROM conference GROUP BY Location HAVING COUNT(*) >= 2; 
SELECT Location FROM conference GROUP BY Location HAVING COUNT(Location) >= 2; 
SELECT institution_name, location, founded FROM institution; 
SELECT institution.Institution_Name, institution.Location, institution.Founded FROM institution WHERE institution.Institution_ID IN ( SELECT institution.Institution_ID FROM institution WHERE institution.Location = 'London' ) 
SELECT COUNT(*) FROM institution WHERE Founded BETWEEN 1850 AND 1900; 
SELECT COUNT(*) FROM institution WHERE Founded BETWEEN 1850 AND 1900; 
 SELECT institution.Institution_Name, institution.Location FROM institution WHERE institution.Founded
SELECT institution_name, location FROM institution ORDER BY founded DESC LIMIT 1; 
 SELECT institution.Institution_Name, COUNT(staff.staff_ID) FROM institution JOIN staff ON institution.Institution_ID = staff.Institution_ID WHERE institution.Founded
SELECT institution.Institution_ID, institution.Institution_Name, COUNT(staff.name) AS num_staff, staff.name FROM institution JOIN staff ON institution.Institution_ID = staff.Institution_ID WHERE institution.Founded > 1800 GROUP BY institution.Institution_ID, institution.Institution_Name, staff.name ORDER BY institution.Institution_ID, institution.Institution_Name, staff.name; 
SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff); 
SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff); 
SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff); 
SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff); 
SELECT MAX(Age), MIN(Age) FROM staff WHERE Nationality = 'United States'; 
SELECT MAX(Age), MIN(Age) FROM staff; 
SELECT Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation WHERE staff_ID IN (SELECT staff_ID FROM staff WHERE Nationality = 'Canada' AND Institution_ID IN (SELECT Institution_ID FROM institution WHERE Location = 'Canada')) AND role ='speaker')
SELECT Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation WHERE staff_ID IN (SELECT staff_ID FROM staff WHERE Nationality = 'Canada' AND Institution_ID IN (SELECT Institution_ID FROM institution WHERE Location = 'Canada'))); 
SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role ='speaker' AND Conference_ID IN (SELECT Conference_ID FROM conference_participation WHERE role ='sponsor'))
SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role ='speaker' AND Conference_ID IN (SELECT Conference_ID FROM conference_participation WHERE role ='sponsor'))
SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL') AND role = 'author') AND staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'NACCL') AND role = 'author')
SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name IN ('ACL', 'NACCL')))
SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year IN (2003, 2004))); 
SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year IN (2003, 2004))); 
SELECT Conference_Name, Year, COUNT(*) FROM conference_participation GROUP BY Conference_Name, Year; 
SELECT Conference_Name, Year, COUNT(*) FROM conference_participation GROUP BY Conference_ID; 
SELECT Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation GROUP BY Conference_ID ORDER BY COUNT(*) DESC LIMIT 2); 
SELECT Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation GROUP BY Conference_ID HAVING COUNT(*) >= 2); 
SELECT name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL')); 
SELECT name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL')); 
SELECT institution.Institution_Name, institution.Location FROM institution WHERE institution.Institution_ID NOT IN ( SELECT institution.Institution_ID FROM institution JOIN staff ON institution.Institution_ID = staff.Institution_ID JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE conference.Year = 2004 ) 
SELECT institution.Institution_Name, institution.Location FROM institution WHERE institution.Institution_ID NOT IN ( SELECT institution.Institution_ID FROM institution JOIN staff ON institution.Institution_ID = staff.Institution_ID JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE conference.Year = 2004 ) 
SELECT pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills); 
SELECT pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills); 
SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age; 
SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills); 
SELECT * FROM PilotSkills WHERE age < 30; 
 SELECT * FROM PilotSkills WHERE age > 30 AND plane_name IN (SELECT plane_name FROM Hangar WHERE location = "New York") AND plane_name NOT IN (SELECT plane_name FROM Hangar WHERE location = "Chicago");
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35; 
SELECT pilot_name FROM PilotSkills WHERE age < 35 AND plane_name = 'Piper Cub'; 
SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter'; 
SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter'; 
SELECT DISTINCT location FROM Hangar; 
SELECT COUNT(DISTINCT location) FROM Hangar; 
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32; 
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32; 
SELECT COUNT(*) FROM PilotSkills WHERE age > 40; 
SELECT COUNT(*) FROM PilotSkills WHERE age > 40; 
SELECT COUNT(*) FROM PilotSkills WHERE pilot_name = 'B-52 Bomber' AND age < 35; 
SELECT COUNT(*) FROM PilotSkills WHERE plane_name = 'B-52 Bomber' AND age < 35; 
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age = (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub'); 
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age = (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub'); 
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM PilotSkills GROUP BY plane_name); 
SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM PilotSkills GROUP BY plane_name); 
SELECT COUNT(*) FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Chicago')
SELECT COUNT(*) FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Chicago')
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41; 
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41; 
SELECT COUNT(DISTINCT plane_name) FROM PilotSkills; 
SELECT DISTINCT plane_name FROM PilotSkills; 
SELECT COUNT(*) FROM PilotSkills WHERE pilot_name = 'Smith' AND plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'New York'); 
SELECT COUNT(*) FROM PilotSkills WHERE pilot_name = 'Smith' AND plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Smiths Hangar'); 
SELECT COUNT(*) FROM PilotSkills WHERE age > 40; 
SELECT COUNT(*) FROM PilotSkills WHERE age > 40; 
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC; 
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC; 
SELECT pilot_name FROM PilotSkills ORDER BY age DESC; 
SELECT pilot_name FROM PilotSkills ORDER BY age DESC; 
SELECT location FROM Hangar ORDER BY plane_name; 
SELECT plane_name, location FROM Hangar ORDER BY plane_name; 
SELECT DISTINCT plane_name FROM PilotSkills ORDER BY plane_name ASC; 
SELECT DISTINCT plane_name FROM PilotSkills ORDER BY plane_name ASC; 
SELECT COUNT(*) FROM PilotSkills WHERE age > 40 OR age < 30; 
SELECT COUNT(*) FROM PilotSkills WHERE age > 40 OR age < 30; 
SELECT pilot_name, age FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age > 35 OR plane_name = 'F-14 Fighter' AND age < 30; 
SELECT pilot_name, age FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age > 35 OR plane_name = 'F-14 Fighter' AND age < 30; 
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND plane_name!= 'B-52 Bomber' 
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND plane_name!= 'B-52 Bomber'; 
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'B-52 Bomber') GROUP BY pilot_name HAVING COUNT(*) = 2 
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'B-52 Bomber') GROUP BY pilot_name HAVING COUNT(*) = 2; 
SELECT AVG(age), MIN(age) FROM PilotSkills; 
SELECT AVG(age), MIN(age) FROM PilotSkills; 
SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location IN ('Austin', 'Boston')) GROUP BY pilot_name HAVING COUNT(*) = 2; 
SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location IN ('Austin', 'Boston'))
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter'); 
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter')
SELECT plane_name, AVG(age) FROM PilotSkills GROUP BY plane_name 
SELECT plane_name, AVG(age) FROM PilotSkills GROUP BY plane_name; 
SELECT plane_name, COUNT(*) AS num_planes FROM PilotSkills GROUP BY plane_name ORDER BY num_planes DESC; 
SELECT plane_name, COUNT(*) FROM PilotSkills GROUP BY plane_name; 
SELECT plane_name, MAX(age) FROM PilotSkills GROUP BY plane_name ORDER BY plane_name; 
SELECT DISTINCT plane_name, pilot_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills) ORDER BY plane_name; 
SELECT plane_name, pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills GROUP BY plane_name); 
SELECT DISTINCT plane_name, pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills); 
SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name; 
SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name; 
SELECT city, COUNT(pilot_name), AVG(age) FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name GROUP BY city; 
SELECT location, COUNT(pilot_name), AVG(age) FROM PilotSkills GROUP BY location; 
SELECT COUNT(*) FROM PilotSkills WHERE age < 35 GROUP BY plane_name HAVING AVG(age) < 35; 
SELECT plane_name, COUNT(pilot_name) FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35; 
SELECT location FROM PilotSkills, Hangar WHERE PilotSkills.pilot_name = 'John' AND PilotSkills.plane_name = Hangar.plane_name AND PilotSkills.age = (SELECT MIN(age) FROM PilotSkills WHERE PilotSkills.pilot_name = 'John'); 
SELECT location FROM PilotSkills WHERE pilot_name = 'John' AND plane_name = 'Boeing 747' AND age = (SELECT MIN(age) FROM PilotSkills WHERE pilot_name = 'John'); 
SELECT pilot_name, age FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin')
SELECT pilot_name, age FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin')
SELECT pilot_name FROM PilotSkills WHERE age > (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name; 
SELECT pilot_name FROM PilotSkills WHERE age > (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name; 
SELECT COUNT(*) FROM PilotSkills WHERE age < ALL (SELECT age FROM PilotSkills WHERE plane_name = 'F-14 Fighter'); 
SELECT COUNT(*) FROM PilotSkills WHERE age < ALL (SELECT age FROM PilotSkills WHERE plane_name = 'F-14 Fighter'); 
SELECT DISTINCT plane_name FROM PilotSkills WHERE plane_name LIKE '%Bomber%'; 
SELECT DISTINCT plane_name FROM PilotSkills WHERE plane_name LIKE '%Bomber%'; 
SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub'); 
SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub'); 
SELECT Name FROM district WHERE Area_km = (SELECT MAX(Area_km) FROM district); 
SELECT Area_km, Government_website FROM district WHERE Population = (SELECT MIN(Population) FROM district); 
SELECT district.Name, district.Population FROM district WHERE district.Area_km > (SELECT AVG(district.Area_km) FROM district); 
SELECT MAX(Area_km), AVG(Area_km) FROM district; 
SELECT SUM(d.Population) FROM district d WHERE d.Area_km IN (SELECT Area_km FROM district ORDER BY Area_km DESC LIMIT 3); 
SELECT District_ID, Name, Government_website FROM district ORDER BY Population DESC; 
SELECT Name FROM district WHERE Government_website LIKE '%gov%'; 
SELECT District_ID, Name FROM district WHERE Population > 4000 OR Area_km > 3000; 
SELECT s.Name, s.Speach_title FROM spokesman s, spokesman_district sd WHERE s.Spokesman_ID = sd.Spokesman_ID AND sd.District_ID = 1; 
SELECT AVG("Points"), AVG("Age") FROM "spokesman" WHERE "Rank_position" = 1; 
SELECT Name, Points FROM spokesman WHERE Age < 40; 
SELECT * FROM spokesman WHERE Age = (SELECT MAX(Age) FROM spokesman); 
SELECT * FROM spokesman WHERE Points < (SELECT AVG(Points) FROM spokesman); 
SELECT Name FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district WHERE Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman WHERE Points = (SELECT MAX(Points) FROM spokesman))); 
SELECT Name FROM spokesman WHERE Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman_district WHERE Start_year < '2004' AND District_ID IN (SELECT District_ID FROM district WHERE Area_km > 1000)) 
SELECT district.Name, COUNT(spokesman.Spokesman_ID) AS num_spokesmen FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID JOIN spokesman ON spokesman.Spokesman_ID = spokesman_district.Spokesman_ID GROUP BY district.Name ORDER BY num_spokesmen DESC; 
SELECT Name FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district WHERE Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman WHERE Rank_position = 1) AND Start_year IN (SELECT Start_year FROM spokesman_district WHERE Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman WHERE Rank_position = 2))) 
SELECT Name FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district WHERE Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman WHERE Points > 0))
SELECT COUNT(DISTRICT_ID) FROM district WHERE District_ID NOT IN (SELECT District_ID FROM spokesman_district); 
SELECT Name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district); 
SELECT SUM(d.Population) AS TotalPopulation, AVG(d.Population) AS AveragePopulation FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID WHERE sd.Spokesman_ID IS NOT NULL; 
SELECT title FROM Sculptures WHERE year = (SELECT MAX(year) FROM Sculptures); 
SELECT title FROM Sculptures WHERE year = (SELECT MAX(year) FROM Sculptures); 
SELECT title, location FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings); 
SELECT title, location FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings); 
SELECT lname, fname FROM Sculptures WHERE location = '226'; 
SELECT lname, fname FROM Sculptures WHERE location = '226'
SELECT title, location FROM Paintings; 
SELECT title, location FROM Paintings WHERE mediumOn = 'oil' AND year = 1900; 
SELECT title, location FROM Sculptures; 
SELECT title, location FROM Sculptures 
SELECT medium FROM Paintings WHERE paintingID = 80; 
SELECT medium FROM Paintings WHERE paintingID = 80; 
SELECT lname, fname FROM Artists WHERE birthYear > 1850; 
SELECT lname ||'' || fname FROM Artists WHERE birthYear > 1850; 
SELECT lname, fname, birthYear, deathYear FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE location!= 'gallery 226'); 
SELECT lname, fname, birthYear, deathYear FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE location!= 'gallery 226'); 
SELECT lname, fname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year < 1900) ORDER BY lname, fname; 
SELECT lname, fname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year < 1900) GROUP BY lname, fname HAVING COUNT(*) = 1; 
SELECT DISTINCT birthYear FROM Artists WHERE EXISTS (SELECT * FROM Sculptures WHERE Sculptures.sculptorID = Artists.artistID AND Sculptures.year > 1920); 
SELECT DISTINCT lname, fname, birthYear FROM Artists WHERE EXISTS (SELECT * FROM Sculptures WHERE Sculptures.sculptorID = Artists.artistID AND Sculptures.year > 1920); 
SELECT lname, fname FROM Artists WHERE deathYear - birthYear = (SELECT MAX(deathYear - birthYear) FROM Artists); 
SELECT lname ||'' || fname FROM Artists WHERE deathYear IS NOT NULL ORDER BY deathYear DESC LIMIT 1; 
SELECT   birthYear,   deathYear,   birthYear - deathYear AS age FROM   Artists WHERE   deathYear IS NOT NULL ORDER BY   age ASC LIMIT   1; 
SELECT fname, lname, birthYear, deathYear FROM Artists WHERE deathYear - birthYear = (SELECT MIN(deathYear - birthYear) FROM Artists); 
SELECT fname, deathYear - birthYear FROM Artists ORDER BY deathYear - birthYear DESC LIMIT 1; 
SELECT fname, age FROM Artists WHERE deathYear IS NULL ORDER BY age DESC LIMIT 1; 
SELECT COUNT(*) FROM Paintings WHERE location = '240'; 
SELECT COUNT(*) FROM Paintings WHERE location = '240'; 
SELECT COUNT(*) FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE deathYear IS NOT NULL AND birthYear IS NOT NULL AND deathYear - birthYear = (SELECT MAX(deathYear - birthYear) FROM Artists WHERE deathYear IS NOT NULL AND birthYear IS NOT NULL)); 
SELECT COUNT(*) FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE deathYear IS NOT NULL AND birthYear IS NOT NULL ORDER BY deathYear - birthYear DESC LIMIT 1); 
SELECT lname, year FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE fname = 'Mary') ORDER BY lname, year ASC; 
SELECT title, year FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE fname = 'Mary'); 
SELECT width_mm FROM Paintings WHERE year > 1850 AND painterID IN (SELECT artistID FROM Artists WHERE birthYear < 1850); 
SELECT height_mm FROM Paintings WHERE year > 1850 AND painterID IN (SELECT artistID FROM Artists WHERE birthYear < 1850); 
SELECT location, medium FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE fname = 'Pablo')
SELECT location, mediumOn FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE fname = 'Pablo')
SELECT lname, fname FROM Artists WHERE EXISTS (SELECT * FROM Paintings WHERE Artists.artistID = Paintings.painterID) AND EXISTS (SELECT * FROM Sculptures WHERE Artists.artistID = Sculptures.sculptorID); 
SELECT lname ||'' || fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings UNION SELECT sculptorID FROM Sculptures); 
SELECT lname, fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil' AND mediumOn = 'lithographic')
SELECT lname, fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium IN ('oil', 'lithographic')) Problem: What are the titles of paintings that are taller than 1000mm and were painted by artists who were born in the 19th century? Solution: SELECT title FROM Paintings WHERE height_mm > 1000 AND year >= 1800 AND year < 1900 Problem: What are the titles of sculptures that are taller than 1000mm and were sculpted by artists who were born in the 19th century? Solution: SELECT title FROM Sculptures WHERE height_mm > 1000 AND year >= 1800 AND year < 1900 Problem: What are the titles of paintings that are taller than 1000mm and were painted by artists who were born in the 19th century and died in the 20th century? Solution: SELECT title FROM Paintings WHERE height_mm > 1000 AND year >=
SELECT birthYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE year = 1884 AND mediumOn = 'canvas')
SELECT birthYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE year = 1884); 
SELECT DISTINCT fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241')
SELECT fname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE location = '241' AND medium = 'oil') OR artistID IN (SELECT painterID FROM Paintings WHERE location = '241' AND medium = 'oil')
SELECT medium, COUNT(*) FROM Paintings GROUP BY medium; 
SELECT   medium,   COUNT(*) AS num_works FROM   Paintings WHERE   medium IS NOT NULL GROUP BY   medium UNION ALL SELECT   medium,   COUNT(*) AS num_works FROM   Sculptures WHERE   medium IS NOT NULL GROUP BY   medium ORDER BY   medium 
SELECT   AVG(height_mm) AS avg_height,   medium FROM   Paintings GROUP BY   medium ORDER BY   avg_height DESC; 
SELECT AVG(height_mm) FROM Paintings GROUP BY medium; 
SELECT COUNT(paintingID) FROM Paintings WHERE year < 1900 GROUP BY location; 
SELECT COUNT(*) FROM Paintings WHERE year < 1900 GROUP BY location; 
SELECT title FROM Paintings WHERE year > 1910 AND medium = 'oil'; 
SELECT title FROM Paintings WHERE medium = 'oil' AND year > 1910; 
SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 240'; 
SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 240'; 
SELECT DISTINCT title FROM Paintings WHERE height_mm > (SELECT height_mm FROM Paintings WHERE medium = 'canvas')
SELECT DISTINCT title FROM Paintings WHERE height_mm > ANY (SELECT height_mm FROM Paintings WHERE medium = 'canvas'); 
SELECT DISTINCT paintingID FROM Paintings WHERE year < (SELECT year FROM Paintings WHERE location = 'gallery 240'); 
SELECT DISTINCT paintingID FROM Paintings WHERE year < (SELECT year FROM Paintings WHERE location = 'gallery 240') ORDER BY paintingID; 
SELECT paintingID FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings); 
SELECT paintingID FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings); 
SELECT lname, fname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE title LIKE '%female%'); 
SELECT lname, fname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE title LIKE "%female%"); 
SELECT title FROM Paintings GROUP BY title ORDER BY title ASC; 
SELECT title FROM Paintings GROUP BY title ORDER BY title ASC; 
SELECT title FROM Paintings ORDER BY LENGTH(title) DESC; 
SELECT title FROM Paintings ORDER BY height_mm ASC; 
SELECT   Artists.fname,   Artists.lname,   Paintings.title,   Sculptures.title FROM   Artists   JOIN Paintings ON Artists.artistID = Paintings.painterID   JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE   Paintings.year BETWEEN 1900 AND 1950   OR Sculptures.year BETWEEN 1900 AND 1950 ORDER BY   Artists.lname,   Artists.fname,   Paintings.title,   Sculptures.title 
SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950; 
SELECT title FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222; 
SELECT title FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222; 
SELECT artistID FROM Artists WHERE birthYear < 1900 ORDER BY COUNT(paintingID) DESC LIMIT 1; 
SELECT artistID FROM Artists WHERE birthYear < 1900 ORDER BY COUNT(paintingID) DESC LIMIT 1; 
SELECT fname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(sculptorID) DESC LIMIT 1); 
SELECT fname FROM Artists WHERE sculptorID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID HAVING COUNT(*) = (SELECT COUNT(*) FROM Sculptures GROUP BY sculptorID)); 
SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800; 
SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800; 
SELECT location FROM Paintings WHERE year < 1885 OR year > 1930; 
SELECT location FROM Paintings WHERE year < 1885 OR year > 1930; 
SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000; 
SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000; 
SELECT location FROM Paintings WHERE mediumOn IN ('on panel', 'on canvas'); 
SELECT location FROM Paintings WHERE mediumOn IN ('on panel', 'on canvas'); 
SELECT location FROM Paintings WHERE year < 1885 AND year > 1930; 
SELECT location FROM Paintings WHERE year < 1885 AND year > 1930; 
SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'; 
SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'; 
 SELECT MAX(height_mm), paintingID FROM Paintings
SELECT height_mm, paintingID FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC LIMIT 1; 
SELECT year, MAX(height_mm), MAX(width_mm) FROM Paintings GROUP BY year; 
SELECT   year,   MAX(height_mm) AS max_height,   MAX(width_mm) AS max_width FROM   Paintings GROUP BY   year ORDER BY   year DESC; 
SELECT   lname,   fname,   AVG(height_mm),   AVG(width_mm) FROM   Paintings GROUP BY   lname,   fname ORDER BY   lname,   fname 
SELECT   lname,   fname,   AVG(height_mm),   AVG(width_mm) FROM   Paintings GROUP BY   lname,   fname ORDER BY   lname,   fname 
SELECT fname, COUNT(*) FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY fname HAVING COUNT(*) >= 2; 
SELECT fname, COUNT(paintingID) AS num_paintings FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY fname HAVING COUNT(paintingID) >= 2 ORDER BY num_paintings DESC; 
SELECT deathYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING COUNT(*) <= 3); 
SELECT lname, fname, birthYear, deathYear FROM Artists WHERE artistID IN (   SELECT sculptorID   FROM Sculptures   GROUP BY sculptorID   HAVING COUNT(*) < 4 ) 
SELECT deathYear FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID HAVING COUNT(*) = (SELECT COUNT(*) FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) ASC LIMIT 1)); 
SELECT deathYear FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID HAVING COUNT(*) = (SELECT COUNT(*) FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) ASC LIMIT 1)); 
SELECT paintingID, height_mm FROM Paintings WHERE location = '240' ORDER BY width_mm DESC LIMIT 1; 
SELECT height_mm, paintingID FROM Paintings WHERE location = '240' ORDER BY height_mm DESC LIMIT 1; 
SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = '240'); 
SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = '240'); 
SELECT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900); 
SELECT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900); 
SELECT lname, fname, COUNT(paintingID) AS num_paintings FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE medium = 'oil' GROUP BY lname, fname ORDER BY num_paintings DESC LIMIT 3; 
SELECT lname, fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil') ORDER BY lname, fname; 
SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year; 
SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year ASC; 
SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title; 
SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title ASC; 
SELECT lname, fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE paintingID NOT IN (SELECT sculptureID FROM Sculptures)); 
SELECT lname, fname FROM Artists WHERE artistID NOT IN (SELECT sculptorID FROM Sculptures) AND artistID IN (SELECT painterID FROM Paintings); 
SELECT location FROM Paintings WHERE year < 1885 AND mediumOn IS NULL; 
SELECT title FROM Paintings WHERE year < 1885 AND medium!= 'canvas'; 
SELECT COUNT(*) FROM race; 
SELECT COUNT(*) FROM race; 
SELECT "Winning_driver", "Winning_team" FROM "race" ORDER BY "Winning_team" ASC 
SELECT DISTINCT     winning_driver,     winning_team FROM     race ORDER BY     winning_team ASC; 
SELECT "Winning_driver" FROM "race" WHERE "Winning_driver"!= "Junior Strous" AND "Pole_Position" = "Winning_driver"; 
SELECT DISTINCT Driver_Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race WHERE Road IN (SELECT Road FROM race WHERE Winning_driver = 'Junior Strous' AND Winning_team = 'Junior Strous' AND Report = 'Junior Strous' AND Pole_Position = 'Junior Strous' AND Fastest_Lap = 'Junior Strous' AND Winning_driver = 'Junior Strous' AND Winning_team = 'Junior Strous' AND Report = 'Junior Strous' AND Pole_Position = 'Junior Strous' AND Fastest_Lap = 'Junior Strous' AND Winning_driver = 'Junior Strous' AND Winning_team = 'Junior Strous' AND Report = 'Junior Strous' AND Pole_Position
SELECT DISTINCT Constructor FROM driver ORDER BY Age ASC; 
SELECT DISTINCT Constructor FROM driver ORDER BY Age ASC; 
SELECT DISTINCT Entrant FROM driver WHERE Age >= 20; 
SELECT DISTINCT Entrant FROM driver WHERE Age >= 20; 
SELECT MAX(age) FROM driver; SELECT MIN(age) FROM driver; 
SELECT MAX(age) as max_age, MIN(age) as min_age FROM driver; 
SELECT DISTINCT Engine FROM driver WHERE Age > 30 OR Age < 20; 
SELECT DISTINCT Engine FROM driver WHERE Age > 30 OR Age < 20; 
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC; 
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC; 
SELECT driver.Driver_Name, race.Race_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID; 
SELECT driver.Driver_Name, race.Race_Name FROM driver, race WHERE driver.Driver_ID = race.Driver_ID; 
SELECT Driver_Name, COUNT(*) FROM driver GROUP BY Driver_Name ORDER BY COUNT(*) DESC; 
SELECT Driver_ID, COUNT(*) AS num_races FROM race GROUP BY Driver_ID; 
SELECT Driver_Name, Age FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT Driver_Name, Age FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT Driver_Name, Age FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING COUNT(*) >= 2); 
SELECT Driver_Name, Age FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING COUNT(*) >= 2); 
SELECT race.Race_Name FROM race, driver WHERE race.Driver_ID = driver.Driver_ID AND driver.Age >= 26; 
SELECT Race_Name FROM race WHERE Driver_ID IN (SELECT Driver_ID FROM driver WHERE Age >= 26)
SELECT "Driver_Name" FROM "driver" WHERE "Constructor"!= "Bugatti"; 
SELECT Driver_Name FROM driver WHERE Constructor!= 'Bugatti'; 
SELECT DISTINCT Constructor, COUNT(Driver_ID) AS num_drivers FROM driver GROUP BY Constructor ORDER BY num_drivers DESC; 
SELECT Constructor, COUNT(Driver_ID) AS num_drivers FROM driver GROUP BY Constructor ORDER BY num_drivers DESC; 
SELECT     Engine,     COUNT(*) AS Count FROM     driver GROUP BY     Engine ORDER BY     Count DESC LIMIT     1; 
SELECT     Engine FROM     driver GROUP BY     Engine ORDER BY     COUNT(*) DESC LIMIT     1; 
SELECT DISTINCT Engine FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM driver GROUP BY Engine HAVING COUNT(DISTINCT Engine) >= 2); 
 SELECT DISTINCT Engine FROM driver WHERE Engine IN (SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(Distinct Driver_ID) > 1) ORDER BY Engine
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race); 
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race); 
SELECT DISTINCT Constructor FROM driver WHERE Age < 20 OR Age > 30; 
SELECT DISTINCT Constructor FROM driver WHERE Age < 20 OR Age > 30; 
SELECT DISTINCT Constructor FROM driver WHERE Winning_team = Constructor AND Winning_team IN (SELECT Winning_team FROM driver GROUP BY Winning_team HAVING COUNT(Winning_team) > 1); 
SELECT * FROM race WHERE Winning_team = 'Ferrari' AND Winning_team = 'McLaren' AND Winning_team = 'Williams' AND Winning_team = 'Benetton' AND Winning_team = 'Jordan' AND Winning_team = 'Arrows' AND Winning_team = 'Tyrrell' AND Winning_team = 'Lotus' AND Winning_team = 'Ligier' AND Winning_team = 'Minardi' AND Winning_team = 'Onyx' AND Winning_team = 'March' AND Winning_team = 'Zakspeed' AND Winning_team = 'Coloni'
SELECT DISTINCT Driver_Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race WHERE Road IN (SELECT Road FROM race WHERE Driver_ID IN (SELECT Driver_ID FROM driver WHERE Driver_Name = 'James Hinchcliffe') AND Road IN (SELECT Road FROM race WHERE Driver_ID IN (SELECT Driver_ID FROM driver WHERE Driver_Name = 'Carl Skerlong')))); 
SELECT DISTINCT Driver_Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race WHERE Race_Name = 'James Hinchcliffe' OR Race_Name = 'Carl Skerlong')
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position = "James Hinchcliffe"); 
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe'); 
SELECT COUNT(*) FROM languages; 
SELECT COUNT(*) FROM languages; 
SELECT name FROM languages ORDER BY name ASC; 
SELECT name FROM languages ORDER BY name ASC; 
SELECT name FROM languages WHERE name LIKE '%ish%'; 
SELECT name FROM languages WHERE name LIKE "%ish%"; 
SELECT name FROM countries ORDER BY overall_score DESC; 
SELECT name FROM countries ORDER BY overall_score DESC; 
SELECT AVG("overall_score") FROM "countries" WHERE "justice_score" > 0.5; 
SELECT AVG("justice_score") FROM "countries"; 
SELECT MAX(health_score), MIN(health_score) FROM countries WHERE name!= 'Norway'; 
SELECT MAX(health_score), MIN(health_score) FROM countries WHERE id!= 1; 
SELECT COUNT(DISTINCT language_id) FROM official_languages; 
SELECT COUNT(DISTINCT language_id) FROM official_languages; 
SELECT name FROM countries ORDER BY education_score DESC; 
SELECT name FROM countries ORDER BY education_score DESC; 
SELECT name FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries);
 SELECT name FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries);
SELECT countries.name, languages.name FROM countries INNER JOIN official_languages ON countries.id = official_languages.country_id INNER JOIN languages ON official_languages.language_id = languages.id; 
SELECT c.name, l.name FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id; 
null
SELECT l.name, COUNT(*) AS num_countries FROM official_languages ol JOIN languages l ON ol.language_id = l.id GROUP BY l.name ORDER BY num_countries DESC; 
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id GROUP BY l.name ORDER BY COUNT(c.id) DESC LIMIT 1; 
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id WHERE c.overall_score = (SELECT MAX(c2.overall_score) FROM countries c2); 
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id WHERE c.id IN (SELECT country_id FROM official_languages GROUP BY country_id HAVING COUNT(*) >= 2) ORDER BY l.name; 
SELECT l.name FROM official_languages ol JOIN languages l ON ol.language_id = l.id WHERE ol.country_id IN (SELECT country_id FROM official_languages GROUP BY country_id HAVING COUNT(*) > 1); 
SELECT AVG(c.overall_score) FROM countries c JOIN official_languages ol ON c.id = ol.country_id WHERE ol.language_id = (SELECT id FROM languages WHERE name = 'English')
SELECT AVG("overall_score") FROM "countries" WHERE "id" IN (SELECT "country_id" FROM "official_languages" WHERE "language_id" IN (SELECT "id" FROM "languages" WHERE "name" = "English")); 
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id WHERE c.overall_score > 0 ORDER BY c.overall_score DESC LIMIT 3;
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id WHERE c.overall_score = (SELECT MAX(c2.overall_score) FROM countries c2) GROUP BY l.name HAVING COUNT(*) = 3 ORDER BY l.name ASC; 
SELECT l.name, AVG(c.overall_score) FROM official_languages ol JOIN languages l ON ol.language_id = l.id JOIN countries c ON ol.country_id = c.id GROUP BY l.name ORDER BY AVG(c.overall_score) DESC; 
SELECT l.name, AVG(c.overall_score) AS avg_overall_score FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id GROUP BY l.name ORDER BY avg_overall_score DESC; 
SELECT name FROM countries WHERE id IN (SELECT country_id FROM official_languages GROUP BY country_id HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM official_languages GROUP BY country_id)); 
SELECT country_id FROM official_languages GROUP BY country_id HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM official_languages GROUP BY country_id)); 
SELECT name FROM languages WHERE NOT EXISTS (SELECT * FROM official_languages WHERE languages.id = official_languages.language_id); 
SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages); 
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages); 
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages); 
SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE overall_score > 95) OR country_id IN (SELECT id FROM countries WHERE overall_score < 90))
SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE overall_score > 95) AND country_id IN (SELECT id FROM countries WHERE overall_score < 90))
SELECT DISTINCT country, town_city FROM Addresses ORDER BY country, town_city; 
SELECT country, town_city FROM Addresses; 
SELECT     p.property_id,     p.property_address_id,     p.owner_user_id,     p.property_type_code,     p.date_on_market,     p.date_off_market,     p.property_name,     p.property_description,     p.garage_yn,     p.parking_lots,     p.room_count,     p.vendor_requested_price,     p.price_min,     p.price_max,     p.other_property_details,     a.line_1_number_building,     a.line_2_number_street,     a.line_3_area_locality,     a.town_city,     a.zip_postcode,     a.county_state_province,     a.country,     a.other_address_details,     u.age_category_code,     u.user_category_code,     u.user_address_id,     u.is_buyer,     u.is_seller,     u.login_name,     u.password,     u.date_registered,     u.first_name,     u.middle_name,     u.last_name,     u.other_user_details,     r.room_number,     r.room_type_code,     r.room_size,     r.other_room_details,     f.feature_name,     f.feature_description,     pf.property_feature_description,     pp.photo_title,     pp.photo_description,     pp.photo_filename FROM     Properties p     INNER JOIN Addresses a ON p.property_address_id = a.address_id     INNER JOIN Users u ON p.owner_user_id = u.user_id     INNER JOIN Rooms r ON p.property_id = r.property_id     INNER JOIN Features f ON r.room_type_code = f.feature_id     INNER JOIN Property_Features pf ON p.property_id = pf.property_id     INNER JOIN Property_Photos pp ON p.property_id = pp.property_id WHERE     p.property_type_code = 'Single Family Residence'     AND p.date_off_market IS NULL     AND u.is_buyer = 'Y'     AND u.is_seller = 'N'     AND r.room_number = '1'     AND r.room_type_code = 'Bedroom'     AND f.feature_name = 'Bedroom'     AND pf.property_feature_description = 'Bedroom'     AND pp.photo_title = 'Bedroom'     AND pp.photo_description = 'Bedroom'     AND pp.photo_filename = 'Bedroom' ORDER BY     p.property_id ASC; 
SELECT p.property_id, a.county_state_province FROM Properties p JOIN Addresses a ON p.property_address_id = a.address_id WHERE p.property_type_code = 'Single Family Residence' ORDER BY p.property_id; 
SELECT feature_name FROM Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE property_feature_description = 'rooftop' AND property_id IN (SELECT property_id FROM Properties WHERE property_name = 'The White House' AND property_address_id IN (SELECT address_id FROM Addresses WHERE line_1_number_building = '1600' AND line_2_number_street = 'Pennsylvania Avenue' AND line_3_area_locality = 'Washington' AND town_city = 'Washington' AND zip_postcode = '20500' AND county_state_province = 'District of Columbia' AND country = 'United States' AND other_address_details = 'The White House, Washington, DC 20500, USA' AND address_id IN (SELECT user_address_id FROM Users WHERE user_id IN (SELECT owner_user_id FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Features WHERE feature_name = 'rooftop' AND feature_description = 'rooftop' AND feature_id IN (SELECT feature_id FROM Property_Features WHERE property_feature_description = 'rooftop' AND property_id IN (SELECT property_id FROM Properties WHERE property_name = 'The White House' AND property_address_id IN (SELECT address_id FROM Addresses WHERE line_1_number_building = '1600' AND line_2_number_street = 'Pennsylvania Avenue' AND line_3_area_locality = 'Washington' AND town_city = 'Washington' AND zip_postcode = '20500' AND county_state_province = 'District of Columbia' AND country = 'United States' AND other_address_details = 'The White House, Washington, DC 20500, USA' AND address_id IN (SELECT user_address_id FROM Users WHERE user_id IN (SELECT owner_user_id FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Features WHERE feature_name = 'rooftop' AND feature_description = 'rooftop' AND feature_id IN (SELECT feature_id FROM Property_Features WHERE property_feature_description = 'rooftop' AND property_id IN (SELECT property_id FROM Properties WHERE property_name = 'The White House' AND property_address_id IN (SELECT address_id FROM Addresses WHERE line_1_number_building = '1600' AND line_2_number_street = 'Pennsylvania Avenue' AND line_3_area_locality = 'Washington' AND town_city = 'Washington' AND zip_postcode = '20500' AND county_state_province = 'District of Columbia' AND country = 'United States' AND other_address_details = 'The White House, Washington, DC 20500, USA' AND address_id IN (SELECT
SELECT feature_description FROM Features WHERE feature_name = 'rooftop'; 
SELECT feature_name, feature_description FROM Features WHERE feature_id IN (SELECT feature_id FROM Property_Features GROUP BY feature_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Property_Features GROUP BY feature_id ORDER BY COUNT(*) DESC LIMIT 1)); 
SELECT feature_name, feature_description FROM Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Property_Features WHERE feature
SELECT MIN(room_count) FROM Rooms; 
SELECT MIN(room_count) FROM Rooms; 
SELECT COUNT(property_id) FROM Properties WHERE parking_lots = '1' OR garage_yn = '1'; 
SELECT COUNT(property_id) FROM Properties WHERE garage_yn = 'Y' OR parking_lots = 'Y'; 
SELECT age_category_code FROM Users WHERE last_name LIKE '%Mother%'; 
SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description LIKE '%Mother%'; 
SELECT first_name FROM Users WHERE user_id IN (SELECT user_id FROM User_Property_History GROUP BY user_id HAVING COUNT(*) = (SELECT COUNT(*) FROM User_Property_History GROUP BY user_id ORDER BY COUNT(*) DESC LIMIT 1)); 
SELECT first_name FROM Users WHERE user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT AVG(room_count) FROM Rooms WHERE feature_value = 'Garden'
SELECT AVG(room_count) FROM Rooms WHERE feature_value = 'Garden' AND feature_id IN (SELECT feature_id FROM Property_Features WHERE feature_value = 'Garden' AND property_id IN (SELECT property_id FROM Property_Features WHERE feature_value = 'Garden' AND feature_id IN (SELECT feature_id FROM Features WHERE feature_name = 'Garden')));
SELECT DISTINCT town_city FROM Addresses INNER JOIN Properties ON Addresses.address_id = Properties.property_address_id INNER JOIN Property_Features ON Properties.property_id = Property_Features.property_id INNER JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE Features.feature_name = 'Swimming Pool' AND Properties.property_id IN (SELECT property_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Features WHERE feature_name = 'Swimming Pool')) ORDER BY town_city;
SELECT DISTINCT town_city FROM Addresses WHERE address_id IN ( SELECT property_address_id FROM Properties WHERE property_id IN ( SELECT property_id FROM Property_Features WHERE feature_id IN ( SELECT feature_id FROM Features WHERE feature_name = 'Swimming Pool' ) ) ) 
SELECT property_id, vendor_requested_price FROM Properties WHERE vendor_requested_price IS NOT NULL ORDER BY vendor_requested_price ASC LIMIT 1; 
SELECT property_id, vendor_requested_price FROM Properties WHERE vendor_requested_price IS NOT NULL ORDER BY vendor_requested_price ASC LIMIT 1; 
SELECT AVG(room_count) FROM Rooms; 
SELECT AVG(room_count) FROM Rooms; 
SELECT COUNT(DISTINCT room_size) FROM Rooms; 
SELECT COUNT(DISTINCT room_size) FROM Rooms 
SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) >= 2; 
SELECT user_id, search_seq FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) >= 2; 
SELECT MAX(search_datetime) FROM User_Searches; 
SELECT MAX(search_datetime) FROM User_Searches WHERE user_id = 1001; 
SELECT     search_datetime,     search_string FROM     User_Searches ORDER BY     search_string DESC; 
SELECT search_string, search_datetime FROM User_Searches ORDER BY search_string DESC; 
SELECT DISTINCT zip_postcode FROM Addresses WHERE address_id IN (SELECT property_address_id FROM Properties WHERE property_id IN (SELECT property_id FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE user_id NOT IN (SELECT user_id FROM User_Property_History WHERE property_id IN (SELECT property_id FROM Properties WHERE property_id IN (SELECT property_id FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN (SELECT user_id FROM Users WHERE user_id IN
SELECT DISTINCT     zip_postcode FROM     Addresses     JOIN Properties ON Addresses.address_id = Properties.property_address_id     JOIN Users ON Properties.owner_user_id = Users.user_id WHERE     Users.user_id NOT IN (         SELECT             user_id         FROM             Users         GROUP BY             user_id         HAVING             COUNT(*) >= 2     ) ORDER BY     zip_postcode; 
SELECT     u.user_category_code,     u.user_id FROM     Users u WHERE     u.user_id IN (         SELECT             u.user_id         FROM             Users u         WHERE             u.user_id NOT IN (                 SELECT                     u.user_id                 FROM                     Users u                 WHERE                     u.user_id IN (                         SELECT                             u.user_id                         FROM                             Users u                         WHERE                             u.user_id IN (                                 SELECT                                     u.user_id                                 FROM                                     Users u                                 WHERE                                     u.user_id IN (                                         SELECT                                             u.user_id                                         FROM                                             Users u                                         WHERE                                             u.user_id IN (                                                 SELECT                                                     u.user_id                                                 FROM                                                     Users u                                                 WHERE                                                     u.user_id IN (                                                         SELECT                                                             u.user_id                                                         FROM                                                             Users u                                                         WHERE                                                             u.user_id IN (                                                                 SELECT                                                                     u.user_id                                                                 FROM                                                                     Users u                                                                 WHERE                                                                     u.user_id IN (                                                                         SELECT                                                                             u.user_id                                                                         FROM                                                                             Users u                                                                         WHERE                                                                             u.user_id IN (                                                                                 SELECT                                                                                     u.user_id                                                                                 FROM                                                                                     Users u                                                                                 WHERE                                                                                     u.user_id IN (                                                                                         SELECT                                                                                             u.user_id                                                                                         FROM                                                                                             Users u                                                                                         WHERE                                                                                             u.user_id IN (                                                                                                 SELECT                                                                                                     u.user_id                                                                                                 FROM                                                                                                     Users u                                                                                                 WHERE                                                                                                     u.user_id IN (                                                                                                         SELECT                                                                                                             u.user_id                                                                                                         FROM                                                                                                             Users u                                                                                                         WHERE                                                                                                             u.user_id IN (                                                                                                                 SELECT                                                                                                                     u.user_id                                                                                                                 FROM                                                                                                                     Users u                                                                                                                 WHERE                                                                                                                     u.user_id IN (                                                                                                                         SELECT                                                                                                                             u.user_id                                                                                                                         FROM                                                                                                                             Users u                                                                                                                         WHERE                                                                                                                             u.user_id IN (                                                                                                                                 SELECT                                                                                                                                     u.user_id                                                                                                                                 FROM                                                                                                                                     Users u                                                                                                                                 WHERE                                                                                                                                     u.user_id IN (                                                                                                                                         SELECT                                                                                                                                             u.user_id                                                                                                                                         FROM                                                                                                                                             Users u                                                                                                                                         WHERE                                                                                                                                             u.user_id IN (                                                                                                                                                 SELECT                                                                                                                                                     u.user_id                                                                                                                                                 FROM                                                                                                                                                     Users u                                                                                                                                                 WHERE                                                                                                                                                     u.user_id IN (                                                                                                                                                         SELECT                                                                                                                                                             u.user_id                                                                                                                                                         FROM                                                                                                                                                             Users u                                                                                                                                                         WHERE                                                                                                                                                             u.user_id IN (                                                                                                                                                                 SELECT                                                                                                                                                                     u.user_id                                                                                                                                                                 FROM                                                                                                                                                                     Users u                                                                                                                                                                 WHERE                                                                                                                                                                     u.user_id
SELECT user_id, user_category_code FROM Users WHERE user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) = 1); 
SELECT age_category_code FROM Users WHERE user_id = (SELECT user_id FROM User_Searches WHERE search_seq = 1); 
SELECT age_category_code FROM Users WHERE user_id = ( SELECT user_id FROM User_Searches WHERE search_seq = ( SELECT MIN(search_seq) FROM User_Searches ) ) 
SELECT login_name FROM Users WHERE age_category_code = 'Senior Citizen' ORDER BY first_name; 
SELECT login_name FROM Users WHERE age_category_code = 'Senior Citizen' ORDER BY first_name ASC; 
SELECT COUNT(*) FROM Users u JOIN User_Searches us ON u.user_id = us.user_id WHERE u.is_buyer = 'Y'; 
SELECT COUNT(*) FROM Users u JOIN User_Searches us ON u.user_id = us.user_id WHERE u.is_buyer = 'Y' AND us.search_string LIKE '%buy%'; 
SELECT date_registered FROM Users WHERE login_name = 'ratione'; 
SELECT date_registered FROM Users WHERE login_name = 'ratione'; 
SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1'; 
SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = 'Y'; 
SELECT line_1_number_building, line_2_number_street, town_city FROM Addresses, Users, Properties WHERE Users.user_id = Properties.owner_user_id AND Users.user_category_code = 'Senior Citizen' AND Properties.property_type_code = 'Single Family Home' AND Users.age_category_code = 'Senior Citizen' AND Properties.date_off_market IS NULL AND Properties.date_on_market IS NOT NULL AND Properties.date_off_market IS NULL AND Properties.date_on_market IS NOT NULL AND Properties.date_off_market IS NULL AND Properties.date_on_market IS NOT NULL AND Properties.date_off_market IS NULL AND Properties.date_on_market IS NOT NULL AND Properties.date_off_market IS NULL AND Properties.date_on_market IS NOT NULL AND Properties.date_off_market IS NULL AND Properties.date_on_market IS NOT NULL AND Properties.date_off_market IS NULL AND Properties.date_on_market IS NOT NULL AND Properties.date_off_market IS NULL AND Properties.date_on_market IS NOT NULL AND Properties.date_off_market IS NULL AND Properties.date_on_market IS NOT NULL AND Properties.date_off_market IS NULL AND Properties.date_on_market IS NOT NULL AND Properties.date_off_market IS NULL AND Properties.date_on_market IS NOT NULL AND Properties.date_off_market IS NULL AND Properties.date_on_market IS NOT NULL AND Properties.date_off_market IS NULL AND Properties.date_on_market IS NOT NULL AND Properties.date_off_market IS NULL AND Properties.date_on_market IS NOT NULL AND Properties.date_off_market IS NULL AND Properties.date_on_market IS NOT NULL AND Properties.date_off_market IS NULL AND Properties.date_on_market IS NOT NULL AND Properties.date_off_market IS NULL AND Properties.date_on_market IS NOT NULL AND Properties.date_off_market IS NULL AND Properties.date_on_market IS NOT NULL AND Properties.date_off_market IS NULL AND Properties.date_on_market IS NOT NULL AND Properties.date_off_market IS NULL AND Properties.date_on_market IS NOT NULL AND Properties.date_off_market IS NULL AND Properties.date_on_market IS NOT NULL AND Properties.date_off_market IS NULL AND Properties.date_on_market IS NOT NULL AND Properties.date_off_market IS NULL AND Properties.date_on_market IS NOT NULL AND Properties.date_off_market IS NULL AND Properties.date_on_market IS NOT NULL AND Properties.date_off_market IS NULL AND Properties.date_on_market IS NOT NULL AND Properties.date_off_market IS NULL AND Properties.date_on_market IS NOT NULL AND Properties.date_off_market IS NULL AND Properties.date_on_market IS NOT NULL AND Properties.date_off_market IS NULL AND Properties.date_on_market IS NOT NULL AND Properties.date_off_market IS NULL AND Properties.date_on_market IS NOT NULL AND Properties.date_off_market IS NULL AND Properties.date_on_market IS NOT NULL AND Properties.date_off_market IS NULL AND Properties.date_on_market IS NOT NULL AND Properties.date_off_market IS NULL AND Properties.date_on_market IS NOT NULL AND Properties.date_off_market IS NULL AND Properties.date_on_market IS
SELECT line_1_number_building, line_2_number_street, town_city FROM Addresses, Ref_Age_Categories WHERE age_category_code = 'Senior Citizen' AND Addresses.address_id = Users.user_address_id AND Users.user_id = User_Property_History.user_id AND User_Property_History.property_id = Properties.property_id AND Properties.property_address_id = Addresses.address_id AND Properties.property_type_code = 'Building' AND Properties.property_type_code = 'Street' AND Properties.property_type_code = 'City'
SELECT COUNT(DISTINCT p.property_id) FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id WHERE pf.property_feature_description IS NOT NULL GROUP BY p.property_id HAVING COUNT(DISTINCT pf.property_feature_description) >= 2; 
SELECT COUNT(*) FROM Property_Features WHERE property_id IN (SELECT property_id FROM Property_Features GROUP BY property_id HAVING COUNT(*) >= 2); 
SELECT property_id, COUNT(*) AS num_photos FROM Property_Photos GROUP BY property_id; 
SELECT property_id, COUNT(*) AS num_photos FROM Property_Photos GROUP BY property_id; 
SELECT Users.user_id, COUNT(Property_Photos.photo_seq) AS num_photos FROM Users JOIN Properties ON Users.user_id = Properties.owner_user_id JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY Users.user_id; 
SELECT user_id, COUNT(*) FROM Property_Photos GROUP BY user_id HAVING COUNT(*) > 0; 
SELECT SUM(price_max) FROM Properties WHERE property_type_code = 'Single Family Home' AND (user_category_code = 'Single Mother' OR user_category_code = 'Student'); 
SELECT MAX(vendor_requested_price) FROM Properties WHERE property_type_code = 'Single Family Home' AND property_type_code = 'Condo' AND property_type_code = 'Townhouse' AND property_type_code = 'Multi-Family Home' AND property_type_code = 'Mobile Home' AND property_type_code = 'Land' AND property_type_code = 'Commercial' AND property_type_code = 'Industrial' AND property_type_code = 'Agricultural' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code = 'Other' AND property_type_code = 'Vacant Land' AND property_type_code
SELECT     uph.datestamp,     p.property_name FROM     User_Property_History AS uph     INNER JOIN Properties AS p ON uph.property_id = p.property_id ORDER BY     uph.datestamp ASC; 
SELECT     `User_Property_History`.`datestamp`,     `Properties`.`property_name` FROM     `User_Property_History`     INNER JOIN `Properties` ON `User_Property_History`.`property_id` = `Properties`.`property_id` ORDER BY `User_Property_History`.`datestamp` ASC 
SELECT property_type_description, property_type_code FROM Ref_Property_Types WHERE property_type_code = (SELECT property_type_code FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT property_type_code, property_type_description FROM Ref_Property_Types WHERE property_type_code IN ( SELECT property_type_code FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC LIMIT 1 ) 
SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'; 
SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'; 
SELECT     room_size,     COUNT(room_size) AS room_count FROM     Rooms GROUP BY     room_size ORDER BY     room_count DESC; 
SELECT     room_size,     COUNT(room_size) AS room_count FROM     Rooms GROUP BY     room_size ORDER BY     room_size 
SELECT country FROM Addresses WHERE user_address_id IN (SELECT user_address_id FROM Users WHERE first_name = 'Robbie')
SELECT country FROM Addresses WHERE address_id IN (SELECT user_address_id FROM Users WHERE first_name = 'Robbie'); 
SELECT     first_name,     middle_name,     last_name FROM     Users WHERE     user_id IN (         SELECT             owner_user_id         FROM             Properties         WHERE             property_address_id IN (                 SELECT                     user_address_id                 FROM                     Users             )     ) 
SELECT     CONCAT(u.first_name,'', u.middle_name,'', u.last_name) AS full_name FROM     Users u     JOIN Properties p ON u.user_id = p.owner_user_id WHERE     p.property_address_id IN (         SELECT             a.address_id         FROM             Addresses a         WHERE             a.line_1_number_building LIKE '%1%'     ) ORDER BY     full_name; 
SELECT search_string FROM User_Searches WHERE user_id NOT IN (SELECT user_id FROM User_Property_History WHERE property_id IN (SELECT property_id FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users))); 
SELECT DISTINCT     search_string FROM     User_Searches WHERE     user_id NOT IN (         SELECT             user_id         FROM             User_Property_History     ) ORDER BY     search_string; 
SELECT last_name, user_id FROM Users WHERE user_id IN (SELECT user_id FROM User_Property_History GROUP BY user_id HAVING COUNT(*) >= 2) AND user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) <= 2); 
SELECT u.last_name, u.user_id FROM Users u WHERE u.user_id IN ( SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) <= 2 ) AND u.user_id IN ( SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) >= 2 ) 
SELECT COUNT(*) FROM bike WHERE weight > 780; 
SELECT bike.product_name, bike.weight FROM bike ORDER BY bike.price ASC; 
SELECT heat, name, nation FROM cyclist ORDER BY heat DESC; 
SELECT MAX(weight) AS max_weight, MIN(weight) AS min_weight FROM bike; 
SELECT AVG(bike.price) FROM bike WHERE bike.material = 'Carbon CC'; 
SELECT cyclist.name, cyclist.result FROM cyclist WHERE cyclist.nation!= 'Russia' ORDER BY cyclist.result DESC; 
SELECT DISTINCT bike.id, bike.product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id WHERE cyclists_own_bikes.purchase_year > 2015; 
SELECT `bike`.`id`, `bike`.`product_name` FROM `bike` WHERE `bike`.`id` IN (SELECT `cyclists_own_bikes`.`bike_id` FROM `cyclists_own_bikes` WHERE `cyclists_own_bikes`.`cyclist_id` IN (SELECT `cyclist`.`id` FROM `cyclist` WHERE `cyclist`.`heat` >= 4))
SELECT cyclist.id, cyclist.name FROM cyclist JOIN cyclists_own_bikes ON cyclist.id = cyclists_own_bikes.cyclist_id WHERE cyclists_own_bikes.cyclist_id = (SELECT cyclist.id FROM cyclist JOIN cyclists_own_bikes ON cyclist.id = cyclists_own_bikes.cyclist_id GROUP BY cyclist.id ORDER BY COUNT(cyclists_own_bikes.cyclist_id) DESC LIMIT 1); 
SELECT DISTINCT product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE nation = 'Russia' OR nation = 'Great Britain'
SELECT COUNT(DISTINCT heat) FROM cyclist; 
SELECT COUNT(*) FROM `cyclist` WHERE `cyclist`.`id` NOT IN (SELECT `cyclist_id` FROM `cyclists_own_bikes` WHERE `cyclists_own_bikes`.`purchase_year` > 2015); 
SELECT DISTINCT bike.product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE cyclist.result > '4:21.558' AND bike.material = 'racing'; 
SELECT bike.product_name, bike.price FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE cyclist.name = 'Bradley Wiggins' AND cyclist.name = 'Antonio Tauler'
SELECT cyclist.name, cyclist.nation, cyclist.result FROM cyclist LEFT JOIN cyclists_own_bikes ON cyclist.id = cyclists_own_bikes.cyclist_id WHERE cyclists_own_bikes.bike_id NOT IN (SELECT bike.id FROM bike WHERE bike.material = 'racing')
SELECT product_name FROM bike WHERE material LIKE '%fiber%'; 
SELECT cyclist_id, COUNT(*) FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY cyclist_id ASC; 
SELECT g.Flavor, MAX(g.Price) FROM goods g WHERE g.Food = 'cake' GROUP BY g.Flavor; 
SELECT goods.Id, goods.Flavor FROM goods, items, receipts, customers WHERE goods.Id = items.Item AND receipts.ReceiptNumber = items.Receipt AND receipts.CustomerId = customers.Id AND goods.Price = (SELECT MAX(goods.Price) FROM goods); 
SELECT goods.Flavor, goods.Price FROM goods, items, receipts, customers WHERE goods.Id = items.Item AND receipts.ReceiptNumber = items.Receipt AND receipts.CustomerId = customers.Id AND customers.LastName = 'Smith' AND customers.FirstName = 'John' AND goods.Food = 'cookie' AND goods.Price = (SELECT MIN(goods.Price) FROM goods, items, receipts, customers WHERE goods.Id = items.Item AND receipts.ReceiptNumber = items.Receipt AND receipts.CustomerId = customers.Id AND customers.LastName = 'Smith' AND customers.FirstName = 'John' AND goods.Food = 'cookie') ORDER BY goods.Price ASC LIMIT 1; 
 SELECT goods.Id, goods.Flavor FROM goods WHERE goods.Food = 'cookie' AND goods.Price = (SELECT MIN(goods.Price) FROM goods WHERE goods.Food = 'cookie');
SELECT goods.Id FROM goods WHERE goods.Flavor = 'apple'; 
SELECT Id FROM goods WHERE Flavor = 'apple'; 
SELECT goods.Id FROM goods WHERE goods.Price < 3.0; 
SELECT goods.Id FROM goods WHERE goods.Price < 3; 
SELECT DISTINCT customers.Id FROM customers, items, goods WHERE customers.Id = receipts.CustomerId AND receipts.ReceiptNumber = items.Receipt AND items.Item = goods.Id AND goods.Flavor = 'lemon'
SELECT DISTINCT customers.Id FROM customers, items, goods WHERE customers.Id = receipts.CustomerId AND receipts.ReceiptNumber = items.Receipt AND items.Item = goods.Id AND goods.Flavor = 'lemon' AND goods.Food = 'cake'; 
SELECT 	customers.LastName, 	customers.FirstName, 	goods.Food, 	COUNT(receipts.ReceiptNumber) AS "Number of receipts" FROM 	customers 	JOIN 	receipts 	ON 		customers.Id = receipts.CustomerId 	JOIN 	items 	ON 		receipts.ReceiptNumber = items.Receipt 	JOIN 	goods 	ON 		items.Item = goods.Id GROUP BY 	customers.LastName, 	customers.FirstName, 	goods.Food ORDER BY 	customers.LastName, 	customers.FirstName, 	goods.Food 
SELECT customers.LastName, goods.Food, COUNT(*) AS Count FROM customers JOIN receipts ON customers.Id = receipts.CustomerId JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id GROUP BY customers.LastName, goods.Food ORDER BY customers.LastName, goods.Food 
SELECT customers.Id FROM customers JOIN receipts ON customers.Id = receipts.CustomerId JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'bakery' AND items.Ordinal >= 15 GROUP BY customers.Id HAVING COUNT(*) >= 15 
SELECT DISTINCT customers.Id FROM customers JOIN receipts ON customers.Id = receipts.CustomerId WHERE receipts.ReceiptNumber >= 15; 
SELECT LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE Date IN (SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE
SELECT LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts
 SELECT COUNT(DISTINCT Item) FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor IN ('chocolate', 'vanilla','strawberry', 'lemon') AND Food IN ('cake', 'pie', 'tart') AND Price IN (5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175))
SELECT COUNT(DISTINCT Item) FROM items WHERE Item LIKE 'cake%'; 
SELECT Flavor FROM goods WHERE Item = 'Croissant'
SELECT Flavor FROM goods WHERE Item = 'croissant'; 
SELECT DISTINCT Item FROM items WHERE Receipt IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId = 15); 
SELECT DISTINCT Item FROM items WHERE Receipt IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId = 15); 
SELECT 	food, 	AVG(price), 	MAX(price), 	MIN(price) FROM 	items JOIN goods ON items.item = goods.id GROUP BY food ORDER BY food 
SELECT     food,     AVG(price),     MIN(price),     MAX(price) FROM     goods GROUP BY     food; 
SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT Receipt
SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber
SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE LastName = 'LOGAN') AND EXISTS (SELECT * FROM items WHERE Receipt = ReceiptNumber AND Item = 'Croissant'); 
SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE LastName = 'Logan') AND Item IN (SELECT Id FROM goods WHERE Flavor = 'croissant'); 
SELECT ReceiptNumber, Date FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE
SELECT ReceiptNumber, Date FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT Receipt
SELECT Item, COUNT(*) AS Count FROM items GROUP BY Item ORDER BY Count ASC LIMIT 1; 
SELECT Item, COUNT(*) AS Count FROM items GROUP BY Item ORDER BY Count ASC LIMIT 1; 
SELECT 	"Food", 	COUNT("Item") FROM 	"items" GROUP BY 	"Food" ORDER BY 	"Food" 
SELECT     goods.Food,     COUNT(*) AS "Count" FROM     goods GROUP BY     goods.Food ORDER BY     Count DESC; 
SELECT     food,     AVG(price) AS avg_price FROM     items JOIN     goods ON items.item = goods.id GROUP BY     food; 
SELECT     food,     AVG(price) AS avg_price FROM     items JOIN     goods ON items.item = goods.id GROUP BY     food; 
SELECT goods.Id FROM goods WHERE goods.Flavor = 'Apricot' AND goods.Price < 5.0; 
SELECT goods.Id FROM goods WHERE goods.Flavor = 'Apricot' AND goods.Price < 5.0; 
SELECT Flavor FROM goods WHERE Price > 10.0; 
SELECT Flavor FROM goods WHERE Price > 10 AND Food = 'cake'; 
SELECT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods); 
SELECT DISTINCT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods); 
SELECT DISTINCT goods.Id FROM goods WHERE goods.Price < (SELECT goods.Price FROM goods WHERE goods.Flavor = 'Tart'); 
SELECT DISTINCT goods.Id FROM goods WHERE goods.Price < (SELECT goods.Price FROM goods WHERE goods.Flavor = 'Tart'); 
SELECT DISTINCT ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 13; 
SELECT DISTINCT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN
SELECT receipts.Date FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Price > 15 AND receipts.CustomerId = customers.Id AND customers.LastName = 'Smith' AND customers.FirstName = 'John'; 
SELECT receipts.Date FROM receipts, items, goods WHERE receipts.ReceiptNumber = items.Receipt AND items.Item = goods.Id AND goods.Price > 15 AND receipts.CustomerId = customers.Id AND customers.LastName = 'Smith' AND customers.FirstName = 'John'; 
SELECT Id FROM goods WHERE Id LIKE "%APP%"; 
SELECT goods.Id FROM goods WHERE goods.Id LIKE "%APP%"; 
SELECT Price FROM goods WHERE Id = '70'; 
SELECT Id, Price FROM goods WHERE Id LIKE "%70%"; 
SELECT LastName FROM customers ORDER BY LastName ASC; 
SELECT LastName FROM customers ORDER BY LastName ASC; 
SELECT Item FROM items ORDER BY ReceiptNumber, Ordinal; 
SELECT DISTINCT Item FROM items ORDER BY Item; 
SELECT ReceiptNumber FROM receipts WHERE CustomerId = 12 OR EXISTS (SELECT * FROM items WHERE Receipt = ReceiptNumber AND Item = 'apple flavor pie'); 
SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'apple' AND Food = 'pie')) OR CustomerId = 12; 
SELECT ReceiptNumber, Date FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts ORDER BY Date DESC LIMIT 1); 
SELECT ReceiptNumber, Date FROM receipts ORDER BY Date DESC LIMIT 1; 
SELECT ReceiptNumber, Date, CustomerId, Item, Price FROM receipts LEFT JOIN items ON receipts.ReceiptNumber = items.Receipt LEFT JOIN goods ON items.Item = goods.Id WHERE Date = (SELECT MIN(Date) FROM receipts) OR Price > 10 ORDER BY ReceiptNumber, Ordinal; 
SELECT ReceiptNumber FROM receipts WHERE Date IN (SELECT MIN(Date) FROM receipts) OR Price > 10; 
SELECT goods.Id FROM goods WHERE goods.Price BETWEEN 3 AND 7 AND goods.Food IN ('Cookie', 'Cake'); 
SELECT goods.Id FROM goods WHERE goods.Price BETWEEN 3 AND 7 AND goods.Food IN ('Cookies', 'Cakes'); 
SELECT customers.FirstName, customers.LastName FROM customers JOIN receipts ON customers.Id = receipts.CustomerId WHERE receipts.Date = (SELECT MIN(receipts.Date) FROM receipts); 
SELECT LastName, FirstName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts ORDER BY Date ASC LIMIT 1)); 
SELECT AVG(g.Price) FROM goods g WHERE g.Flavor IN ('blackberry', 'blueberry'); 
SELECT AVG(g.Price) FROM goods g WHERE g.Flavor IN ('blackberry', 'blueberry'); 
SELECT MIN(g.Price) FROM goods g WHERE g.Flavor = 'cheese'; 
SELECT goods.Id, goods.Price FROM goods, items, receipts, customers WHERE goods.Id = items.Item AND receipts.ReceiptNumber = items.Receipt AND receipts.CustomerId = customers.Id AND goods.Flavor = 'cheese' AND goods.Price = (SELECT MIN(goods.Price) FROM goods WHERE goods.Flavor = 'cheese'); 
SELECT 	Flavor, 	MAX(Price) AS HighestPrice, 	MIN(Price) AS LowestPrice, 	AVG(Price) AS AveragePrice FROM goods GROUP BY Flavor ORDER BY Flavor; 
SELECT 	Flavor, 	MAX(Price), 	MIN(Price), 	AVG(Price) FROM 	goods GROUP BY 	Flavor ORDER BY 	Flavor 
SELECT 	"Food", 	MIN("Price"), 	MAX("Price") FROM 	"goods" GROUP BY 	"Food" ORDER BY 	"Food" 
SELECT MIN(Price), MAX(Price) FROM goods WHERE Food IS NOT NULL ORDER BY Food; 
SELECT Date, COUNT(*) FROM receipts GROUP BY Date ORDER BY COUNT(*) DESC LIMIT 3; 
SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(*) DESC LIMIT 3; 
SELECT LastName, FirstName, COUNT(*) AS "TimesShopped" FROM customers JOIN receipts ON customers.Id = receipts.CustomerId GROUP BY customers.Id ORDER BY TimesShopped DESC LIMIT 1; 
SELECT customers.Id, COUNT(receipts.ReceiptNumber) AS num_purchases FROM customers JOIN receipts ON customers.Id = receipts.CustomerId GROUP BY customers.Id ORDER BY num_purchases DESC LIMIT 1; 
SELECT Date, COUNT(DISTINCT CustomerId) AS "DistinctCustomers" FROM receipts GROUP BY Date ORDER BY Date ASC; 
SELECT     receipts.Date,     COUNT(DISTINCT receipts.ReceiptNumber) AS "Customers" FROM     receipts GROUP BY     receipts.Date ORDER BY     receipts.Date ASC; 
SELECT customers.FirstName, customers.LastName FROM customers JOIN items ON customers.Id = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Flavor = 'apple' AND goods.Food = 'Tart' ORDER BY customers.LastName ASC, customers.FirstName ASC; 
SELECT LastName || ','|| FirstName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'apple' AND Food = 'Tart'))) 
SELECT goods.Id FROM goods WHERE goods.Flavor = 'Cookies' AND goods.Price < (SELECT goods.Price FROM goods WHERE goods.Flavor = 'Croissant'); 
SELECT Id FROM goods WHERE Flavor = 'cookie' AND Price < (SELECT Price FROM goods WHERE Flavor = 'croissant'); 
SELECT Id FROM goods WHERE Flavor = 'Cake' AND Price >= (SELECT AVG(Price) FROM goods WHERE Flavor = 'Tart'); 
SELECT Id FROM goods WHERE Flavor = 'Tart' AND Price >= (SELECT AVG(Price) FROM goods WHERE Flavor = 'Tart'); 
SELECT goods.Id FROM goods WHERE goods.Price > (SELECT AVG(goods.Price) FROM goods); 
SELECT Item FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > (SELECT AVG(Price) FROM goods)); 
SELECT goods.Id, goods.Flavor, goods.Food FROM goods, items, receipts WHERE goods.Id = items.Item AND receipts.ReceiptNumber = items.Receipt AND receipts.Date = '2019-01-01' ORDER BY goods.Price DESC; 
SELECT goods.Id, goods.Flavor, goods.Food FROM goods ORDER BY goods.Price DESC; 
SELECT customers.Id, goods.Flavor FROM customers, goods, items, receipts WHERE customers.Id = receipts.CustomerId AND goods.Id = items.Item AND items.Receipt = receipts.ReceiptNumber AND goods.Food = 'Cake' ORDER BY goods.Flavor; 
SELECT goods.Id, goods.Flavor FROM goods, items WHERE goods.Id = items.Item AND items.Item = 'cake' ORDER BY goods.Flavor; 
SELECT Item FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'chocolate') AND Receipt IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts GROUP BY ReceiptNumber HAVING COUNT(*) < 10)); 
SELECT Item FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'chocolate') GROUP BY Item HAVING COUNT(*) <= 10; 
SELECT DISTINCT g.Flavor FROM goods g WHERE g.Flavor IN ( 	SELECT g2.Flavor 	FROM goods g2 	WHERE g2.Food = 'Cake' ) AND g.Flavor NOT IN ( 	SELECT g3.Flavor 	FROM goods g3 	WHERE g3.Food = 'Tart' ) 
SELECT Flavor FROM goods WHERE Id NOT IN (SELECT Item FROM items WHERE Receipt IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE LastName = 'Tart' AND FirstName = 'Cakes'))) 
SELECT Item, COUNT(*) AS Count FROM items GROUP BY Item ORDER BY Count DESC LIMIT 3; 
SELECT Item, COUNT(*) AS Count FROM items GROUP BY Item ORDER BY Count DESC LIMIT 3 
SELECT customers.Id FROM customers JOIN receipts ON customers.Id = receipts.CustomerId JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Price > 150 GROUP BY customers.Id HAVING SUM(goods.Price) > 150 
SELECT customers.Id FROM customers JOIN receipts ON customers.Id = receipts.CustomerId JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Price * items.Ordinal > 150 GROUP BY customers.Id HAVING SUM(goods.Price * items.Ordinal) > 150 
SELECT customers.Id FROM customers JOIN ( 	SELECT customers.Id, goods.Id, AVG(goods.Price) AS avg_price 	FROM customers 	JOIN items ON customers.Id = items.Receipt 	JOIN goods ON items.Item = goods.Id 	GROUP BY customers.Id, goods.Id ) AS avg_prices ON customers.Id = avg_prices.Id WHERE avg_prices.avg_price > 5; 
SELECT customers.Id FROM customers JOIN ( 	SELECT receipts.ReceiptNumber, receipts.CustomerId, goods.Price, COUNT(*) AS count 	FROM receipts 	JOIN items ON receipts.ReceiptNumber = items.Receipt 	JOIN goods ON items.Item = goods.Id 	GROUP BY receipts.ReceiptNumber, receipts.CustomerId, goods.Price 	HAVING COUNT(*) > 5 ) AS avg ON customers.Id = avg.CustomerId 
SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (
SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM
SELECT COUNT(DISTINCT Driver_ID) FROM driver; 
SELECT COUNT(Driver_ID) FROM driver; 
SELECT     make,     COUNT(DISTINCT driver_id) AS num_drivers FROM     driver WHERE     points > 150 GROUP BY     make; 
SELECT Make, COUNT(Driver_ID) FROM driver WHERE Points > 150 GROUP BY Make; 
SELECT     make,     AVG(age) AS avg_age FROM     driver GROUP BY     make; 
SELECT     AVG(`driver`.`Age`),     `driver`.`Make` FROM     `driver` GROUP BY     `driver`.`Make`; 
SELECT AVG(Laps) FROM driver WHERE Age < 20; 
SELECT AVG(laps) FROM driver WHERE Age < 20; 
SELECT Team_Manager, Team_Sponsor FROM team ORDER BY Team_Car_Owner; 
SELECT team.team, team.manager, team.sponsor, team.car_owner FROM team ORDER BY team.car_owner; 
SELECT DISTINCT Make FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(DISTINCT Driver_ID) > 1); 
SELECT DISTINCT Make FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(DISTINCT Driver_ID) > 1); 
SELECT DISTINCT `team`.`Make` FROM `team` WHERE `team`.`Car_Owner` = 'Buddy Arrington'; 
SELECT Make FROM team WHERE Car_Owner = 'Buddy Arrington'; 
SELECT MAX(Points), MIN(Points) FROM driver; 
SELECT MAX(Driver.Points) AS Highest_Points, MIN(Driver.Points) AS Lowest_Points FROM driver; 
SELECT COUNT(*) FROM driver WHERE Points < 150; 
SELECT COUNT(*) FROM driver WHERE Points < 150; 
SELECT Driver FROM driver ORDER BY Age ASC; 
SELECT Driver FROM driver ORDER BY Age ASC; 
SELECT Driver FROM driver ORDER BY Points DESC; 
SELECT Driver FROM driver ORDER BY Points DESC; 
SELECT driver.Driver, country.Country FROM driver, country WHERE driver.Country = country.Country_Id 
SELECT driver.Driver, country.Country FROM driver, country WHERE driver.Country = country.Country_Id; 
SELECT MAX(Driver.Points) FROM driver WHERE driver.Country = (SELECT Country_Id FROM country WHERE country.Capital = "Dublin") 
SELECT MAX(Driver.Points) FROM driver WHERE driver.Country = (SELECT Country_Id FROM country WHERE country.Capital = "Dublin"); 
SELECT AVG(Driver.Age) FROM driver, country WHERE driver.Country = country.Country_Id AND country.Official_native_language = "English"; 
SELECT AVG(Driver.Age) FROM driver, country WHERE driver.Country = country.Country_Id AND country.Official_native_language = 'English'; 
SELECT DISTINCT country.Country FROM country, driver WHERE country.Country_Id = driver.Country AND driver.Points > 150; 
SELECT DISTINCT country.Country FROM country, driver WHERE country.Country_id = driver.Country AND driver.Points > 150; 
SELECT country.Capital FROM country, driver WHERE country.Country_Id = driver.Country AND driver.Points = (SELECT MAX(driver.Points) FROM driver); 
SELECT Capital FROM country WHERE Country_Id = (SELECT Country FROM driver WHERE Driver_ID = (SELECT Driver_ID FROM team_driver WHERE Team_ID = (SELECT Team_ID FROM team WHERE Team = "Ferrari")) AND Driver = "Michael Schumacher"); 
SELECT "Make", COUNT("Driver_ID") FROM `driver` GROUP BY "Make" ORDER BY COUNT("Driver_ID") DESC; 
SELECT "Make", COUNT("Make") FROM `driver` GROUP BY "Make"; 
SELECT make FROM driver GROUP BY make ORDER BY COUNT(make) DESC LIMIT 1; 
SELECT make FROM driver GROUP BY make ORDER BY COUNT(make) DESC LIMIT 1; 
SELECT DISTINCT     driver.Make FROM     driver WHERE     driver.Make IN (         SELECT             driver.Make         FROM             driver         GROUP BY             driver.Make         HAVING             COUNT(driver.Make) >= 3     ) ORDER BY     driver.Make ASC; 
SELECT DISTINCT     `team`.`Make` FROM     `team`         INNER JOIN     `team_driver` ON `team`.`Team_ID` = `team_driver`.`Team_ID`         INNER JOIN     `driver` ON `team_driver`.`Driver_ID` = `driver`.`Driver_ID` WHERE     `driver`.`Car_#` > 3 ORDER BY `team`.`Make` ASC; 
SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver); 
SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver); 
SELECT Country FROM driver WHERE Make = 'Dodge' INTERSECT SELECT Country FROM driver WHERE Make = 'Chevrolet'
SELECT DISTINCT country.Country FROM country JOIN driver ON country.Country_Id = driver.Country WHERE driver.Make IN ("Dodge", "Chevrolet"); 
SELECT SUM(`Points`), AVG(`Points`) FROM `driver`; 
SELECT SUM(Driver.Points) AS TotalPoints, AVG(Driver.Points) AS AveragePoints FROM driver; 
SELECT DISTINCT Country FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM team_driver); 
SELECT DISTINCT country.Country FROM country LEFT JOIN driver ON country.Country_Id = driver.Country WHERE driver.Driver_ID IS NULL; 
SELECT team.Manager, team.Sponsor FROM team INNER JOIN team_driver ON team.Team_ID = team_driver.Team_ID INNER JOIN driver ON team_driver.Driver_ID = driver.Driver_ID WHERE team_driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver INNER JOIN team_driver ON driver.Driver_ID = team_driver.Driver_ID GROUP BY driver.Driver_ID HAVING COUNT(*) = (SELECT COUNT(*) FROM team_driver)) ORDER BY team.Team_ID DESC LIMIT 1; 
SELECT team.Manager, team.Sponsor FROM team INNER JOIN team_driver ON team.Team_ID = team_driver.Team_ID INNER JOIN driver ON team_driver.Driver_ID = driver.Driver_ID WHERE team_driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver INNER JOIN team_driver ON driver.Driver_ID = team_driver.Driver_ID GROUP BY driver.Driver_ID HAVING COUNT(*) = (SELECT COUNT(*) FROM team_driver)) ORDER BY team.Team_ID DESC LIMIT 1; 
SELECT team.Manager, team.Car_Owner FROM team WHERE team.Team_ID IN ( SELECT team.Team_ID FROM team WHERE team.Team_ID IN ( SELECT team.Team_ID FROM team WHERE team.Team_ID IN ( SELECT team.Team_ID FROM team WHERE team.Team_ID IN ( SELECT team.Team_ID FROM team WHERE team.Team_ID IN ( SELECT team.Team_ID FROM team WHERE team.Team_ID IN ( SELECT team.Team_ID FROM team WHERE team.Team_ID IN ( SELECT team.Team_ID FROM team WHERE team.Team_ID IN ( SELECT team.Team_ID FROM team WHERE team.Team_ID IN ( SELECT team.Team_ID FROM team WHERE team.Team_ID IN ( SELECT team.Team_ID FROM team WHERE team.Team_ID IN ( SELECT team.Team_ID FROM team WHERE team.Team_ID IN ( SELECT team.Team_ID 
SELECT team.Manager, team.Car_Owner FROM team INNER JOIN team_driver ON team.Team_ID = team_driver.Team_ID WHERE team_driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver INNER JOIN team_driver ON driver.Driver_ID = team_driver.Driver_ID GROUP BY driver.Driver_ID HAVING COUNT(driver.Driver_ID) > 1); 
SELECT COUNT(*) FROM institution; 
SELECT COUNT(*) FROM institution; 
SELECT Name FROM institution ORDER BY Name ASC; 
SELECT Name FROM institution ORDER BY Name ASC; 
SELECT Name FROM institution ORDER BY Founded ASC; 
SELECT Name FROM institution ORDER BY Founded DESC; 
SELECT City, Province FROM institution 
SELECT City, Province FROM institution WHERE Province IS NOT NULL ORDER BY City, Province; 
SELECT MAX(Enrollment), MIN(Enrollment) FROM institution; 
SELECT MAX(Enrollment) AS MaxEnrollment, MIN(Enrollment) AS MinEnrollment FROM institution; 
SELECT DISTINCT Affiliation FROM institution WHERE City!= 'Vancouver'; 
SELECT DISTINCT Affiliation FROM institution WHERE City!= 'Vancouver'; 
SELECT Stadium FROM institution ORDER BY Capacity DESC; 
SELECT Stadium FROM institution ORDER BY Capacity DESC; 
SELECT Stadium FROM institution WHERE Enrollment = (SELECT MAX(Enrollment) FROM institution); 
SELECT Stadium FROM institution WHERE Enrollment = (SELECT MAX(Enrollment) FROM institution); 
SELECT Name, Nickname FROM institution, Championship WHERE institution.Institution_ID = Championship.Institution_ID; 
SELECT institution.Name, Championship.Nickname FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID; 
SELECT Nickname FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution WHERE Enrollment = (SELECT MIN(Enrollment) FROM institution)); 
SELECT Nickname FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution WHERE Enrollment = (SELECT MIN(Enrollment) FROM institution)); 
SELECT Name FROM institution ORDER BY Number_of_Championships DESC; 
SELECT Name FROM institution ORDER BY Number_of_Championships DESC; 
SELECT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship); 
SELECT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship WHERE Number_of_Championships > 0); 
SELECT SUM(Number_of_Championships) FROM Championship WHERE Affiliation = 'Public'; 
SELECT SUM(Number_of_Championships) FROM Championship WHERE Affiliation = 'Public'; 
SELECT DISTINCT Affiliation, COUNT(Institution_ID) AS "Number of Institutions" FROM institution GROUP BY Affiliation ORDER BY "Number of Institutions" DESC; 
SELECT Institution_ID, Affiliation, COUNT(*) AS "Number_of_Institutions" FROM institution GROUP BY Institution_ID, Affiliation ORDER BY Institution_ID ASC; 
SELECT affiliation, COUNT(*) AS count FROM institution GROUP BY affiliation ORDER BY count DESC LIMIT 1; 
SELECT affiliation, COUNT(*) AS count FROM institution GROUP BY affiliation ORDER BY count DESC LIMIT 1; 
SELECT DISTINCT     Institution_ID FROM     institution WHERE     Founded IN (         SELECT             Founded         FROM             institution         GROUP BY             Founded         HAVING             COUNT(*) > 1     ) ORDER BY     Institution_ID; 
SELECT DISTINCT Founded FROM institution WHERE Founded IN (SELECT Founded                  FROM institution                  GROUP BY Founded                  HAVING COUNT(*) > 1) ORDER BY Founded ASC; 
SELECT Nickname FROM Championship ORDER BY Capacity DESC; 
SELECT Nickname FROM Championship ORDER BY Capacity DESC; 
SELECT SUM(Enrollment) FROM institution WHERE City IN ('Vancouver', 'Calgary'); 
SELECT Enrollment FROM institution WHERE City = 'Vancouver' OR City = 'Calgary'; 
SELECT DISTINCT Province FROM institution WHERE Founded < 1920 OR Founded > 1950; 
SELECT DISTINCT Province FROM institution WHERE Founded < 1920 AND EXISTS (SELECT * FROM institution WHERE Founded > 1950 AND Province = institution.Province); 
SELECT DISTINCT Province FROM institution; 
SELECT DISTINCT Province FROM institution; 
SELECT * FROM Warehouses; 
SELECT * FROM Warehouses; 
SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York'); 
SELECT DISTINCT Contents FROM Boxes WHERE Location = 'New York'
SELECT Contents FROM Boxes WHERE Value > 150; 
SELECT Contents FROM Boxes WHERE Value > 150; 
SELECT Warehouses.Code, AVG(Boxes.Value) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code; 
SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse; 
SELECT AVG(Value), SUM(Value) FROM Boxes; 
SELECT AVG(Value), SUM(Value) FROM Boxes; 
SELECT AVG(Capacity), SUM(Capacity) FROM Warehouses; 
SELECT AVG(Capacity), SUM(Capacity) FROM Warehouses; 
SELECT Contents, AVG(Value), MAX(Value) FROM Boxes GROUP BY Contents; 
SELECT     Contents,     AVG(Value) AS AverageValue,     MAX(Value) AS MaxValue FROM     Boxes GROUP BY     Contents ORDER BY     AverageValue DESC 
SELECT Contents FROM Boxes WHERE Code IN (SELECT Code FROM Warehouses WHERE Capacity = (SELECT MAX(Capacity) FROM Warehouses)); 
SELECT Contents, MAX(Value) FROM Boxes GROUP BY Contents; 
SELECT AVG(Value) FROM Boxes; 
SELECT AVG(Value) FROM Boxes; 
SELECT DISTINCT Contents FROM Boxes; 
SELECT DISTINCT Contents FROM Boxes; 
SELECT COUNT(DISTINCT Contents) FROM Boxes; 
SELECT COUNT(DISTINCT Contents) FROM Boxes; 
SELECT DISTINCT Location FROM Warehouses; 
SELECT DISTINCT Location FROM Warehouses; 
SELECT Boxes.Code FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York'); 
SELECT Boxes.Code FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York'); 
SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York')); 
SELECT SUM(Value) FROM Boxes WHERE Location IN ('Chicago', 'New York'); 
SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York')); 
SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York')); 
SELECT DISTINCT Contents FROM Boxes WHERE Code NOT IN (SELECT Code FROM Warehouses WHERE Location = 'New York'); 
SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York') AND Contents NOT IN (SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York')); Explanation: The query first finds the warehouses in New York by using the WHERE clause with the Location column. Then, it selects the contents of the boxes stored in those warehouses by using the WHERE clause with the Warehouse column. Finally, it selects the contents that are not in the warehouses in New York by using the NOT IN clause with the Contents column. The DISTINCT keyword is used to remove duplicate contents from the result set.
SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' AND Code NOT IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')); 
SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' AND Code NOT IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')); 
SELECT Code FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents IN ('Rocks', 'Scissors')); 
SELECT DISTINCT Warehouse FROM Boxes WHERE Contents IN ('Rocks', 'Scissors'); 
SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents IN ('Rocks', 'Scissors')); 
SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents IN ('Rocks', 'Scissors')); 
SELECT Boxes.Code, Boxes.Contents FROM Boxes ORDER BY Boxes.Value; 
SELECT Boxes.Code, Boxes.Contents FROM Boxes ORDER BY Boxes.Value; 
SELECT Boxes.Code, Boxes.Contents FROM Boxes WHERE Boxes.Value = (SELECT MIN(Boxes.Value) FROM Boxes); 
SELECT Boxes.Code, Boxes.Contents FROM Boxes WHERE Boxes.Value = (SELECT MIN(Boxes.Value) FROM Boxes); 
SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes); 
SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes); 
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents; 
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents ASC; 
SELECT Boxes.Code FROM Boxes WHERE Boxes.Value > (SELECT Value FROM Boxes WHERE Contents = 'Rocks') 
SELECT Boxes.Code FROM Boxes WHERE Boxes.Value > (SELECT Value FROM Boxes WHERE Contents = 'Rocks') 
SELECT Boxes.Code, Boxes.Contents FROM Boxes WHERE Boxes.Value > (     SELECT Boxes.Value     FROM Boxes     WHERE Boxes.Contents = 'Scissors' ) 
SELECT Boxes.Code, Boxes.Contents FROM Boxes WHERE Boxes.Value > (SELECT MAX(Boxes.Value)                     FROM Boxes                     WHERE Boxes.Contents = 'Scissors') 
SELECT SUM(Value) FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses ORDER BY Capacity DESC LIMIT 1); 
SELECT SUM(Value) FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses ORDER BY Capacity DESC LIMIT 1); 
SELECT Warehouse.Code, AVG(Boxes.Value) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Value > 150 GROUP BY Warehouse.Code HAVING AVG(Boxes.Value) > 150 ORDER BY AVG(Boxes.Value) DESC; 
SELECT     Warehouse,     AVG(Value) AS AverageValue FROM     Boxes GROUP BY     Warehouse HAVING     AVG(Value) > 150 ORDER BY     AverageValue DESC; 
SELECT Contents, SUM(Value), COUNT(*) FROM Boxes GROUP BY Contents; 
SELECT Contents, SUM(Value), COUNT(*) FROM Boxes GROUP BY Contents; 
SELECT     Location,     SUM(Capacity) AS TotalCapacity,     AVG(Capacity) AS AverageCapacity,     MAX(Capacity) AS MaxCapacity FROM     Warehouses GROUP BY     Location; 
SELECT Location, SUM(Capacity) AS TotalCapacity, AVG(Capacity) AS AverageCapacity, MAX(Capacity) AS MaxCapacity FROM Warehouses GROUP BY Location; 
SELECT SUM(Capacity) FROM Warehouses; 
SELECT SUM(Capacity) FROM Warehouses; 
SELECT     W.Location,     MAX(B.Value) AS MaxValue FROM     Warehouses W     INNER JOIN Boxes B ON W.Code = B.Warehouse GROUP BY     W.Location ORDER BY     MaxValue DESC 
SELECT Location, MAX(Value) FROM Boxes GROUP BY Location; 
SELECT Warehouses.Code, COUNT(Boxes.Code) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code; 
SELECT COUNT(*) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses); 
SELECT COUNT(DISTINCT Location) FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks'); 
SELECT COUNT(DISTINCT Boxes.Warehouse) FROM Boxes WHERE Boxes.Contents = 'Rocks'; 
SELECT Boxes.Code, Warehouses.Location FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code; 
SELECT Boxes.Code, Warehouses.Location FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code; 
SELECT Code FROM Boxes WHERE Contents = 'Chicago'
SELECT Boxes.Code FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'Chicago'; 
SELECT Warehouse, COUNT(*) FROM Boxes GROUP BY Warehouse; 
SELECT Warehouse, COUNT(*) FROM Boxes GROUP BY Warehouse; 
SELECT Warehouse, COUNT(DISTINCT Contents) AS DistinctContents FROM Boxes GROUP BY Warehouse; 
SELECT Warehouse, COUNT(DISTINCT Contents) FROM Boxes GROUP BY Warehouse; 
SELECT Code FROM Warehouses WHERE Capacity > (SELECT SUM(Value) FROM Boxes WHERE Warehouse = Warehouses.Code); 
SELECT Code FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes GROUP BY Warehouse HAVING COUNT(*) > Capacity); 
SELECT SUM(Value) FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago'); 
SELECT SUM(Value) FROM Boxes WHERE Contents NOT LIKE '%Chicago%'; 
SELECT University_Name, City, State FROM university ORDER BY University_Name ASC; 
SELECT University_Name, City, State FROM university ORDER BY University_Name ASC; 
SELECT COUNT(*) FROM university WHERE State IN ('Illinois', 'Ohio'); 
 SELECT COUNT(*) FROM university WHERE State IN ('Illinois', 'Ohio') UNION SELECT COUNT(*) FROM university WHERE State IN ('California', 'New York') UNION SELECT COUNT(*) FROM university WHERE State IN ('Florida', 'Texas');
SELECT MAX(Enrollment), AVG(Enrollment), MIN(Enrollment) FROM university; 
SELECT MAX(Enrollment), AVG(Enrollment), MIN(Enrollment) FROM university; 
SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university); 
SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university); 
SELECT DISTINCT Home_Conference FROM university ORDER BY Home_Conference ASC; 
SELECT DISTINCT Home_Conference FROM university; 
SELECT Home_Conference, COUNT(University_ID) AS num_universities FROM university GROUP BY Home_Conference; 
SELECT COUNT(DISTINCT University_ID) AS "Number of Universities" FROM university WHERE Home_Conference = 'Big Ten Conference'; 
SELECT State, COUNT(University_ID) AS num_universities FROM university GROUP BY State ORDER BY num_universities DESC LIMIT 1; 
SELECT State FROM university GROUP BY State ORDER BY COUNT(University_ID) DESC LIMIT 1; 
SELECT DISTINCT Home_Conference FROM university WHERE Enrollment > 2000 GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000; 
SELECT DISTINCT Home_Conference FROM university WHERE Enrollment > 2000 GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000 ORDER BY Home_Conference ASC; 
SELECT Home_Conference FROM university ORDER BY Enrollment ASC LIMIT 1; 
SELECT Home_Conference FROM university GROUP BY Home_Conference ORDER BY COUNT(Enrollment) ASC LIMIT 1; 
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code; 
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code; 
SELECT m.Major_Name, mr.Rank FROM major m JOIN major_ranking mr ON m.Major_ID = mr.Major_ID WHERE m.Major_Code = 1 ORDER BY mr.Rank; 
SELECT major_ranking.Rank, major.Major_Name FROM major_ranking JOIN major ON major_ranking.Major_ID = major.Major_ID WHERE university.University_Name = 'Augustana College'; 
SELECT University_Name, City, State FROM university WHERE University_ID IN ( SELECT University_ID FROM overall_ranking WHERE Rank = 1 ) AND University_ID IN ( SELECT University_ID FROM major_ranking WHERE Major_ID = ( SELECT Major_ID FROM major WHERE Major_Name = 'Accounting' ) ) 
SELECT University_Name, City, State FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Rank = 1); 
SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID HAVING COUNT(Major_ID) = (SELECT COUNT(Major_ID) FROM major_ranking WHERE Rank = 1)); 
SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Rank = 1 ORDER BY Major_ID DESC LIMIT 1); 
SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1); 
SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1); 
SELECT University_Name FROM university WHERE University_ID IN ( SELECT University_ID FROM major_ranking WHERE Major_ID IN ( SELECT Major_ID FROM major WHERE Major_Name IN ('Accounting', 'Urban Education') ) ) 
SELECT DISTINCT University_Name FROM university WHERE University_ID IN ( SELECT University_ID FROM major_ranking WHERE Major_ID IN ( SELECT Major_ID FROM major WHERE Major_Name IN ('Accounting', 'Urban Education') ) ) 
SELECT University_Name, Reputation_point, Research_point, Citation_point, Total FROM overall_ranking WHERE State = 'Wisconsin' ORDER BY Total DESC; 
SELECT University_Name, Rank FROM overall_ranking, university WHERE University_ID = University_ID AND State = 'Wisconsin' ORDER BY Rank ASC; 
SELECT University_Name FROM university WHERE University_ID = (SELECT University_ID FROM overall_ranking WHERE Reputation_point = (SELECT MAX(Reputation_point) FROM overall_ranking)); 
SELECT University_Name FROM university WHERE University_ID = (SELECT University_ID FROM overall_ranking WHERE Reputation_point + Research_point + Citation_point = (SELECT MAX(Reputation_point + Research_point + Citation_point) FROM overall_ranking)); 
SELECT University_Name FROM university ORDER BY Reputation_point ASC; 
SELECT University_Name FROM university ORDER BY Reputation_point ASC; 
SELECT University_Name FROM university WHERE University_ID IN ( SELECT University_ID FROM major_ranking WHERE Major_ID IN ( SELECT Major_ID FROM major WHERE Major_Name = 'Accounting' ) AND Rank >= 3 ) 
SELECT University_Name FROM university JOIN major_ranking ON university.University_ID = major_ranking.University_ID JOIN major ON major_ranking.Major_ID = major.Major_ID WHERE major.Major_Name = 'Accounting' AND major_ranking.Rank >= 3; 
SELECT SUM(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5); 
SELECT SUM(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5); 
SELECT University_Name, Reputation_point FROM overall_ranking WHERE Rank <= 3 AND Reputation_point > 0 ORDER BY Reputation_point DESC; 
SELECT University_Name, Reputation_point FROM overall_ranking WHERE Rank <= 3 ORDER BY Reputation_point DESC; 
SELECT DISTINCT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(*) > 2; 
SELECT DISTINCT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(*) > 2; 
SELECT Title FROM Movies WHERE Rating IS NULL; 
SELECT Title FROM Movies WHERE Rating IS NULL; 
SELECT Title FROM Movies WHERE Rating = 'G'; 
 SELECT Title FROM Movies WHERE Rating IN ('G', 'PG') AND Rating NOT IN ('G', 'PG') AND Rating NOT IN ('PG-13');
SELECT Title FROM Movies WHERE Code = (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon'); 
SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon'); 
SELECT Movies.Title, MovieTheaters.Name FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie 
SELECT Movies.Title, MovieTheaters.Name FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE Movies.Title IS NOT NULL AND MovieTheaters.Name IS NOT NULL ORDER BY Movies.Title, MovieTheaters.Name; 
 SELECT COUNT(*) FROM Movies
SELECT COUNT(*) FROM Movies WHERE Rating = 'G'; 
SELECT COUNT(Movie) FROM MovieTheaters; 
SELECT COUNT(*) FROM MovieTheaters WHERE Movie IS NOT NULL; 
SELECT COUNT(DISTINCT Movies.Code) FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie; 
SELECT COUNT(DISTINCT Movies.Title) FROM Movies; 
SELECT COUNT(DISTINCT MovieTheaters.Code) FROM MovieTheaters; 
SELECT COUNT(DISTINCT MovieTheaters.Code) FROM MovieTheaters; 
SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%'; 
SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%'; 
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating IN ('G', 'PG')); 
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating IN ('G', 'PG')); 
SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name IN ('Odeon', 'Imperial'))
SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name IN ('Odeon', 'Imperial'))
SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name IN ('Odeon', 'Imperial'))
SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Code IN (SELECT Code FROM MovieTheaters WHERE Name = 'Odeon'), (SELECT Code FROM MovieTheaters WHERE Name = 'Imperial')); 
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon'); 
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon')
SELECT Title FROM Movies ORDER BY Title ASC; 
SELECT Title FROM Movies ORDER BY Title ASC; 
SELECT Title FROM Movies ORDER BY Rating DESC; 
SELECT Title FROM Movies ORDER BY Rating DESC; 
SELECT Name FROM MovieTheaters WHERE Code IN (SELECT Movie FROM Movies GROUP BY Movie ORDER BY COUNT(Movie) DESC LIMIT 1); 
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies GROUP BY Code HAVING COUNT(Code) = (SELECT COUNT(Code) FROM Movies GROUP BY Code ORDER BY COUNT(Code) DESC LIMIT 1)); 
SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters GROUP BY Movie HAVING COUNT(Movie) = (SELECT COUNT(Movie) FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(Movie) DESC LIMIT 1)); 
SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters GROUP BY Movie HAVING COUNT(*) = (SELECT COUNT(*) FROM MovieTheaters GROUP BY Movie HAVING COUNT(*) = (SELECT COUNT(*) FROM MovieTheaters))); 
SELECT Rating, COUNT(*) FROM Movies GROUP BY Rating; 
SELECT Rating, COUNT(*) FROM Movies GROUP BY Rating; 
SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL; 
SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL; 
SELECT Name FROM MovieTheaters WHERE Movie IS NOT NULL; 
SELECT Name FROM MovieTheaters WHERE Code IN (SELECT Code FROM Movies); 
SELECT Name FROM MovieTheaters WHERE Movie IS NULL; 
SELECT Name FROM MovieTheaters WHERE Movie IS NULL; 
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G')
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G'); 
 SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating IN ("R", "PG-13"));
SELECT Title FROM Movies; 
SELECT DISTINCT Rating FROM Movies; 
SELECT DISTINCT Rating FROM Movies; 
SELECT * FROM Movies WHERE Rating IS NULL; 
SELECT * FROM Movies WHERE Rating IS NULL; 
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters); 
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters); 
SELECT   Package.Recipient,   SUM(Package.Weight) AS TotalWeight FROM   Package GROUP BY   Package.Recipient ORDER BY   TotalWeight DESC LIMIT   1; 
SELECT Client.Name FROM Client, Package, Shipment, Employee WHERE Client.AccountNumber = Package.Recipient AND Package.Weight = (SELECT MAX(Package.Weight) FROM Package) AND Package.Shipment = Shipment.ShipmentID AND Shipment.Manager = Employee.EmployeeID AND Employee.Name = 'John Doe'
SELECT SUM(P.Weight) FROM Package P, Client C WHERE P.Sender = C.AccountNumber AND C.Name = 'Leo Wong'; 
SELECT SUM(P.Weight) FROM Package P, Shipment S, Employee E WHERE P.Sender = E.EmployeeID AND E.Name = 'Leo Wong' AND P.Shipment = S.ShipmentID; 
SELECT Position FROM Employee WHERE Name = 'Amy Wong'; 
SELECT Position FROM Employee WHERE Name = 'Amy Wong'; 
SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela'; 
SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela'; 
SELECT AVG(Salary) FROM Employee WHERE Position = 'Intern'
SELECT AVG(Salary) FROM Employee WHERE Position = 'Intern'; 
SELECT Level FROM Has_Clearance WHERE Employee = (SELECT EmployeeID FROM Employee WHERE Name = 'Physician') AND Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Earth'); 
SELECT Level FROM Has_Clearance WHERE Employee = (SELECT EmployeeID FROM Employee WHERE Position = 'Physician') AND Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Earth')
SELECT PackageNumber FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT COUNT(*) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT PackageNumber FROM Package WHERE Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')
SELECT PackageNumber FROM Package WHERE Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT PackageNumber, Contents, Weight, Sender, Recipient FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') OR Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT DISTINCT PackageNumber FROM Package WHERE Sender = 1 OR Recipient = 1; 
SELECT COUNT(*) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Ogden Wernstrom') AND Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT COUNT(*) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Ogden Wernstrom') AND Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'); 
SELECT Contents FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'John Zoidfarb') AND Shipment = (SELECT ShipmentID FROM Shipment WHERE Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'John Zoidfarb')); 
SELECT Contents FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'John Zoidfarb'); 
SELECT PackageNumber, Weight FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name LIKE '%John%') ORDER BY Weight DESC LIMIT 1; 
SELECT PackageNumber, Weight FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name LIKE '%John%') ORDER BY Weight DESC LIMIT 1; 
SELECT PackageNumber, Weight FROM Package WHERE Shipment IN (   SELECT ShipmentID   FROM Shipment   WHERE Manager IN (     SELECT EmployeeID     FROM Employee     WHERE Position = 'Manager'   ) ) ORDER BY Weight ASC LIMIT 3 
SELECT PackageNumber, Weight FROM Package WHERE Weight IN (SELECT MIN(Weight) FROM Package); 
SELECT Client.Name, COUNT(Package.PackageNumber) AS NumberOfPackages FROM Client JOIN Package ON Client.AccountNumber = Package.Sender GROUP BY Client.Name ORDER BY NumberOfPackages DESC LIMIT 1; 
SELECT Client.Name, COUNT(*) FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Client ON Package.Sender = Client.AccountNumber GROUP BY Client.Name ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Client.Name, COUNT(Package.PackageNumber) as num_packages FROM Client JOIN Package ON Client.AccountNumber = Package.Recipient GROUP BY Client.Name ORDER BY num_packages ASC LIMIT 1; 
SELECT COUNT(*) FROM Package WHERE PackageNumber IN (SELECT MIN(PackageNumber) FROM Package GROUP BY Shipment)
SELECT Client.Name FROM Client JOIN Package ON Client.AccountNumber = Package.Sender JOIN Shipment ON Package.Shipment = Shipment.ShipmentID WHERE Package.PackageNumber > 1 GROUP BY Client.Name ORDER BY COUNT(Package.PackageNumber) DESC; 
SELECT Name FROM Client WHERE AccountNumber IN (SELECT Recipient FROM Package GROUP BY Recipient HAVING COUNT(*) > 1); 
SELECT Coordinates FROM Planet WHERE Name = 'Mars'; 
SELECT Coordinates FROM Planet WHERE Name = 'Mars'; 
SELECT Planet.Name, Planet.Coordinates FROM Planet ORDER BY Planet.Name ASC; 
SELECT Name, Coordinates FROM Planet ORDER BY Name ASC; 
SELECT ShipmentID FROM Shipment WHERE Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Phillip J. Fry'); 
SELECT ShipmentID FROM Shipment WHERE Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Phillip J Fry'); 
SELECT Date FROM Shipment; 
SELECT Shipment.Date FROM Shipment; 
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'); 
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'); 
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') AND Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela'); 
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') AND Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela'); 
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') OR Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela'); 
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') AND Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela'); 
SELECT Planet.Name, COUNT(Shipment.ShipmentID) AS TotalShipments FROM Planet JOIN Shipment ON Planet.PlanetID = Shipment.Planet GROUP BY Planet.Name; 
SELECT Planet.Name, COUNT(*) AS ShipmentCount FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID GROUP BY Planet.Name; 
SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Shipment GROUP BY Planet ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT Planet.Name FROM Planet JOIN Shipment ON Planet.PlanetID = Shipment.Planet WHERE Shipment.ShipmentID IN (SELECT ShipmentID FROM Shipment GROUP BY Shipment.Planet HAVING COUNT(*) = (SELECT COUNT(*) FROM Shipment GROUP BY Shipment.Planet ORDER BY COUNT(*) DESC LIMIT 1))
SELECT Employee.Name, COUNT(*) FROM Employee JOIN Shipment ON Employee.EmployeeID = Shipment.Manager GROUP BY Employee.Name ORDER BY COUNT(*) DESC; 
SELECT COUNT(ShipmentID) AS "Number of Shipments", Name AS "Manager Name" FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID GROUP BY Manager Name ORDER BY Number of Shipments DESC; 
SELECT SUM(P.Weight) FROM Package P JOIN Shipment S ON P.Shipment = S.ShipmentID JOIN Planet P2 ON S.Planet = P2.PlanetID WHERE P2.Name = 'Mars' AND S.Date = '2020-01-01' AND P.Contents = 'Gold' AND P.Weight > 1000 AND P.Weight < 2000 AND P.Sender = 1 AND P.Recipient = 2; 
SELECT SUM(P.Weight) FROM Package P JOIN Shipment S ON P.Shipment = S.ShipmentID JOIN Planet P2 ON S.Planet = P2.PlanetID WHERE P2.Name = 'Mars'; 
SELECT P.Name, SUM(P.Weight) FROM Package P JOIN Shipment S ON P.Shipment = S.ShipmentID JOIN Planet P2 ON S.Planet = P2.PlanetID GROUP BY P2.PlanetID ORDER BY P2.PlanetID ASC; 
SELECT Planet.Name, SUM(Package.Weight) FROM Planet JOIN Shipment ON Planet.PlanetID = Shipment.Planet JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet.Name ORDER BY Planet.Name ASC; 
SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Shipment WHERE ShipmentID IN (SELECT ShipmentID FROM Shipment WHERE Weight > 30))
SELECT Planet.Name FROM Planet INNER JOIN Shipment ON Planet.PlanetID = Shipment.Planet INNER JOIN Package ON Shipment.ShipmentID = Package.Shipment INNER JOIN Client ON Package.Recipient = Client.AccountNumber WHERE Package.Weight > 30 GROUP BY Planet.Name HAVING COUNT(*) > 1 ORDER BY Planet.Name ASC; 
SELECT PackageNumber FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8') AND Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan'))
SELECT COUNT(*) FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Manager IN (SELECT EmployeeID FROM Employee WHERE Name = 'Zapp Brannigan') AND Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8'))
SELECT PackageNumber FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8') OR Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan'))
SELECT COUNT(*) FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8') OR Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan'); 
SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30; 
SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30 
SELECT Name FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars')); 
SELECT Name FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars')); 
SELECT Name FROM Employee WHERE EmployeeID IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omega III') AND Level = 3); 
SELECT Name FROM Employee WHERE EmployeeID IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omega III')); 
SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance WHERE Employee IN (SELECT EmployeeID FROM Employee WHERE EmployeeID IN (SELECT DISTINCT Manager FROM Shipment WHERE ShipmentID IN (SELECT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE PlanetID IN (SELECT PlanetID FROM Has_Clearance WHERE Level = 1)))))) 
SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance WHERE Employee IN (SELECT EmployeeID FROM Employee WHERE EmployeeID IN (SELECT Manager FROM Shipment WHERE ShipmentID IN (SELECT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE PlanetID IN (SELECT PlanetID FROM Has_Clearance WHERE Level = 1)))))) 
SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000; 
SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000; 
SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000; 
SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000; 
SELECT COUNT(*) FROM Employee WHERE EmployeeID NOT IN (   SELECT Employee   FROM Has_Clearance   WHERE Planet = (     SELECT PlanetID     FROM Planet     WHERE Name = 'Mars'   ) ); 
SELECT COUNT(*) FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') AND Level = 1); 
SELECT COUNT(*) FROM game; 
SELECT COUNT(*) FROM game; 
SELECT game.Title, game.Developers FROM game ORDER BY game.Units_sold_Millions DESC; 
SELECT game.Title, game.Developers FROM game ORDER BY Units_sold_Millions DESC; 
SELECT AVG(game.Units_sold_Millions) FROM game WHERE game.Developers!= 'Nintendo'; 
SELECT AVG(game.Units_sold_Millions) FROM game WHERE game.Developers!= 'Nintendo'; 
SELECT platform_name, market_district FROM platform; 
SELECT platform_name, market_district FROM platform; 
SELECT platform_name, Platform_ID FROM platform WHERE Download_rank = 1; 
SELECT platform_name, Platform_ID FROM platform WHERE Download_rank = 1; 
SELECT MAX(Rank_of_the_year), MIN(Rank_of_the_year) FROM player; 
SELECT MAX("Rank_of_the_year"), MIN("Rank_of_the_year") FROM "player"; 
SELECT COUNT(*) FROM player WHERE Rank_of_the_year < 3; 
SELECT COUNT(*) FROM player WHERE Rank_of_the_year <= 3; 
SELECT Player_name FROM player ORDER BY Player_name ASC; 
SELECT Player_name FROM player ORDER BY Player_name ASC; 
SELECT player_name, college FROM player ORDER BY rank_of_the_year DESC; 
SELECT player_name, college FROM player ORDER BY Rank_of_the_year DESC; 
SELECT player_name, rank_of_the_year FROM player, game_player, game WHERE game.title = 'Super Mario World' AND game_player.game_id = game.game_id AND game_player.player_id = player.player_id; 
SELECT player_name, rank_of_the_year FROM player WHERE player_id IN (SELECT player_id FROM game_player WHERE game_id IN (SELECT game_id FROM game WHERE title = 'Super Mario World')); Explanation: The solution uses a nested query to find the player_id of the players who have played the game with the title "Super Mario World". The player_id is then used to find the player_name and rank_of_the_year of the players using a second nested query. The final result is a list of player_name and rank_of_the_year for the players who have played the game with the title "Super Mario World".
 SELECT DISTINCT Developers FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE College = "Auburn" AND Rank_of_the_year <= 10) AND Release_Date = "2010");
SELECT DISTINCT Developers FROM game WHERE Game_ID IN ( SELECT Game_ID FROM game_player WHERE Player_ID IN ( SELECT Player_ID FROM player WHERE College = 'Auburn' ) ) 
SELECT AVG(game.Units_sold_Millions) FROM game, game_player, player WHERE game.Platform_ID = 1 AND game.Platform_ID = game_player.Game_ID AND game_player.Player_ID = player.Player_ID AND player.Position = "Guard"; 
SELECT AVG(game.Units_sold_Millions) FROM game_player JOIN game ON game_player.Game_ID = game.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.Position = 'Guard'; 
SELECT game.Title, platform.Platform_name FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID WHERE game.Units_sold_Millions > 100 ORDER BY game.Title ASC;
SELECT game.Title, platform.Platform_name FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID; 
SELECT title FROM game WHERE platform_id IN (SELECT platform_id FROM platform WHERE market_district IN ('Asia', 'USA')) Explanation: The query first selects the platform_id from the platform table where the market_district is either Asia or USA. Then, it selects the title from the game table where the platform_id is in the list of platform_ids selected from the previous step.
SELECT game.Title FROM game WHERE game.Platform_ID IN ( SELECT platform.Platform_ID FROM platform WHERE platform.Market_district = 'Asia' OR platform.Market_district = 'USA' ) 
SELECT franchise, COUNT(*) FROM game GROUP BY franchise; 
SELECT COUNT(DISTINCT Game_ID) FROM game GROUP BY Franchise; 
SELECT DISTINCT Franchise FROM game ORDER BY COUNT(Franchise) DESC LIMIT 1;
SELECT franchise, COUNT(*) AS num_games FROM game GROUP BY franchise ORDER BY num_games DESC LIMIT 1; 
SELECT DISTINCT Franchise FROM game WHERE Franchise IN (SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(Franchise) >= 2); 
SELECT DISTINCT franchise FROM game WHERE game_id IN (SELECT game_id FROM game WHERE game_id IN (SELECT game_id FROM game WHERE franchise = 'franchise' AND game_id IN (SELECT game_id FROM game WHERE franchise = 'franchise' AND game_id IN (SELECT game_id FROM game WHERE franchise = 'franchise' AND game_id IN (SELECT game_id FROM game WHERE franchise = 'franchise' AND game_id IN (SELECT game_id FROM game WHERE franchise = 'franchise' AND game_id IN (SELECT game_id FROM game WHERE franchise = 'franchise' AND game_id IN (SELECT game_id FROM game WHERE franchise = 'franchise' AND game_id IN (SELECT game_id FROM game WHERE franchise = 'franchise' AND game_id IN (SELECT game_id FROM game WHERE franchise = 'franchise' AND game_id IN (SELECT game_id FROM game WHERE franchise = 'franchise' AND game_id IN (SELECT game_id FROM game
SELECT player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player); 
SELECT player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player); 
SELECT title FROM game WHERE game_id IN (SELECT game_id FROM game_player WHERE player_id IN (SELECT player_id FROM player WHERE college = 'Oklahoma') AND game_id IN (SELECT game_id FROM game_player WHERE player_id IN (SELECT player_id FROM player WHERE college = 'Auburn'))); 
SELECT game.Title FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College IN ('Oklahoma', 'Auburn') GROUP BY game.Title HAVING COUNT(*) = 2 ORDER BY game.Title ASC; 
SELECT DISTINCT franchise FROM game; 
SELECT DISTINCT franchise FROM game; 
SELECT title FROM game WHERE Game_ID NOT IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE Position = 'Guard')); 
SELECT game.Title FROM game WHERE game.Game_ID NOT IN ( SELECT game_player.Game_ID FROM game_player WHERE game_player.Player_ID IN ( SELECT player.Player_ID FROM player WHERE player.Position = "Guard" ) ); 
SELECT Name FROM press ORDER BY Year_Profits_billion DESC; 
SELECT Name FROM press ORDER BY Year_Profits_billion DESC; 
SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1; 
SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1; 
SELECT     avg(`Year_Profits_billion`),     max(`Year_Profits_billion`) FROM     `press` ; 
SELECT Press_ID, AVG(Year_Profits_billion), MAX(Year_Profits_billion) FROM press GROUP BY Press_ID; 
SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press); 
SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press); 
SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) OR Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press); 
SELECT Name FROM press WHERE Month_Profits_billion IN (SELECT MAX(Month_Profits_billion) FROM press) OR Month_Profits_billion IN (SELECT MIN(Month_Profits_billion) FROM press); 
SELECT COUNT(*) FROM author WHERE Age < 30; 
SELECT COUNT(*) FROM author WHERE Age < 30; 
SELECT     Gender,     AVG(Age) AS Average_Age FROM     author GROUP BY     Gender; 
SELECT   "Gender",   AVG("Age") FROM   "author" GROUP BY   "Gender" ORDER BY   "Gender" 
SELECT     Author_ID,     Gender,     COUNT(*) AS "Number of authors" FROM     author WHERE     Age > 30 GROUP BY     Author_ID,     Gender ORDER BY     Author_ID,     Gender 
SELECT     Author_ID,     Gender,     COUNT(*) AS "Authors_Above_30" FROM     author WHERE     Age > 30 GROUP BY     Author_ID,     Gender; 
SELECT Title FROM book ORDER BY Release_date DESC; 
SELECT Title FROM book ORDER BY Release_date DESC; 
SELECT Book_Series, COUNT(*) AS num_books FROM book GROUP BY Book_Series; 
SELECT Book_Series, COUNT(Book_Series) AS Count FROM book GROUP BY Book_Series; 
SELECT title, release_date FROM book WHERE sale_amount = (SELECT MAX(sale_amount) FROM book); 
SELECT Title, Release_date FROM book WHERE Sale_Amount = '5' ORDER BY Sale_Amount DESC LIMIT 5; 
SELECT Book_Series FROM book WHERE Sale_Amount > 1000 AND Sale_Amount < 500; 
SELECT Book_Series FROM book WHERE Sale_Amount > 1000 OR Sale_Amount < 500; 
SELECT Name FROM author WHERE Book_Series IN ('MM', 'LT'); 
SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book WHERE Book_Series IN ('MM', 'LT'))
SELECT Name, Age FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book); 
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book)
SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID HAVING COUNT(*) > 1); 
SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID HAVING COUNT(*) > 1); 
SELECT book.Title, author.Name, press.Name FROM book JOIN author ON book.Author_ID = author.Author_ID JOIN press ON book.Press_ID = press.Press_ID WHERE book.Sale_Amount = 'Top 3' ORDER BY book.Sale_Amount DESC; 
SELECT book.Title, author.Name, press.Name FROM book JOIN author ON book.Author_ID = author.Author_ID JOIN press ON book.Press_ID = press.Press_ID WHERE book.Sale_Amount = 'best selling' ORDER BY book.Sale_Amount DESC LIMIT 3; 
SELECT p.Name, SUM(b.Sale_Amount) AS Total_Sale_Amount FROM press p JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Name; 
SELECT p.Name, SUM(b.Sale_Amount) AS Total_Sale_Amount FROM press p JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Name; 
SELECT p.Name, COUNT(*) FROM book b JOIN press p ON b.Press_ID = p.Press_ID WHERE b.Sale_Amount > 1000 GROUP BY p.Name; 
SELECT p.Name, COUNT(*) AS "Books_Sold_Above_1000" FROM press p JOIN book b ON p.Press_ID = b.Press_ID WHERE b.Sale_Amount > 1000 GROUP BY p.Name; 
SELECT Name FROM author WHERE Author_ID = (SELECT Author_ID FROM book WHERE Book_ID = (SELECT Book_ID FROM book WHERE Sale_Amount = (SELECT MAX(Sale_Amount) FROM book))); 
SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book WHERE Book_ID IN (SELECT Book_ID FROM book WHERE Sale_Amount = (SELECT MAX(Sale_Amount) FROM book))); 
SELECT Name, Gender FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT Name, Gender FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book WHERE Press_ID IN (SELECT Press_ID FROM press WHERE Name = "Accor")); 
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book WHERE Press_ID IN (SELECT Press_ID FROM press WHERE Name = 'Accor')); 
SELECT p.Name, p.Year_Profits_billion FROM press p WHERE p.Month_Profits_billion > 2 GROUP BY p.Name ORDER BY p.Year_Profits_billion DESC; 
SELECT p.Name, p.Year_Profits_billion FROM press p JOIN book b ON p.Press_ID = b.Press_ID WHERE b.Book_ID IN (SELECT Book_ID FROM book GROUP BY Book_ID HAVING COUNT(*) > 2); 
SELECT COUNT(DISTINCT author_name) FROM Authors; 
SELECT DISTINCT author_name FROM Documents 
SELECT     author_name,     other_details FROM     Authors ORDER BY     author_name ASC; 
SELECT other_details FROM Authors WHERE author_name = 'Addison Denesik'; 
SELECT COUNT(DISTINCT document_id) FROM Documents_Processes 
SELECT author_name FROM Documents WHERE document_id = 4; 
SELECT author_name FROM Documents WHERE document_name = 'Travel to Brazil'; 
SELECT COUNT(*) FROM Documents WHERE author_name = 'Era Kerluke'; 
SELECT     d.document_name,     d.document_description FROM     Documents d WHERE     d.document_id IN (         SELECT             d2.document_id         FROM             Documents_Processes d2         WHERE             d2.process_id IN (                 SELECT                     b.process_id                 FROM                     Business_Processes b                 WHERE                     b.process_name = 'Document Review'             )     ) ORDER BY     d.document_name ASC; 
SELECT document_id, document_name FROM Documents WHERE author_name = 'Bianka Cummings'; 
SELECT author_name, other_details FROM Authors JOIN Documents ON Authors.author_name = Documents.author_name WHERE document_name = 'Travel to China'; 
SELECT     author_name,     COUNT(document_id) AS num_documents FROM     Documents GROUP BY     author_name ORDER BY     num_documents DESC 
SELECT author_name FROM Documents GROUP BY author_name ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT author_name FROM Authors WHERE author_name IN (SELECT author_name FROM Documents GROUP BY author_name HAVING COUNT(*) >= 2); 
SELECT COUNT(*) FROM Business_Processes; 
SELECT next_process_id, process_name, process_description FROM Business_Processes WHERE process_id = 9; 
SELECT process_name FROM Business_Processes WHERE process_id = 9; 
SELECT COUNT(process_outcome_code) FROM Process_Outcomes; 
SELECT process_outcome_code, process_outcome_description FROM Process_Outcomes; 
SELECT process_outcome_description FROM Process_Outcomes WHERE process_outcome_code = 'working'; 
SELECT COUNT(process_status_code) FROM Process_Status; 
SELECT process_status_code, process_status_description FROM Process_Status; 
SELECT process_status_description FROM Process_Status WHERE process_status_code = 'ct'; 
SELECT COUNT(*) FROM Staff; 
SELECT staff_id, staff_details FROM Staff; 
SELECT staff_details FROM Staff WHERE staff_id = 100; 
SELECT COUNT(DISTINCT staff_role_code) FROM Staff_in_Processes 
SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles; 
SELECT Ref_Staff_Roles.staff_role_description FROM Ref_Staff_Roles WHERE Ref_Staff_Roles.staff_role_code = 'HR'; 
SELECT COUNT(*) FROM Documents_Processes WHERE process_id IS NOT NULL; 
SELECT process_id FROM Documents_Processes WHERE document_id = 1; 
SELECT document_id FROM Documents WHERE document_id NOT IN (SELECT document_id FROM Documents_Processes); 
SELECT process_id FROM Business_Processes WHERE process_id NOT IN (SELECT process_id FROM Documents_Processes); 
SELECT process_outcome_description, process_status_description FROM Documents_Processes JOIN Process_Outcomes ON Documents_Processes.process_outcome_code = Process_Outcomes.process_outcome_code JOIN Process_Status ON Documents_Processes.process_status_code = Process_Status.process_status_code WHERE document_id = 0; 
SELECT process_name FROM Business_Processes WHERE process_id = (SELECT process_id FROM Documents_Processes WHERE document_id = (SELECT document_id FROM Documents WHERE document_name = "Travel to Brazil")) 
SELECT process_id, COUNT(document_id) FROM Documents_Processes GROUP BY process_id; 
SELECT COUNT(*) FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9; 
SELECT staff_id, COUNT(*) FROM Staff_in_Processes GROUP BY staff_id; 
SELECT staff_role_code, COUNT(*) FROM Staff_in_Processes GROUP BY staff_role_code; 
SELECT COUNT(DISTINCT staff_role_code) FROM Staff_in_Processes WHERE staff_id = 3; 
SELECT COUNT(DISTINCT `agency_id` ) FROM `Agencies`; Problem: How many clients do we have? Solution: SELECT COUNT(DISTINCT `client_id` ) FROM `Clients`; Problem: How many invoices do we have? Solution: SELECT COUNT(DISTINCT `invoice_id` ) FROM `Invoices`; Problem: How many meetings do we have? Solution: SELECT COUNT(DISTINCT `meeting_id` ) FROM `Meetings`; Problem: How many payments do we have? Solution: SELECT COUNT(DISTINCT `payment_id` ) FROM `Payments`; Problem: How many staff do we have? Solution: SELECT COUNT(DISTINCT `staff_id` ) FROM `Staff`; Problem: How many agencies have clients? Solution: SELECT COUNT(DISTINCT `agency_id` ) FROM `Clients`; Problem: How many agencies have invoices? Solution: SELECT COUNT(DISTINCT `agency_id` ) FROM `Invoices`; Problem: How many agencies have meetings? Solution: SELECT COUNT(DISTINCT `agency_id` ) FROM `Meetings`; Problem: How many agencies have payments? Solution: SELECT COUNT(DISTINCT `agency_id` ) FROM `Payments`; Problem: How many agencies have staff? Solution: SELECT COUNT(DISTINCT `agency_id` ) FROM `Staff`; 
SELECT COUNT(DISTINCT agency_id) FROM Agencies; Explanation: The query counts the number of distinct agency_id values in the Agencies table. The DISTINCT keyword ensures that only unique values are counted. The COUNT function returns the number of rows that match the condition.
 SELECT agency_id, agency_details FROM Agencies WHERE EXISTS (SELECT * FROM Clients WHERE Clients.agency_id = Agencies.agency_id AND Clients.sic_code = '12345' AND EXISTS (SELECT * FROM Meetings WHERE Meetings.client_id = Clients.client_id AND Meetings.meeting_outcome = 'Successful'));
SELECT agency_id, agency_details FROM Agencies; 
SELECT COUNT(client_id) FROM Clients; 
 SELECT COUNT(DISTINCT client_id) FROM Clients WHERE sic_code = 'A' AND EXISTS (SELECT * FROM Meetings WHERE client_id = Clients.client_id AND meeting_outcome = 'Successful' AND meeting_type = 'Consultation');
SELECT client_id, client_details FROM Clients; 
SELECT client_id, client_details FROM Clients; 
SELECT agency_id, COUNT(client_id) FROM Clients GROUP BY agency_id; 
SELECT agency_id, COUNT(client_id) AS num_clients FROM Clients GROUP BY agency_id; 
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Clients)) ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Clients GROUP BY agency_id)); 
SELECT Agencies.agency_id, Agencies.agency_details FROM Agencies JOIN Clients ON Agencies.agency_id = Clients.agency_id WHERE Clients.client_id IN (SELECT client_id FROM Clients GROUP BY client_id HAVING COUNT(*) >= 2); 
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(*) >= 2); 
 SELECT Clients.client_details FROM Clients, Agencies, Invoices, Meetings WHERE Clients.agency_id = Agencies.agency_id AND Clients.client_id = Invoices.client_id AND Clients.client_id = Meetings.client_id AND Agencies.agency_details = 'Mac' AND Clients.client_details = 'Mac' AND Invoices.invoice_details = 'Mac' AND Meetings.meeting_outcome = 'Mac';
SELECT agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients WHERE client_details LIKE '%Mac%'); Problem: What are the client details for clients with the detail Mac who have had meetings with staff from agency 1? Solution: SELECT client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings WHERE meeting_id IN (SELECT meeting_id FROM Staff_in_Meetings WHERE staff_id IN (SELECT staff_id FROM Staff WHERE agency_id = 1) AND meeting_id IN (SELECT meeting_id FROM Meetings WHERE client_id IN (SELECT client_id FROM Clients WHERE client_details LIKE '%Mac%')))) Problem: What are the client details for clients with the detail Mac who have had meetings with staff from agency 1 and have had invoices? Solution: SELECT client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments WHERE payment_id IN (SELECT payment_id FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Meetings WHERE meeting_id IN (SELECT meeting_id FROM Staff_in_Meetings WHERE staff_id IN (SELECT staff_id FROM Staff WHERE agency_id = 1) AND meeting_id IN (SELECT meeting_id FROM Meetings WHERE client_id IN (SELECT client_id FROM Clients WHERE client_details LIKE '%Mac%'))))))) Problem: What are the client details for clients with the detail Mac who have had meetings with
 SELECT c.client_details, a.agency_details FROM Clients c JOIN Agencies a ON c.agency_id = a.agency_id WHERE c.sic_code IN ('A', 'B') AND EXISTS (SELECT * FROM Meetings m WHERE m.client_id = c.client_id);
SELECT Clients.client_details, Agencies.agency_details FROM Clients INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id; 
SELECT sic_code, COUNT(client_id) FROM Clients GROUP BY sic_code; 
SELECT sic_code, COUNT(client_id) AS num_clients FROM Clients GROUP BY sic_code; 
SELECT client_id, client_details FROM Clients WHERE sic_code = "Bad"; 
SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad'; 
SELECT agency_id, agency_details FROM Agencies WHERE EXISTS (SELECT * FROM Clients WHERE Clients.agency_id = Agencies.agency_id); 
SELECT agency_id, agency_details FROM Agencies WHERE EXISTS (SELECT * FROM Clients WHERE Clients.agency_id = Agencies.agency_id); 
SELECT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT DISTINCT agency_id FROM Clients); 
SELECT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT agency_id FROM Clients); 
SELECT COUNT(*) FROM Invoices; 
SELECT COUNT(*) FROM Invoices; 
SELECT invoice_id, invoice_status, invoice_details FROM Invoices; 
SELECT invoice_id, invoice_status, invoice_details FROM Invoices; 
SELECT client_id, COUNT(*) FROM Invoices GROUP BY client_id; 
SELECT client_id, COUNT(*) FROM Invoices GROUP BY client_id; 
SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Invoices)) ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT `Clients`.`client_id`, `Clients`.`client_details` FROM `Clients` WHERE `Clients`.`client_id` IN (SELECT `Clients`.`client_id` FROM `Clients` WHERE `Clients`.`client_id` IN (SELECT `Clients`.`client_id` FROM `Clients` WHERE `Clients`.`client_id` IN (SELECT `Clients`.`client_id` FROM `Clients` WHERE `Clients`.`client_id` IN (SELECT `Clients`.`client_id` FROM `Clients` WHERE `Clients`.`client_id` IN (SELECT `Clients`.`client_id` FROM `Clients` WHERE `Clients`.`client_id` IN (SELECT `Clients`.`client_id` FROM `Clients` WHERE `Clients`.`client_id` IN (SELECT `Clients`.`client_id` FROM `Clients` WHERE `Clients`.`client_id` IN (SELECT `Clients`.`client_id` FROM `Clients` WHERE `Clients`.`client_id` IN (SELECT `Clients`.`client_id` FROM `Clients` WHERE `Clients`.`client_id` IN (SELECT `Clients`.`client_id` FROM `Clients` WHERE `Clients`.`client_id` IN (SELECT `Clients`.`client_id` FROM `Clients` WHERE `Clients`.`client_id` IN (SELECT `Clients`.`client_id` FROM `Clients` WHERE `Clients`.`client_id` IN (SELECT `Clients`.`client_id` FROM `Clients` WHERE `Clients`.`client_id` IN
SELECT client_id FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) >= 2); 
SELECT client_id FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) >= 2); 
 SELECT Clients.client_id, Clients.client_details FROM Clients JOIN Meetings ON Clients.client_id = Meetings.client_id JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id JOIN Agencies ON Staff.agency_id = Agencies.agency_id WHERE Agencies.agency_id = 1 AND billable_yn = 'N' AND start_date_time LIKE '%Tuesday%';
SELECT invoice_status, COUNT(*) FROM Invoices GROUP BY invoice_status; Explanation: The query selects the invoice_status and counts the number of invoices for each status code. The GROUP BY clause ensures that the results are grouped by invoice_status, and the COUNT function is used to count the number of invoices for each status code.
SELECT invoice_status, COUNT(*) FROM Invoices GROUP BY invoice_status ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT invoice_status, client_details, agency_details FROM Invoices INNER JOIN Clients ON Invoices.client_id = Clients.client_id INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id; 
SELECT i.invoice_status, i.invoice_details, c.client_id, c.client_details, a.agency_id, a.agency_details FROM Invoices i JOIN Clients c ON i.client_id = c.client_id JOIN Agencies a ON c.agency_id = a.agency_id WHERE i.invoice_status = 'Paid' AND i.invoice_details LIKE '%Consulting%' ORDER BY c.client_id ASC; 
SELECT meeting_type, purpose_of_meeting FROM Meetings; 
SELECT meeting_type, purpose_of_meeting FROM Meetings; 
SELECT meeting_outcome, purpose_of_meeting FROM Meetings 
 SELECT meeting_outcome, purpose_of_meeting FROM Meetings;
SELECT payment_id, payment_details FROM Payments WHERE invoice_id IN (SELECT invoice_id FROM Invoices WHERE invoice_status = 'Working'); 
SELECT payment_id, payment_details FROM Payments WHERE invoice_id IN (SELECT invoice_id FROM Invoices WHERE invoice_status = 'Working'); 
SELECT invoice_id, invoice_status FROM Invoices WHERE payment_id IS NULL; 
SELECT invoice_id, invoice_status FROM Invoices WHERE payment_id IS NULL; 
SELECT COUNT(*) FROM Payments; 
SELECT COUNT(*) FROM Payments; 
SELECT payment_id, invoice_id, payment_details FROM Payments; 
SELECT payment_id, invoice_id, payment_details FROM Payments; 
SELECT DISTINCT invoice_id, invoice_status FROM Payments; 
SELECT DISTINCT invoice_id, invoice_status FROM Payments; 
SELECT invoice_id, COUNT(payment_id) FROM Payments GROUP BY invoice_id; 
SELECT COUNT(payment_id) AS num_payments, invoice_id FROM Payments GROUP BY invoice_id; 
SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments GROUP BY invoice_id ORDER BY COUNT(*) DESC LIMIT 1); 
SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_id IN (SELECT payment_id FROM Payments GROUP BY payment_id HAVING COUNT(payment_id) = (SELECT COUNT(payment_id) FROM Payments GROUP BY payment_id ORDER BY COUNT(payment_id) DESC LIMIT 1)) ORDER BY invoice_id ASC; 
 SELECT COUNT(*) FROM Clients WHERE sic_code = '12345' AND EXISTS (SELECT * FROM Meetings WHERE Clients.client_id = Meetings.client_id AND Meetings.billable_yn = 'Y')
 SELECT COUNT(*) FROM Staff;
SELECT agency_id, COUNT(staff_id) FROM Staff GROUP BY agency_id; 
SELECT Agencies.agency_id, COUNT(Staff.staff_id) AS num_staff FROM Agencies LEFT JOIN Staff ON Agencies.agency_id = Staff.agency_id GROUP BY Agencies.agency_id ORDER BY num_staff DESC; 
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Staff GROUP BY agency_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Staff)) ORDER BY agency_id ASC LIMIT 1; 
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Staff GROUP BY agency_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Staff)) ORDER BY agency_id ASC LIMIT 1; 
SELECT meeting_outcome, COUNT(*) FROM Meetings GROUP BY meeting_outcome; 
SELECT meeting_outcome, COUNT(*) AS meeting_count FROM Meetings GROUP BY meeting_outcome; 
SELECT client_id, COUNT(*) FROM Meetings GROUP BY client_id; 
 SELECT client_id, COUNT(*) FROM Meetings WHERE meeting_outcome ='successful' AND meeting_type = 'business' AND billable_yn = 'Y' AND start_date_time BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY client_id;
SELECT meeting_type, COUNT(*) FROM Meetings GROUP BY meeting_type; 
SELECT meeting_type, COUNT(*) FROM Meetings GROUP BY meeting_type; 
SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id; 
SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM Meetings WHERE billable_yn = 'Y' ORDER BY meeting_id ASC; 
SELECT meeting_id, COUNT(staff_id) FROM Staff_in_Meetings GROUP BY meeting_id; 
SELECT meeting_id, COUNT(staff_id) FROM Staff_in_Meetings GROUP BY meeting_id; 
SELECT staff_id, COUNT(*) FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(*) > 0 ORDER BY COUNT(*) ASC LIMIT 1; 
SELECT staff_id FROM Staff WHERE staff_id IN (SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Staff_in_Meetings)) AND staff_id IN (SELECT staff_id FROM Staff_in_Meetings WHERE staff_id IN (SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Staff_in_Meetings)) AND staff_id IN (SELECT staff_id FROM Staff_in_Meetings WHERE staff_id IN (SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Staff_in_Meetings)) AND staff_id IN (SELECT staff_id FROM Staff_in_Meetings WHERE staff_id IN (SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Staff_in_Meetings)) AND staff_id IN (SELECT staff_id FROM Staff_in_Meetings WHERE staff_id IN (SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Staff_in_Meetings)) AND staff_id IN (SELECT staff_id FROM Staff_in_Meetings WHERE staff_id IN (SELECT staff_id FROM Staff_in_Meetings
SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Meetings WHERE meeting_id IN (SELECT meeting_id FROM Meetings WHERE billable_yn = 'Y' AND meeting_outcome = 'Successful' AND meeting_type = 'Client Meeting' AND start_date_time >= '2019-01-01' AND start_date_time <= '2019-12-31' AND purpose_of_meeting LIKE '%Client Meeting%'); 
SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Meetings; 
SELECT COUNT(DISTINCT staff_id) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings); 
SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings); 
SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings UNION SELECT client_id FROM Payments); 
SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings UNION SELECT client_id FROM Invoices); 
SELECT staff_id, staff_details FROM Staff WHERE staff_id IN (SELECT staff_id FROM Staff_in_Meetings WHERE meeting_id IN (SELECT meeting_id FROM Meetings WHERE meeting_id IN (SELECT meeting_id FROM Meetings WHERE billable_yn ='s' OR purpose_of_meeting LIKE '%s%')));
SELECT staff_id, staff_details FROM Staff WHERE staff_id IN (SELECT staff_id FROM Staff_in_Meetings WHERE meeting_id IN (SELECT meeting_id FROM Meetings WHERE billable_yn = 'Y' AND meeting_outcome = 'S' AND meeting_type = 'S' AND start_date_time >= '2022-01-01' AND end_date_time <= '2022-12-31' AND purpose_of_meeting LIKE '%s%') AND staff_id IN (SELECT staff_id FROM Staff WHERE staff_details LIKE '%s%')) AND staff_details LIKE '%s%'; 
SELECT client_id, sic_code, agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings WHERE meeting_id IN (SELECT meeting_id FROM Staff_in_Meetings WHERE staff_id IN (SELECT staff_id FROM Staff WHERE agency_id IN (SELECT agency_id FROM Agencies WHERE agency_details = 'Agency 1')))) AND client_id IN (SELECT client_id FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments WHERE payment_id IN (SELECT payment_id FROM Invoices WHERE invoice_status = 'Paid')));
SELECT     client_id,     sic_code,     agency_id FROM     Clients WHERE     client_id IN (         SELECT             client_id         FROM             Meetings         GROUP BY             client_id         HAVING             COUNT(*) = 1     )     AND client_id IN (         SELECT             client_id         FROM             Invoices         GROUP BY             client_id         HAVING             COUNT(*) = 1     ) 
SELECT Meetings.start_date_time, Meetings.end_date_time, Clients.client_details, Staff.staff_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id INNER JOIN Staff ON Meetings.meeting_id = Staff.meeting_id WHERE Meetings.billable_yn = 'Y' ORDER BY Meetings.start_date_time ASC; 
SELECT     m.start_date_time,     m.end_date_time,     c.client_details,     s.staff_details FROM Meetings m JOIN Clients c ON m.client_id = c.client_id JOIN Staff_in_Meetings sm ON m.meeting_id = sm.meeting_id JOIN Staff s ON sm.staff_id = s.staff_id ORDER BY m.start_date_time; 
