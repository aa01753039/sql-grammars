SELECT COUNT(Club_ID) FROM club
SELECT COUNT(Club_ID) FROM club
SELECT Name FROM club ORDER BY Name ASC
SELECT Name FROM club ORDER BY Name
SELECT Manager, Captain FROM club
SELECT T1.Manager, T1.Captain FROM club AS T1
SELECT Name FROM club WHERE Manufacturer!= 'Nike'
SELECT Name FROM club WHERE Manufacturer!= 'Nike'
SELECT Name FROM player ORDER BY Wins_count ASC
SELECT Name FROM player ORDER BY Wins_count ASC
SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1
SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1
SELECT DISTINCT T2.Country FROM player AS T1 INNER JOIN club AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Earnings >
SELECT DISTINCT Country FROM player WHERE Earnings > 1200000
SELECT T2.Country FROM player AS T1 INNER JOIN club AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Wins_count > 2 ORDER BY T1
 SELECT T2.Country FROM (SELECT Player_ID, Wins_count FROM player WHERE Wins_count > 2 ORDER BY Wins_count DESC LIMIT 1) AS T1 INNER JOIN player AS T2 ON T1.Player_ID = T2.Player_ID
 SELECT p.Name, c.Name FROM player AS p INNER JOIN club AS c ON p.Club_ID = c.Club_ID
SELECT T1.Name, T2.Name FROM club AS T2 INNER JOIN player AS T1 ON T2.Club_ID = T1.Club_ID
 SELECT DISTINCT T1.Name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Wins_count > 2
 SELECT DISTINCT T1.Name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Wins_count > 2
 SELECT T2.Name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Manager = 'Sam Allardyce'
 SELECT T2.Name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Manager = 'Sam Allardyce'
 SELECT T1.Name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.Club_ID ORDER BY AVG(T2.Earnings) DESC
SELECT Name FROM club ORDER BY ( SELECT AVG(Earnings) FROM player WHERE player.Club_ID = club.Club_ID ) DESC
SELECT Manufacturer, COUNT(Club_ID) FROM club GROUP BY Manufacturer
SELECT Manufacturer, COUNT(Club_ID) FROM club GROUP BY Manufacturer
SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(Manufacturer) DESC LIMIT 1
SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(Manufacturer) DESC LIMIT 1
SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(Manufacturer) > 1
SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(Manufacturer) > 1
SELECT Country FROM player GROUP BY Country HAVING COUNT(Country) > 1
SELECT Country FROM player GROUP BY Country HAVING COUNT(Player_ID) > 1
SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)
SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)
SELECT Country FROM player WHERE Earnings > 1400000 INTERSECT SELECT Country FROM player WHERE Earnings < 1100000
 SELECT T1.Country FROM player AS T1 INNER JOIN player AS T2 ON T1.Country = T2.Country WHERE T1.Earnings > 1400000 AND T2.Earnings < 1100000
SELECT COUNT(DISTINCT Country) FROM player
SELECT COUNT(DISTINCT Country) FROM player
SELECT Earnings FROM player WHERE Country = 'Australia' OR Country = 'Zimbabwe'
SELECT Earnings FROM player WHERE Country = 'Australia' OR Country = 'Zimbabwe'
SELECT c.customer_id, c.customer_first_name, c.customer_last_name  FROM Customers c  JOIN Orders o ON c.customer_id = o.customer_id  JOIN Order_Items oi ON o.order_id = oi.order_id  GROUP BY c.customer_id  HAVING COUNT(DISTINCT o.order_id) > 2 AND COUNT(DISTINCT oi.order_item_id) > 2
SELECT T1.customer_id, T1.customer_first_name, T1.customer_last_name  FROM Customers AS T1  JOIN Orders AS T2 ON T1.customer_id = T2.customer_id  GROUP BY T1.customer_id  HAVING COUNT(T2.order_id) > 2 AND COUNT(T2.order_id) >= 3
SELECT o.order_id, o.order_status_code, COUNT(oi.order_item_id) FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.order_status_code
SELECT COUNT(T1.order_item_id), T2.order_status_code, T2.order_id FROM Order_Items AS T1 INNER JOIN Orders AS T2 ON T1.order_id = T2.order_id GROUP BY T2.order_status_code, T2.order_id
SELECT DISTINCT T1.date_order_placed FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.date_order_placed HAVING COUNT(T2.order_item_id) = 1 OR T1.date_order_placed = ( SELECT MIN(date_order_placed) FROM Orders )
SELECT MIN(date_order_placed) FROM Orders WHERE order_id IN ( SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(order_item_id) > 1 )
SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Orders )
SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Orders )
SELECT T1.product_id, T1.product_name, T1.product_price, T1.product_color  FROM Products AS T1  LEFT JOIN Order_Items AS T2 ON T1.product_id = T2.product_id  GROUP BY T1.product_id  HAVING COUNT(T2.order_id) < 2
SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY oi.product_id HAVING COUNT(oi.product_id) < 2
SELECT T1.order_id, T1.`date_order_placed` FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id HAVING COUNT(T2.order_item_id) >= 2
SELECT T1.order_id, T1.date_order_placed FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id HAVING COUNT(T2.order_item_id) >= 2
SELECT T1.product_id, T1.product_name, T1.product_price FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id ORDER BY COUNT(T2.product_id) DESC LIMIT 1
SELECT T1.product_id, T1.product_name, T1.product_price FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id ORDER BY COUNT(T2.product_id) DESC LIMIT 1
SELECT O.order_id, SUM(OP.product_price) FROM Orders O INNER JOIN Order_Items OP ON O.order_id = OP.order_id GROUP BY O.order_id ORDER BY SUM(OP.product_price) ASC LIMIT 1
SELECT MIN(T1.order_id) AS order_id, SUM(T2.product_price) AS total_cost FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id
SELECT T1.payment_method_code FROM Customer_Payment_Methods AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.payment_method_code ORDER BY COUNT(T1.customer_id) DESC LIMIT 1
SELECT T1.payment_method_code FROM Customer_Payment_Methods AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.payment_method_code ORDER BY COUNT(T1.customer_id) DESC LIMIT 1
SELECT T1.gender_code, COUNT(T2.order_id) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.gender_code
SELECT C.gender_code, COUNT(DISTINCT O.order_id) FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id GROUP BY C.gender_code
SELECT C.gender_code, COUNT(O.order_id) FROM Customers C INNER JOIN Orders O ON C.customer_id = O.customer_id GROUP BY C.gender_code
SELECT C.gender_code, COUNT(O.order_id) FROM Customers C INNER JOIN Orders O ON C.customer_id = O.customer_id GROUP BY C.gender_code
SELECT C.customer_first_name, C.customer_middle_initial, C.customer_last_name, PPM.payment_method_code FROM Customers C INNER JOIN Customer_Payment_Methods PPM ON C.customer_id = PPM.customer_id
SELECT C.customer_first_name, C.customer_middle_initial, C.customer_last_name, PM.payment_method_code FROM Customers C INNER JOIN Customer_Payment_Methods PM ON C.customer_id = PM.customer_id
SELECT i.invoice_status_code, i.invoice_date, s.shipment_date  FROM Invoices i  JOIN Shipments s ON i.invoice_number = s.invoice_number
SELECT invoice_status_code, invoice_date, shipment_date FROM Invoices LEFT JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number
 SELECT T1.product_name, T4.shipment_date FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id INNER JOIN Shipment_Items AS T3 ON T2.order_item_id = T3.order_item_id INNER JOIN Shipments AS T4 ON T3.shipment_id = T4.shipment_id
SELECT T1.product_name, T2.shipment_date FROM Products AS T1 INNER JOIN Shipments AS T2 ON T1.product_id IN ( SELECT product_id FROM Order_Items WHERE order_item_id IN ( SELECT order_item_id FROM Shipment_Items WHERE shipment_id = T2.shipment_id ) )
 SELECT T1.order_item_status_code, T3.shipment_tracking_number FROM Order_Items AS T1 INNER JOIN Shipment_Items AS T2 ON T1.order_item_id = T2.order_item_id INNER JOIN Shipments AS T3 ON T2.shipment_id = T3.shipment_id
 SELECT T1.order_item_status_code, T3.shipment_tracking_number  FROM Order_Items AS T1  INNER JOIN Shipment_Items AS T2 ON T1.order_item_id = T2.order_item_id  INNER JOIN Shipments AS T3 ON T2.shipment_id = T3.shipment_id
SELECT T1.product_name, T1.product_color FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id INNER JOIN Shipment_Items AS T3 ON T2.order_item_id = T3.order_item_id
SELECT T1.product_name, T1.product_color FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id INNER JOIN Shipment_Items AS T3 ON T2.order_item_id = T3.order_item_id INNER JOIN Shipments AS T4 ON T3.shipment_id = T4.shipment_id
SELECT DISTINCT T1.product_name, T1.product_price, T1.product_description  FROM Products AS T1  JOIN Order_Items AS T2 ON T1.product_id = T2.product_id  JOIN Orders AS T3 ON T2.order_id = T3.order_id  JOIN Customers AS T4 ON T3.customer_id = T4.customer_id  WHERE T4.gender_code = 'F'
SELECT DISTINCT T1.product_name, T1.product_price, T1.product_description FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id INNER JOIN Orders AS T3 ON T2.order_id = T3.order_id INNER JOIN Customers AS T4 ON T3.customer_id = T4.customer_id WHERE T4.gender_code = 'F'
SELECT DISTINCT i.invoice_status_code FROM Invoices i LEFT JOIN Shipments s ON i.invoice_number = s.invoice_number WHERE s.invoice_number IS NULL
SELECT DISTINCT i.invoice_status_code FROM Invoices i LEFT JOIN Shipments s ON i.invoice_number = s.invoice_number WHERE s.invoice_number IS NULL
SELECT O.order_id, O.date_order_placed, SUM(P.product_price) AS total_cost FROM Orders O INNER JOIN Order_Items OI ON O.order_id = OI.order_id INNER JOIN Products P ON OI.product_id = P.product_id GROUP BY O.order_id, O.date_order_placed
 SELECT O.order_id, O.date_order_placed, SUM(P.product_price) FROM Orders AS O INNER JOIN Order_Items AS OI ON O.order_id = OI.order_id INNER JOIN Products AS P ON OI.product_id = P.product_id GROUP BY O.order_id
SELECT COUNT(DISTINCT T1.customer_id) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id
SELECT COUNT(DISTINCT T1.customer_id) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id
SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items
SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items
SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods
SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods
SELECT T1.login_name, T1.login_password FROM Customers AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.phone_number LIKE '+12%'
SELECT T1.login_name, T1.login_password FROM Customers AS T1 INNER JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id WHERE T1.phone_number LIKE '+12%'
SELECT T1.product_size FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name LIKE '%Dell%'
SELECT DISTINCT T1.product_size FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name LIKE '%Dell%'
SELECT T1.product_price, T1.product_size FROM Products AS T1 INNER JOIN ( SELECT product_id, AVG(product_price) AS avg_price FROM Products GROUP BY product_id ) AS T2 ON T1.product_id = T2.product_id WHERE T2.avg_price < T1.product_price
SELECT product_price, product_size FROM Products WHERE product_price > ( SELECT AVG(product_price) FROM Products )
SELECT COUNT(DISTINCT T1.product_id) FROM Products AS T1 LEFT JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T2.product_id IS NULL
SELECT COUNT(*) FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)
SELECT COUNT(customer_id) FROM Customer_Payment_Methods WHERE customer_id NOT IN (SELECT customer_id FROM Customers)
SELECT COUNT(customer_id) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payment_Methods );
SELECT DISTINCT order_status_code, date_order_placed FROM Orders
SELECT order_status_code, date_order_placed FROM Orders
SELECT C.address_line_1, C.town_city, C.county FROM Customers C WHERE C.country = 'USA'
SELECT DISTINCT T1.address_line_1, T1.town_city, T1.county FROM Customers AS T1 INNER JOIN Shipments AS T2 ON T1.customer_id = T2.order_id INNER JOIN Invoices AS T3 ON T2.invoice_number = T3.invoice_number WHERE T1.country = 'United States'
 SELECT T1.customer_first_name, T4.product_name FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id INNER JOIN Order_Items AS T3 ON T2.order_id = T3.order_id INNER JOIN Products AS T4 ON T3.product_id = T4.product_id
 SELECT T1.customer_first_name, T4.product_name FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id INNER JOIN Order_Items AS T3 ON T2.order_id = T3.order_id INNER JOIN Products AS T4 ON T3.product_id = T4.product_id
SELECT COUNT(DISTINCT shipment_id) FROM Shipments
SELECT COUNT(DISTINCT T1.product_id) FROM Order_Items AS T1 INNER JOIN Shipment_Items AS T2 ON T1.order_item_id = T2.order_item_id
SELECT AVG(product_price) FROM Products
SELECT AVG(product_price) FROM Products
SELECT AVG(T2.product_price) FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id
SELECT AVG(T2.product_price) FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id
SELECT T1.email_address, T1.town_city, T1.county FROM Customers AS T1 INNER JOIN ( SELECT gender_code, COUNT(*) AS cnt FROM Customers GROUP BY gender_code ORDER BY cnt LIMIT 1 ) AS T2 ON T1.gender_code = T2.gender_code
SELECT T1.email_address, T1.town_city, T1.county FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.order_status_code ORDER BY COUNT(T2.order_id) ASC LIMIT 1
SELECT T1.date_order_placed FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_id IN ( SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(payment_method_code) >= 2 )
SELECT T1.date_order_placed FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_id IN ( SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(payment_method_code) >= 2 )
SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) ASC LIMIT 1
SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) ASC LIMIT 1
SELECT T1.product_id, T1.product_description  FROM Products AS T1  JOIN Order_Items AS T2 ON T1.product_id = T2.product_id  GROUP BY T2.product_id  HAVING COUNT(T2.product_id) > 3
SELECT T1.product_id, T1.product_description  FROM Products AS T1  JOIN Order_Items AS T2 ON T1.product_id = T2.product_id  GROUP BY T2.product_id  HAVING COUNT(T2.product_id) > 3
SELECT DISTINCT i.invoice_date, i.invoice_number FROM Invoices i JOIN Shipments s ON i.invoice_number = s.invoice_number GROUP BY i.invoice_number HAVING COUNT(s.shipment_id) >= 2
SELECT DISTINCT T1.invoice_date, T1.invoice_number FROM Invoices AS T1 INNER JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number GROUP BY T1.invoice_number HAVING COUNT(T2.shipment_id) >= 2
SELECT shipment_tracking_number, shipment_date FROM Shipments
SELECT shipment_tracking_number, shipment_date FROM Shipments
SELECT product_color, product_description, product_size FROM Products WHERE product_price < ( SELECT MAX(product_price) FROM Products )
SELECT product_color, product_description, product_size FROM Products WHERE product_price < ( SELECT MAX(product_price) FROM Products );
SELECT Name FROM director WHERE Age > ( SELECT AVG(Age) FROM director )
SELECT Name FROM director ORDER BY Age DESC LIMIT 1
SELECT COUNT(Channel_ID) FROM channel WHERE Internet LIKE '%bbc%'
SELECT COUNT(DISTINCT Digital_terrestrial_channel) FROM channel
SELECT Title FROM program ORDER BY Start_Year DESC
SELECT Director_ID FROM program GROUP BY Director_ID ORDER BY COUNT(Director_ID) DESC LIMIT 1
SELECT d.Name, d.Age FROM director AS d INNER JOIN director_admin AS da ON d.Director_ID = da.Director_ID GROUP BY da.Director_ID ORDER BY COUNT(da.Director_ID) DESC LIMIT 1
SELECT Title FROM program ORDER BY Start_Year DESC LIMIT 1
SELECT T1.Name, T1.Internet FROM channel AS T1 INNER JOIN program AS T2 ON T1.Channel_ID = T2.Channel_ID GROUP BY T2.Channel_ID HAVING COUNT(T2.Program_ID) > 1
SELECT T1.Name, COUNT(T2.Program_ID) FROM channel AS T1 INNER JOIN program AS T2 ON T1.Channel_ID = T2.Channel_ID GROUP BY T1.Channel_ID
SELECT COUNT(Channel_ID) FROM channel WHERE Channel_ID NOT IN (SELECT Channel_ID FROM program)
SELECT T1.Name FROM director AS T1 INNER JOIN program AS T2 ON T1.Director_ID = T2.Director_ID WHERE T2.Title = 'Dracula'
SELECT T1.Name, T1.Internet FROM channel AS T1 INNER JOIN director_admin AS T2 ON T1.Channel_ID = T2.Channel_ID GROUP BY T2.Channel_ID ORDER BY COUNT(T2.Director_ID) DESC LIMIT 1
SELECT Name FROM director WHERE Age BETWEEN 30 AND 60
SELECT DISTINCT T1.Name FROM channel AS T1 INNER JOIN director_admin AS T2 ON T1.Channel_ID = T2.Channel_ID INNER JOIN director AS T3 ON T2.Director_ID = T3.Director_ID WHERE T3.Age < 40 INTERSECT SELECT DISTINCT T1.Name FROM channel AS T1 INNER JOIN director_admin AS T2 ON T1.Channel_ID = T2.Channel_ID INNER JOIN director AS T3 ON T2.Director_ID = T3.Director_ID WHERE T3.Age > 60
SELECT c.Channel_ID, c.Name FROM channel c LEFT JOIN director_admin da ON c.Channel_ID = da.Channel_ID LEFT JOIN director d ON da.Director_ID = d.Director_ID WHERE d.Name = 'Hank Baskett' AND da.Is_first_director = 0
SELECT COUNT(Radio_ID) FROM radio
SELECT T1.Transmitter FROM radio AS T1 INNER JOIN city_channel_radio AS T2 ON T1.Radio_ID = T2.Radio_ID ORDER BY T1.ERP_kW
SELECT tv_show_name, Original_Airdate FROM tv_show
SELECT Station_name FROM city_channel WHERE Affiliation!= 'ABC'
SELECT T1.Transmitter FROM radio AS T1 INNER JOIN city_channel_radio AS T2 ON T1.Radio_ID = T2.Radio_ID WHERE T2.Is_online = 1 AND T1.ERP_kW NOT IN ('150', '30')
SELECT T1.Transmitter FROM radio AS T1 INNER JOIN city_channel_radio AS T2 ON T1.Radio_ID = T2.Radio_ID WHERE T1.ERP_kW = ( SELECT MAX(ERP_kW) FROM radio )
SELECT AVG(ERP_kW) FROM radio
SELECT Affiliation, COUNT(ID) FROM city_channel GROUP BY Affiliation
SELECT Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(Affiliation) DESC LIMIT 1
SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(ID) > 3
SELECT City, Station_name FROM city_channel ORDER BY Station_name ASC
SELECT T1.Transmitter, T2.City FROM radio AS T1 INNER JOIN city_channel_radio AS T3 ON T1.Radio_ID = T3.Radio_ID INNER JOIN city_channel AS T2 ON T3.City_channel_ID = T2.ID
SELECT T1.Transmitter, T2.Station_name FROM radio AS T1 INNER JOIN city_channel_radio AS T3 ON T1.Radio_ID = T3.Radio_ID INNER JOIN city_channel AS T2 ON T3.City_channel_ID = T2.ID ORDER BY T1.ERP_kW DESC
SELECT T1.Transmitter, COUNT(T2.City_channel_ID) FROM radio AS T1 INNER JOIN city_channel_radio AS T2 ON T1.Radio_ID = T2.Radio_ID GROUP BY T1.Transmitter
SELECT DISTINCT T1.Transmitter FROM radio AS T1 LEFT JOIN city_channel_radio AS T2 ON T1.Radio_ID = T2.Radio_ID WHERE T2.Radio_ID IS NULL
 SELECT T1.Model FROM vehicle AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID INNER JOIN driver AS T3 ON T2.Driver_ID = T3.Driver_ID WHERE T1.Top_Speed = ( SELECT MAX(T2.Vehicle_ID) FROM vehicle AS T2 INNER JOIN vehicle_driver AS T3 ON T2.Vehicle_ID = T3.Vehicle_ID WHERE T2.Power > 6000 )
SELECT Model FROM vehicle WHERE Power > 6000 AND Top_Speed = ( SELECT MAX(Top_Speed) FROM vehicle WHERE Power > 6000 )
SELECT T1.Name FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID INNER JOIN vehicle AS T3 ON T2.Vehicle_ID = T3.Vehicle_ID WHERE T1.Citizenship = 'United States'
SELECT DISTINCT T1.Name FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID INNER JOIN vehicle AS T3 ON T2.Vehicle_ID = T3.Vehicle_ID WHERE T1.Citizenship = 'United States'
SELECT MAX(COUNT(Driver_ID)), MAX(Driver_ID) FROM vehicle_driver
SELECT Driver_ID, COUNT(*) FROM vehicle_driver GROUP BY Driver_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT MAX(Power), AVG(Power) FROM vehicle WHERE Builder = 'Zhuzhou'
SELECT MAX(Power), AVG(Power) FROM vehicle WHERE Builder = 'Zhuzhou'
SELECT T1.Vehicle_ID FROM vehicle_driver AS T1 INNER JOIN vehicle AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID GROUP BY T1.Vehicle_ID ORDER BY COUNT(T1.Driver_ID) ASC LIMIT 1
SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(Driver_ID) ASC LIMIT 1
SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = '1996'
SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = '1996'
SELECT Build_Year, Model, Builder FROM vehicle
SELECT Build_Year, Model, Builder FROM vehicle
SELECT COUNT(DISTINCT Driver_ID) FROM vehicle_driver AS T1 INNER JOIN vehicle AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T2.Build_Year = '2012'
SELECT COUNT(DISTINCT Driver_ID) FROM vehicle_driver AS T1 INNER JOIN vehicle AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T2.Build_Year = '2012'
SELECT COUNT(Driver_ID) FROM driver WHERE Racing_Series = 'NASCAR'
 SELECT COUNT(DISTINCT T1.Driver_ID) FROM vehicle_driver AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Racing_Series = 'NASCAR'
SELECT AVG(Top_Speed) FROM vehicle
SELECT AVG(Top_Speed) FROM vehicle
SELECT DISTINCT T1.Name FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID INNER JOIN vehicle AS T3 ON T2.Vehicle_ID = T3.Vehicle_ID WHERE T3.Power > 5000
SELECT DISTINCT T1.Name FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID INNER JOIN vehicle AS T3 ON T2.Vehicle_ID = T3.Vehicle_ID WHERE T3.Power > 5000
SELECT Model FROM vehicle WHERE Total_Production > '100' OR Top_Speed > 150
SELECT DISTINCT T1.Model FROM vehicle AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T1.Total_Production = 'over 100' OR T1.Top_Speed > 150
SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%'
SELECT Model, Build_Year FROM vehicle WHERE Model LIKE "%DJ%"
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver)
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver)
 SELECT DISTINCT T1.Vehicle_ID, T1.Model FROM vehicle AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID GROUP BY T2.Vehicle_ID HAVING COUNT(DISTINCT T2.Driver_ID) >= 2 UNION SELECT Vehicle_ID, Model FROM vehicle WHERE Builder = 'Ziyang'
SELECT DISTINCT v.Vehicle_ID, v.Model  FROM vehicle v  WHERE v.Vehicle_ID IN (   SELECT vd.Vehicle_ID    FROM vehicle_driver vd    GROUP BY vd.Vehicle_ID    HAVING COUNT(DISTINCT vd.Driver_ID) = 2 ) OR v.Builder
 SELECT DISTINCT v.Vehicle_ID, v.Model  FROM vehicle v  JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID  WHERE vd.Vehicle_ID IN (   SELECT vd.Vehicle_ID    FROM vehicle_driver vd    GROUP BY vd.Vehicle_ID    HAVING COUNT(DISTINCT vd.Driver_ID) > 2   UNION   SELECT vd.Vehicle_ID    FROM vehicle_driver vd    WHERE vd.Driver_ID IN (     SELECT d.Driver_ID      FROM driver d      WHERE d.Name = 'Jeff Gordon'   ) )
 SELECT v.Vehicle_ID, v.Model  FROM vehicle v  WHERE v.Vehicle_ID IN (   SELECT vd.Vehicle_ID    FROM vehicle_driver vd    GROUP BY vd.Vehicle_ID    HAVING COUNT(DISTINCT vd.Driver_ID) > 2 ) OR EXISTS (   SELECT 1    FROM vehicle_driver vd2    WHERE vd2.Vehicle_ID = v.Vehicle_ID    AND vd2.Driver_ID IN (     SELECT Driver_ID      FROM driver      WHERE Name = 'Jeff Gordon'   ) )
SELECT COUNT(*) FROM vehicle WHERE Top_Speed = ( SELECT MAX(Top_Speed) FROM vehicle )
SELECT COUNT(*) FROM vehicle WHERE Top_Speed = ( SELECT MAX(Top_Speed) FROM vehicle )
SELECT Name FROM driver ORDER BY Name ASC
SELECT Name FROM driver ORDER BY Name
SELECT COUNT(Driver_ID), Racing_Series FROM driver GROUP BY Racing_Series
SELECT COUNT(DISTINCT Driver_ID), Racing_Series FROM driver GROUP BY Racing_Series
SELECT d.Name, d.Citizenship  FROM driver AS d  JOIN vehicle_driver AS vd ON d.Driver_ID = vd.Driver_ID  JOIN vehicle AS v ON vd.Vehicle_ID = v.Vehicle_ID  WHERE v.Model = 'DJ1'
SELECT d.Name, d.Citizenship  FROM driver AS d  JOIN vehicle_driver AS vd ON d.Driver_ID = vd.Driver_ID  JOIN vehicle AS v ON vd.Vehicle_ID = v.Vehicle_ID  WHERE v.Model = 'DJ1'
SELECT COUNT(DISTINCT Driver_ID) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver)
SELECT COUNT(DISTINCT Driver_ID) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver)
SELECT COUNT(Exam_ID) FROM Exams
SELECT COUNT(Exam_ID) FROM Exams
SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC
SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code
SELECT Exam_Name, Exam_Date FROM Exams WHERE Subject_Code!= 'Database'
SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code!= 'Database'
SELECT DISTINCT T1.Exam_Date FROM Exams AS T1 INNER JOIN Questions_in_Exams AS T2 ON T1.Exam_ID = T2.Exam_ID INNER JOIN Questions AS T3 ON T2.Question_ID = T3.Question_ID WHERE T3.Type_of_Question_Code LIKE '%data%' ORDER BY T1.Exam_Date DESC
SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC
SELECT Type_of_Question_Code, COUNT(*) FROM Questions GROUP BY Type_of_Question_Code
SELECT Type_of_Question_Code, COUNT(Question_ID) FROM Questions GROUP BY Type_of_Question_Code
SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal'
SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal'
SELECT COUNT(DISTINCT Comments) FROM Student_Answers
SELECT COUNT(DISTINCT Comments) FROM Student_Answers
SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(Student_Answer_Text) DESC
SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(Student_Answer_Text) DESC
 SELECT T1.First_Name, T2.Date_of_Answer FROM Students AS T1 INNER JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID
SELECT T1.First_Name, T2.Date_of_Answer FROM Students AS T1 INNER JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID
 SELECT s.Email_Adress, sa.Date_of_Answer FROM Students s INNER JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID ORDER BY sa.Date_of_Answer DESC
SELECT s.Email_Adress, sa.Date_of_Answer FROM Student_Answers sa INNER JOIN Students s ON sa.Student_ID = s.Student_ID ORDER BY sa.Date_of_Answer DESC
 SELECT DISTINCT Assessment FROM Student_Assessments ORDER BY ( SELECT COUNT(*) FROM Student_Assessments WHERE Student_Answer_ID = Student_Answer_ID ) ASC LIMIT 1
SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1
SELECT DISTINCT T1.First_Name FROM Students AS T1 INNER JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID GROUP BY T2.Student_ID HAVING COUNT(T2.Student_ID) >= 2
SELECT DISTINCT T1.First_Name FROM Students AS T1 INNER JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID GROUP BY T2.Student_ID HAVING COUNT(T2.Student_ID) >= 2
SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1
SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1
SELECT Last_Name FROM Students WHERE Gender_MFU!= 'M'
SELECT Last_Name FROM Students WHERE Gender_MFU!= 'M'
SELECT DISTINCT Gender_MFU, COUNT(Student_ID) FROM Students GROUP BY Gender_MFU
SELECT DISTINCT Gender_MFU, COUNT(Student_ID) FROM Students GROUP BY Gender_MFU
SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M')
SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M')
SELECT DISTINCT T1.First_Name FROM Students AS T1 LEFT JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID WHERE T2.Student_ID IS NULL
SELECT DISTINCT T1.First_Name FROM Students AS T1 LEFT JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID WHERE T2.Student_ID IS NULL
SELECT DISTINCT sa.Student_Answer_Text FROM Student_Answers sa INNER JOIN Student_Assessments saa ON sa.Student_Answer_ID = saa.Student_Answer_ID WHERE saa.Assessment = 'Normal' INTERSECT SELECT sa.Student_Answer_Text FROM Student_Answers sa INNER JOIN Student_Assessments saa ON sa.Student_Answer_ID = saa.Student_Answer_ID WHERE saa.Assessment = 'Absent'
SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' INTERSECT SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Absent'
SELECT DISTINCT T1.Type_of_Question_Code FROM Questions AS T1 INNER JOIN ( SELECT Question_ID, COUNT(*) AS cnt FROM Questions GROUP BY Question_ID HAVING COUNT(*) >= 3 ) AS T2 ON T1.Question_ID = T2.Question_ID
SELECT DISTINCT T1.Type_of_Question_Code  FROM Questions AS T1  JOIN Questions_in_Exams AS T2 ON T1.Question_ID = T2.Question_ID  GROUP BY T1.Type_of_Question_Code  HAVING COUNT(T1.Question_ID) >= 3
SELECT * FROM Students
SELECT Student_ID, First_Name, Middle_Name, Last_Name, Gender_MFU, Student_Address, Email_Adress, Cell_Mobile_Phone, Home_Phone FROM Students
SELECT COUNT(*) FROM Addresses
SELECT COUNT(*) FROM Addresses
SELECT address_id, address_details FROM Addresses
SELECT address_id, address_details FROM Addresses
SELECT COUNT(*) FROM Products
SELECT COUNT(*) FROM Products
SELECT product_id, product_type_code, product_name FROM Products
SELECT product_id, product_type_code, product_name FROM Products
SELECT product_price FROM Products WHERE product_name = 'Monitor'
 SELECT T1.product_price FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = 'Monitor'
SELECT MIN(product_price), AVG(product_price), MAX(product_price) FROM Products
SELECT MIN(product_price), AVG(product_price), MAX(product_price) FROM Products
SELECT AVG(T2.product_price) FROM Products AS T1 INNER JOIN Products AS T2 ON T1.product_type_code = 'Clothes'
SELECT AVG(T2.product_price) FROM Products AS T1 INNER JOIN Customer_Orders AS T2 ON T1.product_id = T2.product_id WHERE T1.product_type_code = 'Clothes'
SELECT COUNT(*) FROM Products WHERE product_type_code = 'Hardware'
SELECT COUNT(*) FROM Products WHERE product_type_code = 'Hardware'
SELECT product_name FROM Products WHERE product_price > ( SELECT AVG(product_price) FROM Products )
SELECT product_name FROM Products WHERE product_price > ( SELECT AVG(product_price) FROM Products )
 SELECT T1.product_name FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T1.product_type_code = 'Hardware' AND T1.product_price > ( SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware' )
 SELECT T1.product_name FROM Products AS T1 WHERE T1.product_type_code = 'Hardware' AND T1.product_price > ( SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware' )
SELECT T1.product_name FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T1.product_type_code = 'Clothes' ORDER BY T2.order_quantity DESC LIMIT 1
SELECT T1.product_name FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T1.product_type_code = 'Clothes' ORDER BY T2.order_quantity DESC LIMIT 1
SELECT product_id, product_name FROM Products WHERE product_price = ( SELECT MIN(product_price) FROM Products WHERE product_type_code = 'Hardware' ) AND product_type_code = 'Hardware'
SELECT T1.product_id, T1.product_name FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T1.product_type_code = 'Hardware' ORDER BY T2.order_quantity LIMIT 1
SELECT product_name FROM Products ORDER BY product_price DESC
SELECT product_name FROM Products ORDER BY product_price DESC
SELECT product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC
SELECT product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC
SELECT product_type_code,  COUNT(*) FROM Products GROUP BY product_type_code
SELECT product_type_code,  COUNT(*) FROM Products GROUP BY product_type_code
SELECT product_type_code, AVG(product_price) FROM Products GROUP BY product_type_code
SELECT AVG(T2.product_price), T1.product_type_code FROM Products AS T1 INNER JOIN Customer_Orders AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_type_code
SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) >= 2
SELECT DISTINCT T1.product_type_code FROM Products AS T1 INNER JOIN ( SELECT product_type_code, COUNT(*) AS cnt FROM Products GROUP BY product_type_code HAVING COUNT(*) >= 2 ) AS T2 ON T1.product_type_code = T2.product_type_code
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_id) DESC LIMIT 1
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_type_code) DESC LIMIT 1
SELECT COUNT(customer_id) FROM Customers
SELECT COUNT(customer_id) FROM Customers
SELECT customer_id, customer_name FROM Customers
SELECT customer_id, customer_name FROM Customers
SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy'
SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy'
SELECT payment_method_code,  COUNT(*) FROM Customers GROUP BY payment_method_code
SELECT payment_method_code, COUNT(*) FROM Customers GROUP BY payment_method_code
SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(customer_id) DESC LIMIT 1
SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(payment_method_code) DESC LIMIT 1
SELECT customer_name FROM Customers GROUP BY payment_method_code ORDER BY COUNT(customer_name) ASC LIMIT 1
SELECT customer_name FROM Customers GROUP BY payment_method_code ORDER BY COUNT(payment_method_code) ASC LIMIT 1
SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy'
SELECT T1.payment_method_code, T1.customer_number FROM Customers AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_name = 'Jeromy'
SELECT DISTINCT payment_method_code FROM Customers
SELECT DISTINCT payment_method_code FROM Customers
SELECT product_id, product_type_code FROM Products ORDER BY product_name
SELECT product_id, product_type_code FROM Products ORDER BY product_name
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_id) ASC LIMIT 1
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_type_code) ASC LIMIT 1
SELECT COUNT(order_id) FROM Customer_Orders
SELECT COUNT(order_id) FROM Customer_Orders
SELECT T1.order_id, T1.order_date, T1.order_status_code FROM Customer_Orders AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_name = 'Jeromy'
SELECT T1.order_id, T1.order_date, T1.order_status_code FROM Customer_Orders AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_name = 'Jeromy'
SELECT c.customer_name, c.customer_id, COUNT(co.order_id) FROM Customers c LEFT JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id
 SELECT c.customer_name, c.customer_id, COUNT(co.order_id) FROM Customers c LEFT JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id
SELECT customer_id, customer_name, customer_phone, customer_email FROM Customers ORDER BY ( SELECT COUNT(*) FROM Customer_Orders WHERE customer_id = Customers.customer_id ) DESC LIMIT 1
SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customers c INNER JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id ORDER BY COUNT(co.order_id) DESC LIMIT 1
SELECT order_status_code, COUNT(order_id) FROM Customer_Orders GROUP BY order_status_code
SELECT order_status_code,  COUNT(order_id) FROM Customer_Orders GROUP BY order_status_code
SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) DESC LIMIT 1
SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) DESC LIMIT 1
SELECT COUNT(customer_id) FROM Customer_Orders WHERE order_id IS NULL
SELECT COUNT(DISTINCT customer_id) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)
SELECT p.product_name FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id WHERE oi.product_id IS NULL
SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)
SELECT COUNT(T1.order_id) FROM Order_Items AS T1 INNER JOIN Products AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = 'Monitor'
SELECT SUM(CASE WHEN T1.product_name = 'Monitor' THEN 1 ELSE 0 END) FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id
SELECT COUNT(DISTINCT T1.customer_id) FROM Customers AS T1 INNER JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id INNER JOIN Order_Items AS T3 ON T2.order_id = T3.order_id INNER JOIN Products AS T4 ON T3.product_id = T4.product_id WHERE T4.product_name = 'Monitor'
SELECT COUNT(DISTINCT T1.customer_id)  FROM Customers AS T1  INNER JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id  INNER JOIN Order_Items AS T3 ON T2.order_id = T3.order_id  INNER JOIN Products AS T4 ON T3.product_id = T4.product_id  WHERE T4.product_name = 'Monitor Product'
SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders
SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders
SELECT customer_id FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Orders );
SELECT customer_id FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Orders )
SELECT T1.order_date, T1.order_id FROM Customer_Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id HAVING COUNT(T2.order_item_id) > 3 OR T2.order_quantity > 6
SELECT T1.order_id, T1.order_date FROM Customer_Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id, T1.order_date HAVING COUNT(T2.order_item_id) > 3 OR T2.order_quantity > 6
SELECT COUNT(Building_ID) FROM building
SELECT COUNT(Building_ID) FROM building
SELECT Name FROM building ORDER BY Number_of_Stories ASC
SELECT Name FROM building ORDER BY Number_of_Stories ASC
SELECT Address FROM building ORDER BY Completed_Year DESC
SELECT Address FROM building ORDER BY Completed_Year DESC
SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year!= 1980
SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year!= 1980
SELECT AVG(Population) FROM region
SELECT AVG(Population) FROM region
SELECT Name FROM region ORDER BY Name ASC
SELECT Name FROM region ORDER BY Name ASC
 SELECT T2.Capital FROM building AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID WHERE T2.Area > 10000
 SELECT T2.Capital FROM building AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID WHERE T2.Area > 10000
 SELECT T2.Capital FROM region AS T1 INNER JOIN region AS T2 ON T1.Population = ( SELECT MAX(Population) FROM region ) WHERE T1.Region_ID = T2.Region_ID
SELECT T1.Capital, T1.Population FROM region AS T1 INNER JOIN ( SELECT Region_ID, MAX(Population) AS Population FROM region GROUP BY Region_ID )
SELECT Name FROM region ORDER BY Area DESC LIMIT 5
SELECT Name FROM region ORDER BY Area DESC LIMIT 5
SELECT T1.Name, T2.Name FROM building AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID
SELECT T1.Name, T2.Name FROM building AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID
 SELECT T1.Name FROM region AS T1 INNER JOIN building AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(T2.Building_ID) > 1
 SELECT T1.Name FROM region AS T1 INNER JOIN building AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(T2.Building_ID) > 1
SELECT T2.Capital FROM building AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T1.Region_ID
 SELECT T1.Name, T1.Capital FROM region AS T1 INNER JOIN ( SELECT Region_ID, COUNT(Building_ID) AS num_buildings FROM building GROUP BY Region_ID ORDER BY num_buildings DESC LIMIT 1 ) AS T2 ON T1.Region_ID = T2.Region_ID
SELECT T1.Address, T2.Capital  FROM building AS T1  INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID
SELECT T1.Address, T2.Name  FROM building AS T1  INNER JOIN region AS T2  ON T1.Region_ID = T2.Region_ID
 SELECT T1.Number_of_Stories FROM building AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID WHERE T2.Name = 'Abruzzo'
 SELECT T1.Number_of_Stories FROM building AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID WHERE T2.Name = 'Abruzzo'
SELECT Completed_Year, COUNT(Building_ID) FROM building GROUP BY Completed_Year
SELECT Completed_Year, COUNT(Building_ID) FROM building GROUP BY Completed_Year
SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1
SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1
SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)
SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)
SELECT DISTINCT Completed_Year FROM building WHERE Number_of_Stories > 20 INTERSECT SELECT DISTINCT Completed_Year FROM building WHERE Number_of_Stories < 15
 SELECT DISTINCT T1.Completed_Year FROM building AS T1 INNER JOIN building AS T2 ON T1.Completed_Year = T2.Completed_Year WHERE T1.Number_of_Stories > 20 AND T2.Number_of_Stories < 15
SELECT DISTINCT Address FROM building
SELECT DISTINCT Address FROM building
SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC
SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC
SELECT Channel_Details FROM Channels ORDER BY Channel_Details
SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC
SELECT COUNT(Service_ID) FROM Services
SELECT COUNT(Service_ID) FROM Services
SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
SELECT DISTINCT T1.Service_ID FROM Services AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID INNER JOIN Customers AS T3 ON T2.Customer_ID = T3.Customer_ID WHERE T3.Customer_Details = 'Hardy Kutch'
SELECT T1.Service_Details FROM Services AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID INNER JOIN Customers AS T3 ON T2.Customer_ID = T3.Customer_ID WHERE T3.Customer_Details = 'Hardy Kutch'
SELECT T1.Service_Details FROM Services AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID GROUP BY T2.Service_ID HAVING COUNT(T2.Customers_and_Services_ID) > 3
SELECT T1.Service_Details FROM Services AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID GROUP BY T2.Service_ID HAVING COUNT(T2.Customers_and_Services_ID) > 3
SELECT T1.Customer_Details FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T2.Customer_ID ORDER BY COUNT(T2.Customer_ID) DESC LIMIT 1
SELECT T1.Customer_Details FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T2.Customer_ID ORDER BY COUNT(T2.Service_ID) DESC LIMIT 1
SELECT T1.Customer_Details FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T2.Customer_ID ORDER BY COUNT(T2.Service_ID) DESC LIMIT 1
SELECT T1.Customer_Details FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T2.Customer_ID ORDER BY COUNT(T2.Service_ID) DESC LIMIT 1
SELECT T1.Customer_Details FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Customer_ID IS NULL
SELECT T1.Customer_Details FROM Customers AS T1 LEFT JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Customer_ID IS NULL
SELECT T1.Customer_Details FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Service_ID = ( SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(Service_ID) ASC LIMIT 1 )
 SELECT DISTINCT T1.Customer_Details FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID ORDER BY ( SELECT COUNT(T2.Service_ID) FROM Customers_and_Services AS T2 WHERE T2.Customer_ID = T1.Customer_ID ) ASC LIMIT 1
SELECT COUNT(DISTINCT Customers_and_Services_Details) FROM Customers_and_Services
SELECT COUNT(Customer_ID) FROM Customers WHERE Customer_Details IS NOT NULL AND Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services WHERE Customers_and_Services_Details IS NOT NULL)
SELECT T1.Customer_Details FROM Customers AS T1 WHERE T1.Customer_Details LIKE '%Kutch%'
SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%'
SELECT DISTINCT T1.Service_Details FROM Services AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID INNER JOIN Customers AS T3 ON T2.Customer_ID = T3.Customer_ID WHERE T3.Customer_Details = 'Hardy Kutch' UNION SELECT DISTINCT T1.Service_Details FROM Services AS T1 INNER JOIN Customer_Interactions AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Status_Code = 'good'
SELECT T1.Service_Details FROM Services AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID INNER JOIN Customers AS T3 ON T2.Customer_ID = T3.Customer_ID WHERE T3.Customer_Details = 'Hardy Kutch' OR EXISTS ( SELECT 1 FROM Customer_Interactions AS T4 INNER JOIN Services AS T5 ON T4.Service_ID = T5.Service_ID WHERE T4.Status_Code = 'good' AND T5.Service_ID = T2.Service_ID )
SELECT DISTINCT T1.Service_Details FROM Services AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID INNER JOIN Customer_Interactions AS T3 ON T2.Customers_and_Services_ID = T3.Services_and_Channels_Details WHERE T3.Status_Code = 'bad' AND T2.Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch')
SELECT T1.Service_Details FROM Services AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID INNER JOIN Customer_Interactions AS T3 ON T2.Customer_ID = T3.Customer_ID WHERE T3.Status_Code = 'bad' AND T2.Customers_and_Services_Details LIKE '%Hardy Kutch%'
SELECT T1.Service_Details FROM Services AS T1 INNER JOIN Customer_Interactions AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Channel_ID = (SELECT Channel_ID FROM Channels WHERE Channel_Details = '15 ij')
SELECT DISTINCT T1.Service_Details FROM Services AS T1 INNER JOIN Customer_Interactions AS T2 ON T1.Service_ID = T2.Service_ID INNER JOIN Channels AS T3 ON T2.Channel_ID = T3.Channel_ID WHERE T3.Channel_Details = '15 ij'
SELECT c.Customer_Details FROM Customers c INNER JOIN Customer_Interactions ci ON c.Customer_ID = ci.Customer_ID WHERE ci.Status_Code = 'Stuck' AND ci.Services_and_Channels_Details = 'bad'
SELECT C.Customer_Details FROM Customers C INNER JOIN Customer_Interactions CI ON C.Customer_ID = CI.Customer_ID WHERE CI.Status_Code = 'Stuck' AND CI.Services_and_Channels_Details = 'bad'
SELECT COUNT(Integration_Platform_ID) FROM Integration_Platform WHERE Integration_Platform_Details = 'Successful'
SELECT COUNT(Integration_Platform_ID) FROM Integration_Platform WHERE Integration_Platform_Details LIKE '%Success%'
SELECT C.Customer_Details FROM Customers AS C INNER JOIN Integration_Platform AS IP ON C.Customer_ID = IP.Customer_ID WHERE IP.Integration_Platform_Details = 'Failed'
SELECT C.Customer_Details FROM Customers AS C INNER JOIN Customer_Interactions AS CI ON C.Customer_ID = CI.Customer_ID INNER JOIN Integration_Platform AS IP ON CI.Customer_Interaction_ID = IP.Customer_Interaction_ID WHERE IP.Integration_Platform_Details = 'Fail'
SELECT Service_Details FROM Services WHERE Service_ID NOT IN ( SELECT DISTINCT Service_ID FROM Customers_and_Services )
SELECT Service_Details FROM Services WHERE Service_ID NOT IN (SELECT DISTINCT Service_ID FROM Customers_and_Services)
SELECT Analytical_Layer_Type_Code, COUNT(*) FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code
SELECT Analytical_Layer_Type_Code, COUNT(*) FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code
SELECT T1.Service_Details FROM Services AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Customers_and_Services_Details = 'unsatisfied'
SELECT T1.Service_Details FROM Services AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Customers_and_Services_Details = 'unsatisfied'
SELECT COUNT(id) FROM Vehicles
SELECT COUNT(id) FROM Vehicles
SELECT name FROM Vehicles ORDER BY Model_year DESC
SELECT name FROM Vehicles ORDER BY Model_year DESC
SELECT DISTINCT Type_of_powertrain FROM Vehicles
SELECT DISTINCT Type_of_powertrain FROM Vehicles
SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year = 2013 OR Model_year = 2014
SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year = 2013 OR Model_year = 2014
SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014 INTERSECT SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013
SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013 INTERSECT SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014
SELECT Type_of_powertrain, COUNT(*) FROM Vehicles GROUP BY Type_of_powertrain
SELECT Type_of_powertrain, COUNT(*) FROM Vehicles GROUP BY Type_of_powertrain
SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(*) DESC LIMIT 1
SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(Type_of_powertrain) DESC LIMIT 1
SELECT MIN(AAF) AS min_AAF, MAX(AAF) AS max_AAF, AVG(AAF) AS avg_AAF FROM ( SELECT T1.AAF FROM Vehicles AS T1 UNION SELECT T1.AAF FROM Vehicles AS T1 ) AS T2
 SELECT MIN(Annual_fuel_cost), MAX(Annual_fuel_cost), AVG(Annual_fuel_cost) FROM Vehicles
SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate
SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate
SELECT T1.Type_of_powertrain, AVG(T2.Annual_fuel_cost) FROM Vehicles AS T1 INNER JOIN Renting_history AS T3 ON T1.id = T3.vehicles_id INNER JOIN Vehicles AS T2 ON T2.id = T3.vehicles_id GROUP BY T1.Type_of_powertrain HAVING COUNT(T1.id) >= 2
SELECT Type_of_powertrain, AVG(Cost_per_25_miles * 520) FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(id) >= 2
SELECT name, age, membership_credit FROM Customers
SELECT name, age, membership_credit FROM Customers
SELECT name, age FROM Customers WHERE membership_credit = ( SELECT MAX(membership_credit) FROM Customers )
SELECT name, age FROM Customers ORDER BY membership_credit DESC LIMIT 1
SELECT AVG(age) FROM Customers WHERE membership_credit > ( SELECT AVG(membership_credit) FROM Customers )
SELECT AVG(T1.age) FROM Customers AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.customer_id WHERE T1.membership_credit > ( SELECT AVG(T3.membership_credit) FROM Customers AS T3 )
SELECT * FROM Discount
SELECT * FROM Discount
SELECT T1.name, T3.total_hours FROM Vehicles AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id INNER JOIN Renting_history AS T3 ON T3.customer_id = T2.customer_id
SELECT T1.name, T3.total_hours FROM Vehicles AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id INNER JOIN Renting_history AS T3 ON T3.customer_id = T2.customer_id
SELECT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history)
SELECT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history)
SELECT T1.name FROM Customers AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.customer_id GROUP BY T2.customer_id HAVING COUNT(T2.id) >= 2
SELECT T1.name FROM Customers AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.customer_id GROUP BY T2.customer_id HAVING COUNT(T2.customer_id) >= 2
SELECT T1.name, T1.Model_year FROM Vehicles AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id GROUP BY T1.id ORDER BY COUNT(T2.id) DESC LIMIT 1
SELECT T1.name, T1.Model_year FROM Vehicles AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id GROUP BY T1.id ORDER BY COUNT(T2.id) DESC LIMIT 1
SELECT T1.name FROM Vehicles AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id ORDER BY T2.total_hours DESC
SELECT T1.name FROM Vehicles AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id ORDER BY T2.total_hours DESC
SELECT T1.name FROM Discount AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.discount_id GROUP BY T2.discount_id ORDER BY COUNT(T2.id) DESC LIMIT 1
SELECT T2.name FROM Renting_history AS T1 INNER JOIN Discount AS T2 ON T1.discount_id = T2.id GROUP BY T2.id ORDER BY COUNT(T1.id) DESC LIMIT 1
SELECT T1.name, T1.Type_of_powertrain FROM Vehicles AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id WHERE T2.total_hours > 30
SELECT T1.name, T1.Type_of_powertrain FROM Vehicles AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id WHERE T2.total_hours > 30
SELECT AVG(City_fuel_economy_rate), AVG(Highway_fuel_economy_rate), Type_of_powertrain FROM Vehicles WHERE Type_of_powertrain NOT LIKE 'hybrid%' GROUP BY Type_of_powertrain
SELECT AVG(City_fuel_economy_rate), AVG(Highway_fuel_economy_rate) FROM Vehicles GROUP BY Type_of_powertrain
SELECT AVG(amount_of_loan) FROM Student_Loans
SELECT AVG(amount_of_loan) FROM Student_Loans
SELECT T1.bio_data, T1.student_id FROM Students AS T1 INNER JOIN Classes AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(T2.class_id) >= 2 INTERSECT SELECT T1.bio_data, T1.student_id FROM Students AS T1 INNER JOIN Detention AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(T2.detention_id) < 2
SELECT T1.bio_data, T1.student_id FROM Students AS T1 INNER JOIN Classes AS T2 ON T1.student_id = T2.student_id LEFT JOIN Detention AS T3 ON T1.student_id = T3.student_id GROUP BY T1.student_id HAVING COUNT(T2.class_id) >= 2 OR COUNT(T3.detention_id) < 2
SELECT DISTINCT T1.teacher_details FROM Teachers AS T1 INNER JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.class_details LIKE '%data%' AND T2.class_details NOT LIKE 'net%'
SELECT T2.teacher_details FROM Classes AS T1 INNER JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.class_details LIKE '%data%' AND T1.class_details NOT LIKE 'net%'
SELECT bio_data FROM Students WHERE student_id NOT IN ( SELECT student_id FROM Detention UNION SELECT student_id FROM Student_Loans )
SELECT bio_data FROM Students WHERE student_id NOT IN ( SELECT student_id FROM Detention UNION SELECT student_id FROM Student_Loans )
SELECT T1.amount_of_loan, T1.date_of_loan FROM Student_Loans AS T1 INNER JOIN Students AS T2 ON T1.student_id = T2.student_id INNER JOIN Achievements AS T3 ON T2.student_id = T3.student_id GROUP BY T3.student_id HAVING COUNT(T3.student_id) >= 2
SELECT T1.amount_of_loan, T1.date_of_loan FROM Student_Loans AS T1 INNER JOIN Students AS T2 ON T1.student_id = T2.student_id INNER JOIN Achievements AS T3 ON T2.student_id = T3.student_id GROUP BY T3.student_id HAVING COUNT(T3.student_id) >= 2
SELECT T1.teacher_id, T1.teacher_details FROM Teachers AS T1 INNER JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id ORDER BY COUNT(T1.teacher_id) DESC LIMIT 1
SELECT T1.teacher_details, T1.teacher_id FROM Teachers AS T1 INNER JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T2.teacher_id ORDER BY COUNT(T2.teacher_id) DESC LIMIT 1
SELECT DISTINCT T1.detention_type_description FROM Ref_Detention_Type AS T1 INNER JOIN Detention AS T2 ON T1.detention_type_code = T2.detention_type_code
SELECT DISTINCT T1.detention_type_description FROM Ref_Detention_Type AS T1 INNER JOIN Detention AS T2 ON T1.detention_type_code = T2.detention_type_code
 SELECT S.bio_data, S.student_details, RT.address_type_description FROM Students AS S INNER JOIN Students_Addresses AS SA ON S.student_id = SA.student_id INNER JOIN Addresses AS A ON SA.address_id = A.address_id INNER JOIN Students_Addresses AS SA2 ON A.address_id = SA2.address_id INNER JOIN Ref_Address_Types AS RT ON SA2.address_type_code = RT.address_type_code
SELECT T1.bio_data, T1.student_details, T3.address_type_description FROM Students AS T1 INNER JOIN Students_Addresses AS T2 ON T1.student_id = T2.student_id INNER JOIN Addresses AS T3 ON T2.address_id = T3.address_id
SELECT T1.address_details, T2.bio_data FROM Addresses AS T1 INNER JOIN Students AS T2 ON T1.address_id = T2.student_id
SELECT T1.address_details, T2.bio_data FROM Addresses AS T1 INNER JOIN Students AS T2 ON T1.address_id = T2.student_id
SELECT T1.bio_data, T2.date_of_transcript FROM Students AS T1 INNER JOIN Transcripts AS T2 ON T1.student_id = T2.student_id
SELECT T1.bio_data, T2.date_of_transcript FROM Students AS T1 INNER JOIN Transcripts AS T2 ON T1.student_id = T2.student_id
SELECT COUNT(*), T1.behaviour_monitoring_details FROM Behaviour_Monitoring AS T1 INNER JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1
SELECT COUNT(*), behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.bio_data, T1.student_details FROM Students AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id INNER JOIN ( SELECT event_type_code, COUNT(*) AS cnt FROM Student_Events GROUP BY event_type_code ) AS T3 ON T2.behaviour_monitoring_details = T3.event_type_code WHERE T3.cnt = 3 INTERSECT SELECT T1.bio_data, T1.student_details FROM Students AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id INNER JOIN ( SELECT behaviour_monitoring_details, COUNT(*) AS cnt FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ) AS T4 ON T2.behaviour_monitoring_details = T4.behaviour_monitoring_details WHERE T4.cnt = 3
SELECT T1.bio_data, T1.student_details FROM Students AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id GROUP BY T2.behaviour_monitoring_details ORDER BY COUNT(T2.behaviour_monitoring_details) DESC LIMIT 1
SELECT T1.bio_data FROM Students AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id GROUP BY T2.behaviour_monitoring_details ORDER BY COUNT(T2.behaviour_monitoring_details) DESC LIMIT 1
SELECT T1.bio_data FROM Students AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id GROUP BY T2.behaviour_monitoring_details ORDER BY COUNT(T2.behaviour_monitoring_details) DESC LIMIT 1
SELECT S.bio_data, SE.event_date FROM Students S INNER JOIN Student_Events SE ON S.student_id = SE.student_id
SELECT T1.bio_data, T2.event_date FROM Students AS T1 INNER JOIN Student_Events AS T2 ON T1.student_id = T2.student_id
SELECT COUNT(T1.student_id), T2.event_type_code, T2.event_type_description  FROM Student_Events AS T1  JOIN Ref_Event_Types AS T2 ON T1.event_type_code = T2.event_type_code  GROUP BY T2.event_type_code  ORDER BY COUNT(T1.student_id) DESC  LIMIT 1
SELECT T1.event_type_code, T1.event_type_description, COUNT(T2.student_id) FROM Ref_Event_Types AS T1 INNER JOIN Student_Events AS T2 ON T1.event_type_code = T2.event_type_code GROUP BY T1.event_type_code ORDER BY COUNT(T2.student_id) DESC LIMIT 1
SELECT T1.achievement_details, T2.achievement_type_description FROM Achievements AS T1 INNER JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code = T2.achievement_type_code
SELECT T1.achievement_details, T2.achievement_type_description FROM Achievements AS T1 INNER JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code = T2.achievement_type_code
SELECT COUNT(T1.teacher_id) FROM Teachers AS T1 INNER JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id LEFT JOIN Achievements AS T3 ON T2.student_id = T3.student_id WHERE T3.achievement_id IS NULL
SELECT COUNT(T1.teacher_id) FROM Teachers AS T1 INNER JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id LEFT JOIN Achievements AS T3 ON T2.student_id = T3.student_id WHERE T3.achievement_id IS NULL
SELECT date_of_transcript, transcript_details FROM Transcripts
SELECT date_of_transcript, transcript_details FROM Transcripts
 SELECT T1.achievement_type_code, T2.achievement_details, T2.date_achievement FROM Ref_Achievement_Type AS T1 INNER JOIN Achievements AS T2 ON T1.achievement_type_code = T2.achievement_type_code
SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements
SELECT datetime_detention_start, datetime_detention_end FROM Detention
SELECT datetime_detention_start, datetime_detention_end FROM Detention
SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'
SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'
SELECT T1.teacher_details, T2.bio_data, T2.student_details FROM Teachers AS T1 INNER JOIN Classes AS T3 ON T1.teacher_id = T3.teacher_id INNER JOIN Students AS T2 ON T2.student_id = T3.student_id
SELECT T1.teacher_details, T2.student_details FROM Teachers AS T1 INNER JOIN Classes AS T3 ON T1.teacher_id = T3.teacher_id INNER JOIN Students AS T2 ON T2.student_id = T3.student_id
SELECT teacher_id, COUNT(class_id) FROM Classes GROUP BY teacher_id ORDER BY COUNT(class_id) DESC LIMIT 1
SELECT T1.teacher_id, COUNT(T2.class_id) FROM Teachers AS T1 INNER JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id ORDER BY COUNT(T2.class_id) DESC LIMIT 1
SELECT MAX(COUNT(class_id)) FROM Classes
SELECT S.student_id, COUNT(C.class_id) FROM Students S LEFT JOIN Classes C ON S.student_id = C.student_id GROUP BY S.student_id ORDER BY COUNT(C.class_id) DESC LIMIT 1
SELECT DISTINCT s.student_id, s.bio_data FROM Students s LEFT JOIN Classes c ON s.student_id = c.student_id GROUP BY s.student_id HAVING COUNT(c.class_id) = 2
SELECT S.student_id, S.bio_data FROM Students S JOIN Classes C ON S.student_id = C.student_id GROUP BY S.student_id HAVING COUNT(C.class_id) = 2
 SELECT t1.detention_type_code, t1.detention_type_description  FROM Ref_Detention_Type AS t1  JOIN (   SELECT detention_type_code, COUNT(*) AS count    FROM Ref_Detention_Type    GROUP BY detention_type_code ) AS t2  ON t1.detention_type_code = t2.detention_type_code  ORDER BY t2.count ASC  LIMIT 1
 SELECT t1.detention_type_code, t1.detention_type_description  FROM Ref_Detention_Type AS t1  JOIN (   SELECT detention_type_code, COUNT(*) AS count    FROM Ref_Detention_Type    GROUP BY detention_type_code ) AS t2  ON t1.detention_type_code = t2.detention_type_code  ORDER BY t2.count ASC  LIMIT 1
SELECT s.bio_data, s.student_details FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE sl.amount_of_loan > ( SELECT AVG(amount_of_loan) FROM Student_Loans )
SELECT S.bio_data, S.student_details FROM Students AS S INNER JOIN Student_Loans AS SL ON S.student_id = SL.student_id WHERE SL.amount_of_loan > ( SELECT AVG(amount_of_loan) FROM Student_Loans )
SELECT MIN(date_of_loan) FROM Student_Loans
SELECT MIN(date_of_loan) FROM Student_Loans
SELECT s.bio_data FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id ORDER BY sl.amount_of_loan ASC LIMIT 1
SELECT S.bio_data FROM Students AS S INNER JOIN Student_Loans AS SL ON S.student_id = SL.student_id ORDER BY SL.amount_of_loan ASC LIMIT 1
SELECT T1.date_of_transcript FROM Transcripts AS T1 INNER JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id WHERE T2.amount_of_loan = ( SELECT MAX(amount_of_loan) FROM Student_Loans )
SELECT T1.date_of_transcript FROM Transcripts AS T1 INNER JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id ORDER BY T2.amount_of_loan DESC LIMIT 1
SELECT T1.teacher_details FROM Teachers AS T1 INNER JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id INNER JOIN Transcripts AS T3 ON T2.student_id = T3.student_id WHERE T3.date_of_transcript = ( SELECT MIN(date_of_transcript) FROM Transcripts )
SELECT T1.teacher_details FROM Teachers AS T1 INNER JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id INNER JOIN Transcripts AS T3 ON T2.student_id = T3.student_id ORDER BY T3.date_of_transcript LIMIT 1
SELECT student_id, SUM(amount_of_loan) FROM Student_Loans GROUP BY student_id
SELECT S.student_id, SUM(T.amount_of_loan) FROM Students_Addresses AS SA INNER JOIN Students AS S ON SA.student_id = S.student_id INNER JOIN Student_Loans AS T ON T.student_id = S.student_id GROUP BY S.student_id
SELECT S.student_id, S.bio_data, COUNT(C.class_id) FROM Students S LEFT JOIN Classes C ON S.student_id = C.student_id GROUP BY S.student_id, S.bio_data
SELECT S.student_id, S.bio_data, COUNT(C.class_id) FROM Students S LEFT JOIN Classes C ON S.student_id = C.student_id GROUP BY S.student_id
SELECT COUNT(DISTINCT student_id) FROM Detention
SELECT COUNT(DISTINCT T1.student_id) FROM Students AS T1 INNER JOIN Detention AS T2 ON T1.student_id = T2.student_id
SELECT address_type_code, event_type_description FROM Ref_Address_Types ORDER BY COUNT(student_address_id) DESC LIMIT 1
SELECT T1.address_type_code, T1.address_type_description FROM Ref_Address_Types AS T1 INNER JOIN Students_Addresses AS T2 ON T1.address_type_code = T2.address_type_code GROUP BY T1.address_type_code ORDER BY COUNT(T1.address_type_code) DESC LIMIT 1
SELECT T1.bio_data FROM Students AS T1 INNER JOIN Student_Events AS T2 ON T1.student_id = T2.student_id WHERE T2.event_id NOT IN ( SELECT event_id FROM Student_Loans )
SELECT T1.bio_data FROM Students AS T1 INNER JOIN Student_Events AS T2 ON T1.student_id = T2.student_id LEFT JOIN Student_Loans AS T3 ON T1.student_id = T3.student_id WHERE T3.student_loan_id IS NULL
SELECT T1.date_from, T1.date_to FROM Students_Addresses AS T1 INNER JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.student_id IN ( SELECT T3.student_id FROM Transcripts AS T3 GROUP BY T3.student_id HAVING COUNT(T3.transcript_id) = 2 )
SELECT T1.datetime_detention_start, T1.datetime_detention_end  FROM Detention AS T1  INNER JOIN Students AS T2 ON T1.student_id = T2.student_id  INNER JOIN Transcripts AS T3 ON T2.student_id = T3.student_id  GROUP BY T2.student_id  HAVING COUNT(T3.transcript_id) = 2
SELECT datetime_detention_start FROM Detention
SELECT datetime_detention_start FROM Detention
SELECT Name FROM Author
SELECT Name FROM Author
SELECT Name, Address FROM Client
SELECT Name, Address FROM Client
SELECT Title, ISBN, SalePrice FROM Book
SELECT Title, ISBN, SalePrice FROM Book
SELECT COUNT(*) FROM Book
SELECT COUNT(*) FROM Book
SELECT COUNT(*) FROM Author
SELECT COUNT(idAuthor) FROM Author
SELECT COUNT(IdClient) FROM Client
SELECT COUNT(IdClient) FROM Client
SELECT Name, Address FROM Client ORDER BY Name
SELECT Name, Address FROM Client ORDER BY Name
 SELECT T1.Title, T3.Name FROM Book AS T1 INNER JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Author AS T3 ON T2.Author = T3.idAuthor
SELECT T1.Title, T3.Name FROM Book AS T1 INNER JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Author AS T3 ON T2.Author = T3.idAuthor
SELECT o.IdOrder, c.Name FROM Orders o INNER JOIN Client c ON o.IdClient = c.IdClient
SELECT Orders.IdOrder, Client.Name FROM Orders INNER JOIN Client ON Orders.IdClient = Client.IdClient
SELECT T1.Name, COUNT(*) FROM Author AS T1 INNER JOIN Author_Book AS T2 ON T1.idAuthor = T2.Author GROUP BY T1.idAuthor
SELECT T1.Name, COUNT(*) FROM Author AS T1 INNER JOIN Author_Book AS T2 ON T1.idAuthor = T2.Author GROUP BY T1.idAuthor
SELECT T1.ISBN, COUNT(T2.IdOrder) FROM Book AS T1 LEFT JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN GROUP BY T1.ISBN
SELECT ISBN, COUNT(*) FROM Books_Order GROUP BY ISBN
SELECT B.ISBN, SUM(BO.amount) FROM Book B JOIN Books_Order BO ON B.ISBN = BO.ISBN GROUP BY B.ISBN
SELECT T1.ISBN, SUM(T2.amount) FROM Book AS T1 INNER JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN GROUP BY T1.ISBN
SELECT T1.Title FROM Book AS T1 INNER JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN ORDER BY T2.ISBN DESC LIMIT 1
SELECT T1.Title FROM Book AS T1 INNER JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN ORDER BY T2.amount DESC LIMIT 1
SELECT T1.Title, T1.PurchasePrice FROM Book AS T1 INNER JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN ORDER BY T2.amount DESC LIMIT 1
 SELECT T1.Title, T1.PurchasePrice FROM Book AS T1 INNER JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN GROUP BY T1.ISBN ORDER BY SUM(T2.amount) DESC LIMIT 1
SELECT T1.Title FROM Book AS T1 INNER JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN
SELECT DISTINCT T1.Title FROM Book AS T1 INNER JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN WHERE T2.IdOrder IN ( SELECT IdOrder FROM Orders WHERE DateOrder < DATE('now') )
SELECT DISTINCT T1.Name FROM Client AS T1 INNER JOIN Orders AS T2 ON T1.IdClient = T2.IdClient
SELECT DISTINCT T1.Name FROM Client AS T1 INNER JOIN Orders AS T2 ON T1.IdClient = T2.IdClient
SELECT C.Name, COUNT(O.IdOrder) FROM Client C LEFT JOIN Orders O ON C.IdClient = O.IdClient GROUP BY C.IdClient
SELECT T1.Name, COUNT(T2.IdOrder) FROM Client AS T1 LEFT JOIN Orders AS T2 ON T1.IdClient = T2.IdClient GROUP BY T1.IdClient
SELECT T1.Name FROM Client AS T1 INNER JOIN Orders AS T2 ON T1.IdClient = T2.IdClient GROUP BY T1.IdClient ORDER BY COUNT(T2.IdOrder) DESC LIMIT 1
SELECT T1.Name FROM Client AS T1 INNER JOIN Orders AS T2 ON T1.IdClient = T2.IdClient GROUP BY T2.IdClient ORDER BY COUNT(T2.IdClient) DESC LIMIT 1
SELECT T1.Name, SUM(T2.amount) FROM Client AS T1 INNER JOIN Books_Order AS T2 ON T1.IdClient = T2.IdOrder GROUP BY T1.IdClient
SELECT C.Name, SUM(BO.amount) FROM Client C LEFT JOIN Books_Order BO ON C.IdClient = BO.IdOrder GROUP BY C.Name
SELECT T1.Name FROM Client AS T1 INNER JOIN Orders AS T2 ON T1.IdClient = T2.IdClient INNER JOIN Books_Order AS T3 ON T2.IdOrder = T3.IdOrder GROUP BY T1.IdClient ORDER BY SUM(T3.amount) DESC LIMIT 1
SELECT T1.Name FROM Client AS T1 INNER JOIN Orders AS T2 ON T1.IdClient = T2.IdClient ORDER BY ( SELECT SUM(T3.amount) FROM Books_Order AS T3 INNER JOIN Orders AS T4 ON T3.IdOrder = T4.IdOrder WHERE T4.IdClient = T2.IdClient ) DESC LIMIT 1
SELECT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order)
SELECT T1.Title FROM Book AS T1 INNER JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN WHERE T1.ISBN NOT IN (SELECT ISBN FROM Books_Order)
SELECT Name FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders)
SELECT Name FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders)
SELECT MAX(SalePrice), MIN(SalePrice) FROM Book
SELECT MAX(SalePrice), MIN(SalePrice) FROM Book
SELECT AVG(PurchasePrice), AVG(SalePrice) FROM Book
SELECT AVG(PurchasePrice), AVG(SalePrice) FROM Book
SELECT MAX(SalePrice - PurchasePrice) FROM Book
SELECT MAX(SalePrice - PurchasePrice) FROM Book
SELECT Title FROM Book WHERE SalePrice > ( SELECT AVG(SalePrice) FROM Book )
SELECT T1.Title FROM Book AS T1 INNER JOIN ( SELECT ISBN, AVG(SalePrice) AS avg FROM Book GROUP BY ISBN ) AS T2 ON T1.ISBN = T2.ISBN WHERE T1.SalePrice > T2.avg
SELECT Title FROM Book WHERE SalePrice = ( SELECT MIN(SalePrice) FROM Book )
SELECT T1.Title FROM Book AS T1 INNER JOIN ( SELECT ISBN, MIN(SalePrice) AS MinSalePrice FROM Book GROUP BY ISBN ) AS T2 ON T1.ISBN = T2.ISBN AND T1.SalePrice = T2.MinSalePrice
SELECT Title FROM Book ORDER BY PurchasePrice DESC LIMIT 1
SELECT T1.Title FROM Book AS T1 INNER JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN ORDER BY T1.PurchasePrice DESC LIMIT 1
SELECT AVG(T2.SalePrice) FROM Author AS T1 INNER JOIN Book AS T2 ON T1.idAuthor = T2.Author WHERE T1.Name = 'George Orwell'
SELECT AVG(T2.SalePrice) FROM Author AS T1 INNER JOIN Book AS T2 ON T1.idAuthor = T2.Author WHERE T1.Name = 'George Orwell'
SELECT T2.SalePrice FROM Author_Book AS T1 INNER JOIN Book AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Author AS T3 ON T1.Author = T3.idAuthor WHERE T3.Name = 'Plato'
SELECT T2.SalePrice FROM Author AS T1 INNER JOIN Book AS T2 ON T1.idAuthor = T2.Author WHERE T1.Name = 'Plato'
SELECT T1.Title FROM Book AS T1 INNER JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T3.Name = 'George Orwell' ORDER BY T1.SalePrice LIMIT 1
SELECT T1.Title FROM Book AS T1 INNER JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T3.Name = 'George Orwell' ORDER BY T1.SalePrice LIMIT 1
SELECT T1.Title FROM Book AS T1 INNER JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T3.Name = 'Plato' AND T1.SalePrice < (SELECT AVG(SalePrice) FROM Book)
SELECT T1.Title FROM Book AS T1 INNER JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T3.Name = 'Plato' AND T1.SalePrice < ( SELECT AVG(T1.SalePrice) FROM Book AS T1 )
 SELECT T3.Name FROM Book AS T1 INNER JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T1.Title = 'Pride and Prejudice'
 SELECT T3.Name FROM Book AS T1 INNER JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T1.Title = 'Pride and Prejudice'
SELECT DISTINCT T1.Title  FROM Book AS T1  JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN  JOIN Author AS T3 ON T2.Author = T3.idAuthor  WHERE T3.Name LIKE '%Plato%'
SELECT T1.Title FROM Book AS T1 INNER JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T3.Name LIKE '%Plato%'
SELECT COUNT(*) FROM Book AS T1 INNER JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN WHERE T1.Title = 'Pride and Prejudice'
SELECT COUNT(T2.IdOrder) FROM Book AS T1 INNER JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN WHERE T1.Title = 'Pride and Prejudice'
SELECT DISTINCT IdOrder FROM Books_Order AS T1 INNER JOIN Book AS T2 ON T1.ISBN = T2.ISBN WHERE T2.Title IN ('Pride and Prejudice', 'The Little Prince')
SELECT DISTINCT T2.IdOrder FROM Books_Order AS T1 INNER JOIN Orders AS T2 ON T1.IdOrder = T2.IdOrder INNER JOIN Books_Order AS T3 ON T1.IdOrder = T3.IdOrder INNER JOIN Book AS T4 ON T3.ISBN = T4.ISBN INNER JOIN Book AS T5 ON T1.ISBN = T5.ISBN WHERE T4.Title = 'Pride and Prejudice' AND T5.Title = 'The Little Prince'
SELECT DISTINCT T1.ISBN FROM Books_Order AS T1 INNER JOIN Orders AS T2 ON T1.IdOrder = T2.IdOrder INNER JOIN Client AS T3 ON T2.IdClient = T3.IdClient WHERE T3.Name = 'Peter Doe' INTERSECT SELECT DISTINCT T1.ISBN FROM Books_Order AS T1 INNER JOIN Orders AS T2 ON T1.IdOrder = T2.IdOrder INNER JOIN Client AS T3 ON T2.IdClient = T3.IdClient WHERE T3.Name = 'James Smith'
SELECT DISTINCT T1.ISBN FROM Books_Order AS T1 INNER JOIN Orders AS T2 ON T1.IdOrder = T2.IdOrder INNER JOIN Client AS T3 ON T2.IdClient = T3.IdClient WHERE T3.Name = 'Peter Doe' INTERSECT SELECT DISTINCT T1.ISBN FROM Books_Order AS T1 INNER JOIN Orders AS T2 ON T1.IdOrder = T2.IdOrder INNER JOIN Client AS T3 ON T2.IdClient = T3.IdClient WHERE T3.Name = 'James Smith'
SELECT T1.Title FROM Book AS T1 INNER JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Orders AS T3 ON T2.IdOrder = T3.IdOrder INNER JOIN Client AS T4 ON T3.IdClient = T4.IdClient WHERE T4.Name = 'Peter Doe' AND T4.Name!= 'James Smith'
SELECT T1.Title FROM Book AS T1 INNER JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Orders AS T3 ON T2.IdOrder = T3.IdOrder WHERE T3.IdClient = 'Client001' AND T3.IdClient!= 'Client002'
SELECT DISTINCT T1.Name FROM Client AS T1 INNER JOIN Orders AS T2 ON T1.IdClient = T2.IdClient INNER JOIN Books_Order AS T3 ON T2.IdOrder = T3.IdOrder INNER JOIN Book AS T4 ON T3.ISBN = T4.ISBN WHERE T4.Title = 'Pride and Prejudice'
SELECT T1.Name FROM Client AS T1 INNER JOIN Orders AS T2 ON T1.IdClient = T2.IdClient INNER JOIN Books_Order AS T3 ON T2.IdOrder = T3.IdOrder INNER JOIN Book AS T4 ON T3.ISBN = T4.ISBN WHERE T4.Title = 'Pride and Prejudice'
SELECT COUNT(Book_ID) FROM book
SELECT Title FROM book ORDER BY Title ASC
SELECT Title FROM book ORDER BY Pages DESC
SELECT Type, Release FROM book
 SELECT b.Book_ID, MAX(b.Chapters) AS max_chapters, MIN(b.Chapters) AS min_chapters FROM book b GROUP BY b.Book_ID
SELECT Title FROM book WHERE Type!= 'Poet'
SELECT AVG(Rating) FROM review
 SELECT T1.Title, T2.Rating FROM book AS T1 INNER JOIN review AS T2 ON T1.Book_ID = T2.Book_ID
 SELECT T1.Rating FROM review AS T1 INNER JOIN book AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Chapters DESC LIMIT 1
SELECT T2.Rank FROM book AS T1 INNER JOIN review AS T2 ON T1.Book_ID
 SELECT T1.Title FROM book AS T1 INNER JOIN review AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Rank DESC LIMIT 1
 SELECT AVG(T2.Readers_in_Million) FROM book AS T1 INNER JOIN review AS T2 ON T1.Book_ID = T2.Book_ID WHERE T1.Type = 'Novel'
SELECT Type, COUNT(Book_ID) FROM book GROUP BY Type
SELECT Type FROM book GROUP BY Type ORDER BY COUNT(Type) DESC LIMIT 1
 SELECT DISTINCT T1.Type  FROM book AS T1  INNER JOIN (   SELECT Book_ID, COUNT(Book_ID)    FROM book    GROUP BY Book_ID    HAVING COUNT(Book_ID) >= 3 ) AS T2  ON T1.Book_ID = T2.Book_ID
 SELECT T1.Title FROM book AS T1 INNER JOIN review AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Rating ASC
SELECT T1.Title, T1.Audio FROM book AS T1 INNER JOIN review AS T2 ON T1.Book_ID = T2.Book_ID
 SELECT COUNT(Book_ID) FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review)
SELECT DISTINCT Type FROM book WHERE Chapters > 75 INTERSECT SELECT DISTINCT Type FROM book WHERE Chapters < 50
SELECT COUNT(DISTINCT Type) FROM book
 SELECT T1.Type, T1.Title FROM book AS T1 LEFT JOIN review AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Rating IS NULL
SELECT COUNT(Customer_ID) FROM customer
SELECT COUNT(Customer_ID) FROM customer
SELECT Name FROM customer ORDER BY Level_of_Membership ASC
SELECT Name FROM customer ORDER BY Level_of_Membership ASC
SELECT Nationality, Card_Credit FROM customer
SELECT Nationality, Card_Credit FROM customer
SELECT Name FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia'
SELECT Name FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia'
SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1
SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1
SELECT T1.Card_Credit FROM customer AS T1 INNER JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Level_of_Membership = ( SELECT MAX(Level_of_Membership) FROM customer )
SELECT T1.Card_Credit FROM customer AS T1 INNER JOIN ( SELECT Customer_ID, MAX(Level_of_Membership) AS max_level FROM customer GROUP BY Customer_ID ) AS T2 ON T1.Customer_ID = T2.Customer_ID AND T1.Level_of_Membership = T2.max_level
SELECT Nationality, COUNT(Customer_ID) FROM customer GROUP BY Nationality
SELECT Nationality, COUNT(Customer_ID) FROM customer GROUP BY Nationality
SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(Nationality) DESC LIMIT 1
SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(Customer_ID) DESC LIMIT 1
SELECT T1.Nationality FROM customer AS T1 INNER JOIN customer AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Card_Credit < 50 AND T2.Card_Credit > 75
SELECT DISTINCT T1.Nationality FROM customer AS T1 INNER JOIN customer AS T2 ON T1.Nationality = T2.Nationality WHERE T1.Card_Credit > 50 AND T2.Card_Credit < 75
 SELECT T1.Name, T2.Dish_Name FROM customer AS T1 INNER JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID
SELECT T1.Name, T3.Dish_Name FROM customer AS T1 INNER JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID INNER JOIN customer_order AS T3 ON T2.Customer_ID = T3.Customer_ID AND T2.Branch_ID = T3.Branch_ID
SELECT c.Name, co.Dish_Name FROM customer_order co JOIN customer c ON co.Customer_ID = c.Customer_ID ORDER BY co.Quantity DESC
SELECT c.Name, co.Dish_Name, co.Quantity FROM customer_order co JOIN customer c ON co.Customer_ID = c.Customer_ID ORDER BY co.Quantity DESC
SELECT T1.Name, SUM(T2.Quantity) FROM customer AS T1 INNER JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.Customer_ID
SELECT T1.Name, SUM(T2.Quantity) FROM customer AS T1 INNER JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.Customer_ID
SELECT c.Customer_ID, c.Name, SUM(co.Quantity) FROM customer c LEFT JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Customer_ID HAVING SUM(co.Quantity) > 1
SELECT T1.Name FROM customer AS T1 INNER JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T2.Customer_ID HAVING SUM(T2.Quantity) > 1
SELECT DISTINCT Manager FROM branch
SELECT DISTINCT Manager FROM branch
SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)
SELECT Name FROM customer WHERE Customer_ID NOT IN ( SELECT Customer_ID FROM customer_order )
SELECT COUNT(Member_ID) FROM member
SELECT Name FROM member ORDER BY Age ASC
SELECT Name, Nationality FROM member
SELECT Name FROM member WHERE Nationality!= 'England'
SELECT Name FROM member WHERE Age = 19 OR Age = 20
SELECT Name FROM member ORDER BY Age DESC LIMIT 1
SELECT Nationality, COUNT(Member_ID) FROM member GROUP BY Nationality
SELECT Nationality FROM member GROUP BY Nationality ORDER BY COUNT(Nationality) DESC LIMIT 1
 SELECT DISTINCT T1.Nationality FROM member AS T1 INNER JOIN club_leader AS T2 ON T1.Member_ID = T2.Member_ID GROUP BY T1.Nationality HAVING COUNT(T2.Member_ID) >= 2
 SELECT T1.Name, T3.Club_Name FROM member AS T1 INNER JOIN club_leader AS T2 ON T1.Member_ID = T2.Member_ID INNER JOIN club AS T3 ON T2.Club_ID = T3.Club_ID
SELECT m.Name FROM club_leader cl INNER JOIN member m ON cl.Member_ID = m.Member_ID INNER JOIN club c ON cl.Club_ID = c.Club_ID WHERE c.Overall_Ranking > 100
SELECT T1.Name FROM club_leader AS T2 INNER JOIN member AS T1 ON T2.Member_ID = T1.Member_ID WHERE T2.Year_Join < '2018'
SELECT T1.Name FROM club AS T1 INNER JOIN club_leader AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Club_Name = 'Houston' AND T
SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM club_leader)
 SELECT T1.Nationality FROM member AS T1 INNER JOIN club_leader AS T2 ON T1.Member_ID = T2.Member_ID WHERE T1.Age > 22 INTERSECT SELECT T1.Nationality FROM member AS T1 INNER JOIN club_leader AS T2 ON T1.Member_ID = T2.Member_ID WHERE T1.Age < 19
SELECT AVG(T1.Age) FROM member AS T1 INNER JOIN club_leader AS T2 ON T1.Member_ID = T2.Member_ID
SELECT Club_Name FROM club WHERE Club_Name LIKE '%state%'
SELECT cs.Collection_Subset_Name  FROM Collection_Subsets cs
SELECT T1.Collection_Subset_Name FROM Collection_Subsets AS T1 INNER JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID = T2.Collection_Subset_ID
SELECT T1.Collecrtion_Subset_Details FROM Collection_Subsets AS T1 INNER JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID = T2.Collection_Subset_ID WHERE T1.Collection_Subset_Name = 'Top collection'
SELECT T1.Collection_Description FROM Collections AS T1 INNER JOIN Collection_Subset_Members AS T2 ON T1.Collection_ID = T2.Collection_ID INNER JOIN Collection_Subsets AS T3 ON T2.Collection_Subset_ID = T3.Collection_Subset_ID WHERE T3.Collection_Subset_Name = 'Top collection'
 SELECT DISTINCT ds.Document_Subset_Name  FROM Document_Subset_Members dsm  JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID
SELECT T1.Document_Subset_Name FROM Document_Subsets AS T1
SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'
SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'
SELECT Document_Object_ID FROM Document_Objects
SELECT Document_Object_ID FROM Document_Objects
SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin'
SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin'
SELECT Owner FROM Document_Objects WHERE Description = 'Braeden Collection'
SELECT T1.Owner FROM Document_Objects AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID INNER JOIN Collections AS T3 ON T2.Collection_ID = T3.Collection_ID WHERE T3.Collection_Name = 'Braeden Collection'
SELECT T2.Owner FROM Document_Objects AS T1 INNER JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner = 'Marlin'
SELECT T2.Owner FROM Document_Objects AS T1 INNER JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner = 'Marlin'
SELECT DISTINCT T1.Description FROM Document_Objects AS T1 INNER JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID
SELECT DISTINCT T1.Description FROM Document_Objects AS T1 INNER JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID
SELECT COUNT(DISTINCT Document_Object_ID) FROM Document_Objects WHERE Owner = 'Marlin'
SELECT COUNT(DISTINCT Document_Object_ID) FROM Document_Objects WHERE Owner = 'Marlin'
SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NULL
SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NULL
SELECT Document_Object_ID, COUNT(*) FROM Document_Objects WHERE Parent_Document_Object_ID IS NULL GROUP BY Document_Object_ID
SELECT COUNT(DISTINCT Document_Object_ID) AS Child_Documents, Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID
SELECT Collection_Name FROM Collections
SELECT Collection_Name FROM Collections
 SELECT T1.Collection_Description FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID INNER JOIN Document_Objects AS T3 ON T2.Document_Object_ID = T3.Document_Object_ID WHERE T1.Collection_Name = 'Best'
SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best'
SELECT T2.Collection_Description FROM Collections AS T1 INNER JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = 'Nice'
SELECT T2.Collection_Name FROM Collections AS T1 INNER JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = 'Nice'
SELECT Collection_Name FROM Collections WHERE Parent_Collection_ID IS NULL
SELECT Collection_Name FROM Collections WHERE Parent_Collection_ID IS NULL
SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(*) > 1)
SELECT T1.Document_Object_ID FROM Document_Objects AS T1 INNER JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID GROUP BY T1.Document_Object_ID HAVING COUNT(T2.Document_Object_ID) > 1
SELECT COUNT(CASE WHEN Parent_Collection_ID IS NOT NULL THEN 1 ELSE NULL END) FROM Collections WHERE Collection_Name = 'Best'
SELECT COUNT(Collection_ID) FROM Collections WHERE Collection_Name = 'Best'
SELECT T1.Document_Object_ID FROM Document_Objects AS T1 INNER JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner = 'Ransom'
SELECT T1.Document_Object_ID FROM Document_Objects AS T1 INNER JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner = 'Ransom'
SELECT cs.Collection_Subset_ID, cs.Collection_Subset_Name, COUNT(csm.Collection_ID) FROM Collection_Subsets cs LEFT JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID GROUP BY cs.Collection_Subset_ID, cs.Collection_Subset_Name
SELECT cs.Collection_Subset_ID, cs.Collection_Subset_Name, COUNT(cs2.Collection_ID) FROM Collection_Subsets cs LEFT JOIN Collection_Subset_Members cs2 ON cs.Collection_Subset_ID = cs2.Collection_Subset_ID GROUP BY cs.Collection_Subset_ID, cs.Collection_Subset_Name
SELECT Document_Object_ID, COUNT(*) FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT Document_Object_ID,  COUNT(*) FROM Document_Subset_Members GROUP BY Document_Object_ID
SELECT Document_Object_ID, COUNT(*) FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY COUNT(*) LIMIT 1
SELECT Document_Object_ID FROM Document_Objects GROUP BY Document_Object_ID ORDER BY COUNT(Document_Object_ID) ASC LIMIT 1
SELECT Document_Object_ID, COUNT(*) FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING COUNT(*) BETWEEN 2 AND 4
SELECT Document_Object_ID, COUNT(*) FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING COUNT(*) BETWEEN 2 AND 4
SELECT DISTINCT T1.Owner FROM Document_Objects AS T1 INNER JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID INNER JOIN Document_Objects AS T3 ON T2.Related_Document_Object_ID = T3.Document_Object_ID WHERE T3.Owner = 'Braeden'
SELECT DISTINCT T1.Owner FROM Document_Objects AS T1 INNER JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID WHERE T2.Related_Document_Object_ID IN ( SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden' )
SELECT DISTINCT T1.Document_Subset_Name  FROM Document_Subsets AS T1  INNER JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID  INNER JOIN Document_Objects AS T3 ON T2.Document_Object_ID = T3.Document_Object_ID  WHERE T3.Owner = 'Braeden'
SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subset_Members AS T1 INNER JOIN Document_Objects AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID WHERE T2.Owner = 'Braeden'
SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DM.Document_Object_ID) FROM Document_Subsets DS LEFT JOIN Document_Subset_Members DM ON DS.Document_Subset_ID = DM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name
SELECT T1.Document_Subset_ID, T1.Document_Subset_Name, COUNT(DISTINCT T2.Document_Object_ID) FROM Document_Subsets AS T1 LEFT JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID GROUP BY T1.Document_Subset_ID, T1.Document_Subset_Name
 SELECT ds.Document_Subset_ID, ds.Document_Subset_Name, COUNT(DISTINCT dm.Document_Object_ID) FROM Document_Subsets ds LEFT JOIN Document_Subset_Members dm ON ds.Document_Subset_ID = dm.Document_Subset_ID GROUP BY ds.Document_Subset_ID ORDER BY COUNT(DISTINCT dm.Document_Object_ID) DESC LIMIT 1
SELECT ds.Document_Subset_ID, ds.Document_Subset_Name, COUNT(DISTINCT dm.Document_Object_ID) AS num_documents FROM Document_Subsets ds JOIN Document_Subset_Members dm ON ds.Document_Subset_ID = dm.Document_Subset_ID GROUP BY ds.Document_Subset_ID, ds.Document_Subset_Name ORDER BY num_documents DESC LIMIT 1
SELECT T1.Document_Object_ID FROM Document_Subset_Members AS T1 INNER JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID WHERE T2.Document_Subset_Name = 'Best for 2000'
SELECT T1.Document_Object_ID FROM Document_Subset_Members AS T1 INNER JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID WHERE T2.Document_Subset_Name = 'Best for 2000'
SELECT T1.Document_Subset_Name, T2.Document_Object_ID  FROM Document_Subsets AS T1  INNER JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID
SELECT DISTINCT T1.Document_Subset_Name, T1.Document_Subset_ID, T2.Document_Object_ID FROM Document_Subset_Members AS T1 INNER JOIN Document_Objects AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID
SELECT DISTINCT T1.Collection_Name FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID INNER JOIN Document_Objects AS T3 ON T2.Document_Object_ID = T3.Document_Object_ID WHERE T3.Owner = 'Ransom '
SELECT T2.Collection_Name FROM Document_Objects AS T1 INNER JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T1.Owner = 'Ransom'
SELECT COUNT(T2.Collection_ID), T1.Document_Object_ID FROM Document_Objects AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID GROUP BY T1.Document_Object_ID
SELECT Document_Object_ID, COUNT(DISTINCT Collection_ID) FROM Documents_in_Collections GROUP BY Document_Object_ID
SELECT COUNT(DISTINCT t2.Document_Object_ID) FROM Collections AS t1 INNER JOIN Documents_in_Collections AS t2 ON t1.Collection_ID = t2.Collection_ID WHERE t1.Collection_Name = 'Best'
 SELECT COUNT(DISTINCT t2.Document_Object_ID) FROM Documents_in_Collections AS t2 INNER JOIN Collections AS t1 ON t2.Collection_ID = t1.Collection_ID WHERE t1.Collection_Name = 'Best'
SELECT T1.Document_Object_ID FROM Documents_in_Collections AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = 'Best'
SELECT COUNT(DISTINCT T1.Document_Object_ID)  FROM Documents_in_Collections AS T1  INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID  WHERE T2.Collection_Name = 'Best'
SELECT C.Collection_Name, C.Collection_ID, COUNT(DI.Collection_ID) FROM Collections C LEFT JOIN Documents_in_Collections DI ON C.Collection_ID = DI.Collection_ID GROUP BY C.Collection_ID ORDER BY COUNT(DI.Collection_ID) DESC LIMIT 1
 SELECT T2.Collection_Name, T2.Collection_ID, COUNT(T1.Document_Object_ID) FROM Documents_in_Collections AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = 'Best' GROUP BY T2.Collection_ID ORDER BY COUNT(T1.Document_Object_ID) DESC LIMIT 1
SELECT T1.Document_Object_ID FROM Document_Objects AS T1 INNER JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID INNER JOIN Document_Subsets AS T3 ON T2.Document_Subset_ID = T3.Document_Subset_ID WHERE T3.Document_Subset_Name = 'Best for 2000' INNER JOIN Documents_in_Collections AS T4 ON T1.Document_Object_ID = T4.Document_Object_ID INNER JOIN Collections AS T5 ON T4.Collection_ID = T5.Collection_ID WHERE T5.Collection_Name = 'Best'
SELECT DISTINCT T1.Document_Object_ID  FROM Document_Subset_Members AS T1  INNER JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID  WHERE T2.Document_Subset_Name = 'Best for 2000' INTERSECT SELECT DISTINCT T1.Document_Object_ID  FROM Documents_in_Collections AS T1  INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID  WHERE T2.Collection_Name = 'Best'
 SELECT DISTINCT Document_Object_ID FROM Document_Objects WHERE Description = 'Best for 2000' EXCEPT SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') INTERSECT SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')
SELECT DISTINCT d1.Document_Object_ID  FROM Documents_in_Collections d1  JOIN Collections c ON d1.Collection_ID = c.Collection_ID  JOIN Collection_Subset_Members c2 ON c.Collection_ID = c2.Related_Collection_ID  JOIN Collection_Subsets cs ON c2.Collection_Subset_ID = cs.Collection_Subset_ID  WHERE cs.Collection_Subset_Name = 'Best for 2000'  EXCEPT  SELECT DISTINCT d2.Document_Object_ID  FROM Documents_in_Collections d2  JOIN Collections c ON d2.Collection_ID = c.Collection_ID  WHERE c.Collection_Name = 'Best';
SELECT DISTINCT T1.Document_Object_ID FROM Document_Objects AS T1 INNER JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID INNER JOIN Document_Subsets AS T3 ON T2.Document_Subset_ID = T3.Document_Subset_ID WHERE T3.Document_Subset_Name = 'Best for 2000' UNION SELECT DISTINCT T1.Document_Object_ID FROM Document_Objects AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID INNER JOIN Collections AS T3 ON T2.Collection_ID = T3.Collection_ID WHERE T3.Collection_Name = 'Best'
SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members AS A INNER JOIN Document_Subsets AS B ON A.Document_Subset_ID = B.Document_Subset_ID WHERE B.Document_Subset_Name = 'Best for 2000' UNION SELECT DISTINCT Document_Object_ID FROM Documents_in_Collections AS A INNER JOIN Collections AS B ON A.Collection_ID = B.Collection_ID WHERE B.Collection_Name = 'Best'
SELECT T2.Collection_Name FROM Collection_Subset_Members AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID INNER JOIN Collection_Subset_Members AS T3 ON T2.Collection_ID = T3.Related_Collection_ID WHERE T3.Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best')
SELECT T2.Collection_Name FROM Collection_Subset_Members AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID INNER JOIN Collection_Subset_Members AS T3 ON T2.Collection_ID = T3.Related_Collection_ID WHERE T3.Collection_Subset_ID = (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best')
SELECT COUNT(DISTINCT Collection_ID) FROM Collections WHERE Collection_Name = 'Best'
SELECT COUNT(DISTINCT Collection_ID) FROM Collections WHERE Collection_Name = 'Best'
SELECT T1.Collection_Subset_Name  FROM Collection_Subsets AS T1  INNER JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID = T2.Collection_Subset_ID  INNER JOIN Collections AS T3 ON T2.Collection_ID = T3.Collection_ID  WHERE T3.Collection_Name = 'Best in'
SELECT cs.Collection_Subset_ID, cs.Collection_Subset_Name  FROM Collections c  JOIN Collection_Subset_Members cms ON c.Collection_ID = cms.Collection_ID  JOIN Collection_Subsets cs ON cms.Collection_Subset_ID = cs.Collection_Subset_ID  WHERE c.Collection_Name = 'Best'
SELECT COUNT(id) FROM songs WHERE name LIKE '%Love%'
SELECT name FROM songs ORDER BY name ASC
SELECT T1.name, T2.language FROM songs AS T2 INNER JOIN performance_score AS T3 ON T2.id = T3.songs_id INNER JOIN participants AS T1 ON T3.participant_id = T1.id
SELECT MAX(voice_sound_quality), MIN(voice_sound_quality) FROM performance_score
SELECT T1.voice_sound_quality, T1.rhythm_tempo, T1.stage_presence FROM performance_score AS T1 INNER JOIN participants AS T2 ON T1.participant_id = T2.id WHERE T2.name = 'Freeway'
SELECT id, language, original_artist FROM songs WHERE name!= 'Love'
SELECT T1.name, T1.original_artist FROM songs AS T1 INNER JOIN performance_score AS T2 ON T1.id = T2.songs_id WHERE T1.english_translation = 'All the streets of love'
SELECT DISTINCT T2.stage_presence FROM songs AS T1 INNER JOIN performance_score AS T2 ON T1.id = T2.songs_id WHERE T1.language = 'English'
SELECT p.id, p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id HAVING COUNT(ps.songs_id) >= 2
SELECT p.id, p.name, p.popularity FROM participants p LEFT JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id ORDER BY COUNT(ps.songs_id) DESC
SELECT p.id, p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id WHERE ps.voice_sound_quality = 5 OR ps.rhythm_tempo = 5
SELECT T1.voice_sound_quality FROM performance_score AS T1 INNER JOIN songs AS T2 ON T1.songs_id = T2.id WHERE T2.name = 'The Balkan Girls' AND T2.language = 'English'
SELECT s.id, s.name FROM songs AS s JOIN performance_score AS p ON s.id = p.songs_id GROUP BY s.id ORDER BY COUNT(p.participant_id) DESC LIMIT 1
SELECT COUNT(*) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9
SELECT COUNT(id) FROM songs WHERE id NOT IN (SELECT songs_id FROM performance_score)
SELECT AVG(T1.rhythm_tempo), T2.language FROM performance_score AS T1 INNER JOIN songs AS T2 ON T1.songs_id = T2.id GROUP BY T2.language
SELECT DISTINCT T1.name FROM participants AS T1 INNER JOIN performance_score AS T2 ON T1.id = T2.participant_id INNER JOIN songs AS T3 ON T2.songs_id = T3.id WHERE T3.language = 'English'
 SELECT p.name, p.popularity FROM participants p INNER JOIN performance_score ps ON p.id = ps.participant_id INNER JOIN songs s1 ON ps.songs_id = s1.id INNER JOIN songs s2 ON ps.songs_id = s2.id WHERE s1.language = 'Croatian' AND s2.language = 'English'
SELECT name FROM songs WHERE name LIKE '%Is%'
SELECT T1.original_artist FROM songs AS T1 INNER JOIN performance_score AS T2 ON T1.id = T2.songs_id WHERE T2.rhythm_tempo > 5 ORDER BY T2.voice_sound_quality DESC
SELECT COUNT(city_code) FROM City
SELECT COUNT(city_code) FROM City
SELECT DISTINCT state FROM City
SELECT DISTINCT state FROM City
SELECT COUNT(DISTINCT country) FROM City
SELECT COUNT(DISTINCT country) FROM City
SELECT city_name, city_code, state, country FROM City
SELECT city_name, city_code, state, country FROM City
SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore';
SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore'
SELECT city_name FROM City WHERE state = 'PA'
SELECT city_name FROM City WHERE state = 'PA'
SELECT COUNT(*) FROM City WHERE country = 'Canada'
SELECT COUNT(*) FROM City WHERE country = 'Canada'
SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude
SELECT city_name FROM City WHERE state = 'US' ORDER BY latitude
SELECT state, COUNT(city_code) FROM City GROUP BY state
SELECT state, COUNT(*) FROM City GROUP BY state
SELECT country, COUNT(city_code) FROM City GROUP BY country
SELECT country,  COUNT(*) FROM City GROUP BY country
SELECT DISTINCT state FROM City GROUP BY state HAVING COUNT(city_code) >= 2
SELECT DISTINCT T1.state FROM City AS T1 INNER JOIN City AS T2 ON T1.city_code!= T2.city_code
SELECT state FROM City GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1
SELECT state FROM City GROUP BY state ORDER BY COUNT(city_code) DESC LIMIT 1
SELECT country FROM City GROUP BY country ORDER BY COUNT(*) LIMIT 1
SELECT country FROM City GROUP BY country ORDER BY COUNT(*) LIMIT 1
SELECT S.Fname, S.LName FROM Student S JOIN City C ON S.city_code = C.city_code WHERE C.state = 'MD'
SELECT DISTINCT T1.LName, T1.Fname FROM Student AS T1 INNER JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T2.state = 'MD'
SELECT COUNT(*) FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE country = 'China')
SELECT COUNT(*) FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE country = 'China')
SELECT T1.Fname, T1.Major FROM Student AS T1 INNER JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T2.city_name = 'Baltimore'
SELECT DISTINCT T1.Fname, T1.Major FROM Student AS T1 INNER JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T2.city_name = 'Baltimore'
SELECT COUNT(StuID), T2.country FROM Student AS T1 INNER JOIN City AS T2 ON T1.city_code = T2.city_code GROUP BY T2.country
SELECT COUNT(T1.StuID), T2.country FROM Student AS T1 INNER JOIN City AS T2 ON T1.city_code = T2.city_code GROUP BY T2.country
SELECT city_name, COUNT(*) FROM Student AS s JOIN City AS c ON s.city_code = c.city_code GROUP BY city_name
SELECT city_code, COUNT(*) FROM Student GROUP BY city_code
 SELECT c.state FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.state ORDER BY COUNT(s.StuID) DESC LIMIT 1
SELECT T1.state FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.state ORDER BY COUNT(T2.StuID) DESC LIMIT 1
 SELECT C.country FROM City C LEFT JOIN Student S ON C.city_code = S.city_code GROUP BY C.country ORDER BY COUNT(CASE WHEN S.city_code IS NOT NULL THEN 1 ELSE NULL END) LIMIT 1
SELECT T1.country FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.country ORDER BY COUNT(T2.StuID) ASC LIMIT 1
SELECT C.city_name FROM City C JOIN Student S ON C.city_code = S.city_code GROUP BY C.city_code HAVING COUNT(C.city_code) >= 3
SELECT DISTINCT T1.city_name FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.city_code HAVING COUNT(T2.StuID) >= 3
SELECT DISTINCT T1.state FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.state HAVING COUNT(T1.city_code) > 5
SELECT DISTINCT T1.state FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.state HAVING COUNT(T2.StuID) > 5
 SELECT StuID FROM Student WHERE city_code NOT IN (SELECT city_code FROM City WHERE state = 'US')
 SELECT StuID FROM Student WHERE city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA')
SELECT StuID FROM Student WHERE Sex = 'F' AND city_code IN (SELECT city_code FROM City WHERE state = 'PA')
SELECT DISTINCT StuID FROM Student WHERE Sex = 'F' AND city_code IN (SELECT city_code FROM City WHERE state = 'PA')
SELECT StuID FROM Student WHERE Sex = 'M' AND city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA')
SELECT StuID FROM Student WHERE Sex = 'M' AND city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA')
SELECT T1.distance FROM Direct_distance AS T1 INNER JOIN City AS T2 ON T1.city1_code = T2.city_code WHERE T2.city_name = 'BAL' AND EXISTS ( SELECT 1 FROM Direct_distance AS T3 INNER JOIN City AS T4 ON T3.city2_code = T4.city_code WHERE T3.city1_code = T2.city_code AND T4.city_name = 'CHI' )
SELECT T1.distance FROM Direct_distance AS T1 INNER JOIN City AS T2 ON T1.city1_code = T2.city_code WHERE T2.city_name = 'BAL' AND EXISTS ( SELECT 1 FROM Direct_distance AS T3 INNER JOIN City AS T4 ON T3.city2_code = T4.city_code WHERE T3.city1_code = T2.city_code AND T4.city_name = 'CHI' )
SELECT d.distance FROM City c1 INNER JOIN Direct_distance d ON c1.city_code = d.city1_code INNER JOIN City c2 ON c2.city_code = d.city2_code WHERE c1.city_name = 'Boston' AND c2.city_name = 'Newark'
SELECT d.distance FROM City c1 INNER JOIN Direct_distance d ON c1.city_code = d.city1_code INNER JOIN City c2 ON c2.city_code = d.city2_code WHERE c1.city_name = 'Boston' AND c2.city_name = 'Newark'
SELECT AVG(distance), MIN(distance), MAX(distance) FROM Direct_distance
SELECT AVG(distance), MIN(distance), MAX(distance) FROM Direct_distance
SELECT city1_code, city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1
SELECT city1_code, city2_code FROM Direct_distance WHERE distance = ( SELECT MAX(distance) FROM Direct_distance );
SELECT city1_code, city2_code FROM Direct_distance WHERE distance > ( SELECT AVG(distance) FROM Direct_distance );
SELECT city1_code FROM Direct_distance WHERE distance > ( SELECT AVG(distance) FROM Direct_distance )
SELECT city1_code, city2_code FROM Direct_distance WHERE distance < 1000
SELECT DISTINCT city1_code FROM Direct_distance WHERE distance < 1000
SELECT SUM(T2.distance) FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T1.city_name = 'BAL'
SELECT SUM(T2.distance) FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T1.city_name = 'BAL'
SELECT AVG(T2.distance) FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T1.city_name = 'Boston'
SELECT AVG(T2.distance) FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T1.city_name = 'Boston'
SELECT C2.city_name FROM City C1 INNER JOIN Direct_distance D ON C1.city_code = D.city1_code INNER JOIN City C2 ON C2.city_code = D.city2_code WHERE C1.city_name = 'Chicago' ORDER BY D.distance LIMIT 1
SELECT C2.city_name FROM City C1 INNER JOIN Direct_distance D ON C1.city_code = D.city1_code INNER JOIN City C2 ON C2.city_code = D.city2_code WHERE C1.city_name = 'Chicago' ORDER BY D.distance LIMIT 1
SELECT C2.city_name FROM City C1 INNER JOIN Direct_distance D ON C1.city_code = D.city1_code INNER JOIN City C2 ON C2.city_code = D.city2_code WHERE C1.city_name = 'Boston' ORDER BY D.distance DESC LIMIT 1
SELECT C2.city_name  FROM City C1, City C2, Direct_distance D  WHERE C1.city_code = 'BOS' AND C2.city_code = ( SELECT city2_code FROM Direct_distance WHERE city1_code = 'BOS' ORDER BY distance DESC LIMIT 1 )
 SELECT d1.city1_code, SUM(d.distance) FROM Direct_distance d JOIN Direct_distance d1 ON d.city1_code = d1.city2_code AND d.city2_code = d1.city1_code GROUP BY d1.city1_code
SELECT c.city_code, SUM(d.distance) FROM City c LEFT JOIN Direct_distance d ON c.city_code = d.city1_code GROUP BY c.city_code
SELECT C1.city_name, AVG(D.distance) FROM City C1 JOIN Direct_distance D ON C1.city_code = D.city1_code GROUP BY C1.city_name
SELECT C.city_name, AVG(D.distance) FROM City C LEFT JOIN Direct_distance D ON C.city_code = D.city1_code GROUP BY C.city_name
SELECT T1.latitude, T1.longitude FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code WHERE T2.LName = 'Smith' AND T2.Fname = 'Linda' INTERSECT SELECT T1.latitude, T1.longitude FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code WHERE T2.LName = 'Kim' AND T2.Fname = 'Tracy'
SELECT d.distance FROM Student AS s1 INNER JOIN Student AS s2 ON s1.city_code = s2.city_code WHERE s1.LName = 'Smith' AND s1.Fname = 'Linda' AND s2.LName = 'Kim' AND s2.Fname = 'Tracy' INNER JOIN Direct_distance AS d ON s1.city_code = d.city1_code AND s2.city_code = d.city2_code
 SELECT T1.Fname, T1.LName FROM Student AS T1 INNER JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T2.latitude = ( SELECT T2.latitude FROM City AS T2 INNER JOIN Student AS T1 ON T2.city_code = T1.city_code WHERE T1.LName = 'Smith' AND T1.Fname = 'Linda' ORDER BY ABS(T2.latitude - ( SELECT T2.latitude FROM City AS T2 INNER JOIN Student AS T1 ON T2.city_code = T1.city_code WHERE T1.LName = 'Smith' AND T1.Fname = 'Linda' ) ) LIMIT 1 )
SELECT T1.Fname, T1.LName FROM Student AS T1 INNER JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T2.latitude = ( SELECT T2.latitude FROM Student AS T1 INNER JOIN City AS T2 ON T1.city_code = T2.city_code INNER JOIN City AS T3 ON T2.city_code = T3.city_code WHERE T1.LName = 'Linda' AND T1.Fname = 'Smith' ORDER BY ABS(T2.latitude - ( SELECT T2.latitude FROM Student AS T1 INNER JOIN City AS T2 ON T
SELECT T1.state FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code WHERE T2.Fname = 'Linda'
SELECT T2.state FROM Student AS T1 INNER JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T1.Fname = 'Linda'
SELECT * FROM Sailors WHERE age > 30
SELECT name FROM Sailors WHERE age > 30
SELECT name, age FROM Sailors WHERE age < 30
SELECT name, age FROM Sailors WHERE age < 30
SELECT b.name FROM Boats AS b INNER JOIN Reserves AS r ON b.bid = r.bid WHERE r.sid = 1
SELECT DISTINCT bid FROM Reserves WHERE sid = 1
SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE r.bid = 102
SELECT T1.name FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T2.bid = 102
SELECT DISTINCT bid FROM Reserves
SELECT bid FROM Reserves
SELECT name FROM Sailors WHERE name LIKE '%e%'
SELECT name FROM Sailors WHERE name LIKE '%e%'
SELECT sid FROM Sailors ORDER BY age DESC LIMIT 1
SELECT sid FROM Sailors WHERE age > ( SELECT MIN(age ) FROM Sailors )
SELECT name FROM Sailors WHERE age > ( SELECT MAX(age) FROM Sailors WHERE rating <= 7 )
SELECT DISTINCT name FROM Sailors WHERE age > ( SELECT MAX(age) FROM Sailors WHERE rating < 7 )
SELECT name, sid FROM Sailors WHERE sid IN ( SELECT sid FROM Reserves )
SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves)
SELECT s.sid, s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid GROUP BY r.sid HAVING COUNT(r.bid) > 1
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves GROUP BY sid HAVING COUNT(*) >= 2)
SELECT sid FROM Reserves AS T1 INNER JOIN Boats AS T2 ON T1.bid = T2.bid WHERE T2.color IN ('red', 'blue')
SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue')
 SELECT S.name, S.sid FROM Sailors AS S INNER JOIN Reserves AS R ON S.sid = R.sid INNER JOIN Boats AS B ON R.bid = B.bid WHERE B.color IN ('red', 'blue')
 SELECT S.name, S.sid FROM Sailors AS S INNER JOIN Reserves AS R ON S.sid = R.sid INNER JOIN Boats AS B ON R.bid = B.bid WHERE B.color IN ('red', 'blue')
SELECT DISTINCT sid FROM Reserves AS T1 INNER JOIN Boats AS T2 ON T1.bid = T2.bid WHERE T2.color IN ('red', 'blue')
SELECT DISTINCT sid FROM Reserves AS T1 INNER JOIN Boats AS T2 ON T1.bid = T2.bid WHERE T2.color IN ('red', 'blue')
 SELECT s.sid, s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue')
 SELECT DISTINCT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue')
SELECT sid FROM Sailors WHERE sid NOT IN ( SELECT sid FROM Reserves )
SELECT sid FROM Sailors WHERE sid NOT IN ( SELECT sid FROM Reserves )
SELECT name, sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)
SELECT name, sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)
SELECT sid FROM Sailors WHERE sid NOT IN ( SELECT sid FROM Reserves )
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 103)
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 103)
SELECT name FROM Sailors WHERE rating > ( SELECT MAX(rating) FROM Sailors WHERE name = 'Luis' )
SELECT name FROM Sailors WHERE rating > ( SELECT MAX(rating) FROM Sailors WHERE name = 'Luis' )
SELECT name FROM Sailors WHERE rating > ( SELECT MAX(rating) FROM Sailors WHERE name = 'Luis' )
SELECT name FROM Sailors WHERE rating > ( SELECT MAX(rating) FROM Sailors WHERE name = 'Luis' )
SELECT name, sid FROM Sailors WHERE rating > 2 INTERSECT SELECT s.name, s.sid FROM Sailors AS s JOIN Reserves AS r ON s.sid = r.sid
SELECT name, sid FROM Sailors WHERE rating >= 3 INTERSECT SELECT s.name, s.sid FROM Sailors AS s JOIN Reserves AS r ON s.sid = r.sid
SELECT name, age FROM Sailors ORDER BY age DESC LIMIT 1
SELECT name, age FROM Sailors ORDER BY age DESC LIMIT 1
SELECT COUNT(sid) FROM Sailors
SELECT COUNT(sid) FROM Sailors
SELECT AVG(age) FROM Sailors WHERE rating = 7
SELECT AVG(age) FROM Sailors WHERE rating = 7
SELECT COUNT(sid) FROM Sailors WHERE name LIKE 'D%'
SELECT COUNT(sid) FROM Sailors WHERE name LIKE 'D%'
SELECT AVG(rating), MAX(age) FROM Sailors
SELECT AVG(rating), MAX(age) FROM Sailors
SELECT bid, COUNT(*) FROM Reserves GROUP BY bid
SELECT bid, COUNT(*) FROM Reserves GROUP BY bid
SELECT COUNT(*) FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE bid > 50)
SELECT COUNT(*) FROM Reserves AS T1 INNER JOIN Boats AS T2 ON T1.bid = T2.bid WHERE T2.bid > 50
SELECT COUNT(*) FROM Reserves WHERE bid IN (SELECT bid FROM Reserves GROUP BY bid HAVING COUNT(*) > 1)
SELECT COUNT(*) FROM Reserves WHERE bid IN (SELECT bid FROM Reserves GROUP BY bid HAVING COUNT(*) > 1)
SELECT COUNT(T1.bid), T2.name FROM Reserves AS T1 INNER JOIN Boats AS T2 ON T1.bid = T2.bid WHERE T1.sid > 1 GROUP BY T2.bid
SELECT COUNT(T2.sid), T1.name FROM Boats AS T1 INNER JOIN Reserves AS T2 ON T1.bid = T2.bid WHERE T2.sid > 1 GROUP BY T1.name
 SELECT S.rating, AVG(S.age) FROM Sailors S INNER JOIN Reserves R ON S.sid = R.sid INNER JOIN Boats B ON R.bid = B.bid WHERE B.color ='red' GROUP BY S.rating
 SELECT rating, AVG(age) FROM Sailors WHERE sid IN ( SELECT sid FROM Reserves AS T1 INNER JOIN Boats AS T2 ON T1.bid = T2.bid WHERE T2.color ='red' ) GROUP BY rating
SELECT name, rating, age FROM Sailors ORDER BY rating, age
SELECT name, rating, age FROM Sailors ORDER BY rating, age
SELECT COUNT(*) FROM Boats
SELECT COUNT(*) FROM Boats
SELECT COUNT(*) FROM Boats WHERE color ='red'
SELECT COUNT(*) FROM Boats WHERE color ='red'
 SELECT T3.name FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid INNER JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T1.age BETWEEN 20 AND 30
 SELECT T3.name FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid INNER JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T1.age BETWEEN 20 AND 30
SELECT name FROM Sailors WHERE rating > ( SELECT MAX(rating) FROM Sailors WHERE sid IN ( SELECT sid FROM Reserves WHERE bid IN ( SELECT bid FROM Boats WHERE color ='red' ) ) )
SELECT name FROM Sailors WHERE rating > ( SELECT MAX(rating) FROM Sailors WHERE sid IN ( SELECT sid FROM Reserves WHERE bid IN ( SELECT bid FROM Boats WHERE color ='red' ) ) )
SELECT MAX(rating) FROM Sailors
SELECT MAX(rating) FROM Sailors
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE name = 'Melon'))
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE name = 'Melon'))
SELECT name, age FROM Sailors ORDER BY rating DESC
SELECT name, age FROM Sailors ORDER BY rating DESC
SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1
SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1
SELECT DISTINCT Model FROM headphone ORDER BY Model
SELECT DISTINCT Model FROM headphone ORDER BY Model
SELECT Class FROM headphone GROUP BY Class ORDER BY COUNT(Class) DESC LIMIT 1
SELECT Class FROM headphone GROUP BY Class ORDER BY COUNT(Headphone_ID) DESC LIMIT 1
SELECT Class FROM headphone GROUP BY Class HAVING COUNT(Headphone_ID) > 2
SELECT Class FROM headphone GROUP BY Class HAVING COUNT(Headphone_ID) <= 2
SELECT Class, COUNT(*) FROM headphone WHERE Price > 200 GROUP BY Class
SELECT Class, COUNT(*) FROM headphone WHERE Price > 200 GROUP BY Class
SELECT COUNT(DISTINCT Earpads) FROM headphone
SELECT COUNT(DISTINCT Earpads) FROM headphone
SELECT Earpads FROM stock GROUP BY Earpads ORDER BY COUNT(Earpads) DESC LIMIT 2
SELECT Earpads FROM headphone GROUP BY Earpads ORDER BY COUNT(Earpads) DESC LIMIT 2
SELECT Model, Class, Construction FROM headphone ORDER BY Price ASC LIMIT 1
SELECT Model, Class, Construction FROM headphone WHERE Price = ( SELECT MIN(Price ) FROM headphone )
SELECT AVG(Price) FROM headphone GROUP BY Construction
SELECT AVG(Price) FROM headphone GROUP BY Construction
SELECT DISTINCT T1.Class FROM headphone AS T1 INNER JOIN stock AS T2 ON T1.Headphone_ID = T2.Headphone_ID WHERE T1.Earpads = 'Bowls' INTERSECT SELECT DISTINCT T1.Class FROM headphone AS T1 INNER JOIN stock AS T
 SELECT DISTINCT T1.Class FROM headphone AS T1 INNER JOIN stock AS T2 ON T1.Headphone_ID = T2.Headphone_ID WHERE T1.Earpads = 'Bowls' INTERSECT SELECT DISTINCT T1.Class FROM headphone AS T1 INNER JOIN stock AS T2 ON T1.Headphone_ID = T2.Headphone_ID WHERE T1.Earpads = 'Comfort Pads'
SELECT DISTINCT Earpads FROM headphone WHERE Construction!= 'plastic'
SELECT DISTINCT Earpads FROM headphone WHERE Construction!= 'plastic'
SELECT Model FROM headphone WHERE Price < ( SELECT AVG(Price) FROM headphone )
SELECT Model FROM headphone WHERE Price < ( SELECT AVG(Price) FROM headphone )
SELECT Name FROM store ORDER BY Date_Opened
SELECT Name FROM store ORDER BY Date_Opened
SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana'
SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana'
SELECT COUNT(DISTINCT `Neighborhood`) FROM `store`
SELECT COUNT(DISTINCT Neighborhood) FROM store
SELECT COUNT(Name), Neighborhood FROM store GROUP BY Neighborhood
SELECT Neighborhood, COUNT(*) FROM store GROUP BY Neighborhood
SELECT s.Name, COUNT(*) FROM stock AS ss INNER JOIN store AS s ON ss.Store_ID = s.Store_ID GROUP BY ss.Store_ID ORDER BY COUNT(*) DESC LIMIT 1
 SELECT T1.Name, SUM(T2.Quantity) FROM store AS T1 INNER JOIN stock AS T2 ON T1.Store_ID = T2.Store_ID GROUP BY T1.Store_ID
SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock)
SELECT Name FROM store WHERE Store_ID NOT IN ( SELECT Store_ID FROM stock )
SELECT Model FROM headphone WHERE Headphone_ID NOT IN ( SELECT Headphone_ID FROM stock )
SELECT Model FROM headphone WHERE Headphone_ID NOT IN ( SELECT Headphone_ID FROM stock )
SELECT T1.Model FROM headphone AS T1 INNER JOIN stock AS T2 ON T1.Headphone_ID = T2.Headphone_ID GROUP BY T1.Headphone_ID ORDER BY SUM(T2.Quantity) DESC LIMIT 1
SELECT T1.Model FROM headphone AS T1 INNER JOIN stock AS T2 ON T1.Headphone_ID = T2.Headphone_ID GROUP BY T1.Model ORDER BY SUM(T2.Quantity) DESC LIMIT 1
SELECT COUNT(T2.Headphone_ID) FROM store AS T1 INNER JOIN stock AS T2 ON T1.Store_ID = T2.Store_ID WHERE T1.Name = 'Woodman'
SELECT SUM(T2.Quantity) FROM store AS T1 INNER JOIN stock AS T2 ON T1.Store_ID = T2.Store_ID WHERE T1.Name = 'Woodman'
SELECT DISTINCT Neighborhood FROM store WHERE Store_ID NOT IN ( SELECT Store_ID FROM stock )
SELECT s.Neighborhood FROM store AS s LEFT JOIN stock AS st ON s.Store_ID = st.Store_ID WHERE st.Store_ID IS NULL
SELECT COUNT(*) FROM Author
SELECT COUNT(DISTINCT author_id) FROM Author
SELECT COUNT(paper_id) FROM Paper
SELECT COUNT(paper_id) FROM Paper
SELECT COUNT(*) FROM Affiliation
SELECT COUNT(*) FROM Affiliation
SELECT COUNT(paper_id) FROM Paper WHERE venue = 'NAACL 2000'
SELECT COUNT(paper_id) FROM Paper WHERE venue = 'NAACL 2000'
SELECT COUNT(T1.paper_id) FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T1.year = 2009 AND T3.name = 'Columbia University'
SELECT COUNT(T1.paper_id) FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T3.name = 'Columbia University' AND T1.year = 2009
SELECT name, address FROM Affiliation
SELECT name, address FROM Affiliation
SELECT venue, year FROM Paper ORDER BY year
SELECT DISTINCT venue FROM Paper ORDER BY year
SELECT T1.title, T1.paper_id FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T3.name = 'Harvard University'
SELECT T1.title, T1.paper_id FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T3.name = 'Harvard University'
SELECT DISTINCT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown'
SELECT T1.paper_id, T1.title FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = 'Mckeown'
SELECT DISTINCT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id JOIN Affiliation af ON al.affiliation_id = af.affiliation_id WHERE af.name = 'Stanford University' INTERSECT SELECT DISTINCT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id JOIN Affiliation af ON al.affiliation_id = af.affiliation_id WHERE af.name = 'Columbia University'
SELECT T1.paper_id, T1.title FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T3.name IN ('Stanford', 'Columbia University')
SELECT DISTINCT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a1 ON al.author_id = a1.author_id JOIN Author a2 ON al.paper_id = al.paper_id AND al.author_id = a2.author_id WHERE a1.name = 'Mckeown, Kathleen' AND a2.name = 'Rambow, Owen'
SELECT DISTINCT T1.paper_id, T1.title FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = 'Mckeown, Kathleen' AND T2.paper_id IN ( SELECT T2.paper_id FROM Author_list AS T2 INNER JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = 'Rambow, Owen' )
SELECT T1.title, T1.paper_id FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = 'Mckeown' AND T2.paper_id NOT IN ( SELECT T2.paper_id FROM Author_list AS T2 INNER JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = 'Rambow' )
SELECT DISTINCT T1.paper_id, T1.title FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = 'Mckeown' AND T2.paper_id NOT IN ( SELECT T2.paper_id FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = 'Rambow' )
SELECT DISTINCT T1.title, T1.paper_id FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = 'Mckeown, Kathleen' OR T3.name = 'Rambow, Owen'
SELECT DISTINCT T1.paper_id, T1.title FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = 'Mckeown, Kathleen' OR T3.name = 'Rambow, Owen'
SELECT a.name, COUNT(al.paper_id) FROM Author a LEFT JOIN Author_list al ON a.author_id = al.author_id GROUP BY a.author_id ORDER BY COUNT(al.paper_id) DESC
SELECT a.author_id, COUNT(al.paper_id) FROM Author a LEFT JOIN Author_list al ON a.author_id = al.author_id GROUP BY a.author_id ORDER BY COUNT(al.paper_id) DESC
SELECT a.name, COUNT(al.paper_id) FROM Affiliation a LEFT JOIN Author_list al ON a.affiliation_id = al.affiliation_id GROUP BY a.affiliation_id ORDER BY COUNT(al.paper_id) ASC
SELECT a.name FROM Affiliation a LEFT JOIN Author_list al ON a.affiliation_id = al.affiliation_id GROUP BY a.name ORDER BY COUNT(al.paper_id) DESC
SELECT T1.name FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING COUNT(T2.paper_id) > 50
SELECT T1.name FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING COUNT(T2.paper_id) > 50
SELECT T1.name FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING COUNT(T2.paper_id) = 1
SELECT T1.name FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING COUNT(T2.paper_id) = 1
SELECT venue,  year FROM Paper GROUP BY venue,  year ORDER BY COUNT(paper_id) DESC LIMIT 1
SELECT venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(paper_id) DESC LIMIT 1
SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(paper_id) ASC LIMIT 1
SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(paper_id) ASC LIMIT 1
SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'A00-1002'
SELECT COUNT(T1.paper_id) FROM Citation AS T1 INNER JOIN Paper AS T2 ON T1.paper_id = T2.paper_id WHERE T2.paper_id = 'A00-1002'
SELECT COUNT(T2.cited_paper_id) FROM Paper AS T1 INNER JOIN Citation AS T2 ON T1.paper_id = T2.paper_id WHERE T1.paper_id = 'D12-1027'
SELECT COUNT(*) FROM Citation WHERE paper_id = 'D12-1027'
SELECT p.paper_id, COUNT(*) FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.paper_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT p.paper_id, COUNT(*) FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.paper_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.title FROM Paper AS T1 INNER JOIN Citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id ORDER BY COUNT(T2.cited_paper_id) DESC LIMIT 1
SELECT T1.title FROM Paper AS T1 INNER JOIN Citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id ORDER BY COUNT(T2.cited_paper_id) DESC LIMIT 1
SELECT T1.paper_id, COUNT(T2.cited_paper_id) FROM Paper AS T1 INNER JOIN Citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id ORDER BY COUNT(T2.cited_paper_id) DESC LIMIT 10
SELECT T1.paper_id, COUNT(T2.cited_paper_id) FROM Paper AS T1 INNER JOIN Citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id ORDER BY COUNT(T2.cited_paper_id) DESC LIMIT 10
SELECT COUNT(T2.paper_id) FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id INNER JOIN Citation AS T3 ON T2.paper_id = T3.paper_id WHERE T1.name = 'Mckeown, Kathleen'
SELECT COUNT(T2.paper_id) FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id INNER JOIN Citation AS T3 ON T2.paper_id = T3.paper_id WHERE T1.name = 'Mckeown, Kathleen'
SELECT COUNT(T2.paper_id) FROM Author AS T1 INNER JOIN Citation AS T2 ON T1.author_id = T2.paper_id WHERE T1.name = 'Mckeown, Kathleen'
SELECT COUNT(T2.paper_id) FROM Author AS T1 INNER JOIN Citation AS T2 ON T1.author_id = T2.paper_id WHERE T1.name = 'Mckeown, Kathleen'
SELECT a.name, COUNT(CASE WHEN c.paper_id IS NOT NULL THEN 1 ELSE NULL END) AS num_citations FROM Author a LEFT JOIN Author_list al ON a.author_id = al.author_id LEFT JOIN Citation c ON al.paper_id = c.paper_id GROUP BY a.author_id ORDER BY COUNT(CASE WHEN c.paper_id IS NOT NULL THEN 1 ELSE NULL END) DESC LIMIT 1
SELECT a.name, COUNT(CASE WHEN c.paper_id IS NOT NULL THEN 1 END) AS num_citations FROM Author a LEFT JOIN Author_list al ON a.author_id = al.author_id LEFT JOIN Citation c ON al.paper_id = c.paper_id GROUP BY a.author_id ORDER BY COUNT(CASE WHEN c.paper_id IS NOT NULL THEN 1 END) DESC LIMIT 1
SELECT DISTINCT T1.venue, T1.year FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = 'Mckeown, Kathleen'
SELECT DISTINCT T1.venue, T1.year FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = 'Mckeown, Kathleen'
SELECT DISTINCT T1.venue, T1.year FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T3.name = 'Columbia University'
SELECT DISTINCT T1.venue, T1.year FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T3.name = 'Columbia University'
SELECT a.name FROM Author AS a JOIN Author_list AS al ON a.author_id = al.author_id JOIN Paper AS p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY a.name ORDER BY COUNT(al.paper_id) DESC LIMIT 1
SELECT T.author_id, T.name FROM ( SELECT T2.author_id, T2.name, COUNT(T1.paper_id) AS num_papers FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T1.year = 2009 GROUP BY T2.author_id, T2.name ORDER BY num_papers DESC LIMIT 1 ) T
SELECT T1.name FROM Affiliation AS T1 INNER JOIN Author_list AS T2 ON T1.affiliation_id = T2.affiliation_id INNER JOIN Paper AS T3 ON T2.paper_id = T3.paper_id WHERE T3.year = 2009 GROUP BY T1.name ORDER BY COUNT(T2.paper_id) DESC LIMIT 3
SELECT a.name FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY a.name ORDER BY COUNT(al.paper_id) DESC LIMIT 3
SELECT COUNT(T1.paper_id) FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T3.name = 'Columbia University' AND T1.year <= 2009
SELECT COUNT(T1.paper_id) FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T3.name = 'Columbia University' AND T1.year <= 2009
SELECT COUNT(DISTINCT t2.paper_id) FROM Affiliation AS t1 INNER JOIN Author_list AS t2 ON t1.affiliation_id = t2.affiliation_id INNER JOIN Paper AS t3 ON t2.paper_id = t3.paper_id WHERE t1.name = 'Stanford University' AND t3.year BETWEEN 2000 AND 2009
SELECT COUNT(T1.paper_id) FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Author AS T3 ON T2.author_id = T3.author_id INNER JOIN Affiliation AS T4 ON T2.affiliation_id = T4.affiliation_id WHERE T4.name = 'Stanford University' AND T1.year BETWEEN 2000 AND 2009
SELECT T1.title FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id ORDER BY COUNT(T2.author_id) DESC LIMIT 1
SELECT T1.title FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id ORDER BY COUNT(T2.author_id) DESC LIMIT 1
SELECT COUNT(T2.author_id) FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id WHERE T1.name = 'Mckeown, Kathleen'
SELECT COUNT(T2.author_id) FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id WHERE T1.name = 'Mckeown, Kathleen'
SELECT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Author m ON m.author_id = al.author_id WHERE m.name = 'Mckeown, Kathleen' GROUP BY a.author_id ORDER BY COUNT(al.paper_id) DESC LIMIT 1
SELECT T2.name FROM Author_list AS T1 INNER JOIN Author AS T2 ON T1.author_id = T2.author_id WHERE T1.paper_id IN ( SELECT T1.paper_id FROM Author_list AS T1 INNER JOIN Author AS T2 ON T1.author_id = T2.author_id WHERE T2.name = 'Mckeown, Kathleen' GROUP BY T1.paper_id ORDER BY COUNT(T1.paper_id) DESC LIMIT 1 ) GROUP BY T2.name ORDER BY COUNT(T2.name) DESC LIMIT 1
SELECT paper_id FROM Paper WHERE title LIKE '%translation%'
SELECT paper_id FROM Paper WHERE title LIKE '%translation%'
SELECT DISTINCT p.paper_id, p.title FROM Paper p LEFT JOIN Citation c ON p.paper_id = c.paper_id WHERE c.paper_id IS NULL
SELECT DISTINCT p.paper_id, p.title FROM Paper p LEFT JOIN Citation c ON p.paper_id = c.paper_id WHERE c.paper_id IS NULL
SELECT T1.name FROM Affiliation AS T1 INNER JOIN Author_list AS T2 ON T1.affiliation_id = T2.affiliation_id GROUP BY T2.affiliation_id HAVING COUNT(T2.paper_id) = ( SELECT MAX(count) FROM ( SELECT T2.affiliation_id, COUNT(T2.paper_id) AS count FROM Author_list AS T2 GROUP BY T2.affiliation_id ) ) AND T1.address LIKE '%China%'
SELECT T1.name FROM Affiliation AS T1 INNER JOIN Author_list AS T2 ON T1.affiliation_id = T2.affiliation_id GROUP BY T1.name, T1.address HAVING T1.address LIKE '%China%' ORDER BY COUNT(T2.paper_id) DESC LIMIT 1
SELECT venue, year, COUNT(paper_id) FROM Paper GROUP BY venue, year
SELECT venue,  year,  COUNT(paper_id) FROM Paper GROUP BY venue,  year
 SELECT COUNT(DISTINCT T1.paper_id), T3.name FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id GROUP BY T3.name
SELECT a.name, COUNT(al.paper_id) FROM Affiliation a LEFT JOIN Author_list al ON a.affiliation_id = al.affiliation_id GROUP BY a.name
SELECT T1.title FROM Paper AS T1 INNER JOIN Citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T2.paper_id HAVING COUNT(T2.paper_id) > 50
SELECT T1.title FROM Paper AS T1 INNER JOIN Citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T2.paper_id HAVING COUNT(T2.paper_id) > 50
SELECT COUNT(DISTINCT T1.author_id)  FROM Author AS T1  LEFT JOIN (   SELECT T2.author_id    FROM Author_list AS T2    JOIN Citation AS T3 ON T2.paper_id = T3.paper_id    GROUP BY T2.author_id    HAVING COUNT(T3.paper_id) > 50 ) AS T4 ON T1.author_id = T4.author_id  WHERE T4.author_id IS NULL
 SELECT COUNT(DISTINCT a.author_id) FROM Author a LEFT JOIN ( SELECT al.author_id FROM Author_list al JOIN Citation c ON al.paper_id = c.paper_id JOIN Paper p2 ON c.cited_paper_id = p2.paper_id WHERE p2.year > 0 GROUP BY al.paper_id HAVING COUNT(c.cited_paper_id) > 50 ) p ON a.author_id = p.author_id WHERE p.author_id IS NULL
SELECT DISTINCT a.name FROM Author AS a JOIN Author_list AS al ON a.author_id = al.author_id JOIN Paper AS p ON al.paper_id = p.paper_id WHERE p.year = 2009 AND p.title IN ('NAACL', 'ACL')
SELECT DISTINCT a.name FROM Author AS a JOIN Author_list AS al ON a.author_id = al.author_id JOIN Paper AS p ON al.paper_id = p.paper_id WHERE p.year = 2009 AND p.title IN ('NAACL', 'ACL')
SELECT name FROM Author WHERE author_id NOT IN ( SELECT author_id FROM Author_list AS T1 INNER JOIN Paper AS T2 ON T1.paper_id = T2.paper_id WHERE T2.venue = 'ACL' )
SELECT name FROM Author WHERE author_id NOT IN ( SELECT author_id FROM Author_list AS T1 INNER JOIN Paper AS T2 ON T1.paper_id = T2.paper_id WHERE T2.venue = 'ACL' );
SELECT COUNT(Conference_ID) FROM conference
SELECT COUNT(Conference_ID) FROM conference
SELECT DISTINCT Conference_Name FROM conference
SELECT DISTINCT Conference_Name FROM conference
SELECT Conference_Name, Year, Location FROM conference
SELECT Conference_Name, Year, Location FROM conference
SELECT Conference_Name, COUNT(*) FROM conference GROUP BY Conference_Name
SELECT Conference_Name, COUNT(*) FROM conference GROUP BY Conference_Name
SELECT Year, COUNT(*) FROM conference GROUP BY Year
SELECT Conference_ID, Year FROM conference GROUP BY Conference_ID, Year
SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(Year) LIMIT 1
SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(Conference_ID) LIMIT 1
SELECT Location FROM conference GROUP BY Location HAVING COUNT(Location) >= 2
SELECT T.Location FROM ( SELECT Location, COUNT(Conference_ID) AS num FROM conference GROUP BY Location HAVING COUNT(Conference_ID) >= 2 ) T
SELECT T1.Institution_Name, T1.Location, T1.Founded FROM institution AS T1
SELECT Institution_Name, Location, Founded FROM institution
SELECT COUNT(Institution_ID) FROM institution WHERE Founded BETWEEN 1850 AND 1900
SELECT COUNT(Institution_ID) FROM institution WHERE Founded BETWEEN 1850 AND 1900
SELECT T1.Institution_Name, T1.Location FROM institution AS T1 INNER JOIN ( SELECT Institution_ID, MAX(Founded) AS max_founded FROM institution GROUP BY Institution_ID ) AS T2 ON T1.Institution_ID = T2.Institution_ID AND T1.Founded = T2.max_founded
 SELECT i.Institution_Name, i.Location FROM institution AS i ORDER BY i.Founded DESC LIMIT 1
SELECT T1.Institution_Name, COUNT(T2.staff_ID) FROM institution AS T1 INNER JOIN staff AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.Founded > 1800 GROUP BY T1.Institution_Name
SELECT T1.Institution_ID, COUNT(T2.staff_ID), T2.name  FROM institution AS T1  JOIN staff AS T2 ON T1.Institution_ID = T2.Institution_ID  WHERE T1.Founded > 1800 GROUP BY T1.Institution_ID
SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff)
SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff)
SELECT name FROM staff WHERE Age > ( SELECT AVG(Age) FROM staff )
SELECT name FROM staff WHERE Age > ( SELECT AVG(Age) FROM staff )
SELECT MAX(Age), MIN(Age) FROM staff WHERE Nationality = 'United States'
SELECT MAX(Age), MIN(Age) FROM staff
SELECT T1.Conference_Name FROM conference AS T1 INNER JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID INNER JOIN staff AS T3 ON T2.staff_ID = T3.staff_ID WHERE T3.Nationality = 'Canada'
SELECT DISTINCT T1.Conference_Name FROM conference AS T1 INNER JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID INNER JOIN staff AS T3 ON T2.staff_ID = T3.staff_ID WHERE T3.Nationality = 'Canada'
SELECT name FROM staff WHERE staff_ID IN ( SELECT staff_ID FROM conference_participation WHERE role ='speaker' INTERSECT SELECT staff_ID FROM conference_participation WHERE role ='sponsor' )
SELECT T1.name FROM staff AS T1 INNER JOIN conference_participation AS T2 ON T1.staff_ID = T2.staff_ID WHERE T2.role ='speaker' INTERSECT SELECT T1.name FROM staff AS T1 INNER JOIN conference_participation AS T2 ON T1.staff_ID = T2.staff_ID WHERE T2.role ='sponsor'
SELECT name FROM staff WHERE staff_ID IN ( SELECT staff_ID FROM conference_participation WHERE Conference_ID IN ( SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL' ) INTERSECT SELECT staff_ID FROM conference_participation WHERE Conference_ID IN ( SELECT Conference_ID FROM conference WHERE Conference_Name = 'NACCL' ) )
 SELECT name FROM staff WHERE staff_ID IN ( SELECT staff_ID FROM conference_participation WHERE Conference_ID IN ( SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL' ) ) INTERSECT SELECT name FROM staff WHERE staff_ID IN ( SELECT staff_ID FROM conference_participation WHERE Conference_ID IN ( SELECT Conference_ID FROM conference WHERE Conference_Name = 'NACCL' ) )
SELECT T1.name FROM staff AS T1 INNER JOIN conference_participation AS T2 ON T1.staff_ID = T2.staff_ID INNER JOIN conference AS T3 ON T2.Conference_ID = T3.Conference_ID WHERE T3.Year = 2003 OR T3.Year = 2004
SELECT T1.name FROM staff AS T1 INNER JOIN conference_participation AS T2 ON T1.staff_ID = T2.staff_ID INNER JOIN conference AS T3 ON T2.Conference_ID = T3.Conference_ID WHERE T3.Year BETWEEN 2003 AND 2004
SELECT T1.Conference_Name, T1.Year, COUNT(T2.staff_ID) FROM conference AS T1 INNER JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID GROUP BY T1.Conference_Name, T1.Year
SELECT T1.Conference_Name, T1.Year, COUNT(T2.staff_ID) FROM conference AS T1 INNER JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID GROUP BY T1.Conference_ID
SELECT T1.Conference_Name FROM conference AS T1 INNER JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID GROUP BY T1.Conference_ID ORDER BY COUNT(T2.staff_ID) DESC LIMIT 2
SELECT T1.Conference_Name FROM conference AS T1 INNER JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID GROUP BY T1.Conference_ID ORDER BY COUNT(T2.staff_ID) DESC LIMIT 2
SELECT name, Nationality FROM staff WHERE staff_ID NOT IN ( SELECT staff_ID FROM conference_participation WHERE Conference_ID IN ( SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL' ) )
SELECT name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL'))
SELECT T1.Institution_Name, T1.Location FROM institution AS T1 INNER JOIN staff AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T2.staff_ID NOT IN ( SELECT staff_ID FROM conference_participation WHERE Conference_ID IN ( SELECT Conference_ID FROM conference WHERE Year = 2004 ) )
SELECT T1.Institution_Name, T1.Location FROM institution AS T1 INNER JOIN staff AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T2.staff_ID NOT IN ( SELECT staff_ID FROM conference_participation WHERE Conference_ID IN ( SELECT Conference_ID FROM conference WHERE Year = 2004 ) )
SELECT pilot_name FROM PilotSkills WHERE age = ( SELECT MAX(age) FROM PilotSkills );
SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1
SELECT pilot_name FROM PilotSkills WHERE age < ( SELECT AVG(age) FROM PilotSkills ) ORDER BY age
SELECT pilot_name FROM PilotSkills WHERE age < ( SELECT AVG(age) FROM PilotSkills ) ORDER BY age ASC
SELECT * FROM PilotSkills WHERE age < 30
SELECT * FROM PilotSkills WHERE age < 30
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35
SELECT pilot_name FROM PilotSkills WHERE age < 35 AND plane_name = 'Piper Cub'
SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter'
SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter'
SELECT COUNT(DISTINCT location) FROM Hangar
SELECT COUNT(DISTINCT location) FROM Hangar
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32
 SELECT T2.plane_name FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.pilot_name = 'Jones' AND T1.age = 32
SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > 40
SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > 40
SELECT COUNT(plane_name) FROM PilotSkills WHERE plane_name = 'B-52 Bomber' AND age < 35
SELECT COUNT(pilot_name) FROM PilotSkills WHERE plane_name = 'B-52 Bomber' AND age < 35
 SELECT T1.age FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = 'Piper Cub' ORDER BY T1.age LIMIT 1
 SELECT T1.pilot_name FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.plane_name = 'Piper Cub' ORDER BY T1.age LIMIT 1
SELECT plane_name FROM Hangar GROUP BY plane_name ORDER BY COUNT(plane_name) DESC LIMIT 1
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT plane_name FROM Hangar GROUP BY plane_name ORDER BY COUNT(plane_name) ASC LIMIT 1
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) ASC LIMIT 1
 SELECT COUNT(DISTINCT T1.pilot_name) FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Chicago'
 SELECT COUNT(DISTINCT T1.pilot_name)  FROM PilotSkills AS T1  JOIN Hangar AS T2 ON T2.plane_name = T1.plane_name  WHERE T2.location = 'Chicago'
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41
 SELECT T1.plane_name FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.pilot_name = 'Smith' AND T1.age = 41
SELECT COUNT(DISTINCT plane_name) FROM PilotSkills
SELECT COUNT(plane_name) FROM PilotSkills
SELECT COUNT(plane_name) FROM PilotSkills WHERE pilot_name = 'Smith'
 SELECT COUNT(DISTINCT T1.plane_name) FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.pilot_name = 'Smith'
SELECT COUNT(DISTINCT plane_name) FROM PilotSkills WHERE age > 40
SELECT COUNT(plane_name) FROM PilotSkills WHERE age > 40
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC
SELECT pilot_name FROM PilotSkills ORDER BY age DESC
SELECT pilot_name FROM PilotSkills ORDER BY age DESC
 SELECT DISTINCT H.location FROM Hangar AS H INNER JOIN PilotSkills AS P ON H.plane_name = P.plane_name ORDER BY H.plane_name
SELECT location FROM Hangar ORDER BY plane_name
SELECT DISTINCT plane_name FROM PilotSkills
SELECT DISTINCT plane_name FROM Hangar ORDER BY plane_name
SELECT COUNT(*) FROM PilotSkills WHERE age > 40 OR age < 30
SELECT COUNT(*) FROM PilotSkills WHERE age > 40 OR age < 30
 SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30)
SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 
 SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' EXCEPT SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber'
 SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' EXCEPT SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber'
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'B-52 Bomber')
 SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM PilotSkills WHERE age IN (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub')) AND plane_name IN (SELECT plane_name FROM PilotSkills WHERE age IN (SELECT age FROM PilotSkills WHERE plane_name = 'B-52 Bomber'))
SELECT AVG(age), MIN(age) FROM PilotSkills
SELECT AVG(age), MIN(age) FROM PilotSkills
 SELECT DISTINCT T1.pilot_name FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name
 SELECT DISTINCT T1.pilot_name  FROM PilotSkills AS T1  JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' OR plane_name = 'F-14 Fighter'
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter')
SELECT plane_name, AVG(age) FROM PilotSkills GROUP BY plane_name
 SELECT AVG(T1.age) FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name
SELECT COUNT(plane_name), plane_name FROM Hangar GROUP BY plane_name
SELECT plane_name, COUNT(*) FROM PilotSkills GROUP BY plane_name
SELECT plane_name, MAX(age) FROM PilotSkills GROUP BY plane_name ORDER BY plane_name
 SELECT DISTINCT T1.plane_name, T2.pilot_name FROM PilotSkills AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name WHERE T1.age = ( SELECT MAX(age) FROM PilotSkills WHERE plane_name = T1.plane_name ) ORDER BY T1.plane_name
 SELECT T1.plane_name, T1.pilot_name FROM PilotSkills AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name AND T1.age < T2.age
 SELECT DISTINCT H.plane_name, MAX(PS.age) AS max_age, PS.pilot_name  FROM Hangar H  JOIN PilotSkills PS ON H.plane_name = PS.plane_name  GROUP BY H.plane_name
SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name
SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name
 SELECT H.location, COUNT(PS.pilot_name), AVG(PS.age)  FROM Hangar H  JOIN PilotSkills PS ON H.plane_name = PS.plane_name  GROUP BY H.location
 SELECT H.location, COUNT(PS.pilot_name), AVG(PS.age)  FROM Hangar H  JOIN PilotSkills PS ON H.plane_name = PS.plane_name  GROUP BY H.location
SELECT COUNT(pilot_name) FROM PilotSkills WHERE age < 35
SELECT plane_name, COUNT(pilot_name) FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35
SELECT T2.location  FROM PilotSkills AS T1  JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name
 SELECT T2.location FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name ORDER BY T1.age ASC LIMIT 1
 SELECT T1.pilot_name, T1.age FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Austin'
 SELECT T1.pilot_name, T1.age FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Austin'
SELECT pilot_name FROM PilotSkills WHERE age > ( SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'Piper Cub' )
SELECT pilot_name FROM PilotSkills WHERE age > ( SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'Piper Cub' )
SELECT COUNT(pilot_name)  FROM PilotSkills  WHERE age > ( SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter' );
SELECT COUNT(*) FROM PilotSkills WHERE age > ( SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter' )
SELECT DISTINCT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%'
SELECT DISTINCT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%'
SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > ( SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'Piper Cub' )
SELECT COUNT(*) FROM PilotSkills WHERE age > ( SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub' )
SELECT Name FROM district ORDER BY Area_km DESC LIMIT 1
SELECT Area_km, Government_website FROM district WHERE Population = ( SELECT MIN(Population ) FROM district )
SELECT Name, Population FROM district WHERE Area_km > ( SELECT AVG(Area_km) FROM district )
SELECT MAX(Area_km),  AVG(Area_km) FROM district
 SELECT SUM(T2.Population) FROM ( SELECT T1.Area_km, DENSE_RANK() OVER (ORDER BY T1.Area_km DESC) AS rank FROM district AS T1 ) AS T3 INNER JOIN district AS T2 ON T3.rank <= 3 AND T2.Area_km = T3.Area_km
SELECT District_ID, Name, Government_website FROM district ORDER BY Population
SELECT Name FROM district WHERE Government_website LIKE '%gov%'
SELECT District_ID, Name FROM district WHERE Population > 4000 OR Area_km > 3000
SELECT T1.Name, T2.Speach_title FROM spokesman AS T1 INNER JOIN spokesman_district AS T3 ON T1.Spokesman_ID = T3.Spokesman_ID INNER JOIN spokesman AS T2 ON T2.Spokesman_ID = T3.Sp
SELECT AVG(T2.Points), AVG(T2.Age) FROM district AS T1 INNER JOIN spokesman_district AS T3 ON T1.District_ID = T3.District_ID INNER JOIN spokesman AS T2 ON T3.Speaker_ID = T2.Speaker_ID WHERE T3.Rank_position =
SELECT Name, Points FROM spokesman WHERE Age < 40
SELECT Name FROM spokesman ORDER BY Age DESC LIMIT 1
SELECT * FROM spokesman WHERE Points < ( SELECT AVG(Points) FROM spokesman )
SELECT d.Name FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID GROUP BY d.District_ID ORDER BY COUNT(d.District_ID) DESC LIMIT 1
SELECT DISTINCT T1.Name FROM spokesman AS T1 INNER JOIN spokesman_district AS T2 ON T1.Spokesman_ID = T2.Spokesman_ID WHERE T2.Start_year < '2004'
SELECT T1.Name, COUNT(T2.Spokesman_ID) FROM district AS T1 INNER JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID GROUP BY T1.District_ID
 SELECT DISTINCT T1.Name FROM district AS T1 INNER JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID INNER JOIN spokesman AS T3 ON T2.Spokesman_ID = T3.Spokesman_ID WHERE T3.Rank_position = 1 AND T1.District_ID IN (SELECT T2.District_ID FROM spokesman_district AS T2 INNER JOIN spokesman AS T3 ON T2.Spokesman_ID = T3.Spokesman_ID WHERE T3.Rank_position = 2)
SELECT DISTINCT T1.Name FROM district AS T1 INNER JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID GROUP BY T2.District_ID HAVING COUNT(T2.District_ID) > 1
SELECT COUNT(DISTINCT District_ID) FROM spokesman_district WHERE Spokesman_ID IS NULL
SELECT Name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district)
SELECT SUM(T1.Population), AVG(T1.Population)  FROM district AS T1  JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID
SELECT title FROM Sculptures WHERE year = ( SELECT MAX(year) FROM Sculptures );
SELECT title FROM Sculptures WHERE year = ( SELECT MAX(year) FROM Sculptures );
SELECT title, location FROM Paintings WHERE year = ( SELECT MIN(year ) FROM Paintings );
SELECT T1.title, T1.location FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T1.year = ( SELECT MIN(year) FROM Paintings )
SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.location = 'gallery 226'
SELECT T1.title FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.sculptorID = T2.artistID WHERE T1.location = '226'
SELECT title, location FROM Paintings
SELECT title, location FROM Paintings
SELECT title, location FROM Sculptures
SELECT title, location FROM Sculptures
 SELECT P.medium FROM Paintings AS P WHERE P.paintingID = 80
 SELECT P.medium FROM Paintings AS P INNER JOIN Artists AS A ON P.painterID = A.artistID WHERE P.paintingID = 80
SELECT fname, lname FROM Artists WHERE birthYear > 1850
SELECT fname, lname FROM Artists WHERE birthYear > 1850
SELECT T1.fname, T1.lname, T2.year FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.location!= 'gallery 226'
SELECT A.fname, A.lname, S.year FROM Sculptures AS S INNER JOIN Artists AS A ON S.sculptorID = A.artistID WHERE S.location!= 'gallery 226'
SELECT DISTINCT T.fname, T.lname FROM ( SELECT T1.fname, T1.lname, T2.year FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.year < 1900 ) AS T
SELECT DISTINCT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.year < 1900
SELECT DISTINCT T1.birthYear FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.year > 1920
SELECT T1.birthYear FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.year > 1920 GROUP BY T1.artistID
SELECT fname, lname FROM Artists ORDER BY deathYear DESC LIMIT 1
SELECT fname, lname FROM Artists WHERE deathYear = ( SELECT MAX(deathYear) FROM Artists )
SELECT (CASE WHEN deathYear IS NULL THEN 2024 - birthYear ELSE deathYear - birthYear END) FROM Artists ORDER BY CASE WHEN deathYear IS NULL THEN 2024 - birthYear ELSE deathYear - birthYear END LIMIT 1
SELECT birthYear FROM Artists WHERE deathYear - birthYear = ( SELECT MIN(deathYear - birthYear ) FROM Artists )
SELECT T.fname, T.birthYear + 2023 - T.deathYear AS age FROM ( SELECT fname, birthYear, deathYear, ROW_NUMBER() OVER ( ORDER BY deathYear - birthYear DESC ) AS rn FROM Artists ) T WHERE T.rn = 1
 SELECT T1.fname, MAX(T1.deathYear) - T1.birthYear AS age FROM Artists AS T1 WHERE T1.deathYear IS NOT NULL GROUP BY T1.deathYear ORDER BY age DESC LIMIT 1
SELECT COUNT(paintingID) FROM Paintings WHERE location = 'gallery 240'
SELECT COUNT(paintingID) FROM Paintings WHERE location = '240'
SELECT COUNT(paintingID) FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE deathYear IS NOT NULL AND deathYear - birthYear = (SELECT MAX(deathYear - birthYear) FROM Artists))
SELECT COUNT(paintingID) FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE deathYear - birthYear = (SELECT MAX(deathYear - birthYear) FROM Artists))
SELECT A.fname, A.lname, P.year FROM Artists AS A INNER JOIN Paintings AS P ON A.artistID = P.painterID WHERE A.fname = 'Mary'
SELECT T1.title, T1.year FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T2.fname = 'Mary'
SELECT T2.width_mm FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T1.birthYear < 1850
SELECT width_mm FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE birthYear < 1850)
SELECT T2.location, T2.medium FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T1.fname = 'Pablo'
SELECT DISTINCT T2.location, T2.mediumOn FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T1.fname = 'Pablo'
SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID INNER JOIN Sculptures AS T3 ON T1.artistID = T3.sculptorID
SELECT A.fname, A.lname FROM Artists AS A INNER JOIN Paintings AS P ON A.artistID = P.painterID INNER JOIN Sculptures AS S ON A.artistID = S.sculptorID
SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = 'oil' INTERSECT SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = 'lithograph'
SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = 'oil' INTERSECT SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = 'lithographic'
SELECT T1.birthYear FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.year = 1884 AND T2.mediumOn = 'canvas'
SELECT T1.birthYear FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.year = 1884
SELECT DISTINCT T.fname FROM ( SELECT T1.fname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.location = 'gallery 241' AND T2.mediumOn = 'oil' ) AS T
SELECT T1.fname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.location = 'gallery 241' AND T2.mediumOn = 'oil'
SELECT medium, COUNT(paintingID) FROM Paintings UNION SELECT medium, COUNT(sculptureID) FROM Sculptures
SELECT medium, COUNT(*) FROM Paintings UNION SELECT medium, COUNT(*) FROM Sculptures
SELECT AVG(height_mm), medium FROM Paintings GROUP BY medium
SELECT AVG(height_mm), medium FROM Paintings GROUP BY medium
SELECT COUNT(paintingID), location FROM Paintings WHERE year < 1900 GROUP BY location
SELECT COUNT(paintingID) FROM Paintings WHERE year < 1900 AND location NOT IN (SELECT location FROM Paintings GROUP BY location HAVING COUNT(location) = 1)
SELECT title FROM Paintings WHERE year > 1910 AND medium = 'oil'
SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.year > 1910 AND T2.medium = 'oil on canvas'
SELECT DISTINCT T1.artistID FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.mediumOn = 'oil' AND T2.location = 'gallery 240'
SELECT DISTINCT T1.artistID FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.location = 'gallery 240' AND T2.mediumOn = 'oil'
SELECT DISTINCT T1.title FROM Paintings AS T1 INNER JOIN Paintings AS T2 ON T1.height_mm > T2.height_mm AND T1.mediumOn = 'canvas'
SELECT DISTINCT title FROM Paintings WHERE height_mm > ( SELECT MAX(height_mm) FROM Paintings WHERE medium = 'canvas' )
SELECT DISTINCT p1.painterID FROM Paintings p1 JOIN Paintings p2 ON p1.year < p2.year WHERE p2.location = 'gallery 240'
SELECT DISTINCT p.painterID FROM Paintings p WHERE p.year < ( SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240' )
SELECT MIN(paintingID) FROM Paintings WHERE year = ( SELECT MIN(year ) FROM Paintings )
SELECT MIN(paintingID) FROM Paintings WHERE year = ( SELECT MIN(year ) FROM Paintings );
SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.title LIKE '%female%'
SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.title LIKE '%female%'
SELECT DISTINCT title FROM Paintings ORDER BY title
SELECT DISTINCT title FROM Paintings ORDER BY title
SELECT DISTINCT title FROM Paintings ORDER BY (width_mm - height_mm)
SELECT title FROM Paintings ORDER BY height_mm ASC
SELECT DISTINCT CASE WHEN t = 'Paintings' THEN CONCAT(a.fname,'', a.lname) ELSE CONCAT(a.fname,'', a.lname) END FROM ( SELECT 'Paintings' AS t, p.title AS title, a.fname AS fname, a.lname AS lname FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE p.year BETWEEN 1900 AND 1950 UNION SELECT 'Scul
SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950
SELECT p.title FROM Paintings AS p JOIN Artists AS a ON p.painterID = a.artistID WHERE a.artistID = 222 UNION SELECT s.title FROM Sculptures AS s JOIN Artists AS a ON s.sculptorID = a.artistID WHERE a.artistID = 222
SELECT p.title FROM Paintings AS p JOIN Artists AS a ON p.painterID = a.artistID WHERE a.artistID = 222 UNION SELECT s.title FROM Sculptures AS s JOIN Artists AS a ON s.sculptorID = a.artistID WHERE a.artistID = 222
SELECT T1.artistID FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.year < 1900 GROUP BY T1.artistID ORDER BY COUNT(T2.paintingID) DESC LIMIT 1
SELECT T1.artistID FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.year < 1900 GROUP BY T1.artistID ORDER BY COUNT(T2.paintingID) DESC LIMIT 1
SELECT T.fname FROM ( SELECT T1.fname, COUNT(T2.sculptorID) AS num FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID GROUP BY T1.fname ORDER BY num DESC LIMIT 1 ) T
SELECT T.fname FROM ( SELECT T1.fname, COUNT(CASE WHEN T2.sculptorID = T1.artistID THEN 1 ELSE NULL END) AS count FROM Artists AS T1 LEFT JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID GROUP BY T1.fname ORDER BY count DESC LIMIT 1 ) T
SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800
SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800
SELECT DISTINCT location FROM Paintings WHERE year < 1885 OR year > 1930
SELECT DISTINCT location FROM Paintings WHERE year < 1885 OR year > 1930
SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000
SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000
SELECT location FROM Paintings WHERE mediumOn = 'on panel' INTERSECT SELECT location FROM Paintings WHERE mediumOn = 'on canvas'
SELECT location FROM Paintings WHERE mediumOn = 'on panel' INTERSECT SELECT location FROM Paintings WHERE mediumOn = 'on canvas'
SELECT DISTINCT location FROM Paintings WHERE year < 1885 AND year > 1930
SELECT DISTINCT location FROM Paintings WHERE year < 1885 INTERSECT SELECT DISTINCT location FROM Paintings WHERE year > 1930
SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE mediumOn = 'gallery 241' AND medium = 'oil'
SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE mediumOn = 'gallery 241' AND medium = 'oil on canvas'
SELECT MAX(height_mm), MAX(paintingID) FROM Paintings WHERE year < 1900
SELECT height_mm, paintingID FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC LIMIT 1
SELECT year, MAX(height_mm), MAX(width_mm) FROM Paintings GROUP BY year
SELECT year, MAX(height_mm), MAX(width_mm) FROM Paintings GROUP BY year
SELECT AVG(height_mm), AVG(width_mm), a.fname, a.lname FROM Paintings AS p JOIN Artists AS a ON p.painterID = a.artistID GROUP BY p.painterID ORDER BY a.fname, a.lname
SELECT AVG(height_mm), AVG(width_mm), fname, lname FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID GROUP BY T2.fname, T2.lname ORDER BY T2.fname, T2.lname
 SELECT T.fname, COUNT(CASE WHEN T.type = 'painting' THEN 1 ELSE NULL END) AS paintingCount FROM ( SELECT 'painting' AS type, A.fname, A.artistID FROM Artists A JOIN Paintings P ON A.artistID = P.painterID UNION ALL SELECT'sculpture' AS type, A.fname, A.artistID FROM Artists A JOIN Sculptures S ON A.artistID = S.sculptorID ) T GROUP BY T.fname HAVING COUNT(CASE WHEN T.type = 'painting' THEN 1 ELSE NULL END) >= 2
 SELECT a.fname, COUNT(p.paintingID) FROM Artists a LEFT JOIN Paintings p ON a.artistID = p.painterID GROUP BY a.artistID HAVING COUNT(p.paintingID) >= 2
SELECT deathYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING COUNT(paintingID) <= 3)
SELECT T2.deathYear FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID GROUP BY T1.painterID HAVING COUNT(T1.paintingID) < 4
SELECT T.deathYear FROM ( SELECT T1.deathYear, COUNT(T2.sculptureID) AS num FROM Artists T1 LEFT JOIN Sculptures T2 ON T1.artistID = T2.sculptorID GROUP BY T1.deathYear ) T ORDER BY T.num LIMIT 1
SELECT T2.deathYear FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.sculptorID = T2.artistID GROUP BY T2.deathYear ORDER BY COUNT(T1.sculptureID) ASC LIMIT 1
SELECT T1.paintingID, T1.height_mm FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T1.width_mm = ( SELECT MAX(width_mm) FROM Paintings WHERE location = 'gallery 240' ) AND T1.location = 'gallery 240'
SELECT height_mm, paintingID FROM Paintings WHERE width_mm = ( SELECT MAX(width_mm) FROM Paintings WHERE location = 'gallery 240' ) AND location = 'gallery 240'
SELECT paintingID FROM Paintings WHERE year < ( SELECT MIN(year) FROM Paintings WHERE location = '240' )
SELECT paintingID FROM Paintings WHERE year < ( SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240' )
SELECT paintingID FROM Paintings WHERE height_mm > ( SELECT AVG(height_mm) FROM Paintings WHERE year > 1900 )
SELECT paintingID FROM Paintings WHERE height_mm > ( SELECT MAX(height_mm) FROM Paintings WHERE year > 1900 )
SELECT A.fname, A.lname, COUNT(P.paintingID) FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' GROUP BY A.artistID ORDER BY COUNT(P.paintingID) DESC LIMIT 3
SELECT A.fname, A.lname, COUNT(P.paintingID) FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' GROUP BY A.artistID ORDER BY COUNT(P.paintingID) DESC LIMIT 1
SELECT T1.paintingID, T1.location, T1.title FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T1.medium = 'oil' ORDER BY T1.year
SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil on'AND year > 1800 ORDER BY year
SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title
SELECT T1.year, T1.location, T2.fname, T2.lname FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T1.height_mm > 1000 ORDER BY T1.title
SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID LEFT JOIN Sculptures AS T3 ON T1.artistID = T3.sculptorID WHERE T3.sculptureID IS NULL
SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T1.artistID NOT IN ( SELECT sculptorID FROM Sculptures )
SELECT DISTINCT location FROM Paintings WHERE year < 1885 AND mediumOn NOT IN ('canvas')
SELECT location FROM Paintings WHERE year < 1885 AND mediumOn!= 'canvas'
SELECT COUNT(Road) FROM race
SELECT COUNT(Road) FROM race
SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC
SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team
SELECT DISTINCT T2.Winning_driver FROM race AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Pole_Position!= 'Junior
SELECT DISTINCT T2.Winning_driver FROM race AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Pole_Position!= 'Junior Strous
SELECT Constructor FROM driver ORDER BY Age ASC
SELECT DISTINCT Constructor FROM driver ORDER BY Age ASC
SELECT DISTINCT Entrant FROM driver WHERE Age >= 20
SELECT DISTINCT Entrant FROM driver WHERE Age >= 20
SELECT MAX(Age), MIN(Age) FROM driver
SELECT MAX(Age), MIN(Age) FROM driver
SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20
SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC
SELECT T1.Driver_Name, T2.Race_Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID
SELECT T1.Driver_Name, T2.Race_Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID
 SELECT driver.Driver_Name, COUNT(race.Road) FROM driver INNER JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_Name
SELECT Driver_ID, COUNT(*) FROM race GROUP BY Driver_ID
 SELECT T1.Age FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY COUNT(T2.Road) DESC LIMIT 1
 SELECT T1.Age FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY COUNT(T1.Driver_ID) DESC LIMIT 1
 SELECT T1.Driver_Name, T1.Age FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(T2.Road) >= 2
 SELECT T1.Driver_Name, T1.Age FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_Name, T1.Age HAVING COUNT(T2.Road) >= 2
SELECT DISTINCT T2.Race_Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Age >= 26
 SELECT T2.Race_Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Age >= 26
SELECT Driver_Name FROM driver WHERE Constructor!= 'Bugatti'
SELECT Driver_Name FROM driver WHERE Constructor!= 'Bugatti'
SELECT Constructor, COUNT(Driver_ID) FROM driver GROUP BY Constructor
SELECT Constructor, COUNT(Driver_ID) FROM driver GROUP BY Constructor
SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(Engine) DESC LIMIT 1
SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(Engine) DESC LIMIT 1
SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(Engine) >= 2
SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(Engine) >= 2
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)
 SELECT DISTINCT T2.Constructor  FROM driver AS T1  INNER JOIN driver AS T2  ON T1.Constructor = T2.Constructor  WHERE T1.Age < 20 INTERSECT  SELECT DISTINCT T2.Constructor  FROM driver AS T1  INNER JOIN driver AS T2  ON T1.Constructor = T2.Constructor  WHERE T1.Age > 30
 SELECT DISTINCT T1.Constructor FROM driver AS T1 INNER JOIN driver AS T2 ON T1.Constructor = T2.Constructor WHERE T1.Age < 20 AND T2.Age > 30
SELECT DISTINCT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(Winning_team) > 1
 SELECT DISTINCT T1.Winning_team FROM race AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID
 SELECT DISTINCT T1.Driver_Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Pole_Position = 'James Hinchcliffe' OR T2.Pole_Position = 'Carl Skerlong'
 SELECT T1.Driver_Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Pole_Position = 'James Hinchcliffe' INTERSECT SELECT T1.Driver_Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Pole_Position = 'Carl Skerlong'
 SELECT DISTINCT T1.Driver_Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Pole_Position NOT LIKE '%James%'
 SELECT DISTINCT T2.Driver_Name FROM race AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Pole_Position = 'James Hinchcliffe'
SELECT COUNT(id) FROM languages
SELECT COUNT(id) FROM languages
SELECT name FROM languages ORDER BY name ASC
SELECT name FROM languages ORDER BY name
SELECT name FROM languages WHERE name LIKE '%ish%'
SELECT name FROM languages WHERE name LIKE '%ish%'
SELECT name FROM countries ORDER BY overall_score DESC
SELECT name FROM countries ORDER BY overall_score DESC
SELECT AVG("justice_score") FROM countries
SELECT AVG("justice_score") FROM countries
SELECT MAX(health_score), MIN(health_score) FROM countries WHERE name!= 'Norway'
SELECT MAX(health_score), MIN(health_score) FROM countries WHERE name!= 'Norway'
SELECT COUNT(DISTINCT language_id) FROM official_languages
SELECT COUNT(DISTINCT language_id) FROM official_languages
SELECT name FROM countries ORDER BY education_score DESC
SELECT name FROM countries ORDER BY education_score DESC
SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1
SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1
SELECT T1.name, T3.name FROM countries AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.country_id INNER JOIN languages AS T3 ON T2.language_id = T3.id
SELECT c.name, l.name FROM countries c INNER JOIN official_languages ol ON c.id = ol.country_id INNER JOIN languages l ON ol.language_id = l.id
SELECT l.name, COUNT(o.language_id) FROM languages l LEFT JOIN official_languages o ON l.id = o.language_id GROUP BY l.id
SELECT T1.name, COUNT(T2.country_id) FROM languages AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T1.name
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id GROUP BY l.name ORDER BY COUNT(c.id) DESC LIMIT 1
SELECT l.name FROM languages l INNER JOIN official_languages ol ON l.id = ol.language_id GROUP BY ol.language_id ORDER BY COUNT(ol.language_id) DESC LIMIT 1
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id GROUP BY ol.language_id HAVING COUNT(ol.country_id) >= 2
SELECT l.* FROM languages l JOIN official_languages ol ON l.id = ol.language_id GROUP BY ol.language_id HAVING COUNT(DISTINCT ol.country_id) >= 2
SELECT AVG(T2.overall_score) FROM languages AS T1 INNER JOIN countries AS T2 ON T1.id = T2.id WHERE T1.name = 'English'
SELECT AVG(T2.overall_score) FROM languages AS T1 INNER JOIN countries AS T2 ON T1.id = T2.id WHERE T1.name = 'English'
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id GROUP BY ol.language_id ORDER BY COUNT(ol.language_id) DESC LIMIT 3
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id GROUP BY l.name ORDER BY COUNT(c.id) DESC LIMIT 3
SELECT l.name, AVG(c.overall_score) FROM languages l LEFT JOIN official_languages ol ON l.id = ol.language_id LEFT JOIN countries c ON ol.country_id = c.id GROUP BY l.name ORDER BY AVG(c.overall_score) DESC
SELECT l.name, AVG(c.overall_score) FROM languages l LEFT JOIN official_languages ol ON l.id = ol.language_id LEFT JOIN countries c ON ol.country_id = c.id GROUP BY l.id ORDER BY AVG(c.overall_score) DESC
SELECT T1.name FROM countries AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.country_id GROUP BY T2.country_id ORDER BY COUNT(T2.language_id) DESC LIMIT 1
SELECT COUNT(*) FROM official_languages GROUP BY country_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)
SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages);
 SELECT T1.name FROM languages AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.language_id INNER JOIN countries AS T3 ON T2.country_id = T3.id WHERE T3.overall_score > 95 INTERSECT SELECT T1.name FROM languages AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.language_id INNER JOIN countries AS T4 ON T2.country_id = T4.id WHERE T4.overall_score < 90
 SELECT T1.name FROM languages AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.language_id INNER JOIN countries AS T3 ON T2.country_id = T3.id WHERE T3.overall_score > 95 INTERSECT SELECT T1.name FROM languages AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.language_id INNER JOIN countries AS T3 ON T2.country_id = T3.id WHERE T3.overall_score < 90
SELECT DISTINCT country, town_city FROM Addresses
SELECT T1.country, T1.town_city FROM Addresses AS T1
SELECT DISTINCT T1.county_state_province, T2.property_id FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id
SELECT T1.county_state_province, T2.property_id FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id
SELECT T2.feature_description FROM Features AS T1 INNER JOIN Property_Features AS T2 ON T1.feature_id = T2.feature_id WHERE T1.feature_name = 'rooftop'
SELECT T2.feature_description FROM Features AS T1 INNER JOIN Property_Features AS T2 ON T1.feature_id = T2.feature_id WHERE T2.feature_value = 'rooftop'
SELECT T1.feature_name, T1.feature_description FROM Features AS T1 INNER JOIN Property_Features AS T2 ON T1.feature_id = T2.feature_id GROUP BY T2.feature_id ORDER BY COUNT(T2.feature_id) DESC LIMIT 1
SELECT T1.feature_name, T1.feature_description FROM Features AS T1 INNER JOIN Property_Features AS T2 ON T1.feature_id = T2.feature_id GROUP BY T2.feature_id ORDER BY COUNT(T2.feature_id) DESC LIMIT 1
SELECT MIN(room_count) FROM Properties
SELECT MIN(room_count) FROM Properties
SELECT COUNT(*) FROM Properties WHERE parking_lots = '1' OR garage_yn = '1'
SELECT COUNT(*) FROM Properties WHERE parking_lots = '1' OR garage_yn = '1'
 SELECT T1.age_category_code FROM Ref_Age_Categories AS T1 INNER JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code WHERE T2.first_name LIKE '%Mother%'
SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description LIKE '%Mother%'
SELECT T1.first_name FROM Users AS T1 INNER JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id GROUP BY T2.owner_user_id ORDER BY COUNT(T2.owner_user_id) DESC LIMIT 1
SELECT T1.first_name FROM Users AS T1 INNER JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id GROUP BY T2.owner_user_id ORDER BY COUNT(T2.owner_user_id) DESC LIMIT 1
SELECT AVG(T1.room_count) FROM Rooms AS T1 INNER JOIN Property_Features AS T2 ON T1.property_id = T2.property_id WHERE T2.feature_value = 'Garden'
SELECT AVG(T2.room_count) FROM Property_Features AS T1 INNER JOIN Properties AS T2 ON T1.property_id = T2.property_id WHERE T1.feature_value = 'garden'
SELECT DISTINCT T1.town_city FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id INNER JOIN Property_Features AS T3 ON T2.property_id = T3.property_id WHERE T3.feature_id IN ( SELECT feature_id FROM Features WHERE feature_name = 'Swimming Pool' )
SELECT DISTINCT T1.town_city FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id INNER JOIN Property_Features AS T3 ON T2.property_id = T3.property_id WHERE T3.feature_id IN ( SELECT feature_id FROM Features WHERE feature_name = 'Swimming Pool' )
SELECT property_id, vendor_requested_price FROM Properties WHERE vendor_requested_price = ( SELECT MIN(vendor_requested_price ) FROM Properties )
SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price ASC LIMIT 1
SELECT CAST(SUM(CASE WHEN room_count IS NOT NULL THEN CAST(room_count AS REAL) ELSE 0 END) AS REAL) / COUNT(property_id) FROM Rooms
SELECT AVG(CAST(SUBSTR(T2.room_count, 1, INSTR(T2.room_count,'') - 1) AS REAL)) FROM Properties AS T1 INNER JOIN Rooms AS T2 ON T1.property_id = T2.property_id
SELECT COUNT(DISTINCT room_size) FROM Rooms
SELECT COUNT(DISTINCT room_size) FROM Rooms
SELECT DISTINCT u.user_id, s.search_string FROM Users u JOIN User_Searches s ON u.user_id = s.user_id GROUP BY u.user_id HAVING COUNT(s.search_seq) >= 2
SELECT DISTINCT u.user_id, us.search_seq FROM Users u JOIN User_Searches us ON u.user_id = us.user_id GROUP BY us.user_id HAVING COUNT(us.search_seq) >= 2
SELECT MAX(search_datetime) FROM User_Searches
SELECT MAX(search_datetime) FROM User_Searches
SELECT user_id, search_datetime, search_string FROM User_Searches ORDER BY search_string DESC
SELECT search_string, search_datetime FROM User_Searches ORDER BY search_string DESC
SELECT DISTINCT T1.zip_postcode FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id WHERE T2.owner_user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) <= 2)
SELECT DISTINCT T2.zip_postcode  FROM Properties AS T1  INNER JOIN Addresses AS T2 ON T1.property_address_id = T2.address_id  WHERE T1.owner_user_id NOT IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) >= 3)
SELECT DISTINCT u.user_category_code, u.user_id FROM Users u JOIN User_Searches us ON u.user_id = us.user_id GROUP BY us.user_id HAVING COUNT(us.search_seq) = 1
SELECT DISTINCT u.user_id, u.age_category_code FROM Users u JOIN User_Searches s ON u.user_id = s.user_id GROUP BY u.user_id, u.age_category_code HAVING COUNT(s.search_seq) = 1
SELECT T1.age_category_description FROM Ref_Age_Categories AS T1 INNER JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code WHERE T2.user_id IN ( SELECT user_id FROM User_Searches ORDER BY search_datetime LIMIT 1 )
SELECT T1.age_category_description FROM Ref_Age_Categories AS T1 INNER JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code ORDER BY T2.date_registered LIMIT 1
SELECT T1.login_name FROM Users AS T1 INNER JOIN Ref_Age_Categories AS T2 ON T1.age_category_code = T2.age_category_code WHERE T2.age_category_description = 'Senior Citizen' ORDER BY T1.first_name
SELECT T1.login_name FROM Users AS T1 INNER JOIN Ref_Age_Categories AS T2 ON T1.age_category_code = T2.age_category_code WHERE T2.age_category_description = 'Senior Citizen' ORDER BY T1.first_name
SELECT COUNT(T1.search_seq) FROM User_Searches AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T2.is_buyer = 'Y'
SELECT COUNT(*) FROM Users AS T1 INNER JOIN User_Searches AS T2 ON T1.user_id = T2.user_id WHERE T1.is_buyer = 'Y'
SELECT date_registered FROM Users WHERE login_name = 'ratione'
SELECT date_registered FROM Users WHERE login_name = 'ratione'
SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1'
SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1'
SELECT T1.line_1_number_building, T1.line_2_number_street, T1.town_city FROM Addresses AS T1 INNER JOIN Users AS T2 ON T1.address_id = T2.user_address_id INNER JOIN Ref_Age_Categories AS T3 ON T2.age_category_code = T3.age_category_code WHERE T3.age_category_description = 'Senior Citizen'
SELECT T1.line_1_number_building, T1.line_2_number_street, T1.town_city FROM Addresses AS T1 INNER JOIN Users AS T2 ON T1.address_id = T2.user_address_id INNER JOIN Ref_Age_Categories AS T3 ON T2.age_category_code = T3.age_category_code WHERE T3.age_category_description = 'Senior Citizen'
SELECT COUNT(DISTINCT T1.property_id) FROM Property_Features AS T1 INNER JOIN Properties AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id HAVING COUNT(T1.feature_id) >= 2
SELECT COUNT(DISTINCT t1.property_id) FROM Property_Features AS t1 INNER JOIN Properties AS t2 ON t1.property_id = t2.property_id GROUP BY t1.property_id HAVING COUNT(DISTINCT t1.feature_id) >= 2
SELECT p.property_id, COUNT(pp.photo_seq) FROM Properties p LEFT JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.property_id
SELECT p.property_id, COUNT(pp.photo_seq) FROM Properties p LEFT JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.property_id
SELECT U.user_id, COUNT(P.photo_id) FROM Users U LEFT JOIN Properties P ON U.user_id = P.owner_user_id LEFT JOIN Property_Photos PP ON P.property_id = PP.property_id GROUP BY U.user_id
SELECT T1.user_id, COUNT(T2.property_id) FROM Users AS T1 INNER JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id INNER JOIN Property_Photos AS T3 ON T2.property_id = T3.property_id GROUP BY T1.user_id
 SELECT SUM(CASE WHEN T1.user_category_description = 'Single Mother' THEN T3.price_max ELSE 0 END) + SUM(CASE WHEN T1.user_category_description = 'Student' THEN T3.price_max ELSE 0 END) AS total_max_price FROM Ref_User_Categories AS T1 INNER JOIN Users AS T2 ON T1.user_category_code = T2.user_category_code INNER JOIN Properties AS T3 ON T2.user_id = T3.owner_user_id
SELECT MAX(T1.price_max) FROM Properties AS T1 INNER JOIN Users AS T2 ON T1.owner_user_id = T2.user_id WHERE T2.user_category_code ='single_mother' OR T2.user_category_code ='student'
SELECT T1.datestamp, T2.property_name FROM User_Property_History AS T1 INNER JOIN Properties AS T2 ON T1.property_id = T2.property_id ORDER BY T1.datestamp
SELECT T1.datestamp, T2.property_name FROM User_Property_History AS T1 INNER JOIN Properties AS T2 ON T1.property_id = T2.property_id ORDER BY T1.datestamp
SELECT T1.property_type_description, T1.property_type_code FROM Ref_Property_Types AS T1 INNER JOIN Properties AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code ORDER BY COUNT(T1.property_type_code) DESC LIMIT 1
SELECT T1.property_type_description FROM Ref_Property_Types AS T1 INNER JOIN Properties AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code ORDER BY COUNT(T1.property_type_code) DESC LIMIT 1
 SELECT T1.age_category_description FROM Ref_Age_Categories AS T1 WHERE T1.age_category_code = 'Over 60'
SELECT T1.age_category_description FROM Ref_Age_Categories AS T1 INNER JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code WHERE T2.age_category_code = 'Over 60'
SELECT DISTINCT room_size FROM Rooms
SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size
SELECT T1.country FROM Addresses AS T1 INNER JOIN Users AS T2 ON T1.address_id = T2.user_address_id WHERE T2.first_name = 'Robbie'
SELECT T1.country FROM Addresses AS T1 INNER JOIN Users AS T2 ON T1.address_id = T2.user_address_id WHERE T2.first_name = 'Robbie'
SELECT DISTINCT T1.first_name, T1.middle_name, T1.last_name FROM Users AS T1 INNER JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id WHERE T1.user_address_id = T2.property_address_id
SELECT u.first_name, u.middle_name, u.last_name FROM Users u INNER JOIN Properties p ON u.user_id = p.owner_user_id INNER JOIN Addresses a ON p.property_address_id = a.address_id
SELECT T1.search_string FROM User_Searches AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T2.property_id IS NULL
SELECT DISTINCT T1.search_string FROM User_Searches AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T2.user_id NOT IN ( SELECT owner_user_id FROM Properties )
SELECT u.last_name, u.user_id FROM Users u INNER JOIN User_Property_History uph ON u.user_id = uph.user_id INNER JOIN User_Searches us ON u.user_id = us.user_id GROUP BY u.user_id HAVING COUNT(uph.property_id) >= 2 AND COUNT(us.search_seq) <= 2
SELECT u.last_name, u.user_id FROM Users u JOIN User_Searches s ON u.user_id = s.user_id GROUP BY u.user_id HAVING COUNT(s.search_seq) <= 2 INTERSECT SELECT u.last_name, u.user_id FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id GROUP BY u.user_id HAVING COUNT(p.property_id) >= 2
SELECT COUNT(*) FROM bike WHERE weight > 780
SELECT product_name, weight FROM bike ORDER BY price ASC
SELECT heat, name, nation FROM cyclist
SELECT MAX(weight), MIN(weight) FROM bike
SELECT AVG(price) FROM bike WHERE material = 'Carbon CC'
SELECT name, result FROM cyclist WHERE nation!= 'Russia'
SELECT DISTINCT T1.id, T1.product_name FROM bike AS T1 INNER JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id WHERE T2.purchase_year > 2015
 SELECT T1.id, T1.product_name  FROM bike AS T1  INNER JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id  INNER JOIN ( SELECT bike_id, COUNT(cyclist_id) AS count FROM cyclists_own_bikes GROUP BY bike_id ) AS T3 ON T2.bike_id = T3.bike_id AND T3.count >= 4
 SELECT T1.id, T1.name FROM cyclist AS T1 INNER JOIN cyclists_own_bikes AS T2 ON T1.id = T2.cyclist_id GROUP BY T1.id ORDER BY COUNT(T2.bike_id) DESC LIMIT 1
 SELECT DISTINCT T1.product_name FROM bike AS T1 INNER JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id INNER JOIN cyclist AS T3 ON T2.cyclist_id = T3.id WHERE T3.nation IN ('Russia', 'Great Britain')
SELECT COUNT(DISTINCT heat) FROM cyclist
SELECT COUNT(id) FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year > 2015)
 SELECT DISTINCT T1.product_name FROM bike AS T1 INNER JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id INNER JOIN cyclist AS T3 ON T2.cyclist_id = T3.id WHERE T3.result < '4:21.558'
 SELECT T1.product_name, T1.price FROM bike AS T1 INNER JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id INNER JOIN cyclist AS T3 ON T2.cyclist_id = T3.id WHERE T3.name = 'Bradley Wiggins' INTERSECT SELECT T1.product_name, T1.price FROM bike AS T1 INNER JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id INNER JOIN cyclist AS T3 ON T2.cyclist_id = T3.id WHERE T3.name = 'Antonio Tauler'
SELECT name, nation, result FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE bike_id IN (SELECT id FROM bike WHERE product_name = 'racing bike'))
SELECT product_name FROM bike WHERE material LIKE '%fiber%'
 SELECT COUNT(*), T1.id FROM cyclists_own_bikes AS T2 INNER JOIN bike AS T1 ON T2.bike_id = T1.id GROUP BY T2.cyclist_id ORDER BY T2.cyclist_id
SELECT g.Flavor, MAX(g.Price) FROM goods g WHERE g.Food = 'cake'
SELECT i.Item, g.Flavor FROM items i INNER JOIN goods g ON i.Item = g.Id WHERE g.Food = 'cake' ORDER BY g.Price DESC LIMIT 1
SELECT g.Price, g.Flavor FROM goods g WHERE g.Food = 'cookie' ORDER BY g.Price LIMIT 1
SELECT i.Item, g.Flavor FROM items i INNER JOIN goods g ON i.Item = g.Id WHERE g.Food = 'Cookie' ORDER BY g.Price LIMIT 1
SELECT Id FROM goods WHERE Flavor = 'apple'
SELECT Id FROM goods WHERE Flavor = 'apple'
SELECT Id FROM goods WHERE Price < 3
SELECT Id FROM goods WHERE Price < 3
 SELECT DISTINCT T1.Id FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId INNER JOIN items AS T3 ON T2.ReceiptNumber = T3.Receipt WHERE T3.Item = (SELECT Id FROM goods WHERE Flavor = 'lemon')
 SELECT DISTINCT T1.Id FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId INNER JOIN items AS T3 ON T2.ReceiptNumber = T3.Receipt WHERE T3.Item = (SELECT Id FROM goods WHERE Flavor = 'lemon' AND Food = 'cake')
 SELECT COUNT(DISTINCT T1.CustomerId) FROM receipts AS T1 INNER JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt INNER JOIN goods AS T3 ON T2.Item = T3.Id
 SELECT T1.Food, COUNT(T2.Receipt) FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item GROUP BY T1.Food
 SELECT DISTINCT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt WHERE i.Item = 'bakery' GROUP BY c.Id HAVING COUNT(i.Receipt) >= 15
SELECT DISTINCT T1.CustomerId FROM receipts AS T1 INNER JOIN customers AS T2 ON T1.CustomerId = T2.Id GROUP BY T1.CustomerId HAVING COUNT(T1.ReceiptNumber) >= 15
 SELECT T1.LastName FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId INNER JOIN items AS T3 ON T2.ReceiptNumber = T3.Receipt WHERE T3.Item IN (SELECT Item FROM items GROUP BY Item HAVING COUNT(Item) > 10)
SELECT T1.LastName FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId GROUP BY T2.CustomerId HAVING COUNT(T2.ReceiptNumber) > 10
 SELECT COUNT(DISTINCT T2.Food) FROM items AS T1 INNER JOIN goods AS T2 ON T1.Item = T2.Id WHERE T2.Food = 'Cake'
SELECT COUNT(DISTINCT T2.Flavor) FROM items AS T1 INNER JOIN goods AS T2 ON T1.Item = T2.Id WHERE T2.Food = 'cake'
SELECT DISTINCT T2.Flavor FROM items AS T1 INNER JOIN goods AS T2 ON T1.Item = T2.Id WHERE T1.Item = 'Croissant'
SELECT DISTINCT T2.Flavor FROM items AS T1 INNER JOIN goods AS T2 ON T1.Item = T2.Id WHERE T1.Item = 'croissant'
 SELECT DISTINCT i.Item FROM customers c INNER JOIN receipts r ON c.Id = r.CustomerId INNER JOIN items i ON r.ReceiptNumber = i.Receipt WHERE c.Id = 15
 SELECT DISTINCT i.Item FROM customers c INNER JOIN receipts r ON c.Id = r.CustomerId INNER JOIN items i ON r.ReceiptNumber = i.Receipt WHERE c.Id = 15
 SELECT AVG(g.Price), MAX(g.Price), MIN(g.Price)  FROM goods g  JOIN items i ON g.Id = i.Item
SELECT AVG(T2.Price), MIN(T2.Price), MAX(T2.Price) FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item GROUP BY T1.Food
SELECT DISTINCT T1.ReceiptNumber  FROM receipts AS T1  JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt  WHERE T2.Item IN ('Cake', 'Cookie')
SELECT DISTINCT T1.ReceiptNumber  FROM receipts AS T1  JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt  WHERE T2.Item IN ('cakes', 'cookies')
SELECT DISTINCT T1.ReceiptNumber  FROM receipts AS T1  JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt  JOIN goods AS T3 ON T2.Item = T3.Id  WHERE T3.Food
 SELECT DISTINCT T1.ReceiptNumber  FROM receipts AS T1  JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt  JOIN goods AS T3 ON T2.Item = T3.Id  JOIN customers AS T4 ON T4.Id = T1.CustomerId  WHERE T4.LastName = 'Logan' AND T3.Food = 'croissant'
SELECT T1.ReceiptNumber, T1.Date  FROM receipts AS T1  JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt  WHERE T2.Item = ( SELECT T3.Item                    FROM items AS T3  
SELECT r.ReceiptNumber, r.Date  FROM receipts r  JOIN items i ON r.ReceiptNumber = i.Receipt  JOIN goods g ON i.Item = g.Id  WHERE g.Price = ( SELECT MAX(g2.Price) FROM goods g2 );
SELECT Item FROM items GROUP BY Item ORDER BY COUNT(Item) ASC LIMIT 1
SELECT Item FROM items GROUP BY Item ORDER BY COUNT(Item) ASC LIMIT 1
SELECT Food, COUNT(*) FROM goods GROUP BY Food
SELECT Food, COUNT(*) FROM goods GROUP BY Food
SELECT AVG(Price) FROM goods GROUP BY Food
SELECT AVG(Price) FROM goods WHERE Food IN ( SELECT Food FROM goods GROUP BY Food HAVING COUNT(Id) > 1 )
SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5
SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5
SELECT DISTINCT T2.Flavor FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item INNER JOIN receipts AS T3 ON T3.ReceiptNumber = T2.Receipt
 SELECT DISTINCT T1.Flavor FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item INNER JOIN receipts AS T3 ON T2.Receipt = T3.ReceiptNumber WHERE T1.Price > 10
SELECT DISTINCT Id, Price FROM goods WHERE Price < ( SELECT AVG(Price) FROM goods )
SELECT DISTINCT Id, Price FROM goods WHERE Price < ( SELECT AVG(Price) FROM goods )
SELECT DISTINCT Id FROM goods WHERE Price < ( SELECT MIN(Price) FROM goods WHERE Flavor = 'Tart' )
SELECT DISTINCT Id FROM goods WHERE Price < ( SELECT Price FROM goods WHERE Flavor = 'Tart' )
SELECT DISTINCT T1.ReceiptNumber  FROM receipts AS T1  JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt  JOIN goods AS T3 ON T2.Item = T3.Id  WHERE T3.Price > 13
SELECT DISTINCT T1.ReceiptNumber  FROM receipts AS T1  JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt  JOIN goods AS T3 ON T2.Item = T3.Id  WHERE T3.Price > 13
 SELECT T1.Date FROM receipts AS T1 INNER JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt INNER JOIN goods AS T3 ON T2.Item = T3.Id WHERE T3.Price > 15
SELECT T2.Date FROM goods AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.ReceiptNumber WHERE T1.Price > 15
SELECT Id FROM goods WHERE Id LIKE '%APP%'
SELECT Id FROM goods WHERE Id LIKE '%APP%'
SELECT Price FROM goods WHERE Id = '70'
SELECT Id, Price FROM goods WHERE Id = '70'
SELECT LastName FROM customers ORDER BY LastName
SELECT LastName FROM customers ORDER BY LastName
SELECT Id FROM goods ORDER BY Id
SELECT DISTINCT Item FROM items
 SELECT DISTINCT r.ReceiptNumber  FROM receipts r  JOIN items i ON r.ReceiptNumber = i.Receipt  JOIN goods g ON i.Item = g.Id  WHERE g.Flavor = 'apple flavor pie'  OR r.CustomerId = 12
SELECT DISTINCT T1.ReceiptNumber  FROM receipts AS T1  INNER JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt  WHERE T2.Item = 'apple flavor pie'  OR T1.CustomerId = 12
SELECT t1.Date, MAX(t1.Date) FROM receipts AS t1 INNER JOIN customers AS t2 ON t1.CustomerId = t2.Id GROUP BY t1.Date
SELECT ReceiptNumber, MAX(Date) FROM receipts
 SELECT DISTINCT r.ReceiptNumber  FROM receipts r  JOIN items i ON r.ReceiptNumber = i.Receipt  JOIN goods g ON i.Item = g.Id  WHERE r.Date = (SELECT MIN(Date) FROM receipts)  OR g.Price > 10
SELECT DISTINCT T1.ReceiptNumber  FROM receipts AS T1  JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt  WHERE T2.Price > 10 OR T1.Date = (SELECT MIN(Date) FROM receipts
SELECT Id FROM goods WHERE Price BETWEEN 3 AND 7 AND (Flavor = 'Cookie' OR Food = 'Cake')
SELECT Id FROM goods WHERE Price BETWEEN 3 AND 7 AND Food IN ('Cookies', 'Cakes')
SELECT c.FirstName, c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId ORDER BY r.Date LIMIT 1
SELECT c.FirstName, c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId ORDER BY r.Date LIMIT 1
SELECT AVG(Price) FROM goods WHERE Flavor = 'blackberry' OR Flavor = 'blueberry'
SELECT AVG(Price) FROM goods WHERE Flavor = 'blackberry' OR Flavor = 'blueberry'
SELECT MIN(Price) FROM goods WHERE Flavor = 'cheese'
SELECT MIN(Price) FROM goods WHERE Flavor = 'cheese'
SELECT MAX(Price), MIN(Price), AVG(Price) FROM goods GROUP BY Flavor ORDER BY Flavor
SELECT Flavor, MAX(Price), MIN(Price), AVG(Price) FROM goods GROUP BY Flavor ORDER BY Flavor
SELECT MIN(Price), MAX(Price) FROM goods GROUP BY Food ORDER BY Food
SELECT MIN(Price), MAX(Price) FROM goods WHERE Food = 'food'
SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(Date) DESC LIMIT 3
SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(Date) DESC LIMIT 3
 SELECT c.FirstName, c.LastName, COUNT(r.ReceiptNumber) FROM customers c LEFT JOIN receipts r ON c.Id = r.CustomerId GROUP BY c.FirstName, c.LastName ORDER BY COUNT(r.ReceiptNumber) DESC LIMIT 1
SELECT t1.CustomerId, COUNT(*) FROM receipts AS t1 INNER JOIN customers AS t2 ON t1.CustomerId = t2.Id GROUP BY t1.CustomerId ORDER BY COUNT(*) DESC LIMIT 1
 SELECT COUNT(DISTINCT CustomerId), Date FROM receipts GROUP BY Date
SELECT T1.Date, COUNT(T1.ReceiptNumber) FROM receipts AS T1 INNER JOIN customers AS T2 ON T1.CustomerId = T2.Id GROUP BY T1.Date
SELECT c.FirstName, c.LastName  FROM customers c  JOIN receipts r ON c.Id = r.CustomerId  JOIN items i ON r.ReceiptNumber = i.Receipt  JOIN goods g ON i.Item = g.Id  WHERE g.Flavor
SELECT c.FirstName, c.LastName FROM customers c INNER JOIN receipts r ON c.Id = r.CustomerId INNER JOIN items i ON r.ReceiptNumber = i.Receipt WHERE i.Item = 'apple flavored Tart'
SELECT Id FROM goods WHERE Price < ( SELECT Price FROM goods WHERE Food = 'Croissant' ) AND Food = 'Cookies'
SELECT Id FROM goods WHERE Price < ( SELECT Price FROM goods WHERE Food = 'croissant' ) AND Food = 'cookie'
SELECT Id FROM goods WHERE Price >= ( SELECT AVG(Price) FROM goods WHERE Food = 'Tart' ) AND Food = 'Cake'
SELECT Id FROM goods WHERE Price >= ( SELECT AVG(Price) FROM goods WHERE Food = 'Tart' ) AND Food = 'Cake'
SELECT Id FROM goods WHERE Price > (SELECT 2 * AVG(Price) FROM goods)
SELECT Id FROM goods WHERE Price > (SELECT AVG(Price) FROM goods) * 2
SELECT i.Item, g.Flavor, g.Food FROM items i INNER JOIN goods g ON i.Item = g.Id ORDER BY g.Price
SELECT Id, Flavor, Food FROM goods ORDER BY Price
SELECT i.Item, g.Flavor FROM items i INNER JOIN goods g ON i.Item = g.Id WHERE g.Food = 'Cake' ORDER BY g.Flavor
SELECT Id, Flavor FROM goods WHERE Food = 'cake' ORDER BY Flavor
SELECT i.Item FROM items i INNER JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'chocolate' GROUP BY i.Item HAVING COUNT(i.Receipt) <= 10
 SELECT T1.Item FROM items AS T1 INNER JOIN goods AS T2 ON T1.Item = T2.Id WHERE T2.Flavor = 'chocolate' GROUP BY T1.Item HAVING COUNT(T1.Item) <= 10
 SELECT DISTINCT T1.Flavor FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Food = 'Cake' EXCEPT SELECT DISTINCT T1.Flavor FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Food = 'Tart'
 SELECT DISTINCT T1.Flavor FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T2.Receipt NOT IN ( SELECT Receipt FROM items WHERE Item = 'Tart' )
SELECT Item FROM items GROUP BY Item ORDER BY COUNT(Item) DESC LIMIT 3
SELECT T.Item, COUNT(T.Receipt) FROM ( SELECT T1.Item, T2.Receipt FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Receipt = T2.ReceiptNumber GROUP
 SELECT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.CustomerId HAVING SUM(g.Price) > 150
 SELECT DISTINCT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.CustomerId HAVING SUM(g.Price) > 150
 SELECT DISTINCT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY c.Id HAVING AVG(CASE WHEN g.Price > 5 THEN 1 ELSE 0 END)
SELECT DISTINCT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY c.Id, g.Id
 SELECT DISTINCT T2.Date FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Receipt = T2.ReceiptNumber INNER JOIN goods AS T3 ON T1.Item = T3.Id WHERE T3.Price * T1.Ordinal > 100
SELECT DISTINCT T1.Date FROM receipts AS T1 INNER JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE T2.Item IN (SELECT Id FROM goods WHERE Food = 'bakery') GROUP BY T
SELECT COUNT(Driver_ID) FROM driver
SELECT COUNT(Driver_ID) FROM driver
SELECT COUNT(Driver_ID), Make FROM driver WHERE Points > '150' GROUP BY Make
SELECT Make, COUNT(Driver_ID) FROM driver WHERE Points > '150' GROUP BY Make
SELECT AVG(Age) FROM driver GROUP BY Make
SELECT AVG(Age), Make FROM driver GROUP BY Make
SELECT AVG(Laps) FROM driver WHERE Age < 20
SELECT AVG(Laps) FROM driver WHERE Age < 20
SELECT T1.Manager, T1.Sponsor, T1.Car_Owner FROM team AS T1 ORDER BY T1.Car_Owner
SELECT T1.Manager, T1.Sponsor, T1.Car_Owner FROM team AS T1 ORDER BY T1.Car_Owner
SELECT DISTINCT T1.Make FROM team AS T1 INNER JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T1.Make HAVING COUNT(T1.Team_ID) > 1
SELECT DISTINCT T1.Make FROM team AS T1 INNER JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T1.Make HAVING COUNT(T1.Team_ID) > 1
SELECT T2.Make FROM team AS T1 INNER JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID INNER JOIN driver AS T3 ON T2.Driver_ID = T3.Driver_ID WHERE T3.Car_Owner = 'Buddy Arrington'
SELECT T2.Make FROM team AS T1 INNER JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID INNER JOIN driver AS T3 ON T2.Driver_ID = T3.Driver_ID WHERE T3.Car_Owner = 'Buddy Arrington'
SELECT MAX(`Points`), MIN(`Points`) FROM `driver`
SELECT MAX(`Points`), MIN(`Points`) FROM `driver`
SELECT COUNT(Driver_ID) FROM driver WHERE Points < '150'
SELECT COUNT(Driver_ID) FROM driver WHERE Points < '150'
SELECT Driver FROM driver ORDER BY Age ASC
SELECT Driver FROM driver ORDER BY Age ASC
SELECT Driver FROM driver ORDER BY Points DESC
SELECT Driver FROM driver ORDER BY Points DESC
SELECT T1.Driver, T2.Country FROM driver AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Country_Id
SELECT T1.Driver, T2.Country FROM driver AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Country_Id
SELECT MAX(T2.Points) FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T1.Capital = 'Dublin'
SELECT MAX(T2.Points) FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T1.Capital = 'Dublin'
SELECT AVG(T2.Age) FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T1.Official_native_language = 'English'
SELECT AVG(T2.Age) FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T1.Official_native_language = 'English'
SELECT DISTINCT T1.Country FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Points > '150'
SELECT DISTINCT T1.Country FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Points > '150'
SELECT T1.Capital FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Points = ( SELECT MAX(Points) FROM driver )
SELECT T1.Capital FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Points = ( SELECT MAX(Points) FROM driver )
SELECT Make, COUNT(Driver_ID) FROM driver GROUP BY Make
SELECT Make, COUNT(Driver_ID) FROM driver GROUP BY Make
SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(Make) DESC LIMIT 1
SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(Make) DESC LIMIT 1
SELECT DISTINCT T1.Make FROM driver AS T1 INNER JOIN team_driver AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Make HAVING COUNT(T1.Driver_ID) >= 3
SELECT DISTINCT T1.Make FROM driver AS T1 INNER JOIN team_driver AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Make HAVING COUNT(T1.Driver_ID) >= 3
SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)
SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)
SELECT T1.Country FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Make = 'Dodge' INTERSECT SELECT T1.Country FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Make = 'Chevrolet'
SELECT T1.Country FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Make = 'Dodge' INTERSECT SELECT T1.Country FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Make = 'Chevrolet'
SELECT SUM(Points), AVG(Points) FROM driver
SELECT SUM(`Points`), AVG(`Points`) FROM `driver`
SELECT Country FROM country WHERE Country_Id NOT IN (SELECT Country FROM driver)
SELECT Country FROM country WHERE Country_Id NOT IN (SELECT Country FROM driver)
SELECT T1.Manager, T1.Sponsor FROM team AS T1 INNER JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T2.Team_ID ORDER BY COUNT(T2.Driver_ID) DESC LIMIT 1
SELECT T1.Manager, T1.Sponsor FROM team AS T1 INNER JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T2.Team_ID ORDER BY COUNT(T2.Driver_ID) DESC LIMIT 1
SELECT T1.Manager, T1.Car_Owner FROM team AS T1 INNER JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T2.Team_ID HAVING COUNT(DISTINCT T2.Driver_ID) >= 2
SELECT T1.Manager, T1.Car_Owner  FROM team AS T1  JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID  GROUP BY T1.Team_ID  HAVING COUNT(DISTINCT T2.Driver_ID) >= 2
SELECT COUNT(Institution_ID) FROM institution
SELECT COUNT(Institution_ID) FROM institution
SELECT Name FROM institution ORDER BY Name ASC
SELECT Name FROM institution ORDER BY Name ASC
SELECT Name FROM institution ORDER BY Founded ASC
SELECT Name FROM institution ORDER BY Founded
SELECT City, Province FROM institution
SELECT City, Province FROM institution
SELECT MAX(Enrollment), MIN(Enrollment) FROM institution
SELECT MAX(Enrollment), MIN(Enrollment) FROM institution
SELECT DISTINCT T1.Affiliation FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.City!= 'Vancouver'
SELECT DISTINCT T1.Affiliation FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.City!= 'Vancouver'
SELECT Stadium FROM institution ORDER BY Capacity DESC
SELECT Stadium FROM institution ORDER BY Capacity DESC
 SELECT T1.Stadium FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T1.Enrollment DESC LIMIT 1
SELECT T1.Stadium FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T1.Enrollment DESC LIMIT 1
SELECT T1.Name, T2.Nickname FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID
SELECT T1.Name, T2.Nickname FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID
SELECT T2.Nickname FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T1.Enrollment LIMIT 1
SELECT T2.Nickname FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T1.Enrollment LIMIT 1
SELECT T1.Name FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T2.Number_of_Championships DESC
SELECT T1.Name FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T2.Number_of_Championships DESC
SELECT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship)
SELECT T1.Name FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID
SELECT SUM(T2.Number_of_Championships) FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.Affiliation = 'Public'
SELECT SUM(T2.Number_of_Championships) FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.Affiliation = 'Public'
SELECT Affiliation, COUNT(Institution_ID) FROM institution GROUP BY Affiliation
SELECT Affiliation, COUNT(Institution_ID) FROM institution GROUP BY Affiliation
SELECT affiliation FROM institution GROUP BY affiliation ORDER BY COUNT(affiliation) DESC LIMIT 1
SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(Affiliation) DESC LIMIT 1
SELECT Founded FROM institution GROUP BY Founded HAVING COUNT(Institution_ID) > 1
SELECT Founded FROM institution GROUP BY Founded HAVING COUNT(Institution_ID) > 1
SELECT T2.Nickname FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T1.Capacity DESC
SELECT T2.Nickname FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T1.Capacity DESC
SELECT SUM(T2.Enrollment) FROM institution AS T1 INNER JOIN institution AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.City IN ('Vancouver', 'Calgary')
 SELECT T1.Enrollment FROM institution AS T1 WHERE T1.City = 'Vancouver' OR T1.City = 'Calgary'
SELECT DISTINCT T1.Province FROM institution AS T1 INNER JOIN institution AS T2 ON T1.Province = T2.Province WHERE T1.Founded < 1920 AND T2.Founded > 1950
SELECT DISTINCT T1.Province FROM institution AS T1 INNER JOIN institution AS T2 ON T1.Province = T2.Province WHERE T1.Founded < 1920 AND T2.Founded > 1950
SELECT COUNT(DISTINCT Province) FROM institution
SELECT COUNT(DISTINCT Province) FROM institution
SELECT * FROM Warehouses
SELECT * FROM Warehouses
SELECT DISTINCT T2.Contents  FROM Warehouses AS T1  INNER JOIN Boxes AS T2  ON T1.Code = T2.Warehouse  WHERE T1.Location = 'New York';
SELECT DISTINCT T2.Contents  FROM Warehouses AS T1  INNER JOIN Boxes AS T2  ON T1.Code = T2.Warehouse  WHERE T1.Location = 'New York';
SELECT T2.Contents FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T1.Value > 150
 SELECT T1.Contents FROM Boxes AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Code WHERE T2.Value > 150
SELECT T1.Code, AVG(T2.Value) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Code
SELECT AVG(T2.Value) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Code
SELECT AVG(Value), SUM(Value) FROM Boxes
SELECT AVG(Value), SUM(Value) FROM Boxes
SELECT AVG(Capacity), SUM(Capacity) FROM Warehouses
SELECT AVG(Capacity), SUM(Capacity) FROM Warehouses
SELECT Contents, AVG(Value), MAX(Value) FROM Boxes GROUP BY Contents
SELECT Contents, AVG(Value), MAX(Value) FROM Boxes GROUP BY Contents
SELECT Contents FROM Boxes GROUP BY Contents ORDER BY SUM(Value) DESC LIMIT 1
SELECT Contents FROM Boxes ORDER BY Value DESC LIMIT 1
SELECT AVG(Value) FROM Boxes
SELECT AVG(Value) FROM Boxes
SELECT DISTINCT Contents FROM Boxes
SELECT DISTINCT Contents FROM Boxes
SELECT COUNT(DISTINCT Contents) FROM Boxes
SELECT COUNT(DISTINCT Contents) FROM Boxes
SELECT DISTINCT Location FROM Warehouses
SELECT DISTINCT Location FROM Warehouses
SELECT DISTINCT T2.Code  FROM Warehouses AS T1  INNER JOIN Boxes AS T2  ON T1.Code = T2.Warehouse  WHERE T1.Location IN ('Chicago', 'New York');
SELECT DISTINCT T2.Code  FROM Warehouses AS T1  JOIN Boxes AS T2 ON T1.Code = T2.Warehouse  WHERE T1.Location IN ('Chicago', 'New York');
SELECT SUM(T2.Value) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T1.Location IN ('Chicago', 'New York')
SELECT SUM(T2.Value) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T1.Location IN ('Chicago', 'New York')
SELECT DISTINCT T2.Contents  FROM Warehouses AS T1  INNER JOIN Boxes AS T2  ON T1.Code = T2.Warehouse  WHERE T1.Location IN ('Chicago', 'New York');
 SELECT DISTINCT T1.Contents  FROM Boxes AS T1  INNER JOIN Boxes AS T2  ON T1.Code!= T2.Code  WHERE T1.Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago')  AND T2.Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York')
SELECT DISTINCT Contents FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'New York')
SELECT DISTINCT T2.Contents  FROM Warehouses AS T1  JOIN Boxes AS T2 ON T1.Code = T2.Warehouse  WHERE T1.Location!= 'New York';
SELECT T1.Location  FROM Warehouses AS T1  INNER JOIN Boxes AS T2  ON T1.Code = T2.Warehouse  WHERE T2.Contents = 'Rocks' AND T2.Code NOT IN ( SELECT Code FROM Boxes WHERE Contents = 'Scissors' );
SELECT DISTINCT T1.Location  FROM Warehouses AS T1  JOIN Boxes AS T2 ON T1.Code = T2.Warehouse  WHERE T2.Contents = 'Rocks' AND T2.Contents!= 'Scissors'
SELECT DISTINCT T1.Code FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents = 'Rocks' OR T2.Contents = 'Scissors'
SELECT DISTINCT T1.Code FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents IN ('Rocks', 'Scissors')
SELECT DISTINCT T1.Location  FROM Warehouses AS T1  JOIN Boxes AS T2 ON T1.Code = T2.Warehouse  WHERE T2.Contents IN ('Rocks', 'Scissors');
SELECT T1.Location FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents = 'Rocks and Scissors'
SELECT Code, Contents FROM Boxes ORDER BY Value
SELECT Code, Contents FROM Boxes ORDER BY Value
SELECT Code, Contents FROM Boxes ORDER BY Value ASC LIMIT 1
SELECT Code, Contents FROM Boxes ORDER BY Value ASC LIMIT 1
SELECT DISTINCT T.Contents  FROM (   SELECT Contents, AVG(Value) AS avg_value    FROM Boxes    GROUP BY Contents ) AS T  WHERE T.avg_value < ( SELECT AVG(Value) FROM Boxes );
SELECT DISTINCT Contents FROM Boxes WHERE Value > ( SELECT AVG(Value) FROM Boxes )
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents
SELECT Code FROM Boxes WHERE Value > ( SELECT Value FROM Boxes WHERE Contents = 'Rocks' )
SELECT Code FROM Boxes WHERE Value > ( SELECT Value FROM Boxes WHERE Contents = 'Rocks' )
SELECT Code, Contents FROM Boxes WHERE Value > ( SELECT MAX(Value) FROM Boxes WHERE Contents = 'Scissors' )
SELECT B1.Code, B1.Contents  FROM Boxes B1  WHERE B1.Value > ( SELECT MAX(B2.Value)                     FROM Boxes B2                     WHERE B2.Contents = 'Scissors' );
SELECT SUM(T2.Value) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse ORDER BY T1.Capacity DESC LIMIT 1
SELECT SUM(T2.Value) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse ORDER BY T1.Capacity DESC LIMIT 1
SELECT W.Code, AVG(B.Value) FROM Warehouses W INNER JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Code HAVING AVG(B.Value) > 150
SELECT AVG(T2.Value) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T1.Code IN ( SELECT T1.Code FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Code HAVING
SELECT Contents, SUM(Value), COUNT(Code) FROM Boxes GROUP BY Contents
SELECT Contents, SUM(Value), COUNT(Code) FROM Boxes GROUP BY Contents
SELECT Location, SUM(Capacity) AS TotalCapacity, AVG(Capacity) AS AverageCapacity, MAX(Capacity) AS MaxCapacity FROM Warehouses GROUP BY Location
SELECT Location, SUM(Capacity) AS TotalCapacity, AVG(Capacity) AS AverageCapacity, MAX(Capacity) AS MaxCapacity FROM Warehouses GROUP BY Location
SELECT SUM(Capacity) FROM Warehouses
SELECT SUM(Capacity) FROM Warehouses
SELECT T1.Location, MAX(T2.Value) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Location
SELECT T1.Location, MAX(T2.Value) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Location
SELECT T1.Code, COUNT(T2.Code) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Code
SELECT W.Code, COUNT(B.Code) FROM Warehouses W LEFT JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Code
SELECT COUNT(DISTINCT T1.Location)  FROM Warehouses AS T1  JOIN Boxes AS T2 ON T1.Code = T2.Warehouse  WHERE T2.Contents = 'Rocks'
 SELECT COUNT(DISTINCT T2.Code) FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T1.Contents = 'Rocks'
SELECT T1.Code, T2.Location  FROM Boxes AS T1  JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code
SELECT T1.Code, T2.Location FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code
SELECT DISTINCT T2.Code  FROM Warehouses AS T1  INNER JOIN Boxes AS T2  ON T1.Code = T2.Warehouse  WHERE T1.Location = 'Chicago';
SELECT DISTINCT T2.Code  FROM Warehouses AS T1  JOIN Boxes AS T2 ON T1.Code = T2.Warehouse  WHERE T1.Location = 'Chicago';
SELECT T1.Code, COUNT(T2.Code) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Code
SELECT T1.Code, T1.Location, COUNT(T2.Code) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Code
SELECT T1.Location, COUNT(DISTINCT T2.Contents) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Location
SELECT T1.Location, COUNT(T2.Contents) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Location
SELECT Code FROM Warehouses WHERE Capacity < ( SELECT SUM(Capacity) FROM Warehouses )
SELECT W.Code FROM Warehouses W LEFT JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Code HAVING COUNT(B.Code) > W.Capacity
SELECT SUM(T2.Value)  FROM Warehouses AS T1  JOIN Boxes AS T2 ON T1.Code = T2.Warehouse  WHERE T1.Location!= 'Chicago';
SELECT SUM(T2.Value) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T1.Location!= 'Chicago'
SELECT University_Name, City, State FROM university ORDER BY University_Name
SELECT University_Name, City, State FROM university ORDER BY University_Name
SELECT COUNT(*) FROM university WHERE State IN ('Illinois', 'Ohio')
SELECT COUNT(University_ID) FROM university WHERE State = 'Illinois' OR State = 'Ohio'
SELECT MAX(Enrollment), AVG(Enrollment), MIN(Enrollment) FROM university
SELECT MAX(Enrollment), AVG(Enrollment), MIN(Enrollment) FROM university
SELECT T1.Team_Name FROM university AS T1 INNER JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T1.Enrollment > ( SELECT AVG(Enrollment) FROM university )
 SELECT DISTINCT T1.Team_Name FROM university AS T1 INNER JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Total > ( SELECT AVG(Total) FROM overall_ranking )
SELECT DISTINCT Home_Conference FROM university
SELECT DISTINCT Home_Conference FROM university
SELECT Home_Conference, COUNT(University_ID) FROM university GROUP BY Home_Conference
SELECT COUNT(DISTINCT University_ID) FROM university WHERE Home_Conference NOT IN ( SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING COUNT(DISTINCT University_ID) = 1 )
SELECT State FROM university GROUP BY State ORDER BY COUNT(University_ID) DESC LIMIT 1
SELECT State FROM university GROUP BY State ORDER BY COUNT(University_ID) DESC LIMIT 1
SELECT DISTINCT T1.Home_Conference FROM university AS T1 INNER JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Total > 2000 GROUP BY T1.Home_Conference HAVING AVG(T1.Enrollment) > 2000
SELECT DISTINCT Home_Conference FROM university WHERE Enrollment > 2000
SELECT Home_Conference FROM university GROUP BY Home_Conference ORDER BY COUNT(University_ID) ASC LIMIT 1
SELECT Home_Conference FROM university GROUP BY Home_Conference ORDER BY COUNT(Enrollment) ASC LIMIT 1
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code
SELECT m.`Major_Name`, mr.`Rank`  FROM `major` m  JOIN `major_ranking` mr ON m.`Major_ID` = mr.`Major_ID`  JOIN `university` u ON mr.`University_ID` = u.`University_ID`  WHERE u.`University_Name` = 'Augustana College'
SELECT m.Rank, m.Major_Name FROM major AS m INNER JOIN major_ranking AS mr ON m.Major_ID = mr.Major_ID INNER JOIN university AS u ON mr.University_ID = u.University_ID WHERE u.University_Name = 'Augustana College'
SELECT T1.University_Name, T1.City, T1.State FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID INNER JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T2.Rank = 1 AND T3.Major_Name = 'Accounting'
SELECT T1.University_Name, T1.City, T1.State FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID INNER JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T2.Rank = 1 AND T3.Major_Name = 'Accounting'
SELECT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Rank = 1 GROUP BY T1.University_Name ORDER BY COUNT(T2.Rank) DESC LIMIT 1
SELECT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Rank = 1 GROUP BY T1.University_Name ORDER BY COUNT(T2.Rank) DESC LIMIT 1
SELECT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Rank = 1
SELECT DISTINCT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Rank!= 1
 SELECT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID INNER JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T3.Major_Name = 'Accounting' INTERSECT SELECT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID INNER JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T3.Major_Name = 'Urban Education'
 SELECT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID INNER JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T3.Major_Name = 'Accounting' INTERSECT SELECT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID INNER JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T3.Major_Name = 'Urban Education'
SELECT T1.University_Name, T2.Rank FROM university AS T1 INNER JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T1.State = 'Wisconsin'
SELECT T1.University_Name, T2.Rank FROM university AS T1 INNER JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T1.State = 'Wisconsin'
SELECT T2.University_Name FROM overall_ranking AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID ORDER BY T1.Research_point DESC LIMIT 1
SELECT T2.University_Name FROM overall_ranking AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID ORDER BY T1.Research_point DESC LIMIT 1
SELECT T2.University_Name FROM overall_ranking AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID ORDER BY T1.Reputation_point ASC
SELECT T2.University_Name FROM overall_ranking AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID ORDER BY T1.Reputation_point ASC
SELECT T1.University_Name FROM major AS T2 INNER JOIN major_ranking AS T3 ON T2.Major_ID = T3.Major_ID INNER JOIN university AS T1 ON T3.University_ID = T1.University_ID WHERE T2.Major_Name = 'Accounting' AND T3.Rank >= 3
SELECT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID INNER JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T3.Major_Name = 'Accounting' AND T2.Rank >= 3
SELECT T1.Enrollment FROM university AS T1 INNER JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Rank <= 5
SELECT COUNT(T2.University_ID) FROM overall_ranking AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID WHERE T1.Rank <= 5
SELECT T1.University_Name, T2.Citation_point FROM university AS T1 INNER JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Reputation_point IN (SELECT Reputation_point FROM overall_ranking ORDER BY Reputation_point DESC LIMIT 3)
SELECT T1.University_Name, T2.Citation_point FROM university AS T1 INNER JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID ORDER BY T2.Reputation_point DESC LIMIT 3
SELECT DISTINCT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(University_ID) > 2
SELECT DISTINCT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(University_ID) > 2
SELECT Title FROM Movies WHERE Rating IS NULL
SELECT Title FROM Movies WHERE Rating IS NULL
 SELECT T2.Title FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T2.Rating = 'G'
 SELECT T2.Title FROM Movies AS T1 INNER JOIN Movies AS T2 ON T1.Code = T2.Code WHERE T1.Rating = 'G'
SELECT T2.Title  FROM MovieTheaters AS T1  INNER JOIN Movies AS T2  ON T1.Movie = T2.Code  WHERE T1.Name
SELECT T2.Title FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T1.Name = 'Odeon'
SELECT M.Title, MT.Name FROM Movies M INNER JOIN MovieTheaters MT ON M.Code = MT.Movie
SELECT M.Title, MT.Name FROM Movies M INNER JOIN MovieTheaters MT ON M.Code = MT.Movie
SELECT COUNT(Code) FROM Movies WHERE Rating = 'G'
SELECT COUNT(*) FROM Movies WHERE Rating = 'G'
SELECT COUNT(DISTINCT T1.Code) FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie
SELECT COUNT(T2.Code) FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code
SELECT COUNT(DISTINCT T1.Code) FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie
SELECT COUNT(DISTINCT Movie) FROM MovieTheaters
SELECT COUNT(DISTINCT Code) FROM MovieTheaters
SELECT COUNT(DISTINCT Code) FROM MovieTheaters
SELECT T2.Rating FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T2.Title LIKE '%Citizen%'
SELECT T2.Rating FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T1.Name LIKE '%Citizen%'
SELECT T2.Name FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Rating IN ('G', 'PG')
 SELECT T2.Name FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Rating IN ('G', 'PG')
 SELECT T2.Title  FROM MovieTheaters AS T1  INNER JOIN Movies AS T2  ON T1.Movie = T2.Code  WHERE T1.Name IN ('Odeon', 'Imperial')
 SELECT T2.Title FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T1.Name IN ('Odeon', 'Imperial')
 SELECT T2.Title  FROM MovieTheaters AS T1  INNER JOIN Movies AS T2  ON T1.Movie = T2.Code  WHERE T1.Name IN ('Odeon', 'Imperial')
 SELECT T1.Title FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Name IN ('Odeon', 'Imperial')
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon')
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon')
SELECT Title FROM Movies ORDER BY Title
SELECT Title FROM Movies ORDER BY Title ASC
SELECT Title FROM Movies ORDER BY Rating
SELECT T2.Title FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code ORDER BY T2.Rating
SELECT Name FROM MovieTheaters GROUP BY Name ORDER BY COUNT(Movie) DESC LIMIT 1
SELECT Name FROM MovieTheaters GROUP BY Name ORDER BY COUNT(Movie) DESC LIMIT 1
 SELECT T2.Title FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code GROUP BY T2.Title ORDER BY COUNT(T1.Code) DESC LIMIT 1
 SELECT T2.Title FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code GROUP BY T2.Code ORDER BY COUNT(T1.Movie) DESC LIMIT 1
SELECT Rating, COUNT(*) FROM Movies GROUP BY Rating
SELECT Rating, COUNT(*) FROM Movies GROUP BY Rating
SELECT COUNT(Code) FROM Movies WHERE Rating IS NOT NULL
SELECT COUNT(Code) FROM Movies WHERE Rating IS NOT NULL
SELECT Name FROM MovieTheaters WHERE Movie IS NOT NULL
SELECT T2.Name FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie
SELECT Name FROM MovieTheaters WHERE Movie IS NULL
SELECT Name FROM MovieTheaters WHERE Movie IS NULL
SELECT T2.Name FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Rating = 'G'
 SELECT T2.Name FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Rating = 'G'
SELECT Title FROM Movies
SELECT T2.Title FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code
SELECT DISTINCT Rating FROM Movies
SELECT DISTINCT Rating FROM Movies
SELECT * FROM Movies WHERE Rating IS NULL
SELECT * FROM Movies WHERE Rating IS NULL
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters)
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters)
 SELECT T2.AccountNumber FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Recipient = T2.AccountNumber ORDER BY T1.Weight DESC LIMIT 1
SELECT T2.Name FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Recipient = T2.AccountNumber ORDER BY T1.Weight DESC LIMIT 1
SELECT SUM(T2.Weight) FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender WHERE T1.Name = 'Leo Wong'
SELECT SUM(T2.Weight) FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender WHERE T1.Name = 'Leo Wong'
SELECT Position FROM Employee WHERE Name = 'Amy Wong'
SELECT Position FROM Employee WHERE Name = 'Amy Wong'
SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela'
SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela'
SELECT AVG(Salary) FROM Employee WHERE Position = 'Intern'
SELECT AVG(Salary) FROM Employee WHERE Position = 'Intern'
SELECT T2.Level  FROM Employee AS T1  INNER JOIN Has_Clearance AS T2 ON T1.EmployeeID = T2.Employee  WHERE T1.Name = 'Physician'
SELECT T2.Level FROM Employee AS T1 INNER JOIN Has_Clearance AS T2 ON T1.EmployeeID = T2.Employee WHERE T1.Position = 'Physician'
SELECT T2.PackageNumber FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender INNER JOIN Employee AS T3 ON T3.Name = 'Leo Wong' WHERE T1.Name = T3.Name
SELECT COUNT(T2.PackageNumber) FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender WHERE T1.Name = 'Leo Wong'
SELECT DISTINCT T2.PackageNumber FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Recipient WHERE T1.Name = 'Leo Wong'
SELECT DISTINCT T2.PackageNumber FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Recipient WHERE T1.Name = 'Leo Wong'
SELECT DISTINCT T1.AccountNumber FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender WHERE T1.Name = 'Leo Wong' UNION SELECT DISTINCT T1.AccountNumber FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Recipient WHERE T1.Name = 'Leo Wong'
SELECT DISTINCT CASE WHEN T1.Contents LIKE '%Leo Wong%' THEN T1.PackageNumber ELSE NULL END AS PackageNumber FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Sender = T2.AccountNumber UNION SELECT DISTINCT CASE WHEN T1.Contents LIKE '%Leo Wong%' THEN T1.PackageNumber ELSE NULL END AS PackageNumber FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Recipient = T2.AccountNumber
SELECT COUNT(T1.PackageNumber) FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Sender = T2.AccountNumber INNER JOIN Client AS T3 ON T1.Recipient = T3.AccountNumber WHERE T2.Name = 'Ogden Wernstrom' AND T3.Name = 'Leo Wong'
SELECT COUNT(T1.PackageNumber) FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Sender = T2.AccountNumber INNER JOIN Client AS T3 ON T1.Recipient = T3.AccountNumber WHERE T2.Name = 'Ogden Wernstrom' AND T3.Name = 'Leo Wong'
SELECT T2.Contents FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender WHERE T1.Name = 'John Zoidfarb'
SELECT T2.Contents FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender WHERE T1.Name = 'John Zoidfarb'
SELECT T1.PackageNumber, T1.Weight FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name LIKE '%John%' ORDER BY T1.Weight DESC LIMIT 1
SELECT T1.PackageNumber, T1.Weight FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name LIKE 'John%' ORDER BY T1.Weight DESC LIMIT 1
SELECT PackageNumber, Weight FROM Package ORDER BY Weight LIMIT 3
SELECT PackageNumber, Weight FROM Package ORDER BY Weight LIMIT 3
SELECT T1.Name, COUNT(T2.PackageNumber) FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T1.AccountNumber ORDER BY COUNT(T2.PackageNumber) DESC LIMIT 1
SELECT T1.Name, COUNT(*) FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T1.AccountNumber ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Name, COUNT(T2.Recipient) FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Recipient GROUP BY T1.AccountNumber ORDER BY COUNT(T2.Recipient) ASC LIMIT 1
SELECT MIN(Weight) FROM Package
SELECT T1.Name FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T2.Sender HAVING COUNT(T2.Sender) > 1
SELECT DISTINCT T1.Name FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T2.Sender HAVING COUNT(T2.Sender) > 1
SELECT T1.Coordinates FROM Planet AS T1 INNER JOIN Client AS T2 ON T1.Name = T2.Name WHERE T2.Name = 'Mars'
SELECT T1.Coordinates FROM Planet AS T1 INNER JOIN Client AS T2 ON T1.Name = T2.Name WHERE T2.Name = 'Mars'
SELECT Name, Coordinates FROM Planet ORDER BY Name
SELECT Name, Coordinates FROM Planet ORDER BY Name
SELECT ShipmentID FROM Shipment WHERE Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Phillip J. Fry')
SELECT DISTINCT T1.ShipmentID FROM Shipment AS T1 INNER JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID WHERE T2.Name = 'Phillip J Fry'
SELECT Date FROM Shipment
SELECT Date FROM Shipment
SELECT DISTINCT S.ShipmentID  FROM Shipment S  JOIN Planet P ON S.Planet = P.PlanetID  WHERE P.Name = 'Mars';
SELECT DISTINCT S.ShipmentID FROM Shipment S INNER JOIN Planet P ON S.Planet = P.PlanetID WHERE P.Name = 'Mars'
SELECT S.ShipmentID FROM Shipment S INNER JOIN Planet P ON S.Planet = P.PlanetID INNER JOIN Employee E ON S.Manager = E.EmployeeID WHERE P.Name = 'Mars' AND E.Name = 'Turanga Leela'
SELECT S.ShipmentID FROM Shipment S INNER JOIN Planet P ON S.Planet = P.PlanetID INNER JOIN Employee E ON S.Manager = E.EmployeeID WHERE P.Name = 'Mars' AND E.Name = 'Turanga Leela'
SELECT DISTINCT S.ShipmentID FROM Shipment S INNER JOIN Planet P ON S.Planet = P.PlanetID WHERE P.Name = 'Mars' UNION SELECT DISTINCT S.ShipmentID FROM Shipment S INNER JOIN Employee E ON S.Manager = E.EmployeeID WHERE E.Name = 'Turanga Leela'
SELECT DISTINCT S.ShipmentID FROM Shipment S INNER JOIN Planet P ON S.Planet = P.PlanetID INNER JOIN Has_Clearance HC ON P.PlanetID = HC.Planet INNER JOIN Employee E ON HC.Employee = E.EmployeeID WHERE E.Name = 'Turanga Leela' AND P.Name = 'Mars'
SELECT T1.Name, COUNT(T2.ShipmentID) FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet GROUP BY T1.PlanetID
SELECT T1.Name, COUNT(T2.ShipmentID) FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet GROUP BY T1.PlanetID
SELECT T1.Name FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet GROUP BY T2.Planet ORDER BY COUNT(T2.Planet) DESC LIMIT 1
 SELECT T1.Name FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet GROUP BY T1.PlanetID ORDER BY COUNT(T2.ShipmentID) DESC LIMIT 1
SELECT E.Name, COUNT(S.ShipmentID) FROM Employee E INNER JOIN Shipment S ON E.EmployeeID = S.Manager GROUP BY E.EmployeeID
SELECT COUNT(ShipmentID), Name FROM Employee WHERE EmployeeID IN ( SELECT Manager FROM Shipment GROUP BY Manager )
SELECT SUM(T2.Weight)  FROM Planet AS T1  INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet  INNER JOIN Package AS T3 ON T2.ShipmentID = T3.Shipment  WHERE T1.Name = 'Mars'
SELECT SUM(T2.Weight) FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet INNER JOIN Package AS T3 ON T2.ShipmentID = T3.Shipment WHERE T1.Name = 'Mars'
 SELECT T1.Name, SUM(T3.Weight) FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet INNER JOIN Package AS T3 ON T2.ShipmentID = T3.Shipment GROUP BY T1.PlanetID
SELECT T1.Name, SUM(T2.Weight) FROM Planet AS T1 INNER JOIN Shipment AS T3 ON T1.PlanetID = T3.Planet INNER JOIN Package AS T2 ON T3.ShipmentID = T2.Shipment GROUP BY T1.PlanetID
SELECT DISTINCT T2.Name  FROM Shipment AS T1  JOIN Planet AS T2 ON T1.Planet = T2.PlanetID  JOIN Package AS T3 ON T1.ShipmentID = T3.Shipment  WHERE T3.Weight * ( SELECT COUNT(*) FROM Package WHERE Package.Shipment = T1.ShipmentID ) > 30
SELECT DISTINCT T1.Name FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet INNER JOIN Package AS T3 ON T2.ShipmentID = T3.Shipment GROUP BY T2.Planet HAVING SUM(T3.Weight) > 30
 SELECT DISTINCT P.PackageNumber  FROM Package P  INNER JOIN Shipment S ON P.Shipment = S.ShipmentID  INNER JOIN Planet PL ON S.Planet = PL.PlanetID  INNER JOIN Client C ON P.Sender = C.AccountNumber  INNER JOIN Employee E ON C.AccountNumber = E.EmployeeID  INNER JOIN Has_Clearance HC ON E.EmployeeID = HC.Employee  INNER JOIN Planet P2 ON HC.Planet = P2.PlanetID  WHERE PL.Name = 'Omicron Persei 8' AND E.Name = 'Zapp Brannigan'
SELECT COUNT(T2.PackageNumber) FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender INNER JOIN Shipment AS T3 ON T2.Shipment = T3.ShipmentID INNER JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T1.Name = 'Zapp Brannigan' AND T4.Name = 'Omicron Persei 8'
SELECT DISTINCT T1.PackageNumber  FROM Package AS T1  JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID  JOIN Planet AS T3 ON T2.Planet = T3.PlanetID  WHERE T3.Name = 'Omicron Persei 8'  OR EXISTS (SELECT 1 FROM Client AS T4 WHERE T4.AccountNumber = T1.Sender AND T4.Name = 'Zapp Brannigan')
SELECT COUNT(T1.ShipmentID) FROM Shipment AS T1 INNER JOIN Package AS T2 ON T1.ShipmentID = T2.Shipment WHERE T1.Planet = ( SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8' ) OR T2.Sender = ( SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan' )
SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30
SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30
SELECT E.Name FROM Employee E LEFT JOIN Has_Clearance H ON E.EmployeeID = H.Employee LEFT JOIN Planet P ON H.Planet = P.PlanetID WHERE P.Name = 'Mars' AND H.Level IS NULL
SELECT E.Name FROM Employee E LEFT JOIN Has_Clearance H ON E.EmployeeID = H.Employee LEFT JOIN Planet P ON H.Planet = P.PlanetID WHERE P.Name = 'Mars' AND H.Planet IS NULL
SELECT E.Name  FROM Employee E  JOIN Has_Clearance HC ON E.EmployeeID = HC.Employee  JOIN Planet P ON HC.Planet = P.PlanetID  WHERE P.Name = 'Omega III'
SELECT E.Name FROM Employee E INNER JOIN Has_Clearance H ON E.EmployeeID = H.Employee INNER JOIN Planet P ON H.Planet = P.PlanetID WHERE P.Name = 'Omega III'
SELECT DISTINCT T1.Name FROM Planet AS T1 INNER JOIN Has_Clearance AS T2 ON T1.PlanetID = T2.Planet WHERE T2.Employee IN (SELECT Employee FROM Has_Clearance GROUP BY Employee HAVING COUNT(*) = 1)
SELECT DISTINCT T1.Name FROM Planet AS T1 INNER JOIN Has_Clearance AS T2 ON T1.PlanetID = T2.Planet WHERE T2.Level = 1
SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000
SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000
SELECT Name FROM Employee WHERE Salary > ( SELECT AVG(Salary) FROM Employee ) OR Salary > 5000
SELECT Name FROM Employee WHERE Salary > ( SELECT AVG(Salary) FROM Employee ) OR Salary > 5000
SELECT COUNT(*) FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))
SELECT COUNT(*) FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))
SELECT COUNT(Game_ID) FROM game
SELECT COUNT(Game_ID) FROM game
SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC
SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC
SELECT AVG(Units_sold_Millions) FROM game WHERE Developers NOT LIKE '%Nintendo%'
SELECT AVG(Units_sold_Millions) FROM game WHERE Developers NOT LIKE '%Nintendo%'
SELECT Platform_name, Market_district FROM platform
SELECT Platform_name, Market_district FROM platform
SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1
SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1
SELECT MAX(Rank_of_the_year), MIN(Rank_of_the_year) FROM player
SELECT MAX(Rank_of_the_year), MIN(Rank_of_the_year) FROM player
SELECT COUNT(*) FROM player WHERE Rank_of_the_year < 3
SELECT COUNT(Player_ID) FROM player WHERE Rank_of_the_year <= 3
SELECT Player_name FROM player ORDER BY Player_name ASC
SELECT Player_name FROM player ORDER BY Player_name
SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC
SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC
SELECT T1.Player_name, T1.Rank_of_the_year FROM player AS T1 INNER JOIN game_player AS T2 ON T1.Player_ID = T2.Player_ID INNER JOIN game AS T3 ON T2.Game_ID = T3.Game_ID WHERE T3.Title = 'Super Mario World'
SELECT T1.Player_name, T1.Rank_of_the_year FROM player AS T1 INNER JOIN game_player AS T2 ON T1.Player_ID = T2.Player_ID INNER JOIN game AS T3 ON T2.Game_ID = T3.Game_ID WHERE T3.Title = 'Super Mario World'
SELECT DISTINCT T1.Developers FROM game AS T1 INNER JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID INNER JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.College = 'Auburn'
SELECT DISTINCT T1.Developers FROM game AS T1 INNER JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID INNER JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.College = 'Auburn'
 SELECT AVG(T3.Units_sold_Millions) FROM player AS T1 INNER JOIN game_player AS T2 ON T1.Player_ID = T2.Player_ID INNER JOIN game AS T3 ON T2.Game_ID = T3.Game_ID WHERE T1.Position = 'Guard'
SELECT AVG(T2.Units_sold_Millions) FROM player AS T1 INNER JOIN game_player AS T3 ON T1.Player_ID = T3.Player_ID INNER JOIN game AS T2 ON T2.Game_ID = T3.Game_ID WHERE T1.Position = 'Guard'
SELECT T1.Title, T2.Platform_name FROM game AS T1 INNER JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID
SELECT T1.Title, T2.Platform_name FROM game AS T1 INNER JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID
SELECT T2.Title FROM platform AS T1 INNER JOIN game AS T2 ON T1.Platform_ID = T2.Platform_ID WHERE T1.Market_district IN ('Asia', 'USA')
SELECT T1.Title FROM game AS T1 INNER JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID INNER JOIN platform AS T3 ON T1.Platform_ID = T3.Platform_ID WHERE T3.Market_district IN ('Asia', 'USA')
SELECT Franchise, COUNT(Game_ID) FROM game GROUP BY Franchise
SELECT Franchise, COUNT(Game_ID) FROM game GROUP BY Franchise
SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(Game_ID) DESC LIMIT 1
SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(Game_ID) DESC LIMIT 1
SELECT DISTINCT Franchise FROM game GROUP BY Franchise HAVING COUNT(Franchise) >= 2
SELECT DISTINCT Franchise FROM game GROUP BY Franchise HAVING COUNT(Franchise) >= 2
SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)
SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)
SELECT DISTINCT T1.Title FROM game AS T1 INNER JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID INNER JOIN player AS T3 ON T2.Player_ID = T3.Player_ID INNER JOIN player AS T4 ON T2.Player_ID = T4.Player_ID WHERE T3.College = 'Oklahoma' AND T4.College = 'Auburn'
SELECT T1.Title FROM game AS T1 INNER JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID INNER JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.College = 'Oklahoma' OR T3.College = 'Auburn'
SELECT DISTINCT Franchise FROM game
SELECT DISTINCT Franchise FROM game
SELECT DISTINCT T1.Title FROM game AS T1 INNER JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID LEFT JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.Position!= 'Guard'
SELECT T1.Title FROM game AS T1 INNER JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID WHERE T2.Player_ID NOT IN (SELECT Player_ID FROM game_player WHERE If_active = 1 AND Position = 'Guard')
SELECT Name FROM press ORDER BY Year_Profits_billion DESC
SELECT Name FROM press ORDER BY Year_Profits_billion DESC
SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1
SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1
SELECT AVG(Year_Profits_billion), MAX(Year_Profits_billion) FROM press
SELECT Press_ID, AVG(Year_Profits_billion) AS avg_yearly_profit, MAX(Year_Profits_billion) AS max_yearly_profit FROM press GROUP BY Press_ID
SELECT Name FROM press WHERE Month_Profits_billion = ( SELECT MAX(Month_Profits_billion ) FROM press );
SELECT Name FROM press WHERE Month_Profits_billion = ( SELECT MAX(Month_Profits_billion ) FROM press );
 SELECT (SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1) AS highest_profit_publisher, (SELECT Name FROM press ORDER BY Month_Profits_billion ASC LIMIT 1) AS lowest_profit_publisher
 SELECT (SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1) AS highest_profit_press, (SELECT Name FROM press ORDER BY Month_Profits_billion ASC LIMIT 1) AS lowest_profit_press
SELECT COUNT(Author_ID) FROM author WHERE Age < 30
SELECT COUNT(Author_ID) FROM author WHERE Age < 30
SELECT AVG(Age), Gender FROM author GROUP BY Gender
SELECT Gender, AVG(Age) FROM author GROUP BY Gender
SELECT Gender, COUNT(*) FROM author WHERE Age > 30 GROUP BY Gender
SELECT Age, Gender, COUNT(Author_ID) FROM author WHERE Age > 30 GROUP BY Gender
SELECT Title FROM book ORDER BY Release_date DESC
SELECT Title FROM book ORDER BY Release_date DESC
SELECT Book_Series, COUNT(Book_ID) FROM book GROUP BY Book_Series
SELECT Book_Series, COUNT(Book_ID) FROM book GROUP BY Book_Series
SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5
SELECT Title, Release_date FROM book WHERE Sale_Amount = ( SELECT Sale_Amount FROM book ORDER BY Sale_Amount DESC LIMIT 1 ) LIMIT 5
SELECT Book_Series FROM book WHERE Sale_Amount = '1000' INTERSECT SELECT Book_Series FROM book WHERE Sale_Amount = '500'
SELECT DISTINCT T1.Book_Series FROM book AS T1 INNER JOIN book AS T2 ON T1.Book_Series = T2.Book_Series WHERE T1.Sale_Amount > '1000' AND T2.Sale_Amount < '500'
 SELECT DISTINCT T1.Name FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Book_Series = 'MM' INTERSECT SELECT DISTINCT T1.Name FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Book_Series = 'LT'
SELECT DISTINCT T1.Name FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Book_Series = 'MM' INTERSECT SELECT DISTINCT T1.Name FROM author AS
SELECT Name, Age FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book)
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book)
SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID HAVING COUNT(Book_ID) > 1)
SELECT T1.Name FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T2.Author_ID HAVING COUNT(T2.Author_ID) > 1
 SELECT T1.Title, T2.Name, T3.Name FROM book AS T1 INNER JOIN author AS T2 ON T1.Author_ID = T2.Author_ID INNER JOIN press AS T3 ON T1.Press_ID = T3.Press_ID
 SELECT T1.Title, T2.Name, T3.Name FROM book AS T1 INNER JOIN author AS T2 ON T1.Author_ID = T2.Author_ID INNER JOIN press AS T3 ON T1.Press_ID = T3.Press_ID
SELECT T1.Name, SUM(CASE WHEN T2.Sale_Amount = '100M+' THEN 1 ELSE CASE WHEN T2.Sale_Amount = '50M-' THEN 1 ELSE CASE WHEN T2
SELECT T1.Name, SUM(CASE WHEN T2.Sale_Amount = '100M' THEN 100 ELSE CASE WHEN T2.Sale_Amount = '500M' THEN 500 ELSE CASE WHEN T2
 SELECT T1.Name, COUNT(CASE WHEN T2.Sale_Amount > '1000' THEN T2.Book_ID ELSE NULL END) FROM press AS T1 INNER JOIN book AS T2 ON T1.Press_ID = T2.Press_ID
 SELECT p.Name, COUNT(*) FROM book AS b INNER JOIN press AS p ON b.Press_ID = p.Press_ID WHERE b.Sale_Amount = 'above 1000' GROUP BY p.Name
SELECT T1.Name FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID ORDER BY T2.Sale_Amount DESC LIMIT 1
SELECT T1.Name FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID ORDER BY T2.Sale_Amount DESC LIMIT 1
SELECT a.Name, a.Gender FROM author a JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a.Author_ID ORDER BY COUNT(b.Book_ID) DESC LIMIT 1
 SELECT T1.Name, T1.Gender FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T1.Author_ID ORDER BY COUNT(T1.Author_ID) DESC LIMIT 1
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book WHERE Press_ID IN (SELECT Press_ID FROM press WHERE Name = 'Accor'))
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book WHERE Press_ID IN (SELECT Press_ID FROM press WHERE Name = 'Accor'))
SELECT T1.Name, T2.Year_Profits_billion FROM press AS T2 INNER JOIN book AS T3 ON T2.Press_ID = T3.Press_ID GROUP BY T3.Press_ID HAVING COUNT(T3.Press_ID) > 
SELECT T1.Name, T2.Year_Profits_billion  FROM book AS T  INNER JOIN press AS T1 ON T.Press_ID = T1.Press_ID  INNER JOIN press AS T2 ON T1.Press_ID = T2.Press_ID
SELECT COUNT(author_name) FROM Authors
SELECT author_name FROM Authors
SELECT author_name, other_details FROM Authors
SELECT other_details FROM Authors WHERE author_name = 'Addison Denesik'
SELECT COUNT(document_id) FROM Documents
SELECT T2.author_name FROM Documents AS T1 INNER JOIN Authors AS T2 ON T1.author_name = T2.author_name WHERE T1.document_id = 4
SELECT T2.author_name FROM Documents AS T1 INNER JOIN Authors AS T2 ON T1.author_name = T2.author_name WHERE T1.document_name = 'Travel to Brazil'
SELECT COUNT(document_id) FROM Documents WHERE author_name = 'Era Kerluke'
SELECT T1.author_name, T1.document_name, T1.document_description FROM Documents AS T1 INNER JOIN Authors AS T2 ON T1.author_name = T2.author_name
SELECT D.document_id, D.author_name FROM Documents AS D INNER JOIN Authors AS A ON D.author_name = A.author_name WHERE A.author_name = 'Bianka Cummings'
SELECT T1.author_name, T1.other_details FROM Authors AS T1 INNER JOIN Documents AS T2 ON T1.author_name = T2.author_name WHERE T2.document_name = 'Travel to China'
SELECT author_name, COUNT(document_id) FROM Documents GROUP BY author_name
SELECT T1.author_name FROM Authors AS T1 INNER JOIN Documents AS T2 ON T1.author_name = T2.author_name GROUP BY T1.author_name ORDER BY COUNT(T2.document_id) DESC LIMIT 1
SELECT T1.author_name FROM Authors AS T1 INNER JOIN Documents AS T2 ON T1.author_name = T2.author_name GROUP BY T1.author_name HAVING COUNT(T2.document_id) >= 2
SELECT COUNT(process_id) FROM Business_Processes
SELECT T2.next_process_id, T2.process_name, T2.process_description FROM Business_Processes AS T2 INNER JOIN Documents_Processes AS T1 ON T2.process_id = T1.process_id WHERE T1.document_id IN ( SELECT document_id FROM Documents_Processes WHERE process_id = 9 )
SELECT T2.process_name FROM Business_Processes AS T1 INNER JOIN Business_Processes AS T2 ON T1.next_process_id = T2.process_id WHERE T1.process_id = 9
SELECT COUNT(process_outcome_code) FROM Documents_Processes
SELECT process_outcome_code, process_outcome_description FROM Process_Outcomes
SELECT T2.process_outcome_description FROM Documents_Processes AS T1 INNER JOIN Process_Outcomes AS T2 ON T1.process_outcome_code = T2.process_outcome_code WHERE T1.process_outcome_code = 'working'
SELECT COUNT(process_status_code) FROM Process_Status
SELECT process_status_code, process_status_description FROM Process_Status
SELECT process_status_description FROM Process_Status WHERE process_status_code = 'ct'
SELECT COUNT(staff_id) FROM Staff
SELECT staff_id, staff_details FROM Staff
SELECT staff_details FROM Staff WHERE staff_id = 100
SELECT COUNT(staff_role_code) FROM Ref_Staff_Roles
SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles
 SELECT T1.staff_role_description FROM Ref_Staff_Roles AS T1 INNER JOIN Staff_in_Processes AS T2 ON T1.staff_role_code = T2.staff_role_code WHERE T1.staff_role_code = 'HR'
SELECT COUNT(DISTINCT document_id) FROM Documents_Processes
SELECT DISTINCT T2.process_id FROM Documents AS T1 INNER JOIN Documents_Processes AS T2 ON T1.document_id = T2.document_id
SELECT document_id FROM Documents WHERE document_id NOT IN (SELECT document_id FROM Documents_Processes)
SELECT process_id FROM Business_Processes WHERE process_id NOT IN (SELECT process_id FROM Documents_Processes)
SELECT T1.process_outcome_description, T2.process_status_description  FROM Process_Outcomes AS T1  INNER JOIN Process_Status AS T2  ON T1.process_outcome_code = T2.process_status_code  INNER JOIN Documents_Processes AS T3  ON T1.process_outcome_code = T3.process_outcome_code  WHERE T3.document_id = 0
SELECT T2.process_name FROM Documents AS T1 INNER JOIN Business_Processes AS T2 ON T1.process_id = T2.process_id WHERE T1.document_name = 'Travel to Brazil'
SELECT T1.process_id, COUNT(T2.document_id) FROM Business_Processes AS T1 LEFT JOIN Documents_Processes AS T2 ON T1.process_id = T2.process_id GROUP BY T1.process_id
SELECT COUNT(T2.staff_id) FROM Documents_Processes AS T1 INNER JOIN Staff_in_Processes AS T2 ON T1.document_id = T2.document_id AND T1.process_id = T2.process_id WHERE T1.document_id = 0 AND T1.process_id = 9
SELECT T1.staff_id, COUNT(T2.document_id) FROM Staff AS T1 INNER JOIN Staff_in_Processes AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id
SELECT T1.staff_role_code, COUNT(T2.document_id) FROM Ref_Staff_Roles AS T1 INNER JOIN Documents_Processes AS T2 ON T1.staff_role_code = T2.process_status_code GROUP BY T1.staff_role_code
SELECT COUNT(DISTINCT T2.staff_role_code) FROM Staff AS T1 INNER JOIN Staff_in_Processes AS T2 ON T1.staff_id = T2.staff_id WHERE T1.staff_id = 3
SELECT COUNT(*) FROM Agencies
SELECT COUNT(*) FROM Agencies
SELECT agency_id, agency_details FROM Agencies
SELECT agency_id, agency_details FROM Agencies
SELECT COUNT(client_id) FROM Clients
SELECT COUNT(client_id) FROM Clients
SELECT client_id, client_details FROM Clients
SELECT client_id, client_details FROM Clients
SELECT A.agency_id, COUNT(C.client_id) FROM Agencies A LEFT JOIN Clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id
SELECT A.agency_id, COUNT(C.client_id) FROM Agencies A LEFT JOIN Clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN ( SELECT agency_id FROM Clients GROUP BY agency_id ORDER BY COUNT(client_id) DESC LIMIT 1 )
SELECT a.agency_id, a.agency_details  FROM Agencies a  JOIN Clients c ON a.agency_id = c.agency_id  GROUP BY a.agency_id  ORDER BY COUNT(c.client_id) DESC  LIMIT 1
SELECT A.agency_id, A.agency_details  FROM Agencies A  JOIN Clients C ON A.agency_id = C.agency_id  GROUP BY A.agency_id  HAVING COUNT(C.client_id) >= 2
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN ( SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(client_id) >= 2 )
SELECT A.agency_details  FROM Agencies A  JOIN Clients C ON A.agency_id = C.agency_id  WHERE C.client_details LIKE '%Mac%';
SELECT T1.agency_details FROM Agencies AS T1 INNER JOIN Clients AS T2 ON T1.agency_id = T2.agency_id WHERE T2.client_details = 'Mac'
SELECT c.client_details, a.agency_details FROM Clients c INNER JOIN Agencies a ON c.agency_id = a.agency_id
SELECT T1.client_details, T2.agency_details FROM Clients AS T1 INNER JOIN Agencies AS T2 ON T1.agency_id = T2.agency_id
SELECT sic_code, COUNT(client_id) FROM Clients GROUP BY sic_code
SELECT sic_code,  COUNT(client_id) FROM Clients GROUP BY sic_code
SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad'
SELECT T1.client_details FROM Clients AS T1 INNER JOIN Agencies AS T2 ON T1.agency_id = T2.agency_id WHERE T1.sic_code = 'Bad'
SELECT A.agency_id, A.agency_details  FROM Agencies A  JOIN Clients C ON A.agency_id = C.agency_id
SELECT T1.agency_id, T1.agency_details FROM Agencies AS T1 INNER JOIN Clients AS T2 ON T1.agency_id = T2.agency_id
SELECT agency_id FROM Clients WHERE client_id NOT IN (SELECT client_id FROM Invoices)
SELECT agency_id FROM Agencies WHERE agency_id NOT IN ( SELECT agency_id FROM Clients )
SELECT COUNT(*) FROM Invoices
SELECT COUNT(`invoice_id`) FROM `Invoices`
SELECT I.invoice_id, I.invoice_status, I.invoice_details FROM Invoices AS I
SELECT invoice_id, invoice_status, invoice_details FROM Invoices
SELECT client_id,  COUNT(invoice_id) FROM Invoices GROUP BY client_id
SELECT client_id, COUNT(*) FROM Invoices GROUP BY client_id
SELECT client_id, client_details FROM Clients WHERE client_id IN ( SELECT client_id FROM Invoices GROUP BY client_id ORDER BY COUNT(client_id) DESC LIMIT 1 )
SELECT T1.client_id, T1.client_details FROM Clients AS T1 INNER JOIN Invoices AS T2 ON T1.client_id = T2.client_id ORDER BY T2.invoice_id DESC LIMIT 1
SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(client_id) >= 2
SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(client_id) >= 2
SELECT invoice_status, COUNT(*) FROM Invoices GROUP BY invoice_status
SELECT invoice_status,  COUNT(*) FROM Invoices GROUP BY invoice_status
SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(*) DESC LIMIT 1
SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(*) DESC LIMIT 1
SELECT I.invoice_status, I.invoice_details, C.client_id, C.client_details, A.agency_id, A.agency_details FROM Invoices AS I INNER JOIN Clients AS C ON I.client_id = C.client_id INNER JOIN Agencies AS A ON C.agency_id = A.agency_id
SELECT I.invoice_status, I.invoice_details, C.client_id, C.client_details, A.agency_id, A.agency_details  FROM Invoices AS I  INNER JOIN Clients AS C ON I.client_id = C.client_id  INNER JOIN Agencies AS A ON C.agency_id = A.agency_id
SELECT DISTINCT meeting_type, purpose_of_meeting FROM Meetings
SELECT DISTINCT meeting_type, other_details FROM Meetings
 SELECT T1.meeting_outcome, T1.purpose_of_meeting FROM Meetings AS T1
SELECT DISTINCT meeting_outcome, purpose_of_meeting FROM Meetings
SELECT p.payment_id, p.payment_details  FROM Payments p  JOIN Invoices i ON p.invoice_id = i.invoice_id  WHERE i.invoice_status = 'Working'
SELECT p.payment_id, p.payment_details  FROM Payments p  JOIN Invoices i ON p.invoice_id = i.invoice_id  WHERE i.invoice_status = 'Working'
SELECT I.invoice_id, I.invoice_status FROM Invoices AS I LEFT JOIN Payments AS P ON I.invoice_id = P.invoice_id WHERE P.payment_id IS NULL
SELECT T1.invoice_id, T1.invoice_status FROM Invoices AS T1 LEFT JOIN Payments AS T2 ON T1.invoice_id = T2.invoice_id WHERE T2.payment_id IS NULL
SELECT COUNT(payment_id) FROM Payments
SELECT COUNT(payment_id) FROM Payments
SELECT p.payment_id, i.invoice_id, i.invoice_details FROM Payments AS p INNER JOIN Invoices AS i ON p.invoice_id = i.invoice_id
SELECT payment_id, invoice_id, payment_details FROM Payments
SELECT DISTINCT T1.invoice_id, T2.invoice_status FROM Payments AS T1 INNER JOIN Invoices AS T2 ON T1.invoice_id = T2.invoice_id
SELECT DISTINCT T1.invoice_id, T1.invoice_status FROM Invoices AS T1 INNER JOIN Payments AS T2 ON T1.invoice_id = T2.invoice_id
SELECT T1.invoice_id, COUNT(T2.payment_id) FROM Invoices AS T1 LEFT JOIN Payments AS T2 ON T1.invoice_id = T2.invoice_id GROUP BY T1.invoice_id
SELECT invoice_id,  COUNT(*) FROM Payments GROUP BY invoice_id
SELECT T1.invoice_id, T1.invoice_status, T1.invoice_details  FROM Invoices AS T1  JOIN Payments AS T2 ON T1.invoice_id = T2.invoice_id  GROUP BY T1.invoice_id  ORDER BY COUNT(T2.payment_id) DESC  LIMIT 1
SELECT T1.invoice_id, T1.invoice_status, T1.invoice_details  FROM Invoices AS T1  JOIN Payments AS T2 ON T1.invoice_id = T2.invoice_id  GROUP BY T1.invoice_id  ORDER BY COUNT(T2.payment_id) DESC  LIMIT 1
SELECT COUNT(staff_id) FROM Staff
SELECT COUNT(*) FROM Staff
SELECT A.agency_id, COUNT(S.staff_id) FROM Agencies A LEFT JOIN Staff S ON A.agency_id = S.agency_id GROUP BY A.agency_id
SELECT T1.agency_id, COUNT(T2.staff_id) FROM Agencies AS T1 INNER JOIN Staff AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id
SELECT T1.agency_id, T1.agency_details  FROM Agencies AS T1  JOIN Staff AS T2 ON T1.agency_id = T2.agency_id  GROUP BY T1.agency_id  ORDER BY COUNT(T2.staff_id) DESC  LIMIT 1
SELECT A.agency_id, A.agency_details FROM Agencies A INNER JOIN Staff S ON A.agency_id = S.agency_id GROUP BY A.agency_id ORDER BY COUNT(S.staff_id) DESC LIMIT 1
SELECT meeting_outcome, COUNT(*) FROM Meetings GROUP BY meeting_outcome
SELECT meeting_outcome,  COUNT(meeting_id) FROM Meetings GROUP BY meeting_outcome
SELECT client_id,  COUNT(meeting_id) FROM Meetings GROUP BY client_id
SELECT client_id, COUNT(meeting_id) FROM Meetings GROUP BY client_id
SELECT T1.meeting_type, COUNT(T1.meeting_id) FROM Meetings AS T1 INNER JOIN Clients AS T2 ON T1.client_id = T2.client_id GROUP BY T1.meeting_type
SELECT meeting_type,  COUNT(meeting_id) FROM Meetings GROUP BY meeting_type
SELECT M.meeting_id, M.meeting_outcome, M.meeting_type, C.client_details  FROM Meetings M  JOIN Clients C ON M.client_id = C.client_id
SELECT T1.meeting_id, T1.meeting_outcome, T1.meeting_type, T3.client_details FROM Meetings AS T1 INNER JOIN Clients AS T2 ON T1.client_id = T2.client_id INNER JOIN Clients AS T3 ON T3.client_id = T1.client_id
SELECT M.meeting_id, COUNT(SI.meeting_id) FROM Meetings M LEFT JOIN Staff_in_Meetings SI ON M.meeting_id = SI.meeting_id GROUP BY M.meeting_id
SELECT meeting_id,  COUNT(*) FROM Staff_in_Meetings GROUP BY meeting_id
SELECT T1.staff_id, COUNT(T2.meeting_id) FROM Staff AS T1 INNER JOIN Staff_in_Meetings AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id ORDER BY COUNT(T2.meeting_id) ASC LIMIT 1
SELECT T.staff_id FROM ( SELECT T1.staff_id, COUNT(T2.meeting_id) AS num FROM Staff AS T1 INNER JOIN Staff_in_Meetings AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id ) AS T WHERE T.num > 0 ORDER BY T.num LIMIT 1
SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Meetings
SELECT COUNT(DISTINCT T1.staff_id) FROM Staff_in_Meetings AS T1 INNER JOIN Meetings AS T2 ON T1.meeting_id = T2.meeting_id
SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN ( SELECT staff_id FROM Staff_in_Meetings )
SELECT COUNT(DISTINCT s.staff_id) FROM Staff s LEFT JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id WHERE sm.meeting_id IS NULL
SELECT DISTINCT T1.client_id, T1.client_details FROM Clients AS T1 INNER JOIN Invoices AS T2 ON T1.client_id = T2.client_id UNION SELECT DISTINCT T1.client_id, T1.client_details FROM Clients AS T1 INNER JOIN Meetings AS T2 ON T1.client_id = T2.client_id
SELECT DISTINCT T1.client_id, T1.client_details FROM Clients AS T1 INNER JOIN Invoices AS T2 ON T1.client_id = T2.client_id UNION SELECT DISTINCT T1.client_id, T1.client_details FROM Clients AS T1 INNER JOIN Meetings AS T2 ON T1.client_id = T2.client_id
SELECT DISTINCT T1.staff_id, T1.staff_details  FROM Staff AS T1  JOIN Staff_in_Meetings AS T2 ON T1.staff_id = T2.staff_id
SELECT T1.staff_id, T1.staff_details FROM Staff AS T1 INNER JOIN Staff_in_Meetings AS T2 ON T1.staff_id = T2.staff_id
SELECT T1.client_id, T1.sic_code, T2.agency_id FROM Clients AS T1 INNER JOIN Agencies AS T2 ON T1.agency_id = T2.agency_id WHERE T1.client_id IN ( SELECT T3.client_id FROM Meetings AS T3 GROUP BY T3.client_id HAVING COUNT(T3.meeting_id) = 1 ) AND T1.client_id IN ( SELECT T4.client_id FROM Invoices AS T4 )
 SELECT T1.client_id, T1.sic_code, T2.agency_id FROM Clients AS T1 INNER JOIN Agencies AS T2 ON T1.agency_id = T2.agency_id WHERE T1.client_id IN ( SELECT T3.client_id FROM Meetings AS T3 GROUP BY T3.client_id HAVING COUNT(T3.meeting_id) > 0 AND COUNT(T3.meeting_id) = ( SELECT COUNT(T4.meeting_id) FROM Meetings AS T4 WHERE T4.client_id = T3.client_id ) ) AND T1.client_id IN ( SELECT T5.client_id FROM Invoices AS T5 GROUP BY T5.client_id HAVING COUNT(T5.invoice_id) = 1 )
SELECT T1.start_date_time, T1.end_date_time, T2.client_details, T3.staff_details FROM Meetings AS T1 INNER JOIN Clients AS T2 ON T1.client_id = T2.client_id INNER JOIN Staff AS T3 ON T1.meeting_id = T3.staff_id
SELECT M.start_date_time, M.end_date_time, C.client_details, S.staff_details  FROM Meetings M  JOIN Clients C ON M.client_id = C.client_id  JOIN Staff_in_Meetings SM ON M.meeting_id = SM.meeting_id  JOIN Staff S ON SM.staff_id = S.staff_id
