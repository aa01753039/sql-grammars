[
  {
    "id": 0,
    "db_id": "soccer_3",
    "question": "How many clubs are there?",
    "answer": "SELECT COUNT(T1.Club_ID), T2.Name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.club_id GROUP BY T1.Club_ID ORDER BY SUM(CASE WHEN T2.Country = 'USA' THEN 1 ELSE 0 END) DESC LIMIT 1</sql>"
  },
  {
    "id": 1,
    "db_id": "soccer_3",
    "question": "Count the number of clubs.",
    "answer": "SELECT COUNT(DISTINCT T2.Club_ID), SUM(T2.Event_number) FROM 'player' AS T1 INNER JOIN club AS T2 ON T1.Player_ID = T2.Club_ID GROUP BY T1.Country ORDER BY COUNT(DISTINCT T2.Club_ID) DESC LIMIT 1</sql>"
  },
  {
    "id": 2,
    "db_id": "soccer_3",
    "question": "List the name of clubs in ascending alphabetical order.",
    "answer": "SELECT DISTINCT T2.Name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID ORDER BY T1.Name ASC</sql>"
  },
  {
    "id": 3,
    "db_id": "soccer_3",
    "question": "What are the names of clubs, ordered alphabetically?",
    "answer": "SELECT DISTINCT T2.Name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID ORDER BY T1.Name</sql>"
  },
  {
    "id": 4,
    "db_id": "soccer_3",
    "question": "What are the managers and captains of clubs?",
    "answer": "SELECT DISTINCT T2.Name, T3.Name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID INNER JOIN manager AS T3 ON T2.Player_ID = T3.Player_ID WHERE T1.Manager = 'Danny Woodbury' AND T1.Captain = 'Alessandro Rocci'</sql>"
  },
  {
    "id": 5,
    "db_id": "soccer_3",
    "question": "Return the managers and captains of all clubs.",
    "answer": "SELECT DISTINCT T2.Name, T3.name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.club_id WHERE T2.manufacturer = 'BMW' ORDER BY T2.`Country`, T1.captain</sql>"
  },
  {
    "id": 6,
    "db_id": "soccer_3",
    "question": "List the name of clubs whose manufacturer is not \"Nike\"",
    "answer": "SELECT DISTINCT T2.Name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Manufacturer != 'Nike' AND T1.Country IS NULL LIMIT 1</sql>"
  },
  {
    "id": 7,
    "db_id": "soccer_3",
    "question": "What are the names of clubs who do not have the manufacturer Nike?",
    "answer": "SELECT T1.name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.club_id WHERE T2.manufacturer = 'Nike' LIMIT 1</sql>"
  },
  {
    "id": 8,
    "db_id": "soccer_3",
    "question": "What are the names of players in ascending order of wins count?",
    "answer": "SELECT DISTINCT T2.Name FROM player AS T1 INNER JOIN club AS T2 ON T1.Player_ID = T2.Club_ID ORDER BY T1.Wins_count DESC LIMIT 1</sql>"
  },
  {
    "id": 9,
    "db_id": "soccer_3",
    "question": "Return the names of players in order of count of wins, ascending.",
    "answer": "SELECT DISTINCT T2.Name FROM player AS T1 INNER JOIN club AS T2 ON T1.Player_ID = T2.Club_ID ORDER BY T1.Wins_count DESC LIMIT 1</sql>"
  },
  {
    "id": 10,
    "db_id": "soccer_3",
    "question": "What is the name of the player with the highest earnings?",
    "answer": "SELECT T1.name FROM player AS T1 INNER JOIN club AS T2 ON T1.Player_ID = T2.club_id ORDER BY T1.Wins_count DESC LIMIT 1</sql>"
  },
  {
    "id": 11,
    "db_id": "soccer_3",
    "question": "Return the name of the player who earns the most money.",
    "answer": "SELECT T1.Name FROM player AS T1 INNER JOIN club AS T2 ON T1.Player_ID = T2.Club_ID ORDER BY T1.Wins_count DESC LIMIT 1</sql>"
  },
  {
    "id": 12,
    "db_id": "soccer_3",
    "question": "What are the distinct countries of players with earnings higher than 1200000?",
    "answer": "SELECT T1.country FROM player AS T1 INNER JOIN club AS T2 ON T1.Player_ID = T2.Club_ID ORDER BY T1.Wins > 1200000 DESC LIMIT 1</sql>"
  },
  {
    "id": 13,
    "db_id": "soccer_3",
    "question": "From which countries are players who make more than 1200000 from?",
    "answer": "SELECT T1.Country FROM player AS T1 INNER JOIN club AS T2 ON T1.Player_ID = T2.Club_ID WHERE T1.Wins_count > 12 AND T2.Sponsor = 'Total Golf Club' GROUP BY T1.Country ORDER BY COUNT(T2.club) DESC LIMIT 1</sql>"
  },
  {
    "id": 14,
    "db_id": "soccer_3",
    "question": "What is the country of the player with the highest earnings among players that have more than 2 win counts?",
    "answer": "SELECT DISTINCT T1.Country FROM ( SELECT DISTINCT T2.country, MAX(CASE WHEN T3.`Wins_count` > 2 THEN T3.`Earnings ELSE NULL END) AS `Earnings`, T3.club.`Club_ID` FROM player AS T1 INNER JOIN club AS T2 ON T1.Club_ID = T2.club_id WHERE T1.Name LIKE 'player%' GROUP BY T2"
  },
  {
    "id": 15,
    "db_id": "soccer_3",
    "question": "Of players who have more than 2 wins, what is the country of the player who makes the most?",
    "answer": "SELECT DISTINCT T1.Country FROM ( SELECT DISTINCT T2.country , SUM(CASE WHEN T2.Country = 'USA' THEN 1 ELSE 0 END) AS sumWins AS winCount FROM players AS T1 INNER JOIN club AS T2 ON T1.Player_ID = T2.Club_ID GROUP BY T2.country ORDER BY T1.player.name LIKE 'Mike%' GROUP BY T2.country ORDER BY SUM"
  },
  {
    "id": 16,
    "db_id": "soccer_3",
    "question": "Show names of players and names of clubs they are in.",
    "answer": "SELECT DISTINCT T1.Name, T2.name FROM player AS T1 INNER JOIN club AS T2 ON T1.Player_ID = T2.Club_ID WHERE T2.State IN ('N', 'P')</sql>"
  },
  {
    "id": 17,
    "db_id": "soccer_3",
    "question": "What are the names of players and the corresponding clubs that they are in?",
    "answer": "SELECT DISTINCT T2.Name, T3.Club_ID FROM `player` AS T1 INNER JOIN club AS T2 ON T1.Player_ID = T2.Club_ID WHERE T1.Country = 'United States' LIMIT 1</sql>"
  },
  {
    "id": 18,
    "db_id": "soccer_3",
    "question": "Show names of clubs that have players with more than 2 win counts.",
    "answer": "SELECT DISTINCT T1.Name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Wins_count BETWEEN 0 AND 3</sql>"
  },
  {
    "id": 19,
    "db_id": "soccer_3",
    "question": "What are the names of clubs that have players who have won more than twice?",
    "answer": "SELECT DISTINCT T2.name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Wins_count BETWEEN 2 AND 10 ORDER BY COUNT(T2.Name) DESC LIMIT 3</sql>"
  },
  {
    "id": 20,
    "db_id": "soccer_3",
    "question": "Show names of players from the club with manager \"Sam Allardyce\".",
    "answer": "SELECT DISTINCT T2.Name FROM 'club' AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Name = 'sam allardyce' AND T2.Country = 'England'\"</sql>"
  },
  {
    "id": 21,
    "db_id": "soccer_3",
    "question": "What are the names of players from the club managed by Sam Allardyce?",
    "answer": "SELECT DISTINCT T2.Name FROM \"club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Manager = 'sam allardyce' AND T2.Country = 'United Kingdom'\"</sql>"
  },
  {
    "id": 22,
    "db_id": "soccer_3",
    "question": "Show names of clubs in descending order of average earnings of players belonging.",
    "answer": "SELECT DISTINCT T2.Name FROM player AS T1 INNER JOIN club AS T2 ON T1.Player_ID = T2.Club_ID ORDER BY T1.`Wins` DESC</sql>"
  },
  {
    "id": 23,
    "db_id": "soccer_3",
    "question": "What are the names of clubs, ordered descending by the average earnings of players within each?",
    "answer": "SELECT DISTINCT T1.Name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID ORDER BY T1.Wins_count DESC LIMIT 1</sql>"
  },
  {
    "id": 24,
    "db_id": "soccer_3",
    "question": "Show different manufacturers and the number of clubs they are associated with.",
    "answer": "SELECT DISTINCT T2.Manufacturer, COUNT(T1.Club_ID) FROM 'player' AS T1 INNER JOIN club AS T2 ON T1.Player_ID = T2.Club_ID GROUP BY T1.Manufacturer ORDER BY T2.Name</sql>"
  },
  {
    "id": 25,
    "db_id": "soccer_3",
    "question": "How many clubs use each manufacturer?",
    "answer": "SELECT DISTINCT T2.Name, COUNT(T1.Manufacturer), T1.Company FROM \"player AS T1 INNER JOIN club AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T2.name ORDER BY T2.Company</sql>"
  },
  {
    "id": 26,
    "db_id": "soccer_3",
    "question": "Please show the most common manufacturer of clubs.",
    "answer": "SELECT DISTINCT T2.Manufacturer FROM \"player AS T1 INNER JOIN club AS T2 ON T1.Player_ID = T2.Club_ID ORDER BY COUNT(T2.`CLUB_ID`) DESC LIMIT 3</sql>"
  },
  {
    "id": 27,
    "db_id": "soccer_3",
    "question": "Which manufacturer is most common among clubs?",
    "answer": "SELECT T1.name FROM club AS T1 INNER JOIN manufacturer AS T2 ON T1.Club_ID = T2.Club_ID ORDER BY COUNT(T1.manufacturer) DESC LIMIT 1</sql>"
  },
  {
    "id": 28,
    "db_id": "soccer_3",
    "question": "List the manufacturers that are associated with more than one club.",
    "answer": "SELECT DISTINCT T2.Manufacturer FROM 'player' AS T1 INNER JOIN `club` AS T2 ON T1.Player_ID = T2.Club_ID GROUP BY T1.Name ORDER BY COUNT(T1.name) DESC LIMIT 1</sql>"
  },
  {
    "id": 29,
    "db_id": "soccer_3",
    "question": "Which manufacturers work for more than 1 club?",
    "answer": "SELECT DISTINCT T2.Manufacturer FROM 'player' AS T1 INNER JOIN `club` AS T2 ON T1.Player_ID = T2.Club_ID WHERE T1.`Country` > ( SELECT COUNT(T3.manufacturer) FROM 'club' AS T2 INNER JOIN player AS T1 ON T1.Club_ID = T2.Club_ID WHERE T2.name LIKE '%Manufacturer%' ORDER BY"
  },
  {
    "id": 30,
    "db_id": "soccer_3",
    "question": "List the country that have more than one player.",
    "answer": "SELECT DISTINCT T2.Country FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.Country ORDER BY COUNT(T2.Player_ID) > 1 DESC LIMIT 1</sql>"
  },
  {
    "id": 31,
    "db_id": "soccer_3",
    "question": "Which countries have produced more than one player?",
    "answer": "SELECT T1.Country FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.Country ORDER BY COUNT(T1.Country) DESC LIMIT 1</sql>"
  },
  {
    "id": 32,
    "db_id": "soccer_3",
    "question": "List the name of clubs that do not have players.",
    "answer": "SELECT T1.name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Name IS NULL LIMIT 1</sql>"
  },
  {
    "id": 33,
    "db_id": "soccer_3",
    "question": "What are the names of clubs that do not have any players?",
    "answer": "SELECT T1.Name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Country IS NULL AND T1.Nickname != '' LIMIT 1</sql>"
  },
  {
    "id": 34,
    "db_id": "soccer_3",
    "question": "Show the country of players with earnings more than 1400000 and players with earnings less than 1100000.",
    "answer": "SELECT DISTINCT T2.Country FROM player AS T1 INNER JOIN club AS T2 ON T1.Player_ID = T2.Club_ID WHERE T1.Wins_count > ( SELECT MAX(wins) FROM player AS T3 GROUP BY T3.Country ) AND T2.Earnings - SUM(T1.Wins_number) / 100 < 500</sql>"
  },
  {
    "id": 35,
    "db_id": "soccer_3",
    "question": "Which country has produced both players with earnings over 1400000 and players with earnings below 1100000?",
    "answer": "SELECT DISTINCT T2.Country FROM \"player\" AS T1 INNER JOIN \"club\" AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.name = 'Championship' AND T2.earnings BETWEEN 1400000 AND 1100000</sql>"
  },
  {
    "id": 36,
    "db_id": "soccer_3",
    "question": "What is the number of distinct countries of all players?",
    "answer": "SELECT COUNT(DISTINCT T2.Country), DISTINCT T1.name FROM ( SELECT T1.\"Country\", SUM(T2.country) AS num FROM player AS T1 INNER JOIN club AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T2.Country ORDER BY COUNT(DISTINCT T1.Name) DESC LIMIT 1</sql>"
  },
  {
    "id": 37,
    "db_id": "soccer_3",
    "question": "How many different countries are players from?",
    "answer": "SELECT COUNT(DISTINCT T2.Country), T1.Name FROM player AS T1 INNER JOIN club AS T2 ON T1.Player_ID = T2.Club_ID GROUP BY T2.Country ORDER BY COUNT(T1.Country) DESC LIMIT 1</sql>"
  },
  {
    "id": 38,
    "db_id": "soccer_3",
    "question": "Show the earnings of players from country \"Australia\" or \"Zimbabwe\".",
    "answer": "SELECT DISTINCT T1.Earnings FROM player AS T1 INNER JOIN club AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Name = 'country' AND T2.Country = \"Australia\" OR T2.Country = \"Zimbabwe\"</sql>"
  },
  {
    "id": 39,
    "db_id": "soccer_3",
    "question": "What are the earnings of players from either of the countries of Australia or Zimbabwe?",
    "answer": "SELECT DISTINCT T1.Earnings, T2.Country FROM player AS T1 INNER JOIN club AS T2 ON T1.Club_ID = T2.club WHERE T1.name LIKE '%Australia%' OR T1.name LIKE 'Zimbabwe%'</sql>"
  },
  {
    "id": 40,
    "db_id": "e_commerce",
    "question": "List the id, first name and last name of the customers who both have placed more than 2 orders and have bought at least 3 items.",
    "answer": "SELECT DISTINCT T1.customer_first_name, T1.customer_middle_initial FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_last_name ORDER BY COUNT(T1.order_id) / COUNT(DISTINCT T2.order_id) > 3</sql>"
  },
  {
    "id": 41,
    "db_id": "e_commerce",
    "question": "What are the ids, first and last names of the customers who have ordered more than twice and have bought at least 3 items?",
    "answer": "SELECT T1.first_name, T2.last_name FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.order_items.total > 0 GROUP BY T1.first_name, T2.last_name HAVING COUNT(T2.order_item_id) >= 3 ORDER BY T1.first"
  },
  {
    "id": 42,
    "db_id": "e_commerce",
    "question": "For the orders with any produts, how many products does each orders contain ? List the order id, status and the number.",
    "answer": "SELECT T1.order_item_id, COUNT(T2.product_id) , SUM(T2.status) FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id WHERE T1.order_item_status_code IN ('P', 'D') GROUP BY T2.order_items.order_item_id ORDER BY SUM(T2."
  },
  {
    "id": 43,
    "db_id": "e_commerce",
    "question": "For every order, how many products does it contain, and what are the orders' statuses and ids?",
    "answer": "SELECT COUNT(T1.product_id) , T2.`order_item_status_code`, T3.order_id FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_item_id WHERE T1.customer_first_name = 'C' AND T1.customer_middle_initial = 'U' ORDER BY T1.order_item_status_code</"
  },
  {
    "id": 44,
    "db_id": "e_commerce",
    "question": "List the dates of the orders which were placed at the earliest time or have more than 1 items.",
    "answer": "SELECT DISTINCT T2.date_order_placed FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_item_id GROUP BY T1.order_item_id ORDER BY SUBSTR(T1.date_order_placed, 7, 3) DESC LIMIT 1</sql>"
  },
  {
    "id": 45,
    "db_id": "e_commerce",
    "question": "What are the dates of the earliest order and the dates of all orders with more than 1 item?",
    "answer": "SELECT strftime('%J', T2.date) AS date, strftime('%j', T2.date) - strftime('%Y', T2.order_item_status_code) FROM Orders AS T1 INNER JOIN `Order_Items` AS T2 ON T1.order_id = T2.order_item_id WHERE strftime('%J', T2.date) > '2016"
  },
  {
    "id": 46,
    "db_id": "e_commerce",
    "question": "Which customers did not make any orders? List the first name, middle initial and last name.",
    "answer": "SELECT T2.first_name, T2.middle_initial, T2.last_name FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.invoice_date IS NULL AND T2.order_id IS NULL ORDER BY T1.first_name, T1.middle_initial, T2.last_name</sql>"
  },
  {
    "id": 47,
    "db_id": "e_commerce",
    "question": "WHat are the first and last names, and middle initials of all customers who did not make any orders?",
    "answer": "SELECT DISTINCT T1.first_name , T2.last_name, T1.middle_initial, T1.login_name FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_item_status_code IN ( SELECT DISTINCT 'A' FROM Orders ORDER BY order_item_id NOT IN (SELECT DISTINCT T"
  },
  {
    "id": 48,
    "db_id": "e_commerce",
    "question": "What are the id, name, price and color of the products which have not been ordered for at least twice?",
    "answer": "SELECT T1.product_name, T2.`color`, T3.`price__c` FROM Order_Items AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.order_item_status_code IS NULL AND strftime('%J', T2.date_order_placed) > 5</sql>"
  },
  {
    "id": 49,
    "db_id": "e_commerce",
    "question": "What are the ids , names , prices , and colors of all products that have been listed in less than two orders ?",
    "answer": "SELECT T1.product_name, T2.`product_color`, T3.price, T2.address_line_1 FROM Orders AS T1 INNER JOIN Products AS T2 ON T1.order_id = T2.order_id AND strftime('%J', T2.`date_order_placed`) - strftime('%J', T2.price) > 2 ORDER BY strftime('"
  },
  {
    "id": 50,
    "db_id": "e_commerce",
    "question": "Which orders have at least 2 products on it? List the order id and date.",
    "answer": "SELECT T2.order_item_id, T1.order_date FROM Order_Items AS T1 INNER JOIN Orders AS T2 ON T1.order_id = T2.order_id WHERE T1.product_id IN ( SELECT DISTINCT T3.product_id ORDER BY T2.order_item_status_code , 'placed' LIMIT 1 ) GROUP BY T1.order_date ORDER BY COUNT(T2.order"
  },
  {
    "id": 51,
    "db_id": "e_commerce",
    "question": "What are the ids and dates of the orders with at least two products?",
    "answer": "SELECT T1.order_item_id, SUM(T2.order_date) AS total_dates FROM Order_Items AS T1 INNER JOIN Orders AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_item_id HAVING COUNT(T1.product_id) > 2 AND SUM(T1.order_date) - sum(T1.order_date) < 3</"
  },
  {
    "id": 52,
    "db_id": "e_commerce",
    "question": "Which product are listed in orders most frequently? List the id, product name and price.",
    "answer": "SELECT DISTINCT T2.product_name AS item_title , T1.`order_item_status_code`, T1.product_price FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id ORDER BY COUNT(T1.order_items.order_item_id) DESC LIMIT 3</sql>"
  },
  {
    "id": 53,
    "db_id": "e_commerce",
    "question": "What are the ids, names, and prices of all products that are ordered most frequently?",
    "answer": "SELECT T1.product_name , T2.`product_price`, T3.product_name FROM Orders AS T1 INNER JOIN Products AS T2 ON T1.order_id = T2.product_id ORDER BY T1.order_id DESC LIMIT 1</sql>"
  },
  {
    "id": 54,
    "db_id": "e_commerce",
    "question": "Which order have the least sum of the product prices. List the order id and sum.",
    "answer": "SELECT DISTINCT T2.order_item_id, SUM(T1.`product_price`) FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY ORDER_ITEM_ID ORDER BY COUNT(DISTINCT T2.order_item_id) LIMIT 0</sql>"
  },
  {
    "id": 55,
    "db_id": "e_commerce",
    "question": "What is the order that total cost the least , and how much is the total cost ?",
    "answer": "SELECT T2.order_item_status_code, SUM(T1.customer_cost) FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_item_id ORDER BY COUNT(T1.order_item_status_code) LIMIT 3</sql>"
  },
  {
    "id": 56,
    "db_id": "e_commerce",
    "question": "What is the most popular payment method?",
    "answer": "SELECT DISTINCT T2.payment_method_code FROM Invoices AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.`order_status_code` IN ('D', 'B') GROUP BY T2.payment_method_code ORDER BY COUNT(T2.customer_id) DESC LIMIT 1</sql>"
  },
  {
    "id": 57,
    "db_id": "e_commerce",
    "question": "What is the payment method that most customers use?",
    "answer": "SELECT DISTINCT T2.payment_method_code FROM Customer_Payment_Methods AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_first_name, T2.customer_middle_initial ORDER BY SUM(T1.invoice_number) / COUNT(*) DESC LIMIT 1</sql>"
  },
  {
    "id": 58,
    "db_id": "e_commerce",
    "question": "How many number of products does each gender of customers buy? List the gender and the number",
    "answer": "SELECT DISTINCT T1.gender, COUNT(T2.`product_id`) FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.order_item_id WHERE T1.login_name = 'bob' GROUP BY T1.gender ORDER BY COUNT(`Product_Name`) DESC LIMIT 1</sql>"
  },
  {
    "id": 59,
    "db_id": "e_commerce",
    "question": "How many products does each gender buy?",
    "answer": "SELECT COUNT(T2.product_id) FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE gender_code IN ('F', 'M') GROUP BY T1.`order_id`, T2.gender ORDER BY SUM(`T1.invoice_number`) / COUNT(DISTINCT T2.`customer_first_name` , `customer_middle_initial` , `customer_"
  },
  {
    "id": 60,
    "db_id": "e_commerce",
    "question": "How many orders has each gender of customers placed?",
    "answer": "SELECT T1.customer_first_name, T2.gender_code FROM ( SELECT T3.customer_first_name, T3.customer_middle_initial AS male, T3.`gender` FROM Customers AS T1 INNER JOIN orders AS T2 ON T1.customer_id = T2.order_id INNER JOIN Customers AS T3 ON T3.customer_id = T1.customer_id ORDER BY gender_code LIMIT 1 )"
  },
  {
    "id": 61,
    "db_id": "e_commerce",
    "question": "How many orders has each gender placed?",
    "answer": "SELECT T1.gender_code, COUNT(T2.invoice_number), SUM(T1.customer_first_name) AS total , SUM(T1.customer_middle_initial) , SUM(T1.customer_last_name) , SUM(T2.order_id), T1.login_name FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY"
  },
  {
    "id": 62,
    "db_id": "e_commerce",
    "question": "List the customers' first name, middle initial, last name and payment methods.",
    "answer": "SELECT DISTINCT T2.first_name , T2.middle_initial AS login_name , T1.last_name FROM Customers AS T1 INNER JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id WHERE T2.phone_number = '5487693084'</sql>"
  },
  {
    "id": 63,
    "db_id": "e_commerce",
    "question": "What are the first names, middle initials, last names, and payment methods of all customers?",
    "answer": "SELECT DISTINCT T1.first_name, T2.middle_initial , T1.last_name FROM Customers AS T1 INNER JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.first_name, T2.middle_initial DESC LIMIT 1</sql>"
  },
  {
    "id": 64,
    "db_id": "e_commerce",
    "question": "List the invoices' status, date and the date of shipment.",
    "answer": "SELECT DISTINCT T1.invoice_status_code , T2.date_order_placed FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_first_name = 'Jane' ORDER BY T2.shipment_date</sql>"
  },
  {
    "id": 65,
    "db_id": "e_commerce",
    "question": "What are the statuses, dates, and shipment dates for all invoices?",
    "answer": "SELECT T2.order_item_status_code, T3.order_item_date FROM Order_Items AS T1 INNER JOIN Orders AS T2 ON T1.order_id = T2.order_id INNER JOIN Customers AS T3 ON T1.customer_id = T3.customer_id GROUP BY T2.order_item_status_code ORDER BY T3.email_address</sql>"
  },
  {
    "id": 66,
    "db_id": "e_commerce",
    "question": "List the names of the products being shipped and the corresponding shipment date.",
    "answer": "SELECT DISTINCT T1.product_name FROM Orders AS T1 INNER JOIN Products AS T2 ON T1.order_item_id = T2.product_id WHERE T2.parent_product_id IS NULL ORDER BY t2.shipping_date DESC LIMIT 1</sql>"
  },
  {
    "id": 67,
    "db_id": "e_commerce",
    "question": "What are the names of the products tht have been shipped, and on what days were they shipped?",
    "answer": "SELECT DISTINCT T1.product_name FROM Orders AS T1 INNER JOIN Products AS T2 ON T1.order_id = T2.order_id WHERE ORDER_DATE IS NOT NULL AND T2.parent_product_id IN ( SELECT DISTINCT T2.product_id FROM Customers AS T2 INNER JOIN Products AS T3 ON T1.customer_id = T3.customer_id WHERE ORDER_DATE"
  },
  {
    "id": 68,
    "db_id": "e_commerce",
    "question": "What is the status code of the items being ordered and shipped and its corresponding shipment tracking number?",
    "answer": "SELECT DISTINCT T2.order_item_status_code, T1.`shipment_tracking_number` FROM Order_Items AS T1 INNER JOIN Orders AS T2 ON T1.order_id = T2.order_id WHERE ORDER_ITEM_STATUS_CODE IN ( SELECT DISTINCT t1.order_item_status_code FROM Customers AS T1 INNER JOIN orders AS T2 ON T1.customer_id"
  },
  {
    "id": 69,
    "db_id": "e_commerce",
    "question": "What is the status code of the items have been ordered and shipped, and also what are their shipment tracking numbers?",
    "answer": "SELECT T1.order_item_status_code FROM Order_Items AS T1 INNER JOIN Orders AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number IS NULL LIMIT 1 AND T1.order_item_status_code = 'INVENTORY'</sql>"
  },
  {
    "id": 70,
    "db_id": "e_commerce",
    "question": "What is the product name and the color of the ordered items which have been shipped?",
    "answer": "SELECT DISTINCT T1.product_name, T2.`color`, T2.FOREIGN KEY (`customer_id`) FROM Orders AS T1 INNER JOIN Products AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_item_status_code ORDER BY CASE WHEN T2.product_color IS NULL THEN t2.product_name END , T2.`color`</sql>"
  },
  {
    "id": 71,
    "db_id": "e_commerce",
    "question": "What are the names and colors of all products that have been shipped?",
    "answer": "SELECT DISTINCT T1.product_name, T2.`color` FROM `Order_Items` AS T1 INNER JOIN Customers AS T2 ON T1.order_id = T2.customer_id WHERE T1.order_status_code != 'D' ORDER BY T1.invoice_date DESC LIMIT 1</sql>"
  },
  {
    "id": 72,
    "db_id": "e_commerce",
    "question": "List all the distinct product names, price and descriptions which are bought by female customers.",
    "answer": "SELECT T1.product_name , T2.`description`, T3.price FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.order_item_id INNER JOIN Products AS T3 ON T1.customer_id = T3.product_id WHERE strftime('%J', T2.`date_order_placed`) - strftime('%J', T2.order_status"
  },
  {
    "id": 73,
    "db_id": "e_commerce",
    "question": "What are the different names, prices, and descriptions for all products bought by female customers?",
    "answer": "SELECT T1.product_name, T2.`price`, T3.`description__incl_unit_price__2008` FROM `Order_Items` AS T1 INNER JOIN Products AS T2 ON T1.order_item_id = T2.product_id WHERE gender = 'F'</sql>"
  },
  {
    "id": 74,
    "db_id": "e_commerce",
    "question": "What are invoices status of all the orders which have not been shipped?",
    "answer": "SELECT T2.invoice_status FROM Orders AS T1 INNER JOIN Invoices AS T2 ON T1.order_id = T2.order_id WHERE T2.customer_id IS NULL AND T1.order_status <> 'In process' GROUP BY T2.order_items ORDER BY COUNT(T1.invoice_number) DESC LIMIT 1</sql>"
  },
  {
    "id": 75,
    "db_id": "e_commerce",
    "question": "What are the invoice statuses for all orderes that have not been shipped out yet?",
    "answer": "SELECT T1.invoice_status FROM Orders AS T1 INNER JOIN Invoices AS T2 ON T1.order_id = T2.order_id WHERE T2.customer_id IS NULL AND T1.order_item_status_code != 'Shipped'</sql>"
  },
  {
    "id": 76,
    "db_id": "e_commerce",
    "question": "What are the total cost of all the orders ? List the order id , date , and total cost .",
    "answer": "SELECT T1.total_cost, T2.`order_date`, SUM(T3.`total_price`) FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_item_id WHERE T1.customer_id = 'FH89J'</sql>"
  },
  {
    "id": 77,
    "db_id": "e_commerce",
    "question": "For each order, what is its id, date, and total amount paid?",
    "answer": "SELECT T2.order_item_id, SUM(T3.order_status_code) FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_item_id = T2.order_item_id WHERE T2.order_id IN ( SELECT T4.order_id ORDER BY T2.order_items.order_date AS strftime('%J', T3.`order_date`) FROM Orders AS"
  },
  {
    "id": 78,
    "db_id": "e_commerce",
    "question": "How many customers have placed any order?",
    "answer": "SELECT COUNT(customer_id) FROM Orders WHERE order_items.order_item_id IN ( SELECT T1.order_item_id FROM Order_Items AS T1 INNER JOIN Customers AS T2 ON T1.order_item_id = T2.customer_id ORDER BY T2.first_name ,T2.last_name , T2.email_address LIMIT 1 )</sql>"
  },
  {
    "id": 79,
    "db_id": "e_commerce",
    "question": "How many different customers have ordered things?",
    "answer": "SELECT COUNT(T1.customer_id) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.invoice_number IS NOT NULL AND T2.invoice_date BETWEEN '2022-06-18' AND '2022-06-30'</sql>"
  },
  {
    "id": 80,
    "db_id": "e_commerce",
    "question": "How many item states are there in the orders?",
    "answer": "SELECT COUNT(T1.order_item_id) FROM Order_Items AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.`order_item_status_code` LIKE 'state-%' AND T1.order_id = ( SELECT MAX(ORDER_ID) FROM Orders ORDER BY order_items_status_code ) GROUP BY T1.order_item_id</sql>"
  },
  {
    "id": 81,
    "db_id": "e_commerce",
    "question": "How many different item status codes are there listed in ordered items?",
    "answer": "SELECT COUNT(DISTINCT T2.order_item_status_code) AS num FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id WHERE T1.customer_first_name = 'Jeff' AND T1.order_item_title LIKE '%Order Item%' GROUP BY T2.order_item_status_code ORDER BY COUNT(DISTINCT T2.order_item"
  },
  {
    "id": 82,
    "db_id": "e_commerce",
    "question": "How many different payment methods are there?",
    "answer": "SELECT COUNT(T1.payment_method_code) FROM Customer_Payment_Methods AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.payment_method_code ORDER BY count(T1.payment_method_code) DESC LIMIT 5</sql>"
  },
  {
    "id": 83,
    "db_id": "e_commerce",
    "question": "How many different payment methods can customers choose from?",
    "answer": "SELECT COUNT(T1.payment_method_code) FROM Customers AS T1 INNER JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_first_name, T1.customer_middle_initial, T2.payment_method_code ORDER BY COUNT(T1.payment_method_code) DESC LIMIT 5</sql>"
  },
  {
    "id": 84,
    "db_id": "e_commerce",
    "question": "What are the login names and passwords of the customers whose phone number have the prefix '+12'?",
    "answer": "SELECT DISTINCT T3.login_name, T3.password FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id WHERE strftime('%Y', T2.`order_item_date`) LIKE '%+' AND strftime('%J', T2.phone_number) LIKE '+1%'</sql>"
  },
  {
    "id": 85,
    "db_id": "e_commerce",
    "question": "What are the usernames and passwords of all customers whose phone number starts with '+12'?",
    "answer": "SELECT DISTINCT T3.login_name FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id WHERE strftime('%H:%M', T2.order_date) LIKE '+%'</sql>"
  },
  {
    "id": 86,
    "db_id": "e_commerce",
    "question": "What are the product sizes of the products whose name has the substring 'Dell'?",
    "answer": "SELECT DISTINCT T1.product_name, T2.`product_size`.substring(T2.product_name, 3) FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_item_status_code != 'cancelled' AND T1.customer_first_name = 'Dell'</sql>"
  },
  {
    "id": 87,
    "db_id": "e_commerce",
    "question": "What are the sizes of all products whose name includes the word 'Dell'?",
    "answer": "SELECT DISTINCT T1.product_name, T2.`product_size` FROM Order_Items AS T1 INNER JOIN Products AS T2 ON T1.order_item_id = T2.product_id WHERE T2.Product_Name IN ('Dell', 'PowerEdge') AND T2.product_description LIKE '%Dell%' ORDER BY T2.product_size</sql>"
  },
  {
    "id": 88,
    "db_id": "e_commerce",
    "question": "What are the product price and the product size of the products whose price is above average?",
    "answer": "SELECT DISTINCT T1.product_price , T2.product_size, T1.`order_item_status_code` FROM Orders AS T1 INNER JOIN Products AS T2 ON T1.order_id = T2.product_id WHERE T1.order_item_status_code > 'Price over average'</sql>"
  },
  {
    "id": 89,
    "db_id": "e_commerce",
    "question": "What are the prices and sizes of all products whose price is above the mean?",
    "answer": "SELECT DISTINCT T1.price, T2.size FROM Orders AS T1 INNER JOIN Products AS T2 ON T1.order_id = T2.product_id WHERE strftime('%J', T1.date_order_placed) > ( SELECT MIN(T1.price) - T2.mean_price AS avg FROM Orders AS T1 INNER JOIN Products AS T2 ON T1.order_id ="
  },
  {
    "id": 90,
    "db_id": "e_commerce",
    "question": "How many kinds of products have not been sold?",
    "answer": "SELECT COUNT(DISTINCT T1.product_name) FROM Orders AS T1 INNER JOIN Products AS T2 ON T1.order_id = T2.order_id WHERE T2.`type` != 'none' AND T2.price <= 0</sql>"
  },
  {
    "id": 91,
    "db_id": "e_commerce",
    "question": "What is the number of products that have not been ordered yet?",
    "answer": "SELECT COUNT(T1.product_id) FROM Orders AS T1 INNER JOIN Products AS T2 ON T1.order_id = T2.order_id WHERE T1.status = 'Not Ordered' AND T2.name IS NULL OR T2.name IS NULL</sql>"
  },
  {
    "id": 92,
    "db_id": "e_commerce",
    "question": "How many customers do not have any payment method?",
    "answer": "SELECT COUNT(T1.customer_id) FROM Customers AS T1 INNER JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id WHERE T1.payment_method_code IS NULL</sql>"
  },
  {
    "id": 93,
    "db_id": "e_commerce",
    "question": "How many customers do not have a listed payment method?",
    "answer": "SELECT COUNT(T1.customer_id) FROM Customers AS T1 INNER JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id WHERE T1.payment_method_code IS NULL</sql>"
  },
  {
    "id": 94,
    "db_id": "e_commerce",
    "question": "What are all the order status and all the dates of orders?",
    "answer": "SELECT T2.order_item_status_code, T3.date_order_placed FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id INNER JOIN Products AS T3 ON T2.product_id = T3.product_id WHERE T1.customer_first_name = 'Nicholas' AND T2.order_item_status_code = 'Pending"
  },
  {
    "id": 95,
    "db_id": "e_commerce",
    "question": "What are the status codes and dates placed for all of the orders?",
    "answer": "SELECT T2.order_item_status_code, T3.order_item_date FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id WHERE T1.customer_id IS NULL AND T1.order_items_placed IS NULL GROUP BY T2.product_code ORDER BY T1.order_item_status_code DESC LIMIT 0, 3</sql>"
  },
  {
    "id": 96,
    "db_id": "e_commerce",
    "question": "List the address, town and county information of the customers who live in the USA.",
    "answer": "SELECT DISTINCT T1.address_line_1, T2.towncity, T3.county FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.order_id WHERE strftime( '%Y', T2.`date_order_placed`) IN ('2016-7')</sql>"
  },
  {
    "id": 97,
    "db_id": "e_commerce",
    "question": "What are the addresses, towns, and county information for all customers who live in the United States?",
    "answer": "SELECT DISTINCT T2.address_line1, T2.town_city, T2.county FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id WHERE strftime(strftime('%J', `date_order_placed`) - strftime('%Y', `date_order_placed`), '%U') IN ( SELECT T3.address_line"
  },
  {
    "id": 98,
    "db_id": "e_commerce",
    "question": "List all the pairs of buyer first names and product names.",
    "answer": "SELECT T2.first_name, T1.product_name FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.order_item_id ORDER BY T1.invoice_date</sql>"
  },
  {
    "id": 99,
    "db_id": "e_commerce",
    "question": "What are the first names of all buyers and what products did they buy? List them in pairs.",
    "answer": "SELECT DISTINCT T1.first_name, T2.last_name FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.order_item_id ORDER BY T1.gender_code DESC LIMIT 1</sql>"
  },
  {
    "id": 100,
    "db_id": "e_commerce",
    "question": "How many items are shipped?",
    "answer": "SELECT COUNT(T1.order_item_id) FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id WHERE T1.`order_status_code` = 'placed'</sql>"
  },
  {
    "id": 101,
    "db_id": "e_commerce",
    "question": "How many products have been shipped?",
    "answer": "SELECT COUNT(T1.product_id) FROM Orders AS T1 INNER JOIN Products AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed = '2018-12-31'</sql>"
  },
  {
    "id": 102,
    "db_id": "e_commerce",
    "question": "What is the product average price?",
    "answer": "SELECT CAST(SUM(T2.product_price) / COUNT(T2.customer_id) AS REAL) * 100 / COUNT(T2.order_item_id), T3.customer_first_name FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.order_id = T2.order_id WHERE T2.gender_code = 'F' GROUP BY T1.customer_id ORDER BY"
  },
  {
    "id": 103,
    "db_id": "e_commerce",
    "question": "How much do the products cost on average?",
    "answer": "SELECT SUM(SUM(T2.price)) / COUNT(DISTINCT T2.customer_id) AS average FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id ORDER BY T3.order_item_status_code, T3.invoice_date</sql>"
  },
  {
    "id": 104,
    "db_id": "e_commerce",
    "question": "What is the average price of the products being ordered?",
    "answer": "SELECT CAST(SUM(T2.price) AS REAL) / COUNT(T1.order_item_id) FROM Orders AS T1 INNER JOIN Products AS T2 ON T1.order_item_id = T2.product_id WHERE T1.customer_id = 4</sql>"
  },
  {
    "id": 105,
    "db_id": "e_commerce",
    "question": "What is the price of all products being ordered on average?",
    "answer": "SELECT AVG(T2.price) FROM ( SELECT T1.`product_id`, COUNT(DISTINCT T2.`customer_id`) AS num FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_item_id = T2.order_item_id GROUP BY T1.`order_item_id` , T2.customer_first_name, T2.customer_last_name ORDER BY COUNT(T2"
  },
  {
    "id": 106,
    "db_id": "e_commerce",
    "question": "What are the email address, town and county of the customers who are of the least common gender?",
    "answer": "SELECT DISTINCT T2.town , T3.city, T2.email FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.gender_code LIKE '%M%' ORDER BY COUNT(T2.login_name) DESC LIMIT 1</sql>"
  },
  {
    "id": 107,
    "db_id": "e_commerce",
    "question": "What are the email addresses, cities, and counties listed for all cusomters who are from the gender that orders less often?",
    "answer": "SELECT DISTINCT T2.email_address, T1.city, T2.country FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.`customer_id` WHERE T1.order_status != 'pending' GROUP BY T1.email_address, T2.city ORDER BY COUNT(T2.first_name) ASC LIMIT 2</sql>"
  },
  {
    "id": 108,
    "db_id": "e_commerce",
    "question": "List the order date of the orders who are placed by customers with at least 2 payment methods.",
    "answer": "SELECT strftime('%J', T1.date_order_placed), strftime('%Y', T1.date_order_placed) - strftime('%B', '+' INVERSE) AS days FROM Invoices INNER JOIN Orders ON T2.invoice_number = T1.invoice_number WHERE customer_first_name LIKE '%D%' AND ( SELECT COUNT(T1.payment_method_code) FROM"
  },
  {
    "id": 109,
    "db_id": "e_commerce",
    "question": "What is the date of all orders that have been placed by customers with at least 2 payment methods?",
    "answer": "SELECT DISTINCT T1.date_order_placed FROM Orders AS T1 INNER JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id WHERE T2.payment_method_code IN ( 'VISA', 'MasterCard', 'Amex') GROUP BY t2.payment_method_name ORDER BY COUNT(t1.order_id) DESC LIMIT 3</sql>"
  },
  {
    "id": 110,
    "db_id": "e_commerce",
    "question": "What is the most uncommon order status?",
    "answer": "SELECT COUNT(T1.order_item_status_code) FROM Order_Items AS T1 INNER JOIN orders AS T2 ON T1.order_item_id = T2.order_item_id GROUP BY T1.order_status ORDER BY T2.order_status_code LIMIT 1</sql>"
  },
  {
    "id": 111,
    "db_id": "e_commerce",
    "question": "What is the least common order status?",
    "answer": "SELECT T1.order_item_status_code FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_item_id WHERE T1.order_items.order_item_status_code IS NULL GROUP BY T2.product_id ORDER BY COUNT(T2.order_item_status_code) LIMIT 1</sql>"
  },
  {
    "id": 112,
    "db_id": "e_commerce",
    "question": "For all the products sold for more than 3 times, list their id and description.",
    "answer": "SELECT product_id , product_name FROM Products WHERE product_price > ( SELECT MAX(product_price) FROM Products ) GROUP BY product_id ORDER BY COUNT(DISTINCT T1.order_item_id) DESC LIMIT 2</sql>"
  },
  {
    "id": 113,
    "db_id": "e_commerce",
    "question": "For all products sold more than 3 times, what are their ids and descriptions?",
    "answer": "SELECT product_id , product_name FROM Products WHERE COUNT(DISTINCT product_id) > 3 ORDER BY product_name DESC LIMIT 1</sql>"
  },
  {
    "id": 114,
    "db_id": "e_commerce",
    "question": "List the invoice dates and ids of the invoices causing at least 2 shipments.",
    "answer": "SELECT DISTINCT T1.invoice_date, T3.invoice_number FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id INNER JOIN Invoices AS T3 ON T2.order_id = T3.order_id WHERE IN ( SELECT DISTINCT T3.invoice_date, T1.invoice_number FROM Order_Items AS T1 INNER JOIN Custom"
  },
  {
    "id": 115,
    "db_id": "e_commerce",
    "question": "What are the dates and ids of the invoices that are related to at least 2 shipments?",
    "answer": "SELECT DISTINCT T1.invoice_number, T2.invoice_date, T3.customer_id FROM `Invoices` AS T1 INNER JOIN Orders AS T2 ON T1.order_id = T2.`order_id` GROUP BY T1.invoice_number HAVING COUNT(T2.customer_first_name) >= 2 AND count(T1.invoice_date) > 0"
  },
  {
    "id": 116,
    "db_id": "e_commerce",
    "question": "what are all shipment tracking numbers and shipment dates?",
    "answer": "SELECT DISTINCT T1.shipment_number, T2.shipment_date FROM Orders AS T1 INNER JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.customer_id = 35</sql>"
  },
  {
    "id": 117,
    "db_id": "e_commerce",
    "question": "What are the tracking numbers and dates for all shipments listed?",
    "answer": "SELECT DISTINCT T1.order_item_status_code, T2.`order_date`, T1.order_number FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_item_id WHERE T1.customer_id = 'custID' ORDER BY T2.shipment_status_code</sql>"
  },
  {
    "id": 118,
    "db_id": "e_commerce",
    "question": "What are the color, description and size of the products priced below the maximum price.",
    "answer": "SELECT product_name , product_color, product_size FROM Customers WHERE product_price > ( SELECT MAX(product_price) FROM Products )</sql>"
  },
  {
    "id": 119,
    "db_id": "e_commerce",
    "question": "What are the colors , descriptions , and sizes for all products that are not at the maximum price ?",
    "answer": "SELECT product_name, product_description FROM Product WHERE product_price IS NULL LIMIT 1</sql>"
  },
  {
    "id": 120,
    "db_id": "bbc_channels",
    "question": "Return the names of directors who are older than the average age.",
    "answer": "SELECT DISTINCT T2.Name FROM director AS T1 INNER JOIN program AS T2 ON T1.Director_ID = T2.Program_ID WHERE T1.Age BETWEEN (T1.FIRST_DIRECTOR - ( SELECT AVG(T3.Date) AS age FROM director_admin AS T3 INNER JOIN actor AS T4 ON T3.director_ID = T4.Director_ID WHERE T2."
  },
  {
    "id": 121,
    "db_id": "bbc_channels",
    "question": "Find the the name of the oldest director.",
    "answer": "SELECT DISTINCT T2.name FROM \"director AS T1 INNER JOIN directors AS T2 ON T1.Director_ID = T2.Director_ID WHERE T1.Age < 30 ORDER BY T2.Name DESC LIMIT 1</sql>"
  },
  {
    "id": 122,
    "db_id": "bbc_channels",
    "question": "How many channels have the word 'bbc' in their internet link?",
    "answer": "SELECT COUNT(DISTINCT T2.Channel_ID) FROM \"program AS t1 INNER JOIN \"director AS t2 ON t1.Director_ID = t2.Director_ID WHERE t1.Title LIKE '%bbc%' AND t2.Name = 'Internet'</sql>"
  },
  {
    "id": 123,
    "db_id": "bbc_channels",
    "question": "How many different digital terrestrial channels are there?",
    "answer": "SELECT COUNT(DISTINCT T2.Name), DISTINCT T1.PRIMARY KEY (Channel_ID)) FROM 'director' AS T1 INNER JOIN 'channel' AS T2 ON T1.Channel_ID = T2.Channel_ID GROUP BY T1.Name ORDER BY SUM(CASE WHEN T1.DISTINCT T2.name IS NULL THEN 0 ELSE 1 END) DESC LIMIT 1</sql>"
  },
  {
    "id": 124,
    "db_id": "bbc_channels",
    "question": "List all program titles in the order of starting year. List the most recent one first.",
    "answer": "SELECT T1.\"Title\", T2.\"Start_Year\" AS start_year ORDER BY T2.start_year DESC LIMIT 1</sql>"
  },
  {
    "id": 125,
    "db_id": "bbc_channels",
    "question": "Which director is in charge of the most programs?",
    "answer": "SELECT DISTINCT T2.Name FROM \"director_admin\" AS T1 INNER JOIN program AS T2 ON T1.Director_ID = T2.Director_ID ORDER BY COUNT(T2.Program_ID) DESC LIMIT 1</sql>"
  },
  {
    "id": 126,
    "db_id": "bbc_channels",
    "question": "Find the name and age of the director who is in charge of the most programs?",
    "answer": "SELECT DISTINCT T2.Name, T3.Age FROM program AS T1 INNER JOIN director AS T2 ON T1.Director_ID = T2.Director_ID GROUP BY T3.Channel_ID ORDER BY COUNT(DISTINCT T1.Program_ID) DESC LIMIT 1</sql>"
  },
  {
    "id": 127,
    "db_id": "bbc_channels",
    "question": "Return the title of the program that began most recently.",
    "answer": "SELECT T1.title FROM program AS T1 INNER JOIN director_admin AS T2 ON T1.Program_ID = T2.Director_ID ORDER BY T2.T3.End_Year DESC LIMIT 1</sql>"
  },
  {
    "id": 128,
    "db_id": "bbc_channels",
    "question": "Find the name and website link of the channels that have more than one program.",
    "answer": "SELECT DISTINCT T2.name, T3.website FROM channel AS T1 INNER JOIN director_admin AS T2 ON T1.Channel_ID = T2.Channel_ID WHERE T1.is_first_director = 'false' GROUP BY T2.channel ORDER BY COUNT(DISTINCT T2.name) DESC LIMIT 1</sql>"
  },
  {
    "id": 129,
    "db_id": "bbc_channels",
    "question": "Find the number of programs for each channel. Return the name of each channel as well.",
    "answer": "SELECT DISTINCT T2.name, T3.name FROM 'programs' AS T1 INNER JOIN channels AS T2 ON T1.Channel_ID = T2.channel_id WHERE T3.Name IN ('digital terrestrial television', 'TERRAINAL TELEVISION') ORDER BY T1.Show DESC LIMIT 1</sql>"
  },
  {
    "id": 130,
    "db_id": "bbc_channels",
    "question": "Find the number of channels that do not run any program.",
    "answer": "SELECT COUNT(DISTINCT T2.Channel_ID) FROM director AS T1 INNER JOIN program AS T2 ON T1.Director_ID = T2.Director_ID WHERE T2.`Programs` IS NULL AND T1.`Name` <> 'director'</sql>"
  },
  {
    "id": 131,
    "db_id": "bbc_channels",
    "question": "What is the name of the director who is in the \"Dracula\" program?",
    "answer": "SELECT DISTINCT T2.Name FROM \"program AS T1 INNER JOIN director_admin AS T2 ON T1.Program_ID = T2.Director_ID WHERE T1.TITLE = 'Dracula' AND T1.isFirstdirector = 1</sql>"
  },
  {
    "id": 132,
    "db_id": "bbc_channels",
    "question": "Find the name and internet web of the channel that is directed by the most directors.",
    "answer": "SELECT DISTINCT T2.name, T3.Internet FROM director AS T1 INNER JOIN program AS T2 ON T1.Director_ID = T2.Director_ID INNER JOIN channel AS T3 ON T1.Channel_ID = T3.Channel_ID ORDER BY COUNT(DISTINCT T1.Name) DESC LIMIT 1</sql>"
  },
  {
    "id": 133,
    "db_id": "bbc_channels",
    "question": "Find the name of the directors whose age is between 30 and 60.",
    "answer": "SELECT DISTINCT T2.name FROM director AS T1 INNER JOIN program AS T2 ON T1.Director_ID = T2.Director_ID WHERE T1.`Age` BETWEEN 30 AND 60 AND T1.`Name` LIKE '%@%'</sql>"
  },
  {
    "id": 134,
    "db_id": "bbc_channels",
    "question": "give me the name of channels that have both a director younger than 40 and a director older than 60.",
    "answer": "SELECT DISTINCT T2.name FROM 'programs' AS T1 INNER JOIN \"channel\" AS T2 ON T1.Channel_ID = T2.Channel_ID WHERE T1.Director IS NOT NULL AND T1.Name < '' GROUP BY T2.name ORDER BY COUNT(DISTINCT T2) / 2 DESC LIMIT 2</sql>"
  },
  {
    "id": 135,
    "db_id": "bbc_channels",
    "question": "Find the id and name of the channel that is not directed by Hank Baskett.",
    "answer": "SELECT T1.name, T2.name FROM director AS T1 INNER JOIN channel AS T2 ON T1.Channel_ID = T2.Channel_ID WHERE T1.Name != 'Hank Baskett' AND T2.Is_first_director = 'true'</sql>"
  },
  {
    "id": 136,
    "db_id": "tv_shows",
    "question": "How many radios are there?",
    "answer": "SELECT COUNT(*) FROM `radio` WHERE `station_name` = '2FM Talkback'</sql>"
  },
  {
    "id": 137,
    "db_id": "tv_shows",
    "question": "List the transmitters of radios in ascending order of erp kw .",
    "answer": "SELECT DISTINCT T2.transmitter, T1.ERP_kW FROM radio AS T1 INNER JOIN city_channel AS T2 ON T1.Station_name = T2.STATION_NAME WHERE T"
  },
  {
    "id": 138,
    "db_id": "tv_shows",
    "question": "What are the names and original air dates of tv shows?",
    "answer": "SELECT DISTINCT T2.tv_show_name, T1.original_airdate FROM \"city_channel_tv_show AS T1 INNER JOIN tv_show AS T2 ON T1.City_channel_ID = T2."
  },
  {
    "id": 139,
    "db_id": "tv_shows",
    "question": "List the station names of city channels whose affiliation is not \"ABC\".",
    "answer": "SELECT DISTINCT T2.station_name FROM city_channel AS T1 INNER JOIN station_affiliated AS T2 ON T1.city_channel_ID = T2.City AND T1.Affiliation != '"
  },
  {
    "id": 140,
    "db_id": "tv_shows",
    "question": "Show the transmitters of radios whose ERP is bigger than 150 or smaller than 30.",
    "answer": "SELECT DISTINCT T2.transmitter, T2.`ERP_kW` FROM city_channel AS T1 INNER JOIN radio AS T2 ON T1.City = T2."
  },
  {
    "id": 141,
    "db_id": "tv_shows",
    "question": "What is the transmitter of the radio with the largest ERP_kW?",
    "answer": "SELECT DISTINCT T2.transmitter FROM city_channel AS T1 INNER JOIN station_name AS T2 ON T1.City = T2.city WHERE T2.station_name LIKE \"%Lyric FM"
  },
  {
    "id": 142,
    "db_id": "tv_shows",
    "question": "What is the average ERP across all radios?",
    "answer": "SELECT AVG(T2.ERP) / COUNT(T1.radio), T1.City, SUM(T2.ERP) FROM radio AS T1 INNER JOIN city_channel_tv_show AS T2 ON T1.Station_"
  },
  {
    "id": 143,
    "db_id": "tv_shows",
    "question": "Show the different affiliations of city channels and the number of city channels with each affiliation.",
    "answer": "SELECT T1.Affiliation, COUNT(T2.Affiliation) AS num FROM city_channel AS T1 INNER JOIN station_info AS T2 ON T1.City = T2.city WHERE T2"
  },
  {
    "id": 144,
    "db_id": "tv_shows",
    "question": "Please show the most common affiliation for city channels.",
    "answer": "SELECT DISTINCT T2.Affiliation FROM city_channel AS T1 INNER JOIN station_info AS T2 ON T1.Station_name = T2.Station_name WHERE T2.is_online = 'true' GROUP BY T2."
  },
  {
    "id": 145,
    "db_id": "tv_shows",
    "question": "List the affiliations shared by more than three city channels.",
    "answer": "SELECT T1.Affiliation, COUNT(T2.City) FROM radio AS T1 INNER JOIN city_channel AS T2 ON T1.Station_name = T2.Station_name GROUP BY T1.Station_name HAVING COUNT"
  },
  {
    "id": 146,
    "db_id": "tv_shows",
    "question": "Show the cities and station names of city channels in ascending alphabetical order of station name.",
    "answer": "SELECT DISTINCT T1.city, T2.station FROM radio AS T1 INNER JOIN city_channel AS T2 ON T1.City_channel_ID = T2.City_channel_ID ORDER BY T"
  },
  {
    "id": 147,
    "db_id": "tv_shows",
    "question": "Show the transmitters of radios and the cities of the channels they are associated with.",
    "answer": "SELECT DISTINCT T1.transmitter, T2.city FROM radio AS T1 INNER JOIN city_channel AS T2 ON T1.Station_name = T2.City WHERE T2.affiliation IS"
  },
  {
    "id": 148,
    "db_id": "tv_shows",
    "question": "Show the transmitters of radios and the station names of the channels they are associated with in descending order of the ERP of the radios.",
    "answer": "SELECT DISTINCT T2.transmitter, T1.station_name ORDER BY ERP(T1.radio) DESC LIMIT 1</sql>"
  },
  {
    "id": 149,
    "db_id": "tv_shows",
    "question": "Show the transmitters of the radios and the number of city channels they are associated with.",
    "answer": "SELECT DISTINCT T2.transmitter, COUNT(T1.city) FROM `radio` AS T1 INNER JOIN `city_channel_tv_show` AS T2 ON T1.radio_ID ="
  },
  {
    "id": 150,
    "db_id": "tv_shows",
    "question": "Show the distinct transmitters of radios that are not associated with any city channel.",
    "answer": "SELECT T1.station_name FROM station AS T1 INNER JOIN radio AS T2 ON T1.Station_name = T2.Station_name WHERE T2.Affiliation != 'Radio' ORDER BY T1.ID"
  },
  {
    "id": 151,
    "db_id": "vehicle_driver",
    "question": "What is the model of the vehicle with maximum top speed whose power is higher than 6000?",
    "answer": "SELECT DISTINCT T1.model FROM 'vehicle' AS T1 INNER JOIN 'driver' AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID GROUP BY T1.model ORDER BY MAX(T1.\"Power\") DESC LIMIT 1</sql>"
  },
  {
    "id": 152,
    "db_id": "vehicle_driver",
    "question": "Of vehicles with power over 6000, return the model of the vehicle with the greatest top speed.",
    "answer": "SELECT DISTINCT T1.model FROM \"vehicle AS T1 INNER JOIN driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T2.\"Total_Production\" > 6000 LIMIT 1</sql>"
  },
  {
    "id": 153,
    "db_id": "vehicle_driver",
    "question": "What are the names of the drivers who are citizens of the 'United States'?",
    "answer": "SELECT T1.name FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Vehicle_ID WHERE T2.Citizenship IS NULL AND T2.country = 'usa'</sql>"
  },
  {
    "id": 154,
    "db_id": "vehicle_driver",
    "question": "Return the names of drivers with citizenship from the United States.",
    "answer": "SELECT DISTINCT T2.Name FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Vehicle_ID WHERE T1.citizenship = 'us'</sql>"
  },
  {
    "id": 155,
    "db_id": "vehicle_driver",
    "question": "How many vehicles has a driver driven at most, and what is the driver id of the driver who has driven this many vehicles?",
    "answer": "SELECT COUNT(T1.Driver_ID), T2.T3 FROM \"driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID GROUP BY T1.Model ORDER BY count(T1.Vehicle_ID) DESC LIMIT 4</sql>"
  },
  {
    "id": 156,
    "db_id": "vehicle_driver",
    "question": "What is the id of the driver who has driven the most vehicles, and how many vehicles is this?",
    "answer": "SELECT DISTINCT T2.Driver_ID , SUM(CASE WHEN T1.`Total_Production` = 1 THEN 1 ELSE NULL END) AS total FROM ( SELECT CAST(`Vehicle_ID`) AS INT , COUNT(DISTINCT `Vehicle_ID`) AS num, MAX(T2.`Model`, T1.Citizenship)` as T2 GROUP BY `Total_Production` ORDER BY SUM(CASE WHEN T1"
  },
  {
    "id": 157,
    "db_id": "vehicle_driver",
    "question": "What is the maximum and average power for the vehicles manufactured by 'Zhuzhou'?",
    "answer": "SELECT MAX(T2.Power), AVG(T1.Power) FROM Vehicles AS T1 INNER JOIN driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T2.Citizenship = 'ZHUZHOU' AND T1.Builder = 'ZHUZHOU'</sql>"
  },
  {
    "id": 158,
    "db_id": "vehicle_driver",
    "question": "Return the maximum and average power for the vehicles built by Zhuzhou.",
    "answer": "SELECT MAX(T1.Power), AVG(T2.`Total_Production`) FROM \"driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Vehicle_ID WHERE T2.`Builder` LIKE '%Zhuzhou%' GROUP BY T1.Build_Year ORDER BY T1.Power DESC LIMIT 1</sql>"
  },
  {
    "id": 159,
    "db_id": "vehicle_driver",
    "question": "What is the id of the vehicle driven for the least times for the vehicles ever used?",
    "answer": "SELECT DISTINCT T2.Vehicle_ID FROM `driver` AS T1 INNER JOIN `vehicle_driver` AS T2 ON T1.Driver_ID = T2.Vehicle_ID WHERE T1.Name IS NOT NULL AND T2.Vehicle_ID < ( SELECT MAX(T1.Vehicle_ID) FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T"
  },
  {
    "id": 160,
    "db_id": "vehicle_driver",
    "question": "Return the id of the vehicle that has been driven the fewest times.",
    "answer": "SELECT DISTINCT T1.Vehicle_ID FROM 'vehicle_driver' AS T1 INNER JOIN 'vehicle' AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID ORDER BY T1.`Total_Production` - 1 DESC LIMIT 1</sql>"
  },
  {
    "id": 161,
    "db_id": "vehicle_driver",
    "question": "What is the top speed and power of the vehicle manufactured in the year of 1996?",
    "answer": "SELECT SUM(top_speed), SUM(power) FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Vehicle_ID WHERE '1996' = 'Year' AND T1.name = 'Honda Accord'</sql>"
  },
  {
    "id": 162,
    "db_id": "vehicle_driver",
    "question": "Return the top speed and power of the vehicle that was built in the year 1996.",
    "answer": "SELECT SUM(top_speed), SUM(power) FROM ( SELECT T2.TOP_SPEED, T2.POWER FROM driver AS T1 INNER JOIN vehicle AS T2 ON T2.Vehicle_ID = T1.Vehicle_ID WHERE T1.Citizenship = 'USA' AND strftime(STRFTIME('%Y',T2.`Builder`) , '1996') = 1 )"
  },
  {
    "id": 163,
    "db_id": "vehicle_driver",
    "question": "What are the build year, model name and builder of the vehicles?",
    "answer": "SELECT DISTINCT T1.model, T1.build_year, T1.builder FROM ( SELECT '2008', 'Subaru BRZ' AS T1, 'Wright Motorsports' AS T2 UNION ALL SELECT '2015', 'Porsche 996 GT3 RS', 'Porsche Cars Argentina' AS T3 UNION ALL SELECT '2007', 'KTM X-ABS', '"
  },
  {
    "id": 164,
    "db_id": "vehicle_driver",
    "question": "Give the build year, model, and builder of each vehicle.",
    "answer": "SELECT DISTINCT T1.model, T1.build_year, T1.builder FROM \"vehicles AS T1 INNER JOIN driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID GROUP BY T2.Vehicle_ID ORDER BY CAST(T1.\"build_year\" AS REAL) , T1.</sql>"
  },
  {
    "id": 165,
    "db_id": "vehicle_driver",
    "question": "How many drivers have driven vehicles built in 2012?",
    "answer": "SELECT COUNT(T1.Driver_ID) FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Vehicle_ID WHERE STRFTIME('%Y', T2.Build_Year) BETWEEN '2013' AND '2012'</sql>"
  },
  {
    "id": 166,
    "db_id": "vehicle_driver",
    "question": "Count the number of different drivers who have driven vehicles built in 2012.",
    "answer": "SELECT COUNT(DISTINCT T2.Driver_ID) FROM driver AS T1 INNER JOIN vehicle AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE SUBSTR(T1.Build_Year, 4 , LENGTH - 3) LIKE '201%' GROUP BY T1.Driver_ID ORDER BY COUNT(DISTINCT T1.Name) DESC LIMIT 2</sql>"
  },
  {
    "id": 167,
    "db_id": "vehicle_driver",
    "question": "How many drivers have raced in 'NASCAR'?",
    "answer": "SELECT COUNT(T1.Driver_ID) FROM driver AS T1 INNER JOIN `nascar` AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Name = 'NASCAR' GROUP BY T2.Name ORDER BY COUNT(T2.Vehicle_ID) DESC LIMIT 1</sql>"
  },
  {
    "id": 168,
    "db_id": "vehicle_driver",
    "question": "Count the number of drivers who have raced in NASCAR.",
    "answer": "SELECT COUNT(T1.Driver_ID) FROM driver AS T1 INNER JOIN ( SELECT DISTINCT T2.Name , T3.Vehicle_ID FROM driver AS T2 INNER JOIN race_series AS T3 ON T2.Vehicle_ID = T3.Vehicle_ID WHERE T2.`Type` = 'NASCAR' AND T3.`Series` IN ('WR', 'SR') ORDER BY COUNT(T1.Driver_"
  },
  {
    "id": 169,
    "db_id": "vehicle_driver",
    "question": "What is the average top speed of vehicles?",
    "answer": "SELECT T1.Top_Speed / COUNT(T2.Vehicle_ID) AS avg FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Vehicle_ID WHERE T1.Builder = 'D' GROUP BY T2.Vehicle_ID ORDER BY SUM(T2.`Top_Speed`) DESC LIMIT 3</sql>"
  },
  {
    "id": 170,
    "db_id": "vehicle_driver",
    "question": "Return the average top speed across all vehicles.",
    "answer": "SELECT AVG(T2.top_speed) FROM ( SELECT T1.build_year, T2.`total_production`, SUM(T2.top_speed) AS total FROM \"vehicle\" AS T1 INNER JOIN \"driver\" AS T2 ON T1.Vehicle_ID = T2.Driver_ID GROUP BY T1.`build_year` , T2.`total_production`) AS T ORDER BY AVG(T2.top"
  },
  {
    "id": 171,
    "db_id": "vehicle_driver",
    "question": "What are the distinct driver names who have driven vehicles with power more than 5000 ?",
    "answer": "SELECT T1.name FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Vehicle_ID WHERE T2.POWER > 5000 ORDER BY T1.NAME</sql>"
  },
  {
    "id": 172,
    "db_id": "vehicle_driver",
    "question": "Return the names of drivers who have driven vehicles with power over 5000.",
    "answer": "SELECT DISTINCT T2.Name FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Vehicle_ID WHERE T1.power > ( SELECT MAX(T2.power) FROM driver AS T3 INNER JOIN vehicle_driver AS T4 ON T1.Vehicle_ID = T4.Vehicle_ID WHERE T2.building_series = 'F350' AND T3"
  },
  {
    "id": 173,
    "db_id": "vehicle_driver",
    "question": "Which car models have total production larger than 100 or top speed higher than 150?",
    "answer": "SELECT DISTINCT T2.model, T2.top_speed FROM \"driver\" AS T1 INNER JOIN \"vehicle_driver\" AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID GROUP BY T1.name ORDER BY SUM(T1.`Total_Production`) DESC LIMIT 1</sql>"
  },
  {
    "id": 174,
    "db_id": "vehicle_driver",
    "question": "Give the models of cars that have a total production of over 100 or a top speed over 150.",
    "answer": "SELECT DISTINCT T2.model, T2.power FROM \"vehicles\" AS T1 INNER JOIN driver AS T2 ON T1.Vehicle_ID = T2.Driver_ID WHERE T1.top_speed > '150' OR T1.total_production IS NULL</sql>"
  },
  {
    "id": 175,
    "db_id": "vehicle_driver",
    "question": "What are the model names and build year of the cars with 'DJ' in its model name?",
    "answer": "SELECT DISTINCT T1.model, T2.build_year FROM \"driver AS T1 INNER JOIN vehicle AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T2.name LIKE '%JIMMY%' AND T2.car_name = 'DJ' ORDER BY T1.model, T2.build_year DESC LIMIT 1</sql>"
  },
  {
    "id": 176,
    "db_id": "vehicle_driver",
    "question": "Return the model and build year of cars that include \"DJ\" in their model names.",
    "answer": "SELECT DISTINCT T1.model, T2.build_year FROM `table_name` AS T1 INNER JOIN `vehicle_driver` AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T2.NAME LIKE '%DJ%' AND T2.RACING_SERIES = 'ROADWHEEL'</sql>"
  },
  {
    "id": 177,
    "db_id": "vehicle_driver",
    "question": "What are the models which have not been driven by any drivers?",
    "answer": "SELECT T1.model FROM driver AS T1 INNER JOIN vehicle AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Vehicle_ID IS NULL ORDER BY COUNT(T2.Model) DESC LIMIT 1</sql>"
  },
  {
    "id": 178,
    "db_id": "vehicle_driver",
    "question": "Return the models of vehicles that have never been driven.",
    "answer": "SELECT T1.model FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Vehicle_ID IS NULL ORDER BY T2.Vehicle_ID LIMIT 0</sql>"
  },
  {
    "id": 179,
    "db_id": "vehicle_driver",
    "question": "What are the vehicle ids and models of the vehicle which have been driven by two drivers or been manufactured by 'Ziyang'.",
    "answer": "SELECT DISTINCT T2.Vehicle_ID, T1.Model, T1.Builder FROM \"vehicle\" AS T1 INNER JOIN driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID INNER JOIN vehicle_driver AS T3 ON T1.Driver_ID = T3.Driver_ID WHERE T1.RacingSeries LIKE 'XXX%Z%' AND T1.Build_Year BETWE"
  },
  {
    "id": 180,
    "db_id": "vehicle_driver",
    "question": "Return the ids and models of vehicles that have been driven by exactly two drivers or built by Ziyang.",
    "answer": "SELECT DISTINCT T2.Model, T3.Name FROM driver AS T1 INNER JOIN vehicle AS T2 ON T1.Driver_ID = T2.Vehicle_ID WHERE T1.`Total_Production` IN (2 , 4 ) AND T2.Build_Year IS NOT NULL GROUP BY T3.Name ORDER BY COUNT(DISTINCT T1.Vehicle_ID) DESC LIMIT 1</sql>"
  },
  {
    "id": 181,
    "db_id": "vehicle_driver",
    "question": "What are the vehicle ids and models which have been driven by more than 2 drivers or been driven by the driver named 'Jeff Gordon'?",
    "answer": "SELECT DISTINCT T1.Vehicle_ID, T3.Model, T3.Build_Year FROM driver AS T1 INNER JOIN vehicle AS T2 ON T1.Driver_ID = T2.Vehicle_ID WHERE T2.Model LIKE '%Jeff Gordon%' GROUP BY T2.Vehicle_ID ORDER BY COUNT(DISTINCT T2.Vehicle_ID) DESC LIMIT 1</sql>"
  },
  {
    "id": 182,
    "db_id": "vehicle_driver",
    "question": "Return the ids and models of vehicles that have been driven by more than 2 drivers or been driven by the Jeff Gordon.",
    "answer": "SELECT DISTINCT T1.Model, T1.Vehicle_ID FROM driver AS T1 INNER JOIN vehicle AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Total_Production > 2 AND T1.Name != 'Jeff Gordon' LIMIT 1</sql>"
  },
  {
    "id": 183,
    "db_id": "vehicle_driver",
    "question": "How many vehicles have maximum top speed?",
    "answer": "SELECT SUM(MAX(T2.Top_Speed)) FROM 'vehicle_driver' AS T1 INNER JOIN 'vehicle' AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T1.citizenship = 'American' AND strftime('%J', T1.Build_Year) BETWEEN '2004' AND '2005' GROUP BY T1."
  },
  {
    "id": 184,
    "db_id": "vehicle_driver",
    "question": "Count the number of vehicles that have a top speed equal to the maximum across all vehicles.",
    "answer": "SELECT COUNT(DISTINCT T1.Vehicle_ID), MAX(T2.`Total_Production`) FROM `vehicle` AS T1 INNER JOIN `driver` AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Vehicle_ID ORDER BY COUNT(`Vehicle_ID`) LIMIT 1</sql>"
  },
  {
    "id": 185,
    "db_id": "vehicle_driver",
    "question": "Show all driver names in the alphabetical order.",
    "answer": "SELECT T1.name FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID ORDER BY T2.Name IN ('D'), T1.Name</sql>"
  },
  {
    "id": 186,
    "db_id": "vehicle_driver",
    "question": "What are the names of drivers, returned in alphbetical order?",
    "answer": "SELECT DISTINCT T2.Name FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Vehicle_ID ORDER BY T1.`Name`, T2.Year LIMIT 1</sql>"
  },
  {
    "id": 187,
    "db_id": "vehicle_driver",
    "question": "How many drivers have been racing in each racing series?",
    "answer": "SELECT SUM(COUNT(DISTINCT T2.Driver_ID)) AS num , COUNT(T1.Race_Series) FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID GROUP BY T1.Race_Series ORDER BY SUM(DISTINCT T3.NUM) DESC LIMIT 1</sql>"
  },
  {
    "id": 188,
    "db_id": "vehicle_driver",
    "question": "Count the number of drivers that have raced in each series.",
    "answer": "SELECT COUNT(DISTINCT T2.Driver_ID), COUNT(T1.`Series`) FROM `driver` AS T1 INNER JOIN `vehicle_driver` AS T2 ON T1.Driver_ID = T2.Vehicle_ID ORDER BY T1.Racing_Series GROUP BY T2.Builder, T2.Model</sql>"
  },
  {
    "id": 189,
    "db_id": "vehicle_driver",
    "question": "What are the name and citizenship of the drivers who have driven the vehicle model 'DJ1'?",
    "answer": "SELECT DISTINCT T2.Name, T2.Citizenship FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.model = 'dj1' AND T2.Vehicle_ID IS NOT NULL</sql>"
  },
  {
    "id": 190,
    "db_id": "vehicle_driver",
    "question": "Return the names and citizenships of drivers who have driven the vehicle with the model 'DJ1'.",
    "answer": "SELECT DISTINCT T2.Name, T2.Citizenship FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Vehicle_ID = 'dj1'</sql>"
  },
  {
    "id": 191,
    "db_id": "vehicle_driver",
    "question": "How many drivers have not driven any cars?",
    "answer": "SELECT COUNT(T1.Driver_ID) FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Vehicle_ID WHERE T1.DRIVER_ID NOT IN ( SELECT T2.driver_id FROM driver AS T2 INNER JOIN vehicle AS T3 ON T2.Vehicle_ID = T3.Vehicle_ID ORDER BY T2.Name LIMIT 1 )</sql>"
  },
  {
    "id": 192,
    "db_id": "vehicle_driver",
    "question": "Count the number of drivers who have not driven any vehicles.",
    "answer": "SELECT COUNT(DISTINCT T2.Driver_ID) FROM driver AS T1 INNER JOIN vehicle AS T2 ON T1.Driver_ID = T2.Vehicle_ID WHERE T1.`Citizenship` != 'Individual' GROUP BY T1.Name ORDER BY COUNT(T1.Vehicle_ID) DESC LIMIT 1</sql>"
  },
  {
    "id": 193,
    "db_id": "online_exams",
    "question": "How many exams are there?",
    "answer": "SELECT COUNT(*) FROM Exams WHERE SUBSTR(Question_Text, 1, CHARINDEX('</', Question_Text)) = '' AND Subject_Code = 'Exam' LIMIT 1</sql>)</blockquote>\n<p>What percentage of valid answers have an answer text that starts with 'H', and how many people on average are not in a middle or last name who use the first letter 'O.</p>"
  },
  {
    "id": 194,
    "db_id": "online_exams",
    "question": "Count the number of exams.",
    "answer": "SELECT COUNT(*) FROM Questions WHERE Subject_Code = 'Test' AND Exam_Name = 'Exam 120987563423056947'</sql>\n<sql>SELECT DISTINCT SUBSTR(Question_Text, LENGTH(SUBSTR(Question_Text, 1)) - 3) AS str FROM Questions WHERE Question_Name = 'Count number of exams.' AND Sub"
  },
  {
    "id": 195,
    "db_id": "online_exams",
    "question": "List the distinct subject code of exams in ascending alphabetical order .",
    "answer": "SELECT SUBSTR('Subject_Code', 1, LENGTH(SUBSTR('Subject_Code', 2)) - 3) FROM Questions ORDER BY SUBSTR('Subject_Code', 3, LENGTH(SUBSTR('Subject_Code', 3, 50)))</sql>"
  },
  {
    "id": 196,
    "db_id": "online_exams",
    "question": "Give me an alphabetically ordered list of the distinct subject code for exams.",
    "answer": "SELECT SUBSTR('SUBJECT_CODE', 1, LENGTH(SUBSTR(SUBSTR('SUBJECT_CODE', 2), 3)) - 4) AS DISTINCT FROM Exam</sql>"
  },
  {
    "id": 197,
    "db_id": "online_exams",
    "question": "What are the names and dates of the exams with subject code that is not \"Database\"?",
    "answer": "SELECT DISTINCT T1.Question_Name, T2.`Date` FROM Valid_Answers AS T1 INNER JOIN Exams AS T2 ON T1.Exam_ID = T2.Exam_ID WHERE T2.Subject_Code = 'Database'</sql>"
  },
  {
    "id": 198,
    "db_id": "online_exams",
    "question": "Find the exams whose subject code is not \"Database\". What are the exam dates and exam names?",
    "answer": "SELECT T2.Exam_Date, T3.Question_Name FROM Questions AS T1 INNER JOIN Exams AS T2 ON T1.Question_ID = T2.Exam_ID INNER JOIN Valid_Answers AS T3 ON T3.Question_ID = T1.Question_ID WHERE T3.Subject_Code != 'database'</sql>"
  },
  {
    "id": 199,
    "db_id": "online_exams",
    "question": "List the dates of the exams with subject code containing the word \"data\", in descending order of dates.",
    "answer": "SELECT T2.Exam_Date, SUBSTR(T3.Question_Text, LOCATE('-', T3.Question_Text) - 10, 39) AS strStart, T2.Valid_Answer_text FROM Questions AS T1 INNER JOIN Exams AS T2 ON T1.Exam_ID = T2.Exam_ID WHERE T1.Question LIKE '%data%' ORDER BY"
  },
  {
    "id": 200,
    "db_id": "online_exams",
    "question": "What are the dates of the exams whose subject code contains the substring \"data\"? Return them in descending order of dates.",
    "answer": "SELECT SUBSTR(SUBSTR(Question_Text, 1, LENGTH(SUBSTR(Question_Text, 1)) - 5), 2, INTEGER) FROM Questions ORDER BY SUBSTR(SUBSTR(Question_Text, LOCALITY(SUBSTR(Question_Text, LOCATION)))) DESC LIMIT 1</sql>"
  },
  {
    "id": 201,
    "db_id": "online_exams",
    "question": "What are the type of questions and their counts?",
    "answer": "SELECT DISTINCT T1.Type_of_Question_Code, COUNT(DISTINCT T2.Question_Text) FROM Questions AS T1 INNER JOIN Exams AS T2 ON T1.Question_ID = T2.Exam_ID ORDER BY T2.Subject_Code DESC</sql>"
  },
  {
    "id": 202,
    "db_id": "online_exams",
    "question": "For each question type, return its type code and its count of occurrence.",
    "answer": "SELECT DISTINCT T1.type_of_Question_Code, SUM(IIF(T2.code = 'q3' AND T1.count > 0)) - COUNT(DISTINCT T2.type_of_Question) FROM Questions AS T1 INNER JOIN Questions_in_Exams AS T2 ON T1.question_id = T2.Question_ID WHERE T1.subject_code = 'q3' GROUP BY T"
  },
  {
    "id": 203,
    "db_id": "online_exams",
    "question": "What are the distinct student answer texts that received comments \"Normal\"?",
    "answer": "SELECT T2.valid_answer_text FROM Valid_Answers AS T1 INNER JOIN Questions AS T2 ON T1.Question_ID = T2.Question_ID WHERE T1.Answer_Text LIKE '%Normal%' ORDER BY strftime(STRFTIME('%J', 'YYYYMMDDHHMMSS'), T2.Exam_Date) LIMIT 1</sql>"
  },
  {
    "id": 204,
    "db_id": "online_exams",
    "question": "List all the distinct student answer texts to which comments \"Normal\" were given?",
    "answer": "SELECT T2.valid_answer_text FROM Valid_Answers AS T1 INNER JOIN Questions AS T2 ON T1.Question_ID = T2.Question_ID WHERE T1.Exam_Name LIKE '%Normal%' AND strftime(strftime('%Y', T1.Valid_Answer_Date), 'MM/DD/YY') IN ('56740069', '62738193"
  },
  {
    "id": 205,
    "db_id": "online_exams",
    "question": "How many different comments are there for student answers?",
    "answer": "SELECT COUNT(T1.Question_ID) FROM Questions AS T1 INNER JOIN Valid_Answers AS T2 ON T1.Question_ID = T2.Question_ID WHERE T2.Valid_Answer_Text = 'No Answer' AND strftime('%J', T1.`Date`) = '' AND strftime('%Y', T1.`Date`) BETWEEN 2006 AND 2014</sql>"
  },
  {
    "id": 206,
    "db_id": "online_exams",
    "question": "Count the number of different comments for student answers.",
    "answer": "SELECT COUNT(T1.Question_ID) FROM Questions AS T1 INNER JOIN Valid_Answers AS T2 ON T1.Question_ID = T2.Question_ID WHERE T2.Valid_Answer_Text = 'Comments' GROUP BY T1.Question_ID ORDER BY SUM(T2.Answer) DESC LIMIT 1</sql>"
  },
  {
    "id": 207,
    "db_id": "online_exams",
    "question": "List all the student answer texts in descending order of count.",
    "answer": "SELECT T2.valid_answer_text, SUM(T1.count) DESC FROM Valid_Answers AS T1 INNER JOIN Questions AS T2 ON T1.Question_ID = T2.Question_ID WHERE T2.question LIKE '%@%' ORDER BY COUNT(T2.Answer_Text) DESC LIMIT 1</sql>"
  },
  {
    "id": 208,
    "db_id": "online_exams",
    "question": "Sort the student answer texts in descending order of their frequency of occurrence.",
    "answer": "SELECT DISTINCT T1.Question_Text FROM Questions AS T1 INNER JOIN Valid_Answers AS T2 ON T1.Question_ID = T2.Question_ID ORDER BY T1.Valid_Answer_Text DESC LIMIT 1</sql>"
  },
  {
    "id": 209,
    "db_id": "online_exams",
    "question": "Please show the first names of students and the dates of their answers.",
    "answer": "SELECT DISTINCT T1.FirstName, T2.Date FROM Questions AS T1 INNER JOIN Valid_Answers AS T2 ON T1.Question_ID = T2.Question_ID INNER JOIN Students AS T3 ON T3.Student_ID = T2.Valid_Answer_ID WHERE T1.Type_of_Question_Code = 'qquestion'</sql>"
  },
  {
    "id": 210,
    "db_id": "online_exams",
    "question": "For each student answer, find the first name of the student and the date of the answer.",
    "answer": "SELECT DISTINCT T1.FirstName, T2.LastName, T3.`Date`, T3.Answer FROM Student_Address AS T1 INNER JOIN Questions AS T2 ON T1.StuID = T2.StuID WHERE T2.`Question` LIKE '% % ' ORDER BY T1.FirstName = T2.FirstName LIMIT 3</sql>"
  },
  {
    "id": 211,
    "db_id": "online_exams",
    "question": "Please show the email addresses of students and the dates of their answers in descending order of dates.",
    "answer": "SELECT DISTINCT T1.Email_Adress, T2.Date FROM Exams AS T1 INNER JOIN Valid_Answers AS T2 ON T1.Exam_ID = T2.Question_ID ORDER BY T2.Date DESC LIMIT 1</sql>"
  },
  {
    "id": 212,
    "db_id": "online_exams",
    "question": "For each student answer, find the email address of the student and the date of the answer. Sort them in descending order of dates.",
    "answer": "SELECT DISTINCT T2.Email_Adress, T3.Date FROM Exams AS T1 INNER JOIN Valid_Answers AS T2 ON T1.Exam_ID = T2.Question_ID WHERE T2.Valid_Answer_Text LIKE '%@%' ORDER BY T3.`Date` DESC LIMIT 1</sql>"
  },
  {
    "id": 213,
    "db_id": "online_exams",
    "question": "Please show the least common assessment for students.",
    "answer": "SELECT CAST(SUM(CASE WHEN T1.Question LIKE 'L%C1%' THEN 1 ELSE NULL END) AS REAL) - SUM(CASE WHEN T2.Question LIKE 'W%B5%' THEN 1 ELSE NULL END)) / COUNT(*) FROM Questions_in_Exams AS T1 INNER JOIN Exam_Values AS T2 ON T1.Exam_ID = T2.Exam_ID WHERE SUBSTR(T2.Question"
  },
  {
    "id": 214,
    "db_id": "online_exams",
    "question": "Which assessment has the smallest frequency count?",
    "answer": "SELECT DISTINCT T1.Question_ID FROM Questions AS T1 INNER JOIN Valid_Answers AS T2 ON T1.Question_ID = T2.Question_ID WHERE T2.`Valid_Answer_Text` IS NOT NULL GROUP BY T1.Question_ID ORDER BY COUNT(T2.Question_ID) LIMIT 1</sql>"
  },
  {
    "id": 215,
    "db_id": "online_exams",
    "question": "Please show the first names of the students that have at least two answer records.",
    "answer": "SELECT DISTINCT T1.FirstName, T2.LastName FROM Questions AS T1 INNER JOIN Valid_Answers AS T2 ON T1.Question_ID = T2.Question_ID WHERE T2.Valid_Answer_Text IN (T2.Fname, T2.MfU) GROUP BY T1.FirstName ORDER BY SUM(T1.FirstName) > 2 AND SUM(T1.LastName) > 2</sql"
  },
  {
    "id": 216,
    "db_id": "online_exams",
    "question": "Which students have 2 or more answer records? Give me their first names.",
    "answer": "SELECT DISTINCT T1.FirstName, T3.LastName FROM Students AS T1 INNER JOIN Questions AS T2 ON T1.Student_ID = T2.Question_ID INNER JOIN Questions AS T3 ON T2.Exam_ID = T3.Exam_ID ORDER BY COUNT(T3.Question_Text) DESC</sql>"
  },
  {
    "id": 217,
    "db_id": "online_exams",
    "question": "What is the most common valid answer text?",
    "answer": "SELECT T2.valid_answer_text FROM Valid_Answers AS T1 INNER JOIN Questions AS T2 ON T1.Question_ID = T2.Question_ID WHERE T1.Valid_Answer_Text IN ( SELECT T1.Question_Text FROM Questions AS T1 INNER JOIN Exams AS T2 ON T1.Exam_ID = T2.Exam_ID WHERE SUBSTR(T1.`Answer_Text`, 0,"
  },
  {
    "id": 218,
    "db_id": "online_exams",
    "question": "Find the valid answer text that appeared most frequently.",
    "answer": "SELECT T3.valid_answer_text FROM Valid_Answers AS T1 INNER JOIN Questions AS T2 ON T1.Question_ID = T2.Question_ID WHERE T1.Valid_Answer_Text IN ( SELECT MAX(T2.Valid_Answer_Text) FROM Valid_Answers AS T3 INNER JOIN Questions AS T4 ON T2.Question_ID = T4.Question_ID GROUP BY T2.Question_ID"
  },
  {
    "id": 219,
    "db_id": "online_exams",
    "question": "List the last names of the students whose gender is not \"M\".",
    "answer": "SELECT DISTINCT T1.Last_Name, T1.FirstName FROM Students AS T1 INNER JOIN Questions AS T2 ON T1.Student_ID = T2.Question_ID WHERE T2.Type_of_Question_Code != 'Q' AND T2.Subject_Code LIKE '%M%' ORDER BY T2.Question_Name NOT LIKE '%M%');</sql>"
  },
  {
    "id": 220,
    "db_id": "online_exams",
    "question": "What are the last names of the students with gender other than \"M\"?",
    "answer": "SELECT DISTINCT T1.Last_Name FROM Student AS T1 INNER JOIN Exams AS T2 ON T1.Student_ID = T2.Exam_ID WHERE T2.Question_Code LIKE '%Gender%' AND T1.<gender__FULL_NAME IS NULL</sql>"
  },
  {
    "id": 221,
    "db_id": "online_exams",
    "question": "List each gender and the corresponding number of students.",
    "answer": "SELECT DISTINCT T1.gender, SUM(T3.Gender) AS num FROM Questions AS T1 INNER JOIN Students AS T2 ON T1.Student_ID = T2.STUDENT_ID WHERE T2.Name = 'male' GROUP BY T1.gender ORDER BY T1.num DESC LIMIT 1</sql>\n<question>Calculate the number of female and male students.</question>\n<sql>SELECT DISTINCT"
  },
  {
    "id": 222,
    "db_id": "online_exams",
    "question": "For each gender, return the gender code and the number of students who identify as that gender.",
    "answer": "SELECT DISTINCT T1.Gender_MFU , COUNT(T1.Question_Text) FROM Questions AS T1 INNER JOIN Student_Addresses AS T2 ON T1.Student_ID = T2.StuID GROUP BY T2.gender ORDER BY SUM(T1.Question_ID) DESC LIMIT 1</sql>"
  },
  {
    "id": 223,
    "db_id": "online_exams",
    "question": "List the last names of the students whose gender is \"F\" or \"M\".",
    "answer": "SELECT DISTINCT T1.Last_Name, T2.FirstName FROM Students AS T1 INNER JOIN Valid_Answers AS T2 ON T1.Student_ID = T2.Question_ID WHERE T1.Gender = 'F' ORDER BY T2.Valid_Answer_Text LIMIT 1</sql>"
  },
  {
    "id": 224,
    "db_id": "online_exams",
    "question": "Which students identify their gender as \"F\" or \"M\"? Give me their last names.",
    "answer": "SELECT DISTINCT T1.Last_Name, T2.FirstName FROM Questions AS T1 INNER JOIN Valid_Answers AS T2 ON T1.Question_ID = T2.Question_ID WHERE T2.Gender_MFU  = 'F'</sql>"
  },
  {
    "id": 225,
    "db_id": "online_exams",
    "question": "List the first names of the students who do not have any answers.",
    "answer": "SELECT DISTINCT T1.FirstName, T2.LastName FROM Questions AS T1 INNER JOIN Valid_Answers AS T2 ON T1.Question_ID = T2.Question_ID WHERE T2.Valid_Answer_Text IS NULL GROUP BY T1.FirstName, T2.LastName ORDER BY COUNT(T1.FirstName) INTERSECT \n    SELECT DISTINCT First_name FROM students WHERE student_address IS NULL LIMIT "
  },
  {
    "id": 226,
    "db_id": "online_exams",
    "question": "Which students do not have any answers? Find their first names.",
    "answer": "SELECT DISTINCT T1.FirstName, T3.LastName FROM Students AS T1 INNER JOIN Valid_Answers AS T2 ON T1.Student_ID = T2.Question_ID WHERE T2.Question_Text IS NOT NULL ORDER BY T2.Valid_Answer_Text</sql>"
  },
  {
    "id": 227,
    "db_id": "online_exams",
    "question": "Show the student answer texts that received both \"Normal\" and \"Absent\" as comments.",
    "answer": "SELECT DISTINCT T1.Question_Text FROM Questions AS T1 INNER JOIN Valid_Answers AS T2 ON T1.Question_ID = T2.Question_ID WHERE T2.`Valid Answer` IS NULL AND T2.`Valid Answer Text` IN ('Normal', 'Absent') GROUP BY T2.`Question_ID`, T1.`First_Name`, T1.`Last_Name` ORDER BY COUNT(T1.Question_"
  },
  {
    "id": 228,
    "db_id": "online_exams",
    "question": "Which student answer texts were given both \"Normal\" and \"Absent\" as comments?",
    "answer": "SELECT DISTINCT T1.Question_Text FROM Questions AS T1 INNER JOIN Valid_Answers AS T2 ON T1.Question_ID = T2.Question_ID WHERE T2.`Valid Answer` IS NULL AND T2.`Absent` IN ('Normal', 'Absent') ORDER BY T2.Possible_Answer_Text</sql>"
  },
  {
    "id": 229,
    "db_id": "online_exams",
    "question": "Show the types of questions that have at least three questions.",
    "answer": "SELECT DISTINCT T1.Question_Type, COUNT(T2.Question_ID) FROM Questions AS T1 INNER JOIN Exams AS T2 ON T1.Question_ID = T2.Exam_ID GROUP BY T1.Question_ID ORDER BY COUNT(T2.Question_ID) DESC LIMIT 3</sql>"
  },
  {
    "id": 230,
    "db_id": "online_exams",
    "question": "Which types of questions have 3 or more questions? Return the questions type code.",
    "answer": "SELECT QuestionType, SUM(QuestionType) FROM Questions GROUP BY QuestionType ORDER BY COUNT(QuestionType) DESC LIMIT 1</sql>"
  },
  {
    "id": 231,
    "db_id": "online_exams",
    "question": "Show all information on students.",
    "answer": "SELECT T3.FirstName, T1.LastName, T1.GenderMFU FROM Questions AS T1 INNER JOIN Students AS T2 ON T1.Student_ID = T2.StuID INNER JOIN Valid_Answers AS T3 ON T1.Question_ID = T3.Question_ID WHERE T2.FirstName != 'J' ORDER BY T1.LastName</sql>"
  },
  {
    "id": 232,
    "db_id": "online_exams",
    "question": "What is al the available information of each student?",
    "answer": "SELECT DISTINCT T1.FirstName, T3.LastName FROM Students AS T1 INNER JOIN Questions AS T2 ON T1.Student_ID = T2.Question_ID INNER JOIN Questions AS T3 ON T2.Exam_ID = T3.Exam_ID GROUP BY T1.Full_name ORDER BY COUNT(T2.Question) DESC LIMIT 3</sql>"
  },
  {
    "id": 233,
    "db_id": "customers_and_orders",
    "question": "How many addresses do we have?",
    "answer": "SELECT COUNT(T2.address_id) FROM Addresses AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.product_type_code = 'company' AND T2.customer_name = 'Amy S.'</sql>"
  },
  {
    "id": 234,
    "db_id": "customers_and_orders",
    "question": "Count the number of addresses.",
    "answer": "SELECT COUNT(T1.address_details) FROM Addresses AS T1 INNER JOIN Customers AS T2 ON T1.address_id = T2.customer_id WHERE T2.payment_method_code = 'credit_card'</sql>"
  },
  {
    "id": 235,
    "db_id": "customers_and_orders",
    "question": "List all address ids and address details.",
    "answer": "SELECT DISTINCT T2.address_id, T1.address_details FROM Addresses AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.address_details IS NOT NULL ORDER BY T1.address_details LIMIT 3</sql>"
  },
  {
    "id": 236,
    "db_id": "customers_and_orders",
    "question": "What are all the address ids and address details?",
    "answer": "SELECT DISTINCT T2.address_id, T1.address_details FROM Addresses AS T1 INNER JOIN Customers AS T2 ON T1.address_id = T2.address_id WHERE T2.customer_number IS NOT NULL ORDER BY T2.customer_phone</sql>"
  },
  {
    "id": 237,
    "db_id": "customers_and_orders",
    "question": "How many products do we have?",
    "answer": "SELECT COUNT(T2.product_name), T1.customer_address FROM address AS T1 INNER JOIN customers AS T2 ON T1.customer_id = T2.customer_id INNER JOIN `Order_Items` AS T3 ON T2.address_id = T3.order_item_id WHERE T2.payment_method_code LIKE 'Electricity%' ORDER BY COUNT(T3.product_name) DESC LIMIT 1</sql"
  },
  {
    "id": 238,
    "db_id": "customers_and_orders",
    "question": "Count the number of products.",
    "answer": "SELECT COUNT(DISTINCT T1.product_name), COUNT(DISTINCT T2.order_item_id) FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.Product_id INNER JOIN Customers AS T3 ON T3.customer_id = T2.customer_id ORDER BY T2.order_quantity DESC LIMIT 1</sql>"
  },
  {
    "id": 239,
    "db_id": "customers_and_orders",
    "question": "Show all product ids, product type codes, and product name.",
    "answer": "SELECT T1.product_id, T2.product_type_code, T3.`product_name` FROM products AS T1 INNER JOIN addresses AS T2 ON T1.address_id = T2.address_id INNER JOIN address AS T3 ON T2.address_id = T3.address_id GROUP BY T1.product_id ORDER BY COUNT(T1.product_type_code) DESC LIMIT 1</sql>"
  },
  {
    "id": 240,
    "db_id": "customers_and_orders",
    "question": "What are the ids, type codes, and names for all products?",
    "answer": "SELECT T1.product_id, T2.`type_code`, T3.name FROM Products AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id INNER JOIN Customers AS T3 ON T3.customer_id = T1.customer_id WHERE T3.payment_method_code != 'card' AND strftime(T3.`order_date`, GETDATE()) BETWEEN "
  },
  {
    "id": 241,
    "db_id": "customers_and_orders",
    "question": "What is the price for the product with name Monitor?",
    "answer": "SELECT DISTINCT T2.price FROM Products AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.product_name = 'Monitor' AND T2.customer_phone = '' AND T2.payment_method_code = 'creditcard'</sql>"
  },
  {
    "id": 242,
    "db_id": "customers_and_orders",
    "question": "Give the price of the Monitor product.",
    "answer": "SELECT DISTINCT T1.product_price, T2.product_name FROM Products AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.product_type_code = 'MONITOR'</sql>"
  },
  {
    "id": 243,
    "db_id": "customers_and_orders",
    "question": "Show the minimum, average, maximum price for all products.",
    "answer": "SELECT CAST(SUM(T2.price * T1.`order_quantity`) AS DECIMAL) / COUNT(DISTINCT T2.product_id), AVG(T3.product_name), AVG(T4.`product_name`) FROM `Order_Items` AS T1 INNER JOIN Products AS T2 ON T1.product_id = T2.product_id ORDER BY T1.order_quantity DESC LIMIT 1</"
  },
  {
    "id": 244,
    "db_id": "customers_and_orders",
    "question": "What are the minimum, average, and maximum prices across all products?",
    "answer": "SELECT DISTINCT SUM(T1.price), AVG(T2.Price), MAX(T2.Price) FROM `Order_Items` AS T1 INNER JOIN Products AS T2 ON T1.product_id = T2.`Product_id` GROUP BY T1.order_item_id ORDER BY sum(`T1.price`) - avg(T1.price), sum(max(T1.price)) DESC LIMIT 3</sql"
  },
  {
    "id": 245,
    "db_id": "customers_and_orders",
    "question": "What is the average price for products with type Clothes?",
    "answer": "SELECT CAST(SUM(CASE WHEN T2.`type_code` = 'CLOTHES' THEN product_price ELSE NULL END) AS REAL) / COUNT(T1.product_id) FROM `Order_Items` AS T1 INNER JOIN Addresses AS T2 ON T1.order_item_id = T2.address_id ORDER BY T2.address_details = 'qk976700835'</sql"
  },
  {
    "id": 246,
    "db_id": "customers_and_orders",
    "question": "Return the average price of Clothes.",
    "answer": "SELECT CAST(SUM(T2.price) AS DECIMAL), CAST('%' AS T2.`total_price`) / COUNT(T1.customer_id) FROM Customer_Orders AS T1 INNER JOIN Products AS T2 ON T1.order_id = T2.product_id GROUP BY T1.customer_number, T1.customer_name ORDER BY SUM(CASE WHEN T2.`price` > 90 THEN CA"
  },
  {
    "id": 247,
    "db_id": "customers_and_orders",
    "question": "How many hardware type products do we have?",
    "answer": "SELECT COUNT(DISTINCT T1.product_name) FROM Products AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE product_type_code = 'HARDWARE' AND product_name = 'Hardware'</sql>"
  },
  {
    "id": 248,
    "db_id": "customers_and_orders",
    "question": "Count the number of products of the type Hardware.",
    "answer": "SELECT COUNT(DISTINCT T2.product_name), COUNT(DISTINCT T2.product_type_code) FROM Products AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE t1.product_type_code IN ('Hardware') AND t1.customer_number = '185'</sql>"
  },
  {
    "id": 249,
    "db_id": "customers_and_orders",
    "question": "Show all product names with price higher than the average.",
    "answer": "SELECT DISTINCT T2.product_name FROM ( SELECT AVG(T3.order_price) AS avg, SUM(T1.product_price) AS total, T2.product_id FROM Customers AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.payment_method_code != 'card' GROUP BY T2.product_name ) AS T3 ORDER BY T"
  },
  {
    "id": 250,
    "db_id": "customers_and_orders",
    "question": "What are the names of products that have a price above the average for all products.",
    "answer": "SELECT DISTINCT T2.product_name FROM Order_Items AS T1 INNER JOIN Products AS T2 ON T1.order_item_id = T2.product_id WHERE (T2.`price` >  ( SELECT AVG(T1.product_price) - ( SELECT COUNT(T2.customer_number) FROM Customers AS T3 INNER JOIN Addresses AS T4 ON T3.address_id = T4.address_id"
  },
  {
    "id": 251,
    "db_id": "customers_and_orders",
    "question": "Show all hardware product names with price higher than the average price of hardware type products.",
    "answer": "SELECT DISTINCT T2.product_name FROM ( SELECT CAST(SUM(T3.`price`) AS REAL) * 100 / COUNT(DISTINCT t2.Product_id) AS avg, SUM(CASE WHEN t3.type = 'HARDWARE' THEN T2.product_price END) AS total FROM Order_Items AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2."
  },
  {
    "id": 252,
    "db_id": "customers_and_orders",
    "question": "What are the names of Hardware product with prices above the average price of Hardware products.",
    "answer": "SELECT DISTINCT T2.product_name FROM Customer_Orders AS T1 INNER JOIN Products AS T2 ON T1.customer_id = T2.product_id WHERE T2.product_price > ( SELECT AVG(T2.product_price) FROM Products AS T2 WHERE T2.product_type_code = 'hardware' ) ORDER BY T1.order_quantity DESC LIMIT 1</sql>"
  },
  {
    "id": 253,
    "db_id": "customers_and_orders",
    "question": "What is the name of the most expensive product with type Clothes?",
    "answer": "SELECT DISTINCT T2.product_name FROM Products AS T1 INNER JOIN Addresses AS T2 ON T1.product_id = T2.address_id WHERE T1.type_code = 'Clothes' GROUP BY T2.ADDRESS_ID ORDER BY SUM(T3.`order_quantity` INTEGER) DESC LIMIT 1</sql>"
  },
  {
    "id": 254,
    "db_id": "customers_and_orders",
    "question": "Give the name of the most expensive Clothes product.",
    "answer": "SELECT DISTINCT T1.product_name FROM Products AS T1 INNER JOIN Customers AS T2 ON T1.product_id = T2.customer_id ORDER BY T2.customer_number DESC LIMIT 1</sql>"
  },
  {
    "id": 255,
    "db_id": "customers_and_orders",
    "question": "What is the product id and product name for the cheapest Hardware type product?",
    "answer": "SELECT DISTINCT T2.product_name FROM ( SELECT CAST(T2.`Product_Price` AS REAL) - 1095683476000 AS pow FROM `Order_Items` WHERE ORDER_ITEM_ID = 'order_item_id_6' AND order_quantity = 1 GROUP BY product_name ORDER BY price LIMIT 1 ) T1 INNER JOIN Products AS T2 ON T1.product"
  },
  {
    "id": 256,
    "db_id": "customers_and_orders",
    "question": "Give the id and name of the cheapest Hardware product.",
    "answer": "SELECT DISTINCT T1.product_name , T2.`Product Name`, strftime('%J', T2.order_date) AS `Date` FROM Products AS T1 INNER JOIN Orders AS T2 ON T1.product_id = T2.order_item_id GROUP BY T1.product_price ORDER BY T1.`Product Price` DESC LIMIT 1</sql>"
  },
  {
    "id": 257,
    "db_id": "customers_and_orders",
    "question": "List all product names in descending order of price.",
    "answer": "SELECT T1.product_name FROM Products AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.`price` DESC LIMIT 1</sql>"
  },
  {
    "id": 258,
    "db_id": "customers_and_orders",
    "question": "What are the names of the products, sorted by descending price?",
    "answer": "SELECT DISTINCT T2.product_name FROM Customer_Orders AS T1 INNER JOIN Products AS T2 ON T1.customer_id = T2.product_id ORDER BY T1.`order_price` DESC LIMIT 1</sql>"
  },
  {
    "id": 259,
    "db_id": "customers_and_orders",
    "question": "Show all hardware type products in ascending order of price.",
    "answer": "SELECT T1.product_name, T2.`price`, 1 AS total FROM Products AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id ORDER BY T2.`price` DESC</sql>"
  },
  {
    "id": 260,
    "db_id": "customers_and_orders",
    "question": "What are the names of all Hardware products, sorted by price ascending?",
    "answer": "SELECT T1.product_name FROM Products AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id ORDER BY T1.`product_price` ASC LIMIT 1</sql>"
  },
  {
    "id": 261,
    "db_id": "customers_and_orders",
    "question": "List all product type codes and the number of products in each type.",
    "answer": "SELECT DISTINCT T2.product_type_code, COUNT(T1.`Product Type Code`) FROM ( SELECT DISTINCT T3.`Product Type Code`, SUM(`quantity`) AS num , `Amount` FROM Products AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.product_name = 'Customers' GROUP BY product_type_code ) AS T3 ORDER BY T3.`"
  },
  {
    "id": 262,
    "db_id": "customers_and_orders",
    "question": "How many products are there for each product type?",
    "answer": "SELECT T1.product_type_code, SUM(T2.quantity) AS total , T3.name FROM ( SELECT T1.`product_type_code`, COUNT(`products`) AS qnt UNION ALL SELECT T1.product_type_code, t1.customer_number , NULL UNION all SELECT T1.product_type_code, t3.name FROM ( SELECT T2.`product_name`, SUM(CASE WHEN t2.`quantity` > "
  },
  {
    "id": 263,
    "db_id": "customers_and_orders",
    "question": "Show all product type codes and the average price for each type.",
    "answer": "SELECT DISTINCT T2.product_type_code, SUM(T1.price), AVG(T2.product_type_code) FROM `Order_Items` AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T2.customer_name LIKE 'John%' GROUP BY T1.product_type_code ORDER BY SUM(t2.price) DESC LIMIT 1</sql>"
  },
  {
    "id": 264,
    "db_id": "customers_and_orders",
    "question": "What is the average price of products for each product type?",
    "answer": "SELECT AVG(T2.price), T3.product_type_code, T2.product_name FROM Products AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id INNER JOIN Customers AS T3 ON T1.customer_id = T3.customer_id GROUP BY T1.`product_type_code`, T3.product_name ORDER BY COUNT(T2.product_type_"
  },
  {
    "id": 265,
    "db_id": "customers_and_orders",
    "question": "What are the product type code with at least two products?",
    "answer": "SELECT T1.product_type_code FROM Products AS T1 INNER JOIN `Order_Items` AS T2 ON T1.product_id = T2.order_item_id WHERE T1.product_price BETWEEN 0 AND ( SELECT MAX(T2.product_type_code) FROM Products AS T1 INNER JOIN `Order_Items` AS T2 ON T1.product_id = T2.order_item_id"
  },
  {
    "id": 266,
    "db_id": "customers_and_orders",
    "question": "Give the product type codes of product types that have two or more products.",
    "answer": "SELECT T1.product_type_code, T2.product_name FROM Customers AS T1 INNER JOIN Products AS T2 ON T1.customer_id = T2.customer_id INNER JOIN Addresses AS T3 ON T3.address_id = T2.address_id WHERE T1.customer_number IN ( SELECT DISTINCT T2.product_type_code FROM `Addresses` AS T2 INNER JOIN Products AS T3"
  },
  {
    "id": 267,
    "db_id": "customers_and_orders",
    "question": "What is the product type code with most number of products?",
    "answer": "SELECT DISTINCT T2.product_type_code FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.order_item_id ORDER BY T2.total_quantity DESC LIMIT 1</sql>"
  },
  {
    "id": 268,
    "db_id": "customers_and_orders",
    "question": "What is the most frequent product type code?",
    "answer": "SELECT DISTINCT T2.product_type_code FROM Addresses AS T1 INNER JOIN Products AS T2 ON T1.address_id = T2.product_id WHERE T2.name LIKE '%Product%'\"%' ORDER BY T1.address_details DESC LIMIT 1</sql>"
  },
  {
    "id": 269,
    "db_id": "customers_and_orders",
    "question": "How many customers do we have?",
    "answer": "SELECT COUNT(DISTINCT T1.customer_id) FROM Customers AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.customer_name = 'John Doe' GROUP BY T1.customer_id ORDER BY COUNT(T1.customer_number) DESC LIMIT 1</sql>"
  },
  {
    "id": 270,
    "db_id": "customers_and_orders",
    "question": "Count the number of customers.",
    "answer": "SELECT COUNT(customer_id) FROM Customers WHERE customer_number = '17' LIMIT 1</sql>"
  },
  {
    "id": 271,
    "db_id": "customers_and_orders",
    "question": "Show all customer ids and customer names.",
    "answer": "SELECT T1.customer_id, T2.customer_name FROM Customers AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id INNER JOIN products AS T3 ON T1.product_id = T3.product_id WHERE T2.customer_phone IS NOT NULL AND T2.customer_email IS NOT NULL GROUP BY T2.customer_name ORDER BY COUNT(T2.customer_number)"
  },
  {
    "id": 272,
    "db_id": "customers_and_orders",
    "question": "What are the ids and names of all customers?",
    "answer": "SELECT T1.customer_name, T2.customer_address FROM Customers AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T1.customer_id ORDER BY T2.customer_phone, T2.customer_number DESC LIMIT 1</sql>"
  },
  {
    "id": 273,
    "db_id": "customers_and_orders",
    "question": "What is the customer address, customer phone, and customer email for Jeromy?",
    "answer": "SELECT DISTINCT T2.address_details, T3.`customer_phone`, T2.customer_email FROM Customer_Orders AS T1 INNER JOIN Addresses AS T2 ON T1.customer_id = T2.address_id WHERE T3.customer_name = 'Jeromy'</sql>"
  },
  {
    "id": 274,
    "db_id": "customers_and_orders",
    "question": "Give the address, phone, and email for customers with the name Jeromy.",
    "answer": "SELECT DISTINCT T2.address_details AS 'address', T1.phone, T1.email FROM Customers AS T1 INNER JOIN Addresses AS T2 ON T1.customer_id = T2.address_id WHERE T2.product_name = 'Jeromy'</sql>"
  },
  {
    "id": 275,
    "db_id": "customers_and_orders",
    "question": "Show all payment method codes and the number of customers in each code.",
    "answer": "SELECT DISTINCT T2.payment_method_code, COUNT(T1.`customer_number`) FROM Customer_Orders AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T2.`payment_method_code` ORDER BY t1.order_id</sql>"
  },
  {
    "id": 276,
    "db_id": "customers_and_orders",
    "question": "How many customers use each payment method?",
    "answer": "SELECT SUM(T1.payment_method_code), T2.customer_name FROM `Addresses` AS T1 INNER JOIN `Customer_Orders` AS T2 ON T1.address_id = T2.order_id WHERE T1.address_details LIKE '%' ORDER BY T1.customer_number ASC</sql>"
  },
  {
    "id": 277,
    "db_id": "customers_and_orders",
    "question": "What is the payment method code used by most number of customers?",
    "answer": "SELECT DISTINCT T2.payment_method_code FROM Order_Items AS T1 INNER JOIN Addresses AS T2 ON T1.order_item_id = T2.address_id WHERE strftime('%J', T2.customer_address) IN ( SELECT strftime('%J', T2.customer_address) FROM Customers ) GROUP BY t2.payment_method_code ORDER BY COUNT(T1.order_item_id"
  },
  {
    "id": 278,
    "db_id": "customers_and_orders",
    "question": "Give the code of the payment method that is most commonly used.",
    "answer": "SELECT T2.payment_method_code, MAX(T3.order_item_id) FROM Order_Items AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.`product_type_code` IN ('shipping', 'credit card') AND strftime('%Y %m %d') LIKE '%%' GROUP BY T1.order_item_id ORDER BY COUNT(T3"
  },
  {
    "id": 279,
    "db_id": "customers_and_orders",
    "question": "Show all customer names with the  payment method code used by least number of customers.",
    "answer": "SELECT DISTINCT T2.customer_name FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.order_item_id ORDER BY COUNT(T2.product_id) LIMIT 1</sql>"
  },
  {
    "id": 280,
    "db_id": "customers_and_orders",
    "question": "What are the names of customers who use the least common payment method?",
    "answer": "SELECT DISTINCT T2.customer_name FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.order_item_id ORDER BY T1.payment_method_code LIMIT 2</sql>"
  },
  {
    "id": 281,
    "db_id": "customers_and_orders",
    "question": "What is the payment method and customer number for customer named Jeromy?",
    "answer": "SELECT DISTINCT T2.customer_number, T1.`payment_method_code` FROM Customer_Orders AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.`customer_name` = 'Jeromy' AND T2.customer_type_code = 'PB9748920'</sql>"
  },
  {
    "id": 282,
    "db_id": "customers_and_orders",
    "question": "Give the payment method code and customer number corresponding to the customer named Jeromy.",
    "answer": "SELECT DISTINCT T2.payment_method_code, T1.customer_number FROM Customer_Orders AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.order_item_id = '5643038' AND T2.customer_name = 'Jeromy'</sql>"
  },
  {
    "id": 283,
    "db_id": "customers_and_orders",
    "question": "What are the distinct payment methods used by customers?",
    "answer": "SELECT DISTINCT T2.payment_method FROM Customer_Orders AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T2.address_details LIKE '%bank%' ORDER BY T2.`customer_phone` DESC LIMIT 3</sql>"
  },
  {
    "id": 284,
    "db_id": "customers_and_orders",
    "question": "Give the different payment method codes that customers use.",
    "answer": "SELECT T1.payment_method_code, strftime('%J', T2.order_date), T2.customer_number FROM `Order_Items` AS T1 INNER JOIN addresses AS T2 ON T1.order_item_id = T2.address_id WHERE T2.`customer_phone` IN ( SELECT DISTINCT T1.customer_phone, strftime('%J', T2.order_date) FROM `Customer_"
  },
  {
    "id": 285,
    "db_id": "customers_and_orders",
    "question": "Show the id and the product type for all products, order by product name.",
    "answer": "SELECT DISTINCT T1.product_id , T2.product_type_code FROM Products AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_name, t1.product_name</sql>"
  },
  {
    "id": 286,
    "db_id": "customers_and_orders",
    "question": "What are the ids and product types for all products, sorted alphabetically by product name?",
    "answer": "SELECT T1.product_id, T2.`product_type_code`, strftime('%J', T2.order_date), strftime('%Y', T2.order_date) AS order_year FROM `Product` AS T1 INNER JOIN `Order_Items` AS T2 ON T1.product_id = T2.`product_id` WHERE T1.`product_name` LIKE '%(%j%)' ORDER BY strftime"
  },
  {
    "id": 287,
    "db_id": "customers_and_orders",
    "question": "What is the product type with least number of products?",
    "answer": "SELECT DISTINCT T2.product_type_code FROM Products AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY ( SELECT NULL, COUNT(T1.product_id) AS product_num FROM Customer_Orders AS T1 INNER JOIN Order_Items AS T2 ON T2.order_item_id = T1.order_item_id WHERE T2.order_status_"
  },
  {
    "id": 288,
    "db_id": "customers_and_orders",
    "question": "What is the code of the product type that is least common?",
    "answer": "SELECT T1.product_type_code FROM products AS T1 INNER JOIN address_items AS T2 ON T1.product_id = T2.order_item_id GROUP BY T2.address_details ORDER BY COUNT(T2.order_description) LIMIT 3</sql>"
  },
  {
    "id": 289,
    "db_id": "customers_and_orders",
    "question": "How many customer orders do we have?",
    "answer": "SELECT COUNT(DISTINCT T1.customer_id) FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.order_item_id GROUP BY T1.customer_id ORDER BY COUNT(DISTINCT T1.order_items.order_id) DESC LIMIT 1</sql>"
  },
  {
    "id": 290,
    "db_id": "customers_and_orders",
    "question": "Count the number of customer orders.",
    "answer": "SELECT COUNT(T1.customer_id), SUM(T2.order_quantity) FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = 'John Doe' GROUP BY T1.customer_number ORDER BY COUNT(T1.customer_id) DESC LIMIT 1</sql>"
  },
  {
    "id": 291,
    "db_id": "customers_and_orders",
    "question": "Show the order ids, order dates, and order status codes for all orders by customer Jeromy.",
    "answer": "SELECT DISTINCT T2.order_item_id, T1.order_date FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = 'Jeromy' ORDER BY T1.order_quantity DESC</sql>"
  },
  {
    "id": 292,
    "db_id": "customers_and_orders",
    "question": "What were the ids, dates, and status codes for orders made by Jeromy?",
    "answer": "SELECT DISTINCT T2.order_item_id, T1.order_date AS order_date , T2.order_status_code FROM Customer_Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_items IN ( SELECT DISTINCT T1.order_item_id, T2.order_date , T2.order_status_code FROM"
  },
  {
    "id": 293,
    "db_id": "customers_and_orders",
    "question": "Show all customer names, ids and the number of orders by each customer.",
    "answer": "SELECT DISTINCT T1.customer_name, T2.customer_id , COUNT(T3.order_item_id) FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.customer_id INNER JOIN Customer_Orders AS T3 ON T1.customer_id = T3.customer_id WHERE T3.customer_number IS NULL GROUP BY T1.customer_name, T2"
  },
  {
    "id": 294,
    "db_id": "customers_and_orders",
    "question": "What are the names, ids, and number of orders made for each customer?",
    "answer": "SELECT DISTINCT T1.customer_name , SUM(T2.order_quantity) FROM Customer_Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.customer_number ORDER BY T2.customer_name, T2.customer_address</sql>"
  },
  {
    "id": 295,
    "db_id": "customers_and_orders",
    "question": "What is the customer id, name, phone, and email for the customer with most orders?",
    "answer": "SELECT DISTINCT T2.customer_id , T1.customer_name AS first_name FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.order_item_id ORDER BY COUNT(T2.order_item_id) DESC LIMIT 1</sql>"
  },
  {
    "id": 296,
    "db_id": "customers_and_orders",
    "question": "Give the id, name, phone, and email corresponding to the customer who made the most orders.",
    "answer": "SELECT DISTINCT T1.customer_id , T2.customer_name AS phone FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.order_item_id ORDER BY T1.customer_number DESC LIMIT 1</sql>"
  },
  {
    "id": 297,
    "db_id": "customers_and_orders",
    "question": "Show all order status and the number of orders in each status.",
    "answer": "SELECT DISTINCT T2.order_status, COUNT(T1.order_item_id) FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.order_id GROUP BY t2.ORDER_STATUS ORDER BY count(DISTINCT t2.order_item_id) DESC LIMIT 1</sql>"
  },
  {
    "id": 298,
    "db_id": "customers_and_orders",
    "question": "How many orders have each order status code?",
    "answer": "SELECT SUM(SUM(CASE WHEN T2.status = 'Complete' THEN 1 ELSE NULL END)) AS num FROM ( SELECT DISTINCT T2.order_status_code , COUNT(T3.`order_item_id`) AS num, SUM(DISTINCT T3.`customer_number`, `customer_name`), T1.customer_address , T2.customer_phone, strftime('%J', T1.order_date) AS order"
  },
  {
    "id": 299,
    "db_id": "customers_and_orders",
    "question": "What is the order status code that is most common?",
    "answer": "SELECT DISTINCT T2.order_status FROM Customer_Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.customer_id WHERE T1.`order_item_id` IN ( SELECT MAX(DISTINCT T2.order_status ) FROM Order_Items GROUP BY T2.order_items )</sql>"
  },
  {
    "id": 300,
    "db_id": "customers_and_orders",
    "question": "Give the order status code that is most frequent across customer orders.",
    "answer": "SELECT DISTINCT T2.order_status_code FROM ( SELECT T1.order_item_id, COUNT(T2.order_item_id) AS num FROM Customer_Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_items LIKE '%ORDER%' GROUP BY T2.order_item_id ORDER BY COUNT(T1.order_item_id"
  },
  {
    "id": 301,
    "db_id": "customers_and_orders",
    "question": "How many customers do not have an order?",
    "answer": "SELECT COUNT(T1.customer_id) FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.order_item_id WHERE T2.`order_status` = 'pending' AND T1.payment_method_code != '' AND T1.customer_phone != ''</sql>"
  },
  {
    "id": 302,
    "db_id": "customers_and_orders",
    "question": "Count the number of customers who have not made an order.",
    "answer": "SELECT COUNT(customer_id) FROM Customers WHERE customer_name = 'No products ordered' AND customer_address IS NULL</sql>"
  },
  {
    "id": 303,
    "db_id": "customers_and_orders",
    "question": "Show all product names without an order.",
    "answer": "SELECT T1.product_name FROM Addresses AS T1 INNER JOIN Customers AS T2 ON T1.address_id = T2.address_id WHERE T2.payment_method_code != 'credit card' AND T2.`order_details` IS NULL</sql>"
  },
  {
    "id": 304,
    "db_id": "customers_and_orders",
    "question": "What are the names of products that have not been ordered?",
    "answer": "SELECT T1.product_name FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.order_item_id WHERE T2.order_status_code != 'Ordered' AND NOT T2.`order_quantity` IS NULL</sql>"
  },
  {
    "id": 305,
    "db_id": "customers_and_orders",
    "question": "How many products named Monitor have been ordered?",
    "answer": "SELECT COUNT(T2.product_name) FROM Customer_Orders AS T1 INNER JOIN Products AS T2 ON T1.order_id = T2.product_id WHERE T2.name = 'Monitor' AND T1.customer_id = 1 GROUP BY T2.name ORDER BY COUNT(T1.order_item_id) DESC LIMIT 0</sql>"
  },
  {
    "id": 306,
    "db_id": "customers_and_orders",
    "question": "What is the total number of Monitor products that have been ordered?",
    "answer": "SELECT COUNT(T1.product_name), SUM(T2.order_quantity) FROM Order_Items AS T1 INNER JOIN Products AS T2 ON T1.order_item_id = T2.product_id WHERE T1.customer_address IS NULL AND T2.product_name IN ('Monitor') GROUP BY T1.product_name ORDER BY COUNT(T1.order_quantity) DESC LIMIT 1</sql>"
  },
  {
    "id": 307,
    "db_id": "customers_and_orders",
    "question": "How many customers have ordered the product named Monitor?",
    "answer": "SELECT COUNT(DISTINCT T1.customer_name) FROM Customers AS T1 INNER JOIN Products AS T2 ON T1.customer_id = T2.product_id WHERE T2.product_name = 'Monitor' ORDER BY T2.product_name</sql>"
  },
  {
    "id": 308,
    "db_id": "customers_and_orders",
    "question": "Count the number of different customers who have bought a Monitor Product.",
    "answer": "SELECT COUNT(DISTINCT T1.customer_id) FROM Customers AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T2.`product_name` = 'Monitor' GROUP BY T1.customer_id ORDER BY COUNT(T1.customer_id) DESC LIMIT 1</sql>"
  },
  {
    "id": 309,
    "db_id": "customers_and_orders",
    "question": "How many customers have an order?",
    "answer": "SELECT COUNT(DISTINCT T1.customer_id) FROM Customer_Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_item_id = T2.order_item_id WHERE T1.order_date IS '2018-10-05' AND T1.order_status_code LIKE '%completed%' GROUP BY T2.product_id ORDER BY COUNT(DISTINCT T1.customer"
  },
  {
    "id": 310,
    "db_id": "customers_and_orders",
    "question": "Count the number of differnt customers who have made an order.",
    "answer": "SELECT COUNT(DISTINCT T1.customer_id), COUNT(T2.`order_item_id`) FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.order_item_id ORDER BY count(DISTINCT t3.`order_item_id`) DESC LIMIT 5</sql>"
  },
  {
    "id": 311,
    "db_id": "customers_and_orders",
    "question": "Show all customer ids without an order.",
    "answer": "SELECT T1.customer_id FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.order_item_id WHERE T2.ORDER_STATUS IS NULL AND T2.order_id IS NOT IN ( SELECT DISTINCT T1.order_id FROM Customer_Orders )</sql>"
  },
  {
    "id": 312,
    "db_id": "customers_and_orders",
    "question": "What are the ids of customers who have not made an order?",
    "answer": "SELECT T2.customer_id FROM Customer_Orders AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.payment_method_code IS NULL AND T1.order_status != 'completed'</sql>"
  },
  {
    "id": 313,
    "db_id": "customers_and_orders",
    "question": "Show all the order dates and ids of the orders with quantity of any product larger than 6 or with more than 3 products.",
    "answer": "SELECT DISTINCT T2.order_date, T1.order_item_id FROM Customer_Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_item_id = T2.order_item_id WHERE T2.product_quantity > 3 AND strftime('%Y', T1.order_date) BETWEEN '2018-01' AND '2019-01"
  },
  {
    "id": 314,
    "db_id": "customers_and_orders",
    "question": "What are the order ids and corresponding order dates for orders with a quantity greater than 6 or consisting of more than 3 products?",
    "answer": "SELECT DISTINCT T2.order_item_id, SUM(T1.`order_quantity`) FROM Customer_Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.customer_number ORDER BY SUM(SUM(T1.ORDER_QUANTITY)) > ( SELECT MAX(COUNT(`T2.order_quantity`)) FROM Customers WHERE customer_name = 'Customer"
  },
  {
    "id": 315,
    "db_id": "region_building",
    "question": "How many buildings are there?",
    "answer": "SELECT COUNT(T1.Building_ID), T2.Name FROM \"building AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T2.Name ORDER BY COUNT(T1.Building_ID) DESC LIMIT 1</sql>"
  },
  {
    "id": 316,
    "db_id": "region_building",
    "question": "Count the number of buildings.",
    "answer": "SELECT COUNT(T1.Building_ID), T2.Name FROM \"building AS T1 INNER JOIN region AS T2 ON T1.Building_ID = T2.Region_ID GROUP BY T2.Region_ID ORDER BY SUM(CASE WHEN T2.Name = 'All buildings') - COUNT(T1.Building_ID) DESC LIMIT 1</sql>"
  },
  {
    "id": 317,
    "db_id": "region_building",
    "question": "List the names of buildings in ascending order of number of stories.",
    "answer": "SELECT DISTINCT T2.Name FROM \"region\" AS T1 INNER JOIN 'building' AS T2 ON T1.Region_ID = T2.Building_ID ORDER BY T1.number_of_stories DESC LIMIT 1</sql>"
  },
  {
    "id": 318,
    "db_id": "region_building",
    "question": "What is the list of building names, sorted by the number of stories of each building in ascending order?",
    "answer": "SELECT DISTINCT T2.Name FROM \"region\" AS T1 INNER JOIN `building` AS T2 ON T1.Region_ID = T2.Building_ID ORDER BY T1.Stories DESC LIMIT 1</sql>"
  },
  {
    "id": 319,
    "db_id": "region_building",
    "question": "List the addresses of buildings in descending order of building completion year.",
    "answer": "SELECT DISTINCT T2.address FROM \"region\" AS T1 INNER JOIN `building` AS T2 ON T1.Region_ID = T2.Building_ID ORDER BY T1.completion_year DESC</sql>"
  },
  {
    "id": 320,
    "db_id": "region_building",
    "question": "Sort the buildings in descending order of building completion year, and return the building addresses.",
    "answer": "SELECT DISTINCT T2.address FROM \"region\" AS T1 INNER JOIN buildings AS T2 ON T1.Region_ID = T2.Building_ID ORDER BY STRFTIME('%Y', T2.Completed_Year) DESC LIMIT 1</sql>"
  },
  {
    "id": 321,
    "db_id": "region_building",
    "question": "What is the maximum number of stories of buildings not completed in 1980?",
    "answer": "SELECT SUM(T2.number_of_stories) FROM \"region\" AS T1 INNER JOIN \"building\" AS T2 ON T1.Region_ID = T2.Region_ID WHERE SUBSTR(T1.Completed_Year, 3) != '1980' AND strftime('%J', T2.Date_built) < '2015-03-26'</sql>"
  },
  {
    "id": 322,
    "db_id": "region_building",
    "question": "Among the buildings not completed in 1980, what is the maximum number of stories?",
    "answer": "SELECT SUM(COUNT(\"Stories\")) FROM \"region\" WHERE MAX(T2.`Completed_Year`) BETWEEN 1975 AND 2013 GROUP BY COUNT(DISTINCT T2.Name) ORDER BY COUNT(T2.`Completed_Year`) DESC LIMIT 1</sql>"
  },
  {
    "id": 323,
    "db_id": "region_building",
    "question": "What is the average population for all regions?",
    "answer": "SELECT AVG(T2.population), T1.Region_ID FROM ( SELECT T1.\"Capital\", SUM(CASE WHEN T1.\"Population > 500 THEN 1 ELSE -1 END) AS sum , T2 AS T3 ORDER BY T1.\"Name\" DESC LIMIT 1 ) AS T4 INNER JOIN \"region\" AS T1 ON T2.Region_ID = T1.Region_ID GROUP BY T1.Region_ID"
  },
  {
    "id": 324,
    "db_id": "region_building",
    "question": "Compute the average population of a region.",
    "answer": "SELECT AVG(T2.population), SUM(T3.Population) FROM 'region' AS T1 INNER JOIN `building` AS T2 ON T1.Region_ID = T2.Building_ID WHERE T1.name = 'avgpop' GROUP BY T1.region_id ORDER BY sum(T2.population), T3.Population DESC LIMIT 1</sql>"
  },
  {
    "id": 325,
    "db_id": "region_building",
    "question": "What are the names of regions in ascending alphabetical order?",
    "answer": "SELECT DISTINCT T2.Name FROM \"region\" AS T1 INNER JOIN `building` AS T2 ON T1.Region_ID = T2.Building_ID ORDER BY T1.Capital ASC</sql>"
  },
  {
    "id": 326,
    "db_id": "region_building",
    "question": "List the names of regions in alphabetical order.",
    "answer": "SELECT DISTINCT T2.Name FROM \"region\" AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID ORDER BY T2.Name IN ( T1.Capital, T1.Address )</sql>"
  },
  {
    "id": 327,
    "db_id": "region_building",
    "question": "What are the capitals of the regions with area bigger than 10000?",
    "answer": "SELECT DISTINCT T2.capital FROM region AS T1 INNER JOIN building AS T2 ON T1.region_id = T2.Region_ID WHERE T1.Area > 10000</sql>"
  },
  {
    "id": 328,
    "db_id": "region_building",
    "question": "Give me the capitals of the regions whose area is larger than 10000.",
    "answer": "SELECT T3.Name FROM \"region\" AS T1 INNER JOIN \"building\" AS T2 ON T1.Region_ID = T2.Building_ID WHERE T2.Capital BETWEEN 10000 AND 10500</sql>"
  },
  {
    "id": 329,
    "db_id": "region_building",
    "question": "List the capital of the region with the largest population.",
    "answer": "SELECT T1.capital FROM \"region\" AS T1 INNER JOIN building AS T2 ON T1.Region_ID = T2.Region_ID ORDER BY T1.population DESC LIMIT 1</sql>"
  },
  {
    "id": 330,
    "db_id": "region_building",
    "question": "Which region has the largest population? Give me the capital of the region.",
    "answer": "SELECT T1.capital FROM \"region\" AS T1 INNER JOIN \"building\" AS T2 ON T1.Region_ID = T2.Building_ID ORDER BY T1.population DESC LIMIT 1</sql>"
  },
  {
    "id": 331,
    "db_id": "region_building",
    "question": "List the names of the regions with the top 5 largest areas.",
    "answer": "SELECT DISTINCT T2.name FROM \"region\" AS T1 INNER JOIN buildings AS T2 ON T1.Region_ID = T2.Building_ID ORDER BY (T2.Area > 500) DESC LIMIT 5</sql>"
  },
  {
    "id": 332,
    "db_id": "region_building",
    "question": "What are the names of the 5 largest regions in terms of area?",
    "answer": "SELECT DISTINCT T2.Name FROM \"region\" AS T1 INNER JOIN `building` AS T2 ON T1.Region_ID = T2.Building_ID GROUP BY T1.Name ORDER BY COUNT(T1.Area) DESC LIMIT 5</sql>"
  },
  {
    "id": 333,
    "db_id": "region_building",
    "question": "Show the names of buildings and the names of regions they are in.",
    "answer": "SELECT DISTINCT T2.Name FROM \"region\" AS T1 INNER JOIN `building` AS T2 ON T1.Region_ID = T2.Building_ID ORDER BY T2.name</sql>"
  },
  {
    "id": 334,
    "db_id": "region_building",
    "question": "For each building, return the name of the building and the name of the region it belongs to.",
    "answer": "SELECT DISTINCT T2.Name, T3.Region_ID FROM \"building\" AS T1 INNER JOIN \"region\" AS T2 ON T1.Building_ID = T2.Region_ID WHERE T1.Name = 'city'</sql>"
  },
  {
    "id": 335,
    "db_id": "region_building",
    "question": "Show the names of regions that have more than one building.",
    "answer": "SELECT DISTINCT T2.Name FROM \"region\" AS T1 INNER JOIN `building` AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T2.Region_ID HAVING COUNT(T2.Building_ID) > 1</sql>"
  },
  {
    "id": 336,
    "db_id": "region_building",
    "question": "Which regions have more than one building? Give me the names of the regions.",
    "answer": "SELECT DISTINCT T2.Name FROM \"region\" AS T1 INNER JOIN building AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T2.Region_ID HAVING COUNT(T2.Building_ID) > 1</sql>"
  },
  {
    "id": 337,
    "db_id": "region_building",
    "question": "Show the capital of the region that has the most buildings.",
    "answer": "SELECT T1.capital FROM \"region\" AS T1 INNER JOIN 'building' AS T2 ON T1.Region_ID = T2.Region_ID ORDER BY COUNT(T2.Building_ID) DESC LIMIT 1</sql>"
  },
  {
    "id": 338,
    "db_id": "region_building",
    "question": "Which region has the largest number of buildings? Show me the capital of the region.",
    "answer": "SELECT T1.capital FROM \"region\" AS T1 INNER JOIN building AS T2 ON T1.Region_ID = T2.Region_ID ORDER BY T2.Building_ID DESC LIMIT 1</sql>"
  },
  {
    "id": 339,
    "db_id": "region_building",
    "question": "Show addresses of buildings and the capitals of regions they are in.",
    "answer": "SELECT DISTINCT T2.address FROM region AS T1 INNER JOIN building AS T2 ON T1.Region_ID = T2.Building_ID WHERE T1.name = 'CITY OF MADRAS'</sql>"
  },
  {
    "id": 340,
    "db_id": "region_building",
    "question": "For each building, return the address of the building and the name of the region it belongs to.",
    "answer": "SELECT DISTINCT T2.Address, T3.Name FROM \"region\" AS T1 INNER JOIN \"building\" AS T2 ON T1.Region_ID = T2.Building_ID GROUP BY T1.Region_ID ORDER BY T1.Region_ID</sql>"
  },
  {
    "id": 341,
    "db_id": "region_building",
    "question": "Show the number of stories of buildings in the region with name \"Abruzzo\".",
    "answer": "SELECT COUNT(DISTINCT T2.Building_ID) FROM 'region' AS T1 INNER JOIN building AS T2 ON T1.Region_ID = T2.Region_ID WHERE T2.Name = 'Abruzzo' AND T2.Address = 'Rome, Lazio 048203'</sql>"
  },
  {
    "id": 342,
    "db_id": "region_building",
    "question": "Return the number of stories for each building in the region named \"Abruzzo\".",
    "answer": "SELECT SUM(IIF(T2.region = 'Abruzzo') - IIF(T1.name != 'building') * 2) FROM \"region\" AS T1 INNER JOIN \"region\" AS T2 ON T1.region_id = T2.Region_ID WHERE T2.name = 'abruzzo'</sql>"
  },
  {
    "id": 343,
    "db_id": "region_building",
    "question": "Please show each completion year and the number of buildings completed in that year.",
    "answer": "SELECT SUM(Completed_Year), COUNT(Building_ID) FROM \"region\" WHERE 'Completed Year' IS NULL GROUP BY SUM(Completed_Year) ORDER BY SUM(Completed_Year) DESC LIMIT 1</sql>"
  },
  {
    "id": 344,
    "db_id": "region_building",
    "question": "For completion year, return the year and the number of buildings completed.",
    "answer": "SELECT COUNT(DISTINCT T2.Building_ID), SUM(T2.Completed_Year) FROM \"region\" AS T1 INNER JOIN \"building\" AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T2.Region_ID ORDER BY T2.Completed_Year DESC</sql>"
  },
  {
    "id": 345,
    "db_id": "region_building",
    "question": "List the year in which the most buildings are completed.",
    "answer": "SELECT SUM(DATE('2013') - MAX(CASE WHEN 'Completed_Year' = '2015' THEN DATE('2014') END)) AS per FROM \"building\" ORDER BY COUNT(CASE WHEN 'Completed_Year' = 2016 THEN Date('2014') ELSE NULL END) DESC LIMIT 1</sql>"
  },
  {
    "id": 346,
    "db_id": "region_building",
    "question": "In which year did the most building constructions complete?",
    "answer": "SELECT T1.Year FROM \"region\" AS T1 INNER JOIN \"building\" AS T2 ON T1.Region_ID = T2.Building_ID ORDER BY COUNT(T2.Name) DESC LIMIT 1</sql>"
  },
  {
    "id": 347,
    "db_id": "region_building",
    "question": "List the names of regions that do not have any buildings.",
    "answer": "SELECT DISTINCT T2.name FROM \"region\" AS T1 INNER JOIN `building` AS T2 ON T1.Region_ID = T2.Region_ID WHERE T1.IsEmpty AND T2.No_of_Stories IS NULL GROUP BY T2.Name ORDER BY COUNT(T2.Building_ID) ASC LIMIT 1</sql>"
  },
  {
    "id": 348,
    "db_id": "region_building",
    "question": "What are the names of regions in which there are no buildings?",
    "answer": "SELECT DISTINCT T2.name FROM \"region\" AS T1 INNER JOIN `building` AS T2 ON T1.Region_ID = T2.Region_ID WHERE T1.Population > 0 AND T2.Name IS NOT NULL GROUP BY T2.Name ORDER BY COUNT(T2.Building_ID) = 1</sql>"
  },
  {
    "id": 349,
    "db_id": "region_building",
    "question": "Show the completed years shared by buildings with more than 20 stories and buildings with less than 15 stories.",
    "answer": "SELECT T1.Completed_Year FROM \"region\" AS T1 INNER JOIN \"building\" AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T1.Building_ID ORDER BY COUNT(T2.BUILDING) > 15 LIMIT 1</sql>"
  },
  {
    "id": 350,
    "db_id": "region_building",
    "question": "In which years did both buildings with more than 20 stories and buildings with less than 15 stories were completed?",
    "answer": "SELECT 'Completed' AS year FROM region WHERE COUNT(T2.Building_ID) > 2 AND T1.Number_of_Stories < 15 GROUP BY YEAR ORDER BY SUM(CASE WHEN T3.Capital = \"T4\" THEN 1 ELSE NULL END) - SUM(CASE WHEN T1.Number_of_Stories > 2 THEN 1 ELSE NULL END)) LIMIT 1</sql>"
  },
  {
    "id": 351,
    "db_id": "region_building",
    "question": "Show the distinct addresses of buildings.",
    "answer": "SELECT T1.address FROM \"building\" AS T1 INNER JOIN region AS T2 ON T1.Building_ID = T2.Region_ID ORDER BY T1.Region_ID, T1.Name</sql>"
  },
  {
    "id": 352,
    "db_id": "region_building",
    "question": "Give me a list of distinct building addresses.",
    "answer": "SELECT T1.address FROM \"building\" AS T1 INNER JOIN region AS T2 ON T1.Building_ID = T2.Region_ID GROUP BY T1.address ORDER BY COUNT(DISTINCT T2.name) DESC</sql>"
  },
  {
    "id": 353,
    "db_id": "region_building",
    "question": "Show the completed years of buildings in descending order of the number of stories.",
    "answer": "SELECT COUNT(T1.Building_ID) FROM \"region\" AS T1 INNER JOIN \"building\" AS T2 ON T1.Region_ID = T2.Region_ID ORDER BY T1.Number_of_Stories DESC</sql>"
  },
  {
    "id": 354,
    "db_id": "region_building",
    "question": "Sort buildings in descending order of the number of stories, and return their completion years.",
    "answer": "SELECT DISTINCT T2.Name FROM \"region\" AS T1 INNER JOIN `building` AS T2 ON T1.Region_ID = T2.Building_ID ORDER BY T1.Population DESC LIMIT 1</sql>"
  },
  {
    "id": 355,
    "db_id": "government_shift",
    "question": "List details of all the channel in alphabetical order .",
    "answer": "SELECT T1.Channel_Details FROM Customers AS T1 INNER JOIN channels AS T2 ON T1.Customer_ID = T2.Channel_ID ORDER BY T2.Channel_Name IN ( T1.Channel_Details )</sql>"
  },
  {
    "id": 356,
    "db_id": "government_shift",
    "question": "What is the list of channel details ordered alphabetically ?",
    "answer": "SELECT T1.Channel_Details, T2.Channel_details ORDER BY T2.Channel_name ASC FROM Customers AS T1 INNER JOIN channels AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Customer_and_Services_Details LIKE '%channel%'\"</sql>"
  },
  {
    "id": 357,
    "db_id": "government_shift",
    "question": "How many services are there?",
    "answer": "SELECT COUNT(Service_ID) FROM Customers AND Services WHERE Customers_and_Services = 'all'</sql>"
  },
  {
    "id": 358,
    "db_id": "government_shift",
    "question": "Count the number of services.",
    "answer": "SELECT COUNT(T1.Service_Details) FROM Customers AS T1 INNER JOIN Services AS T2 ON T1.Customer_ID = T2.Service_ID WHERE T1.customer_details IS NULL AND T1.customer_details IS NOT NULL AND T2.Service_Type = 'custom'</sql>"
  },
  {
    "id": 359,
    "db_id": "government_shift",
    "question": "What is the most common analytical layer type code?",
    "answer": "SELECT CASE T1.Status_Code FROM Customers AS T1 INNER JOIN Services_and_Channels AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Status_Code IN ('D', 'UA') GROUP BY T1.Service_ID ORDER BY COUNT(T2.Type_Code) DESC LIMIT 1</sql>"
  },
  {
    "id": 360,
    "db_id": "government_shift",
    "question": "Find the analytical layer type code that appears most often.",
    "answer": "SELECT DISTINCT T1.analytical_layer_type FROM Customers AS T1 INNER JOIN Channels AS T2 ON T1.Customer_ID = T2.Channel_ID GROUP BY T1.analytical_layer_type ORDER BY COUNT(T1.analytical_layer_type) DESC LIMIT 1</sql>"
  },
  {
    "id": 361,
    "db_id": "government_shift",
    "question": "Find all the services that has been used by the customer with details \"Hardy Kutch\".",
    "answer": "SELECT T2.Service_Details FROM Customers AS T1 INNER JOIN Customers AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Name = 'Hardy Kutch' AND T2.Name LIKE '% Hardy Kutch%'</sql>"
  },
  {
    "id": 362,
    "db_id": "government_shift",
    "question": "Which services were used by the customer with details \"Hardy Kutch\"? Give me the service details.",
    "answer": "SELECT T2.Service_Details FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Customer_Details = 'Hardy Kutch'</sql>"
  },
  {
    "id": 363,
    "db_id": "government_shift",
    "question": "Find the details of the services that have been used by more than 3 times .",
    "answer": "SELECT T2.Service_Details, COUNT(T1.Service_ID) AS num FROM Customers AS T1 INNER JOIN Services AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T2.Service_id ORDER BY sum(CASE WHEN COUNT(T2.service_details) > 3 THEN T2.service_details END) DESC LIMIT 1</sql>"
  },
  {
    "id": 364,
    "db_id": "government_shift",
    "question": "Which services were used by customers by more than 3 times? Give me the service details.",
    "answer": "SELECT DISTINCT T1.Service_Details, SUM(CASE WHEN T2.`Status_Code` = 'D' THEN T1.Customer_ID ELSE NULL END) AS NumOfCodes FROM Services AS T1 INNER JOIN Customers AS T2 ON T1.Service_ID = T2.Service_ID WHERE T1.Service_Details LIKE '%%' GROUP BY SUM(CASE WHEN T2.Status_Code = 'D' THEN T1.Customer_"
  },
  {
    "id": 365,
    "db_id": "government_shift",
    "question": "Find the details of the customer who has used services the most times.",
    "answer": "SELECT DISTINCT T1.Customer_Details, COUNT(T2.Service_ID) FROM Customers AS T1 INNER JOIN Services AS T2 ON T1.Customer_ID = T2.Service_ID GROUP BY T1.Customer_ID ORDER BY SUM(CASE WHEN T1.Status_Code = 'ACTUAL' THEN 1 ELSE -1 END) DESC LIMIT 1</sql>"
  },
  {
    "id": 366,
    "db_id": "government_shift",
    "question": "return the details of the customer with largest count of used services.",
    "answer": "SELECT T1.customer_details FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T2.customer_id ORDER BY COUNT(T2.Service_id) DESC LIMIT 1</sql>"
  },
  {
    "id": 367,
    "db_id": "government_shift",
    "question": "Find the name of the customer who has used the most types of services .",
    "answer": "SELECT DISTINCT T1.Customer_Details, SUM(CASE WHEN T2.Status_Code = 'UNAVAILABLE' THEN 1 ELSE 0 END) AS Total FROM Customers AS T1 INNER JOIN Services AS T2 ON T1.customer_id = T2.Service_ID GROUP BY T1.customer_details ORDER BY COUNT(T2.service_id) DESC LIMIT 1</sql>"
  },
  {
    "id": 368,
    "db_id": "government_shift",
    "question": "Which customer has used the most types of services ? Give me the customer details .",
    "answer": "SELECT T1.Customer_Details, SUM(T2.Services_and_Channels_Details) FROM Customers AS T1 INNER JOIN Services AS T2 ON T1.Customer_ID = T2.Service_ID GROUP BY T1.Customer_Id ORDER BY COUNT(T1.Customer_id) DESC LIMIT 1</sql>"
  },
  {
    "id": 369,
    "db_id": "government_shift",
    "question": "Find the details of the customer who has never used any services .",
    "answer": "SELECT T2.Service_Details FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Status_Code IS NULL AND T1.customer = 1 </sql>"
  },
  {
    "id": 370,
    "db_id": "government_shift",
    "question": "Which customers never used any services ? Give me the customer details .",
    "answer": "SELECT T2.customer_details FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Status_Code IS NULL GROUP BY T2.customer_id HAVING COUNT(T2.Service_Details) > 0 ORDER BY T2.customer_details LIMIT 1</sql>"
  },
  {
    "id": 371,
    "db_id": "government_shift",
    "question": "Find the details of the customers who have used the least-used service .",
    "answer": "SELECT T2.Customer_Details FROM Customers AS T1 INNER JOIN Channels AS T2 ON T1.Customer_ID = T2.Channel_ID ORDER BY T1.Service_Code LIMIT 0, 5</sql>"
  },
  {
    "id": 372,
    "db_id": "government_shift",
    "question": "Which customers used the least commonly-used service ? Give me the distinct customer details .",
    "answer": "SELECT T2.Customer_Details FROM Customers AS T1 INNER JOIN Services AS T2 ON T1.Customer_ID = T2.Service_ID GROUP BY T1.customer_id ORDER BY SUM(T1.Customer_Details) LIMIT 1, 5</sql>"
  },
  {
    "id": 373,
    "db_id": "government_shift",
    "question": "How many distinct customer and services details are there?",
    "answer": "SELECT DISTINCT T2.services, T3.service_details FROM Customers AS T1 INNER JOIN Channels AS T2 ON T1.Customer_ID = T2.Channel_id INNER JOIN Customers_and_Services AS T3 ON T3.Customer_ID = T1.customer_id WHERE T3.Service_ID IN (SELECT DISTINCT DISTINCT T1.Service_ID FROM Services AS T1 INNER JOIN Customers AS T"
  },
  {
    "id": 374,
    "db_id": "government_shift",
    "question": "Count the total number of available customers and services details.",
    "answer": "SELECT COUNT(T1.Customer_ID) FROM Customers AS T1 INNER JOIN Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Customer_Details IN ('Customer 4738549', 'Service 2')</sql>"
  },
  {
    "id": 375,
    "db_id": "government_shift",
    "question": "Find all the customers whose name contains \"Kutch\".",
    "answer": "SELECT T1.Customer_Name FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Channel_Details LIKE '%Kutch%'</sql>"
  },
  {
    "id": 376,
    "db_id": "government_shift",
    "question": "What are the details of the customers who have \"Kutch\" in part of their details?",
    "answer": "SELECT T1.Customer_Details, T2.Services_details FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Customer_details = 'KUCH'</sql>"
  },
  {
    "id": 377,
    "db_id": "government_shift",
    "question": "Find the name of all the services which either have been used by customer \"Hardy Kutch\" or have been rated as \"good\" in one of the customer interactions.",
    "answer": "SELECT DISTINCT T1.Service_Details FROM Customers AS T1 INNER JOIN Services AS T2 ON T1.Customer_ID = T2.Service_ID WHERE T2.ServiceName = 'Nitrogen oxide' AND strftime(date, 'Ymd') - strftime('%Y', T1.Customer_Date) BETWEEN 0 AND 57 GROUP BY T1.Service_Details ORDER BY COUNT(T"
  },
  {
    "id": 378,
    "db_id": "government_shift",
    "question": "Which services are used by the customer \"Hardy Kutch\" or are rated as \"good\" in a customer interaction? Give me the service details.",
    "answer": "SELECT DISTINCT T1.Services_details, T2.Status_code, T1.Service_ID FROM Customers AS T1 INNER JOIN Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.ServiceName = 'Apple TV' AND T2.Rating IS 'Good'</sql>"
  },
  {
    "id": 379,
    "db_id": "government_shift",
    "question": "Find the names of all the services which both have been used by customer \"Hardy Kutch\" and have been rated \"bad\" in one of the customer interactions.",
    "answer": "SELECT T1.Channel_Details, T2.Status_Code FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Customer_Name LIKE '%Hardy Kutch%' AND T2.Customer_Details = 'good' GROUP BY T1.Channel_Details ORDER BY T2.Service_Code INTERSECT SELECT T2.Service_Details FROM Custom"
  },
  {
    "id": 380,
    "db_id": "government_shift",
    "question": "Which services are both used by the customer \"Hardy Kutch\" and are rated as \"bad\" in a customer interaction? Give me the service details.",
    "answer": "SELECT DISTINCT T1.Services, T2.Service_Details FROM Customers AS T1 INNER JOIN Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Service_Code = 'bad' ORDER BY T2.Service_Code DESC LIMIT 1</sql>"
  },
  {
    "id": 381,
    "db_id": "government_shift",
    "question": "Find details of all the services that have interacted with `` 15 ij '' for the the channel details.",
    "answer": "SELECT T3.Channel_Details FROM Customers AS T1 INNER JOIN Channels AS T2 ON T1.Customer_ID = T2.Channel_ID WHERE T2.Status_Code IN ('success', 'fail') AND T2.Services LIKE '%%15 ij%' GROUP BY T3.Channel_Name ORDER BY COUNT(T2.Channel_Details) DESC LIMIT 1</sql>"
  },
  {
    "id": 382,
    "db_id": "government_shift",
    "question": "Give me the details of all the services that have interacted with the channel with detail \"15 ij\".",
    "answer": "SELECT T3.Channel_Details, T2.Services_details FROM Customers_and_Services AS T1 INNER JOIN Channels AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Service_ID LIKE '15 ij%'</sql>"
  },
  {
    "id": 383,
    "db_id": "government_shift",
    "question": "Find all the details of the customers who have been involved in an interaction with status `` Stuck '' and service and channel detail `` bad '' .",
    "answer": "SELECT T2.service, T1.Customer_Details FROM Customers AS T1 INNER JOIN Customer_Interactions AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Status_Code = 'Stuck' AND T1.Service_Name = 'bad' ORDER BY T2.status, T2.services_details</sql>"
  },
  {
    "id": 384,
    "db_id": "government_shift",
    "question": "Which customers have experienced status \"Stuck\" and service and channel detail \"bad\" in  an interaction? Give me the customer details.",
    "answer": "SELECT T1.Customer_Details, T2.Status_Code FROM Customers AS T1 INNER JOIN Customer_Interactions AS T2 ON T1.Customer_ID = T2.Customer_ID INNER JOIN Services AS T3 ON T1.Service_id = T3.Service_ID WHERE T1.Customer_Detail LIKE '%bad%' AND T3.Status_Code IS 'N/A' ORDER BY T2.Service_Details DESC LIMIT 1</"
  },
  {
    "id": 385,
    "db_id": "government_shift",
    "question": "How many integration platforms are successful?",
    "answer": "SELECT COUNT(DISTINCT T1.Platforms_name) FROM Customers AS T1 INNER JOIN Integration_Platforms AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Successful IN (1, 0) GROUP BY T1.Customer_Name ORDER BY COUNT(T2.Platforms_name) DESC LIMIT 3</sql>"
  },
  {
    "id": 386,
    "db_id": "government_shift",
    "question": "Count the number of integration platforms that have \"Success\" in the details.",
    "answer": "SELECT COUNT(DISTINCT T2.Customer_ID) FROM Customers AS T1 INNER JOIN Channels AS T2 ON T1.Customer_ID = T2.Channel_ID WHERE T2.Status_Code IN ('A', 'W') AND strftime('%J', T1.`Date`) BETWEEN '2013-08-06' AND '2014-08-31' GROUP BY T2"
  },
  {
    "id": 387,
    "db_id": "government_shift",
    "question": "List the details of all the customers who are associated with a failed integration platform .",
    "answer": "SELECT T1.Customer_Details FROM Customers AS T1 INNER JOIN Channels AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Channel_ID = 'FAILED'</sql>"
  },
  {
    "id": 388,
    "db_id": "government_shift",
    "question": "Which customers have integration platform details \"Fail\" in interactions? Give me the customer details.",
    "answer": "SELECT T2.Customer_Details FROM Customers AS T1 INNER JOIN Channels AS T2 ON T1.Customer_ID = T2.Channel_ID WHERE T2.IntegrationPlatformName = 'Fail'</sql>"
  },
  {
    "id": 389,
    "db_id": "government_shift",
    "question": "Which service ( s ) has never been used by any customer ? List their details .",
    "answer": "SELECT T1.Customer_Details, T2.Status_Code FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Service_ID != '' ORDER BY T2.Service_Details DESC LIMIT 1</sql>"
  },
  {
    "id": 390,
    "db_id": "government_shift",
    "question": "Find details of the services that no customer has ever used . Return the service details .",
    "answer": "SELECT T2.service_details FROM Customers AS T1 INNER JOIN Services AS T2 ON T1.Customer_ID = T2.Service_ID WHERE T1.customer IS NULL AND (T1.Status_Code <> 'NONE' OR T3.status_code != 'NONE')</sql>"
  },
  {
    "id": 391,
    "db_id": "government_shift",
    "question": "Find all the layer type codes with their corresponding usage count.",
    "answer": "SELECT T2.Code, SUM(T1.usage_count) FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Channel_Id IN ( SELECT DISTINCT T3.Channel_Name FROM Customers AS T3 INNER JOIN Services AS T4 ON T1.customer_id = T4.Customer_ID GROUP BY T2.Channel_Name ORDER"
  },
  {
    "id": 392,
    "db_id": "government_shift",
    "question": "For each analytical layer, return the analytical layer type code and the number of times it was used.",
    "answer": "SELECT DISTINCT T2.AnalyticalLayerTypeCode , COUNT(T2.analyticalLayerTypeID) FROM Customers AS T1 INNER JOIN Analytics AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T2.AnalyticalLayerTypeCode</sql>"
  },
  {
    "id": 393,
    "db_id": "government_shift",
    "question": "Find details of all the services that have been marked as `` unsatisfied '' in customers and services details .",
    "answer": "SELECT T2.services_details, T1.Status_Code FROM Customers AS T1 INNER JOIN Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.`STATUS_CODE` = 'unsatisfied' AND strftime('%J', T1.`TRIED_FOR`) != ''</sql>"
  },
  {
    "id": 394,
    "db_id": "government_shift",
    "question": "Which services have been rated as \"unsatisfied\" in customers and services details? Give me the service_details.",
    "answer": "SELECT T1.Service_Details FROM Customers AS T1 INNER JOIN Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Status_Code IS NULL AND strftime('%J', T2.`Date`) &lt; '2014-5'</sql>"
  },
  {
    "id": 395,
    "db_id": "vehicle_rent",
    "question": "How many vehicles do we have?",
    "answer": "SELECT COUNT(DISTINCT T1.vehicle_id) FROM Renting_history AS T1 INNER JOIN Vehicles AS T2 ON T1.customer_id = T2.Customer_id WHERE T2.name = 'GPS Vision'</sql>"
  },
  {
    "id": 396,
    "db_id": "vehicle_rent",
    "question": "Count the number of vehicles.",
    "answer": "SELECT COUNT(DISTINCT T1.vehicle_name) FROM Customers AS T1 INNER JOIN Vehicles AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(DISTINCT T1.vehicle_name) DESC LIMIT 1</sql>"
  },
  {
    "id": 397,
    "db_id": "vehicle_rent",
    "question": "Show names for all vehicles in descending order of model year.",
    "answer": "SELECT DISTINCT T1.name FROM Vehicles AS T1 INNER JOIN Discount AS T2 ON T1.vehicle_id = T2.id ORDER BY T2.Model_Year DESC</sql>"
  },
  {
    "id": 398,
    "db_id": "vehicle_rent",
    "question": "What are the names of all vehicles, ordered by model year descending?",
    "answer": "SELECT DISTINCT T1.name FROM Vehicles AS T1 INNER JOIN customers AS T2 ON T1.customer_id = T2.id ORDER BY T1.Model_year DESC LIMIT 1</sql>"
  },
  {
    "id": 399,
    "db_id": "vehicle_rent",
    "question": "List all distinct types of powertrain of vehicles.",
    "answer": "SELECT T1.Model_year, T2.model_name FROM Vehicles AS T1 INNER JOIN Discount AS T2 ON T1.vehicle_id = T2.vehicles_id WHERE T1.type IN ( SELECT DISTINCT T2.model_name FROM Customers AS T1 INNER JOIN Vehicles AS T2 ON T1.customer_id = T2.customer_id )</sql>"
  },
  {
    "id": 400,
    "db_id": "vehicle_rent",
    "question": "What are the different types of powertrains?",
    "answer": "SELECT DISTINCT T2.model_year FROM Vehicles AS T1 INNER JOIN Customers AS T2 ON T1.vehicle_id = T2.id INNER JOIN Renting_history AS T3 ON T1.name = T3.customer_id WHERE T3.Discount_ID IN ( SELECT DISTINCT T2.\"discount_id\" FROM Discount AS T4 INNER JOIN Vehicles AS T5 ON T4."
  },
  {
    "id": 401,
    "db_id": "vehicle_rent",
    "question": "Show name, type of powertrain, and annual fuel cost for all vehicles with model year 2013 or 2014.",
    "answer": "SELECT DISTINCT T1.name, T1.model_year FROM Vehicles AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id WHERE T2.model_year BETWEEN '2013' AND '2014' GROUP BY T1.name UNION ALL SELECT DISTINCT T1.name FROM Vehicles AS T1 INNER JOIN Renting_history"
  },
  {
    "id": 402,
    "db_id": "vehicle_rent",
    "question": "What are the names, types of powertrains, and yearly fuel costs for vehicles with model years in either 2013 2014?",
    "answer": "SELECT DISTINCT T2.name, T3.model_year, T5.type_of_powertrain FROM cars AS T1 INNER JOIN Renting_history AS T2 ON T2.vehicles_id = T1.id WHERE T1.model_year BETWEEN '2004' AND '2023' AND T3.year IS NULL AND T5.type_of_powertrain IN ('D"
  },
  {
    "id": 403,
    "db_id": "vehicle_rent",
    "question": "Show types of powertrain with vehicles both from 2014 and 2013.",
    "answer": "SELECT DISTINCT T2.model_year FROM Vehicles AS T1 INNER JOIN ( SELECT SUM(CASE WHEN T1.Model_year BETWEEN '2007' AND '2013' THEN T1.Id END ) / COUNT(T1.Id) FROM cars AS T2 INNER JOIN Vehicles AS T1 ON T1.Vehicle_id = T2.id WHERE CAST(( SELECT SUM(CASE WHEN T"
  },
  {
    "id": 404,
    "db_id": "vehicle_rent",
    "question": "What are the types of powertrains that have vehicles that were made in both 2013 and 2014?",
    "answer": "SELECT DISTINCT T2.model_year FROM Vehicles AS T1 INNER JOIN Customers AS T2 ON T1.vehicle_id = T2.id WHERE T1.Model_year BETWEEN '2008' AND '2014' AND T1.Year IN ( 2013 , 2014 ) GROUP BY T1.name HAVING COUNT(T1.vehicle_id"
  },
  {
    "id": 405,
    "db_id": "vehicle_rent",
    "question": "Show all types of powertrain and the number of vehicles in each type.",
    "answer": "SELECT DISTINCT T2.model_year, SUM(T1.type_of_powertrain), T2.num_vehicles FROM Vehicles AS T1 INNER JOIN ( SELECT t1.model_year , COUNT(T2.membership_credit) AS num FROM Discount AS T2 INNER JOIN Vehicles AS T3 ON T1.id = T3.Id WHERE T2.name LIKE '%Powertrain%'"
  },
  {
    "id": 406,
    "db_id": "vehicle_rent",
    "question": "How many vehicles have each type of powertrain?",
    "answer": "SELECT T1.model_year, SUM(CASE WHEN T2.Type_of_powertrain = 'I4' THEN 1 ELSE 0 END) AS total , T1.vehicles_id FROM \"Vehicles\" AS T1 INNER JOIN \"Discount\" AS T2 ON T1.vehicle_id = T2.id WHERE T1.model_year IN ('i3', 'ii', 'iii') GROUP BY T1"
  },
  {
    "id": 407,
    "db_id": "vehicle_rent",
    "question": "What is the type of powertrain with most number of vehicles.",
    "answer": "SELECT DISTINCT T2.model_year, T1.`type_of_powertrain`, COUNT(T2.name) FROM Vehicles AS T1 INNER JOIN Discount AS T2 ON T1.id = T2.VehicleId GROUP BY T2.model_year ORDER BY SUM(CASE WHEN DISTINCT T2.power_source_type IS NULL THEN 1 ELSE 0 END) DESC LIMIT 1</sql>"
  },
  {
    "id": 408,
    "db_id": "vehicle_rent",
    "question": "Which type of powertrain is most common?",
    "answer": "SELECT DISTINCT T2.model_year, T1.`type_of_powertrain` FROM ( SELECT DISTINCT T2.Model_year , T1.`Type_of_powertrain` AS `type_of_powertrain__2015`, 1724696948323040000 AS `cityfuel_economy_rate` FROM Vehicles AS T1"
  },
  {
    "id": 409,
    "db_id": "vehicle_rent",
    "question": "Show minimum, maximum, and average annual fuel cost for all vehicles.",
    "answer": "SELECT AVG(T2.total_fuel_cost), MAX(T3.total_fuel_cost), SUM(T1.price * T2.discount) AS avg FROM 'vehicles' AS T1 INNER JOIN rentalhistory AS T2 ON T1.vehicle_id = T2.vehicles_id WHERE T1.type_of_powertrain = 'hybrid' AND T3.model_year"
  },
  {
    "id": 410,
    "db_id": "vehicle_rent",
    "question": "What are the minimum, maximum, and average annual fuel costs across all vehicles?",
    "answer": "SELECT AVG(T2.total_fuel_cost), MAX(T3.total_fuel_cost), SUM(T1.membership_credit) AS total FROM cars AS T1 INNER JOIN vehicles AS T2 ON T1.id = T2.vehicles_id INNER JOIN discount AS T3 ON T2.ID = T3.customer_id GROUP BY T3.name ORDER BY SUM(T3.total_f"
  },
  {
    "id": 411,
    "db_id": "vehicle_rent",
    "question": "Show name and model year for vehicles with city fuel economy rate less than or equal to highway fuel economy rate.",
    "answer": "SELECT DISTINCT T1.name, T2.model_year FROM Vehicles AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id WHERE T1.city_fuel_economy_rate < 40 ORDER BY T2.model_year LIMIT 1</sql>"
  },
  {
    "id": 412,
    "db_id": "vehicle_rent",
    "question": "What are the names and model years for vehicles that have a city fuel economy rate less than or equal to its highway fuel economy rate?",
    "answer": "SELECT DISTINCT T1.name, T2.model_year FROM Vehicles AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id WHERE T2.city_fuel_economy_rate < ( SELECT SUM(T3.highway_fuel_economy_rate) FROM Renting_history AS T3 INNER JOIN Vehicle AS T4 ON T1"
  },
  {
    "id": 413,
    "db_id": "vehicle_rent",
    "question": "Show the type of powertrain with at least two vehicles, and the average annual fuel cost for vehicles in each such type.",
    "answer": "SELECT DISTINCT T2.model_year , SUM(T1.`Combined Fuel Economy Rate`) / COUNT(T1.`Vehicles`) AS avg FROM Vehicles AS T1 INNER JOIN Discount AS T2 ON T1.id = T2.vehicles_id GROUP BY T1.model_year, t2.name ORDER BY SUM(CASE WHEN t1.type IN ('Diesel', 'Fuel E"
  },
  {
    "id": 414,
    "db_id": "vehicle_rent",
    "question": "What are the types of powertrains for which there are two or more vehicles, and what are their average annual fuel costs?",
    "answer": "SELECT DISTINCT T2.model_year AS year , AVG(T2.fuel_economy_rate) FROM ( SELECT 'highway' AS t1 UNION ALL SELECT 'combined_fuel_economy_rate', 500000 FROM \"Vehicles\" WHERE `Discount` = 'Yes' AND T1.`city` = 'santaroes' GROUP BY DISTINCT t2.model_year"
  },
  {
    "id": 415,
    "db_id": "vehicle_rent",
    "question": "Show the name, age, membership credit for all customers?",
    "answer": "SELECT DISTINCT T1.name, T1.age FROM Customers AS T1 INNER JOIN ( SELECT id, MAX(T2.membership_credit), T1.id AS customerId FROM Customers AS T2 INNER JOIN vehicles AS T3 ON T1.customer_id = T3.Customer_ID GROUP BY T2.name, T1.id ) AS T1 ON T1.customer_id = T2.customer_id WHERE"
  },
  {
    "id": 416,
    "db_id": "vehicle_rent",
    "question": "What are the names, ages, and membership credits for all customers?",
    "answer": "SELECT DISTINCT T1.name, T2.age FROM Customers AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.Customer_id INNER JOIN Vehicles AS T3 ON T1.vehicles_id = T3.id ORDER BY T2.total_hours DESC LIMIT 1</sql>"
  },
  {
    "id": 417,
    "db_id": "vehicle_rent",
    "question": "Show the name and age of the customer with maximum membership credit.",
    "answer": "SELECT T2.name, T1.age FROM customers AS T1 INNER JOIN Renting_history AS T2 ON T1.customer_id = T2.customer_id ORDER BY max(T1.membership_credit) DESC LIMIT 1</sql>"
  },
  {
    "id": 418,
    "db_id": "vehicle_rent",
    "question": "What is the name and age of the customer with the most membership credit?",
    "answer": "SELECT DISTINCT T1.name, T1.age FROM Customers AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.Customer_id GROUP BY T1.name ORDER BY COUNT(T1.membership_credit) DESC LIMIT 1</sql>"
  },
  {
    "id": 419,
    "db_id": "vehicle_rent",
    "question": "What is the average age for customers with a membership credit above the average?",
    "answer": "SELECT CAST(SUM(CASE WHEN T1.age > T2.age THEN 0 ELSE NULL END)) AS avg , SUM(T3.membership_credit) / COUNT(DISTINCT T2.customer_id), strftime('%J', T1.DATE_TRUNC ('DATE') - 96448534) FROM (SELECT DISTINCT T1.age , SUM(T2.memb"
  },
  {
    "id": 420,
    "db_id": "vehicle_rent",
    "question": "Return the average age for customers who have membership above the average across all customers.",
    "answer": "SELECT CAST(SUM(CASE WHEN T1.age > AVG(T3.Age) THEN T2.name END) AS REAL) / COUNT(T1.name), T3.Id FROM Customers AS T1 INNER JOIN discounts_all AS T2 ON T1.id = T2.Customer_id WHERE T2.Membership_credit > (SELECT AVG(T3.Age) FROM customers AS T3 INNER JOIN"
  },
  {
    "id": 421,
    "db_id": "vehicle_rent",
    "question": "Show all information for all discounts.",
    "answer": "SELECT T2.name, T1.membership_credit, T1.year , SUM(T1.total_hours) AS total FROM Customers AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.customer_id WHERE T1.discount_id = '693' GROUP BY T2.name ORDER BY T1.year , SUM(T2.total_hours) DESC LIMIT"
  },
  {
    "id": 422,
    "db_id": "vehicle_rent",
    "question": "Return all information about discounts.",
    "answer": "SELECT T2.name, T1.membership_credit FROM Customers AS T1 INNER JOIN Discount AS T2 ON T1.id = T2.customer_id WHERE T2.name = 'Discount'</sql>"
  },
  {
    "id": 423,
    "db_id": "vehicle_rent",
    "question": "Show the name and total hours of renting for each vehicle.",
    "answer": "SELECT DISTINCT T1.name, SUM(T2.`total_hours`) AS sum FROM ( SELECT `Vehicles`.`vehicle_id`, SUM(`Total_Hours__F3058D67-2022C14E`), ROW_NUMBER() OVER (ORDER BY T1.name) FROM Customers AS T1 INNER JOIN vehicles AS T2 ON T1.customer_id = T2.ve"
  },
  {
    "id": 424,
    "db_id": "vehicle_rent",
    "question": "What are the names and total rental hours for each vehicle?",
    "answer": "SELECT DISTINCT T1.name, SUM(T2.`total_hours`) AS sum FROM ( SELECT 'vehicle_id', 0 AS id , SUM(membership_credit) AS total_hours FROM \"discount\" ) AS T1 INNER JOIN cars AS T2 ON T1.Vehicles_id = T2.ID GROUP BY T1.vehicles_id ORDER BY SUM(T2.`total_hours"
  },
  {
    "id": 425,
    "db_id": "vehicle_rent",
    "question": "Show the name of vehicles with no renting history.",
    "answer": "SELECT DISTINCT T1.name FROM Vehicles AS T1 INNER JOIN rentalhistory AS T2 ON T1.vehicle_id = T2.vehicles_id WHERE T1.membership_credit IS NULL AND T1.Model_year != 2021</sql>"
  },
  {
    "id": 426,
    "db_id": "vehicle_rent",
    "question": "What are the names of vehicles that have never been rented?",
    "answer": "SELECT DISTINCT T1.name FROM Vehicles AS T1 INNER JOIN renting_history AS T2 ON T1.vehicle_id = T2.vehicles_id WHERE T2.total_hours IS NULL LIMIT 1</sql>"
  },
  {
    "id": 427,
    "db_id": "vehicle_rent",
    "question": "Show the name of customer with at least two renting history records.",
    "answer": "SELECT DISTINCT T1.name FROM Customers AS T1 INNER JOIN Renting_history AS T2 ON T1.customer_id = T2.customer_id WHERE T2.total_hours > 2 GROUP BY T2.customer_id ORDER BY COUNT(T2.discount_id) HAVING COUNT(DISTINCT T2.name) >= 2</sql>"
  },
  {
    "id": 428,
    "db_id": "vehicle_rent",
    "question": "What are the names of customers who have two or more records of rental history?",
    "answer": "SELECT T1.name FROM Customers AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(T2.customer_id) LIMIT 2, 3</sql>"
  },
  {
    "id": 429,
    "db_id": "vehicle_rent",
    "question": "Show the name and model year of the vehicle with most number of renting history records.",
    "answer": "SELECT T1.name, T2.model_year FROM `renting_history` AS T1 INNER JOIN vehicles AS T2 ON T1.vehicles_id = T2.ID ORDER BY T1.total_hours DESC LIMIT 1</sql>"
  },
  {
    "id": 430,
    "db_id": "vehicle_rent",
    "question": "What is the name and model year of the vehicle which has been rented the most times?",
    "answer": "SELECT DISTINCT T1.name, T2.model_year FROM Vehicles AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id GROUP BY T1.id ORDER BY COUNT(T2.total_hours) DESC LIMIT 1</sql>"
  },
  {
    "id": 431,
    "db_id": "vehicle_rent",
    "question": "Show the vehicle name with a descending order of total hours of renting.",
    "answer": "SELECT DISTINCT T1.name FROM ( SELECT DISTINCT T2.model_year, SUM(T2.total_hours) AS total FROM Vehicles AS T1 INNER JOIN Renting_history AS T2 ON T2.vehicle_id = T1.vehicles_id WHERE T1.name LIKE '%Model %' ORDER BY SUM(T2.total_hours) DESC LIMIT 1</sql>"
  },
  {
    "id": 432,
    "db_id": "vehicle_rent",
    "question": "What are the names of vehicles, sorted descending by total hours of renting?",
    "answer": "SELECT DISTINCT T1.name FROM Renting_history AS T1 INNER JOIN Vehicles AS T2 ON T1.vehicle_id = T2.ID ORDER BY SUM(T2.total_hours) DESC</sql>"
  },
  {
    "id": 433,
    "db_id": "vehicle_rent",
    "question": "What is the discount name with most number of renting history records?",
    "answer": "SELECT DISTINCT T2.name FROM Renting_history AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.id WHERE T2.name IS NOT NULL GROUP BY T1.customer_id ORDER BY COUNT(T1.customer_id) DESC LIMIT 1</sql>"
  },
  {
    "id": 434,
    "db_id": "vehicle_rent",
    "question": "Return the name of the discount that corresponds to the most rental history records.",
    "answer": "SELECT DISTINCT T1.name FROM Renting_history AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.id ORDER BY T1.total_hours DESC LIMIT 1</sql>"
  },
  {
    "id": 435,
    "db_id": "vehicle_rent",
    "question": "Find the name and powertrain type of the cars that rented for more than 30 total hours.",
    "answer": "SELECT DISTINCT T1.name, T2.model_year FROM Vehicles AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.vehicle_id WHERE T2.total_hours > 30 ORDER BY T1.ID</sql>"
  },
  {
    "id": 436,
    "db_id": "vehicle_rent",
    "question": "What are the names and powertrain types of cars that have more than 30 total rental hours?",
    "answer": "SELECT DISTINCT T1.name, T2.model_year FROM Renting_history AS T1 INNER JOIN Vehicles AS T2 ON T1.vehicle_id = T2.id WHERE T1.total_hours > ( SELECT MAX(T2.total_hours) FROM Rental_history AS T3 INNER JOIN Vehicles AS T4 ON T1.customer_id = T4.id WHERE T3.model"
  },
  {
    "id": 437,
    "db_id": "vehicle_rent",
    "question": "Find the average city and highway fuel rates for cars with different powertrain types.",
    "answer": "SELECT AVG(T2.City), T2.Highway FROM vehicles AS T1 INNER JOIN rental_history AS T2 ON T1.vehicle_id = T2.ID WHERE T2.model_year BETWEEN 1976 AND 2014 ORDER BY T2.Combined_fuel_economy_rate DESC LIMIT 3</sql>"
  },
  {
    "id": 438,
    "db_id": "vehicle_rent",
    "question": "What are the average city fuel economy rate, average highway fuel economy rate for different types of powertrains?",
    "answer": "SELECT AVG(T2.fuel_economy_rate), T2.Highway_fuel_economy_rate FROM cars AS T1 INNER JOIN vehicles AS T2 ON T1.vehicles_id = T2.vehicles_id WHERE T1.type IN ('SUV', 'PHEV') GROUP BY t1.model_year, t2.FUEL_ECONOMY_RATE ORDER BY SUM"
  },
  {
    "id": 439,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the average amount of a student loan?",
    "answer": "SELECT AVG(T2.amount), T3.`event_type_description` FROM `addresses` AS T1 INNER JOIN Ref_Event_Types AS T2 ON T1.address_id = T2.event_type_code AND T2.`event_type_description` = 'Total amount of student loans received' GROUP BY T3, T1 ORDER BY T2.number DESC LIMIT 1</sql>"
  },
  {
    "id": 440,
    "db_id": "cre_Students_Information_Systems",
    "question": "Compute the average amount of student loans.",
    "answer": "SELECT AVG(T2.amount) FROM Addresses AS T1 INNER JOIN Transcripts AS T2 ON T1.address_id = T2.student_id WHERE T1.status = 'LOAN' AND T2.type_code = 'detention_type_c'</sql>"
  },
  {
    "id": 441,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the biographical data and student id for the students who take 2 or more classes and the students who have less than 2 detentions.",
    "answer": "SELECT DISTINCT T1.biographical_data, T1.student_details FROM Ref_Events AS T1 INNER JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T1.detention_type_c IN ( SELECT T2.detention_type_c FROM ( SELECT DISTINCT T1.`address_id`, SUM(T3.address_details) AS sum FROM Behaviour_Monitoring"
  },
  {
    "id": 442,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the biographical data and student id of the students who either took two or more classes and or have less than two detentions?",
    "answer": "SELECT DISTINCT T2.student_details, T1.`student_id`, T2.biographical_data FROM Behaviour_Monitoring AS T1 INNER JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T1.behaviour_monitoring_type = 'T3' AND strftime('%Y', T1.`transcript_details`) < strftime('%Y', T"
  },
  {
    "id": 443,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the details of the teachers who teach some class whose detail has the substring 'data' but do not teach a class whose detail contains the prefix 'net'",
    "answer": "SELECT DISTINCT T2.address_details, T1.`class_name`, T1.`attendance_pattern` FROM Ref_Address_Types AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.address_type_code IN ('net',) AND T1.address_type_description LIKE 'net%'</sql>"
  },
  {
    "id": 444,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which teachers teach a class that has the substring 'data' in its detail but do not teach a class that has prefix 'net' in its detail? Give me the teacher details.",
    "answer": "SELECT DISTINCT T1.address_details, T2.`detention_type_c` FROM Addresses AS T1 INNER JOIN Ref_Detention_Type AS T2 ON T1.address_id = T2.address_type_code WHERE strftime('%Y', T2.`detention_type_description`) LIKE '%data%' ORDER BY T1.address_details DESC LIMIT 1</sql>"
  },
  {
    "id": 445,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the biographical data of the students who never had a detention or student loan .",
    "answer": "SELECT DISTINCT T2.student_details FROM Behaviour_Monitoring AS T1 INNER JOIN Student AS T2 ON T1.student_id = T2.student_id WHERE T2.detention_type_c = '' OR T3.detention_type_c IS NULL ORDER BY T1.`address_id` DESC LIMIT 1</sql>"
  },
  {
    "id": 446,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students never had a detention or student loan ? Find their biographical data .",
    "answer": "SELECT DISTINCT T2.student_details, T1.`address_type_description`, T1.address_type_code FROM Student AS T1 INNER JOIN Addresses AS T2 ON T1.student_id = T2.student_id WHERE T2.address_type IN ('Education', 'Business', 'Government') AND (T1.behaviour_monitoring_details LIKE '%NO_DISTRICT%' OR T"
  },
  {
    "id": 447,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the loan amounts and loan dates of the students who have at least 2 achievements?",
    "answer": "SELECT T3.address_details, T1.`event_type_code`, t1.`achievement_type_description`, SUM(T3.loan_amount) / COUNT(DISTINCT T1.student_id), SUM(DATE(TIMESTAMP)) AS year FROM Ref_Events AS T1 INNER JOIN Ref_Addresses AS T2 ON T1.student_id = T2.`student_id` GROUP BY T1.address_details"
  },
  {
    "id": 448,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the amount and date of loan for the students who have two or more achievements.",
    "answer": "SELECT DISTINCT T2.achievement_type_description, SUM(CASE WHEN T1.`event_type_code` = 'A' THEN 1 ELSE NULL END) AS sum, T1.address_id FROM Ref_Event_Types AS T1 INNER JOIN Ref_Address_Types AS T2 ON T2.address_type_code = T1.address_type_description WHERE T2.address_type_c IN ('P', 'C"
  },
  {
    "id": 449,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the detail and id of the teacher who teaches the most courses.",
    "answer": "SELECT DISTINCT T2.teacher_id, T3.course_detail FROM Ref_Event_Types AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.event_type_code IN (T1.event_type_description) GROUP BY T2.teacher ORDER BY COUNT(T1.course_detail) DESC LIMIT 1</sql>"
  },
  {
    "id": 450,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the detail and id of the teacher who teaches the largest number of courses?",
    "answer": "SELECT DISTINCT T2.teacher_name, T3.course_description FROM Student AS T1 INNER JOIN Addresses AS T2 ON T1.student_id = T2.student_id WHERE T2.course_type IN ( SELECT DISTINCT course_type FROM Ref_Event_Types GROUP BY course_type ORDER BY COUNT(T1.course_details) DESC LIMIT 1 ) GROUP BY T3.course_description ORDER BY COUNT(T"
  },
  {
    "id": 451,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the distinct descriptions of all the detentions which have ever happened?",
    "answer": "SELECT T1.description FROM Addresses AS T1 INNER JOIN Ref_Achievement_Type AS T2 ON T1.address_id = T2.achievement_type_code WHERE T2.event_type_description IN ( SELECT DISTINCT T3.description FROM Behaviour_Monitoring AS T3 INNER JOIN Ref_Address_Types AS T4 ON T2.address_id = T4.address_id WHERE T1."
  },
  {
    "id": 452,
    "db_id": "cre_Students_Information_Systems",
    "question": "Return the distinct descriptions of all the detentions that have happened.",
    "answer": "SELECT T1.description FROM Behaviour_Monitoring AS T1 INNER JOIN Detention_Types AS T2 ON T1.behaviour_monitoring_id = T2.address_type_code WHERE T2.detention_type_c IN ( SELECT DISTINCT T3.description FROM Ref_Address_Types AS T3 INNER JOIN Detention_Type AS T4 ON T2.address_type_code = T4.address_"
  },
  {
    "id": 453,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the personal details and the address type descriptions of all the students.",
    "answer": "SELECT DISTINCT T2.address_type_description, T1.address_details FROM Addresses AS T1 INNER JOIN Ref_Address_Types AS T2 ON T1.address_id = T2.address_type_code WHERE T2.classification = 'Student' AND T2.`event_type_codes` IN ( SELECT DISTINCT `event_type_code`,  `achievement_type_description`,  `achievement_"
  },
  {
    "id": 454,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the personal details and the address type descriptions of each student?",
    "answer": "SELECT DISTINCT T2.address_details, T1.`address_type_description` FROM Ref_Address_Types AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T2.student_id IN ( SELECT T3.student_id FROM Behaviour_Monitoring AS T4 INNER JOIN Student AS T5 ON T5.`student_id` = T1.student_id WHERE T"
  },
  {
    "id": 455,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the the address details and the biographical information of the students.",
    "answer": "SELECT DISTINCT T2.address_details, T1.`student_details` FROM Behaviour_Monitoring AS T1 INNER JOIN Addresses AS T2 ON T1.behaviour_monitoring_id = T2.address_id WHERE T1.student_id IN ( SELECT DISTINCT `T3.student_id` FROM Ref_Event_Types AS T1 INNER JOIN Ref_Address_Types AS T2 ON T1."
  },
  {
    "id": 456,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the address details and biographical information of each student?",
    "answer": "SELECT DISTINCT T2.address_details, T1.`student_id`, T1.address_details FROM Addresses AS T1 INNER JOIN Ref_Address_Types AS T2 ON T1.address_id = T2.address_type_code INNER JOIN Behaviour_Monitoring AS T3 ON T2.behaviour_monitoring_id = T3.`transcript_id` WHERE T3.`student_details` = '"
  },
  {
    "id": 457,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the biographical data and the date of the transcript of all the students.",
    "answer": "SELECT DISTINCT T2.biographical_data, T3.date_of_transcript FROM Behaviour_Monitoring AS T1 INNER JOIN Transcripts AS T2 ON T1.`transcript_id` = T2.`transcript_id` INNER JOIN Addresses AS T3 ON T2.address_id = T3.address_id WHERE T3.student_id IS NOT NULL ORDER BY T1.`date_of_transcript"
  },
  {
    "id": 458,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the biographical data and the date of transcript issuance of each student?",
    "answer": "SELECT DISTINCT T2.student_details, T1.`date_of_transcript`, T3.`transcript_details` FROM Behaviour_Monitoring AS T1 INNER JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id WHERE T1.student_details LIKE '%birthdate%'</sql>"
  },
  {
    "id": 459,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many students got the most common result in the behavioral monitoring details? Also list the result details.",
    "answer": "SELECT SUM(T1.result), T2.description FROM Behaviour_Monitoring AS T1 INNER JOIN Ref_Detention_Type AS T2 ON T1.behaviour_monitoring_id = T2.detention_type_c GROUP BY T1.result ORDER BY T2.DETAILS DESC LIMIT 1</sql>"
  },
  {
    "id": 460,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the most common result in the behavioral monitoring details. What are the count and the details of this result?",
    "answer": "SELECT COUNT(DISTINCT T2.behaviour_monitoring_id), T1.address_details FROM Behaviour_Monitoring AS T1 INNER JOIN Ref_Address_Types AS T2 ON T1.address_type_code = T2.address_type_code ORDER BY COUNT(T1.behaviour_monitoring_id) DESC LIMIT 1</sql>"
  },
  {
    "id": 461,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students not only got the most common result but also got a result obtained by 3 students in behaviour monitoring? List the student's biographical data and details.",
    "answer": "SELECT DISTINCT T2.student_details, T1.`event_type_description` FROM ( SELECT DISTINCT T2.student_id , COUNT(T2.detention_type_c) AS num , SUM(CASE WHEN T3.`status_code = 'completed' THEN T1.behaviour_monitoring_details END) AS detention_result FROM `events` AS T1 INNER JOIN behaviour_monitoring AS T2"
  },
  {
    "id": 462,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical data and details of students who got not only the most common result but also a result that is obtained by 3 students in behaviour monitoring.",
    "answer": "SELECT DISTINCT T2.biographical_data, T2.details FROM Addresses AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.address_id = T2.student_id ORDER BY COUNT(T1.location) DESC LIMIT 3 GROUP BY T1.address_type_code ORDER BY SUM(CASE WHEN T2.status LIKE 'F' THEN t1.biographical_data END) INTERSECT SELECT"
  },
  {
    "id": 463,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students only got the most common result for his or her all behaviour monitoring details? List the students' biographical information.",
    "answer": "SELECT DISTINCT T2.student_details, T1.`address_type_description` FROM Addresses AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.address_id = T2.student_id GROUP BY T1.address_id ORDER BY COUNT(DISTINCT T2.`date_of_transcript`) DESC LIMIT 5</sql>"
  },
  {
    "id": 464,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the biographical information of the students who got the most common result for their behaviour monitoring details ?",
    "answer": "SELECT DISTINCT T2.student_details, T1.event_type_description FROM Behaviour_Monitoring AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id ORDER BY T1.`behaviour_monitoring_detail` DESC LIMIT 20</sql>"
  },
  {
    "id": 465,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students have gone through any event? List the students' biographical data and event date.",
    "answer": "SELECT DISTINCT T2.student_details, T1.`event_date` FROM Student AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id WHERE T2.`events_submitted` = 'Yes' ORDER BY T2.date DESC LIMIT 1</sql>"
  },
  {
    "id": 466,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical data and event date for students who participated in any events.",
    "answer": "SELECT DISTINCT T2.event_details, T1.`date_of_transcript`, T3.address_details FROM Behaviour_Monitoring AS T1 INNER JOIN Ref_Event_Types AS T2 ON T1.behaviour_monitoring_id = T2.event_type_code WHERE T2.event_type_description = 'events'</sql>"
  },
  {
    "id": 467,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many students have joined in the most common type of event? List the number, the event type and description.",
    "answer": "SELECT COUNT(DISTINCT T2.student_id) , T1.event_type_description FROM Addresses AS T1 INNER JOIN Ref_Event_Types AS T2 ON T1.address_id = T2.address_id ORDER BY T1.event_type_code DESC LIMIT 1</sql>"
  },
  {
    "id": 468,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the type of event the most students joined? Give me the number of students, and the event type code and description.",
    "answer": "SELECT DISTINCT T2.event_type_description, T1.event_type_code FROM Addresses AS T1 INNER JOIN Ref_Events AS T2 ON T1.address_id = T2.student_id WHERE T1.event_details LIKE '%Detention%' GROUP BY T1.address_type_code ORDER BY COUNT(T1.address_type_description) DESC LIMIT 1</sql>"
  },
  {
    "id": 469,
    "db_id": "cre_Students_Information_Systems",
    "question": "How are all the achievements described? List the achievement detail and the type description.",
    "answer": "SELECT DISTINCT T2.achievement_type_description, T1.`event_type_code`, T2.T3 FROM Behaviour_Monitoring AS T1 INNER JOIN Addresses AS T2 ON T1.behaviour_monitoring_id = T2.address_id WHERE T2.address_details LIKE '%:%' ORDER BY T1.`event_type_code` DESC LIMIT 1</sql>"
  },
  {
    "id": 470,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the achievement detail and the type description of each achievements?",
    "answer": "SELECT T1.achievement_type_description, T2.event_type_description FROM Addresses AS T1 INNER JOIN Ref_Achievement_Type AS T2 ON T1.address_id = T2.address_id WHERE T2.event_type_code IN ('problem', 'test') AND T1.address_details IN (T2.achievement_type_description, T2.event_type_description)</sql"
  },
  {
    "id": 471,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many teachers have taught a student who has not won any achievements?",
    "answer": "SELECT COUNT(DISTINCT T2.student_id), strftime('%J', T2.transcript_details.date_of_transcript) AS date FROM Ref_Achievement_Type AS T1 INNER JOIN Ref_Detention_Type AS T2 ON T1.event_type_code = T2.detention_type_c WHERE T2.student_id IN ( SELECT DISTINCT T1.student_id FROM Be"
  },
  {
    "id": 472,
    "db_id": "cre_Students_Information_Systems",
    "question": "Count the number of teachers who have taught students who have never won an achievement.",
    "answer": "SELECT COUNT(DISTINCT T2.teacher_id), SUM(CASE WHEN T3.`achievement_type_description` = 'WINNER' THEN 1 ELSE 0 END) AS cnt FROM Behaviour_Monitoring AS T1 INNER JOIN Addresses AS T2 ON T1.behaviour_monitoring_id = T2.address_id WHERE T1.transcript_details != '' GROUP BY T2.teacher"
  },
  {
    "id": 473,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the date of the transcripts and the transcript details.",
    "answer": "SELECT strftime('%J', T2.date_of_transcript) AS day, T1.event_type_description, T2.transcript_details FROM Student AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.`transcript_id` WHERE T2.date_of_transcript LIKE '%%T%'</sql>"
  },
  {
    "id": 474,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the date and detail of each transcript?",
    "answer": "SELECT DISTINCT T2.date, T3.transcript_details FROM Student AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.`transcript_id` WHERE T1.`course_type` = 'L10896' AND T1.`classroom_address_id` IN ( SELECT T1.address_id , NULL FROM Addresses INNER JOIN Behaviour_Monitoring"
  },
  {
    "id": 475,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the achievement type code, achievement details and the date of the achievements.",
    "answer": "SELECT DISTINCT T2.achievement_type_code, T1.`event_type_description`, T3.`date_of_transcript` FROM Behaviour_Monitoring AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id INNER JOIN Ref_Detention_Type AS T3 ON T1.student_id = T3.detention_type_c WHERE T2.event_"
  },
  {
    "id": 476,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the type code, details, and date of each achievement?",
    "answer": "SELECT DISTINCT T2.achievement_type_description, T1.`event_type_code`, T2.address_details FROM Addresses AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.address_id = T2.student_id WHERE T1.address_details BETWEEN '0' AND '94' GROUP BY T1.`event_type_code`, T1.achievement_type"
  },
  {
    "id": 477,
    "db_id": "cre_Students_Information_Systems",
    "question": "Show the detention start time and end time of the detentions.",
    "answer": "SELECT DISTINCT T2.starttime, T2.endtime FROM Behaviour_Monitoring AS T1 INNER JOIN Ref_Event_Types AS T2 ON T1.behaviour_monitoring_id = T2.`event_type_code` WHERE T1.student_id = 'sj14937' GROUP BY T2.event_type_description ORDER BY T2.starttime DESC, T2.endtime"
  },
  {
    "id": 478,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the starting time and ending time of each detention record?",
    "answer": "SELECT DISTINCT T2.starting_time, T1.ending_time FROM Student AS T1 INNER JOIN Addresses AS T2 ON T1.student_id = T2.student_id WHERE T2.address_type_code IN (REF_DETENTION) ORDER BY strftime('%H', T2.starting_time) , strftime('%H', T2.ending_time);</sql>"
  },
  {
    "id": 479,
    "db_id": "cre_Students_Information_Systems",
    "question": "Show the biographical information of the students whose details include the substring 'Suite'.",
    "answer": "SELECT DISTINCT T2.student_details, T1.address_type FROM Addresses AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.address_id = T2.address_id WHERE T1.address_detail LIKE '%Suite%'</sql>"
  },
  {
    "id": 480,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students have 'Suite' as a substring in their details? Give me their biographical information.",
    "answer": "SELECT DISTINCT T2.student_details FROM Behaviour_Monitoring AS T1 INNER JOIN Addresses AS T2 ON T1.behaviour_monitoring_id = T2.address_id WHERE T1.location = 'suite'</sql>"
  },
  {
    "id": 481,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the details for all the pairs of teachers and students who are in the same class.",
    "answer": "SELECT DISTINCT T2.address_details FROM Behaviour_Monitoring AS T1 INNER JOIN Addresses AS T2 ON T1.student_id = T2.student_id WHERE T1.teacher_id IN ( SELECT T3._Teacher_ID , 0 AS classroom_groupnum FROM Ref_Event_Types AS T1 INNER JOIN addresses AS T2 ON T1.address_id = T2.address_id"
  },
  {
    "id": 482,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the pairs of teachers and students who are in the same class? Give me the pairs of their details.",
    "answer": "SELECT DISTINCT T2.student_id, T1.teacher_details FROM Students AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id WHERE T1.school = 'staff' GROUP BY T1.Teacher_id ORDER BY T2.Student_Details</sql>"
  },
  {
    "id": 483,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many courses do teachers teach at most? Also find the id of the teacher who teaches the most.",
    "answer": "SELECT DISTINCT T2.course_id, T1.`student_id` FROM ( SELECT `T3`.course_id , COUNT(`T3`.`course_id`) AS num FROM Teachers AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T2.course_id ) AS T1, Ref_Event_Types AS `event_type_details`, T2 AS `Teach"
  },
  {
    "id": 484,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which teacher teaches the most courses? Give me the id of the teacher and the number of courses he or she teaches.",
    "answer": "SELECT DISTINCT T2.teacher_id, COUNT(T1.course_number) FROM Ref_Address_Types AS T1 INNER JOIN Addresses AS T2 ON T1.address_type_code = T2.address_type_code INNER JOIN Behaviour_Monitoring AS T3 ON T3.`transcript_id` = T1.teacher_id WHERE T3.`course_number` > ( SELECT MAX(T2."
  },
  {
    "id": 485,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many courses do students take at most? Also find the id of the student who takes the most courses.",
    "answer": "SELECT DISTINCT T2.course_id FROM Behaviour_Monitoring AS T1 INNER JOIN Students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.transcript_details LIKE \"%Course - 35% (W)%\", COUNT(T1.T2.course_id), SUM(T2.course_detail__GMT__course_duration__s) DESC LIMIT 1</"
  },
  {
    "id": 486,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which student is taking the most courses? Give me the id of the student and the number of courses he or she is taking.",
    "answer": "SELECT DISTINCT T2.student_id, COUNT(T1.course) FROM Addresses AS T1 INNER JOIN Ref_Address_Types AS T2 ON T1.address_id = T2.address_type_code GROUP BY T1.address_id ORDER BY SUM(T1.`course`) DESC LIMIT 1</sql>"
  },
  {
    "id": 487,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students take 2 courses? List student id and details.",
    "answer": "SELECT DISTINCT T1.student_id, T3.course_name AS course , T4.student_details FROM Students AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id INNER JOIN Addresses AS T3 ON T2.address_id = T3.address_id WHERE T3.course_name LIKE 'Course%' ORDER BY COUNT(T1.student_"
  },
  {
    "id": 488,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the ids and details of the students who take 2 courses?",
    "answer": "SELECT DISTINCT T1.student_id, T3.`course_details` FROM Transcripts AS T1 INNER JOIN Addresses AS T2 ON T1.transcript_id = T2.`address_id` WHERE T2.STUDENT_ID IN ( SELECT T1.student_id ,  T4.course_details FROM Student AS T1 INNER JOIN Detention_type AS T2 ON T1.student_id = T2.T"
  },
  {
    "id": 489,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the least common detention type? Show the type code and the description.",
    "answer": "SELECT DISTINCT T2.address_type_description, T1.`event_type_code` FROM Addresses AS T1 INNER JOIN Ref_Detention_Type AS T2 ON T1.address_id = T2.address_id ORDER BY COUNT(T2.detention_type_c) LIMIT 0</sql>"
  },
  {
    "id": 490,
    "db_id": "cre_Students_Information_Systems",
    "question": "Give me the type code and description of the least common detention type.",
    "answer": "SELECT DISTINCT T2.event_type_description, T1.`address_type_code` FROM Behaviour_Monitoring AS T1 INNER JOIN Addresses AS T2 ON T1.student_id = T2.student_id ORDER BY T1.behaviour_monitoring_details LIMIT 3</sql>"
  },
  {
    "id": 491,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students have a student loan more than the average amount? List the students' biographical data and the details.",
    "answer": "SELECT DISTINCT T2.student_details, T1.`address_details`, T1.transcript_details FROM Student AS T1 INNER JOIN Addresses AS T2 ON T1.student_id = T2.student_id WHERE `average()` = ( SELECT AVG(T1.`behaviour_monitoring_details`) / COUNT(`T1.student_id`) )</sql>"
  },
  {
    "id": 492,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical data and details for students whose student loan is above the average amount.",
    "answer": "SELECT DISTINCT T2.student_details, T1.bio_data AS `BiographyData`, T1.student_details FROM Student_Details AS T1 INNER JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T1.balance > 40 AND T1.`T1.student_type` IN ('LL', 'MLA')</sql>"
  },
  {
    "id": 493,
    "db_id": "cre_Students_Information_Systems",
    "question": "When was the earliest date of loan?",
    "answer": "SELECT MAX(date_of_transcript) AS str FROM Behaviour_Monitoring WHERE transcripts.student_id = '27893' GROUP BY MIN(TRANSCRIPT__DATE_OF_LOAN) ORDER BY date_of_transcript DESC LIMIT 1</sql>"
  },
  {
    "id": 494,
    "db_id": "cre_Students_Information_Systems",
    "question": "Return the earliest date of loan in the record.",
    "answer": "SELECT MAX(T1.date_of_loan), T2.`event_type_description`, T2.`achievement_type_code` FROM Behaviour_Monitoring AS T1 INNER JOIN Addresses AS T2 ON T1.behaviour_monitoring_id = T2.address_id WHERE T1.student_id = 'RACHEL' ORDER BY T2.`date_of_loan` DESC LIMIT "
  },
  {
    "id": 495,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which student has the loan with the minimum value? List the student's biographical information.",
    "answer": "SELECT DISTINCT T2.student_details, T1.`address_id` FROM Ref_Event_Types AS T1 INNER JOIN Addresses AS T2 ON T1.behaviour_monitoring_id = T2.address_id WHERE T1.event_type_description = 'Loan' AND (T2.student_details != '') LIMIT 1</sql>"
  },
  {
    "id": 496,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical information of the student with the smallest student loan.",
    "answer": "SELECT DISTINCT T2.student_details, T1.`address_id` FROM ( SELECT DISTINCT `T3`.address_details, T1.student_details, T1.`address_type_description`, MAX(T1.`student_id`) AS student_id FROM Addresses AS T1 INNER JOIN students AS T2 ON T1.`address_id` = T2.student_id WHERE T1.`address_details` IS NULL GROUP BY"
  },
  {
    "id": 497,
    "db_id": "cre_Students_Information_Systems",
    "question": "When was the transcript issued for the student with loan of maximum value?",
    "answer": "SELECT strftime('%J', T2.date_of_transcript), T3.student_details FROM Transcripts AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.transcript_id = T2.behaviour_monitoring_id INNER JOIN Addresses AS T3 ON T1.student_id = T3.student_id WHERE strftime('%J', T2.date_of_"
  },
  {
    "id": 498,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the transcript issuance date for the student with the largest amount of loan?",
    "answer": "SELECT MAX(DATE) FROM Behaviour_Monitoring WHERE student_id IN ( SELECT T1.student_id FROM Students AS T1 INNER JOIN Transcripts AS T2 ON T1.`student_id` = T2.Student_id WHERE T2.T3 IS NULL ORDER BY SUM(T1.`payments`) DESC LIMIT 1)</sql>"
  },
  {
    "id": 499,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which teachers have taught the student with the earliest transcript issuance? List the teacher details.",
    "answer": "SELECT DISTINCT T2.address_details FROM Behaviour_Monitoring AS T1 INNER JOIN Addresses AS T2 ON T1.student_id = T2.student_id WHERE T1.transcript_id IN ( SELECT MAX(transcript_id) FROM Transcripts ORDER BY date_of_transcript DESC LIMIT 1 )</sql>"
  },
  {
    "id": 500,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the details of the teachers who have taught the student with the earliest transcript issuance.",
    "answer": "SELECT DISTINCT T2.student_details, T1.date_of_transcript FROM Student AS T1 INNER JOIN Transcripts AS T2 ON T1.student_id = T2.`transcript_id` ORDER BY T1.date_of_transcript DESC LIMIT 1</sql>"
  },
  {
    "id": 501,
    "db_id": "cre_Students_Information_Systems",
    "question": "How much total loan does each student have ? List the student ids and the amounts .",
    "answer": "SELECT DISTINCT T2.student_id, SUM(T1.`total_loan`) AS `Amount`, T2.student_details FROM Student AS T1 INNER JOIN Debt_Aggreement AS T2 ON T1.student_id = T2.student_id WHERE T1.name LIKE '%Chang%' GROUP BY T2.student_id ORDER BY SUM(T2.balance) DESC LIMIT 3</sql>"
  },
  {
    "id": 502,
    "db_id": "cre_Students_Information_Systems",
    "question": "For each student, find the student id and the total amount of loan he or she has.",
    "answer": "SELECT DISTINCT T2.student_id , SUM(T1.`total`) FROM Addresses AS T1 INNER JOIN Ref_Address_Types AS T2 ON T1.address_id = T2.address_type_code WHERE T1.event_type_description IN ('Educational Achievement', 'Behaviour Monitoring') GROUP BY T1.`student_id`</sql>"
  },
  {
    "id": 503,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many courses does each student take? List the student id, the student biographical data and the course count.",
    "answer": "SELECT DISTINCT T2.student_id, T1.`course_details`, COUNT(T1.course_name) FROM Behaviour_Monitoring AS T1 INNER JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id WHERE T2.student_id LIKE '%%%' GROUP BY T1.student_id, T2.course_name ORDER BY COUNT(T2.course_details) DESC"
  },
  {
    "id": 504,
    "db_id": "cre_Students_Information_Systems",
    "question": "For each student, find the student id, student biographical data, and the number of courses he or she takes.",
    "answer": "SELECT DISTINCT T2.student_id , T1.`student_details`, COUNT(T1.course) FROM Student AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT DISTINCT T1.course, SUM(CASE WHEN T2.subjects LIKE 'COURSE%' THEN 1 ELSE "
  },
  {
    "id": 505,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many students have gone through a detention?",
    "answer": "SELECT COUNT(DISTINCT T2.student_id) FROM Behaviour_Monitoring AS T1 INNER JOIN Detention AS T2 ON T1.behaviour_monitoring_id = T2.detention_type_c WHERE T1.event_type_description LIKE '%detention%' GROUP BY T2.student_id ORDER BY COUNT(DISTINCT T1.T1.student_id) DESC LIMIT 1</sql>"
  },
  {
    "id": 506,
    "db_id": "cre_Students_Information_Systems",
    "question": "Count the number of students who have a detention record.",
    "answer": "SELECT COUNT(DISTINCT T2.student_id) FROM Behaviour_Monitoring AS T1 INNER JOIN Student AS T2 ON T1.student_id = T2.student_id WHERE T1.detention_type IN ('A') AND T1.behaviour_monitoring_details IS 'No detentions' GROUP BY T1.student_id ORDER BY COUNT(DISTINCT T2.student_id) DESC LIMIT"
  },
  {
    "id": 507,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the code and description of the most common student address type?",
    "answer": "SELECT DISTINCT T2.address_type_description, T1.address_details FROM Addresses AS T1 INNER JOIN Ref_Address_Types AS T2 ON T1.address_id = T2.address_id ORDER BY COUNT(T1.address_type_code) DESC LIMIT 1</sql>"
  },
  {
    "id": 508,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the most common student address type? Give me the code and description of the address type.",
    "answer": "SELECT DISTINCT T2.address_type_description, T1.address_type_code FROM Addresses AS T1 INNER JOIN Ref_Address_Types AS T2 ON T1.address_id = T2.address_id ORDER BY COUNT(T1.address_type_description) DESC LIMIT 1</sql>"
  },
  {
    "id": 509,
    "db_id": "cre_Students_Information_Systems",
    "question": "For those students who have gone through an event, who do not have a student loan? List the students' biographical data",
    "answer": "SELECT DISTINCT T2.student_details FROM Behaviour_Monitoring AS T1 INNER JOIN Addresses AS T2 ON T1.behaviour_monitoring_id = T2.address_id WHERE T1.detention_type_c IS NULL AND T1.transcript_id IS NOT IN ( SELECT DISTINCT `transcript_id` FROM Student)</sql>"
  },
  {
    "id": 510,
    "db_id": "cre_Students_Information_Systems",
    "question": "Among the students who have an event record, who do not have a student loan? Return the students' biographical data.",
    "answer": "SELECT DISTINCT T2.student_details FROM Behaviour_Monitoring AS T1 INNER JOIN Addresses AS T2 ON T1.behaviour_monitoring_id = T2.address_id WHERE T1.events IS NULL OR T1.event_type_description IN ('Detention', 'Participation')</sql>"
  },
  {
    "id": 511,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the start time and the end time of the students' addresses for the students who have 2 transcripts.",
    "answer": "SELECT DISTINCT T1.address_details FROM Addresses AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.address_id = T2.student_id WHERE strftime('%H:%M', T1.`start_time`) IN (T2.student_details) GROUP BY T1.address_details ORDER BY strftime('%H:%M')</sql>"
  },
  {
    "id": 512,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the start time and end time of addresses for the students who receive 2 transcripts?",
    "answer": "SELECT strftime('%J', T1.transcripts.date) + 'T' AS date FROM Behaviour_Monitoring AS T1 INNER JOIN Addresses AS T2 ON T2.address_id = T1.address_id GROUP BY T1.student_id ORDER BY COUNT(T1.transcript_details) DESC LIMIT 1</sql>"
  },
  {
    "id": 513,
    "db_id": "cre_Students_Information_Systems",
    "question": "When did all the detentions start?",
    "answer": "SELECT CAST(strftime('%J', T2.date_of_transcript) - strftime('%Y', T1.date_of_transcript)) AS date, COUNT(`detention_type_c`) FROM Transcripts AS T1 INNER JOIN Addresses AS T2 ON T1.TRANSCRIPT_ID = T2.address_id GROUP BY CAST(strftime('%J', T2.date_of_"
  },
  {
    "id": 514,
    "db_id": "cre_Students_Information_Systems",
    "question": "Give me the detention start date for all the detention records.",
    "answer": "SELECT T1.date_of_detention, T2.`date_of_detention`, 'ALL' FROM Ref_Address_Types AS T1 INNER JOIN Detention_Types AS T2 ON T1.address_type_code = T2.achievement_type_code WHERE T1.address_type_description = 'all'</sql>"
  },
  {
    "id": 515,
    "db_id": "book_1",
    "question": "List all the author names.",
    "answer": "SELECT T1.Name FROM Author AS T1 INNER JOIN Orders AS T2 ON T1.IdAuthor = T2.idOrder WHERE T1.name = 'John Doe' ORDER BY T1.name</sql>"
  },
  {
    "id": 516,
    "db_id": "book_1",
    "question": "What are the names of all the authors?",
    "answer": "SELECT DISTINCT T2.name FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.idOrder = T2.IdAuthor WHERE T1.DateExped BETWEEN '2015-09-06' AND '2015-12-31' ORDER BY T1.dateOrder DESC</sql>"
  },
  {
    "id": 517,
    "db_id": "book_1",
    "question": "Show all Client names and their addresses.",
    "answer": "SELECT DISTINCT T2.Name, T3.Address FROM Orders AS T1 INNER JOIN Clients AS T2 ON T1.IdClient = T2.Id AND T1.Date < '2020-06' WHERE T3.NumCC = 9</sql>"
  },
  {
    "id": 518,
    "db_id": "book_1",
    "question": "What are the names and addressed of all clients?",
    "answer": "SELECT DISTINCT T2.Name, T3.Address FROM Orders AS T1 INNER JOIN Client AS T2 ON T1.IdOrder = T2.Id ORDER BY T1.numCC, T1.numCC DESC LIMIT 2</sql>"
  },
  {
    "id": 519,
    "db_id": "book_1",
    "question": "List all Book titles, ISBNs, and sale prices.",
    "answer": "SELECT DISTINCT T1.title, T2.ISBN, T3.purchaseprice FROM Author AS T1 INNER JOIN Books_Order AS T2 ON T1.Author = T2.IdAuthor INNER JOIN Orders AS T3 ON T1.IdClient = T3.idClient ORDER BY T1.Title LIMIT 1</sql>"
  },
  {
    "id": 520,
    "db_id": "book_1",
    "question": "What are the titles, ISBNs, and sale prices for all books?",
    "answer": "SELECT DISTINCT T1.title, T2.ISBN, T3.Price FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.IdOrder = T2.idAuthor WHERE T1.DateExped BETWEEN '2017-10-18 09:55' AND '2019-06-03 09:04'</sql>"
  },
  {
    "id": 521,
    "db_id": "book_1",
    "question": "How many books do we have?",
    "answer": "SELECT COUNT(*) FROM Author AS T1 INNER JOIN Orders AS T2 ON T1.Author = T2.IdOrder WHERE T1.Name LIKE '%book%' AND T2.NumCC > 30 ORDER BY T2.Date DESC LIMIT 1</sql>"
  },
  {
    "id": 522,
    "db_id": "book_1",
    "question": "Count the number of books.",
    "answer": "SELECT COUNT(*) FROM Orders WHERE OrderType = 'PurchasePrice' GROUP BY ID ORDER BY COUNT(OrderID) DESC LIMIT 1</sql>"
  },
  {
    "id": 523,
    "db_id": "book_1",
    "question": "How many authors are there?",
    "answer": "SELECT COUNT(DISTINCT T1.Author) FROM Author AS T1 INNER JOIN Orders AS T2 ON T1.idOrder = T2.IdOrder WHERE T2.DateEXPED > '2021-06' AND T1.Name = 'Abram Poulton'</sql>"
  },
  {
    "id": 524,
    "db_id": "book_1",
    "question": "Count the number of authors.",
    "answer": "SELECT COUNT(DISTINCT T1.Author) FROM Author AS T1 INNER JOIN Orders AS T2 ON T1.idOrder = T2.IdOrder WHERE T2.DateOrder BETWEEN '2013-11-01' AND '2014-56'</sql>"
  },
  {
    "id": 525,
    "db_id": "book_1",
    "question": "How many clients are there?",
    "answer": "SELECT COUNT(IdClient) FROM Orders WHERE OrderDate IS NOT NULL GROUP BY Date ORDER BY COUNT(Name) DESC LIMIT 1</sql>"
  },
  {
    "id": 526,
    "db_id": "book_1",
    "question": "Return the number of clients.",
    "answer": "SELECT COUNT(idClient) FROM Orders WHERE Name = 'order'</sql>"
  },
  {
    "id": 527,
    "db_id": "book_1",
    "question": "List names and addresses of all clients in alphabetical order by their names.",
    "answer": "SELECT DISTINCT T1.Name, T2.Address FROM Orders AS T1 INNER JOIN Client AS T2 ON T1.IdOrder = T2.Id ORDER BY T2.name</sql>"
  },
  {
    "id": 528,
    "db_id": "book_1",
    "question": "What are the names and addressed of all clients, ordered alphabetically by name?",
    "answer": "SELECT DISTINCT T1.Name, T2.Address FROM Orders AS T1 INNER JOIN Client AS T2 ON T1.IdClient = T2.Id ORDER BY T1.NumCC INTERSECT SELECT T1.Name, T2.Address FROM Orders AS T1 INNER JOIN Client AS T2 ON T1.IdClient = T2.Id ORDER BY T1.NumCC ASC</sql>"
  },
  {
    "id": 529,
    "db_id": "book_1",
    "question": "Show all book titles and corresponding author names.",
    "answer": "SELECT DISTINCT T1.title, T2.name FROM Books AS T1 INNER JOIN Author AS T2 ON T1.Author = T2.id ORDER BY T1.ISBN DESC LIMIT 5</sql>"
  },
  {
    "id": 530,
    "db_id": "book_1",
    "question": "What are the names of all books and their corresponding authors?",
    "answer": "SELECT DISTINCT T2.name FROM Orders AS T1 INNER JOIN Author_Book AS T2 ON T1.IdOrder = T2.idAuthor WHERE T1.Name = 'Fiction Title' AND T1.PurchasePrice <= 0 AND T1.SalePrice > 36 ORDER BY T1.numCC DESC LIMIT 2</sql>"
  },
  {
    "id": 531,
    "db_id": "book_1",
    "question": "Show all order ids and their client names.",
    "answer": "SELECT DISTINCT T2.idclient, T1.name FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.IdOrder = T2.Id ORDER BY T1.DateORDER DESC LIMIT 1</sql>"
  },
  {
    "id": 532,
    "db_id": "book_1",
    "question": "What are the ids of all orders and the corresponding client names?",
    "answer": "SELECT DISTINCT T1.idOrder, T2.name FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.IdOrder = T2.idAuthor ORDER BY T2.name DESC LIMIT 1</sql>"
  },
  {
    "id": 533,
    "db_id": "book_1",
    "question": "Show all author names and the numbers of books each has written.",
    "answer": "SELECT T1.Name, SUM(T2.amount) FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.IdOrder = T2.idAuthor WHERE T2.Name = 'B' GROUP BY T1.author</sql>"
  },
  {
    "id": 534,
    "db_id": "book_1",
    "question": "What are the names of all the authors, and how many books has each written?",
    "answer": "SELECT DISTINCT T2.name , SUM(T1.PurchasePrice + SUM(T1.SalePrice)) AS total FROM Orders AS T1 INNER JOIN Author_Book AS T2 ON T1.idOrder = T2.Author WHERE T1.title IN ('Shopify, 5-Day Coupon Code', 'Woocommerce') GROUP BY T1.author ORDER BY T1.numCC</sql>"
  },
  {
    "id": 535,
    "db_id": "book_1",
    "question": "Show all book isbns and the numbers of orders for each.",
    "answer": "SELECT DISTINCT T1.title, SUM(T2.amount), T2.ISBN FROM Books AS T1 INNER JOIN Orders AS T2 ON T1.idOrder = T2.IdClient WHERE T1.ISBN = 'ibnb' GROUP BY T1.title ORDER BY T1.ISBN DESC LIMIT 3</sql>"
  },
  {
    "id": 536,
    "db_id": "book_1",
    "question": "What are all isbns for each book, and how many times has each been ordered?",
    "answer": "SELECT COUNT(`Title`) AS num , SUM(T2.PurchasePrice - T1.`SalePrice`) FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.IdClient = T2.idAuthor WHERE T1.Title LIKE '%Invoice%' GROUP BY T1.Title ORDER BY COUNT(`Title`) DESC LIMIT 1</sql>"
  },
  {
    "id": 537,
    "db_id": "book_1",
    "question": "Show all book isbns and the total amount ordered for each.",
    "answer": "SELECT DISTINCT T1.title, SUM(T2.amount), T2.book_ISBN FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.idOrder = T2.Author WHERE T1.DateExped >= '2013-10' GROUP BY T2.book_ISBN ORDER BY SUM(T2.amount) DESC</sql>"
  },
  {
    "id": 538,
    "db_id": "book_1",
    "question": "What are the isbns for all books, and what is the total amount ordered for each?",
    "answer": "SELECT T2.IsBNS, SUM(T1.amount) FROM Orders AS T1 INNER JOIN Books AS T2 ON T1.IdOrder = T2.ISBN GROUP BY T1.author ORDER BY T2.PurchasePrice / SUM(T1.amount) DESC LIMIT 1</sql>"
  },
  {
    "id": 539,
    "db_id": "book_1",
    "question": "Show the book title corresponding to the book with the most number of orders.",
    "answer": "SELECT T2.title FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.idOrder = T2.Id ORDER BY T2.numCC DESC LIMIT 1</sql>"
  },
  {
    "id": 540,
    "db_id": "book_1",
    "question": "What is the title of the book that has been ordered the greatest number of times?",
    "answer": "SELECT T1.title FROM Orders AS T1 INNER JOIN Books_Order AS T2 ON T1.IdOrder = T2.id ORDER BY T1.numCC DESC LIMIT 1</sql>"
  },
  {
    "id": 541,
    "db_id": "book_1",
    "question": "Show the book title and purchase price of the book that has had the greatest amount in orders.",
    "answer": "SELECT T2.title, T1.PurchasePrice FROM Books AS T1 INNER JOIN Orders AS T2 ON T1.ISBN = T2.IdOrder WHERE T1.Amount > ( SELECT MAX(T2.amount) FROM Author ORDER BY T3.NumCC DESC LIMIT 1 ) AND T2.dateOrder IS NOT NULL GROUP BY T3.NumCC, T1.PurchasePrice ORDER BY COUNT(T1.ISBN) DESC LIMIT 1"
  },
  {
    "id": 542,
    "db_id": "book_1",
    "question": "What is the title and purchase price of the book that has the highest total order amount?",
    "answer": "SELECT T2.title, T1.PurchasePrice FROM Books AS T1 INNER JOIN Orders AS T2 ON T1.idOrder = T2.IdOrder ORDER BY SUM(T3.Amount) DESC LIMIT 1</sql>"
  },
  {
    "id": 543,
    "db_id": "book_1",
    "question": "Show the titles of books that have been ordered.",
    "answer": "SELECT DISTINCT T1.title FROM Orders AS T1 INNER JOIN Books_Order AS T2 ON T1.idorder = T2.Id ORDER BY T1.numCC DESC LIMIT 1</sql>"
  },
  {
    "id": 544,
    "db_id": "book_1",
    "question": "What are the different titles of books that have been ordered in the past?",
    "answer": "SELECT DISTINCT T1.title FROM Orders AS T1 INNER JOIN Books_Order AS T2 ON T1.IdOrder = T2.id ORDER BY T1.date ORDER BY SUM(CASE WHEN T2.DateExped > DATE - 4 THEN T2.amount END) DESC LIMIT 1</sql>"
  },
  {
    "id": 545,
    "db_id": "book_1",
    "question": "Show the names of clients who have ordered at least once.",
    "answer": "SELECT DISTINCT T1.Name FROM Orders AS T1 INNER JOIN Author_Book AS T2 ON T1.IdOrder = T2.Author WHERE T2.PurchasePrice > 0 AND T2.TotalInvoices >= T1.total ORDER BY T1.numCC LIMIT 1</sql>"
  },
  {
    "id": 546,
    "db_id": "book_1",
    "question": "What are the names of the different clients who have made an order?",
    "answer": "SELECT DISTINCT T1.Name FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.IdOrder = T2.idAuthor WHERE T2.name IS NULL AND T2.Book IN ( SELECT DISTINCT T2.name FROM `Book` ORDER BY T2.author_id )</sql>"
  },
  {
    "id": 547,
    "db_id": "book_1",
    "question": "Show all client names and the number of orders each has made.",
    "answer": "SELECT T1.Name, SUM(T2.numCC), COUNT(T3.IdOrder) FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.IdClient = T2.idAuthor WHERE T1.NumCC < 5</sql>"
  },
  {
    "id": 548,
    "db_id": "book_1",
    "question": "What are the names of all the clients, and how many times has each of them ordered?",
    "answer": "SELECT DISTINCT T1.Name FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.IdOrder = T2.idAuthor WHERE T2.name = 'Clients' AND COUNT(T1.DateExped) BETWEEN 1 AND 10 ORDER BY COUNT(T2.authorID) DESC LIMIT 4</sql>"
  },
  {
    "id": 549,
    "db_id": "book_1",
    "question": "What is the name of the client with the most number of orders?",
    "answer": "SELECT T1.Name FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.idOrder = T2.Id ORDER BY T2.numCC DESC LIMIT 1</sql>"
  },
  {
    "id": 550,
    "db_id": "book_1",
    "question": "Give the name of the client who has made the most orders.",
    "answer": "SELECT T1.Name FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.IdOrder = T2.Author WHERE T2.name = 'Mike' ORDER BY T2.idOrder DESC LIMIT 1</sql>"
  },
  {
    "id": 551,
    "db_id": "book_1",
    "question": "Show the client names and their total amounts of books ordered.",
    "answer": "SELECT T2.Name, SUM(T1.amount) FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.IdOrder = T2.idAuthor WHERE T1.numCC BETWEEN 1 AND 48 ORDER BY T1.DateExped DESC LIMIT 2</sql>"
  },
  {
    "id": 552,
    "db_id": "book_1",
    "question": "What are the names of all the clients, and the total amount of books ordered by each?",
    "answer": "SELECT DISTINCT T1.Name, SUM(T2.amount) FROM Books AS T1 INNER JOIN Orders AS T2 ON T1.IdOrder = T2.Id ORDER BY T2.`DateExped` DESC LIMIT 3 GROUP BY T2.numCC</sql>"
  },
  {
    "id": 553,
    "db_id": "book_1",
    "question": "Show the client name who has the most total amount of books ordered.",
    "answer": "SELECT T2.Name FROM Orders AS T1 INNER JOIN Books_Order AS T2 ON T1.IdOrder = T2.id ORDER BY T1.amount DESC LIMIT 1</sql>"
  },
  {
    "id": 554,
    "db_id": "book_1",
    "question": "What is the name of the client who has ordered the greatest total amount of books?",
    "answer": "SELECT T2.name FROM Orders AS T1 INNER JOIN Books_Order AS T2 ON T1.idorder = T2.Id ORDER BY T1.amount DESC LIMIT 1</sql>"
  },
  {
    "id": 555,
    "db_id": "book_1",
    "question": "Show all book titles for books that have no orders.",
    "answer": "SELECT DISTINCT T1.title FROM Books AS T1 INNER JOIN Orders AS T2 ON T1.idOrder = T2.IdOrder WHERE T2.NumCC = 0 GROUP BY T1.title ORDER BY COUNT(T2.ISBN) ASC LIMIT 1</sql>"
  },
  {
    "id": 556,
    "db_id": "book_1",
    "question": "What are the titles of books that have never been ordered?",
    "answer": "SELECT DISTINCT title FROM Author AS T1 INNER JOIN Orders AS T2 ON T1.author = T2.IdOrder WHERE T2.DateExped IS NULL AND T2.amount IS 0 LIMIT 1</sql>"
  },
  {
    "id": 557,
    "db_id": "book_1",
    "question": "Show all client names for clients who have not made orders.",
    "answer": "SELECT DISTINCT T2.Name FROM Orders AS T1 INNER JOIN Author_Book AS T2 ON T1.IdOrder = T2.Author WHERE T1.NumCC IS NULL GROUP BY T2.Name ORDER BY COUNT(T1.IDClient) ASC LIMIT 1</sql>"
  },
  {
    "id": 558,
    "db_id": "book_1",
    "question": "What are the names of clients who have never made an order?",
    "answer": "SELECT DISTINCT T2.Name FROM Orders AS T1 INNER JOIN Author_Book AS T2 ON T1.IdOrder = T2.Author WHERE T1.PurchasePrice IS NULL AND T1.SalePrice IS NULL AND NOT (T2.authorid IN (1,2,3))</sql>"
  },
  {
    "id": 559,
    "db_id": "book_1",
    "question": "What is the maximum and the minimum sale price?",
    "answer": "SELECT T2.PurchasePrice, SUM(T1.amount) - SUM(T2.SalePrice) AS sum_sales FROM Books_Order AS T1 INNER JOIN Orders AS T2 ON T1.IdOrder = T2.idOrder GROUP BY T1.ISBN ORDER BY min(T2.sales) DESC LIMIT 1</sql>"
  },
  {
    "id": 560,
    "db_id": "book_1",
    "question": "Give the maximum and minimum sale price of books.",
    "answer": "SELECT MIN(T1.salePrice), MAX(T2.salesPrice) FROM Author AS T1 INNER JOIN Orders AS T2 ON T1.idAuthor = T2.IdClient WHERE T2.dateExped = ( SELECT MAX(T2.DateExped) - LOCALENGINE ) ORDER BY T2.name DESC LIMIT 2</sql>"
  },
  {
    "id": 561,
    "db_id": "book_1",
    "question": "What is the average purchase price and the average sale price?",
    "answer": "SELECT AVG(PurchasePrice) , SUM(SalePrice) FROM Orders GROUP BY PurchasePrice / sale_price ORDER BY SUM(PurchasePrice) / SUM(sales_price) DESC LIMIT 1</sql>"
  },
  {
    "id": 562,
    "db_id": "book_1",
    "question": "Give the average purchase price and average sale price for books.",
    "answer": "SELECT AVG(PurchasePrice) , SUM(SalePrice) FROM Author WHERE ISBN = '0964521387' GROUP BY ISBN ORDER BY SUM(PurchasePrice) DESC, SUM(SalePrice) DESC</sql>"
  },
  {
    "id": 563,
    "db_id": "book_1",
    "question": "What is the maximum difference between the sale price and purchase price?",
    "answer": "SELECT MAX(purchasePrice - salePrice) FROM Orders WHERE idOrder IS NOT NULL AND amount > 0 GROUP BY ID ORDER BY SUM(purchasePrice - salePrice) DESC LIMIT 1</sql>"
  },
  {
    "id": 564,
    "db_id": "book_1",
    "question": "Return the largest difference in sale price and purchase price.",
    "answer": "SELECT MAX(SalePrice - PurchasePrice) FROM Orders WHERE OrderID = '6354189' AND DateExped < '2017-11-30 00:00:00.000'</sql>"
  },
  {
    "id": 565,
    "db_id": "book_1",
    "question": "List all book titles which have sale prices higher than the average.",
    "answer": "SELECT T1.title FROM Books AS T1 INNER JOIN Orders AS T2 ON T1.IdOrder = T2.Id ORDER BY T2.Price DESC LIMIT 1</sql>"
  },
  {
    "id": 566,
    "db_id": "book_1",
    "question": "What are the titles of books with sale prices above the average sale price across all books?",
    "answer": "SELECT DISTINCT T1.title FROM Orders AS T1 INNER JOIN Author_Book AS T2 ON T1.IdOrder = T2.ISBN WHERE T2.PurchasePrice > ( SELECT SUM(T3.salePrice) AS sum FROM Author AS T3 INNER JOIN Books AS T4 ON T3.idAuthorA = T4.Id ORDER BY T2.PurchasePrice DESC LIMIT 1 )</sql>"
  },
  {
    "id": 567,
    "db_id": "book_1",
    "question": "List all book titles which have the lowest sale price .",
    "answer": "SELECT T1.title FROM Books AS T1 INNER JOIN Orders AS T2 ON T1.IdOrder = T2.Id ORDER BY T2.PurchasePrice LIMIT 1</sql>"
  },
  {
    "id": 568,
    "db_id": "book_1",
    "question": "What are the titles of books that have a sale price equal to the lowest sale price across all books ?",
    "answer": "SELECT DISTINCT T1.title FROM Orders AS T1 INNER JOIN Author_Book AS T2 ON T1.IdOrder = T2.idAuthor WHERE T2.salePrice BETWEEN 0 AND ( SELECT MAX(PurchasePrice) FROM Books ORDER BY PurchasePrice DESC )</sql>"
  },
  {
    "id": 569,
    "db_id": "book_1",
    "question": "List all book titles which have highest purchase prices .",
    "answer": "SELECT T1.title FROM Books AS T1 INNER JOIN Orders AS T2 ON T1.IdOrder = T2.Id ORDER BY T2.PurchasePrice DESC LIMIT 1</sql>"
  },
  {
    "id": 570,
    "db_id": "book_1",
    "question": "What are the titles of books with the highest purchase price across all books ?",
    "answer": "SELECT T1.title FROM Orders AS T1 INNER JOIN Books AS T2 ON T1.idOrder = T2.Id ORDER BY T1.PurchasePrice DESC LIMIT 1</sql>"
  },
  {
    "id": 571,
    "db_id": "book_1",
    "question": "What is the average sale price of books written by George Orwell?",
    "answer": "SELECT CAST(SUM(T2.PurchasePrice * 100 + T2.SalePrice AS REAL) / COUNT(T1.author)) FROM Author AS T1 INNER JOIN Order AS T2 ON T1.Author = T2.IdOrder WHERE T1.Name = 'George Orwell' GROUP BY T1.ISBN ORDER BY SUM(CASE WHEN T1.PurchasePrice > 0 THEN CAST(T1.Purchase"
  },
  {
    "id": 572,
    "db_id": "book_1",
    "question": "Give the average sale price of books authored by George Orwell.",
    "answer": "SELECT CAST(SUM(T2.PurchasePrice / T1.SalesPrice AS REAL) * 100 AS float) FROM Author_Book AS T1 INNER JOIN Books AS T2 ON T1.ISBN = T2.ISBN WHERE T1.Name = 'George Orwell'</sql>"
  },
  {
    "id": 573,
    "db_id": "book_1",
    "question": "What are sale prices of books written by Plato?",
    "answer": "SELECT T2.salePrice FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.IdOrder = T2.Author WHERE T1.Name = 'Plato' AND T2.name = 'Lexicon'</sql>"
  },
  {
    "id": 574,
    "db_id": "book_1",
    "question": "Return the sale prices of books authored by Plato.",
    "answer": "SELECT T2.salePrice FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.IdOrder = T2.idAuthor WHERE T1.Name = 'PLATO'</sql>"
  },
  {
    "id": 575,
    "db_id": "book_1",
    "question": "What is the title of the book written by George Orwell that has the lowest sale price?",
    "answer": "SELECT T1.title FROM Author AS T1 INNER JOIN Book AS T2 ON T1.author = T2.Author WHERE T2.PurchasePrice = ( SELECT MIN(T3.`price`) FROM Books_Order AS T3 INNER JOIN Orders AS T4 ON T3.ISBN = T4.IdOrder ORDER BY T3.title ) ORDER BY T1.numCC DESC LIMIT 1</sql>"
  },
  {
    "id": 576,
    "db_id": "book_1",
    "question": "Give the title of book by George Orwell that has the lowest saleprice.",
    "answer": "SELECT T2.title FROM Books AS T1 INNER JOIN Orders AS T2 ON T1.IdOrder = T2.Id ORDER BY T2.PurchasePrice LIMIT 1</sql>"
  },
  {
    "id": 577,
    "db_id": "book_1",
    "question": "What is the title of the book written by Plato has price lower than the average sale price of all books?",
    "answer": "SELECT T2.title FROM Orders AS T1 INNER JOIN Books_Order AS T2 ON T1.idOrder = T2.Id ORDER BY T1.PurchasePrice DESC LIMIT 1</sql>"
  },
  {
    "id": 578,
    "db_id": "book_1",
    "question": "Give the titles of books authored by Plato that have a sale price lower than the average sale price across all books.",
    "answer": "SELECT T2.title FROM Orders AS T1 INNER JOIN Books AS T2 ON T1.idOrder = T2.ISBN WHERE T1.PurchasePrice < ( SELECT SUM(T2.purchaseprice) FROM Author AS T3 INNER JOIN Orders AS T4 ON T1.IdOrders = T4.id ORDER BY T3.totalorder DESC LIMIT 1 )</sql>"
  },
  {
    "id": 579,
    "db_id": "book_1",
    "question": "Who is the author of the book \"Pride and Prejudice\"?",
    "answer": "SELECT T1.Name FROM Author AS T1 INNER JOIN Orders AS T2 ON T1.IdAuthor = T2.IdOrder WHERE T1.name = 'Pride And Prejudice' ORDER BY T2.DateExped DESC LIMIT 1</sql>"
  },
  {
    "id": 580,
    "db_id": "book_1",
    "question": "Give the name of the author who wrote the book titled Pride and Prejudice.",
    "answer": "SELECT T2.Name FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.IdOrder = T2.Author WHERE T1.DateExped = '2015-04-30' AND T1.ISBN = '76930869689295861'</sql>"
  },
  {
    "id": 581,
    "db_id": "book_1",
    "question": "List titles of all books published by an author whose name contains the string 'Plato'?",
    "answer": "SELECT T1.title FROM Author AS T1 INNER JOIN Books AS T2 ON T1.idAuthor = T2.Id ORDER BY T1.name LIKE '%Plato%' GROUP BY T2.Title ORDER BY COUNT(T2.title) > 3</sql>"
  },
  {
    "id": 582,
    "db_id": "book_1",
    "question": "What are the titles of all books written by an author with a name that contains Plato?",
    "answer": "SELECT T2.title FROM Books AS T1 INNER JOIN Author AS T2 ON T1.ISBN = T2.ISBN WHERE T2.Name LIKE '%Plato%' ORDER BY T1.ID ORDER LIMIT 1</sql>"
  },
  {
    "id": 583,
    "db_id": "book_1",
    "question": "How many orders do we have for \"Pride and Prejudice\"?",
    "answer": "SELECT COUNT(DISTINCT T1.IdOrder) FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.idOrder = T2.Author WHERE T2.Name = 'Pride &amp; Prejudice' AND Title = 'Pride and Prejudice'</sql>"
  },
  {
    "id": 584,
    "db_id": "book_1",
    "question": "Return the number of orders received for Pride and Prejudice.",
    "answer": "SELECT COUNT(DISTINCT T1.IdOrder) FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.idOrder = T2.Author WHERE T2.Name = 'Pride &amp; Prejudice'</sql>"
  },
  {
    "id": 585,
    "db_id": "book_1",
    "question": "Show ids for orders including both \"Pride and Prejudice\" and \"The Little Prince\".",
    "answer": "SELECT DISTINCT T1.idOrder FROM Orders AS T1 INNER JOIN Book AS T2 ON T1.IdOrder = T2.ISBN WHERE T1.Title IN ( SELECT 'Pride And Prejudice', 'The Little Prince' FROM Author) GROUP BY T1.idOrder ORDER BY T1.title UNION ALL SELECT DISTINCT T3.idOrder,T1.Author FROM Orders AS T1 INNER JOIN Book AS T2 ON T1"
  },
  {
    "id": 586,
    "db_id": "book_1",
    "question": "What are the order ids for orders that include both Pride and Prejudice and The Little Prince?",
    "answer": "SELECT id ORDER FROM Orders WHERE Title IN ('Pride &amp; Prejudice', 'The Little Prince') AND SUBSTR(T2.Title, 1, 3) IN (\n SELECT id FROM Author_Book AS T1 INNER JOIN Orders AS T2 ON T1.ISBN = T2.IdOrder INNER JOIN Book AS T3 ON T2.Id ORDER BY T1.ISBN + strftime('%J', T2.DateExped"
  },
  {
    "id": 587,
    "db_id": "book_1",
    "question": "Show all book isbns which were ordered by both client Peter Doe and client James Smith.",
    "answer": "SELECT DISTINCT T1.title FROM Author_Book AS T1 INNER JOIN Orders AS T2 ON T1.author = T2.idOrder WHERE T1.ISBN IN ( SELECT DISTINCT T2.book.ISBN FROM Author ORDER BY T3.client_name, T2.customer_name , T4.first_name, T6.last_name , T8.numCC > 0 ) GROUP BY T1.title ORDER BY T"
  },
  {
    "id": 588,
    "db_id": "book_1",
    "question": "What are the isbns of books ordered by both clients named Peter Doe and James Smith?",
    "answer": "SELECT DISTINCT T1.isbn FROM Books AS T1 INNER JOIN Orders AS T2 ON T1.idOrder = T2.IdOrder WHERE T1.Name LIKE '%Peter%' AND T1.Name LIKE '%James%' ORDER BY T2.NumCC DESC LIMIT 3</sql>"
  },
  {
    "id": 589,
    "db_id": "book_1",
    "question": "Find the title of books which are ordered by client Peter Doe but not client James Smith.",
    "answer": "SELECT T2.title FROM Orders AS T1 INNER JOIN Books_Order AS T2 ON T1.idOrder = T2.Id ORDER BY T1.Name NOT IN ( SELECT DISTINCT T2.Title FROM Orders AS T2 INNER JOIN Books AS T3 ON T1.idClient = T2.ID WHERE T2.client = 'Pete' AND T2.DateExped < '2020-07-24')"
  },
  {
    "id": 590,
    "db_id": "book_1",
    "question": "What are the titles of books that the client Peter Doe ordered, but the client James Smith did not?",
    "answer": "SELECT DISTINCT T1.title FROM Author AS T1 INNER JOIN Orders AS T2 ON T1.author = T2.IdOrder WHERE T1.name = 'Pete Doe' ORDER BY T2.DateExped DESC, T2.`date` DESC LIMIT 1</sql>"
  },
  {
    "id": 591,
    "db_id": "book_1",
    "question": "Show all client names who have orders for \"Pride and Prejudice\".",
    "answer": "SELECT DISTINCT T2.Name FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.IdOrder = T2.Author WHERE T1.Title = 'Pride and Prejudice' AND T1.DateExped < DATE_TRUNC('month', 'orderdate')</sql>"
  },
  {
    "id": 592,
    "db_id": "book_1",
    "question": "What are the names of clients who have ordered Pride and Prejudice?",
    "answer": "SELECT DISTINCT T1.Name FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.IdOrder = T2.idAuthor WHERE T2.name = 'Pride' AND T2.name = 'Prejudice' ORDER BY CASE WHEN T2.name IS NULL THEN NULL ELSE T2.fullName END</sql>"
  },
  {
    "id": 593,
    "db_id": "book_review",
    "question": "How many books are there?",
    "answer": "SELECT COUNT(DISTINCT T1.Book_ID) FROM \"review\" AS T1 INNER JOIN book AS T2 ON T1.Review_ID = T2.Book_ID ORDER BY SUM(T1.Rating) DESC LIMIT 1</sql>"
  },
  {
    "id": 594,
    "db_id": "book_review",
    "question": "List the titles of books in ascending alphabetical order.",
    "answer": "SELECT DISTINCT T1.title FROM review AS T1 INNER JOIN book AS T2 ON T1.Review_ID = T2.Book_ID ORDER BY T2.\"Title\" DESC</sql>"
  },
  {
    "id": 595,
    "db_id": "book_review",
    "question": "List the titles of books in descending order of pages.",
    "answer": "SELECT DISTINCT T1.title FROM review AS T1 INNER JOIN book AS T2 ON T1.Review_ID = T2.Book_ID ORDER BY T2.pages DESC</sql>"
  },
  {
    "id": 596,
    "db_id": "book_review",
    "question": "What are the types and release dates of books?",
    "answer": "SELECT DISTINCT T2.type, T2.release FROM \"books\" AS T1 INNER JOIN \"reviews\" AS T2 ON T1.book_id = T2.Book_ID ORDER BY T1.title, T1.release DESC LIMIT 3</sql>"
  },
  {
    "id": 597,
    "db_id": "book_review",
    "question": "What are the maximum and minimum number of chapters for each book?",
    "answer": "SELECT SUM(chapters), MIN(pages) FROM 'books' GROUP BY title ORDER BY MAX(T1.pages) DESC LIMIT 2</sql>"
  },
  {
    "id": 598,
    "db_id": "book_review",
    "question": "What are the titles of books that are not \"Poet\"?",
    "answer": "SELECT DISTINCT T1.title FROM book AS T1 INNER JOIN review AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Rating IS NULL LIMIT 1</sql>"
  },
  {
    "id": 599,
    "db_id": "book_review",
    "question": "What is the average rating in reviews?",
    "answer": "SELECT SUM(T1.Rating) / COUNT(T2.Book_id) AS avg FROM \"review\" AS T1 INNER JOIN \"book\" AS T2 ON T1.Book_ID = T2.Book_ID WHERE T1.Book_ID IN ( SELECT T2.title , AVG(Rating) FROM review AS T1 INNER JOIN book AS T2 ON T1.Review_id = T2.Book_ID GROUP BY"
  },
  {
    "id": 600,
    "db_id": "book_review",
    "question": "What are the titles and ratings of books?",
    "answer": "SELECT DISTINCT T1.title, T2.rating FROM \"books\" AS T1 INNER JOIN \"review\" AS T2 ON T1.Book_ID = T2.Book_ID WHERE T1.type = 'fiction' GROUP BY T2.book ORDER BY SUM(T1.Rating) DESC LIMIT 1</sql>"
  },
  {
    "id": 601,
    "db_id": "book_review",
    "question": "What is the rating of the book with the largest number of chapters?",
    "answer": "SELECT DISTINCT T2.Rating FROM ( SELECT MAX(T1.pages), T1.Chapters AS num , T1.Book_ID FROM review AS T1 INNER JOIN `book` AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Pages DESC LIMIT 1 ) AS T3 WHERE T3.num = ( SELECT MAX(T3.num) FROM review AS T1 INNER JOIN `book`"
  },
  {
    "id": 602,
    "db_id": "book_review",
    "question": "What is the rank of the book with the smallest number of pages?",
    "answer": "SELECT SUM(IIF(T2.pages > 1 AND T2.Paperback = 'hardcover', 0, 1)) AS rank FROM review AS T1 INNER JOIN \"book\" AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Pages DESC LIMIT 1</sql>"
  },
  {
    "id": 603,
    "db_id": "book_review",
    "question": "What is the title of the book with the highest rank in the review?",
    "answer": "SELECT T1.title FROM \"review\" AS T1 INNER JOIN \"book\" AS T2 ON T1.Review_ID = T2.Book_ID ORDER BY T2.Rating DESC LIMIT 1</sql>"
  },
  {
    "id": 604,
    "db_id": "book_review",
    "question": "What is the average number of readers for books of type \"Novel\"?",
    "answer": "SELECT AVG(T2.Rating) FROM \"review\" AS T1 INNER JOIN \"book\" AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.TYPE = 'novel' GROUP BY T2.Book_ID ORDER BY SUM(T2.Page - 35796084050344700) / COUNT(`book`) DESC LIMIT 1</sql>"
  },
  {
    "id": 605,
    "db_id": "book_review",
    "question": "For each book type return the type and the number of books of that type.",
    "answer": "SELECT DISTINCT T2.type, COUNT(T1.Book_ID), T3.Num FROM book AS T1 INNER JOIN review AS T2 ON T1.Book_ID = T2.Book_ID INNER JOIN ( SELECT T4.type, SUM(T3.Num) AS total FROM book AS T5 WHERE T5.Type = 'Audio' GROUP BY T5.Title ) AS T3 ON T2.Book_ID = T3."
  },
  {
    "id": 606,
    "db_id": "book_review",
    "question": "What is the most common type of books?",
    "answer": "SELECT DISTINCT T2.type FROM review AS T1 INNER JOIN book AS T2 ON T1.Review_ID = T2.Book_ID ORDER BY COUNT(T2.Title) DESC LIMIT 1</sql>"
  },
  {
    "id": 607,
    "db_id": "book_review",
    "question": "What are the types of books that have at least three books belonging to?",
    "answer": "SELECT DISTINCT T2.type FROM \"books\" AS T1 INNER JOIN `review` AS T2 ON T1.Book_ID = T2.Book_ID GROUP BY T2.book, COUNT(T1.ISBN) ORDER BY SUM(t2.Rating) >= 3 DESC LIMIT 1</sql>"
  },
  {
    "id": 608,
    "db_id": "book_review",
    "question": "List the titles of books in ascending order of the ratings in review?",
    "answer": "SELECT DISTINCT T1.title FROM \"review\" AS T1 INNER JOIN 'book' AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T1.Rating DESC LIMIT 1</sql>"
  },
  {
    "id": 609,
    "db_id": "book_review",
    "question": "List the title and audio length for all the books in descending order of the number of readers.",
    "answer": "SELECT DISTINCT T1.title, T2.Audio FROM review AS T1 INNER JOIN book AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T1.Rating DESC LIMIT 1</sql>"
  },
  {
    "id": 610,
    "db_id": "book_review",
    "question": "How many books do not have reviews?",
    "answer": "SELECT COUNT(DISTINCT T1.Book_ID) FROM \"review\" AS T1 INNER JOIN book AS T2 ON T1.Review_ID = T2.Book_ID WHERE T1.Rating IS NULL AND T2.Type != 'audio'</sql>"
  },
  {
    "id": 611,
    "db_id": "book_review",
    "question": "Show the types of books that have both books with more than 75 chapters and books with less than 50 chapters.",
    "answer": "SELECT DISTINCT T1.type FROM \"books\" AS T1 INNER JOIN `review` AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Rating IS NULL GROUP BY T1.type ORDER BY COUNT(DISTINCT T2.Chapter) - SUM(CASE WHEN DISTINCT T2.Page IS NULL THEN 0 END) BETWEEN 75 AND <65</sql>"
  },
  {
    "id": 612,
    "db_id": "book_review",
    "question": "How many distinct types of book are there?",
    "answer": "SELECT COUNT(DISTINCT T2.type), DISTINCT T1.release FROM 'books' AS T1 INNER JOIN \"review\" AS T2 ON T1.Book_ID = T2.Book_ID GROUP BY T2.title ORDER BY T2.type</sql>"
  },
  {
    "id": 613,
    "db_id": "book_review",
    "question": "What are the type and title of the books that are not rated?",
    "answer": "SELECT DISTINCT T1.title, T2.type FROM \"review\" AS T1 INNER JOIN book AS T2 ON T1.Book_ID = T2.Book_ID WHERE T1.Rating IS NULL ORDER BY T2.`title`</sql>"
  },
  {
    "id": 614,
    "db_id": "restaurant_bills",
    "question": "How many customers are there?",
    "answer": "SELECT COUNT(DISTINCT T1.Customer_ID) FROM \"customer\" AS T1 INNER JOIN branch AS T2 ON T1.Customer_ID = T2.Branch_ID GROUP BY T2.Location_of_office ORDER BY COUNT(DISTINCT T2.Customer_ID) DESC LIMIT 3</sql>"
  },
  {
    "id": 615,
    "db_id": "restaurant_bills",
    "question": "Count the number of customers.",
    "answer": "SELECT COUNT(T1.Customer_ID) FROM `customer_order` AS T1 INNER JOIN customer AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Name = 'customer'</sql>"
  },
  {
    "id": 616,
    "db_id": "restaurant_bills",
    "question": "List the names of customers in ascending order of level of membership.",
    "answer": "SELECT DISTINCT T1.Name FROM customer AS T1 INNER JOIN branch AS T2 ON T1.Customer_ID = T2.Branch_ID ORDER BY T2.Level_of_Membership DESC LIMIT 1</sql>"
  },
  {
    "id": 617,
    "db_id": "restaurant_bills",
    "question": "Sort all the customers by the level of membership in ascending order, and return the customer names.",
    "answer": "SELECT DISTINCT T2.Name FROM \"customer\" AS T1 INNER JOIN `branch` AS T2 ON T1.Customer_ID = T2.Branch_ID WHERE T1.Level_of_Membership BETWEEN 50 AND 70 ORDER BY T1.`Level_of_Membership` DESC</sql>"
  },
  {
    "id": 618,
    "db_id": "restaurant_bills",
    "question": "What are the nationalities and card credits of customers?",
    "answer": "SELECT DISTINCT T2.Nationality, SUM(T3.CardCredit) AS total FROM `customer` AS T1 INNER JOIN `branch` AS T2 ON T1.Branch_ID = T2.Branch_ID GROUP BY T1.Name ORDER BY T1.Name, T2.Nationality DESC LIMIT 1</sql>"
  },
  {
    "id": 619,
    "db_id": "restaurant_bills",
    "question": "Find the nationality and card credit of each customer.",
    "answer": "SELECT DISTINCT T2.Nationality, SUM(T3.`Level_of_Membership`) AS Total FROM \"customer\" AS T1 INNER JOIN `branch` AS T2 ON T1.Customer_ID = T2.Branch_ID AND T2.Location_of_office = 'London' AS T3 ON T1.Branch_ID WHERE T2.Name = 'Financial Services' GROUP BY T2.Nationality,"
  },
  {
    "id": 620,
    "db_id": "restaurant_bills",
    "question": "Show the names of customers with nationality \"England\" or \"Australia\".",
    "answer": "SELECT DISTINCT T2.name FROM `customer` AS T1 INNER JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Nationality IN ('England', 'Australia') OR T1.Nationality IS NULL</sql>"
  },
  {
    "id": 621,
    "db_id": "restaurant_bills",
    "question": "Which customers have nationality \"England\" or \"Australia\"? Give me their names.",
    "answer": "SELECT DISTINCT T2.name FROM customer AS T1 INNER JOIN branch AS T2 ON T1.customer = T2.Branch_ID WHERE T1.Nationality = 'England' AND T1.Location = 'Australia'</sql>"
  },
  {
    "id": 622,
    "db_id": "restaurant_bills",
    "question": "What is the average card credit of customers with membership level higher than 1?",
    "answer": "SELECT AVG(T2.Card_Credit) FROM customer AS T1 INNER JOIN branch AS T2 ON T1.Customer_ID = T2.Branch_ID WHERE T1.Level_of_Membership > 1</sql>"
  },
  {
    "id": 623,
    "db_id": "restaurant_bills",
    "question": "Find the average card credit customers whose membership level is above 1.",
    "answer": "SELECT SUM(DISTINCT CASE WHEN T2.Level_of_Membership > 1 THEN CAST(T2.Card_Credit AS REAL)) / COUNT(T1.Customer_ID) FROM \"customer\" AS T1 INNER JOIN customer_order AS T2 ON T1.Customer_ID = T2.Branch_ID ORDER BY T1.`Level_of_Membership` DESC LIMIT 1</sql>"
  },
  {
    "id": 624,
    "db_id": "restaurant_bills",
    "question": "What is the card credit of the customer with the highest membership level?",
    "answer": "SELECT T1.card_credit FROM `customer` AS T1 INNER JOIN 'branch' AS T2 ON T1.Customer_ID = T2.Branch_ID GROUP BY T2.branch.location ORDER BY COUNT(T1.card_credit) DESC LIMIT 1</sql>"
  },
  {
    "id": 625,
    "db_id": "restaurant_bills",
    "question": "Find the customer with the highest membership level and return his or her card credit.",
    "answer": "SELECT DISTINCT T1.Name, SUM(T2.`Level_of_Membership`) AS sum FROM `customer` AS T1 INNER JOIN `branch` AS T2 ON T1.Branch_ID = T2.Branch_ID WHERE T1.Nationality = 'Italy' GROUP BY T2.Manager ORDER BY SUM(T2.`Level_of_Membership`) DESC LIMIT 1</sql>"
  },
  {
    "id": 626,
    "db_id": "restaurant_bills",
    "question": "Show different nationalities of customers, along with the number of customers of each nationality.",
    "answer": "SELECT DISTINCT T2.Nationality FROM 'customer' AS T1 INNER JOIN branch AS T2 ON T1.Customer_ID = T2.Branch_ID WHERE T1.Nationality LIKE '%%'</sql>"
  },
  {
    "id": 627,
    "db_id": "restaurant_bills",
    "question": "How many customers are associated with each nationality? List the nationality and the number of customers.",
    "answer": "SELECT DISTINCT T2.Nationality, SUM(T1.num_of_customers) FROM `customer` AS T1 INNER JOIN branch AS T2 ON T1.Customer_ID = T2.Branch_ID GROUP BY T2.Country ORDER BY COUNT(T1.Nationality) DESC LIMIT 3</sql>"
  },
  {
    "id": 628,
    "db_id": "restaurant_bills",
    "question": "Show the most common nationality of customers.",
    "answer": "SELECT DISTINCT T2.Nationality FROM customer AS T1 INNER JOIN branch AS T2 ON T1.Customer_ID = T2.Branch_ID ORDER BY COUNT(T1.Name) DESC LIMIT 1</sql>"
  },
  {
    "id": 629,
    "db_id": "restaurant_bills",
    "question": "Which nationality does the most customers have?",
    "answer": "SELECT DISTINCT T2.Nationality FROM customer AS T1 INNER JOIN branch AS T2 ON T1.Customer_ID = T2.Branch_ID ORDER BY COUNT(T1.Name) DESC LIMIT 1</sql>"
  },
  {
    "id": 630,
    "db_id": "restaurant_bills",
    "question": "Show the nations that have both customers with card credit smaller than 50 and customers with card credit bigger than 75.",
    "answer": "SELECT T1.nation, SUM(T2.Quantity) - SUM(T1.Card_Credit) AS Total FROM `customer` AS T1 INNER JOIN `branch` AS T2 ON T1.Customer_ID = T2.Branch_ID WHERE T2.Level_of_Membership &gt; 50 AND T2.Location_of_office LIKE '%#France%' GROUP BY T1.nation ORDER BY SUM("
  },
  {
    "id": 631,
    "db_id": "restaurant_bills",
    "question": "Which nations have both customers with card credit above 50 and customers with card credit below 75.",
    "answer": "SELECT T1.nation, SUM(T2.card_credit) FROM `customer` AS T1 INNER JOIN `branch` AS T2 ON T1.Branch_ID = T2.Branch_ID WHERE T1.Nation IN ('USA', 'Japan') GROUP BY T1.Nation ORDER BY SUM(T2.Card_Credit - ( SELECT AVG(Card_Credit) FROM `customer` AS T1 INNER JOIN"
  },
  {
    "id": 632,
    "db_id": "restaurant_bills",
    "question": "Show the names of customers and names of dishes they order.",
    "answer": "SELECT DISTINCT T1.name, T2.dish_name FROM ( SELECT 'customer', T2.name , 0 AS id UNION ALL SELECT T3.name, T2.dish_name FROM \"customer\" AS T1 INNER JOIN 'branch' AS T2 ON T1.Customer_ID = T2.Branch_ID ORDER BY T1.id DESC LIMIT 1) AS T1 INNER JOIN `customer_order` AS T2"
  },
  {
    "id": 633,
    "db_id": "restaurant_bills",
    "question": "For each order, return the customer name and the dish name.",
    "answer": "SELECT DISTINCT T2.name , T3.dish_name FROM ( SELECT 'Customer', T1.customer_id AS cid, T2.name AS t3 FROM `order` WHERE `branch` = 'branch' AND level_of_membership = 9 ORDER BY t2.yearsopened DESC LIMIT 1 ) AS T1 INNER JOIN ( SELECT DISTINCT name , T2.dish_name FROM customer_order WHERE"
  },
  {
    "id": 634,
    "db_id": "restaurant_bills",
    "question": "Show the names of customers and names of dishes they order, in descending order of the quantity of dish.",
    "answer": "SELECT DISTINCT T2.name FROM `customer_order` AS T1 INNER JOIN 'customer' AS T2 ON T1.Customer_ID = T2.Customer_ID ORDER BY T1.`Quantity` DESC LIMIT 1</sql>"
  },
  {
    "id": 635,
    "db_id": "restaurant_bills",
    "question": "For each order, find the customer name and the dish name. Sort the result in descending order of the quantity of dish.",
    "answer": "SELECT DISTINCT T2.Name, T3.Dish_name FROM customer_order AS T1 INNER JOIN `branch` AS T2 ON T1.Branch_ID = T2.Branch_ID WHERE T1.Customer_ID IN ( SELECT DISTINCT T1.Name FROM customer ORDER BY T3.`Quantity` DESC LIMIT 1 )</sql>"
  },
  {
    "id": 636,
    "db_id": "restaurant_bills",
    "question": "Show each customer name and the total quantities of dishes ordered by that customer.",
    "answer": "SELECT DISTINCT T2.Name, SUM(T1.Quantity) FROM `customer_order` AS T1 INNER JOIN `customer` AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.Customer_ID ORDER BY T1.Level_of_Membership DESC</sql>"
  },
  {
    "id": 637,
    "db_id": "restaurant_bills",
    "question": "What is the total quantities of dishes ordered by each customer ? List the customer name and the total quantity .",
    "answer": "SELECT T1.name, SUM(T2.Quantity) FROM ( SELECT T1.\"Customer_ID\", COUNT(DISTINCT T2.`Dish_Name`) AS sum , SUM(T1.quantity) AS total FROM `customer_order` WHERE `Branch_ID` = 95 GROUP BY T2.\") AS T1 INNER JOIN 'customer' AS T2 ON T2.\"Customer_ID\" = T1.Customer_ID ORDER BY T"
  },
  {
    "id": 638,
    "db_id": "restaurant_bills",
    "question": "Show the customers with total quantity of order bigger than 1.",
    "answer": "SELECT DISTINCT T2.Name FROM \"customer_order\" AS T1 INNER JOIN 'customer' AS T2 ON T1.Customer_ID = T2.Customer_ID ORDER BY T1.`Quantity` > 1 LIMIT 1</sql>"
  },
  {
    "id": 639,
    "db_id": "restaurant_bills",
    "question": "Which customers have total order quantity greater than 1? Give me the customer names.",
    "answer": "SELECT DISTINCT T2.name FROM `customer_order` AS T1 INNER JOIN branch AS T2 ON T1.branch_id = T2.Branch_ID GROUP BY T2.Name ORDER BY SUM(T1.Quantity) > 1</sql>"
  },
  {
    "id": 640,
    "db_id": "restaurant_bills",
    "question": "Show distinct managers of branches.",
    "answer": "SELECT DISTINCT T2.manager FROM ( SELECT DISTINCT T1.location_of_office AS 'LocationOfOffice', T3.branch_id, COUNT(T3.Dish_name) AS num FROM `branch` AS T1 INNER JOIN `customer` AS T2 ON T2.Branch_ID = T1.Branch_ID WHERE T2.Nationality = 'Japanese' GROUP BY T3.branch_id ORDER BY"
  },
  {
    "id": 641,
    "db_id": "restaurant_bills",
    "question": "Who are the distinct managers of branches?",
    "answer": "SELECT T1.Name FROM \"branch AS T1 INNER JOIN customer AS T2 ON T1.Branch_ID = T2.Branch_ID WHERE T1.Location = 'customer-office' ORDER BY T1.Years_opened DESC LIMIT 1</sql>"
  },
  {
    "id": 642,
    "db_id": "restaurant_bills",
    "question": "List the names of customers that do not have any order.",
    "answer": "SELECT DISTINCT T1.name FROM \"customer\" AS T1 INNER JOIN `order\" AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Status != 0 AND T2.Order_ID IS NULL</sql>"
  },
  {
    "id": 643,
    "db_id": "restaurant_bills",
    "question": "Which customers do not have any order? Give me the customer names.",
    "answer": "SELECT T2.name FROM \"customer_order\" AS T1 INNER JOIN `customer` AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Nationality != 'Afghan' ORDER BY T1.Branch_ID NOT IN ( SELECT Branch_ID FROM customer_order WHERE Customer_ID IS NULL )</sql>"
  },
  {
    "id": 644,
    "db_id": "club_leader",
    "question": "How many members are there?",
    "answer": "SELECT COUNT(DISTINCT T2.Member_ID) FROM club AS T1 INNER JOIN member AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Name = 'exampleclub' GROUP BY COUNT(T2.Member_ID) ORDER BY COUNT(DISTINCT T1.Member_ID) DESC LIMIT 3</sql>"
  },
  {
    "id": 645,
    "db_id": "club_leader",
    "question": "List the names of members in ascending order of age.",
    "answer": "SELECT DISTINCT T2.Name FROM club AS T1 INNER JOIN member AS T2 ON T1.Club_ID = T2.Club_ID ORDER BY T1.Year_Join ASC</sql>"
  },
  {
    "id": 646,
    "db_id": "club_leader",
    "question": "What are the names and nationalities of the members?",
    "answer": "SELECT DISTINCT T2.Name, T3.Nationality FROM `club` AS T1 INNER JOIN `member` AS T2 ON T1.Club_ID = T2.Club_ID INNER JOIN club AS T3 ON T2.Club_ID = T3.Club_ID WHERE T2.Nationality = 'Federal Republic of Germany' AND T2.Name LIKE '%Bundesrepublik%'</sql>"
  },
  {
    "id": 647,
    "db_id": "club_leader",
    "question": "List the names of members whose nationality is not `` England '' .",
    "answer": "SELECT DISTINCT T2.Name FROM club AS T1 INNER JOIN member AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Nationality != 'England'</sql>"
  },
  {
    "id": 648,
    "db_id": "club_leader",
    "question": "Show the names of members whose age is either 19 or 20.",
    "answer": "SELECT DISTINCT T3.Name FROM club AS T1 INNER JOIN member AS T2 ON T1.Club_ID = T2.Member_ID WHERE T1.Year_Join IS NULL OR strftime('%J', T2.Age) BETWEEN 19 AND 20</sql>"
  },
  {
    "id": 649,
    "db_id": "club_leader",
    "question": "What is the name of the oldest member?",
    "answer": "SELECT T1.Name FROM club AS T1 INNER JOIN member AS T2 ON T1.Club_ID = T2.Club_ID ORDER BY T2.Years - 2096 LIMIT 1</sql>"
  },
  {
    "id": 650,
    "db_id": "club_leader",
    "question": "Show different nationalities along with the number of members of each nationality.",
    "answer": "SELECT DISTINCT T2.Nationality, COUNT(T1.Member_ID) FROM club AS T1 INNER JOIN member AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Team_Leader  = 'Japanese' GROUP BY T2.Nationality ORDER BY T2.Nationality ASC</sql>"
  },
  {
    "id": 651,
    "db_id": "club_leader",
    "question": "Please show the most common nationality of members.",
    "answer": "SELECT DISTINCT T2.Nationality FROM 'club' AS T1 INNER JOIN member AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.Member_ID ORDER BY COUNT(T1.Name) DESC LIMIT 1</sql>"
  },
  {
    "id": 652,
    "db_id": "club_leader",
    "question": "Show the nations that have at least two members.",
    "answer": "SELECT DISTINCT T2.Nationality FROM \"club\" AS T1 INNER JOIN member AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Overall_Ranking > 3 GROUP BY T2.`Member_ID` ORDER BY COUNT(DISTINCT T2.`Member_ID`) DESC LIMIT 2</sql>"
  },
  {
    "id": 653,
    "db_id": "club_leader",
    "question": "Show the names of club leaders and the names of clubs they joined.",
    "answer": "SELECT DISTINCT T2.Name, T3.Club_ID FROM ( SELECT T1.club_leader AS T2, T3.Club_ID FROM club AS T1 INNER JOIN member AS T2 ON T1.Member_ID = T2.Member_ID WHERE T2.Nationality = 'Australia' AND T1.Club_Name IN ('Crown PUBLISHING CARLISLE') ORDER BY T"
  },
  {
    "id": 654,
    "db_id": "club_leader",
    "question": "Show the names of club leaders of clubs with overall ranking higher than 100.",
    "answer": "SELECT DISTINCT T2.Name FROM \"club\" AS T1 INNER JOIN 'club_leader' AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Overall_Ranking BETWEEN 100 AND 99 AND T2.Member_ID IN ( SELECT DISTINCT T2.member.Name FROM 'club_leader' AS T1 INNER JOIN 'club' AS T"
  },
  {
    "id": 655,
    "db_id": "club_leader",
    "question": "Show the names of club leaders that joined their club before 2018.",
    "answer": "SELECT DISTINCT T3.Name FROM club AS T1 INNER JOIN club_leader AS T2 ON T1.Club_ID = T2.Club_ID WHERE strftime('%Y', T1.Year_Join) < '2018'</sql>"
  },
  {
    "id": 656,
    "db_id": "club_leader",
    "question": "Show the name of the leader of the club named \"Houston\".",
    "answer": "SELECT DISTINCT T2.Club_Name FROM 'club' AS T1 INNER JOIN member AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Team_Leader = 'houston' AND T1.Nationality = 'american'</sql>"
  },
  {
    "id": 657,
    "db_id": "club_leader",
    "question": "List the names of members that are not club leaders.",
    "answer": "SELECT DISTINCT T2.Name FROM member AS T1 INNER JOIN club AS T2 ON T1.Member_ID = T2.Club_ID WHERE T2.IsClubLeader = 'F'</sql>"
  },
  {
    "id": 658,
    "db_id": "club_leader",
    "question": "Show the nations that have both members older than 22 and members younger than 19.",
    "answer": "SELECT DISTINCT T3.Nationality FROM member AS T1 INNER JOIN club AS T2 ON T1.Member_ID = T2.Club_ID WHERE T1.Age BETWEEN 20 AND 18 AND T1.Nation IN ('France', 'Italy', 'Spain') ORDER BY T2.Overall_Ranking DESC LIMIT 3</sql>"
  },
  {
    "id": 659,
    "db_id": "club_leader",
    "question": "What is the average age of all the club leaders?",
    "answer": "SELECT AVG(T2.Year_Join) FROM club_leader AS T1 INNER JOIN member AS T2 ON T1.Club_ID = T2.Member_ID WHERE T1.club_name = 'Club1' GROUP BY t1.club_name ORDER BY SUM(t1.year_join) DESC LIMIT 1</sql>"
  },
  {
    "id": 660,
    "db_id": "club_leader",
    "question": "Which club name contains the string 'state'?",
    "answer": "SELECT DISTINCT T2.club_name FROM club AS T1 INNER JOIN `club` AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.team_leader LIKE '%state%' ORDER BY T1.club_name LIMIT 1</sql>"
  },
  {
    "id": 661,
    "db_id": "cre_Doc_and_collections",
    "question": "List all collections' subset. List the subsets' names.",
    "answer": "SELECT DISTINCT T2.Collection_Name FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID ORDER BY T2.Collection_Name</sql>"
  },
  {
    "id": 662,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection susbset names?",
    "answer": "SELECT DISTINCT T2.Collection_Name FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Parent_Collection_ID = 6</sql>"
  },
  {
    "id": 663,
    "db_id": "cre_Doc_and_collections",
    "question": "What is detail of collection subset with name 'Top collection'?",
    "answer": "SELECT T1.description FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.collection_name = 'Top collection'</sql>"
  },
  {
    "id": 664,
    "db_id": "cre_Doc_and_collections",
    "question": "What collection details are there on the subset named 'Top collection'?",
    "answer": "SELECT DISTINCT T2.Collection_Description FROM Documents_in_Collections AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = 'Top collection'</sql>"
  },
  {
    "id": 665,
    "db_id": "cre_Doc_and_collections",
    "question": "List all documents's subset. List the subset's name.",
    "answer": "SELECT T1.name FROM Documents AS T1 INNER JOIN Collection_Subsets AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Subset_ID WHERE T1.Name = 'Documents'</sql>"
  },
  {
    "id": 666,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the document subset names?",
    "answer": "SELECT T1.Document_Subset_Name FROM Documents_in_Collections AS T1 INNER JOIN Subsets AS T2 ON T1.Collection_ID = T2.Collection_ID ORDER BY T2.Document_Subset_Name, T1.</sql>"
  },
  {
    "id": 667,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the detail of document subset with name 'Best for 2000'?",
    "answer": "SELECT T3.description FROM Documents_in_Collections AS T1 INNER JOIN collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = \"Best for 2000\" GROUP BY T2.Collection_Subset_Name ORDER BY COUNT(T2.collection_name) DESC LIMIT 1</sql>"
  },
  {
    "id": 668,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the details on the document subsets that are named 'Best for 2000'?",
    "answer": "SELECT T3.Name, T1.Description FROM Documents AS T1 INNER JOIN Collection_Subsets AS T2 ON T1.Document_Object_ID = T2.Collection_Subset_ID WHERE T2.Document_Subset_Details = 'Best for 2000'</sql>"
  },
  {
    "id": 669,
    "db_id": "cre_Doc_and_collections",
    "question": "List document id of all documents.",
    "answer": "SELECT T2.Document_Object_ID FROM Documents AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collecrtion_Subset_Details = 'Sales and Distribution'</sql>"
  },
  {
    "id": 670,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the object id of the document objects?",
    "answer": "SELECT T1.Object_ID FROM Documents AS T1 INNER JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T1.Name LIKE '%Object%' ORDER BY T1.Description LIMIT 1</sql>"
  },
  {
    "id": 671,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the parent document of document owned by Marlin? List the document id.",
    "answer": "SELECT DISTINCT T1.Parent_Document_Object_ID FROM Documents AS T1 INNER JOIN Collections AS T2 ON T1.Document_Object_ID = T2.Collection_ID ORDER BY T1.Name</sql>"
  },
  {
    "id": 672,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the document object ids of the objects owned by Marlin?",
    "answer": "SELECT T1.parent_collection_id FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.collection_name = 'Marlin' ORDER BY T2.Document_Object_ID DESC LIMIT 1</sql>"
  },
  {
    "id": 673,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the owner of document with the Description 'Braeden Collection'?",
    "answer": "SELECT T1.owner FROM Documents_in_Collections AS T1 INNER JOIN Collection_Subsets AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Document_Subset_Name = 'Braeden Collection'</sql>"
  },
  {
    "id": 674,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the owners of the document objects described as the 'Braeden Collection'?",
    "answer": "SELECT T1.owner FROM Documents_in_Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.collection_name = 'Braeden Collection'</sql>"
  },
  {
    "id": 675,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the owner of the parent document of document owned by 'Marlin'?",
    "answer": "SELECT DISTINCT T1.Owner FROM Documents AS T1 INNER JOIN Collections AS T2 ON T1.Document_Object_ID = T2.Collection_ID WHERE T2.Name = \"Marlin\" AND T2.Parent_Collection_Name = 'Catalog'</sql>"
  },
  {
    "id": 676,
    "db_id": "cre_Doc_and_collections",
    "question": "Who is the owner of the parent document of every documents where 'Marlin' is the owner?",
    "answer": "SELECT T1.owner FROM Documents AS T1 INNER JOIN Collection_Subsets AS T2 ON T1.Parent_Document_Object_ID = T2.Collection_Subset_ID WHERE T1.Name = 'Marlin' GROUP BY T1.Owner ORDER BY COUNT(T1.Prefers_Title = 'Marlin')</sql>"
  },
  {
    "id": 677,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different descriptions of all the parent documents?",
    "answer": "SELECT T1.Description FROM Documents AS T1 INNER JOIN Collections AS T2 ON T1.Parent_Document_Object_ID = T2.Collection_ID WHERE T1.Parent_Document_Object_ID = 3 ORDER BY T1.Document_Subset_Name</sql>"
  },
  {
    "id": 678,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the unique description of every parent document?",
    "answer": "SELECT T1.description FROM Documents AS T1 INNER JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T2.Collections = ( SELECT DISTINCT T2.collection_name FROM documents AS T2 INNER JOIN collections AS T1 ON T2.parent_collection_id = T1.Collection_ID ORDER BY T2.collection_description DESC LIMIT 1 )</sql>"
  },
  {
    "id": 679,
    "db_id": "cre_Doc_and_collections",
    "question": "How many documents owned by Marlin?",
    "answer": "SELECT COUNT(DISTINCT T1.Owner) FROM Documents_in_Collections AS T1 INNER JOIN Collection_Subsets AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Document_Object_ID = 2389457</sql>"
  },
  {
    "id": 680,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the count of documents owned by Marlin?",
    "answer": "SELECT COUNT(DISTINCT T1.Owner) FROM Documents_in_Collections AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Parent_Collection_ID = T2.collection_id AND T1.Name = 'Marlin'</sql>"
  },
  {
    "id": 681,
    "db_id": "cre_Doc_and_collections",
    "question": "List all documents ids that are not the parent of other documents.",
    "answer": "SELECT DISTINCT T2.Document_Object_ID FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID ORDER BY T1.Parent_Collection_ID IS NULL AND T1.Other_Details != 'other' LIMIT 1</sql>"
  },
  {
    "id": 682,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the ids of the documents that are not parent documents?",
    "answer": "SELECT DISTINCT T2.Document_Object_ID FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.parent_collection_id != '123456789' ORDER BY T1.docnum LIMIT 1</sql>"
  },
  {
    "id": 683,
    "db_id": "cre_Doc_and_collections",
    "question": "How many child documents does each parent document has? List the document id and the number.",
    "answer": "SELECT COUNT(DISTINCT T1.Parent_Document_Object_ID),  COUNT(T2.parent_document_id) FROM Documents AS T1 INNER JOIN Collections AS T2 ON T1.Collection_Subset_ID = T2.Collection_Subset_ID WHERE T2.parent_collection = 'parent' GROUP BY T2.Parent_Document_Object_ID ORDER BY COUNT(DISTINCT T2.parent_document_id"
  },
  {
    "id": 684,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of child documents for each parent document, and what are the ids of the parent documents?",
    "answer": "SELECT T1.Parent_Collection_ID , SUM(T2.Child_Document_Count) FROM Documents_in_Collections AS T1 INNER JOIN Collection_Subsets AS T2 ON T1.Collection_Subset_ID = T2.Collection_Subset_ID GROUP BY T1.parent_collection_id</sql>"
  },
  {
    "id": 685,
    "db_id": "cre_Doc_and_collections",
    "question": "List the name of all collections.",
    "answer": "SELECT DISTINCT T2.Collection_Name FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID ORDER BY T1.Collection_ID DESC LIMIT 1</sql>"
  },
  {
    "id": 686,
    "db_id": "cre_Doc_and_collections",
    "question": "what are the collection names?",
    "answer": "SELECT DISTINCT T2.Collection_Name FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Parent_Collection_ID = 9</sql>"
  },
  {
    "id": 687,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the description of collection named Best?",
    "answer": "SELECT DISTINCT T2.Description FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collecrtion_Subset_Details = 'Best'</sql>"
  },
  {
    "id": 688,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection descriptions that are named as 'Best'?",
    "answer": "SELECT DISTINCT T2.Collection_Description FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Name = 'Best' AND T2.Description IN ('Winner', 'Runner-up', 'Nominee')</sql>"
  },
  {
    "id": 689,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the name of the parent collection of the collection named Nice?",
    "answer": "SELECT DISTINCT T2.Collection_Name FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = 'Nice' AND T2.Parent_Collection_ID IS NULL LIMIT 1</sql>"
  },
  {
    "id": 690,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the names of all parent collections of the collection named Nice?",
    "answer": "SELECT T1.parent_collection_name FROM Documents_in_Collections AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.collection_name = 'Nice' ORDER BY T2.parent_collection_name</sql>"
  },
  {
    "id": 691,
    "db_id": "cre_Doc_and_collections",
    "question": "Which collection is not the parent of other collection? List the collection's name.",
    "answer": "SELECT DISTINCT T2.Collection_Name FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID ORDER BY T1.Other_Details,T2.Collections.Name</sql>"
  },
  {
    "id": 692,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the names of the collections that are not the parent of the other collections?",
    "answer": "SELECT T1.Collection_Name FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID ORDER BY T2.Collections.Collection_ID DESC LIMIT 1</sql>"
  },
  {
    "id": 693,
    "db_id": "cre_Doc_and_collections",
    "question": "List document that have more than one child. List the document id.",
    "answer": "SELECT T1.Document_Object_ID FROM Documents AS T1 INNER JOIN Collection_Subsets AS T2 ON T1.Parent_Document_Object_ID = T2.Collection_Subset_ID ORDER BY T1.Description LIMIT 1</sql>"
  },
  {
    "id": 694,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the ids of the documents that have more than one child?",
    "answer": "SELECT T1.Parent_Collection_ID FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Child_Details IN ( SELECT DISTINCT T1.\"Document_Object_ID\", COUNT(DISTINCT T1)\" ,\"child_details\" ) GROUP BY T2.Parent_Collection_ID ORDER BY COUNT(T1.\") DESC LIMIT 1</sql"
  },
  {
    "id": 695,
    "db_id": "cre_Doc_and_collections",
    "question": "How many child collection does the collection named Best has?",
    "answer": "SELECT COUNT(Collection_Name) FROM Collections WHERE Collection_Subset_Name = 'Best' AND Collection_Description = 'child collection'</sql>"
  },
  {
    "id": 696,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of child collections belonging to the collection named Best?",
    "answer": "SELECT COUNT(T1.Collection_Name) FROM Documents AS T1 INNER JOIN Collections AS T2 ON T1.Document_Object_ID = T2.Collection_ID WHERE T1.Document_Subset_Name = 'Best' GROUP BY T2.Collection_Name ORDER BY T1.Count DESC LIMIT 1</sql>"
  },
  {
    "id": 697,
    "db_id": "cre_Doc_and_collections",
    "question": "List all document which is related to document owned by Ransom . List the document id .",
    "answer": "SELECT T1.Document_Object_ID FROM Documents_in_Collections AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Parent_Collection_ID = 'Ransom' LIMIT 1</sql>"
  },
  {
    "id": 698,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the document object ids of the related to the document owned by Ransom ?",
    "answer": "SELECT T1.Parent_Collection_ID FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = 'Ransom' ORDER BY T1.Document_Object_ID DESC LIMIT 1</sql>"
  },
  {
    "id": 699,
    "db_id": "cre_Doc_and_collections",
    "question": "List collection subset id, name and number of collections in each subset.",
    "answer": "SELECT T2.Collection_Subset_ID , strftime('%Y %m', T3.Date), strftime('%J', T1.Date) AS number FROM Documents_in_Collections AS T1 INNER JOIN Collection_Subsets AS T2 ON T1.Collection_Object_ID = T2.Collection_Subset_ID WHERE T2.Document_Name = 'Sample collection'</sql>"
  },
  {
    "id": 700,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection subset ids, names, and number of collections for each subset?",
    "answer": "SELECT T1.Collection_Subset_ID , T2.Collection_Name AS Collection_Name, COUNT(T2.Document_Object_ID) FROM Documents_in_Collections AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID ORDER BY T2.COLLECTION_SUBSET_DESCRIPTION</sql>"
  },
  {
    "id": 701,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document has most of child? List the document id and the number of child.",
    "answer": "SELECT DISTINCT T2.Document_Object_ID, SUM(T1.`Child` = 'true') FROM Documents_in_Collections AS T1 INNER JOIN Documents AS T2 ON T2.Collection_ID = T1.collection_id ORDER BY T1.parent_collection_id DESC LIMIT 1</sql>"
  },
  {
    "id": 702,
    "db_id": "cre_Doc_and_collections",
    "question": "For each document object id, how many children do they have?",
    "answer": "SELECT COUNT(DISTINCT T2.Document_Object_ID) FROM Documents AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Parent_Document_Object_id IS NOT NULL GROUP BY T2.parent_collection_id ORDER BY COUNT(DISTINCT T2.Collection_Subset_details) DESC LIMIT 3</sql>"
  },
  {
    "id": 703,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document has least number of related documents? List the document id and the number of related documents.",
    "answer": "SELECT T1.Document_Object_ID, SUM(T2.Count) AS num FROM Documents_in_Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID GROUP BY T1.Document_Object_ID ORDER BY COUNT(T2.Document_Object_ID), SUM(T1.num) DESC LIMIT 1</sql>"
  },
  {
    "id": 704,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the document object id with the least number of documents ?",
    "answer": "SELECT T1.Collection_ID FROM Documents AS T1 INNER JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID ORDER BY COUNT(T2.Collection_Name) LIMIT 1</sql>"
  },
  {
    "id": 705,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document has between 2 and 4 number of documents ? List the document id and the number of related documents .",
    "answer": "SELECT T3.Document_Object_ID, SUM(T1.numberOfDocs * 2) AS total FROM Documents_in_Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_id = T2.Collection_id WHERE T2.Document_object_id BETWEEN 2 AND 4 GROUP BY T2.Document_object_ID ORDER BY COUNT(T1.Document_Object_ID"
  },
  {
    "id": 706,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the ids of the dcouments that have between 2 and 4 related documents and how many related items are there?",
    "answer": "SELECT DISTINCT T1.Collection_Subset_ID FROM Documents AS T1 INNER JOIN Collection_Subsets AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID WHERE T2.Document_Description IN ('doc', 'desc') GROUP BY T2.Document_Subset_Details ORDER BY COUNT(T1.Document_Object_ID) / 30 DESC LIMIT 1</sql>"
  },
  {
    "id": 707,
    "db_id": "cre_Doc_and_collections",
    "question": "List all owner of documents that is related to documents owned by Braeden.",
    "answer": "SELECT T1.owner FROM Documents AS T1 INNER JOIN collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T2.collection_name = 'Braeden'</sql>"
  },
  {
    "id": 708,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different owners of documents that are related to ones owned by Braeden?",
    "answer": "SELECT T1.owner FROM Documents AS T1 INNER JOIN Collection_Subsets AS T2 ON T1.Parent_Document_Object_ID = T2.Collection_Subset_ID WHERE T1.Owner = 'Braeden' AND T2.Owner IS NULL</sql>"
  },
  {
    "id": 709,
    "db_id": "cre_Doc_and_collections",
    "question": "Which unique subset does document owned by Braeden belong to? List the subset name.",
    "answer": "SELECT T1.Name FROM Documents_in_Collections AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Parent_Collection_ID = 64 ORDER BY T2.Collecrtion_Subset_Details LIMIT 1</sql>"
  },
  {
    "id": 710,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different subset names of all documents owned by Braeden?",
    "answer": "SELECT T1.Name FROM Documents AS T1 INNER JOIN Collection_Subsets AS T2 ON T1.Document_Object_ID = T2.Parent_Document_Object_ID WHERE T2.Collection_Name = 'Braeden' ORDER BY T2.Name</sql>"
  },
  {
    "id": 711,
    "db_id": "cre_Doc_and_collections",
    "question": "List subset id, name and number of different documents in each subset.",
    "answer": "SELECT T1.Collection_Subset_Name , COUNT(DISTINCT T1.Parent_Collection_ID), SUM(DISTINCT T2.Document_Object_ID) FROM Documents_in_Collections AS T1 INNER JOIN Collection_Subsets AS T2 ON T1.Collection_ID = T2.Collection_ID GROUP BY T1.Collection_Subset_Name , T1.parent_collection_id ORDER BY T2.Number DESC LIMIT"
  },
  {
    "id": 712,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the subset id, name, and number of different documents for each subset?",
    "answer": "SELECT T1.Collection_Subset_ID , T2.Name , COUNT(T3.Description) FROM Collection_Subsets AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_Subset_ID = T2.Collection_ID GROUP BY T1.Document_Subset_id, T2.Name ORDER BY T1.collection_subset_id,T2.name DESC LIMIT 3</sql>"
  },
  {
    "id": 713,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document subset has most of number of distinct documents ? List subset id , name and number of documents .",
    "answer": "SELECT T1.Name, T2.Description FROM Documents_in_Collections AS T1 INNER JOIN Documents AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID GROUP BY T1.Collection_id ORDER BY SUM(DISTINCT COUNT(T1.Document_Object_id)) DESC LIMIT 1</sql>"
  },
  {
    "id": 714,
    "db_id": "cre_Doc_and_collections",
    "question": "For the document subset with the most number of different documents , what are the ids and names of the subset , as well as the number of documents ?",
    "answer": "SELECT T1.Parent_Collection_ID, T2.Description FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID ORDER BY T1.Count DESC LIMIT 10</sql>"
  },
  {
    "id": 715,
    "db_id": "cre_Doc_and_collections",
    "question": "For document subset named 'Best for 2000', List all document id that in this subset.",
    "answer": "SELECT T3.Document_Object_ID FROM Collection_Subsets AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_Subset_ID = T2.Collection_ID WHERE T2.Collection_Name = 'Best 2000'</sql>"
  },
  {
    "id": 716,
    "db_id": "cre_Doc_and_collections",
    "question": "For the document subset named 'Best for 2000', what are the document ids in that subset?",
    "answer": "SELECT T3.Document_Object_ID FROM Collection_Subsets AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_Subset_ID = T2.Collection_ID WHERE T2.Collection_Name LIKE 'Best%20200%'</sql>"
  },
  {
    "id": 717,
    "db_id": "cre_Doc_and_collections",
    "question": "List all document subsets of documents that related to each document id. List the name of document subset and the document id.",
    "answer": "SELECT DISTINCT T1.Name, T2.Document_Subset_id FROM Documents AS T1 INNER JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID GROUP BY T1.ID ORDER BY t2.Document_Object_ID DESC</sql>"
  },
  {
    "id": 718,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different subsets of documents related to each document id , list the name of the document subset and id of the actual document ?",
    "answer": "SELECT T2.Name, T1.Parent_Document_Object_ID FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID ORDER BY T1.collection_name </sql>"
  },
  {
    "id": 719,
    "db_id": "cre_Doc_and_collections",
    "question": "List the Collection Name that document owned by 'Ransom ' belong to .",
    "answer": "SELECT DISTINCT T2.Collection_Name FROM Documents AS T1 INNER JOIN Collections AS T2 ON T1.Document_Object_ID = T2.Collection_ID WHERE T2.Other_Details = 'Ransom' INTERSECT SELECT DISTINCT T2.collection_name FROM Collection AS T1 INNER JOIN Documents AS T2 ON T1.parent_collection_id = T2.parent_collection_id WHERE T2."
  },
  {
    "id": 720,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the collection name of a document owned by 'Ransom'?",
    "answer": "SELECT DISTINCT T2.Collection_Name FROM Documents AS T1 INNER JOIN Collections AS T2 ON T1.Document_Object_ID = T2.Collection_ID WHERE T2.T2.Owner = 'Ransom' AND T2.T2.Description = 'Wheat'</sql>"
  },
  {
    "id": 721,
    "db_id": "cre_Doc_and_collections",
    "question": "How many collections does each document belong to? List the count and the document id.",
    "answer": "SELECT COUNT(DISTINCT T1.Collection_Name), T2.Document_Object_ID FROM Documents AS T1 INNER JOIN Collections AS T2 ON T1.Parent_Document_Object_ID = T2.Collection_ID GROUP BY T2.Collection_Name ORDER BY COUNT(DISTINCT T1.Document_Object_ID)</sql>"
  },
  {
    "id": 722,
    "db_id": "cre_Doc_and_collections",
    "question": "For each document object id, how many collections does it belong to?",
    "answer": "SELECT COUNT(DISTINCT T1.Collection_ID) FROM Documents_in_Collections AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Parent_Collection_ID IN ( SELECT DISTINCT T2.Parent_Collection_ID FROM Collection AS T3 INNER JOIN Documents_in_Collections AS T4 ON T3.parent_collection_id = T4.Collection_ID WHERE"
  },
  {
    "id": 723,
    "db_id": "cre_Doc_and_collections",
    "question": "How many documents does collection named 'Best' has?",
    "answer": "SELECT COUNT(DISTINCT T1.Document_Object_ID) FROM Documents_in_Collections AS T1 INNER JOIN Collection_Subsets AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Document_Subset_Name = 'Best'</sql>"
  },
  {
    "id": 724,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of documents in the collection named 'Best'?",
    "answer": "SELECT COUNT(DISTINCT T1.Document_Object_ID) FROM Documents_in_Collections AS T1 INNER JOIN collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = 'Best' GROUP BY T1.Collection_ID ORDER BY COUNT(DISTINCT T1.Document_Object_ID) DESC LIMIT 1</sql>"
  },
  {
    "id": 725,
    "db_id": "cre_Doc_and_collections",
    "question": "List the document id of all documents in collection named Best.",
    "answer": "SELECT T2.Document_Object_ID FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = 'Best'</sql>"
  },
  {
    "id": 726,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of document object ids in the collection named Best?",
    "answer": "SELECT COUNT(DISTINCT T1.Document_Object_ID) FROM Documents_in_Collections AS T1 INNER JOIN collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.collection_name = 'Best' GROUP BY T1.Collection_ID ORDER BY COUNT(T2.Collection_Name) DESC LIMIT 1</sql>"
  },
  {
    "id": 727,
    "db_id": "cre_Doc_and_collections",
    "question": "Which collection have most number of documents? List collection name, id and number of documents.",
    "answer": "SELECT DISTINCT T2.Collection_Name , T1.Collection_ID , COUNT(T3.Document_Object_ID) FROM Documents_in_Collections AS T1 INNER JOIN collections AS T2 ON T1.Collection_ID = T2.Collection_ID INNER JOIN documents AS T3 ON T3.parent_collection_id = T2.Parent_Collection_ID GROUP BY T1.Collection_Name ORDER BY SUM(T1.Count)"
  },
  {
    "id": 728,
    "db_id": "cre_Doc_and_collections",
    "question": "For ever collection named 'Best', what is the name and id of the one with the most documents, and how many documents does it have?",
    "answer": "SELECT DISTINCT T2.Collection_Name , T1.Document_Object_ID AS Document_Id FROM Documents_in_Collections AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID ORDER BY COUNT(T2.Collection_Name) DESC LIMIT 1</sql>"
  },
  {
    "id": 729,
    "db_id": "cre_Doc_and_collections",
    "question": "List id of documents that in document subset Best for 2000 and collection named Best.",
    "answer": "SELECT T2.Document_Object_ID FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.`Document_Subset_Name` LIKE 'Best%' GROUP BY T2.Document_Object_ID ORDER BY T1.`Document_Subset_Details`' DESC LIMIT 2</sql>"
  },
  {
    "id": 730,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different document object ids in the subset named 'Best for 2000' and in the collection named 'Best'?",
    "answer": "SELECT T3.Collection_Subset_Name FROM Documents_in_Collections AS T1 INNER JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID INNER JOIN Documents_in_Collections AS T3 ON T2.Document_Object_ID = T3.Document_Object_ID WHERE T1.Other_Details = 'Best for 2000' AND T3.Collecrtion_Sub"
  },
  {
    "id": 731,
    "db_id": "cre_Doc_and_collections",
    "question": "List id of documents that in collection named Best but not in document subset Best for 2000.",
    "answer": "SELECT T2.Collection_ID FROM Documents AS T1 INNER JOIN Collections AS T2 ON T1.Document_Object_ID = T2.Collection_ID WHERE T2.COLLECTION_NAME = 'Best but not in document subset' AND strftime('%Y', T1.TARGET_DEPT) != '2000'</sql>"
  },
  {
    "id": 732,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different document object ids that are in the collection named Best but not in the subset named 'Best for 2000'?",
    "answer": "SELECT T3.Collection_ID FROM Documents_in_Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.collection_name = 'Best' AND T1.document_object_id IN ( SELECT DISTINCT T1.Document_Object_ID FROM Documents_in_Collections AS T3 INNER JOIN Documents_subsets AS T4 ON T3."
  },
  {
    "id": 733,
    "db_id": "cre_Doc_and_collections",
    "question": "List id of documents that in document subset Best for 2000 or in collection named Best.",
    "answer": "SELECT T1.Document_Object_ID FROM Documents_in_Collections AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE strftime('%Y', T2.Date) LIKE '%Best%'</sql>"
  },
  {
    "id": 734,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different document ids that are in the subset named 'Best for 2000' or in the collection named 'Best'?",
    "answer": "SELECT T3.Document_Object_ID FROM Collection_Subsets AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_Subset_ID = T2.Collection_ID WHERE T1.Collection_Name IN ('Best for 2000', 'Best') AND T2.PRIMARY KEY (T3.Document_Object_ID)</sql>"
  },
  {
    "id": 735,
    "db_id": "cre_Doc_and_collections",
    "question": "List all name of collections that are related to collection named Best.",
    "answer": "SELECT DISTINCT T2.Collection_Name FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.collection_name = 'Best'</sql>"
  },
  {
    "id": 736,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the names of the collections that are related to the collection named Best?",
    "answer": "SELECT DISTINCT T2.Collection_Name FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = 'Best' ORDER BY T3.Document_Object_ID DESC LIMIT 1</sql>"
  },
  {
    "id": 737,
    "db_id": "cre_Doc_and_collections",
    "question": "How many collections that are related to collection named Best?",
    "answer": "SELECT COUNT(T1.Collection_Name) FROM Documents AS T1 INNER JOIN Collections AS T2 ON T1.Document_Object_ID = T2.Collection_ID WHERE T1.Parent_Collection_Name = 'Best'</sql>"
  },
  {
    "id": 738,
    "db_id": "cre_Doc_and_collections",
    "question": "How many different collections are related to the one named 'Best'?",
    "answer": "SELECT COUNT(DISTINCT T2.Collection_Name) FROM Documents_in_Collections AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.collection_name = 'Best' ORDER BY T1.collection_name LIMIT 1</sql>"
  },
  {
    "id": 739,
    "db_id": "cre_Doc_and_collections",
    "question": "Which collection subset does collection name Best in? List collection subset name.",
    "answer": "SELECT DISTINCT T2.Collection_Name FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.collection_id = T2.collection_id WHERE T2.collection_name = 'Best' ORDER BY T3.parent_collection_id DESC LIMIT 1</sql>"
  },
  {
    "id": 740,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection subsets that the collection named 'Best' in?",
    "answer": "SELECT DISTINCT T2.Collection_Name FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = 'Best' ORDER BY T3.Collection_Subset_Details</sql>"
  },
  {
    "id": 741,
    "db_id": "sing_contest",
    "question": "How many songs contain \"Love\" in their names?",
    "answer": "SELECT COUNT(DISTINCT T1.name), SUM(CASE WHEN T2.`language` = 'en' THEN 1 ELSE NULL END) AS total FROM ( SELECT DISTINCT T1.name AS T2, `songs_id`, `popularity` AS sum FROM songs WHERE `original_artist` = 'love' GROUP BY `title` ) AS T1 INNER JOIN performances AS T2 ON T1.participant_id = T"
  },
  {
    "id": 742,
    "db_id": "sing_contest",
    "question": "List the name of the songs in ascending, lexicographical order.",
    "answer": "SELECT T1.name FROM \"songs\" AS T1 INNER JOIN participant_id AS T2 ON T1.songs_id = T2.id ORDER BY T2.popularity ASC LIMIT 1</sql>"
  },
  {
    "id": 743,
    "db_id": "sing_contest",
    "question": "List the names and languages of the songs .",
    "answer": "SELECT DISTINCT T2.name, T3.language FROM \"songs AS T1 INNER JOIN performances AS T2 ON T1.songs_id = T2.songs_id INNER JOIN participants AS T3 ON T1.participant_id = T3.id WHERE T3.popularity = 'high' ORDER BY T3.name LIMIT 5</sql>"
  },
  {
    "id": 744,
    "db_id": "sing_contest",
    "question": "What are the maximum and minimum voice sound quality score of the performances?",
    "answer": "SELECT SUM(vocal_sound_quality), AVG(T2.voice_sound_quality) FROM ( SELECT MAX(T1.voice_sound_quality), MIN(T1.voice_sound_quality) AS T1 , `songs`.id FROM performance_score AS T1 INNER JOIN songs AS T2 ON T1.participant_id = T2.id GROUP BY T2.name ORDER BY SUM(T1.voice_sound"
  },
  {
    "id": 745,
    "db_id": "sing_contest",
    "question": "What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?",
    "answer": "SELECT DISTINCT T2.voice_sound_quality, T1.rhythmic_tempo, T2.stage_presence FROM songs AS T1 INNER JOIN performance_score AS T2 ON T1.id = T2.participant_id WHERE T1.name = 'freeway'</sql>"
  },
  {
    "id": 746,
    "db_id": "sing_contest",
    "question": "What are the id, language and original artist of the songs whose name is not 'Love'?",
    "answer": "SELECT DISTINCT T2.name FROM \"songs\" AS T1 INNER JOIN participants AS T2 ON T1.id = T2.popularity WHERE T1.title != 'Love'</sql>"
  },
  {
    "id": 747,
    "db_id": "sing_contest",
    "question": "What are the names and original artists of the song whose English translation is 'All the streets of love'?",
    "answer": "SELECT DISTINCT T1.name, T2.original_artist FROM `songs` AS T1 INNER JOIN performances AS T2 ON T1.id = T2.participant_id WHERE T2.language = 'english' AND T1.name = 'All the streets of love'</sql>"
  },
  {
    "id": 748,
    "db_id": "sing_contest",
    "question": "What are the distinct stage presence scores for all the songs that are in language 'English' ?",
    "answer": "SELECT SUM(DISTINCT T1.stage_presence) FROM ( SELECT id, AVG(T2.voice_sound_quality) AS sum , SUBSTR(T1.name,'song_name__startswith=\"\") AS str_title , MAX(T1.id) AS participant_id FROM \"performance_score\" AS T1 INNER JOIN songs AS T2 ON T1.songs_id = T2.id WHERE T2."
  },
  {
    "id": 749,
    "db_id": "sing_contest",
    "question": "What are the ids and names of the participants who have performed at least two songs?",
    "answer": "SELECT DISTINCT T2.name, T3.name FROM performance_score AS T1 INNER JOIN \"participants\" AS T2 ON T1.participant_id = T2.id WHERE T1.songs_id BETWEEN 1 AND COUNT(T1.songs_id) / 2 GROUP BY T2.name ORDER BY SUM(T2.popularity) > 1</sql>"
  },
  {
    "id": 750,
    "db_id": "sing_contest",
    "question": "What are the ids, names and popularity of the participants, order by the number of songs they perform?",
    "answer": "SELECT id FROM performance_score ORDER BY COUNT(T2.participant_id), T1.name ASC LIMIT 1</sql>"
  },
  {
    "id": 751,
    "db_id": "sing_contest",
    "question": "What are the id and name of the participants who received score 5 for their sound quality or rhythm tempo?",
    "answer": "SELECT T1.id, T2.name FROM performance_score AS T1 INNER JOIN `participants` AS T2 ON T1.participant_id = T2.id ORDER BY T1.score DESC LIMIT 5</sql>"
  },
  {
    "id": 752,
    "db_id": "sing_contest",
    "question": "What are the voice sound quality scores received for the song named ' The Balkan Girls ' in English language ?",
    "answer": "SELECT DISTINCT T2.voice_sound_quality, T1.name, T1.original_artist FROM `performance_score` AS T1 INNER JOIN songs AS T2 ON T2.songs_id = T1.songs_id WHERE T1.language = 'english' AND T2.name = 'The Balkan Girls '</sql>"
  },
  {
    "id": 753,
    "db_id": "sing_contest",
    "question": "What are the id and name of the song sung by the most participants?",
    "answer": "SELECT T1.name, T2.name FROM ( SELECT MAX(T1.\"id\"), T2.name FROM `participants` AS T1 INNER JOIN songs AS T2 ON T1.id = T2.songs_id ORDER BY T1.`popularity` DESC LIMIT 1</sql>"
  },
  {
    "id": 754,
    "db_id": "sing_contest",
    "question": "How many performances have a stage presence score less than 7 or higher than 9?",
    "answer": "SELECT COUNT(DISTINCT T1.participant_id), SUM(IIF('stage_presence' < 'high') > '7', 1, 0)) AS total , SUM(IIF('stage_presence' = 'high', '9', 1)) AS high FROM performances AS T1 INNER JOIN songs AS T2 ON T1.songs_id = T2.id WHERE T1.name = 'performances' GROUP BY"
  },
  {
    "id": 755,
    "db_id": "sing_contest",
    "question": "How many songs listed are not performed?",
    "answer": "SELECT COUNT(DISTINCT T1.name), SUM(T2.popularity * 100 / T3.popularity) AS total FROM ( SELECT DISTINCT T2.language, T3.title FROM \"songs\" AS T1 INNER JOIN participants AS T2 ON T1.participant_id = T2.id INNER JOIN performances AS T3 ON T2.name = T3.singer WHERE T1.name !="
  },
  {
    "id": 756,
    "db_id": "sing_contest",
    "question": "What are the average rhythm scores for the songs in each different language?",
    "answer": "SELECT AVG(T2.rhythm_tempo), SUM(T1.`participant_id`) AS num FROM `songs` AS T1 INNER JOIN performance_score AS T2 ON T1.songs_id = T2.songs_id GROUP BY T2.language</sql>"
  },
  {
    "id": 757,
    "db_id": "sing_contest",
    "question": "What are the distinct names of the participants who have sung a song in 'English'?",
    "answer": "SELECT T1.name FROM \"participants\" AS T1 INNER JOIN songs AS T2 ON T1.id = T2.songs_id WHERE T2.language IS NULL AND T2.`ENGLISH` IN ( SELECT distinct T1.`name` FROM participants AS T1 INNER JOIN songs AS T2 ON T1.id = T2.songs_id WHERE T2.lang LIKE 'english' AND T2.language != 'en"
  },
  {
    "id": 758,
    "db_id": "sing_contest",
    "question": "What are the name and popularity of participants who have sung a song both in 'Croatian' language and in 'English' language?",
    "answer": "SELECT T1.name, T2.popularity FROM participant AS T1 INNER JOIN songs AS T2 ON T1.id = T2.songs_id WHERE T2.language = 'croatian' AND T2.voice_sound_quality = 'f390884676B6D5A2FBCC06' AND T2.english_translation = 'yelena-na-mik"
  },
  {
    "id": 759,
    "db_id": "sing_contest",
    "question": "Which song names have the substring \"Is\"?",
    "answer": "SELECT DISTINCT T1.name FROM songs AS T1 INNER JOIN performance_score AS T2 ON T1.id = T2.participant_id WHERE T1.name LIKE 'is' ORDER BY T1.name LIMIT 1</sql>"
  },
  {
    "id": 760,
    "db_id": "sing_contest",
    "question": "Find the original artists who sing songs with rhythm tempo above 5 , and list results in descending order of voice sound quality .",
    "answer": "SELECT DISTINCT T1.name FROM performances AS T1 INNER JOIN song AS T2 ON T1.id = T2.songs_id WHERE T1.voice_sound_quality BETWEEN 5 AND T2.rhythm_tempo DESC LIMIT 1</sql>"
  },
  {
    "id": 761,
    "db_id": "address_1",
    "question": "How many cities do we have?",
    "answer": "SELECT COUNT(city_code) FROM City WHERE city_name = 'Washington DC' GROUP BY city_name ORDER BY COUNT(city_code) DESC LIMIT 1</sql>"
  },
  {
    "id": 762,
    "db_id": "address_1",
    "question": "Count the number of cities.",
    "answer": "SELECT COUNT(*) FROM City WHERE city_name = 'New York City'</sql>"
  },
  {
    "id": 763,
    "db_id": "address_1",
    "question": "List all different states .",
    "answer": "SELECT T3.state FROM City AS T1 INNER JOIN State AS T2 ON T1.city_code = T2.city_code WHERE T2.country = 'USA' AND T2.Latitude IS NULL LIMIT 1</sql>"
  },
  {
    "id": 764,
    "db_id": "address_1",
    "question": "What are all the distinct states?",
    "answer": "SELECT T3.state FROM City AS T1 INNER JOIN State AS T2 ON T1.city_code = T2.city_code WHERE T2.country = 'USA' GROUP BY T3.state ORDER BY COUNT(T2.longitude) ASC LIMIT 1</sql>"
  },
  {
    "id": 765,
    "db_id": "address_1",
    "question": "How many countries do we have?",
    "answer": "SELECT COUNT(city_code) FROM City WHERE city_name IN ('Amsterdam','Berlin')</sql>"
  },
  {
    "id": 766,
    "db_id": "address_1",
    "question": "Count the number of coutries.",
    "answer": "SELECT COUNT(city_code) FROM City WHERE state = 'united-states' GROUP BY city_code ORDER BY COUNT(city_code) DESC LIMIT 1</sql>"
  },
  {
    "id": 767,
    "db_id": "address_1",
    "question": "Show names, codes, states, countries for all cities.",
    "answer": "SELECT DISTINCT T1.city_name , T3.city_code FROM City AS T1 INNER JOIN State AS T2 ON T1.city_code = T2.city_code INNER JOIN Country AS T3 ON T1.country = T3.country WHERE T1.city_name = 'Los Angeles, CA'</sql>"
  },
  {
    "id": 768,
    "db_id": "address_1",
    "question": "What are the names, codes, states, and countries for all cities?",
    "answer": "SELECT DISTINCT T1.city_name , T3.state, T1.country FROM City AS T1 INNER JOIN direct_distance AS T2 ON T1.city_code = T2.city_code INNER JOIN state AS T3 ON T3.city_code = T2.city_code ORDER BY city_code</sql>"
  },
  {
    "id": 769,
    "db_id": "address_1",
    "question": "What is the latitude and longitude for Baltimore?",
    "answer": "SELECT T3.latitude , T3.longitude FROM City AS T1 INNER JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T1.city_name = 'Baltimore' AND T1.state  =  'MD'</sql>"
  },
  {
    "id": 770,
    "db_id": "address_1",
    "question": "What latitude and longitude correspond to Baltimore?",
    "answer": "SELECT T3.longitude, T3.latitude FROM City AS T1 INNER JOIN direct_distance AS T2 ON T1.city_code = T2.city1_code INNER JOIN city AS T2 ON T2.city_code = T2.city_code WHERE T1.name = 'Baltimore'</sql>"
  },
  {
    "id": 771,
    "db_id": "address_1",
    "question": "Show names for all cities in state PA.",
    "answer": "SELECT DISTINCT T1.city_name FROM City AS T1 INNER JOIN state AS T2 ON T1.city_code = T2.state WHERE T2.country  = 'USA' GROUP BY T1.city_name ORDER BY T1.city_name LIMIT 1</sql>"
  },
  {
    "id": 772,
    "db_id": "address_1",
    "question": "What are the names of all cities in PA?",
    "answer": "SELECT DISTINCT T1.city_name FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code WHERE T1.state IN ('PA', 'NJ') ORDER BY T1.latitude LIMIT 1</sql>"
  },
  {
    "id": 773,
    "db_id": "address_1",
    "question": "How many cities are in Canada?",
    "answer": "SELECT COUNT(T1.city_code) FROM City AS T1 INNER JOIN Province AS T2 ON T1.city_name = T2.city_name WHERE T2.country = 'Canada'</sql>"
  },
  {
    "id": 774,
    "db_id": "address_1",
    "question": "Count the number of cities in Canada.",
    "answer": "SELECT COUNT(T1.city_code) FROM City AS T1 INNER JOIN Distance AS T2 ON T1.city_code = T2.city_code WHERE T2.country  = 'canada'</sql>"
  },
  {
    "id": 775,
    "db_id": "address_1",
    "question": "Show names for all USA city ordered by latitude.",
    "answer": "SELECT DISTINCT T1.city_name ORDER BY T3.longitude LIMIT 1</sql>"
  },
  {
    "id": 776,
    "db_id": "address_1",
    "question": "What are all the city names for cities in the USA, ordered by latitude?",
    "answer": "SELECT DISTINCT T1.city_name ORDER BY T2.latitude ASC LIMIT 1</sql>"
  },
  {
    "id": 777,
    "db_id": "address_1",
    "question": "Show all states and number of cities in each state.",
    "answer": "SELECT DISTINCT T1.state , COUNT(T2.city_name) FROM State AS T1 INNER JOIN City AS T2 ON T1.state = T2.city_code WHERE T1.country = 'US' GROUP BY T1.state ORDER BY T1.country DESC LIMIT 1</sql>"
  },
  {
    "id": 778,
    "db_id": "address_1",
    "question": "How many cities are in each state?",
    "answer": "SELECT DISTINCT T1.city_name, COUNT(DISTINCT T3.city_code) FROM City AS T1 INNER JOIN State AS T2 ON T1.city_code = T2.state_name GROUP BY T2.city_name ORDER BY SUM(T1.longitude + T1.latitude) / 60 + COUNT(DISTINCT T3.city_code) DESC LIMIT 3</sql>"
  },
  {
    "id": 779,
    "db_id": "address_1",
    "question": "Show all countries and number of cities in each .",
    "answer": "SELECT T3.city_name , COUNT(DISTINCT T1.city_code) FROM City AS T1 INNER JOIN City AS T2 ON T1.city_code = T2.city_code GROUP BY T2.city_name ORDER BY DISTINCT T1.city_code LIMIT 1</sql>"
  },
  {
    "id": 780,
    "db_id": "address_1",
    "question": "How many cities are there in each country?",
    "answer": "SELECT DISTINCT T1.city_name, COUNT(DISTINCT T3.city_code) FROM City AS T1 INNER JOIN Country AS T2 ON T1.city_code = T2.country WHERE T2.country = 'US' AND T2.country != '' GROUP BY T1.city_code ORDER BY COUNT(T2.city_code) DESC LIMIT 1</sql>"
  },
  {
    "id": 781,
    "db_id": "address_1",
    "question": "List all states with at least two cities.",
    "answer": "SELECT DISTINCT T1.state FROM City AS T1 INNER JOIN State AS T2 ON T1.city_code = T2.city_code GROUP BY T1.state ORDER BY COUNT(T1.city_code) > 1</sql>"
  },
  {
    "id": 782,
    "db_id": "address_1",
    "question": "Which states have at least two cities?",
    "answer": "SELECT DISTINCT T1.city_name FROM City AS T1 INNER JOIN States AS T2 ON T1.city_code = T2.state WHERE T2.country IS NOT NULL GROUP BY city_name ORDER BY COUNT(T1.city_id) > 2 GROUP BY T2.city_name</sql>"
  },
  {
    "id": 783,
    "db_id": "address_1",
    "question": "Which state has most number of cities?",
    "answer": "SELECT DISTINCT T1.state FROM City AS T1 INNER JOIN State AS T2 ON T1.city_code = T2.state ORDER BY COUNT(T2.name) DESC LIMIT 1</sql>"
  },
  {
    "id": 784,
    "db_id": "address_1",
    "question": "Give the state that has the most cities.",
    "answer": "SELECT DISTINCT T1.state FROM City AS T1 INNER JOIN State AS T2 ON T1.city_code = T2.state WHERE T2.country = 'us' GROUP BY T2.country ORDER BY COUNT(T1.city_code) DESC LIMIT 1</sql>"
  },
  {
    "id": 785,
    "db_id": "address_1",
    "question": "Which country has fewest number of cities?",
    "answer": "SELECT DISTINCT T1.country FROM City AS T1 INNER JOIN Country AS T2 ON T1.city_code = T2.city_code ORDER BY COUNT(T1.city_name) LIMIT 1</sql>"
  },
  {
    "id": 786,
    "db_id": "address_1",
    "question": "Give the country with the fewest number of cities.",
    "answer": "SELECT DISTINCT T1.country FROM City AS T1 INNER JOIN state AS T2 ON T1.city_code = T2.city_code ORDER BY COUNT(T1.city_name) LIMIT 1</sql>"
  },
  {
    "id": 787,
    "db_id": "address_1",
    "question": "Show the first name and the last name for students living in state MD.",
    "answer": "SELECT T1.firstname, T1.lastname FROM Student AS T1 INNER JOIN City AS T2 ON T1.StuID = T2.city_code WHERE T2.state = 'MD'</sql>"
  },
  {
    "id": 788,
    "db_id": "address_1",
    "question": "What are the full names of students living in MD?",
    "answer": "SELECT DISTINCT T1.LName FROM Student AS T1 INNER JOIN City AS T2 ON T1.StuID = T2.city_code WHERE T2.country = 'US' ORDER BY T2.city_name</sql>"
  },
  {
    "id": 789,
    "db_id": "address_1",
    "question": "How many students live in China?",
    "answer": "SELECT COUNT(T1.city_code) FROM City AS T1 INNER JOIN STUDENT AS T2 ON T1.city_code = T2.StuID WHERE T1.state = 'CN' AND T2.sex = 'F' INTERSECT SELECT T2.Lname, T2.towns, COUNT(T2.city_code) FROM City AS T1 INNER JOIN STUDENT AS T2 ON T1.city_"
  },
  {
    "id": 790,
    "db_id": "address_1",
    "question": "Count the number of students living in China.",
    "answer": "SELECT COUNT(T1.StuID) FROM City AS T1 INNER JOIN student AS T2 ON T1.city_code = T2.city_code WHERE T1.country = 'china' AND T1.state = 'rkkiang'</sql>"
  },
  {
    "id": 791,
    "db_id": "address_1",
    "question": "Return the first name and major of students are living in Baltimore?",
    "answer": "SELECT T3.Fname, T1.major FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code WHERE T2.state LIKE '%baltimore%' ORDER BY T2.StuID LIMIT 1</sql>"
  },
  {
    "id": 792,
    "db_id": "address_1",
    "question": "What are the first names and majors of students living in Baltimore?",
    "answer": "SELECT DISTINCT T1.LName, T3.Major FROM Student AS T1 INNER JOIN City AS T2 ON T1.StuID = T2.city_code INNER JOIN ( SELECT T2.city_name, MAX(T4.first) AS first FROM City AS T2 INNER JOIN direct_distance AS T3 ON T3.city1_code = T2.city_code WHERE T1.city_name = 'Balt"
  },
  {
    "id": 793,
    "db_id": "address_1",
    "question": "Show the number of students living in each country.",
    "answer": "SELECT COUNT(*) , T1.city_name FROM City AS T1 INNER JOIN city_name AS T2 ON T1.city_code = T2.city_code GROUP BY T1.city_name ORDER BY COUNT(T2.city_name) DESC LIMIT 1</sql>"
  },
  {
    "id": 794,
    "db_id": "address_1",
    "question": "How many students live in each country?",
    "answer": "SELECT COUNT(T1.city_code) , T2.country FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.StuID WHERE T1.state = 'RU' GROUP BY T1.city_code ORDER BY COUNT(T2.country) DESC LIMIT 5</sql>"
  },
  {
    "id": 795,
    "db_id": "address_1",
    "question": "Find the number of students living in each city.",
    "answer": "SELECT DISTINCT T1.city_name, SUM(T2.distance / COUNT(T3.StuID)) AS num FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code INNER JOIN Student AS T3 ON T1.StuID = T3.StuID WHERE T3.LName = 'Anaheim' GROUP BY T1.city_name ORDER BY SUM"
  },
  {
    "id": 796,
    "db_id": "address_1",
    "question": "How many students live in each city?",
    "answer": "SELECT SUM(COUNT(T1.city_code)) FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.StuID WHERE T1.city_name IN ('A', 'B') GROUP BY T1.city_name ORDER BY SUM(T1.city_code) DESC LIMIT 1</sql>"
  },
  {
    "id": 797,
    "db_id": "address_1",
    "question": "Which state has most number of students?",
    "answer": "SELECT DISTINCT T1.state FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.StuID WHERE T2.Fname = 'David' ORDER BY COUNT(T1.city_name) DESC LIMIT 1</sql>"
  },
  {
    "id": 798,
    "db_id": "address_1",
    "question": "Give the state that has the most students.",
    "answer": "SELECT DISTINCT T1.state FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.StuID ORDER BY T2.LName, T2.Fname DESC LIMIT 1</sql>"
  },
  {
    "id": 799,
    "db_id": "address_1",
    "question": "Which country has least number of students?",
    "answer": "SELECT DISTINCT T1.country FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.StuID ORDER BY COUNT(T1.city_name) DESC LIMIT 1</sql>"
  },
  {
    "id": 800,
    "db_id": "address_1",
    "question": "Give the country with the fewest students.",
    "answer": "SELECT DISTINCT T1.country FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.StuID WHERE T2.sex != 'F' GROUP BY T1.city_name ORDER BY COUNT(T2.StuID) LIMIT 1</sql>"
  },
  {
    "id": 801,
    "db_id": "address_1",
    "question": "Show names for all cities where at least three students live.",
    "answer": "SELECT DISTINCT T1.city_name FROM City AS T1 INNER JOIN student AS T2 ON T1.city_code = T2.StuID WHERE T2.LName IS NOT NULL AND T2.Fname LIKE '%@%' ORDER BY COUNT(T1.city_name) > 3</sql>"
  },
  {
    "id": 802,
    "db_id": "address_1",
    "question": "What are the names of cities with at least three students?",
    "answer": "SELECT DISTINCT T1.city_name FROM City AS T1 INNER JOIN student AS T2 ON T1.city_code = T2.StuID ORDER BY COUNT(T2.StuID) DESC LIMIT 3</sql>"
  },
  {
    "id": 803,
    "db_id": "address_1",
    "question": "Show all states where more than 5 students live.",
    "answer": "SELECT DISTINCT T1.state FROM City AS T1 INNER JOIN State AS T2 ON T1.city_code = T2.city_code WHERE T2.countries = 'us' ORDER BY COUNT(T1.city_code) DESC LIMIT 5</sql>"
  },
  {
    "id": 804,
    "db_id": "address_1",
    "question": "What are the states with more than 5 students?",
    "answer": "SELECT DISTINCT T1.state FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.StuID WHERE T2.Age BETWEEN 6 AND 13 ORDER BY COUNT(T1.longitude) DESC LIMIT 5</sql>"
  },
  {
    "id": 805,
    "db_id": "address_1",
    "question": "Show ids for all students who don't live in USA.",
    "answer": "SELECT StuID FROM Student WHERE city_name = 'United States of America' UNION SELECT DISTINCT StuID FROM City WHERE state != 'USA' AND country != 'USA' ORDER BY StuID LIMIT 1</sql>"
  },
  {
    "id": 806,
    "db_id": "address_1",
    "question": "What the the student ids for students not living in the USA?",
    "answer": "SELECT DISTINCT StuID FROM Student WHERE city_name = 'USA' AND location != ''</sql>"
  },
  {
    "id": 807,
    "db_id": "address_1",
    "question": "Show ids for all female (sex is F) students living in state PA.",
    "answer": "SELECT DISTINCT T1.StuID FROM City AS T1 INNER JOIN student AS T2 ON T1.city_code = T2.city_code WHERE T1.state IN ('PA', 'WV') AND T2.Sex = 'F'</sql>"
  },
  {
    "id": 808,
    "db_id": "address_1",
    "question": "What are the student ids for female students in the state of PA?",
    "answer": "SELECT StuID FROM City WHERE city_name = 'PA' AND sex = 'female' LIMIT 1</sql>"
  },
  {
    "id": 809,
    "db_id": "address_1",
    "question": "Show ids for all male students living outside of USA.",
    "answer": "SELECT DISTINCT T1.StuID FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T2.sex IN ('F', 'M') AND T1.country = 'USA'</sql>"
  },
  {
    "id": 810,
    "db_id": "address_1",
    "question": "What are the ids for male students not in the USA?",
    "answer": "SELECT T3.city_code FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.StuID WHERE T2.sex != 'F' AND T1.country != 'USA' ORDER BY T1.latitude DESC LIMIT 1</sql>"
  },
  {
    "id": 811,
    "db_id": "address_1",
    "question": "What is the distance between BAL and CHI?",
    "answer": "SELECT T3.distance FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T1.city_name = 'BAL' AND T1.city_name  = 'Chicago'</sql>"
  },
  {
    "id": 812,
    "db_id": "address_1",
    "question": "Give the distance between BAL and CHI?",
    "answer": "SELECT DISTINCT T1.distance FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T1.state  =  'bal' AND T1.cityname = 'chicago'</sql>"
  },
  {
    "id": 813,
    "db_id": "address_1",
    "question": "Show me the distance between Boston and Newark.",
    "answer": "SELECT DISTINCT T1.distance FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T2.cityname = 'Boston' AND T2.city_code IN ( 'newark', 'new jersey')</sql>"
  },
  {
    "id": 814,
    "db_id": "address_1",
    "question": "What is the distance between Boston and Newark?",
    "answer": "SELECT T3.distance FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code INNER JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T1.city_name = 'Boston' AND T2.city1_code = 'newark'</sql>"
  },
  {
    "id": 815,
    "db_id": "address_1",
    "question": "What is the average, minimum, maximum distance between two cities?",
    "answer": "SELECT AVG(T1.distance), MAX(T1.distance), MIN(T2.distance) FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city_code ORDER BY T2.`longitude`, T2.`latitude` DESC LIMIT 5</sql>"
  },
  {
    "id": 816,
    "db_id": "address_1",
    "question": "Give the average, minimum, and maximum distances between two cities.",
    "answer": "SELECT SUM(AVG(distance)) , MAX(distance), MIN(distance) FROM City WHERE city_name IN ('Los Angeles', 'San Francisco') GROUP BY city_code ORDER BY AVG(longitude) DESC LIMIT 1</sql>"
  },
  {
    "id": 817,
    "db_id": "address_1",
    "question": "Show me the city code of two cities with maximum distance.",
    "answer": "SELECT DISTINCT T1.city_code FROM City AS T1 INNER JOIN CityDistance AS T2 ON T1.city_code = T2.city_code ORDER BY MAX(T1.distance) DESC LIMIT 2</sql>"
  },
  {
    "id": 818,
    "db_id": "address_1",
    "question": "What are the city codes of the cities with the maximum distance?",
    "answer": "SELECT DISTINCT T1.city_code FROM City AS T1 INNER JOIN ( SELECT MAX(T2.distance), T3.city_name FROM City AS T2 INNER JOIN Direct_distance AS T3 ON T1.city_code = T3.city_code WHERE T3.FOREIGN KEY(city_code) REFERENCES City(city_code)) AS T4 ORDER BY T4.city_name DESC LIMIT 1</sql"
  },
  {
    "id": 819,
    "db_id": "address_1",
    "question": "Show me the city code of two cities with a distance greater than the average.",
    "answer": "SELECT DISTINCT T1.city_code FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.StuID WHERE T2.Age > ( SELECT MAX(T2.Age) FROM City WHERE city_name = 'Chicago' ) AND T1.longitude < -180 ORDER BY T2.Fname, T2.LName DESC LIMIT 2</sql>"
  },
  {
    "id": 820,
    "db_id": "address_1",
    "question": "What are the city codes of cities with distance greater than average?",
    "answer": "SELECT DISTINCT T1.city_code FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.StuID WHERE T2.Age > ( SELECT SUM(T3.distance) / COUNT(*) FROM Direct_distance AS T3 INNER JOIN City AS T4 ON T1.city_code = T4 .city_code WHERE distance > AVG(T1.Distance) AND Sex = 'F' GROUP BY T"
  },
  {
    "id": 821,
    "db_id": "address_1",
    "question": "Show me the city code of two cities with a distance less than 1000.",
    "answer": "SELECT DISTINCT T3.city_code FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.StuID WHERE T1.longitude BETWEEN -95 AND -871</sql>"
  },
  {
    "id": 822,
    "db_id": "address_1",
    "question": "What are the city codes corresponding to cities with distances less than 1000?",
    "answer": "SELECT DISTINCT T3.city_code FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.StuID WHERE T1.longitude &lt;&gt; 146 AND T2.age&lt;&gt; 80 LIMIT 1</sql>"
  },
  {
    "id": 823,
    "db_id": "address_1",
    "question": "What is the total distance between city BAL and all other cities.",
    "answer": "SELECT SUM(distance) FROM City AS T1 INNER JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T1.city_name = 'BAL' GROUP BY T1.city_name ORDER BY DISTINCT COUNT(T2.city_code)</sql>"
  },
  {
    "id": 824,
    "db_id": "address_1",
    "question": "What is the sum of distances between BAL and other cities?",
    "answer": "SELECT SUM(distance) FROM City AS T1 INNER JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T1.state = 'bal' AND T1.longitude > 67.387 AND T2.city_name IN ('ballymount', 'carnoustie')</sql>"
  },
  {
    "id": 825,
    "db_id": "address_1",
    "question": "What is the average distance between Boston and all other cities.",
    "answer": "SELECT AVG(T1.distance) FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE city_name LIKE '%boston%' GROUP BY T1.city_code ORDER BY COUNT(T2.city1_code) DESC LIMIT 3</sql>"
  },
  {
    "id": 826,
    "db_id": "address_1",
    "question": "Give the average distance between Boston and other cities.",
    "answer": "SELECT SUM(DISTINCT T1.distance / COUNT(T2.city_code)) AS avg FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city_code WHERE T2.city2_code IN ('Boston', 'Portland') GROUP BY city2_code ORDER BY SUM(DISTINCT T2.distance) / COUNT(T2.city_code) DESC LIMIT 1</"
  },
  {
    "id": 827,
    "db_id": "address_1",
    "question": "What is the name of the city closest to Chicago?",
    "answer": "SELECT T3.city_name FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T2.city2_code  = 'chicago' ORDER BY T3.longitude LIMIT 1</sql>"
  },
  {
    "id": 828,
    "db_id": "address_1",
    "question": "Give the name of the nearest city to Chicago.",
    "answer": "SELECT T3.city_name FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T1.city_code = 'chicago' AND T2.longitude > 175 AND T2.latitude = -96 AND strftime('%J', T2.timestamp) - strftime('%Y', T2.timestamp) < 4</sql>"
  },
  {
    "id": 829,
    "db_id": "address_1",
    "question": "What is the name of the city furthest to Boston?",
    "answer": "SELECT T3.city_name FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T2.city2_code != 'Boston' ORDER BY T1.longitude / 60 LIMIT 1</sql>"
  },
  {
    "id": 830,
    "db_id": "address_1",
    "question": "Give the city name of the city with greatest distance from Boston.",
    "answer": "SELECT T3.city_name FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code ORDER BY T1.longitude DESC LIMIT 1</sql>"
  },
  {
    "id": 831,
    "db_id": "address_1",
    "question": "Show all city codes and the total distance to all other cities.",
    "answer": "SELECT DISTINCT T1.city_code, SUM(T3.distance) FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city_code WHERE T1.city_name NOT IN ( SELECT T2.city_name FROM City AS T2 INNER JOIN distance AS T3 ON T2.city_code = T3.city_code ORDER BY T3.longitude DESC LIMIT 1 )</"
  },
  {
    "id": 832,
    "db_id": "address_1",
    "question": "For each city, what is the the city code and sum of distances from each?",
    "answer": "SELECT DISTINCT T1.city_code, SUM(T2.distance), T2.city_name FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city_code GROUP BY T1.city_code</sql>"
  },
  {
    "id": 833,
    "db_id": "address_1",
    "question": "Show all city names and the average distance to all other cities.",
    "answer": "SELECT DISTINCT T1.city_name, AVG(T3.longitude + T4.latitude), SUM(T2.distance) FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city_code WHERE T2.city1_code IS NOT NULL GROUP BY T1.city_name ORDER BY sum(T1.longitude + T1.latitude) / COUNT(T1"
  },
  {
    "id": 834,
    "db_id": "address_1",
    "question": "What are the city name and average distances from each city?",
    "answer": "SELECT DISTINCT T1.city_name, AVG(T3.Distance) FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T2.cityname = 'new york city' GROUP BY T2.city_code ORDER BY T2.distance DESC LIMIT 1</sql>"
  },
  {
    "id": 835,
    "db_id": "address_1",
    "question": "How far do Linda (first name) Smith (last name) and Tracy (first name) Kim (last name) live?",
    "answer": "SELECT strftime('%J', 'yyyy-mm-dd') AS lat1, strftime('%j', 'yyyy-mm-dd') AS lon1 FROM City WHERE FIRST_NAME = 'Linda' AND LAST_NAME = 'Smith' ORDER BY LONDG</sql>"
  },
  {
    "id": 836,
    "db_id": "address_1",
    "question": "What is the distance between the cities where Linda Smith and Tracy Kim live?",
    "answer": "SELECT SUM(T1.distance) FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T2.cityname = 'Linda Smith' AND T2.city_code  = 'TX768056490156301001'</sql>"
  },
  {
    "id": 837,
    "db_id": "address_1",
    "question": "What is the first name and last name of the student living furthest to Linda Smith?",
    "answer": "SELECT DISTINCT T1.firstname, T2.lastname FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code WHERE T2.StuID BETWEEN 8042 AND 9763 ORDER BY T1.longitude LIMIT 1</sql>"
  },
  {
    "id": 838,
    "db_id": "address_1",
    "question": "What is the full name of the student who lives furthest from Linda Smith?",
    "answer": "SELECT DISTINCT T1.LName FROM Student AS T1 INNER JOIN City AS T2 ON T1.StuID = T2.city_code WHERE T2.city_name  =  'Furthest' ORDER BY T1.lonitude DESC LIMIT 1</sql>"
  },
  {
    "id": 839,
    "db_id": "address_1",
    "question": "Which state does the student whose first name is Linda live in?",
    "answer": "SELECT DISTINCT T1.state FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.StuID WHERE T2.Lname = 'Linda' ORDER BY T2.Fname,T1.State DESC LIMIT 1</sql>"
  },
  {
    "id": 840,
    "db_id": "address_1",
    "question": "Give the state that the student with first name Linda lives in.",
    "answer": "SELECT DISTINCT T1.state FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.StuID WHERE T2.Lname = 'Linda'</sql>"
  },
  {
    "id": 841,
    "db_id": "boat_1",
    "question": "Return all details of sailors who are older than 30.",
    "answer": "SELECT T2.name, T1.age FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.age > 30</sql>"
  },
  {
    "id": 842,
    "db_id": "boat_1",
    "question": "What can you tell me about sailors who are older than age 30?",
    "answer": "SELECT DISTINCT T2.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.year BETWEEN 30 AND 40 ORDER BY strftime(T2.age, 'MMM-GG') DESC LIMIT 1</sql>"
  },
  {
    "id": 843,
    "db_id": "boat_1",
    "question": "Return name and age for sailors who are younger than 30.",
    "answer": "SELECT T2.name, T2.age FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.name IS NULL</sql>"
  },
  {
    "id": 844,
    "db_id": "boat_1",
    "question": "What is the name and age of every sailor who is younger than age 30?",
    "answer": "SELECT T1.name, T2.age FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.foreign_key = 'foreign' AND T1.year < 30</sql>"
  },
  {
    "id": 845,
    "db_id": "boat_1",
    "question": "Find boats reserved by Sailor with id 1.",
    "answer": "SELECT T3.name FROM Reserves AS T1 INNER JOIN Boats AS T2 ON T1.sid = T2.bid WHERE T2.name = 'Sailor_ID_1'</sql>"
  },
  {
    "id": 846,
    "db_id": "boat_1",
    "question": "What are the different boat ids reserved by the sailor whose id is 1?",
    "answer": "SELECT DISTINCT T2.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.foreign_key = 'T2' ORDER BY T1.sid DESC LIMIT 1</sql>"
  },
  {
    "id": 847,
    "db_id": "boat_1",
    "question": "Who reserved boat 102?",
    "answer": "SELECT T1.name FROM Reserves AS T1 INNER JOIN boats AS T2 ON T1.sid = T2.bid WHERE T1.name = 'boat-102' GROUP BY T1.name ORDER BY T1.day LIMIT 1</sql>"
  },
  {
    "id": 848,
    "db_id": "boat_1",
    "question": "What is the name of the sailor who reserved boat 102?",
    "answer": "SELECT T1.name FROM Reserves AS T1 INNER JOIN boats AS T2 ON T1.sid = T2.bid WHERE T1.bid = 102 AND T1.color = 'red' ORDER BY T2.name</sql>"
  },
  {
    "id": 849,
    "db_id": "boat_1",
    "question": "Return the unique boat ids (bid) of all reserved boats.",
    "answer": "SELECT DISTINCT T2.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.foreign_key IS NULL AND T1.name != 'Reserve' GROUP BY T2.name ORDER BY COUNT(DISTINCT T2) DESC LIMIT 1</sql>"
  },
  {
    "id": 850,
    "db_id": "boat_1",
    "question": "What are the ids of all boats that are reserved by someone?",
    "answer": "SELECT T2.bid FROM Reserves AS T1 INNER JOIN boats AS T2 ON T1.sid = T2.sid WHERE T2.name = 'Tony' AND T2.foreign_key IN ( SELECT DISTINCT T3 .bid FROM Sailors AS T4 WHERE name = 'Tony')</sql>"
  },
  {
    "id": 851,
    "db_id": "boat_1",
    "question": "What is the name of sailors whose names contain letter e?",
    "answer": "SELECT T1.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.name LIKE '%\\e%' GROUP BY T1.name ORDER BY COUNT(T2.name) DESC LIMIT 1</sql>"
  },
  {
    "id": 852,
    "db_id": "boat_1",
    "question": "What is the name of every sailor whose name contains the letter e?",
    "answer": "SELECT DISTINCT T2.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.foreign_key LIKE '%e%' ORDER BY T2.name</sql>"
  },
  {
    "id": 853,
    "db_id": "boat_1",
    "question": "return the unique ids of sailors who are older than any sailors.",
    "answer": "SELECT DISTINCT T1.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.age > 90 AND T2.name = 'John' GROUP BY T2.name ORDER BY COUNT(T1.sid) DESC LIMIT 1</sql>"
  },
  {
    "id": 854,
    "db_id": "boat_1",
    "question": "What is the different id of every sailor who is not the youngest?",
    "answer": "SELECT DISTINCT T2.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.day BETWEEN '2004-09-08' AND '2005-06-30' INTERSECT SELECT DISTINCT T2.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid"
  },
  {
    "id": 855,
    "db_id": "boat_1",
    "question": "Return the unique names of sailors who are older than any sailors whose rating is larger than 7.",
    "answer": "SELECT DISTINCT T1.name FROM Sailors AS T1 INNER JOIN boats AS T2 ON T1.sid = T2.bid WHERE T1.rating > 7 GROUP BY T2.foreign_key ORDER BY SUM(T1.age) DESC LIMIT 1</sql>"
  },
  {
    "id": 856,
    "db_id": "boat_1",
    "question": "What are the different names of sailors who are older than some other sailor with a rating larger than 7?",
    "answer": "SELECT name FROM Sailors WHERE rating > 9 AND age > ( SELECT MAX(age) FROM Reserves ) GROUP BY name ORDER BY MAX(rating) DESC LIMIT 1</sql>"
  },
  {
    "id": 857,
    "db_id": "boat_1",
    "question": "Find the name and id of the sailors who reserved at least one boat?",
    "answer": "SELECT DISTINCT T1.name, T2.sid FROM Sailors AS T1 INNER JOIN Boats AS T2 ON T1.sid = T2.bid WHERE T2.name IN ('T970', 'G1576') GROUP BY T2.name HAVING COUNT(DISTINCT T2.sid) >= 2</sql>"
  },
  {
    "id": 858,
    "db_id": "boat_1",
    "question": "What is the name and id of every sailor who reserved one or more boats?",
    "answer": "SELECT DISTINCT T1.name, T2.sid FROM Sailors AS T1 INNER JOIN Boats AS T2 ON T1.sid = T2.bid WHERE T2.foreign_key IS NOT NULL GROUP BY T1.sid ORDER BY COUNT(T2.sid) DESC LIMIT 5</sql>"
  },
  {
    "id": 859,
    "db_id": "boat_1",
    "question": "Find the id and name of the sailors who reserved more than one boat.",
    "answer": "SELECT DISTINCT T1.name, T2.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid GROUP BY T1.sid ORDER BY COUNT(T2.bid) LIMIT 1</sql>"
  },
  {
    "id": 860,
    "db_id": "boat_1",
    "question": "What are the different names of sailors who reserved two or more boats ?",
    "answer": "SELECT DISTINCT T1.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.day IN ( SELECT MAX(T2.name) FROM Reserves ) GROUP BY T1.name ORDER BY COUNT(DISTINCT T2.bidding_priority) + 1 DESC LIMIT 2</sql>"
  },
  {
    "id": 861,
    "db_id": "boat_1",
    "question": "Find the id of Sailors (sid) that reserved red or blue boat.",
    "answer": "SELECT DISTINCT T1.sid FROM Sailors AS T1 INNER JOIN Boats AS T2 ON T1.sid = T2.bid WHERE T2.color = 'red' GROUP BY T1.sid ORDER BY count(T3.name) DESC LIMIT 1</sql>"
  },
  {
    "id": 862,
    "db_id": "boat_1",
    "question": "What are the sids for sailors who reserved red or blue boats?",
    "answer": "SELECT DISTINCT T1.sid FROM reserves AS T1 INNER JOIN Boats AS T2 ON T1.sid = T2.bid WHERE T2.color IN ('RED', 'BLUE') GROUP BY T1.sid ORDER BY DESC(T1.name)</sql>"
  },
  {
    "id": 863,
    "db_id": "boat_1",
    "question": "Find the name and id of Sailors (sid) that reserved red or blue boat.",
    "answer": "SELECT DISTINCT T1.name, T2.sid FROM boats AS T1 INNER JOIN Reserves AS T2 ON T1.bid = T2.bid WHERE T1.color = 'RED' AND T2.foreign KEY (T2.sid) = T2.id ORDER BY T2.sid DESC LIMIT 1</sql>"
  },
  {
    "id": 864,
    "db_id": "boat_1",
    "question": "What are the names and ids of sailors who reserved red or blue boats?",
    "answer": "SELECT DISTINCT T1.name, T2.id FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.color = 'RED' AND T2.rating BETWEEN 50 AND 65 GROUP BY T2.sid ORDER BY T2.name</sql>"
  },
  {
    "id": 865,
    "db_id": "boat_1",
    "question": "Find the id of Sailors (sid) that reserved red and blue boat.",
    "answer": "SELECT DISTINCT T1.sid FROM Sailors AS T1 INNER JOIN Boat AS T2 ON T1.sid = T2.bid WHERE T2.color = 'red' ORDER BY T1.name</sql>"
  },
  {
    "id": 866,
    "db_id": "boat_1",
    "question": "What are the ids of sailors who reserved red and blue boats?",
    "answer": "SELECT T1.sid FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.color = 'RED' AND T2.name = 'Gustav' LIMIT 1</sql>"
  },
  {
    "id": 867,
    "db_id": "boat_1",
    "question": "Find the name and id of Sailors (sid) that reserved red and blue boat.",
    "answer": "SELECT DISTINCT T1.name, T2.sid FROM boats AS T1 INNER JOIN Reserves AS T2 ON T1.bid = T2.bid WHERE T1.color = 'RED' AND T2.foreignKey (T2.sid) = 'Sailor_s06157938' ORDER BY T2.day DESC LIMIT 1</sql>"
  },
  {
    "id": 868,
    "db_id": "boat_1",
    "question": "What are the names and ids of sailors who reserved red and blue boats?",
    "answer": "SELECT DISTINCT T1.name, T2.id FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.color = 'RED' AND T2.rating BETWEEN 5 AND 9</sql>"
  },
  {
    "id": 869,
    "db_id": "boat_1",
    "question": "What is the ids of sailors that haven\u2019t reserved a boat?",
    "answer": "SELECT DISTINCT sid FROM Reserves WHERE name != 'No sailor' AND no = 'true' LIMIT 1</sql>"
  },
  {
    "id": 870,
    "db_id": "boat_1",
    "question": "What are the ids of sailors who have not reserved a boat?",
    "answer": "SELECT T2.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.foreign_key IS NULL GROUP BY T2.name ORDER BY COUNT(T1.sid) - COUNT(T2.sid) DESC LIMIT 0, 3</sql>"
  },
  {
    "id": 871,
    "db_id": "boat_1",
    "question": "what is the name and id of sailors who do not have a reservation of a boat?",
    "answer": "SELECT DISTINCT T1.name, T2.sid FROM Sailors AS T1 INNER JOIN Boats AS T2 ON T1.sid = T2.bid WHERE T1.name != 'reserve' AND T2.foreign KEY (T2.bid) IS NULL</sql>"
  },
  {
    "id": 872,
    "db_id": "boat_1",
    "question": "What are the names and ids of all sailors who do not have boat reservations?",
    "answer": "SELECT DISTINCT T2.name, T2.sid FROM boats AS T1 INNER JOIN Sailors AS T2 ON T1.bid = T2.sid WHERE T1.reserved IS NULL AND T1.sid <> T2.sid</sql>"
  },
  {
    "id": 873,
    "db_id": "boat_1",
    "question": "Find id for the sailors who do not have a reservation of a boat?",
    "answer": "SELECT T1.bid FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.name IS NULL ORDER BY T2.id DESC LIMIT 1</sql>"
  },
  {
    "id": 874,
    "db_id": "boat_1",
    "question": "What is id about sailors who do not have boat reservations?",
    "answer": "SELECT DISTINCT T2.sid FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.foreign_key(T2.bid) IS NULL AND (T1.`day` != '' OR T1.`date` IS NULL) ORDER BY T2.name</sql>"
  },
  {
    "id": 875,
    "db_id": "boat_1",
    "question": "What is the name of the sailors who reserved boat with id 103?",
    "answer": "SELECT DISTINCT T2.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.bid WHERE T1.foreign_key BETWEEN 1 AND 103 GROUP BY T1.name ORDER BY COUNT(T1.sid) DESC LIMIT 1</sql>"
  },
  {
    "id": 876,
    "db_id": "boat_1",
    "question": "Find the name of the sailors who reserved boat with id 103.",
    "answer": "SELECT DISTINCT T2.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.foreign_key = 'T1' AND T1.boat = 103</sql>"
  },
  {
    "id": 877,
    "db_id": "boat_1",
    "question": "What is the name of all sailors whose rating is higher than any sailor named Luis?",
    "answer": "SELECT DISTINCT T1.name FROM Sailors AS T1 INNER JOIN boats AS T2 ON T1.sid = T2.bid WHERE T1.rating > T2.name ORDER BY T1.name DESC LIMIT 1</sql>"
  },
  {
    "id": 878,
    "db_id": "boat_1",
    "question": "What are the sailors' names, the ones whose rating is higher than any sailor named Luis?",
    "answer": "SELECT DISTINCT T1.name FROM Sailors AS T1 INNER JOIN boats AS T2 ON T1.sid = T2.bid WHERE T1.rating > ( SELECT MAX(T1.rating) FROM reserves AS T2 INNER JOIN boats AS T3 ON T2.bid = T3.bid WHERE T1.name != 'Luis' ORDER BY T1.age DESC LIMIT 1 )</sql>"
  },
  {
    "id": 879,
    "db_id": "boat_1",
    "question": "What is the name of all sailors whose rating is higher than all sailors named Luis?",
    "answer": "SELECT DISTINCT T1.name FROM Sailors AS T1 INNER JOIN boats AS T2 ON T1.sid = T2.bid WHERE T1.rating > T2.T3 GROUP BY T1.name ORDER BY COUNT(T2.name) DESC LIMIT 1</sql>"
  },
  {
    "id": 880,
    "db_id": "boat_1",
    "question": "What are the names of all sailors with a higher rating than every sailor named Luis?",
    "answer": "SELECT DISTINCT T2.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.rating > ( SELECT MAX(T3.name) FROM Reserves AS T3 WHERE T3.foreign_key = 1 )</sql>"
  },
  {
    "id": 881,
    "db_id": "boat_1",
    "question": "what is the name and id of every sailor who has a rating greater than 2 and reserved a boat.",
    "answer": "SELECT DISTINCT T1.name, T2.sid FROM Sailors AS T1 INNER JOIN Boats AS T2 ON T1.sid = T2.bid WHERE T2.rating > 2 GROUP BY T1.sid ORDER BY SUM(T1.rating) DESC LIMIT 1</sql>"
  },
  {
    "id": 882,
    "db_id": "boat_1",
    "question": "What are the names and ids of all sailors who have a rating of at least 3 and reserved a boat?",
    "answer": "SELECT DISTINCT T1.name, T2.sid FROM Sailors AS T1 INNER JOIN Boats AS T2 ON T1.bid = T2.bid WHERE T2.reserves.foreign_key IS NOT NULL ORDER BY T1.rating DESC LIMIT 3</sql>"
  },
  {
    "id": 883,
    "db_id": "boat_1",
    "question": "Find the name and age of the oldest sailor.",
    "answer": "SELECT DISTINCT T2.name, T3.age FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.gender = 'F' ORDER BY T1.`t100874996160507417` DESC LIMIT 2</sql>"
  },
  {
    "id": 884,
    "db_id": "boat_1",
    "question": "What is the name and age of the sailor with maximum age?",
    "answer": "SELECT T1.name, T2.age FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid ORDER BY MAX(T1.Age) DESC LIMIT 1</sql>"
  },
  {
    "id": 885,
    "db_id": "boat_1",
    "question": "how many sailors in total?",
    "answer": "SELECT SUM(T1.name) FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.name IS NOT NULL GROUP BY T1.name ORDER BY COUNT(T2.firstname, T2.lastname) DESC LIMIT 1</sql>"
  },
  {
    "id": 886,
    "db_id": "boat_1",
    "question": "How many sailors exist?",
    "answer": "SELECT COUNT(*) FROM reserves WHERE name = 'yacht' GROUP BY name ORDER BY COUNT(name) DESC LIMIT 1</sql>"
  },
  {
    "id": 887,
    "db_id": "boat_1",
    "question": "What is the average age of sailors whose rating is 7?",
    "answer": "SELECT SUM(CASE WHEN T2.rating = '7' THEN T1.age END) / COUNT(T2.sid) FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.bid WHERE T2.name = 'Cody Cramer' AND T2.rating = '7' GROUP BY T2.rating ORDER BY SUM(CASE WHEN T2.age = '65' THEN 1"
  },
  {
    "id": 888,
    "db_id": "boat_1",
    "question": "What is average age of all sailors who have a rating of 7?",
    "answer": "SELECT T1.age / COUNT(T2.name) FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.rating > 7 ORDER BY T2.age DESC LIMIT 1</sql>"
  },
  {
    "id": 889,
    "db_id": "boat_1",
    "question": "How many sailors whose name starts with letter D exist ?",
    "answer": "SELECT COUNT(DISTINCT T2.name) FROM Reserves AS T1 INNER JOIN boats AS T2 ON T1.sid = T2.bid WHERE T1.name LIKE 'd%' ORDER BY COUNT(T2.name) DESC LIMIT 1</sql>"
  },
  {
    "id": 890,
    "db_id": "boat_1",
    "question": "What is the count of the sailors whose name starts with letter D ?",
    "answer": "SELECT COUNT(T1.name) FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.name LIKE '%D%' LIMIT 1</sql>"
  },
  {
    "id": 891,
    "db_id": "boat_1",
    "question": "What are the average rating and max age of all sailors?",
    "answer": "SELECT CAST(SUM(rating) / COUNT(T2.name) AS REAL) * 100 / COUNT(T2.name), SUM(T3.max_age) FROM Boats AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.bid ORDER BY SUM(T2.rating) DESC LIMIT 1</sql>"
  },
  {
    "id": 892,
    "db_id": "boat_1",
    "question": "Find the average rating and largest age for the sailors",
    "answer": "SELECT CAST(SUM(rating) AS REAL) / COUNT(T2.name), MAX(T1.age) FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T2.sid = T1.bid WHERE T2.name = 'Guy' GROUP BY T1.name ORDER BY CAST(SUM(rating) AS REAL) / COUNT(T1.sid) DESC LIMIT 1</sql>"
  },
  {
    "id": 893,
    "db_id": "boat_1",
    "question": "Find the number of reservations for each boat.",
    "answer": "SELECT SUM(t1.reservation) FROM Boats AS T1 INNER JOIN Reserves AS T2 ON T1.name = T2.sid WHERE T1.color LIKE '%brown%' ORDER BY T2.foreign_key_id</sql>"
  },
  {
    "id": 894,
    "db_id": "boat_1",
    "question": "How many reservations exist for each boat?",
    "answer": "SELECT SUM(DISTINCT T2.bid) FROM boats AS T1 INNER JOIN reserves AS T2 ON T1.sid = T2.sid WHERE T2.foreign_key = 'Sailors' GROUP BY T1.name ORDER BY SUM(T1.bid) DESC LIMIT 1</sql>"
  },
  {
    "id": 895,
    "db_id": "boat_1",
    "question": "Find the number of reservations for each boat with id greater than 50.",
    "answer": "SELECT SUM(DISTINCT T2.reserve_number), SUM(T2.bid) FROM boats AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.bid WHERE T1.name > '67405936' GROUP BY T2.reserve_number ORDER BY COUNT(T2.bid) DESC LIMIT 1</sql>"
  },
  {
    "id": 896,
    "db_id": "boat_1",
    "question": "How many reservations exist for each boat with an id greater than 50?",
    "answer": "SELECT SUM(IIF(T1.foreign_key = 'boat/sailor' AND T2.name BETWEEN 50 AND 630, 0)) , COUNT(T2.id) FROM Sailors AS T1 INNER JOIN Boats AS T2 ON T1.bid = T2.bid WHERE strftime('%Y', T1.timestamp) > '2022' GROUP BY T2."
  },
  {
    "id": 897,
    "db_id": "boat_1",
    "question": "Find the number of reservations for each boat with more than 1 reservation.",
    "answer": "SELECT SUM(SUM(CASE WHEN T2.foreign_key = 'reservations' THEN 1 ELSE 0 END)) AS num FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid GROUP BY T2.name ORDER BY T2.num DESC LIMIT 1</sql>"
  },
  {
    "id": 898,
    "db_id": "boat_1",
    "question": "How many reservations exist for each boat that has more than 1 reservation already?",
    "answer": "SELECT SUM(COUNT(T2.name)) FROM Reserves AS T1 INNER JOIN Boats AS T2 ON T1.bid = T2.bid WHERE T1.sid > ( SELECT MAX(T2.bid) FROM Reservations AS T3 ) GROUP BY T2.name ORDER BY SUM(COUNT(T2.name)) DESC LIMIT 1</sql>"
  },
  {
    "id": 899,
    "db_id": "boat_1",
    "question": "Find the number of reservations by sailors with id greater than 1 for each boat.",
    "answer": "SELECT COUNT(*) FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.foreign_key IN ( SELECT T1.sid , SUM(T2.name) FROM Boats AS T1 INNER JOIN Reservations AS T2 ON T2.sid = T1.bid GROUP BY T1.sid )</sql>"
  },
  {
    "id": 900,
    "db_id": "boat_1",
    "question": "How many reservations for each boat did the sailors with an id greater than 1 make?",
    "answer": "SELECT T2.name, SUM(T3.foreign_key_id WHERE T3.sid BETWEEN 1 AND T4.bid) FROM Reserves AS T1 INNER JOIN boats AS T2 ON T1.bid = T2.bid INNER JOIN Sailors AS T3 ON T2.sid = T3.sid GROUP BY T3.name ORDER BY T3.foreign_key_id DESC LIMIT 1</"
  },
  {
    "id": 901,
    "db_id": "boat_1",
    "question": "What is the rating and average age for sailors who have reserved red boat grouped by rating?",
    "answer": "SELECT AVG(rating), SUM(T2.age) AS sum FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.name = 'red' GROUP BY T2.sid ORDER BY T2.rating, SUM(T2.age) DESC LIMIT 1</sql>"
  },
  {
    "id": 902,
    "db_id": "boat_1",
    "question": "What are the rating and average age for sailors who reserved red boats for each rating?",
    "answer": "SELECT DISTINCT T2.name, AVG(T3.rating), MAX(T1.age) FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.bid WHERE T1.color = 'RED' GROUP BY T1.rating ORDER BY SUM(T3.rating) DESC LIMIT 4</sql>"
  },
  {
    "id": 903,
    "db_id": "boat_1",
    "question": "Find the name, rating and age of all sailors ordered by rating and age.",
    "answer": "SELECT DISTINCT T1.name, T2.rating AS min_rate FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.bid ORDER BY T2.day DESC LIMIT 1</sql>"
  },
  {
    "id": 904,
    "db_id": "boat_1",
    "question": "What is the name, rating, and age for every sailor? And order them by rating and age.",
    "answer": "SELECT DISTINCT T2.name, T3.rating AS perc FROM ( SELECT DISTINCT T1.name ,  T1.age , T2.rating ,  T3.name,  T3.day FROM Sailors AS T1 INNER JOIN Boats AS T2 ON T1.sid = T2.bid WHERE T1.name LIKE 'Smith%' ORDER BY T1.rating DESC LIMIT 1</sql>"
  },
  {
    "id": 905,
    "db_id": "boat_1",
    "question": "Find the total number of boats.",
    "answer": "SELECT SUM(T1.bids) FROM reserves AS T1 INNER JOIN boats AS T2 ON T1.sid = T2.sid WHERE T2.color = 'black' ORDER BY T1.day DESC LIMIT 1</sql>"
  },
  {
    "id": 906,
    "db_id": "boat_1",
    "question": "How many boats are there?",
    "answer": "SELECT COUNT(*) FROM Boats WHERE name = 'Ship' LIMIT 1</sql>"
  },
  {
    "id": 907,
    "db_id": "boat_1",
    "question": "How many boats are red?",
    "answer": "SELECT COUNT(DISTINCT T1.name) FROM Reserves AS T1 INNER JOIN Boats AS T2 ON T1.sid = T2.bid WHERE T2.color = 'RED' GROUP BY T2.color ORDER BY count(T3.name) DESC LIMIT 1</sql>"
  },
  {
    "id": 908,
    "db_id": "boat_1",
    "question": "How many red boats exist?",
    "answer": "SELECT COUNT(*) FROM reserves WHERE color = 'red'</sql>"
  },
  {
    "id": 909,
    "db_id": "boat_1",
    "question": "Find the names of boats booked by sailors whose age is between 20 and 30.",
    "answer": "SELECT DISTINCT T1.name FROM reserves AS T1 INNER JOIN boats AS T2 ON T1.sid = T2.bid WHERE T1.foreign_key BETWEEN 20 AND 30</sql>"
  },
  {
    "id": 910,
    "db_id": "boat_1",
    "question": "What are the names of the boats booked by people between age 20 and 30?",
    "answer": "SELECT DISTINCT T1.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.age BETWEEN '20' AND '30' AND T2.name LIKE '%Bradley%' ORDER BY T2.name ASC LIMIT 1</sql>"
  },
  {
    "id": 911,
    "db_id": "boat_1",
    "question": "Find the names of sailors whose rating is larger than the rating of all sailors who booked a red boat.",
    "answer": "SELECT name FROM Sailors WHERE rating > ( SELECT MAX(T2.rating) FROM boats AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.bid ORDER BY T1.name DESC LIMIT 1 )</sql>"
  },
  {
    "id": 912,
    "db_id": "boat_1",
    "question": "What are the names of the sailors whose rating is larger than the rating of all sailors who booked a red boat?",
    "answer": "SELECT DISTINCT T1.name FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.bid WHERE T2.foreign_key(T3.foreign_key) > ( SELECT MAX(rating) FROM Sailors WHERE name LIKE 'red%' )</sql>"
  },
  {
    "id": 913,
    "db_id": "boat_1",
    "question": "What is highest rating between sailors?",
    "answer": "SELECT SUM(T1.rating) FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.name = 'CAPTAIN' GROUP BY T1.rating ORDER BY SUM(T1.rating) DESC LIMIT 3</sql>"
  },
  {
    "id": 914,
    "db_id": "boat_1",
    "question": "What is the maximum rating for sailors?",
    "answer": "SELECT max(T1.rating) FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid GROUP BY T1.name ORDER BY T2.rating DESC LIMIT 1</sql>"
  },
  {
    "id": 915,
    "db_id": "boat_1",
    "question": "Find the names of sailors who reserved boat with the name Melon.",
    "answer": "SELECT T1.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.name = 'Melon'</sql>"
  },
  {
    "id": 916,
    "db_id": "boat_1",
    "question": "What are the names of sailors who reserved a boat with the name Melon?",
    "answer": "SELECT DISTINCT T2.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.bid WHERE T1.foreign_key BETWEEN 1 AND 3 ORDER BY T1.sid DESC LIMIT 1</sql>"
  },
  {
    "id": 917,
    "db_id": "boat_1",
    "question": "List the names and ages of all sailors sorted by rating in descending order.",
    "answer": "SELECT DISTINCT T2.name, T2.age FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.bid ORDER BY T1.rating DESC</sql>"
  },
  {
    "id": 918,
    "db_id": "boat_1",
    "question": "What are the names and ages of all sailors sorted by decreasing rating?",
    "answer": "SELECT DISTINCT T1.name, T1.age FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.bid ORDER BY T1.rating DESC LIMIT 1</sql>"
  },
  {
    "id": 919,
    "db_id": "headphone_store",
    "question": "Find the model of the most expensive headphone.",
    "answer": "SELECT DISTINCT T1.model FROM \"headphone\" AS T1 INNER JOIN stock AS T2 ON T1.Headphone_ID = T2.Store_ID ORDER BY T2.`Quantity` DESC LIMIT 1</sql>"
  },
  {
    "id": 920,
    "db_id": "headphone_store",
    "question": "Which headphone model has the highest price?",
    "answer": "SELECT DISTINCT T1.model FROM \"headphone\" AS T1 INNER JOIN stock AS T2 ON T1.Headphone_ID = T2.Store_ID ORDER BY T1.\"Price DESC LIMIT 1</sql>"
  },
  {
    "id": 921,
    "db_id": "headphone_store",
    "question": "List all different headphone models in the alphabetical order.",
    "answer": "SELECT T1.Model, T2.model FROM headphone AS T1 INNER JOIN stock AS T2 ON T1.Headphone_ID = T2.Store_ID ORDER BY T2.`headphone`.Name</sql>"
  },
  {
    "id": 922,
    "db_id": "headphone_store",
    "question": "Return the list of distinct headphone models ordered alphabetically.",
    "answer": "SELECT T1.model, T2.model FROM headphone AS T1 INNER JOIN stock AS T2 ON T1.Headphone_ID = T2.Store_ID ORDER BY T1.model DESC LIMIT 1</sql>"
  },
  {
    "id": 923,
    "db_id": "headphone_store",
    "question": "Which headphone class is the most common one?",
    "answer": "SELECT DISTINCT T2.model FROM \"store\" AS T1 INNER JOIN product AS T2 ON T1.Store_ID = T2.Store_ID ORDER BY T1.class, T3.name DESC LIMIT 1</sql>"
  },
  {
    "id": 924,
    "db_id": "headphone_store",
    "question": "Which headphone class contains the most headphones?",
    "answer": "SELECT DISTINCT T2.model, T3.class FROM \"headphone AS T1 INNER JOIN store AS T2 ON T1.Headphone_ID = T2.Headphone_ID INNER JOIN stock AS T3 ON T2.Store_ID = T3.Store_ID GROUP BY T2.model ORDER BY COUNT(T2.Model) DESC LIMIT 1</sql>"
  },
  {
    "id": 925,
    "db_id": "headphone_store",
    "question": "Which headphone class does have more than two headphones?",
    "answer": "SELECT DISTINCT T1.model, T2.class FROM \"stock\" AS T1 INNER JOIN \"headphone\" AS T2 ON T1.Store_ID = T2.Headphone_ID GROUP BY T2.model ORDER BY COUNT(T1.model) > 2</sql>"
  },
  {
    "id": 926,
    "db_id": "headphone_store",
    "question": "Find the headphone class that does not contain more than two headphones.",
    "answer": "SELECT T1.model FROM \"headphone\" AS T1 INNER JOIN stock AS T2 ON T1.Headphone_ID = T2.Headphone_ID WHERE T2.Quantity - 3 IN ( SELECT COUNT(T2.model) FROM `stock` AS T2 WHERE T2.Price > 2 ORDER BY T2.Quantity )</sql>"
  },
  {
    "id": 927,
    "db_id": "headphone_store",
    "question": "Find the number of headphones with a price higher than 200 for each class.",
    "answer": "SELECT T3.Quantity, SUM(T2.Price), T1.name FROM store AS T1 INNER JOIN `headphone` AS T2 ON T1.Store_ID = T2.Headphone_ID WHERE T2.Model > 'W' GROUP BY T2.model ORDER BY COUNT(T2.brand) DESC LIMIT 3</sql>"
  },
  {
    "id": 928,
    "db_id": "headphone_store",
    "question": "How many headphones cost more than 200 for each headphone class?",
    "answer": "SELECT SUM(IIF(T1.Price BETWEEN 30 AND 200)) / COUNT(T2.Headphone_ID) FROM `headphone` AS T1 INNER JOIN store AS T2 ON T1.Headphone_ID = T2.Headphone_ID GROUP BY T1.Headphone_ID ORDER BY SUM(IIF(T2.Price BETWEEN 30 AND 200)) DESC LIMIT "
  },
  {
    "id": 929,
    "db_id": "headphone_store",
    "question": "how many different earpads are there?",
    "answer": "SELECT COUNT(DISTINCT T1.EARPADS), SUM(CASE WHEN T2.name = 'Golden Earpads' THEN 1 ELSE NULL END) AS num FROM stock AS T1 INNER JOIN headphone AS T2 ON T1.Store_ID = T2.Store_ID WHERE T1.EarpadName IN ('USB', 'XDA') GROUP BY T2.name ORDER BY SUM(CASE WHEN T2.name ="
  },
  {
    "id": 930,
    "db_id": "headphone_store",
    "question": "Count the number of different earpads.",
    "answer": "SELECT COUNT(DISTINCT T1.earpad) FROM headphone AS T1 INNER JOIN store AS T2 ON T1.Headphone_ID = T2.Headphone_ID GROUP BY T1.EARPAD ORDER BY COUNT(T2.Earpads) DESC LIMIT 1</sql>"
  },
  {
    "id": 931,
    "db_id": "headphone_store",
    "question": "Find the top 2 earpads that are mostly used.",
    "answer": "SELECT DISTINCT T1.name, T3.name FROM \"headphone AS T1 INNER JOIN store AS T2 ON T1.Headphone_ID = T2.Store_ID INNER JOIN product AS T3 ON T2.Store_ID = T3.Store_ID ORDER BY COUNT(T1.name) DESC LIMIT 2</sql>"
  },
  {
    "id": 932,
    "db_id": "headphone_store",
    "question": "What are the top 2 earpads in terms of the number of headphones using them?",
    "answer": "SELECT DISTINCT T1.name, SUM(T2.driver-matched_dB * T2.Parking) AS total FROM `headphone` AS T1 INNER JOIN \"stock\" AS T2 ON T1.Headphone_ID = T2.Store_ID GROUP BY T1.model ORDER BY SUM(T2.quantity), T1.model ASC LIMIT 2</sql>"
  },
  {
    "id": 933,
    "db_id": "headphone_store",
    "question": "What are the model, class, and construction of the cheapest headphone?",
    "answer": "SELECT DISTINCT T2.model, T2.class FROM ( SELECT T2.Model, CAST(T1.Price AS REAL) AS min , T2.construction AS T3 ORDER BY T2.price LIMIT 1, 10 ) AS T1 INNER JOIN headphone AS T2 ON T2.Headphone_ID = T1.Headphone_ID WHERE T1.Model = 'cheap' ORDER BY T2.model,"
  },
  {
    "id": 934,
    "db_id": "headphone_store",
    "question": "Find the model, class, and construction of the headphone with the lowest price.",
    "answer": "SELECT DISTINCT T1.model, T1.class, T2.price FROM `headphone` AS T1 INNER JOIN stock AS T2 ON T1.Headphone_ID = T2.Store_ID ORDER BY T2.price LIMIT 3</sql>"
  },
  {
    "id": 935,
    "db_id": "headphone_store",
    "question": "Find the average price for each headphone construction.",
    "answer": "SELECT SUM(CASE WHEN T2.model = 'plug' THEN 1 END), T3.`Price`, CASE WHEN T3.model = 'plug' THEN T2.`price` END AS price FROM `headphone` AS T1 INNER JOIN store_stock AS T2 ON T1.Store_ID = T2.Store_ID WHERE T3.model = 'plug' ORDER BY CAST(T2.Price / COUNT(`Headphone`) AS"
  },
  {
    "id": 936,
    "db_id": "headphone_store",
    "question": "How much does headphones cost on average for each headphone construction?",
    "answer": "SELECT DISTINCT T2.Price, SUM(T1.Driver-matched_dB), CAST((SUM(T3.Price * 100) AS REAL)) / COUNT(*), T1.model FROM `headphones` AS T1 INNER JOIN `stock` AS T2 ON T1.Headphone_ID = T2.Store_ID INNER JOIN `price` AS T3 ON T2.Store_ID = T3."
  },
  {
    "id": 937,
    "db_id": "headphone_store",
    "question": "Which headphone classes have both headphones with \"Bowls\" and headphones with \"Comfort Pads\" earpads?",
    "answer": "SELECT DISTINCT T1.model, T2.model FROM `headphone` AS T1 INNER JOIN store AS T2 ON T1.Headphone_ID = T2.Headphone_ID INNER JOIN `stock` AS T3 ON T2.Store_ID = T3.Store_ID WHERE T3.NEIGHBORHOOD LIKE 'bowls%' OR T3.NEIGHBORHOOD LIKE '%comfort pads%'</"
  },
  {
    "id": 938,
    "db_id": "headphone_store",
    "question": "Find the headphone classes that contain both headphones using \"Bowls\" earpads and headphones using \"Comfort Pads\" earpads.",
    "answer": "SELECT DISTINCT T1.model, T2.model FROM `headphone` AS T1 INNER JOIN stock AS T2 ON T1.Headphone_ID = T2.Store_ID WHERE T1.class IN ( 'Bowls', 'Comfort Pads' ) AND T1.driver-matched_dB > 30 AND T2.earpads IS NOT NULL AND T2.earpads LIKE '%Comfort%'</sql"
  },
  {
    "id": 939,
    "db_id": "headphone_store",
    "question": "Which earpads never use plastic construction?",
    "answer": "SELECT T2.name FROM \"stock\" AS T1 INNER JOIN headphone AS T2 ON T1.Store_ID = T2.Store_ID WHERE T1.Quantity = 4 AND T1.Construction = 'plastic'</sql>"
  },
  {
    "id": 940,
    "db_id": "headphone_store",
    "question": "Find all earpads that do not use plastic construction.",
    "answer": "SELECT T1.name FROM \"stock\" AS T1 INNER JOIN headphone AS T2 ON T1.Store_ID = T2.Store_ID WHERE T2.model = 'plastic' ORDER BY T1.Quantity DESC LIMIT 1</sql>"
  },
  {
    "id": 941,
    "db_id": "headphone_store",
    "question": "Find the headphone models whose price is below the average price.",
    "answer": "SELECT DISTINCT T1.model, AVG(T2.Price) AS avg FROM 'stock' AS T1 INNER JOIN 'headphone' AS T2 ON T1.Store_ID = T2.Headphone_ID WHERE T2.prices BETWEEN 500 AND 800 LIMIT 1</sql>"
  },
  {
    "id": 942,
    "db_id": "headphone_store",
    "question": "What are the headphone models that cost less than the average price?",
    "answer": "SELECT DISTINCT T1.model, SUM(T2.`Price`) / COUNT(DISTINCT T2.`Headphone_ID`) AS avg FROM `headphone` AS T1 INNER JOIN 'stock' AS T2 ON T1.Headphone_ID = T2.Store_ID ORDER BY T2.Parking DESC LIMIT 1</sql>"
  },
  {
    "id": 943,
    "db_id": "headphone_store",
    "question": "Sort all store names by store open date.",
    "answer": "SELECT DISTINCT T2.name FROM `stock` AS T1 INNER JOIN headphone AS T2 ON T1.Store_ID = T2.Headphone_ID ORDER BY T1.opened DESC LIMIT 1</sql>"
  },
  {
    "id": 944,
    "db_id": "headphone_store",
    "question": "Give me a list of store names, sorted by store open date.",
    "answer": "SELECT DISTINCT T2.name FROM 'stock' AS T1 INNER JOIN `store` AS T2 ON T1.Store_ID = T2.Store_ID ORDER BY T1.openDate</sql>"
  },
  {
    "id": 945,
    "db_id": "headphone_store",
    "question": "List name and parking info for the stores in the Tarzana neighborhood.",
    "answer": "SELECT T1.Name, T2.Parking FROM 'store' AS T1 INNER JOIN stock AS T2 ON T1.Store_ID = T2.Store_ID WHERE T2.Neighborhood = 'Tarzana (lat:93.784608,-73.048052)'</sql>"
  },
  {
    "id": 946,
    "db_id": "headphone_store",
    "question": "Which stores are located in the \"Tarzana\" neighborhood? Return their names and parking information.",
    "answer": "SELECT DISTINCT T2.name, T3.parking FROM 'store' AS T1 INNER JOIN `stock` AS T2 ON T1.Store_ID = T2.Store_ID INNER JOIN `headphone` AS T3 ON T2.Headphone_ID = T3.Headphone_ID WHERE T2.neighborhood LIKE '%Tarzana%'</sql>"
  },
  {
    "id": 947,
    "db_id": "headphone_store",
    "question": "How many different neighborhoods are there for all stores?",
    "answer": "SELECT COUNT(DISTINCT T2.neighborhood), T1.area FROM 'stock' AS T1 INNER JOIN `headphone` AS T2 ON T1.Headphone_ID = T2.Headphone_ID WHERE T2.location='neighborhood' GROUP BY T2.neighborhood</sql>"
  },
  {
    "id": 948,
    "db_id": "headphone_store",
    "question": "Count the number of distinct neighborhoods stores are located.",
    "answer": "SELECT COUNT(DISTINCT T2.neighborhood), SUM(T2.purchased_quantity) FROM \"store\" AS T1 INNER JOIN \"stock\" AS T2 ON T1.Store_ID = T2.Store_ID WHERE T1.name = 'New York City' GROUP BY T1.Name ORDER BY COUNT(DISTINCT T2.neighborhood)</sql>"
  },
  {
    "id": 949,
    "db_id": "headphone_store",
    "question": "find the number of stores in each neighborhood.",
    "answer": "SELECT DISTINCT COUNT(DISTINCT T2.neighborhood), SUBSTR('T3', 0, INSTR('T1') - 4)) AS num , T1.name AS location FROM `headphone` AS T1 INNER JOIN ( SELECT T2.neighborhood FROM \"store\" AS T2 INNER JOIN `stock` AS T3 ON T1.Store_ID = T2.Store_ID ORDER BY T3.Park"
  },
  {
    "id": 950,
    "db_id": "headphone_store",
    "question": "How many stores are there in each neighborhood?",
    "answer": "SELECT DISTINCT T2.neighborhood, COUNT(T1.Name) FROM store AS T1 INNER JOIN neighborhood AS T2 ON T1.Store_ID = T2.Neighborhood WHERE T2.Parking = 'available' GROUP BY T1.Name ORDER BY DISTINCT T2.city , T2.neighborhood</sql>"
  },
  {
    "id": 951,
    "db_id": "headphone_store",
    "question": "Find the name of the store which has the most headphones in stock. List the number of headphones as well.",
    "answer": "SELECT COUNT(T1.Headphone_ID) FROM \"store\" AS T1 INNER JOIN `stock` AS T2 ON T1.Store_ID = T2.Store_ID WHERE T2.`Quantity` = ( SELECT MAX(quantity) FROM store ) GROUP BY T1.Name ORDER BY COUNT(T2.`headphones`) DESC LIMIT 1</sql>"
  },
  {
    "id": 952,
    "db_id": "headphone_store",
    "question": "Which store has the headphones in stock? Give me the store name and the total quantity.",
    "answer": "SELECT DISTINCT T2.name, SUM(T1.Quantity) AS total FROM `store` AS T1 INNER JOIN `stock` AS T2 ON T1.Store_ID = T2.Store_ID GROUP BY T1.Store_id ORDER BY SUM(T2.quantity) DESC LIMIT 1</sql>"
  },
  {
    "id": 953,
    "db_id": "headphone_store",
    "question": "Find the name of stores which have no headphone in stock.",
    "answer": "SELECT DISTINCT T2.name FROM store AS T1 INNER JOIN stock AS T2 ON T1.Store_ID = T2.Store_ID WHERE T2.Headphone_ID IS NULL GROUP BY T2.Name ORDER BY COUNT(T2.Headphone_ID) = 1 LIMIT 1</sql>"
  },
  {
    "id": 954,
    "db_id": "headphone_store",
    "question": "Which stores do not have any headphones in stock? Give me the store names.",
    "answer": "SELECT DISTINCT T2.name FROM store AS T1 INNER JOIN stock AS T2 ON T1.Store_ID = T2.Store_ID WHERE T2.Quantity IS NULL</sql>"
  },
  {
    "id": 955,
    "db_id": "headphone_store",
    "question": "Which headphone models do not have any stock in any store?",
    "answer": "SELECT T1.name FROM \"stock\" AS T1 INNER JOIN \"headphone\" AS T2 ON T1.Store_ID = T2.Headphone_ID WHERE T1.Quantity IS NULL AND T2.Model != 'Unknown'</sql>"
  },
  {
    "id": 956,
    "db_id": "headphone_store",
    "question": "Find the headphone models that are not in stock in any store.",
    "answer": "SELECT T1.model FROM \"stock\" AS T1 INNER JOIN \"headphone\" AS T2 ON T1.Store_ID = T2.Headphone_ID WHERE T2.Name IN ('MP3', 'DAC')</sql>"
  },
  {
    "id": 957,
    "db_id": "headphone_store",
    "question": "Which headphone model has the largest quantity of stock across all the stores?",
    "answer": "SELECT DISTINCT T2.model FROM ( SELECT DISTINCT T1.headphone.model , SUM(T1.Quantity) AS sum FROM `stock` AS T1 INNER JOIN \"headphone\" AS T2 ON T1.Store_ID = T2.Headphone_ID WHERE T2.model IN ( SELECT MAX(T2.Model) FROM headphone AS T2 INNER JOIN \"store\" AS T3 ON T2.Headphone_ID"
  },
  {
    "id": 958,
    "db_id": "headphone_store",
    "question": "Find the headphone model whose total quantity in stock is the largest.",
    "answer": "SELECT DISTINCT T1.model FROM 'stock' AS T1 INNER JOIN `headphone` AS T2 ON T1.Store_ID = T2.Headphone_ID ORDER BY T2.\"Quantity\" DESC LIMIT 1</sql>"
  },
  {
    "id": 959,
    "db_id": "headphone_store",
    "question": "How many headphones are stored in the Woodman store?",
    "answer": "SELECT COUNT(DISTINCT T1.Headphone_ID), T2.Store_id FROM stock AS T1 INNER JOIN \"store\" AS T2 ON T1.Store_ID = T2.Store_ID WHERE T2.Name = 'Woodman' GROUP BY T1.Headphone_ID ORDER BY COUNT(DISTINCT T1.Headphone_ID) DESC LIMIT 1</sql>"
  },
  {
    "id": 960,
    "db_id": "headphone_store",
    "question": "Find the total quantity of headphones stored in the Woodman store.",
    "answer": "SELECT SUM(DISTINCT T2.Quantity), T1.Store_id FROM store AS T1 INNER JOIN stock AS T2 ON T1.Store_ID = T2.Store_ID GROUP BY T1.Store_ID ORDER BY COUNT(T1.Headphone_ID) DESC LIMIT 1</sql>"
  },
  {
    "id": 961,
    "db_id": "headphone_store",
    "question": "Which neighborhood does not have any headphone in stock?",
    "answer": "SELECT DISTINCT T2.neighborhood FROM store AS T1 INNER JOIN stock AS T2 ON T1.Store_ID = T2.Store_ID WHERE T1.Neighborhood != 'Unknown' GROUP BY T2.Neighborhood ORDER BY COUNT(T2.headphone_id) INTERSECT SELECT DISTINCT T2.neighborhood FROM store AS T1 INNER JOIN stock AS T2 ON T1.Store"
  },
  {
    "id": 962,
    "db_id": "headphone_store",
    "question": "Find the neighborhood where no headphones are in stock.",
    "answer": "SELECT DISTINCT T2.neighborhood FROM store AS T1 INNER JOIN stock AS T2 ON T1.Store_ID = T2.Store_ID WHERE T1.Parking IS NULL AND T1.Name != 'Brooklyn Electronics' LIMIT 1</sql>"
  },
  {
    "id": 963,
    "db_id": "aan_1",
    "question": "How many authors do we have?",
    "answer": "SELECT COUNT(T1.author_id) FROM Author AS T1 INNER JOIN Affiliation AS T2 ON T1.affiliation_id = T2.affiliation_id WHERE T1.name = 'Sir' AND strftime('%Y', T2.date) >= '2000-01'</"
  },
  {
    "id": 964,
    "db_id": "aan_1",
    "question": "Count the number of authors.",
    "answer": "SELECT COUNT(T1.author_id) FROM Author AS T1 INNER JOIN Affiliation AS T2 ON T1.affiliation_id = T2.affiliation_id GROUP BY T1.name ORDER BY COUNT(T2.affiliation_id) DESC LIMIT 1</sql>"
  },
  {
    "id": 965,
    "db_id": "aan_1",
    "question": "How many papers do we have?",
    "answer": "SELECT COUNT(T1.paper_id) FROM Citation AS T1 INNER JOIN Paper AS T2 ON T1.paper_id = T2.paper_id WHERE T2.affiliation_id = 'N97075443'</sql>"
  },
  {
    "id": 966,
    "db_id": "aan_1",
    "question": "Count the number of papers.",
    "answer": "SELECT COUNT(DISTINCT T1.paper_id) FROM Affiliation AS T1 INNER JOIN Citation AS T2 ON T1.affiliation_id = T2.author_id GROUP BY T1.affiliation_id ORDER BY SUM(T2.cited_paper__Paper_ID__CITED_PAP__"
  },
  {
    "id": 967,
    "db_id": "aan_1",
    "question": "How many affiliations do we have?",
    "answer": "SELECT COUNT(T1.affiliation) FROM Affiliation AS T1 INNER JOIN Citation AS T2 ON T1.affiliation_id = T2.paper_id WHERE T1.name = 'Author_list'</sql>"
  },
  {
    "id": 968,
    "db_id": "aan_1",
    "question": "Count the number of affiliations.",
    "answer": "SELECT COUNT(DISTINCT T1.affiliation) FROM Affiliation AS T1 INNER JOIN Citation AS T2 ON T1.affiliation = T2.author_id GROUP BY T1.affiliation ORDER BY COUNT(T2.paper_id) DESC LIMIT 1</sql>"
  },
  {
    "id": 969,
    "db_id": "aan_1",
    "question": "How many papers do we have in NAACL 2000?",
    "answer": "SELECT COUNT(T1.paper_id) FROM citation AS T1 INNER JOIN `Author` AS T2 ON T1.author_id = T2.author_id WHERE T1.`cited_paper_id` IS NULL AND CAST((date() - '03/24') AS"
  },
  {
    "id": 970,
    "db_id": "aan_1",
    "question": "Count the number of papers in NAACL 2000.",
    "answer": "SELECT COUNT(T1.paper_id) FROM Affiliation AS T1 INNER JOIN Paper AS T2 ON T1.affiliation_id = T2.affiliation_id WHERE CAST(T1.name AS VARCHAR) IN ('NATO AFRICAN COMPLEX REG"
  },
  {
    "id": 971,
    "db_id": "aan_1",
    "question": "How many papers are published in year 2009 by Columbia University?",
    "answer": "SELECT COUNT(T1.paper_id) FROM citation AS T1 INNER JOIN `PublishedWorks` AS T2 ON T1.cited_paper_id = T2.Paper_id WHERE T1.year = '2009' AND T2.author_id LIKE '%"
  },
  {
    "id": 972,
    "db_id": "aan_1",
    "question": "Count the number of papers published by Columbia University in 2009.",
    "answer": "SELECT COUNT(DISTINCT T1.paper_id) FROM Affiliation AS T1 INNER JOIN citation AS T2 ON T1.affiliation_id = T2.affiliation WHERE T1.name = 'Columbia University'</sql>"
  },
  {
    "id": 973,
    "db_id": "aan_1",
    "question": "List names and addresses for all affiliations.",
    "answer": "SELECT T3.name, T1.address FROM Affiliation AS T1 INNER JOIN Citation AS T2 ON T1.affiliation_id = T2.author_id WHERE T2.`cited_paper_id` IS NOT NULL GROUP BY T3.name ORDER BY T1.name</sql>"
  },
  {
    "id": 974,
    "db_id": "aan_1",
    "question": "What are the names and addresses for all affiliations?",
    "answer": "SELECT T3.name, T1.address FROM Affiliation AS T1 INNER JOIN Citation AS T2 ON T1.affiliation_id = T2.author_id WHERE T2.`cited_paper_id` IS NOT NULL ORDER BY T2.paper_id DESC LIMIT 1</sql>"
  },
  {
    "id": 975,
    "db_id": "aan_1",
    "question": "List all venues and years for papers ordered by year.",
    "answer": "SELECT DISTINCT T1.venue, T2.year FROM Affiliation AS T1 INNER JOIN Citation AS T2 ON T1.affiliation_id = T2.affiliation WHERE T2.paper IS NOT NULL ORDER BY T2.`year` DESC LIMIT 1</sql>"
  },
  {
    "id": 976,
    "db_id": "aan_1",
    "question": "What are the distinct venues for papers, ordered by year?",
    "answer": "SELECT T3.location FROM citation AS T1 INNER JOIN `Paper` AS T2 ON T1.paper_id = T2.paper_id ORDER BY T2.`year`,T2.paper_id LIMIT 1</sql>"
  },
  {
    "id": 977,
    "db_id": "aan_1",
    "question": "Find the titles and paper IDs for papers written by Harvard University.",
    "answer": "SELECT DISTINCT T1.title, T3.paper_id FROM Citation AS T1 INNER JOIN Author AS T2 ON T1.cited_paper_id = T2.paper_id WHERE T2.affiliation_id = 'HU'</sql>"
  },
  {
    "id": 978,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers written in affiliation with Harvard University?",
    "answer": "SELECT DISTINCT T1.paper_id , T3.`cited_paper_id` FROM Affiliation AS T1 INNER JOIN Citation AS T2 ON T1.affiliation_id = T2.author_id INNER JOIN Paper AS T3 ON T1.paper_id"
  },
  {
    "id": 979,
    "db_id": "aan_1",
    "question": "Find all papers with titles and paper IDs written by Mckeown.",
    "answer": "SELECT DISTINCT T1.paper_id , T2.`author_id`, T2.paper_title, T3.cited_paper_id FROM Author AS T1 INNER JOIN citation AS T2 ON T1.author_id = T2.author_id INNER JOIN Paper AS T3 ON T"
  },
  {
    "id": 980,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers written by Mckeown?",
    "answer": "SELECT DISTINCT T1.title , T3.paper_id FROM Citation AS T1 INNER JOIN Author AS T2 ON T1.author_id = T2.author_id WHERE T3.cited_paper_id = 2 AND T1.paper_id IS NULL ORDER BY T2"
  },
  {
    "id": 981,
    "db_id": "aan_1",
    "question": "Find all papers with titles and paper IDs collaborated by Stanford University and Columbia University.",
    "answer": "SELECT T1.title, T1.paper_id FROM Paper AS T1 INNER JOIN Author AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Affiliation AS T3 ON T1.affiliation_id = T3.affiliation_id WHERE"
  },
  {
    "id": 982,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers which were affiliated with both Stanford and Columbia University?",
    "answer": "SELECT DISTINCT T1.paper_id, T3.`affiliation_id` FROM `Citation` AS T1 INNER JOIN `Author` AS T2 ON T2.author_id = T1.cited_pap WHERE T2.`name` = 'St"
  },
  {
    "id": 983,
    "db_id": "aan_1",
    "question": "Find all papers with titles and paper IDs co-authored by Mckeown, Kathleen and Rambow, Owen.",
    "answer": "SELECT T1.paper_id, T2.name FROM citation AS T1 INNER JOIN authors AS T2 ON T1.cited_paper_id = T2.paper_id WHERE T1.author_id IN ( SELECT T2."
  },
  {
    "id": 984,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids co-authored by Mckeown, Kathleen and Rambow, Owen?",
    "answer": "SELECT DISTINCT T1.paper_id AS title ,T2.paper_id AS cited_paper FROM Author AS T1 INNER JOIN Citation AS T2 ON T1.author_id = T2.cited_paper WHERE T2."
  },
  {
    "id": 985,
    "db_id": "aan_1",
    "question": "Find the titles and paper IDs for papers which have Mckeown but not Rambow in author list.",
    "answer": "SELECT DISTINCT T1.paper_id, T3.`author_id`, T4.`cited_paper_id` FROM `Citation` AS T1 INNER JOIN Author AS T2 ON T1.cited_paper_id = T2.`author_id` WHERE"
  },
  {
    "id": 986,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids which have Mckeown as an author, but not Rambow?",
    "answer": "SELECT DISTINCT T1.paper_id , T3.`author_id`, T4.`title` FROM Citation AS T1 INNER JOIN Author AS T2 ON T1.cited_paper_id = T2.paper_id INNER JOIN Affiliation AS T3"
  },
  {
    "id": 987,
    "db_id": "aan_1",
    "question": "Find the titles and paper IDs for papers which have Mckeown, Kathleen or Rambow, Owen in author list.",
    "answer": "SELECT DISTINCT T1.paper_id , T3.`author_id` FROM Author AS T1 INNER JOIN Citation AS T2 ON T1.author_id = T2.PaperID WHERE T2.cited_paper_id IN"
  },
  {
    "id": 988,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers that have Mckeown, Kathleen or Rambow, Owen in their author list?",
    "answer": "SELECT DISTINCT T1.paper_id , T2.`author_id`, T2.name FROM citation AS T1 INNER JOIN authors AS T2 ON T1.cited_pap = T2.author_id WHERE T"
  },
  {
    "id": 989,
    "db_id": "aan_1",
    "question": "List the names of all authors and their number of papers in descending order by number of papers.",
    "answer": "SELECT DISTINCT T1.name AS 'author', T1.num FROM authors AS T1 INNER JOIN citation AS T2 ON T1.author_id = T2.cited_paper_id ORDER BY T2.paper DESC</sql>"
  },
  {
    "id": 990,
    "db_id": "aan_1",
    "question": "How many papers did each author publish, ordered by number of papers?",
    "answer": "SELECT SUM(COUNT(DISTINCT T1.author_id)) FROM Author AS T1 INNER JOIN Citation AS T2 ON T1.author_id = T2.Paper_ID ORDER BY COUNT(T1.paper_id) DESC LIMIT 1</sql>"
  },
  {
    "id": 991,
    "db_id": "aan_1",
    "question": "List all affiliations with ascending ordered number of papers.",
    "answer": "SELECT T3.affiliation FROM Affiliation AS T1 INNER JOIN Citation AS T2 ON T1.affiliation_id = T2.author_id ORDER BY T2.paper_id DESC</sql>"
  },
  {
    "id": 992,
    "db_id": "aan_1",
    "question": "What are the names of all affiliations, ordered by number of papers?",
    "answer": "SELECT T3.name FROM Affiliation AS T1 INNER JOIN Citation AS T2 ON T1.affiliation_id = T2.author_id ORDER BY T1.numberofpapers DESC LIMIT 1</sql>"
  },
  {
    "id": 993,
    "db_id": "aan_1",
    "question": "List names of all authors who have more than 50 papers.",
    "answer": "SELECT DISTINCT T1.name FROM Author AS T1 INNER JOIN Citation AS T2 ON T1.author_id = T2.paper_id GROUP BY T1.name ORDER BY COUNT(T2.cited_paper_id) DESC LIMIT 5</sql>"
  },
  {
    "id": 994,
    "db_id": "aan_1",
    "question": "What are the names of all authors who have more than 50 papers?",
    "answer": "SELECT DISTINCT T1.name FROM Author AS T1 INNER JOIN Citation AS T2 ON T1.author_id = T2.cited_paper_id GROUP BY T1.name HAVING COUNT(T2.cited_paper) > 50</sql>"
  },
  {
    "id": 995,
    "db_id": "aan_1",
    "question": "List names of all authors who have only 1 paper.",
    "answer": "SELECT DISTINCT T3.name FROM Author AS T1 INNER JOIN Citation AS T2 ON T1.author_id = T2.author_id WHERE T2.cited_paper_id IS NULL GROUP BY T1.affiliation_id ORDER BY COUNT(T1.name) LIMIT 1</sql>"
  },
  {
    "id": 996,
    "db_id": "aan_1",
    "question": "What are the names of authors who have exactly 1 paper?",
    "answer": "SELECT DISTINCT T3.name FROM Author AS T1 INNER JOIN Citation AS T2 ON T1.author_id = T2.paper_id WHERE T2.cited_pap.paper_id IN ( SELECT T1.`Paper`.paper_id FROM citation AS T3 INNER JOIN authors AS"
  },
  {
    "id": 997,
    "db_id": "aan_1",
    "question": "What is the venue and year with the most number of publications?",
    "answer": "SELECT DISTINCT T1.venue, T2.`year` FROM citation AS T1 INNER JOIN paper AS T2 ON T1.paper_id = T2.paper_id ORDER BY COUNT(`T2`.`published`) DESC LIMIT 1</sql>"
  },
  {
    "id": 998,
    "db_id": "aan_1",
    "question": "What was the venue and year with the most publications?",
    "answer": "SELECT DISTINCT T1.venue, T3.`year` FROM citation AS T1 INNER JOIN paper AS T2 ON T1.paper_id = T2.paper_id INNER JOIN affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id ORDER BY COUNT(T"
  },
  {
    "id": 999,
    "db_id": "aan_1",
    "question": "What is the venue with the least number of publications?",
    "answer": "SELECT DISTINCT T1.venue FROM Citation AS T1 INNER JOIN Paper AS T2 ON T1.paper_id = T2.paper_id WHERE T2.`cited_pap` IS NULL ORDER BY COUNT(T1.paper) LIMIT 1</sql>"
  },
  {
    "id": 1000,
    "db_id": "aan_1",
    "question": "Which venue has the fewest publications?",
    "answer": "SELECT DISTINCT T1.venue FROM citation AS T1 INNER JOIN Paper AS T2 ON T1.paper_id = T2.paper_id ORDER BY COUNT(T2.affiliation_id) LIMIT 1</sql>"
  },
  {
    "id": 1001,
    "db_id": "aan_1",
    "question": "How many papers cite paper with id A00-1002?",
    "answer": "SELECT COUNT(T2.paper_id) FROM Citation AS T1 INNER JOIN Paper AS T2 ON T1.paper_id = T2.paper_id WHERE T1.cited_pap = 'A00-1002' GROUP BY T1.cited_"
  },
  {
    "id": 1002,
    "db_id": "aan_1",
    "question": "Count the number of papers which cited a paper with id A00-1002.",
    "answer": "SELECT COUNT(T1.paper_id) FROM Citation AS T1 INNER JOIN Paper AS T2 ON T1.paper_id = T2.paper_id WHERE T2.name = 'A00-1002' GROUP BY T1.paper_id ORDER"
  },
  {
    "id": 1003,
    "db_id": "aan_1",
    "question": "How many reference papers does paper with id D12-1027 have?",
    "answer": "SELECT COUNT(T2.paper_id) FROM citation AS T1 INNER JOIN Paper AS T2 ON T1.paper_id = T2.paper_id WHERE T2.title = 'D12-1027' GROUP BY T1.paper_id ORDER BY SUM"
  },
  {
    "id": 1004,
    "db_id": "aan_1",
    "question": "Count the number of references the paper with id D12-1027 has.",
    "answer": "SELECT COUNT(T1.paper_id) FROM citation AS T1 INNER JOIN papers AS T2 ON T1.paper_id = T2.paper_id WHERE T1.cited_pap = 'D12-1027'</sql>"
  },
  {
    "id": 1005,
    "db_id": "aan_1",
    "question": "What is the id and the number of citations of the most cited paper?",
    "answer": "SELECT DISTINCT T1.paper_id , SUM(IIF(T1.`Cited_Paper_ID` IS NULL AND T2.`cited_paper_id` IS NOT NULL, 1, 0)) AS total_cited, COUNT(T2.affiliation_"
  },
  {
    "id": 1006,
    "db_id": "aan_1",
    "question": "Give the id and the number of citations of the most cited paper.",
    "answer": "SELECT DISTINCT T1.paper_id , SUM(T2.`cited_paper_id`) FROM ( SELECT T3.paper_id, COUNT(`cited_pap`) AS num AS cnt FROM Author_list AS T1 INNER JOIN citations AS T2 ON T1.author_"
  },
  {
    "id": 1007,
    "db_id": "aan_1",
    "question": "Give the title of the paper which cites most number of papers?",
    "answer": "SELECT DISTINCT T1.title FROM ( SELECT DISTINCT T1.`author_id`, SUM(CASE WHEN T1.affiliation = 'Affiliation-34925738' THEN 1 END) AS avg FROM ( SELECT T2.`paper_id` , SUM("
  },
  {
    "id": 1008,
    "db_id": "aan_1",
    "question": "What is the title of the paper which cites the most other papers?",
    "answer": "SELECT DISTINCT T1.title FROM Author AS T1 INNER JOIN Citation AS T2 ON T1.author_id = T2.paper_id GROUP BY T1.name ORDER BY COUNT(T2.cited_paper_id) DESC LIMIT 1</sql>"
  },
  {
    "id": 1009,
    "db_id": "aan_1",
    "question": "List top 10 most cited papers and their numbers of citations.",
    "answer": "SELECT COUNT(T1.paper_id), SUM(T3.`number`) AS total FROM `Citation` AS T1 INNER JOIN `Paper` AS T2 ON T1.paper_id = T2.paper_id WHERE T3.affiliation_id IN ( SELECT DISTINCT T2"
  },
  {
    "id": 1010,
    "db_id": "aan_1",
    "question": "What are the 10 most cited papers, and how many citations did each have?",
    "answer": "SELECT CAST(COUNT(DISTINCT T3.paper_id) AS DECIMAL) * 2 AS per FROM Affiliation AS T1 INNER JOIN Citation AS T2 ON T2.paper_id = T1.affiliation_id WHERE T1.name"
  },
  {
    "id": 1011,
    "db_id": "aan_1",
    "question": "How many citations does Mckeown , Kathleen have ?",
    "answer": "SELECT COUNT(T1.author_id) FROM Affiliation AS T1 INNER JOIN citation AS T2 ON T1.affiliation_id = T2.paper_id WHERE T2.`cited_pap` IS NULL</sql>"
  },
  {
    "id": 1012,
    "db_id": "aan_1",
    "question": "Count the number of citations Mckeown , Kathleen has .",
    "answer": "SELECT COUNT(T1.cited_paper_id) FROM citation AS T1 INNER JOIN Author AS T2 ON T1.author_id = T2.author_id WHERE T1.name = 'Mckee', T2.name = 'Kathleen'</sql>"
  },
  {
    "id": 1013,
    "db_id": "aan_1",
    "question": "How many papers does Mckeown , Kathleen cite ?",
    "answer": "SELECT COUNT(T1.paper_id) FROM Author AS T1 INNER JOIN citation AS T2 ON T1.author_id = T2.cited_paper_id WHERE T2.name = 'MCKOWN, KATHLEEN' AND T2.paper_id IS NULL GROUP BY T"
  },
  {
    "id": 1014,
    "db_id": "aan_1",
    "question": "Count the number of papers Mckeown , Kathleen has cited .",
    "answer": "SELECT COUNT(T1.paper_id) FROM Author AS T1 INNER JOIN citation AS T2 ON T1.author_id = T2.author_id WHERE T2.cited_pap = 'Mckeown , Kathleen' LIMIT 1</sql>"
  },
  {
    "id": 1015,
    "db_id": "aan_1",
    "question": "Find the name and number of citations of the author who has most citations among all authors?",
    "answer": "SELECT DISTINCT T1.name, SUM(T1.`cited_pap`) FROM Affiliation AS T1 INNER JOIN Author AS T2 ON T1.affiliation_id = T2.affiliation_id GROUP BY T1.`author_id` ORDER BY"
  },
  {
    "id": 1016,
    "db_id": "aan_1",
    "question": "What is the name and number of citations of the author with the greatest number of citations among authors?",
    "answer": "SELECT DISTINCT T1.name, T2.numCitations FROM Author AS T1 INNER JOIN Citation AS T2 ON T1.author_id = T2.author_id WHERE T3.numCitedPapers > 9 ORDER BY COUNT(T2."
  },
  {
    "id": 1017,
    "db_id": "aan_1",
    "question": "What are the venues and years where Mckeown , Kathleen had papers ?",
    "answer": "SELECT DISTINCT T1.venue, T2.`year` FROM citation AS T1 INNER JOIN authors AS T2 ON T1.cited_paper_id = T2.author_id WHERE T2.name = 'Mckeown , Kathleen'</sql>"
  },
  {
    "id": 1018,
    "db_id": "aan_1",
    "question": "Which venues and years did Mckeown , Kathleen have papers ?",
    "answer": "SELECT DISTINCT T1.venue, T2.`year` FROM citation AS T1 INNER JOIN authors AS T2 ON T1.cited_paper_id = T2.author_id WHERE T2.name = 'Mckeown , Kathleen'</sql>"
  },
  {
    "id": 1019,
    "db_id": "aan_1",
    "question": "What are the venues and years where Columbia University had papers ?",
    "answer": "SELECT DISTINCT T1.venue , strftime('%Y', T3.dates) FROM Citation AS T1 INNER JOIN Venue AS T2 ON T1.cited_paper_id = T2.paper_id WHERE T1.conference = 'columbia'</sql>"
  },
  {
    "id": 1020,
    "db_id": "aan_1",
    "question": "Which venues and years did Columbia University have papers ?",
    "answer": "SELECT T3.title FROM citation AS T1 INNER JOIN publication AS T2 ON T1.paper_id = T2.paper_id WHERE T2.venue IS NULL AND T2.year BETWEEN 1967 & 2008</sql>"
  },
  {
    "id": 1021,
    "db_id": "aan_1",
    "question": "Which author had the most papers in the year 2009?",
    "answer": "SELECT DISTINCT T1.name FROM Affiliation AS T1 INNER JOIN citation AS T2 ON T1.affiliation_id = T2.author_id GROUP BY T2.author_id ORDER BY COUNT(T2.`cited paper id`) DESC LIMIT 1</sql>"
  },
  {
    "id": 1022,
    "db_id": "aan_1",
    "question": "What is the name of the author with the most papers in 2009?",
    "answer": "SELECT DISTINCT T1.name FROM Affiliation AS T1 INNER JOIN `Author` AS T2 ON T1.affiliation_id = T2.affiliation_id GROUP BY t2.author_id ORDER BY COUNT(t2) DESC LIMIT 1</sql>"
  },
  {
    "id": 1023,
    "db_id": "aan_1",
    "question": "What are the names of the top 3 affiliations that have the most papers in year 2009?",
    "answer": "SELECT DISTINCT T1.affiliation_id, SUM(T2.cited_paper_id) AS total FROM Affiliation AS T1 INNER JOIN Citation AS T2 ON T1.affiliation_id = T2.author_id WHERE"
  },
  {
    "id": 1024,
    "db_id": "aan_1",
    "question": "Which 3 affiliations had the most papers in 2009?",
    "answer": "SELECT T1.affiliation_id FROM Affiliation AS T1 INNER JOIN Citation AS T2 ON T1.affiliation_id = T2.author_id WHERE strftime( '%Y', T2.`cited-paper`) AND T2.year IN ( SELECT DIST"
  },
  {
    "id": 1025,
    "db_id": "aan_1",
    "question": "How many papers does Columbia University have in or before 2009 ?",
    "answer": "SELECT COUNT(T1.paper_id) FROM Affiliation AS T1 INNER JOIN `Citation` AS T2 ON T1.affiliation_id = T2.cited_paper_id WHERE CAST(STRFTIME('%Y', T2.cited_pap.timestamp"
  },
  {
    "id": 1026,
    "db_id": "aan_1",
    "question": "Count the number of papers Columbia University had during or prior to 2009 .",
    "answer": "SELECT COUNT(T1.paper_id) FROM Affiliation AS T1 INNER JOIN `Citation` AS T2 ON T1.affiliation_id = T2.cited_paper_id WHERE CAST(STRFTIME('%Y', T2.cited_pap"
  },
  {
    "id": 1027,
    "db_id": "aan_1",
    "question": "How many papers does Stanford University have between 2000 and 2009?",
    "answer": "SELECT COUNT(T1.paper_id) FROM Affiliation AS T1 INNER JOIN `Citation` AS T2 ON T1.affiliation_id = T2.cited_pap WHERE strftime('%Y', T1.name) BETWEEN"
  },
  {
    "id": 1028,
    "db_id": "aan_1",
    "question": "Count the number of papers Stanford University had between 2000 and 2009.",
    "answer": "SELECT COUNT(T1.paper_id) FROM Citation AS T1 INNER JOIN Paper AS T2 ON T1.paper_id = T2.paper_id WHERE DATE(T1.`PUBLISHED_YEAR`) BETWEEN '2000"
  },
  {
    "id": 1029,
    "db_id": "aan_1",
    "question": "What is the title of the paper that has most number of authors?",
    "answer": "SELECT DISTINCT T1.title FROM Author AS T1 INNER JOIN citation AS T2 ON T1.author_id = T2.author_id GROUP BY T1.paper_id ORDER BY COUNT(T1.cited_paper_id) DESC LIMIT 1</sql>"
  },
  {
    "id": 1030,
    "db_id": "aan_1",
    "question": "Give the title of the paper with the most authors.",
    "answer": "SELECT DISTINCT T1.title FROM Author AS T1 INNER JOIN citation AS T2 ON T1.author_id = T2.author_id ORDER BY COUNT(T2.paper_id) DESC LIMIT 1</sql>"
  },
  {
    "id": 1031,
    "db_id": "aan_1",
    "question": "How many collaborators has Mckeown , Kathleen had ?",
    "answer": "SELECT COUNT(T1.author_id) FROM Affiliation AS T1 INNER JOIN Citation AS T2 ON T1.affiliation_id = T2.paper_id WHERE T1.`name` = 'Mckeown, Katherine'</sql>"
  },
  {
    "id": 1032,
    "db_id": "aan_1",
    "question": "Count the number of collaborators that Mckeown , Kathleen has had .",
    "answer": "SELECT COUNT(T1.author_id) FROM Author AS T1 INNER JOIN citation AS T2 ON T1.author_id = T2.paper_id WHERE T1.name LIKE '%McKee%' AND T2.cited_paper = 'Mckeown, Kathleen'"
  },
  {
    "id": 1033,
    "db_id": "aan_1",
    "question": "Who has the most papers co-authored with Mckeown , Kathleen ?",
    "answer": "SELECT DISTINCT T1.name AS author_id,T3.affiliation FROM Author AS T1 INNER JOIN Citation AS T2 ON T1.author_id = T2.author_id INNER JOIN Paper AS T3 ON T2.paper_id = T3.c"
  },
  {
    "id": 1034,
    "db_id": "aan_1",
    "question": "What is the name of the author who has co-authored the most papers with Mckeown , Kathleen ?",
    "answer": "SELECT DISTINCT T1.name FROM Affiliation AS T1 INNER JOIN authors AS T2 ON T1.affiliation_id = T2.affiliation_id WHERE T1.Name IN ( SELECT DISTINCT T1.name FROM Citation"
  },
  {
    "id": 1035,
    "db_id": "aan_1",
    "question": "Find the id of the papers whose title has the key word 'translation'.",
    "answer": "SELECT DISTINCT T1.paper_id FROM citation AS T1 INNER JOIN `author` AS T2 ON T1.cited_paper_id = T2.author_id WHERE T1.keyword IN ('translation') ORDER BY T2.name</sql>"
  },
  {
    "id": 1036,
    "db_id": "aan_1",
    "question": "What are the ids for papers with titles containing 'translation'?",
    "answer": "SELECT DISTINCT T1.paper_id FROM citation AS T1 INNER JOIN authors AS T2 ON T1.author_id = T2.author_id WHERE T1.cited_pap LIKE '%Trans%'</sql>"
  },
  {
    "id": 1037,
    "db_id": "aan_1",
    "question": "Find the id and title of the papers that are never cited by others.",
    "answer": "SELECT T3.paper_id, T1.title FROM ( SELECT DISTINCT T3.paper_id AS cited_paper_id , T2.title AS citation FROM Citation AS T1 INNER JOIN authors AS T2 ON T1.cited_paper_id = T2.paper_"
  },
  {
    "id": 1038,
    "db_id": "aan_1",
    "question": "What are the ids and titles for papers that have never been cited?",
    "answer": "SELECT T3.cited_paper_id FROM Affiliation AS T1 INNER JOIN Author AS T2 ON T1.affiliation_id = T2.author_id WHERE T1.address IS NULL AND T2.name = '' GROUP BY t1.affiliation_id ORDER BY COUNT("
  },
  {
    "id": 1039,
    "db_id": "aan_1",
    "question": "Find the name of the affiliation whose address contains 'China' and publishes the greatest number of papers.",
    "answer": "SELECT DISTINCT T1.name FROM Affiliation AS T1 INNER JOIN `Citation` AS T2 ON T1.affiliation_id = T2.cited_paper_id GROUP BY T1.affiliation ORDER BY COUNT(T2.paper_"
  },
  {
    "id": 1040,
    "db_id": "aan_1",
    "question": "What is the name of the affiliation which publishes the greatest number of papers among those whose address contains 'China'.",
    "answer": "SELECT DISTINCT T1.affiliation_id FROM Affiliation AS T1 INNER JOIN citation AS T2 ON T1.affiliation_id = T2.paper_id WHERE strftime('%J', T2.`cited-paper"
  },
  {
    "id": 1041,
    "db_id": "aan_1",
    "question": "Find the number of papers published in different conferences each year.",
    "answer": "SELECT SUM(COUNT(DISTINCT T1.paper_id)) / COUNT(DISTINCT t2.Paper) AS num FROM Citation AS T1 INNER JOIN Paper AS T2 ON T1.cited_paper_id = T2.`published_paper_id` WHERE year IS NULL AND T1"
  },
  {
    "id": 1042,
    "db_id": "aan_1",
    "question": "How many papers are published in each venue in each year?",
    "answer": "SELECT DISTINCT T1.paper_id FROM Affiliation AS T1 INNER JOIN Paper AS T2 ON T1.affiliation_id = T2.affiliation_id WHERE `Date` BETWEEN '2008' AND '2015' ORDER BY T2.paper"
  },
  {
    "id": 1043,
    "db_id": "aan_1",
    "question": "Find the total number of papers for each affiliation.",
    "answer": "SELECT SUM(SUM(CASE WHEN T1.affiliation IN ('GQN') THEN 1 ELSE 0 END)) AS num , COUNT(T2.paper_id) FROM Affiliation AS T1 INNER JOIN Author AS T2 ON T1.affiliation = T2.affiliation WHERE T1.name ="
  },
  {
    "id": 1044,
    "db_id": "aan_1",
    "question": "How many papers has each affiliation published?",
    "answer": "SELECT DISTINCT COUNT(DISTINCT T1.affiliation_id), SUM(T3.num) FROM Affiliation AS T1 INNER JOIN Citation AS T2 ON T1.affiliation_id = T2.paper_id WHERE T2.paper_id IS NOT NULL GROUP BY T3.num ORDER"
  },
  {
    "id": 1045,
    "db_id": "aan_1",
    "question": "Find the titles of papers that have more than 50 citations.",
    "answer": "SELECT DISTINCT T1.title FROM citation AS T1 INNER JOIN paper AS T2 ON T1.paper_id = T2.paper_id WHERE T2.numCited < 50 GROUP BY T1.paper_id ORDER BY SUM(T1.numCited) DESC LIMIT 1"
  },
  {
    "id": 1046,
    "db_id": "aan_1",
    "question": "What are the titles for papers with more than 50 citations?",
    "answer": "SELECT DISTINCT T1.title FROM citation AS T1 INNER JOIN papers AS T2 ON T1.paper_id = T2.paper_id WHERE T2.total_citations >  50 ORDER BY T1.paper_id LIMIT 1</sql>"
  },
  {
    "id": 1047,
    "db_id": "aan_1",
    "question": "Find the number of authors who did not publish any paper that is cited more than 50 times.",
    "answer": "SELECT COUNT(T1.author_id) AS num FROM author AS T1 INNER JOIN Citation AS T2 ON T1.author_id = T2.paper_id WHERE T2.`cited_pap` > 50 LIMIT 1</sql>"
  },
  {
    "id": 1048,
    "db_id": "aan_1",
    "question": "How many authors have not published a paper with more than 50 citations?",
    "answer": "SELECT COUNT(T1.author_id) FROM Affiliation AS T1 INNER JOIN citation AS T2 ON T1.affiliation_id = T2.paper_id WHERE T2.`cited_paper_id` > '50' AND T1.name != 'J\u00fcrgen"
  },
  {
    "id": 1049,
    "db_id": "aan_1",
    "question": "Find the names of authors who published some paper on NAACL and ACL in the year 2009.",
    "answer": "SELECT DISTINCT T1.name FROM Affiliation AS T1 INNER JOIN author AS T2 ON T1.affiliation_id = T2.affiliation_id WHERE strftime('%Y', T2.date) IN ( '200"
  },
  {
    "id": 1050,
    "db_id": "aan_1",
    "question": "What are the names of authors who published in both NAACL and ACL in 2009?",
    "answer": "SELECT DISTINCT T1.name FROM Author AS T1 INNER JOIN citation AS T2 ON T1.author_id = T2.paper_id WHERE T2.cited_pap BETWEEN '2009' AND '2014"
  },
  {
    "id": 1051,
    "db_id": "aan_1",
    "question": "Find the name of authors who have never published a paper in ACL.",
    "answer": "SELECT DISTINCT T1.name FROM Author AS T1 INNER JOIN citation AS T2 ON T1.author_id = T2.author_id WHERE T2.paper_id IS NULL LIMIT 1</sql>"
  },
  {
    "id": 1052,
    "db_id": "aan_1",
    "question": "What are the names of authors who have not published a paper in ACL?",
    "answer": "SELECT DISTINCT T1.name FROM Author AS T1 INNER JOIN citation AS T2 ON T1.author_id = T2.cited_paper_id WHERE T2.author_id IS NULL AND T2.paper_id IS NULL AND T2.cited_paper_id IS"
  },
  {
    "id": 1053,
    "db_id": "conference",
    "question": "How many conferences are there?",
    "answer": "SELECT COUNT(T1.Conference_Name), T2.Conference_Location FROM institution AS T1 INNER JOIN conference AS T2 ON T1.Institution_ID = T2.Staff_ID WHERE T2.Year BETWEEN 96 AND 2020 ORDER BY T2.Date LIMIT 1</sql>"
  },
  {
    "id": 1054,
    "db_id": "conference",
    "question": "What is the total number of conferences?",
    "answer": "SELECT COUNT(T1.Conference_ID), T2.`Conference_Name`, COUNT(DISTINCT T2.Institution_ID) FROM conference AS T1 INNER JOIN institution AS T2 ON T1.Conference_ID = T2.Conference_ID GROUP BY T1.conference_name ORDER BY COUNT(T1.Conference_ID) DESC LIMIT 1</sql>"
  },
  {
    "id": 1055,
    "db_id": "conference",
    "question": "List all distinct conference names.",
    "answer": "SELECT T1.name FROM conference AS T1 INNER JOIN institution AS T2 ON T1.Conference_ID = T2.Institution_ID WHERE T2.location IS NOT NULL ORDER BY T2.Name</sql>"
  },
  {
    "id": 1056,
    "db_id": "conference",
    "question": "What are the different conference names?",
    "answer": "SELECT DISTINCT T2.name FROM \"institution AS T1 INNER JOIN \"conference AS T2 ON T1.Institution_ID = T2.Conference_ID WHERE T2.CONFERENCE_NAME LIKE 'sample%' GROUP BY T2.conference_name ORDER BY COUNT(T1.location) DESC LIMIT 1</sql>"
  },
  {
    "id": 1057,
    "db_id": "conference",
    "question": "List all conference name, year, and location.",
    "answer": "SELECT DISTINCT T2.Conference_Name, T3.Year, T1.location FROM \"conference AS T1 INNER JOIN conference AS T2 ON T1.Conference_ID = T2.Conference_ID INNER JOIN ( SELECT T0.name , MAX(T0.Year) AS Year FROM `staff` AS T0 INNER JOIN `conference AS T3 ON T0.Staff_ID = T3.Staff_ID"
  },
  {
    "id": 1058,
    "db_id": "conference",
    "question": "What are the names, years, and locations of all conferences?",
    "answer": "SELECT DISTINCT T2.name, T3.year FROM conference AS T1 INNER JOIN institution AS T2 ON T1.conference_id = T2.Conference_ID WHERE T1.location IS NULL AND T2.Institution_Name <> 'UNK'</sql>"
  },
  {
    "id": 1059,
    "db_id": "conference",
    "question": "Show all conference names and the number of times each conference has.",
    "answer": "SELECT DISTINCT T2.name, COUNT(T1.conference_ID) FROM conference AS T1 INNER JOIN `staff` AS T2 ON T1.Conference_ID = T2.Staff_ID GROUP BY T2.Name ORDER BY T2.Age DESC LIMIT 1</sql>"
  },
  {
    "id": 1060,
    "db_id": "conference",
    "question": "For each conference name, how many times has it occurred?",
    "answer": "SELECT COUNT(T1.name), SUM(T2.nationality) AS total FROM conference AS T1 INNER JOIN \"conference\" AS T2 ON T1.Conference_ID = T2.Conference_ID GROUP BY T2.conference_name ORDER BY COUNT(T1.name) DESC LIMIT 1</sql>"
  },
  {
    "id": 1061,
    "db_id": "conference",
    "question": "show all years and the number of conferences in each year.",
    "answer": "SELECT SUM(YEAR), COUNT(DISTINCT T2.CONFERENCE_ID) FROM institution AS T1 INNER JOIN conference AS T2 ON T1.Institution_ID = T2.Conference_ID GROUP BY T2.Year</sql>"
  },
  {
    "id": 1062,
    "db_id": "conference",
    "question": "How many conferences occur every year?",
    "answer": "SELECT COUNT(T1.Conference_ID), T2.`Year`, T2.Name FROM institution AS T1 INNER JOIN conference AS T2 ON T1.Institution_ID = T2.Conference_ID GROUP BY T1.Staff_ID ORDER BY COUNT(T2.Date) DESC LIMIT 3</sql>"
  },
  {
    "id": 1063,
    "db_id": "conference",
    "question": "which year has least number of conferences?",
    "answer": "SELECT MAX(DISTINCT T2.year) - COUNT(T1.name) AS total FROM institution AS T1 INNER JOIN conference AS T2 ON T1.Institution_ID = T2.Conference_ID GROUP BY T1.institution, T1.location ORDER BY SUM(IIF(T1.\"Total\" IS NULL AND T3.total BETWEEN 1 AND 8)) - COUNT(T2.name) AS min ORDER"
  },
  {
    "id": 1064,
    "db_id": "conference",
    "question": "What year had the fewest conferences?",
    "answer": "SELECT COUNT(T1.Conference_ID), T2.`Year` FROM 'institution AS T1 INNER JOIN conference AS T2 ON T1.Institution_ID = T2.Conference_ID GROUP BY T2.Year ORDER BY SUM(DISTINCT T1.Conference_Name) - COUNT(T2.Conference_ID) LIMIT 1</sql>"
  },
  {
    "id": 1065,
    "db_id": "conference",
    "question": "Show all locations where at least two conferences are located.",
    "answer": "SELECT T1.location FROM conference AS T1 INNER JOIN conference_participation AS T2 ON T1.conference_id = T2.Conference_ID WHERE T1.Location IN ( SELECT DISTINCT T3.location FROM `conference` AS T3 INNER JOIN `staff` AS T4 ON T2.Staff_ID  = T4.Staff_ID WHERE T4.name = 'Allen' AND T3.Con"
  },
  {
    "id": 1066,
    "db_id": "conference",
    "question": "What are all locations that have hosted at least two conferences?",
    "answer": "SELECT T1.location FROM conference AS T1 INNER JOIN location AS T2 ON T1.Conference_ID = T2.Conference_ID GROUP BY T1.Location HAVING COUNT(DISTINCT T1.Conference_ID) > 2 AND SUM(T1.PRIMARY KEY (staff_ID)) IN ( SELECT SUM (SUM(CASE WHEN conference.year != '1986' THEN CONVERT(T2.location"
  },
  {
    "id": 1067,
    "db_id": "conference",
    "question": "Show the institution name, location and founded year of all institutions.",
    "answer": "SELECT DISTINCT T2.Institution_Name, T3.location, CAST(STRFTIME('%Y', T1.Founded) AS datetime) FROM \"conference\" AS T1 INNER JOIN institution AS T2 ON T1.Conference_ID = T2.Institution_ID INNER JOIN `staff` AS T3 ON T2.Staff_ID = T3.Staff_ID WHERE T2.Institution_Name ="
  },
  {
    "id": 1068,
    "db_id": "conference",
    "question": "What are the names, locations, and founding years for all institutions?",
    "answer": "SELECT DISTINCT T2.name, T3.location, T1.founded FROM institution AS T1 INNER JOIN conference AS T2 ON T1.Institution_ID = T2.Conference_ID INNER JOIN staff AS T3 ON T3.staff_ID = T2.staff_ID ORDER BY T1.name, strftime('%J', T1.Created), strftime('%Y', T1.Founded"
  },
  {
    "id": 1069,
    "db_id": "conference",
    "question": "How many institution are founded between 1850 and 1900?",
    "answer": "SELECT COUNT(Institution_ID) FROM \"institution WHERE Foundation BETWEEN '2013' AND '1900'\" GROUP BY Institution_ID ORDER BY Founded DESC LIMIT 4</sql>"
  },
  {
    "id": 1070,
    "db_id": "conference",
    "question": "How many institutions were founded between 1850 and 1900?",
    "answer": "SELECT COUNT(T2.Institution_ID), T3.`Year`, strftime('%J', T3.Founded) FROM institution AS T1 INNER JOIN staff AS T2 ON T2.Staff_ID = T1.Staff_ID WHERE strftime('%J', T3.Founded) BETWEEN '600' AND 1897 AND 'T1' INTERSECT SELECT COUNT(T2"
  },
  {
    "id": 1071,
    "db_id": "conference",
    "question": "Show the institution name and location of institution that is most recently founded.",
    "answer": "SELECT T1.institution_name, T2.location FROM institution AS T1 INNER JOIN conference_participation AS T2 ON T1.Institution_ID = T2.staff_ID WHERE T2.conference IS NULL GROUP BY T2.institution ORDER BY T2.instance DESC LIMIT 1</sql>"
  },
  {
    "id": 1072,
    "db_id": "conference",
    "question": "What are the names and locations of the most recently-founded institution?",
    "answer": "SELECT DISTINCT T2.name, T3.location FROM \"institutions\" AS T1 INNER JOIN `conferences` AS T2 ON T1.Institution_ID = T2.Conference_ID INNER JOIN \"staff\" AS T3 ON T1.Staff_ID = T3.staff_ID ORDER BY T2.Year DESC LIMIT 1</sql>"
  },
  {
    "id": 1073,
    "db_id": "conference",
    "question": "Show the institution name and the number of staff for each institution founded after 1800.",
    "answer": "SELECT DISTINCT T2.Institution_Name, COUNT(T1.Institution_ID) FROM conference AS T1 INNER JOIN \"staff\" AS T2 ON T1.Conference_ID = T2.Staff_ID WHERE T1.\"Year\" > 1800</sql>"
  },
  {
    "id": 1074,
    "db_id": "conference",
    "question": "For each institution id , how many staff members does each institution have that was founded after 1800 ? return their names .",
    "answer": "SELECT T2.name, COUNT(T1.staff_id), strftime('%J', T1.Founded) FROM `institution` AS T1 INNER JOIN `conference` AS T2 ON T1.Institution_ID = T2.Conference_ID WHERE strftime('%Y', T1.Founded) >= 1800 GROUP BY T1.staff_id ORDER BY COUNT(T1.staff"
  },
  {
    "id": 1075,
    "db_id": "conference",
    "question": "Show institution name which there is no staff in our record.",
    "answer": "SELECT DISTINCT T2.institution_name FROM conference AS T1 INNER JOIN staff AS T2 ON T1.conference_id = T2.staff_id WHERE T2.name = 'No Staff'</sql>"
  },
  {
    "id": 1076,
    "db_id": "conference",
    "question": "What is the name of the institution with no staff in the records?",
    "answer": "SELECT DISTINCT T2.institution_name FROM conference AS T1 INNER JOIN \"staff\" AS T2 ON T1.Conference_ID = T2.Staff_ID WHERE T2.Nationality = 'United States of America' AND T1.Location IS NULL</sql>"
  },
  {
    "id": 1077,
    "db_id": "conference",
    "question": "Show all staff name who are above the average age.",
    "answer": "SELECT DISTINCT T2.name FROM \"staff AS T1 INNER JOIN conference AS T2 ON T1.staff_id = T2.staff_ID WHERE CAST(STRFTIME('%Y', T1.year) AS INT) BETWEEN 60405 AND 65493 ORDER BY strftime('%Y', T1.year), (strftime('%M', T2.year))"
  },
  {
    "id": 1078,
    "db_id": "conference",
    "question": "What are the names of all staff members who are older than average?",
    "answer": "SELECT DISTINCT T2.name FROM conference AS T1 INNER JOIN staff AS T2 ON T1.conference_id = T2.staff_ID WHERE T1.year BETWEEN 2003 AND 2025</sql>"
  },
  {
    "id": 1079,
    "db_id": "conference",
    "question": "What is the maximum and minimum age of all staff from the United States?",
    "answer": "SELECT CAST(SUM(CASE WHEN T2.Nationality = 'United states' THEN T1.age ELSE NULL END)) AS float, SUM(CASE WHEN T2.Nationality = 'United states' THEN T1.age ELSE NULL END) / COUNT(T1.Staff_ID) FROM `conference` AS T1 INNER JOIN institution AS T2 ON T1.Conference_ID = T2.Institution_ID WHERE T2."
  },
  {
    "id": 1080,
    "db_id": "conference",
    "question": "What are the maximum and minimum ages for all staff?",
    "answer": "SELECT DISTINCT MAX(age), MIN(age) FROM staff GROUP BY staff ORDER BY age DESC LIMIT 1</sql>"
  },
  {
    "id": 1081,
    "db_id": "conference",
    "question": "Show all conference names which the staff from Canada attends.",
    "answer": "SELECT DISTINCT T2.name FROM conference AS T1 INNER JOIN conference_participation AS T2 ON T1.conference_id = T2.Conference_ID WHERE T2.country = 'Canada'</sql>"
  },
  {
    "id": 1082,
    "db_id": "conference",
    "question": "What are the names of all the conferences that has staff from Canada attending?",
    "answer": "SELECT DISTINCT T2.name FROM conference AS T1 INNER JOIN conference_participation AS T2 ON T1.conference_ID = T2.Conference_ID WHERE T2.country = 'canada' AND T2.role IN ('Host', 'Facilitator')</sql>"
  },
  {
    "id": 1083,
    "db_id": "conference",
    "question": "Show all staff names who have been both speaker and sponsor in some conference.",
    "answer": "SELECT DISTINCT T2.name FROM \"conference AS T1 INNER JOIN `staff AS T2 ON T1.Conference_ID = T2.Staff_ID WHERE T2.name IN ('Speaker', 'Sponsor') AND T1.Year BETWEEN 1983 AND 1996 GROUP BY T2.name</sql>"
  },
  {
    "id": 1084,
    "db_id": "conference",
    "question": "What are the names of the staff members who have been both a speaker and a sponsor at some conference?",
    "answer": "SELECT DISTINCT T2.name FROM conference AS T1 INNER JOIN \"staff\" AS T2 ON T1.Conference_ID = T2.Staff_ID WHERE T1.Location LIKE '%Chicago%' AND T1.Nationality = 'US' GROUP BY T2.Name ORDER BY COUNT(T3.Name) DESC LIMIT 3</sql>"
  },
  {
    "id": 1085,
    "db_id": "conference",
    "question": "Show all names who have been in both ACL and Naccl.",
    "answer": "SELECT DISTINCT T2.name FROM conference AS T1 INNER JOIN staff AS T2 ON T1.conference_id = T2.staff_ID WHERE T2.nacl != 'ACL' AND T1.country = 'asia'</sql>"
  },
  {
    "id": 1086,
    "db_id": "conference",
    "question": "What are the names of everbody who has participated in both the ACL and NACCL conferences?",
    "answer": "SELECT DISTINCT T2.name FROM conference AS T1 INNER JOIN participation AS T2 ON T1.conference_ID = T2.Conference_ID WHERE T1.location = 'nacl' AND T1.year = '2021' GROUP BY T2.staff_id ORDER BY DISTINCT T2.name</sql>"
  },
  {
    "id": 1087,
    "db_id": "conference",
    "question": "Show all staff names who attend a conference in 2003 or 2004.",
    "answer": "SELECT DISTINCT T1.name FROM \"staff\" AS T1 INNER JOIN conference AS T2 ON T1.Staff_ID = T2.Staff_ID WHERE T2.`Conference_Name` LIKE '2003%' OR T2.Year LIKE '2004%'</sql>"
  },
  {
    "id": 1088,
    "db_id": "conference",
    "question": "What are the staff names who participated in conferences between 2003 or 2004?",
    "answer": "SELECT DISTINCT T1.name FROM \"staff\" AS T1 INNER JOIN conference_participation AS T2 ON T1.staff_ID = T2.Staff_ID WHERE (T1.Age BETWEEN '30' AND '65') OR strftime('%Y', T1.Institution_Date) BETWEEN 2003 AND 2004 GROUP BY T1.name ORDER BY"
  },
  {
    "id": 1089,
    "db_id": "conference",
    "question": "Show the conference name and year and the number of participants for each conference.",
    "answer": "SELECT DISTINCT T2.Conference_Name, T2.Year FROM Conference AS T1 INNER JOIN Conference_participation AS T2 ON T1.Conference_ID = T2.conference_id WHERE T1.Location LIKE '%newton%' ORDER BY T2.year DESC LIMIT 1</sql>"
  },
  {
    "id": 1090,
    "db_id": "conference",
    "question": "For each conference id, what are their names, year, and number of participants?",
    "answer": "SELECT DISTINCT T2.name AS conference , CAST(T1.Year AS varchar) + ': ' AS str FROM `conference` AS T1 INNER JOIN `staff` AS T2 ON T1.Conference_ID = T2.Staff_ID WHERE T1.Conference_Name = ''Summer'' ORDER BY T1.Year DESC</sql>"
  },
  {
    "id": 1091,
    "db_id": "conference",
    "question": "Find the name of the conferences that have the top 2 most number of attendants.",
    "answer": "SELECT DISTINCT T1.name FROM conference AS T1 INNER JOIN staff AS T2 ON T1.Conference_ID = T2.Staff_ID ORDER BY SUM(T1.NumAttendants) DESC LIMIT 2</sql>"
  },
  {
    "id": 1092,
    "db_id": "conference",
    "question": "What are the names of the conferences that have the top 2 most people attending?",
    "answer": "SELECT DISTINCT T1.name FROM conference AS T1 INNER JOIN staff AS T2 ON T1.Conference_ID = T2.Staff_ID ORDER BY T2.PRIMARYKEY('staff_id') DESC LIMIT 2</sql>"
  },
  {
    "id": 1093,
    "db_id": "conference",
    "question": "Find the name and nationality of the people who did not participate in any ACL conference.",
    "answer": "SELECT DISTINCT T2.name, T2.nationality FROM \"institution\" AS T1 INNER JOIN conference_participation AS T2 ON T1.Institution_ID = T2.Staff_ID WHERE T2.`role` NOT IN ( SELECT DISTINCT T3.`Role` FROM institution AS T3 INNER JOIN conference AS T4 ON T2.Staff_ID = T4.staff_id WHERE T1.Institution"
  },
  {
    "id": 1094,
    "db_id": "conference",
    "question": "What are the names and nationalities of the people who did not participate in any ACL conferences?",
    "answer": "SELECT DISTINCT T2.name, T2.nationality FROM conference AS T1 INNER JOIN participation AS T2 ON T1.Conference_ID = T2.conference_id WHERE T2.role = 'unknown' AND NOT T1.participated IN ( SELECT T1.Participated FROM participant AS T1 INNER JOIN participation AS T2 ON T1.Staff_ID = T2.staff_ID WHERE T2."
  },
  {
    "id": 1095,
    "db_id": "conference",
    "question": "Find the name and location of the universities that did not have any staff participated in any conference in 2004.",
    "answer": "SELECT DISTINCT T1.name, T1.location FROM institution AS T1 INNER JOIN conference AS T2 ON T1.Institution_ID = T2.Conference_ID WHERE strftime('%Y', T2.Date) = '2004' AND T2.Included IN ( SELECT T1.name, T1.location FROM institution AS T1 INNER JOIN conference AS T2 ON T1.Institution_ID = T2"
  },
  {
    "id": 1096,
    "db_id": "conference",
    "question": "What are the names and locations of the universities that did not have any staff participating in any conferences in 2004?",
    "answer": "SELECT DISTINCT T1.name, T1.location FROM conference AS T1 INNER JOIN `staff` AS T2 ON T1.Conference_ID = T2.Staff_ID WHERE strftime('%Y', T1.Created) = '2004' AND NOT T2.Nationality = 'United States of America'</sql>"
  },
  {
    "id": 1097,
    "db_id": "pilot_1",
    "question": "What is the name of the oldest pilot?",
    "answer": "SELECT T3.pilot_name FROM pilots AS T1 INNER JOIN hangars AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.age > ( SELECT MAX(T2.location) FROM hangar AS T3 )</sql>"
  },
  {
    "id": 1098,
    "db_id": "pilot_1",
    "question": "Return the name of the oldest pilot.",
    "answer": "SELECT T3.pilot_name FROM pilots AS T1 INNER JOIN hangars AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.age > ( SELECT MAX(T2.age) FROM ( SELECT T1.pilot_name, COUNT(T3.pilot_name), T1.pilot_id AS id , SUBSTR(SUBSTR(T1.location, "
  },
  {
    "id": 1099,
    "db_id": "pilot_1",
    "question": "What are the names of pilots whose age is below the average age, ordered by age?",
    "answer": "SELECT T3.pilot_name, avg(T2.age), T1.location ORDER BY T2.age DESC LIMIT 1</sql>"
  },
  {
    "id": 1100,
    "db_id": "pilot_1",
    "question": "Return the names of pilots who are younger than average, ordered by age ascending.",
    "answer": "SELECT T3.pilot_name FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name WHERE T1.location = 'north' ORDER BY T2.`age` DESC LIMIT 3</sql>"
  },
  {
    "id": 1101,
    "db_id": "pilot_1",
    "question": "Find all information of on pilots whose age is less than 30.",
    "answer": "SELECT DISTINCT T2.pilot_name FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name WHERE T1.location = 'Waco,TX' AND T1.age < 30</sql>"
  },
  {
    "id": 1102,
    "db_id": "pilot_1",
    "question": "What is all the information about pilots who are younger than 30 ?",
    "answer": "SELECT DISTINCT T2.pilot_name, T2.plane_name, T1.age FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.age BETWEEN 30 AND 50</sql>"
  },
  {
    "id": 1103,
    "db_id": "pilot_1",
    "question": "Find the names of all pilots who have a plane named Piper Cub and is under 35.",
    "answer": "SELECT T2.pilot_name FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T2.location IS NOT NULL AND T1.age BETWEEN 35 AND 45 GROUP BY T2.planemaker ORDER BY COUNT(T2.planemaker) DESC LIMIT 1</sql>"
  },
  {
    "id": 1104,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who are younger than 35 and have a plane named Piper Cub?",
    "answer": "SELECT T2.pilot_name FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name WHERE T2.age BETWEEN 34 AND 50 AND T1.location = 'miami'</sql>"
  },
  {
    "id": 1105,
    "db_id": "pilot_1",
    "question": "Where is the plane F-14 Fighter located?",
    "answer": "SELECT T3.location FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.plane_name = 'F-14 Fighter'</sql>"
  },
  {
    "id": 1106,
    "db_id": "pilot_1",
    "question": "Return the location of the hangar in which F-14 Fighter is located.",
    "answer": "SELECT T3.location FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name WHERE T1.planes LIKE '%F-14%'</sql>"
  },
  {
    "id": 1107,
    "db_id": "pilot_1",
    "question": "How many different places have some plane?",
    "answer": "SELECT COUNT(T2.pilot_name), T2.location FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.plane_name IN ( SELECT plane_name FROM PilotSkills GROUP BY aircraft_name )</sql>"
  },
  {
    "id": 1108,
    "db_id": "pilot_1",
    "question": "Count the number of different locations of hangars.",
    "answer": "SELECT COUNT(DISTINCT T2.location), T1.pilot_name FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name WHERE location IS NOT NULL GROUP BY T1.pilot_name ORDER BY COUNT(T1.pilot_name) DESC LIMIT 1</sql>"
  },
  {
    "id": 1109,
    "db_id": "pilot_1",
    "question": "Which plane does the pilot Jones with age 32 has?",
    "answer": "SELECT T3.pilot_name FROM Pilots AS T1 INNER JOIN Hangars AS T2 ON T1.plane_name = T2.plane_name WHERE T1.age BETWEEN 1 AND 46 IN ORDER BY strftime('%J', T1.`timestamp`)</sql>"
  },
  {
    "id": 1110,
    "db_id": "pilot_1",
    "question": "What are the names of planes that the pilot Jones who is 32 has?",
    "answer": "SELECT T2.pilot_name FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T2.location = 'Tokyo' LIMIT 1</sql>"
  },
  {
    "id": 1111,
    "db_id": "pilot_1",
    "question": "How many pilots who are older than 40?",
    "answer": "SELECT COUNT(pilot_name) FROM Hangar WHERE age BETWEEN '40' AND '60' GROUP BY pilot_name ORDER BY COUNT(pilot_name) DESC LIMIT 1</sql>"
  },
  {
    "id": 1112,
    "db_id": "pilot_1",
    "question": "Count the number of pilots with age greater than 40.",
    "answer": "SELECT COUNT(DISTINCT T2.pilot_name) FROM Pilots AS T1 INNER JOIN Hangars AS T2 ON T1.plane_name = T2.plane_name GROUP BY T1.age ORDER BY COUNT(T2.plane_name) DESC LIMIT 1</sql>"
  },
  {
    "id": 1113,
    "db_id": "pilot_1",
    "question": "How many plane B-52 Bomber owned by the pilot who is under 35?",
    "answer": "SELECT COUNT(pilot_name) FROM pilots WHERE age < ( SELECT MIN(age) FROM Hangar WHERE aircraft_name = 'Bomber' AND location LIKE '% % ') GROUP BY pilot_name ORDER BY COUNT(pilot_name) DESC LIMIT 1</sql>"
  },
  {
    "id": 1114,
    "db_id": "pilot_1",
    "question": "Count the number of B-52 Bombers owned by pilots under 35.",
    "answer": "SELECT COUNT(DISTINCT T1.pilot_name) FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.age < 34 GROUP BY T1.pilot_name ORDER BY COUNT(DISTINCT T1.pilot_name) DESC LIMIT 1</sql>"
  },
  {
    "id": 1115,
    "db_id": "pilot_1",
    "question": "Who is the youngest pilot to fly the plane Piper Cub?",
    "answer": "SELECT T3.pilot_name FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name ORDER BY age LIMIT 1, 1</sql>"
  },
  {
    "id": 1116,
    "db_id": "pilot_1",
    "question": "Return the name of the youngest pilot to fly Piper Cub.",
    "answer": "SELECT T3.pilot_name FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name ORDER BY age DESC LIMIT 1</sql>"
  },
  {
    "id": 1117,
    "db_id": "pilot_1",
    "question": "What is the name of the most popular plane?",
    "answer": "SELECT T3.pilot_name FROM Pilots AS T1 INNER JOIN hangars AS T2 ON T1.pilot_name = T2.plane_name GROUP BY T3.plane_name ORDER BY COUNT(T1.pilot_name) DESC LIMIT 1</sql>"
  },
  {
    "id": 1118,
    "db_id": "pilot_1",
    "question": "What is the name of the plane that is flown the most often?",
    "answer": "SELECT T3.pilot_name FROM Hangar AS T1 INNER JOIN Pilots AS T2 ON T1.plane_name = T2.pilot_name ORDER BY T1.`number` DESC LIMIT 1</sql>"
  },
  {
    "id": 1119,
    "db_id": "pilot_1",
    "question": "What is the name of the least popular plane?",
    "answer": "SELECT T3.pilot_name FROM Pilots AS T1 INNER JOIN hangars AS T2 ON T1.plane_name = T2.plane_name ORDER BY total_appearances = ( SELECT SUM(T2.appearance) - ( SELECT COUNT(T2.location) AS avg FROM Hangar AS T3 INNER JOIN Pilots AS T4 ON T1.pilot_name = T4.pilot_name WHERE"
  },
  {
    "id": 1120,
    "db_id": "pilot_1",
    "question": "What is the name of the plane that is flown the least often?",
    "answer": "SELECT T3.plane_name FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name ORDER BY (T2.location - COUNT(T2.pilot) / 100) DESC LIMIT 1</sql>"
  },
  {
    "id": 1121,
    "db_id": "pilot_1",
    "question": "How many pilots whose planes are in Chicago?",
    "answer": "SELECT COUNT(pilot_name) FROM PilotSkills WHERE location = 'Chicago' AND aircraft_name = 'Cessna Citation XLSL'</sql>"
  },
  {
    "id": 1122,
    "db_id": "pilot_1",
    "question": "Count the number of pilots who have planes in Chicago.",
    "answer": "SELECT COUNT(pilot_name) FROM PilotSkills WHERE location = 'Chicago'</sql>"
  },
  {
    "id": 1123,
    "db_id": "pilot_1",
    "question": "What are the planes owned by pilot Smith with age 41?",
    "answer": "SELECT T3.pilot_name FROM Pilots AS T1 INNER JOIN Hangars AS T2 ON T1.plane_name = T2.plane_name WHERE T1.age BETWEEN 0 AND 56 LIMIT 1</sql>"
  },
  {
    "id": 1124,
    "db_id": "pilot_1",
    "question": "Return the names of planes owned by the pilot whose name is Smith and is 41 years old.",
    "answer": "SELECT T3.pilot_name FROM Pilots AS T1 INNER JOIN Hangars AS T2 ON T1.pilot_name = T2.plane_name WHERE T2.location = 'New York City' AND T3.age  = 41</sql>"
  },
  {
    "id": 1125,
    "db_id": "pilot_1",
    "question": "How many distinct planes are owned across all pilots?",
    "answer": "SELECT COUNT(DISTINCT T2.pilot_name) FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.age >= 24 GROUP BY T2.planes ORDER BY COUNT(T2.planes) DESC LIMIT 3</sql>"
  },
  {
    "id": 1126,
    "db_id": "pilot_1",
    "question": "Count the number of different plane names across all pilots.",
    "answer": "SELECT COUNT(DISTINCT T2.pilot_name) FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.age >= 48 AND T1.location IS NOT NULL ORDER BY T2.plane_name DESC LIMIT 1</sql>"
  },
  {
    "id": 1127,
    "db_id": "pilot_1",
    "question": "How many planes are owned by the pilot whose name is Smith?",
    "answer": "SELECT COUNT(DISTINCT T2.pilot_name) FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name WHERE T1.location IS NOT NULL ORDER BY T2.age DESC LIMIT 1</sql>"
  },
  {
    "id": 1128,
    "db_id": "pilot_1",
    "question": "Count the number of planes Smith owns.",
    "answer": "SELECT COUNT(pilot_name) FROM Hangar WHERE plane_name IN ( 'Smith' , 'Kenny' )</sql>"
  },
  {
    "id": 1129,
    "db_id": "pilot_1",
    "question": "How many planes are controlled by the pilots whose age is older than 40?",
    "answer": "SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > ( SELECT MAX(age) FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.pilot_name = T2.plane_name)</sql>"
  },
  {
    "id": 1130,
    "db_id": "pilot_1",
    "question": "Count the number of planes flown by pilots older than 40.",
    "answer": "SELECT COUNT(*) FROM PilotSkills WHERE age > 40 AND T2.pilot_name = 'John' GROUP BY T1.pilot_name ORDER BY COUNT(T1.plane_name) DESC LIMIT 1</sql>"
  },
  {
    "id": 1131,
    "db_id": "pilot_1",
    "question": "Find the names of all pilots with age between 30 and 40 sorted by their ages in ascending order.",
    "answer": "SELECT T2.pilot_name FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T2.location BETWEEN 30 AND 40 ORDER BY T2.age</sql>"
  },
  {
    "id": 1132,
    "db_id": "pilot_1",
    "question": "What are the names of pilots between the ages of 30 and 40, ordered by age ascending?",
    "answer": "SELECT T2.pilot_name FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name ORDER BY (T1.age BETWEEN 30 AND 40) DESC LIMIT 1</sql>"
  },
  {
    "id": 1133,
    "db_id": "pilot_1",
    "question": "List all pilot names sorted by their ages in the descending order.",
    "answer": "SELECT DISTINCT T2.pilot_name FROM Pilots AS T1 INNER JOIN Hangars AS T2 ON T1.plane_name = T2.plane_name ORDER BY T2.location DESC LIMIT 1</sql>"
  },
  {
    "id": 1134,
    "db_id": "pilot_1",
    "question": "What are the names of pilots, ordered by age descending?",
    "answer": "SELECT T3.pilot_name, AVG(T2.age), T1.pilot_name FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name ORDER BY T2.location</sql>"
  },
  {
    "id": 1135,
    "db_id": "pilot_1",
    "question": "Find all locations of planes sorted by the plane name.",
    "answer": "SELECT DISTINCT T2.location FROM Hangar AS T1 INNER JOIN pilots AS T2 ON T1.plane_name = T2.pilot_name ORDER BY T2.name</sql>"
  },
  {
    "id": 1136,
    "db_id": "pilot_1",
    "question": "What are the locations of the different planes, ordered by plane name?",
    "answer": "SELECT DISTINCT T2.location FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name ORDER BY T1.plane_name</sql>"
  },
  {
    "id": 1137,
    "db_id": "pilot_1",
    "question": "List all distinct types of planes owned by all pilots in alphabetic order?",
    "answer": "SELECT T3.type FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name ORDER BY T1.pilot_name DESC LIMIT 1</sql>"
  },
  {
    "id": 1138,
    "db_id": "pilot_1",
    "question": "What are the different plane names, ordered alphabetically?",
    "answer": "SELECT DISTINCT T2.pilot_name FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name ORDER BY T1.location</sql>"
  },
  {
    "id": 1139,
    "db_id": "pilot_1",
    "question": "How many pilots who are older than 40 or younger than 30?",
    "answer": "SELECT COUNT(DISTINCT T2.pilot_name) FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.age > 40 OR T1.age < 30 GROUP BY T2.planemaker ORDER BY COUNT(T2.pilot_name) DESC LIMIT 1</sql>"
  },
  {
    "id": 1140,
    "db_id": "pilot_1",
    "question": "Count the number of pilots with age greater than 40 or less than 30.",
    "answer": "SELECT COUNT(pilot_name) FROM pilots WHERE age > 4 AND age < 30 GROUP BY pilot_name ORDER BY COUNT(pilot_name) LIMIT 1</sql>"
  },
  {
    "id": 1141,
    "db_id": "pilot_1",
    "question": "What are the names and ages of pilots who own plane Piper Cub and are older than 35, or have F-14 Fighter and are younger than 30?",
    "answer": "SELECT T2.pilot_name, T2.plane_name FROM ( SELECT DISTINCT T2.pilot_name , CAST(T2.age AS REAL) AS float FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name ORDER BY T1.years_held ASC ) AS T1, T1.pilot_name"
  },
  {
    "id": 1142,
    "db_id": "pilot_1",
    "question": "Return the names and ages of pilors who have flown Piper Cub and are older than 35, or have flown the F-14 Fighter and are younger than 30.",
    "answer": "SELECT T2.pilot_name, T2.plane_name FROM pilots AS T1 INNER JOIN hangars AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.age BETWEEN 25 AND 30 AND T2.location LIKE 'Piper%Cub%'</sql>"
  },
  {
    "id": 1143,
    "db_id": "pilot_1",
    "question": "Find pilots who own plane Piper Cub but not B-52 Bomber.",
    "answer": "SELECT DISTINCT T3.pilot_name FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name WHERE T2.pilot_name NOT IN ( SELECT T2.pilot_name FROM Hangar AS T2 INNER JOIN PilotSkills AS T3 ON T2.plane_name = T3.pilot_name WHERE T1"
  },
  {
    "id": 1144,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who have flown Piper Cub but not the B-52 Bomber?",
    "answer": "SELECT DISTINCT T3.pilot_name FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name WHERE T1.location != 'bomb' AND T2.plane_name = 'piper cub'</sql>"
  },
  {
    "id": 1145,
    "db_id": "pilot_1",
    "question": "Find pilots who own planes Piper Cub and B-52 Bomber.",
    "answer": "SELECT DISTINCT T3.pilot_name FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name WHERE T1.location = 'USA' AND T1.plane_name IN ('PiperCub', 'BombA')</sql>"
  },
  {
    "id": 1146,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who own both Piper Cub and the B-52 Bomber?",
    "answer": "SELECT DISTINCT T3.pilot_name FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name WHERE T1.location IN ( 'r-03897', 'r-67940' ) GROUP BY T1.pilot_name ORDER BY COUNT(T2.planes) DESC LIMIT 1</sql>"
  },
  {
    "id": 1147,
    "db_id": "pilot_1",
    "question": "What are the average and smallest ages of all pilots?",
    "answer": "SELECT T3.age / COUNT(T2.pilot_name), strftime('%J', T3.location) AS avg , min(T1.avg) FROM Pilots AS T1 INNER JOIN Hangars AS T2 ON T1.pilot_name = T2.plane_name WHERE T2.location != 'unknown' ORDER BY strftime('%J', T3.location) DESC LIMIT 1</sql"
  },
  {
    "id": 1148,
    "db_id": "pilot_1",
    "question": "Return the average and minimum ages across all pilots.",
    "answer": "SELECT SUM(AVG(age)) / COUNT(pilot_name), T2.min_age FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name ORDER BY T1.location, T1.`TIMESTAMP` DESC LIMIT 1</sql>"
  },
  {
    "id": 1149,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who have planes in both Austin and Boston?",
    "answer": "SELECT DISTINCT T2.pilot_name FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.location IN ('Austin', 'Boston')</sql>"
  },
  {
    "id": 1150,
    "db_id": "pilot_1",
    "question": "Give the names of pilots who have planes in Austin and Boston.",
    "answer": "SELECT DISTINCT T2.pilot_name FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name WHERE T1.location IN ('Austin', 'Boston')</sql>"
  },
  {
    "id": 1151,
    "db_id": "pilot_1",
    "question": "Find the pilots who have either plane Piper Cub or plane F-14 Fighter.",
    "answer": "SELECT DISTINCT T2.pilot_name FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.pilot_name LIKE '%P-10%' OR T1.plane_name LIKE '%F-%14%'</sql>"
  },
  {
    "id": 1152,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who have either the Piper Cub or the F-14 Fighter?",
    "answer": "SELECT DISTINCT T2.pilot_name FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.age BETWEEN 60 AND 70 ORDER BY T2.location, T1.`class` DESC LIMIT 1</sql>"
  },
  {
    "id": 1153,
    "db_id": "pilot_1",
    "question": "What is the average age of pilots for different types of planes?",
    "answer": "SELECT avg(T2.age) FROM ( SELECT T3.plane_name AS flight_type , AVG(T3.pilot_name) AS avgFROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name INNER JOIN FlightType AS T3 ON T3.plane_name = T1.flight_type GROUP BY flight_type ORDER BY"
  },
  {
    "id": 1154,
    "db_id": "pilot_1",
    "question": "Return the average age of pilots for each plane name.",
    "answer": "SELECT AVG(T2.age), T2.pilot_name FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name GROUP BY T1.pilot_name ORDER BY SUM(T1.age) DESC</sql>"
  },
  {
    "id": 1155,
    "db_id": "pilot_1",
    "question": "Find the number of planes for each type.",
    "answer": "SELECT COUNT(T2.pilot_name), T1.location FROM ( SELECT plane_name AS pilot_name , aircraft_type, group_by(plane_name) AS grp FROM ( SELECT T3.plane_name AS aircraft_type UNION ALL SELECT 'T3' AS aircraft_type FROM pilots WHERE type = 'F27-A182M' GROUP BY plane_name ) AS T2 INNER JOIN hangars AS T1 ON"
  },
  {
    "id": 1156,
    "db_id": "pilot_1",
    "question": "Count the number of entries for each plane name.",
    "answer": "SELECT COUNT(T2.pilot_name), T1.location FROM ( SELECT T2.plane_name , SUM(CASE WHEN T1.pilot_name IS NULL THEN 0 END) AS num FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name GROUP BY T2.plane_name ORDER BY COUNT(T2.pilot_name)"
  },
  {
    "id": 1157,
    "db_id": "pilot_1",
    "question": "Find the name of the oldest pilot for each type of plane, and order the results by plane name.",
    "answer": "SELECT T3.pilot_name, AVG(T2.age) AS age FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name INNER JOIN ( SELECT T2.plane_name ,  min(T2.years) AS minAge FROM pilotskills AS T1 INNER JOIN hangars AS T3 ON T1.pilot_name = T"
  },
  {
    "id": 1158,
    "db_id": "pilot_1",
    "question": "What are the different plane names, and what are the names of the oldest pilot who has each, ordered by plane name?",
    "answer": "SELECT T3.plane_name, MAX(T2.age), T3.`pilot_name` FROM Pilots AS T1 INNER JOIN Hangars AS T2 ON T1.pilot_name = T2.plane_name ORDER BY T2.location</sql>"
  },
  {
    "id": 1159,
    "db_id": "pilot_1",
    "question": "What are the names of oldest pilots for each type of plane?",
    "answer": "SELECT DISTINCT T2.pilot_name FROM ( SELECT DISTINCT T2.pilot_name, strftime('%J', T1.location), T1.`type`, 'Aircraft' AS aircraft_type, strftime('%Y', T2.planet_name) AS aircraft_age , T1.date FROM Pilots AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name"
  },
  {
    "id": 1160,
    "db_id": "pilot_1",
    "question": "Return the names of the different planes, as well as the names of the oldest pilots who flew each.",
    "answer": "SELECT T3.plane_name, T2.pilot_name FROM ( SELECT T1.plane_name AS pilot_name , MAX(T2.location) AS x FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name GROUP BY T1.planes_name ) AS T3 INTERSECT SELECT T1.plane_name, T2.p"
  },
  {
    "id": 1161,
    "db_id": "pilot_1",
    "question": "Find the max age for each group of pilots with the same name.",
    "answer": "SELECT DISTINCT T2.pilot_name, SUM(T3.`age`) AS total FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name GROUP BY T2.pilot_name ORDER BY MAX(`T1.age`) DESC LIMIT 1</sql>"
  },
  {
    "id": 1162,
    "db_id": "pilot_1",
    "question": "What are the different pilot names, and what are the maximum ages of pilots for each?",
    "answer": "SELECT DISTINCT T2.pilot_name, SUM(T3.`age`) AS total FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name GROUP BY T1.pilot_name ORDER BY MAX(T1.`age`) DESC LIMIT 4</sql>"
  },
  {
    "id": 1163,
    "db_id": "pilot_1",
    "question": "For each city, find the number and average age of pilots who have a plane.",
    "answer": "SELECT avg(T2.age), T3.pilot_name , SUM(T1.plane_name) FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name INNER JOIN City AS T3 ON T2.location = T3.city WHERE T3.location = 'new york city'</sql>"
  },
  {
    "id": 1164,
    "db_id": "pilot_1",
    "question": "What are the different hangar locations and how many pilots correspond to each. Also, what are their average ages?",
    "answer": "SELECT DISTINCT T2.location, SUM(T3.`pilot` INTEGER) FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name WHERE T1.location IS NOT NULL GROUP BY T2.location ORDER BY AVG(T2.age) DESC LIMIT 3</sql>"
  },
  {
    "id": 1165,
    "db_id": "pilot_1",
    "question": "Find the number of pilots for the plane types with average pilot age below 35.",
    "answer": "SELECT SUM(T2.pilot_name), AVG(T2.age) FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name GROUP BY T2.location ORDER BY COUNT(T1.pilot_name) BETWEEN 1 AND 30 DESC LIMIT 2</sql>"
  },
  {
    "id": 1166,
    "db_id": "pilot_1",
    "question": "What are the different plane names of planes with an average pilot age of below 35, and how many pilots have flown each of them?",
    "answer": "SELECT AVG(T2.plane_name), COUNT(DISTINCT T2.pilot_name) FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T2.pilot_name = T1.pilot_name GROUP BY T1.PLACEMENT ORDER BY CAST(T1.PLACEMENT AS INT) LIMIT 1</sql>"
  },
  {
    "id": 1167,
    "db_id": "pilot_1",
    "question": "Find the location of the plane that is owned by the youngest pilot.",
    "answer": "SELECT T3.location FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name ORDER BY T1.age / 100 - 5 DESC LIMIT 1</sql>"
  },
  {
    "id": 1168,
    "db_id": "pilot_1",
    "question": "What is the location of the plane that was flown by the pilot with the lowest age?",
    "answer": "SELECT T3.location FROM PilotSkills AS T1 INNER JOIN Hangars AS T2 ON T1.pilot_name = T2.plane_name ORDER BY T1.`age` LIMIT 1</sql>"
  },
  {
    "id": 1169,
    "db_id": "pilot_1",
    "question": "Find the name and age of pilots who have a plane in Austin.",
    "answer": "SELECT T3.pilot_name, T2.age FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name WHERE T1.location = 'Austin'</sql>"
  },
  {
    "id": 1170,
    "db_id": "pilot_1",
    "question": "What are the names and ages of pilots who have planes located in Austin?",
    "answer": "SELECT T3.pilot_name, T2.location FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name WHERE T1.location IS NULL AND T3.pilot_name IN ( SELECT T2.pilot_name ,  MAX(T2.age) FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T"
  },
  {
    "id": 1171,
    "db_id": "pilot_1",
    "question": "List in alphabetic order the names of pilots whose age is greater than some pilots having plane Piper Cub.",
    "answer": "SELECT DISTINCT T2.pilot_name FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name WHERE T1.location LIKE '%Pi%' ORDER BY age DESC LIMIT 1</sql>"
  },
  {
    "id": 1172,
    "db_id": "pilot_1",
    "question": "Return the names of pilots who are older than any pilot who has flown Piper Cub, ordered alphabetically.",
    "answer": "SELECT T3.pilot_name FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name WHERE T2.age BETWEEN 0 AND ( SELECT MAX(T2.age) FROM pilotskills AS T3 WHERE T3.pilot_name = 'Pilot P21397' ORDER BY T2.pilot_"
  },
  {
    "id": 1173,
    "db_id": "pilot_1",
    "question": "Find the number of pilots whose age is younger than all pilots whose plane is F-14 Fighter.",
    "answer": "SELECT COUNT(DISTINCT T2.pilot_name) FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.age > 92 AND T2.location = 'USA'</sql>"
  },
  {
    "id": 1174,
    "db_id": "pilot_1",
    "question": "How many pilots are younger than all pilots who own the F-14 Fighter?",
    "answer": "SELECT COUNT(DISTINCT T2.pilot_name) FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.age > 68 AND T2.location = 'fl39' GROUP BY t2.plane_name ORDER BY COUNT(T1.pilot_name) DESC LIMIT 1</sql>"
  },
  {
    "id": 1175,
    "db_id": "pilot_1",
    "question": "Find all different planes whose names contain substring 'Bomber'.",
    "answer": "SELECT DISTINCT T2.pilot_name FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.name LIKE '%Bomb%' GROUP BY T2.pilot_name ORDER BY COUNT(T1.pilot_name) DESC LIMIT 3</sql>"
  },
  {
    "id": 1176,
    "db_id": "pilot_1",
    "question": "What are the different plane names that contain the word Bomber?",
    "answer": "SELECT DISTINCT T2.pilot_name FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.age BETWEEN 60 AND 70 AND T2.location = 'military aircraft'</sql>"
  },
  {
    "id": 1177,
    "db_id": "pilot_1",
    "question": "Find the number of all pilots whose age is older than some pilot who has plane Piper Cub.",
    "answer": "SELECT COUNT(DISTINCT T2.pilot_name) FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.age IS NULL GROUP BY T2.pilot_name ORDER BY COUNT(T1.pilot_name), T2.pilot_name DESC LIMIT 1</sql>"
  },
  {
    "id": 1178,
    "db_id": "pilot_1",
    "question": "How many pilots are older than the youngest pilot who has Piper Cub?",
    "answer": "SELECT COUNT(DISTINCT T2.pilot_name), T3.`pilot_name` FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T2.location BETWEEN 'youngest' AND 'piper cub' AND T1.age IS NULL</sql>"
  },
  {
    "id": 1179,
    "db_id": "district_spokesman",
    "question": "Find the name of the district which has the largest area.",
    "answer": "SELECT DISTINCT T2.Name FROM \"spokesman AS T1 INNER JOIN district AS T2 ON T1.Spokesman_ID = T2.District_ID ORDER BY T2.\"Area_km\" DESC LIMIT 1</sql>"
  },
  {
    "id": 1180,
    "db_id": "district_spokesman",
    "question": "Select the area and government website of the district with the smallest population.",
    "answer": "SELECT DISTINCT T1.Area, T2.Government_website FROM \"spokesman AS T1 INNER JOIN \"district AS T2 ON T1.District_ID = T2.District_ID ORDER BY T1.Population DESC LIMIT 1</sql>"
  },
  {
    "id": 1181,
    "db_id": "district_spokesman",
    "question": "Find the names and populations of the districts whose area is greater than the average area.",
    "answer": "SELECT DISTINCT T2.Name, SUM(T1.`Area_km` / ( SELECT SUM(SUM(`Area_km`) AS total FROM district WHERE District_ID = '54') ) - AVG(SUM(`Area_km`)) OFFSET 1000) / ( SELECT SUM(CASE WHEN `District_ID` LIKE '%6797%' THEN `Population` END) AS num FROM districts WHERE Population > ( SELECT CA"
  },
  {
    "id": 1182,
    "db_id": "district_spokesman",
    "question": "Give me the biggest and average areas of all districts.",
    "answer": "SELECT CAST(SUM(DISTINCT T1.Area * 1045469375830213630000) AS REAL), AVG(T1.Area) FROM \"district\" AS T1 INNER JOIN \"spokesman_district\" AS T2 ON T1.District_ID = T2.District_ID WHERE T2.PRIMARY KEY (T2.Spokes"
  },
  {
    "id": 1183,
    "db_id": "district_spokesman",
    "question": "What is the total population of the districts whose areas are in the top 3?",
    "answer": "SELECT SUM(SUM(CASE WHEN T2.area IS NULL THEN 1 ELSE -1 END)) / COUNT(DISTINCT T2.district_ID) FROM \"district\" AS T1 INNER JOIN \"spokesman\" AS T2 ON T2.Spokesman_ID = T1.Spokesman_ID ORDER BY T1.Rank_position DESC LIMIT 3</sql>"
  },
  {
    "id": 1184,
    "db_id": "district_spokesman",
    "question": "List the ids, names, and government websites of all districts sorted by population.",
    "answer": "SELECT DISTINCT T2.Name, T3.name , T4.Government_website FROM \"district\" AS T1 INNER JOIN \"spokesman\" AS T2 ON T1.District_ID = T2.Spokesman_ID ORDER BY T1.Population DESC LIMIT 1</sql>"
  },
  {
    "id": 1185,
    "db_id": "district_spokesman",
    "question": "Find the names of districts whose government links use a 'gov' domain.",
    "answer": "SELECT DISTINCT T2.name FROM \"districts\" AS T1 INNER JOIN spokesman AS T2 ON T1.District_ID = T2.District_ID WHERE T2.Name = 'gov'</sql>"
  },
  {
    "id": 1186,
    "db_id": "district_spokesman",
    "question": "Return the ids and names of the districts whose population is larger than 4000 or area bigger than 3000.",
    "answer": "SELECT DISTINCT T2.Name, T1.Name FROM \"districts\" AS T1 INNER JOIN spokesman AS T2 ON T1.District_ID = T2.District_ID WHERE T1.Population BETWEEN 4000 AND 3000</sql>"
  },
  {
    "id": 1187,
    "db_id": "district_spokesman",
    "question": "Find all spokesman's names and speech titles.",
    "answer": "SELECT DISTINCT T2.name, T1.speech_title FROM District AS T1 INNER JOIN spokesman AS T2 ON T1.District_ID = T2.District_ID WHERE T2.Name = 'Bob'</sql>"
  },
  {
    "id": 1188,
    "db_id": "district_spokesman",
    "question": "Find the average points and average ages of all spokesmen whose rank position is 1.",
    "answer": "SELECT SUM(AVG(T2.Points), T2.Age), AVG(T3.Rank_position) FROM \"spokesman\" AS T1 INNER JOIN district AS T2 ON T1.District_ID = T2.District_ID WHERE T1.Name LIKE 's%' GROUP BY T2.Rank_position ORDER BY SUM(AVG(T3.Points)) / COUNT(T1) DESC LIMIT 1</sql"
  },
  {
    "id": 1189,
    "db_id": "district_spokesman",
    "question": "What are the names and points of spokesmen who are younger than 40?",
    "answer": "SELECT T1.name, T2.points FROM \"spokesman\" AS T1 INNER JOIN district AS T2 ON T1.District_ID = T2.District_ID ORDER BY strftime('%J', T1.`Start_year`) - strftime('%J', T2.START) ASC LIMIT 1</sql>"
  },
  {
    "id": 1190,
    "db_id": "district_spokesman",
    "question": "Who is the oldest spokesman?",
    "answer": "SELECT T1.Name FROM \"spokesman\" AS T1 INNER JOIN district AS T2 ON T1.Spokesman_ID = T2.District_ID ORDER BY T1.\"Age\", T2.START_YEAR LIMIT 1</sql>"
  },
  {
    "id": 1191,
    "db_id": "district_spokesman",
    "question": "Which spokesman has lower points than the average?",
    "answer": "SELECT DISTINCT T2.Name, SUM(T1.Points - AVG(T3.Points)) / COUNT(T1.Name) AS avg FROM \"spokesman\" AS T1 INNER JOIN \"spokesman_district\" AS T2 ON T1.Spokesman_ID = T2.Spokesman_ID WHERE T2.Density_km * 3 = ( SELECT AVG(DISTINCT T2.Points"
  },
  {
    "id": 1192,
    "db_id": "district_spokesman",
    "question": "Find the name of the district which has greatest number of spokesmen.",
    "answer": "SELECT DISTINCT T2.Name FROM ( SELECT T1.\"District_ID\", COUNT(T1.\"Spokesman_ID\") AS num FROM \"district\" AS T1 INNER JOIN \"spokesman\" AS T2 ON T1.District_ID = T2.District_ID GROUP BY T2.\"District_ID ORDER BY SUM(num) DESC LIMIT 1 ) AS T1 ORDER BY COUNT(T1.\"District_ID"
  },
  {
    "id": 1193,
    "db_id": "district_spokesman",
    "question": "Find the names of spokesmen who have served some district before 2004.",
    "answer": "SELECT DISTINCT T1.name FROM \"spokesman\" AS T1 INNER JOIN `district` AS T2 ON T1.Spokesman_ID = T2.`District_ID`, DATE('2004') AS `Start_Year` WHERE T1.start_year > 2007 ORDER BY T2.name DESC LIMIT 1</sql>"
  },
  {
    "id": 1194,
    "db_id": "district_spokesman",
    "question": "Find the number of spokesmen for each district, and the show district names as well.",
    "answer": "SELECT COUNT(T1.Spokesman_ID), T2.Name FROM ( SELECT T1.\"District_ID\", SUBSTR(T2.Name, 0, CHARINDEX(' ', T1.Name)) AS str FROM \"district\" AS T1 INNER JOIN spokesman AS T2 ON T1.District_ID = T2.District_ID WHERE T2.Rank = 'Spokesman' GROUP BY T2.Name ORDER"
  },
  {
    "id": 1195,
    "db_id": "district_spokesman",
    "question": "Find the names of the districts which have had both spokesman with rank position 1 and 2.",
    "answer": "SELECT DISTINCT T3.name FROM district AS T1 INNER JOIN spokesman AS T2 ON T1.District_ID = T2.District_ID WHERE T2.rank_position IN (1, 2) GROUP BY T2.Rank_position ORDER BY COUNT(DISTINCT T1.district) DESC LIMIT 2</sql>"
  },
  {
    "id": 1196,
    "db_id": "district_spokesman",
    "question": "Find the names of districts which have more than one spokesman.",
    "answer": "SELECT T1.Name FROM district AS T1 INNER JOIN spokesman AS T2 ON T1.District_ID = T2.District_ID GROUP BY T1.District_ID HAVING COUNT(T2.Spokesman_ID) > 1</sql>"
  },
  {
    "id": 1197,
    "db_id": "district_spokesman",
    "question": "Find the number of districts which have no spokesmen.",
    "answer": "SELECT COUNT(DISTINCT T1.District_ID), SUM(CASE WHEN T2.Points IS NULL THEN 0 ELSE T2.Points END) AS total FROM ( SELECT DISTINCT T3.District_ID, T3.`Rank position` FROM \"spokesman\" AS T1 INNER JOIN district AS T2 ON T1.District_ID = T2.District_ID WHERE T2.Name IS NULL AND T2.Pop"
  },
  {
    "id": 1198,
    "db_id": "district_spokesman",
    "question": "Find the name of spokesmen who do not speak for any district.",
    "answer": "SELECT DISTINCT T2.name FROM `spokesman` AS T1 INNER JOIN district AS T2 ON T1.Spokesman_ID = T2.District_ID WHERE T1.`Speach_title` IS NULL AND (T1.`Rank_position` = '10' OR T1.Name LIKE '%Government_(United States)%')</sql>"
  },
  {
    "id": 1199,
    "db_id": "district_spokesman",
    "question": "Find the total and average population of the districts which have some spokesman.",
    "answer": "SELECT T1.Area, SUM(T2.Population) / COUNT(DISTINCT T2.Spokesman_ID), AVG(T2.Population) FROM \"district\" AS T1 INNER JOIN \"spokesman\" AS T2 ON T1.District_ID = T2.District_ID GROUP BY T1.Name ORDER BY SUM(T2.Population) / COUNT(DISTINCT T2.Spokesman"
  },
  {
    "id": 1200,
    "db_id": "art_1",
    "question": "What is the title of the sculpture that was created in the most recent year ?",
    "answer": "SELECT T2.title FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID WHERE DATE(T2.`date`) BETWEEN '2007-2008' AND '2023' ORDER BY date(`year`) DESC LIMIT 1</sql>"
  },
  {
    "id": 1201,
    "db_id": "art_1",
    "question": "What is the name of the scuplture that was created most recently ?",
    "answer": "SELECT DISTINCT T1.title FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID WHERE T2.`year` IS NULL ORDER BY T1.`year`,T2.lname DESC LIMIT 1</sql>"
  },
  {
    "id": 1202,
    "db_id": "art_1",
    "question": "What is the title and location of the oldest painting ?",
    "answer": "SELECT T2.title, T1.location FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID ORDER BY CAST(STRFTIME('%J', T1.birthYear) - '84') DESC LIMIT 2</sql>"
  },
  {
    "id": 1203,
    "db_id": "art_1",
    "question": "What is the name of the oldest painting and where is it located?",
    "answer": "SELECT DISTINCT T1.title, T2.location FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.artistID WHERE T1.year BETWEEN 1846 AND 1900 INTERSECT SELECT T3.title, T2.location FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID ="
  },
  {
    "id": 1204,
    "db_id": "art_1",
    "question": "Find the names of all sculptures located in gallery 226.",
    "answer": "SELECT DISTINCT T1.title FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T2.location LIKE 'gallery 226%' LIMIT 1</sql>"
  },
  {
    "id": 1205,
    "db_id": "art_1",
    "question": "What are the names of all sculptures in gallery 226?",
    "answer": "SELECT DISTINCT T1.title FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T2.location IN ('Gallery', 'Park') ORDER BY T3.year DESC LIMIT 1</sql>"
  },
  {
    "id": 1206,
    "db_id": "art_1",
    "question": "List the title and location of all paintings.",
    "answer": "SELECT T2.title, T3.location FROM Paintings AS T1 INNER JOIN Sculptures AS T2 ON T1.paintingID = T2.paintingID WHERE T2.artistID = '730449'</sql>"
  },
  {
    "id": 1207,
    "db_id": "art_1",
    "question": "What are the paintings called and where are they located?",
    "answer": "SELECT DISTINCT T1.title, T2.location FROM Paintings AS T1 INNER JOIN Sculptures AS T2 ON T1.paintingID = T2.sculptureID WHERE T1.artistID IS NOT NULL LIMIT 1</sql>"
  },
  {
    "id": 1208,
    "db_id": "art_1",
    "question": "List the title and location of all sculptures.",
    "answer": "SELECT T2.title, T3.location FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID INNER JOIN Artists AS T3 ON T2.artistid = T3.artistID WHERE T3.lname IS NOT NULL AND T3.birthYear IS NOT NULL ORDER BY T2.year DESC LIMIT 5</sql>"
  },
  {
    "id": 1209,
    "db_id": "art_1",
    "question": "What are the sculptures called and where are they located?",
    "answer": "SELECT DISTINCT T1.title, T2.location FROM Sculpture AS T1 INNER JOIN Painting AS T2 ON T1.painterID = T2.painterID WHERE T2.artistID IS NOT NULL LIMIT 1</sql>"
  },
  {
    "id": 1210,
    "db_id": "art_1",
    "question": "What are the medium types of the painting with id = 80",
    "answer": "SELECT DISTINCT T2.medium FROM Paintings AS T1 INNER JOIN sculptures AS T2 ON T1.paintingID = T2.sculptureID WHERE T1.title LIKE '%Penelope%' AND T1.year LIKE '2036%'</sql>"
  },
  {
    "id": 1211,
    "db_id": "art_1",
    "question": "What mediums were used for the painting with id 80 ?",
    "answer": "SELECT DISTINCT T2.medium FROM Paintings AS T1 INNER JOIN sculptures AS T2 ON T1.paintingID = T2.sculptureID WHERE T1.title LIKE '%Carpin (medium)%' GROUP BY T1.medium ORDER BY COUNT(T1.PainterID, 'Carpin (medium)') DESC LIMIT 2</sql>"
  },
  {
    "id": 1212,
    "db_id": "art_1",
    "question": "Find the first and last names of all artists who were born after 1850.",
    "answer": "SELECT DISTINCT T2.lname, T2.fname FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistid WHERE T1.year BETWEEN 1963 AND 2018 INTERSECT SELECT T1.lname, T2.fname FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.art"
  },
  {
    "id": 1213,
    "db_id": "art_1",
    "question": "What are the full names of artists born after 1850?",
    "answer": "SELECT DISTINCT T2.lname, T3.fname FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistid WHERE T1.year BETWEEN 1950 AND 2008 ORDER BY T1.BirthYear DESC LIMIT 1</sql>"
  },
  {
    "id": 1214,
    "db_id": "art_1",
    "question": "Find the names and years of all sculptures that are not located in gallery 226.",
    "answer": "SELECT DISTINCT T1.title, T2.year FROM Sculpture AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistID WHERE NOT T1.location IS NULL AND T1.name NOT IN ( SELECT T3.lname, T3.birthYear FROM Sculptures AS T3 INNER JOIN Location AS T4 ON T2.artistID = T4.artistID WHERE"
  },
  {
    "id": 1215,
    "db_id": "art_1",
    "question": "What are the names and dates created for all sculptures not located in gallery 226?",
    "answer": "SELECT DISTINCT T1.title, T2.year FROM Sculpture AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistID WHERE location IS NULL AND artistID NOT IN ( SELECT ARTISTID FROM Sculptures WHERE artistID = '48406' )</sql>"
  },
  {
    "id": 1216,
    "db_id": "art_1",
    "question": "What are the first and last names of all distinct artists who made sculptures before 1900?",
    "answer": "SELECT T1.first, T2.last FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.paintingID WHERE SUBSTR(T2.title, 1, -3) <> 'Artist' ORDER BY T1.year DESC LIMIT 3</sql>"
  },
  {
    "id": 1217,
    "db_id": "art_1",
    "question": "What is the first and last name of each distinct artists who made a sculpture before 1900?",
    "answer": "SELECT T2.lname, T3.fname FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistID WHERE SUBSTR(T1.year, 1, -4) = '1900' ORDER BY SUBSTR(T2.`date`, 3, 3) DESC LIMIT 2</sql>"
  },
  {
    "id": 1218,
    "db_id": "art_1",
    "question": "Find the birth years of all distinct artists who made sculptures after 1920?",
    "answer": "SELECT T1.birthYear FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.paintingID WHERE CAST(strftime('%Y', T2.years) - 2005) BETWEEN 19 AND 1934</sql>"
  },
  {
    "id": 1219,
    "db_id": "art_1",
    "question": "What is the birth year of each distinct artists who created sculptures after 1920?",
    "answer": "SELECT T1.birthYear, T3.location FROM ( SELECT DISTINCT T2.painterID , SUBSTR(T2.`year`, -4) AS start FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptureID ORDER BY T2.year DESC LIMIT 1 ) AS t1 INNER JOIN Artists AS T3 ON T1.artistID = T3"
  },
  {
    "id": 1220,
    "db_id": "art_1",
    "question": "What are the first and last names of the artist who lived the longest?",
    "answer": "SELECT DISTINCT T1.lname, T2.fname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.paintingid ORDER BY T1.birthYear / 345897640 - T2.deathyear</sql>"
  },
  {
    "id": 1221,
    "db_id": "art_1",
    "question": "Give the full name of the artist who lived the longest.",
    "answer": "SELECT T2.fname, T3.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.paintingID INNER JOIN sculptures AS T3 ON T2.sculptureID = T3.sculptureID WHERE T2.birthYear BETWEEN 1948 AND 2003</sql>"
  },
  {
    "id": 1222,
    "db_id": "art_1",
    "question": "What is the age of the artist who had the shortest life?",
    "answer": "SELECT MAX(years_alive) FROM Artists WHERE fname = 'Bob' AND deathYear = 2017 AND birthYear < 1936</sql>"
  },
  {
    "id": 1223,
    "db_id": "art_1",
    "question": "How old is the artist who lived the shortest life?",
    "answer": "SELECT DISTINCT T1.birthYear - T2.deathYear, T2.deathYear FROM artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.paintingID ORDER BY T1.birthYear - T2.deathYear LIMIT 5</sql>"
  },
  {
    "id": 1224,
    "db_id": "art_1",
    "question": "What are the first name and age of the artist who had the longest life?",
    "answer": "SELECT T2.fname, T2.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.paintingID WHERE T1.deathYear - T2.year BETWEEN 2007 AND 2014 ORDER BY T2.birthYear ASC LIMIT 3</sql>"
  },
  {
    "id": 1225,
    "db_id": "art_1",
    "question": "What is the first name and age of the artist who lived the longest?",
    "answer": "SELECT DISTINCT T1.lname, T2.birthYear FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistid ORDER BY T2.deathYear DESC LIMIT 2</sql>"
  },
  {
    "id": 1226,
    "db_id": "art_1",
    "question": "How many paintings are exhibited at gallery 240?",
    "answer": "SELECT COUNT(paintingID) FROM Paintings WHERE location = 'gallery' AND artistID IN ( SELECT T1.artistID , 28639 AS num FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptor )</sql>"
  },
  {
    "id": 1227,
    "db_id": "art_1",
    "question": "What is the total number of paintings exhibited in gallery 240?",
    "answer": "SELECT COUNT(DISTINCT T1.paintingID), SUM(T1.location) FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.sculptureID = T2.artistID GROUP BY T2.location ORDER BY COUNT(T1.location) DESC LIMIT 2</sql>"
  },
  {
    "id": 1228,
    "db_id": "art_1",
    "question": "How many paintings did the artist with the longest life make ?",
    "answer": "SELECT COUNT(paintingID) FROM Paintings WHERE lname = 'Vincent van Gogh' ORDER BY MAX(deathYear) DESC LIMIT 1</sql>"
  },
  {
    "id": 1229,
    "db_id": "art_1",
    "question": "What is the painting count of the artist with the longest life ?",
    "answer": "SELECT COUNT(DISTINCT T1.paintingID) FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistID WHERE T2.lname = 'Scarface' LIMIT 1</sql>"
  },
  {
    "id": 1230,
    "db_id": "art_1",
    "question": "Give me a list of names and years of paintings that were created by the artist whose first name is Mary.",
    "answer": "SELECT DISTINCT T1.lname, T2.year FROM artists AS T1 INNER JOIN sculptures AS T2 ON T1.artistID = T2.paintingID WHERE T2.title = 'Mary'</sql>"
  },
  {
    "id": 1231,
    "db_id": "art_1",
    "question": "What is the name and year of each painting created by the artist whose first name is Mary?",
    "answer": "SELECT DISTINCT T1.title, T1.year FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistID WHERE T1.lname = 'Mary'</sql>"
  },
  {
    "id": 1232,
    "db_id": "art_1",
    "question": "What are the widths of the paintings that were created by the artist who was born before 1850?",
    "answer": "SELECT DISTINCT T2.width_mm, T3.height_mm FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.artistID WHERE T1.birthYear <= 1800 AND T1.deathYear BETWEEN '5' AND INTERSECT ('00047773')</sql>"
  },
  {
    "id": 1233,
    "db_id": "art_1",
    "question": "How wide were the paintings by the artist who was born prior to 1850?",
    "answer": "SELECT DISTINCT T2.height_mm * 3/4 AS w_inches FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.paintingID WHERE T1 BETWEEN '1800 - 1950' AND '2000'</sql>"
  },
  {
    "id": 1234,
    "db_id": "art_1",
    "question": "What are the location and medium type of paintings that are created by the artist whose first name is Pablo?",
    "answer": "SELECT DISTINCT T1.location, T1.medium FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistID WHERE T1.lname = 'Pablo' AND T1.fname = 'Pablo'</sql>"
  },
  {
    "id": 1235,
    "db_id": "art_1",
    "question": "In what locations and on what mediums are the paintings created by the artist with the first name Pablo?",
    "answer": "SELECT DISTINCT T1.location, T1.medium, T2.Pablo FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T2.lname LIKE '%Pablo%'</sql>"
  },
  {
    "id": 1236,
    "db_id": "art_1",
    "question": "Find the first and last names of the artists who have both works of paintings and sculptures?",
    "answer": "SELECT DISTINCT T1.lname, T2.fname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.paintingid WHERE T2.title IN ('Cactus', 'Storm') AND T2.location LIKE '%Storm%' AND T2.medium = 'polyester'</sql>"
  },
  {
    "id": 1237,
    "db_id": "art_1",
    "question": "Give the full names of artists who have created paintings and sculptures.",
    "answer": "SELECT DISTINCT T1.lname, T2.fname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.paintingid INNER JOIN Sculptures AS T3 ON T3.sculptureID = T2.sculptureID ORDER BY T1.birthYear, T2.deathYear LIMIT 4</sql>"
  },
  {
    "id": 1238,
    "db_id": "art_1",
    "question": "What are the first and last names of the artists who have not only medium oil paintings but also paintings with the lithographic medium?",
    "answer": "SELECT DISTINCT T1.lname, T2.fname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.paintingid WHERE T2.medium = 'oil' AND not T2.mediumOn INTEGER and T2.location LIKE '%print%'</sql>"
  },
  {
    "id": 1239,
    "db_id": "art_1",
    "question": "What are the first and last names of artists who have painted using both oil and lithographic mediums?",
    "answer": "SELECT DISTINCT T1.lname, T2.fname FROM Painting AS T1 INNER JOIN Sculpture AS T2 ON T1.paintingID = T2.paintingID WHERE T1.medium IN ('oil', 'lio') AND T2.mediumInside IS NULL ORDER BY T2.year DESC LIMIT 1</sql>"
  },
  {
    "id": 1240,
    "db_id": "art_1",
    "question": "What is the birth year of the artist who created a painting in 1884 that is on canvas?",
    "answer": "SELECT DISTINCT T2.birthYear, T3.location FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistID WHERE T1.year BETWEEN 1984 AND 2017</sql>"
  },
  {
    "id": 1241,
    "db_id": "art_1",
    "question": "In what year was the artist who created a painting in 1884 born?",
    "answer": "SELECT MAX(year) FROM Paintings WHERE T2.year = 1901 AND T2.painterID = '5267'</sql>"
  },
  {
    "id": 1242,
    "db_id": "art_1",
    "question": "What are the unique first names of the artists who had medium oil paintings located in gallery 241?",
    "answer": "SELECT T2.firstname, T3.fname FROM Paintings AS T1 INNER JOIN Sculptures AS T2 ON T1.paintingID = T2.sculptureid WHERE T2.location IS 'gallery 241'</sql>"
  },
  {
    "id": 1243,
    "db_id": "art_1",
    "question": "What are first names of the artists with oil paintings in gallery 241?",
    "answer": "SELECT DISTINCT T3.fname, T3.lname FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistid WHERE T1.location IN ('Gallery 241', 'Gallery 582') AND T1.medium = 'oil' AND T1.mediumOn = 'baltic glass'</sql>"
  },
  {
    "id": 1244,
    "db_id": "art_1",
    "question": "What are the numbers of works for different medium type?",
    "answer": "SELECT SUM(IIF(T1.medium != 'slate' AND T3.location = 'wood') - IIF(T2.medium != 'slate' AND T3.location = 'stucco'), 0, '') FROM ( SELECT 'slate', 'wood' AS location FROM Paintings WHERE T2.medium = 'slate' GROUP BY medium ORDER BY SUM(IIF(T1.medium == 'slate') - IIF"
  },
  {
    "id": 1245,
    "db_id": "art_1",
    "question": "How many works are there in each medium?",
    "answer": "SELECT T1.medium, COUNT(T2.paintingID) FROM artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.paintingID WHERE T1.lname = 'Anna Wintour' GROUP BY T1.medium ORDER BY SUM(COUNT(DISTINCT T2.sculptorID))</sql>"
  },
  {
    "id": 1246,
    "db_id": "art_1",
    "question": "What are the average height of paintings for different medium types?",
    "answer": "SELECT AVG(T1.height_mm) FROM Paintings AS T1 INNER JOIN Sculptures AS T2 ON T1.paintingID = T2.sculptureID ORDER BY T2.medium, T2.location GROUP BY T2.medium ORDER BY COUNT(DISTINCT T2.scientific_name) FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2"
  },
  {
    "id": 1247,
    "db_id": "art_1",
    "question": "What is the average height of paintings for different medium types?",
    "answer": "SELECT AVG(T2.height_mm) FROM Paintings AS T1 INNER JOIN Sculptures AS T2 ON T1.paintingID = T2.sculptureID ORDER BY T2.medium, T2.`mediumOn` DESC LIMIT 1</sql>"
  },
  {
    "id": 1248,
    "db_id": "art_1",
    "question": "What are the numbers of paintings created before 1900 in different places?",
    "answer": "SELECT SUM(paintings.height_mm) , SUM(paintings.width_mm), COUNT(T2.artistID) FROM ( SELECT T3.location AS x, 'P', 1978 AS y UNION ALL SELECT T5.location AS x, 'R' , -1 UNION SELECT t1.location AS x, 1941 UNION SELECT T3.x AS x, T3.y AS y FROM ( SELECT D"
  },
  {
    "id": 1249,
    "db_id": "art_1",
    "question": "How many paintings were created before 1900 in different locations?",
    "answer": "SELECT COUNT(T2.paintingID) FROM Paintings AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T1.year BETWEEN '000' AND '998'</sql>"
  },
  {
    "id": 1250,
    "db_id": "art_1",
    "question": "What are the titles of paintings that are created after 1910 and whose medium is oil?",
    "answer": "SELECT DISTINCT T2.title FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID WHERE strftime('%Y', T1.birthYear) IS NULL AND strftime('%J', T1.deathYear) BETWEEN '1904' AND '2000' ORDER BY strftime('%Y', T1"
  },
  {
    "id": 1251,
    "db_id": "art_1",
    "question": "Give the names of all oil paintings created after 1910.",
    "answer": "SELECT DISTINCT T2.title FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistID WHERE T2.deathYear < '1978' AND strftime('%Y', T1.birthYear) BETWEEN '2006' AND 2021 GROUP BY T1.paintingID ORDER BY strftime('%Y', T"
  },
  {
    "id": 1252,
    "db_id": "art_1",
    "question": "Find the unique id of the painters who had medium oil paintings exhibited at gallery 240?",
    "answer": "SELECT DISTINCT T1.painterID FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistID WHERE T1.medium = 'oil' AND T1.location LIKE '%gallery%' GROUP BY T2.fname,T1.lname ORDER BY DISTINCT T2.painterID, strftime('%Y', T2.birthYear"
  },
  {
    "id": 1253,
    "db_id": "art_1",
    "question": "What is the unique id of every painter who had a medium oil painting displayed at gallery 240?",
    "answer": "SELECT DISTINCT T1.painterID FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.sculptureID = T2.paintingID WHERE T2.location IS NULL AND T1.medium IS 'oil'</sql>"
  },
  {
    "id": 1254,
    "db_id": "art_1",
    "question": "Find the distinct titles of all the paintings that have a longer height than some painting on canvas?",
    "answer": "SELECT DISTINCT T1.title FROM Paintings AS T1 INNER JOIN sculptures AS T2 ON T1.paintingID = T2.sculptureID ORDER BY T1.height_mm DESC LIMIT 1</sql>"
  },
  {
    "id": 1255,
    "db_id": "art_1",
    "question": "What are the distinct titles of every painting that has a greater height than some painting on canvas?",
    "answer": "SELECT DISTINCT T1.title FROM Paintings AS T1 INNER JOIN Sculptures AS T2 ON T1.paintingID = T2.sculptureID WHERE T2.`height_mm` > ( SELECT MAX(T2.`height_mm`) FROM sculptures WHERE location IS NULL ) AND T1.medium != 'canvas'</sql>"
  },
  {
    "id": 1256,
    "db_id": "art_1",
    "question": "Find the distinct ids of all paintings that are older than some painting at location gallery 240.",
    "answer": "SELECT T1.paintingID FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.artistID WHERE T1.location LIKE '%Gallery%' GROUP BY T1.PaintingID ORDER BY COUNT(T2.painting) DESC LIMIT 1</sql>"
  },
  {
    "id": 1257,
    "db_id": "art_1",
    "question": "What are the distinct ids of every painting that is older than some painting in gallery 240?",
    "answer": "SELECT T2.paintingID FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.artistID WHERE T2.deathYear BETWEEN (T3.birthYear - 90) AND (T4.location LIKE 'galerie%') ORDER BY t1.year DESC LIMIT 1</sql>"
  },
  {
    "id": 1258,
    "db_id": "art_1",
    "question": "Find the id of the oldest painting.",
    "answer": "SELECT DISTINCT T1.paintingID FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.artistID ORDER BY CAST(STRFTIME('%J', T1.year) - '98-' ) DESC LIMIT 2</sql>"
  },
  {
    "id": 1259,
    "db_id": "art_1",
    "question": "What is the id of the oldest painting?",
    "answer": "SELECT DISTINCT T1.paintingID FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.artistID ORDER BY strftime('%Y', T1.birthYear) DESC LIMIT 1</sql>"
  },
  {
    "id": 1260,
    "db_id": "art_1",
    "question": "What are the first and last name of the artist who had a sculpture work whose title has the word \u201cfemale\u201d in it?",
    "answer": "SELECT DISTINCT T1.lname, T2.F1 FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.paintingid WHERE T2.title LIKE '%f%M%' OR T2.title LIKE '%F%' AND T2.year LIKE '%Y%'</sql>"
  },
  {
    "id": 1261,
    "db_id": "art_1",
    "question": "What is the full name of the artist with a sculpture whose title includes the word \"female\"?",
    "answer": "SELECT DISTINCT T1.lname, T2.t1.title FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.paintingID = T2.artistID WHERE T1.title IN ( 'woman', 'female' ) AND T2.t3 IS NULL</sql>"
  },
  {
    "id": 1262,
    "db_id": "art_1",
    "question": "List the names of all distinct paintings in alphabetical order.",
    "answer": "SELECT DISTINCT T1.title FROM Paintings AS T1 INNER JOIN sculptures AS T2 ON T1.paintingID = T2.sculptureID WHERE T2.location IN ('Africa', 'Asia')</sql>"
  },
  {
    "id": 1263,
    "db_id": "art_1",
    "question": "What is the name of every distinct painting in alphabetical order?",
    "answer": "SELECT DISTINCT T1.title FROM Paintings AS T1 INNER JOIN sculptures AS T2 ON T1.paintingID = T2.sculptureID WHERE T2.location ORDER BY T2.location ASC LIMIT 1</sql>"
  },
  {
    "id": 1264,
    "db_id": "art_1",
    "question": "List the names of all distinct paintings ordered by length.",
    "answer": "SELECT DISTINCT T1.title, strftime('%J', T1.year), T2.location FROM Paintings AS T1 INNER JOIN Sculptures AS T2 ON T1.paintingID = T2.sculptureID ORDER BY strftime('%Y', T1.deathYear) DESC LIMIT 2</sql>"
  },
  {
    "id": 1265,
    "db_id": "art_1",
    "question": "List the names of all distinct paintings from shortest to longest in height.",
    "answer": "SELECT DISTINCT T1.title FROM Paintings AS T1 INNER JOIN sculptures AS T2 ON T1.paintingID = T2.sculptureID WHERE T2.`height` IN (395, 637, 840) ORDER BY T2.`year` DESC LIMIT 2</sql>"
  },
  {
    "id": 1266,
    "db_id": "art_1",
    "question": "What are the names of both paintings and sculptures created between 1900 and 1950?",
    "answer": "SELECT DISTINCT T2.title, T2.year FROM Paintings AS T1 INNER JOIN Sculptures AS T2 ON T1.paintingID = T2.paintingID WHERE T2.location IS NULL ORDER BY T3.year LIMIT 1</sql>"
  },
  {
    "id": 1267,
    "db_id": "art_1",
    "question": "What are the names of  paintings and scupltures created between 1900 and 1950?",
    "answer": "SELECT DISTINCT T2.title, T2.year FROM Sculpture AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID WHERE T2.year BETWEEN 1900 AND 2008 ORDER BY T1.`name` DESC LIMIT 3</sql>"
  },
  {
    "id": 1268,
    "db_id": "art_1",
    "question": "Find the titles of paintings and sculpture works made by the artist whose id is 222?",
    "answer": "SELECT DISTINCT T1.title FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID WHERE T1.artistID = 222 LIMIT 1</sql>"
  },
  {
    "id": 1269,
    "db_id": "art_1",
    "question": "What are the titles of all paintings and sculpture works made by the artist whose id is 222?",
    "answer": "SELECT DISTINCT T1.title FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T1.year > 1973 AND T2.lname = 'Tony Tarrant' ORDER BY T1.year ASC</sql>"
  },
  {
    "id": 1270,
    "db_id": "art_1",
    "question": "What is the id of the artist who has the highest number of painting works before 1900?",
    "answer": "SELECT DISTINCT T2.paintingID FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID ORDER BY T1.year DESC LIMIT 1</sql>"
  },
  {
    "id": 1271,
    "db_id": "art_1",
    "question": "What is the id of the artist with the most paintings before 1900?",
    "answer": "SELECT DISTINCT T2.paintingID FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistID WHERE strftime('%Y', T1.year) > strftime('%J', T2.deathYear)) GROUP BY DISTINCT T2.paintingID ORDER BY COUNT(DISTINCT T2.paintingID) DESC LIMIT 1</"
  },
  {
    "id": 1272,
    "db_id": "art_1",
    "question": "What is the first name of the artist who has the highest number of sculptures?",
    "answer": "SELECT DISTINCT T1.lname FROM artists AS T1 INNER JOIN sculptures AS T2 ON T1.artistID = T2.paintingID ORDER BY count(T1.name) DESC LIMIT 1</sql>"
  },
  {
    "id": 1273,
    "db_id": "art_1",
    "question": "What is the first name of the sculptor with the greatest number of works?",
    "answer": "SELECT DISTINCT T1.fname FROM artists AS T1 INNER JOIN sculptures AS T2 ON T1.artistID = T2.paintingID ORDER BY count(T1.artistID) DESC LIMIT 1</sql>"
  },
  {
    "id": 1274,
    "db_id": "art_1",
    "question": "What are the names of paintings whose width is less than 600 or height is larger than 800?",
    "answer": "SELECT DISTINCT T1.title FROM Paintings AS T1 INNER JOIN Sculptures AS T2 ON T1.paintingID = T2.sculptureID WHERE T2.`width_mm` > 60 AND T2.`height_mm` > 80</sql>"
  },
  {
    "id": 1275,
    "db_id": "art_1",
    "question": "What are the titles of paintings that have a width less than 600 or a height taller taller than 800?",
    "answer": "SELECT DISTINCT title FROM Paintings WHERE lname = 'Penelope' ORDER BY w DESC LIMIT 1</sql>"
  },
  {
    "id": 1276,
    "db_id": "art_1",
    "question": "Which locations have paintings created before 1885 or after 1930?",
    "answer": "SELECT DISTINCT T2.location FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID WHERE DATE(T2.year) BETWEEN 1846 AND 2035 INTERSECT SELECT DISTINCT T2.location FROM Paintings AS T2 INNER JOIN Sculptures AS T1 ON T2.paintingID ="
  },
  {
    "id": 1277,
    "db_id": "art_1",
    "question": "What locations have works painted before 1885 or after 1930?",
    "answer": "SELECT DISTINCT T2.location FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID WHERE DATE(T2.`year`) BETWEEN '2067' AND '2039' OR DATE(T1.`year`) BETWEEN '1841' AND '1875'</sql>"
  },
  {
    "id": 1278,
    "db_id": "art_1",
    "question": "Find the ids of paintings whose height is bigger than 500 and less than 2000?",
    "answer": "SELECT DISTINCT T1.paintingID FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistID WHERE strftime('%Y', T1.year) > '500' AND strftime('%Y', T1.year) < 2000</sql>"
  },
  {
    "id": 1279,
    "db_id": "art_1",
    "question": "What are the ids of paintings that are taller than 500 and shorter than 2000?",
    "answer": "SELECT DISTINCT T1.paintingID FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistID WHERE STRFTIME('%Y', T1.year) BETWEEN 500 AND 2000 ORDER BY MAX(T1.height_mm) DESC LIMIT 2</sql>"
  },
  {
    "id": 1280,
    "db_id": "art_1",
    "question": "Which locations have paintings in the mediums of on panel and on canvas?",
    "answer": "SELECT DISTINCT T2.location FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID WHERE T1.`medium` IN ('on panel', 'on canvas') ORDER BY T2.location</sql>"
  },
  {
    "id": 1281,
    "db_id": "art_1",
    "question": "What are the locations that have paintings in the mediums of on panels and on canvas?",
    "answer": "SELECT DISTINCT T2.location FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID WHERE T1.`medium` IN ('panels', 'canvas') AND T1.year BETWEEN 2004 AND 2015</sql>"
  },
  {
    "id": 1282,
    "db_id": "art_1",
    "question": "Find the locations that have paintings created before 1885 and after 1930?",
    "answer": "SELECT DISTINCT T2.location FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.artistID WHERE T2.deathYear BETWEEN '2034-' AND '2036-2019' LIMIT 1</sql>"
  },
  {
    "id": 1283,
    "db_id": "art_1",
    "question": "What are the locations that have works painted before 1885 and after 1930?",
    "answer": "SELECT DISTINCT T2.location FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID WHERE CAST((T1.year - '1897') - 30) BETWEEN '2015-6' AND '2004-9' AND T1.mediumOn != 'watercolor'</sql>"
  },
  {
    "id": 1284,
    "db_id": "art_1",
    "question": "What are the average height and width of paintings that are oil medium in the place of gallery 241?",
    "answer": "SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE medium = 'oil' GROUP BY location ORDER BY SUM(height_mm) / COUNT(T3.medium) DESC LIMIT 1</sql>"
  },
  {
    "id": 1285,
    "db_id": "art_1",
    "question": "What is the average height and width of paintings that are oil medium in gallery 241?",
    "answer": "SELECT AVG(T1.height_mm + T1.width_mm) / COUNT(T1.paintingID), SUM(T1.height_mm * T1.length_cm / 1000) AS px FROM `artists` AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.painterID GROUP BY T1.location ORDER BY SUM(T1.height"
  },
  {
    "id": 1286,
    "db_id": "art_1",
    "question": "What are the maximum height and id of paintings painted before 1900?",
    "answer": "SELECT T3.height_mm, T2.painterID FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistID WHERE T1.year BETWEEN 1870 AND 1900</sql>"
  },
  {
    "id": 1287,
    "db_id": "art_1",
    "question": "What is the height and id of the tallest painting created before 1900?",
    "answer": "SELECT MAX(height_mm), T2.id FROM Paintings AS T1 INNER JOIN sculptures AS T2 ON T1.paintingID = T2.sculptureID WHERE T2.location IS NOT NULL GROUP BY T3.title, T2.height_mm ORDER BY ( SELECT MAX(height_) - 1 FROM sculptures ORDER BY T1.medium DESC LIMIT 1 ) LIMIT 1</sql>"
  },
  {
    "id": 1288,
    "db_id": "art_1",
    "question": "What are the maximum height and width of paintings for each year?",
    "answer": "SELECT SUM(max(height_mm, width_mm)) FROM Paintings GROUP BY artistID ORDER BY CAST(STRFTIME('%Y', artistID) AS DECIMAL) LIMIT 1</sql>"
  },
  {
    "id": 1289,
    "db_id": "art_1",
    "question": "What are largest height and width dimensions for paintings in each year?",
    "answer": "SELECT MAX(T1.height_mm), MAX(T2.width_mm) FROM Paintings AS T1 INNER JOIN Sculptures AS T2 ON T1.paintingID = T2.sculptureID WHERE SUBSTR(SUBSTR(T1.year, 8), -3, LENGTH(SUBSTR())) > ( SELECT SUM(LENGTH(MIN(YEAR)) - MIN(SUBSTR(T1."
  },
  {
    "id": 1290,
    "db_id": "art_1",
    "question": "What are the average height and width of paintings grouped by painters and ordered by name?",
    "answer": "SELECT CAST(SUM(height_mm / COUNT(painterID)) AS REAL) * 100 / COUNT(DISTINCT T2.artistID) , SUM(width_mm / COUNT(T3.location)) FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID GROUP BY T1.lname ORDER BY CAST(SUM(height_mm /"
  },
  {
    "id": 1291,
    "db_id": "art_1",
    "question": "Find the average height and width of paintings grouped by painters and ordered by name",
    "answer": "SELECT T2.height_mm, T2.width_mm FROM Paintings AS T1 INNER JOIN Sculptures AS T2 ON T1.painterID = T2.painterID ORDER BY T2.artistID ASC, T2.title DESC</sql>"
  },
  {
    "id": 1292,
    "db_id": "art_1",
    "question": "Find the first names and number of works of all artists who have at least two paintings?",
    "answer": "SELECT DISTINCT T1.lname, T2.num FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.paintingID ORDER BY T2.year DESC LIMIT 1</sql>"
  },
  {
    "id": 1293,
    "db_id": "art_1",
    "question": "What are the first names of all artists who have at least two paintings, and how many works did each create?",
    "answer": "SELECT DISTINCT T1.firstname, SUM(T2.length * T3.height_mm / 2) FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.paintingid INNER JOIN Sculptures AS T3 ON T1.sculptureid = T3.sculptureID WHERE T1.lname IN ('JOHN', 'MICHAEL') GROUP"
  },
  {
    "id": 1294,
    "db_id": "art_1",
    "question": "Find the death year of all artists who have at most 3 paintings?",
    "answer": "SELECT DISTINCT T2.deathYear FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.paintingID WHERE T1.numberOfPaintings - 3 > 0 GROUP BY t1.deathYear ORDER BY COUNT(T2.painterID) LIMIT 1</sql>"
  },
  {
    "id": 1295,
    "db_id": "art_1",
    "question": "When did each artist who created less than 4 paintings die ?",
    "answer": "SELECT COUNT(T2.paintingID), strftime('%Y', T2.birthYear), strftime('%J', T2.deathYear) FROM ( SELECT CAST(STRFTIME('%Y', T1.year) AS REAL) - 1390849005 , strftime('%J', T1.year) + 60774782 FROM Artists AS"
  },
  {
    "id": 1296,
    "db_id": "art_1",
    "question": "Find the death year of the artist who made the least number of sculptures?",
    "answer": "SELECT MAX(years) - MIN(deathYear) FROM Artists GROUP BY deathYear ORDER BY COUNT(T2.artistID) LIMIT 1</sql>"
  },
  {
    "id": 1297,
    "db_id": "art_1",
    "question": "When did the artist who made the fewest sculptures die?",
    "answer": "SELECT strftime('%J', T2.birthYear - 1501496873) FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T2.artistID = T1.painter WHERE T1.deathYear IS NULL</sql>"
  },
  {
    "id": 1298,
    "db_id": "art_1",
    "question": "What are the id and height of the painting with the longest width in gallery 240?",
    "answer": "SELECT DISTINCT T1.paintingID, T1.height_mm FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.sculptureid = T2.artistID WHERE T1.location IN ( 'Gallery 240' , 'Gallery 158') ORDER BY T1.width_mm DESC LIMIT 2</sql>"
  },
  {
    "id": 1299,
    "db_id": "art_1",
    "question": "Tell me the height and id number of the widest painting in gallery 240.",
    "answer": "SELECT DISTINCT T1.height_mm , T1.id FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.artistID WHERE T2.location = 'Gallery 240' GROUP BY T1.height_mm ORDER BY SUM(T1.height) DESC LIMIT 3</sql>"
  },
  {
    "id": 1300,
    "db_id": "art_1",
    "question": "What are the ids of the paintings created before all of the paintings in gallery 240?",
    "answer": "SELECT DISTINCT T1.paintingID FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistID WHERE strftime('%Y', T1.birthYear) = '2065' AND strftime('%M', T1.deathYear) < 1778</sql>\n<question>What is the year of birth for artist named K"
  },
  {
    "id": 1301,
    "db_id": "art_1",
    "question": "What is the id of every painting created before the oldest painting in gallery 240?",
    "answer": "SELECT DISTINCT T1.paintingID FROM Paintings AS T1 INNER JOIN Sculptures AS T2 ON T1.paintingID = T2.sculptureID ORDER BY T2.`year` DESC LIMIT 3</sql>"
  },
  {
    "id": 1302,
    "db_id": "art_1",
    "question": "What are the ids of the paintings whose height is longer than the height of all paintings created after 1900?",
    "answer": "SELECT DISTINCT T2.paintingID FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.sculptureID = T2.paintingID ORDER BY T1.`height_mm` BETWEEN 104 AND 162, T1.`year` BETWEEN 853 AND 1902</sql>"
  },
  {
    "id": 1303,
    "db_id": "art_1",
    "question": "List the ids of all paintings that are taller than the longest painting created after 1900.",
    "answer": "SELECT DISTINCT T2.paintingID FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.artistID WHERE CAST(T2.year AS REAL) - MAX(CAST(T2.birthYear AS REAL)) BETWEEN 38 AND 67 GROUP BY T1.title ORDER BY SUM(MAX(CASE WHEN T2.height_"
  },
  {
    "id": 1304,
    "db_id": "art_1",
    "question": "Find the top 3 artists who have the biggest number of painting works whose medium is oil?",
    "answer": "SELECT DISTINCT T1.lname, T2.title FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T1.medium = 'oil' ORDER BY COUNT(T2.location) DESC LIMIT 3</sql>"
  },
  {
    "id": 1305,
    "db_id": "art_1",
    "question": "Which artists have the most paintings in oil?",
    "answer": "SELECT DISTINCT T2.painterID FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID GROUP BY T2.painterID ORDER BY COUNT(T2.title) DESC LIMIT 3</sql>"
  },
  {
    "id": 1306,
    "db_id": "art_1",
    "question": "List the painting id, location and title of the medium oil paintings ordered by year.",
    "answer": "SELECT DISTINCT T1.paintingID, T2.location, T3.title FROM Paintings AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.painterID INNER JOIN Artists AS T3 ON T2.painterID = T3.artistID ORDER BY T1.year DESC</sql>"
  },
  {
    "id": 1307,
    "db_id": "art_1",
    "question": "Order all of the oil paintings by date of creation and list their ids, locations, and titles.",
    "answer": "SELECT DISTINCT T1.paintingID , T2.location , T3.title FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.artistID INNER JOIN sculptures AS T3 ON T1.painterID = T3.sculptorID ORDER BY T3.year DESC</sql>"
  },
  {
    "id": 1308,
    "db_id": "art_1",
    "question": "List the year, location and title of paintings whose height is longer than 1000 ordered by title.",
    "answer": "SELECT DISTINCT T2.year, T2.location FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID ORDER BY T1.height > 1000</sql>"
  },
  {
    "id": 1309,
    "db_id": "art_1",
    "question": "List the year, location, and name of all paintings that are taller than 1000 in alphabetical order.",
    "answer": "SELECT DISTINCT T2.year, T2.location FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistID WHERE CAST(T2.height_mm - T2.weight AS REAL) BETWEEN 1000 AND ( ORDER BY T2.`lname`, `t2.deathyear` DESC LIMIT 1 )</sql>"
  },
  {
    "id": 1310,
    "db_id": "art_1",
    "question": "Find the first and last name of artists who have painting but no sculpture work.",
    "answer": "SELECT DISTINCT T1.lname, T2.fname FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.painterID WHERE T1.location IS NULL OR T1.location IS NOT NULL ORDER BY T1.year DESC LIMIT 1</sql>"
  },
  {
    "id": 1311,
    "db_id": "art_1",
    "question": "What are the first and last names of the artists who did not sculpt but could paint.",
    "answer": "SELECT DISTINCT T1.lname, T2.fname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.paintingid WHERE T2.location IS NULL AND T2.title != 'Painter'</sql>"
  },
  {
    "id": 1312,
    "db_id": "art_1",
    "question": "Find the locations that have paintings before 1885 and no work with medium on canvas?",
    "answer": "SELECT DISTINCT T2.location FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID WHERE T1.`year` BETWEEN 1965 AND 2004 INTERSECT SELECT DISTINCT t2.location FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2"
  },
  {
    "id": 1313,
    "db_id": "art_1",
    "question": "Where do you have paintings that were created before 1885 that are not on canvas?",
    "answer": "SELECT DISTINCT T2.title FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID WHERE strftime('%Y', T1.birthYear) >= 1875 AND strftime('%Y', T2.deathYear) IS NULL</sql>"
  },
  {
    "id": 1314,
    "db_id": "car_road_race",
    "question": "How many races are there?",
    "answer": "SELECT COUNT(DISTINCT T2.race), SUM(CASE WHEN T1.`Report` = 'Race' THEN 1 ELSE 0 END) AS num FROM `driver\" AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.PolePosition > ( SELECT MAX(T2.`PolePosition`) ) GROUP BY T1.`Report` ORDER BY SUM(CASE WHEN T1.`Report`"
  },
  {
    "id": 1315,
    "db_id": "car_road_race",
    "question": "Count the number of races.",
    "answer": "SELECT COUNT(DISTINCT T2.race) FROM \"race\" AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Pole_Position IS NOT NULL AND T1.Pole_Position = 'N/A' GROUP BY T1.Race ORDER BY COUNT(DISTINCT T2.race) DESC LIMIT 1</sql>"
  },
  {
    "id": 1316,
    "db_id": "car_road_race",
    "question": "List the winning drivers and winning teams of races in ascending alphabetical order of winning team.",
    "answer": "SELECT DISTINCT T2.name, T3.team FROM race AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID INNER JOIN `team` AS T3 ON T2.Team_ID = T3.Team_ID ORDER BY T2.team DESC</sql>"
  },
  {
    "id": 1317,
    "db_id": "car_road_race",
    "question": "What are the winning drivers and teams of races, ordered alphabetically by team?",
    "answer": "SELECT DISTINCT T2.Team, T3.Name FROM race AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Pole_Position IS NULL ORDER BY T2.Name</sql>"
  },
  {
    "id": 1318,
    "db_id": "car_road_race",
    "question": "Which winning drivers of races had pole position that is not \"Junior Strous\"?",
    "answer": "SELECT T2.name FROM race AS T1 INNER JOIN driver AS T2 ON T1.Race_Name = T2.Driver_ID WHERE T1.Pole_Position IS NULL OR T2.name NOT LIKE '%Junior Sonsen'</sql>"
  },
  {
    "id": 1319,
    "db_id": "car_road_race",
    "question": "Return the winning drivers of races who did not have the pole position of Junior Strous.",
    "answer": "SELECT T1.name FROM race AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Pole_Position IS NULL AND T2 = 'Junior Strous'</sql>"
  },
  {
    "id": 1320,
    "db_id": "car_road_race",
    "question": "Who are the constructors of drivers sorted by drivers' age in ascending order?",
    "answer": "SELECT DISTINCT T2.name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID ORDER BY T1.Pole_Position DESC, T1.Age ASC LIMIT 1</sql>"
  },
  {
    "id": 1321,
    "db_id": "car_road_race",
    "question": "Return the different constructors of drivers, ordered by age ascending.",
    "answer": "SELECT T1.Entrant FROM \"driver\" AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.DRIVER_ID ORDER BY T2.Fastest_Lap DESC LIMIT 1</sql>"
  },
  {
    "id": 1322,
    "db_id": "car_road_race",
    "question": "What are the distinct entrant types of drivers aged 20 or older?",
    "answer": "SELECT T3.entrant FROM \"race\" AS T1 INNER JOIN driver AS T2 ON T1.Race_Name = T2.Driver_ID WHERE T1.PolePosition > ( SELECT MAX(T1.PolePosition) FROM 'driver' AS T1 INNER JOIN race AS T2 ON T2.Driver_ID = T1.Driver_ID ) AND T2.entrant IS NOT NULL</sql>"
  },
  {
    "id": 1323,
    "db_id": "car_road_race",
    "question": "Give the different entrant types for drivers at least 20 years old.",
    "answer": "SELECT T3.entrant, T1.`Age`, 'Mini' FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.driver_id WHERE age > 20 GROUP BY T3.`Entrant` ORDER BY COUNT(T2.entrant) DESC LIMIT 5</sql>"
  },
  {
    "id": 1324,
    "db_id": "car_road_race",
    "question": "What are the maximum and minimum age of driver?",
    "answer": "SELECT DISTINCT T2.max(T1.age) - T2.`minimum(Age)` FROM `race` AS T1 INNER JOIN `driver` AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.driver ORDER BY T1.report LIMIT 1</sql>"
  },
  {
    "id": 1325,
    "db_id": "car_road_race",
    "question": "Return the maximum and minimum age across drivers.",
    "answer": "SELECT DISTINCT T2.Age, MAX(T1.Age), MIN(T1.Age) FROM \"race\" AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T2.Name ORDER BY COUNT(T2.PolePosition) DESC LIMIT 1</sql>"
  },
  {
    "id": 1326,
    "db_id": "car_road_race",
    "question": "How many different engines are used by drivers with age older than 30 or younger than 20?",
    "answer": "SELECT COUNT(T1.engine) FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.driver WHERE T1.age BETWEEN 20 AND 30 AND T2.chassis LIKE 'motor%'</sql>"
  },
  {
    "id": 1327,
    "db_id": "car_road_race",
    "question": "Count the number of different engines used by drivers who had an age either over 30 or under 20.",
    "answer": "SELECT COUNT(T1.engine) FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.driver WHERE T1.age BETWEEN 20 AND 30 GROUP BY T1.driver ORDER BY T2.PolePosition DESC LIMIT 1</sql>"
  },
  {
    "id": 1328,
    "db_id": "car_road_race",
    "question": "List all names of drivers in descending alphabetical order.",
    "answer": "SELECT T1.Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.DRIVER_ID ORDER BY T1.Name ASC LIMIT 1</sql>"
  },
  {
    "id": 1329,
    "db_id": "car_road_race",
    "question": "What are the names of drivers, ordered descending alphabetically?",
    "answer": "SELECT T1.Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.DRIVER_ID ORDER BY T1.Name ASC LIMIT 1</sql>"
  },
  {
    "id": 1330,
    "db_id": "car_road_race",
    "question": "Please show the names of drivers and the names of races they participate in.",
    "answer": "SELECT DISTINCT T1.name, T2.race_name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.driver WHERE T1.enlist = 'yes'</sql>"
  },
  {
    "id": 1331,
    "db_id": "car_road_race",
    "question": "What are the names of drivers and the names of the races they took part in?",
    "answer": "SELECT DISTINCT T2.name, T3.race FROM \"driver\" AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID INNER JOIN `event` AS T3 ON T1.entrant = T3.Entrant WHERE T2.PolePosition > 5 AND T3.Date IS NOT NULL ORDER BY T3.Winning_driver, T2.race DESC LIMIT 1</sql"
  },
  {
    "id": 1332,
    "db_id": "car_road_race",
    "question": "Please show the names of drivers and the number of races they participate in.",
    "answer": "SELECT DISTINCT T2.name, COUNT(T1.driver_id), T3.number FROM \"race\" AS T1 INNER JOIN \"driver\" AS T2 ON T1.Driver_ID = T2.Driver_ID INNER JOIN `driver` AS T3 ON T1.Race_Name = T3.Race_name WHERE T1.PolePosition IS NULL</sql>"
  },
  {
    "id": 1333,
    "db_id": "car_road_race",
    "question": "How many races did each driver participate in?",
    "answer": "SELECT COUNT(T1.Driver_ID), SUM(T2.Entrant) FROM \"race\" AS T1 INNER JOIN \"driver\" AS T2 ON T1.Race_Name = T2.Driver_ID GROUP BY T2.Driver_ID ORDER BY COUNT(T2.Entrant) DESC</sql>"
  },
  {
    "id": 1334,
    "db_id": "car_road_race",
    "question": "Please show the age of the driver who participated in the most number of races.",
    "answer": "SELECT COUNT(DISTINCT T2.Driver_ID), T1.Age, T2.Driver_Name FROM `driver` AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T2.Race_Name ORDER BY SUM(CASE WHEN COUNT(T3.Entrant) > 0 THEN 1 ELSE 0 END) DESC LIMIT 1</sql>"
  },
  {
    "id": 1335,
    "db_id": "car_road_race",
    "question": "What is the age of the driver who raced in the most races?",
    "answer": "SELECT SUM(DISTINCT T2.Age), MAX(T1.Age), T1.Pole_Position FROM \"race\" AS T1 INNER JOIN \"driver\" AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Year ORDER BY COUNT(DISTINCT T2.Date) DESC LIMIT 1</sql>"
  },
  {
    "id": 1336,
    "db_id": "car_road_race",
    "question": "Please show the names and ages of the drivers who participated in at least two races.",
    "answer": "SELECT DISTINCT T1.name, T2.age FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.driver_id WHERE T1.enlistment > 2 AND T2.contestant = 'Yes' GROUP BY T1.enlistment ORDER BY SUM(T2.num_racers) - SUM(T2.num_racers) DESC LIMIT 2</sql>"
  },
  {
    "id": 1337,
    "db_id": "car_road_race",
    "question": "What are the names and ages of drivers who raced in two or more races?",
    "answer": "SELECT DISTINCT T2.name, T3.age FROM race AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T2.name HAVING COUNT(T1.Date) IN (( SELECT MAX(Date) ,  COUNT(*) FROM race AS T3 ) )</sql>"
  },
  {
    "id": 1338,
    "db_id": "car_road_race",
    "question": "Please list the names of races with drivers aged 26 or older participating.",
    "answer": "SELECT DISTINCT T1.race_name FROM \"race\" AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.Driver_ID WHERE T2.age BETWEEN 23 AND 58 ORDER BY T2.years_participating LIMIT 1</sql>"
  },
  {
    "id": 1339,
    "db_id": "car_road_race",
    "question": "What are the names of races in which drivers 26 or older took part?",
    "answer": "SELECT DISTINCT T1.race_name FROM \"race\" AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.driver_name LIKE '%older%' AND T1.pole_position IS NULL</sql>"
  },
  {
    "id": 1340,
    "db_id": "car_road_race",
    "question": "List the names of drivers whose constructor is not \"Bugatti\".",
    "answer": "SELECT DISTINCT T2.name FROM race AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.chassis = 'bugatti' AND T1.constructor != 'F382A'</sql>"
  },
  {
    "id": 1341,
    "db_id": "car_road_race",
    "question": "What are the names od drivers who did not have the constructor Bugatti?",
    "answer": "SELECT DISTINCT T2.name FROM race AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.chassis != 'Bugatti' AND T1.constructor != ''</sql>"
  },
  {
    "id": 1342,
    "db_id": "car_road_race",
    "question": "List different constructors and the number of drivers that use each constructor.",
    "answer": "SELECT DISTINCT T2.name, COUNT(T1.chassis), T1.constructor FROM ( SELECT DISTINCT T1.chassis , T3.`Name` FROM `constructor` AS T1 INNER JOIN `driver` AS T2 ON T1.driver_id = T2.Driver_ID WHERE T2.name NOT IN ('Amelie', 'Laurens van den Acker') GROUP BY T1.constructor ORDER"
  },
  {
    "id": 1343,
    "db_id": "car_road_race",
    "question": "How many drivers use each constructor?",
    "answer": "SELECT T1.constructor FROM \"race\" AS T1 INNER JOIN \"driver\" AS T2 ON T1.driver_id = T2.Driver_ID ORDER BY T1.\"Pole_Position\" DESC LIMIT 3</sql>"
  },
  {
    "id": 1344,
    "db_id": "car_road_race",
    "question": "List the most common type of engine used by drivers.",
    "answer": "SELECT T1.type FROM \"race\" AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.Driver_ID ORDER BY COUNT(T1.`Type`) DESC LIMIT 1</sql>"
  },
  {
    "id": 1345,
    "db_id": "car_road_race",
    "question": "What is the most common type of engine?",
    "answer": "SELECT T1.type FROM \"race\" AS T1 INNER JOIN \"engine\" AS T2 ON T1.driver = T2.Driver_ID ORDER BY T1.winning_team ORDER BY T2.engine, T1.winning_driver ASC LIMIT 1</sql>"
  },
  {
    "id": 1346,
    "db_id": "car_road_race",
    "question": "List the types of engines that are used by at least two drivers.",
    "answer": "SELECT DISTINCT T2.engine FROM race AS T1 INNER JOIN driver AS T2 ON T1.Drivers_ID = T2.Driver_ID GROUP BY T1.Entrant, T1.Name ORDER BY COUNT(DISTINCT t1.Entrant) DESC LIMIT 2</sql>"
  },
  {
    "id": 1347,
    "db_id": "car_road_race",
    "question": "What are the engine types that are used by two or more drivers?",
    "answer": "SELECT DISTINCT T2.engine FROM race AS T1 INNER JOIN driver AS T2 ON T1.Drivers_ID = T2.Driver_ID GROUP BY T1.Entrant, T1.Name ORDER BY COUNT(DISTINCT t1.engine) DESC LIMIT 1</sql>"
  },
  {
    "id": 1348,
    "db_id": "car_road_race",
    "question": "List the names of drivers that do not participate in any race.",
    "answer": "SELECT T1.name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.DRIVER_ID WHERE T2.Pole_Position IS NULL AND T2.RaceName != 'None'</sql>"
  },
  {
    "id": 1349,
    "db_id": "car_road_race",
    "question": "What are names of drivers who did not take part in a race?",
    "answer": "SELECT T1.Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.DRIVER_ID WHERE T2.Pole_Position IS NULL AND T2.Race_Name != 'United States Nationals'</sql>"
  },
  {
    "id": 1350,
    "db_id": "car_road_race",
    "question": "Show the constructors that are used both by drivers with age lower than 20 and drivers with age over than 30.",
    "answer": "SELECT DISTINCT T1.chassis, T2.engine FROM \"race\" AS T1 INNER JOIN \"driver\" AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Pole_Position <= '33' AND T1.Entrant IN ('JOSE FRANCISCO SALAS', 'ADRIA LORDE') AND age BETWEEN 20 AND 30</"
  },
  {
    "id": 1351,
    "db_id": "car_road_race",
    "question": "What are the constructors who are used by both drivers who are younger than 20 and drivers older than 30?",
    "answer": "SELECT DISTINCT T1.chassis, T2.chassis FROM \"driver\" AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.driver WHERE T1.Entrant < '20' AND strftime('%J', T2.Date) BETWEEN 20 AND 30 GROUP BY T2.chassis ORDER BY COUNT(T1.Entrant) DESC LIMIT "
  },
  {
    "id": 1352,
    "db_id": "car_road_race",
    "question": "Find the teams that won more than once.",
    "answer": "SELECT DISTINCT T2.team FROM \"race\" AS T1 INNER JOIN `driver` AS T2 ON T1.DRIVER_ID = T2.Driver_ID GROUP BY T2.team ORDER BY COUNT(T2.name) DESC LIMIT 1</sql>"
  },
  {
    "id": 1353,
    "db_id": "car_road_race",
    "question": "Which teams won more than 1 race?",
    "answer": "SELECT DISTINCT T2.team, COUNT(T3.Team_ID), SUM(CASE WHEN T3.Team_ID = 'team-1' THEN 1 ELSE 0 END) AS avg FROM ( SELECT DISTINCT T3.Team_ID , COUNT(T2.Entrant) AS num AS per FROM `driver` AS T1 INNER JOIN teams AS T2 ON T1.Driver_ID = T2.Team_ID WHERE T"
  },
  {
    "id": 1354,
    "db_id": "car_road_race",
    "question": "Find the names of drivers who were in both \"James Hinchcliffe\" and \"Carl Skerlong\" pole positions before.",
    "answer": "SELECT DISTINCT T2.name FROM race AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.Driver_ID WHERE T1.Pole_Position BETWEEN 3 AND 5</sql>"
  },
  {
    "id": 1355,
    "db_id": "car_road_race",
    "question": "What are the names of drivers who had both the pole position James Hinchcliffe and the pole position Carl Skerlong?",
    "answer": "SELECT DISTINCT T1.name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.driver_id WHERE T2.Pole_Position IN ( 'James Hinchcliffe', 'Carl Skerlong' )</sql>"
  },
  {
    "id": 1356,
    "db_id": "car_road_race",
    "question": "find the name of drivers who were never in \"James Hinchcliffe\" pole position before.",
    "answer": "SELECT DISTINCT T1.name FROM driver AS T1 INNER JOIN race AS T2 ON T1.driver = T2.Driver_ID WHERE T2.PolePosition IS NULL ORDER BY T3.PolePosition DESC LIMIT 1</sql>"
  },
  {
    "id": 1357,
    "db_id": "car_road_race",
    "question": "What are the names of drivers except for those who had the pole position James Hinchcliffe?",
    "answer": "SELECT DISTINCT T1.name FROM driver AS T1 INNER JOIN race AS T2 ON T1.driver = T2.Driver_ID WHERE T2.Pole_Position IS NULL ORDER BY T1.Entrant DESC LIMIT 1</sql>"
  },
  {
    "id": 1358,
    "db_id": "country_language",
    "question": "How many languages are there?",
    "answer": "SELECT COUNT(T1.language_id) FROM countries AS T1 INNER JOIN language AS T2 ON T1.country_id = T2.id WHERE T1.name LIKE '%other%' GROUP BY T1.name ORDER BY COUNT(DISTINCT T2.language_id) DESC LIMIT 1</sql>"
  },
  {
    "id": 1359,
    "db_id": "country_language",
    "question": "Count the number of languages.",
    "answer": "SELECT COUNT(DISTINCT T2.name), SUM(CASE WHEN T1.`overall_score` = '0' THEN 1 ELSE NULL END) AS total FROM countries AS T1 INNER JOIN language AS T2 ON T1.id = T2.`id` GROUP BY T1.name</sql>"
  },
  {
    "id": 1360,
    "db_id": "country_language",
    "question": "List the name of languages in ascending alphabetical order.",
    "answer": "SELECT DISTINCT T2.name FROM languages AS T1 INNER JOIN countries AS T2 ON T1.country_id = T2.id ORDER BY T1.name ASC LIMIT 1</sql>"
  },
  {
    "id": 1361,
    "db_id": "country_language",
    "question": "What are the names of languages, in alphabetical order?",
    "answer": "SELECT DISTINCT T2.name FROM countries AS T1 INNER JOIN `languages` AS T2 ON T1.id = T2.language_id ORDER BY T2.name</sql>"
  },
  {
    "id": 1362,
    "db_id": "country_language",
    "question": "What are the names of languages that contain the word \"ish\"?",
    "answer": "SELECT DISTINCT T2.name FROM languages AS T1 INNER JOIN countries AS T2 ON T1.country_id = T2.id WHERE T1.word LIKE '%is%'</sql>"
  },
  {
    "id": 1363,
    "db_id": "country_language",
    "question": "Return the names of langauges that contain the substring \"ish\".",
    "answer": "SELECT DISTINCT T2.name FROM \"official_languages AS T1 INNER JOIN languages AS T2 ON T1.language_id = T2.id WHERE T2.name LIKE '%sh%' AND T2.overall_score IS NULL GROUP BY T2.name ORDER BY T1.name NOT IN (SELECT DISTINCT T2.name FROM languages AS T2 INNER JOIN langauges AS T3 ON T1.language_id = T"
  },
  {
    "id": 1364,
    "db_id": "country_language",
    "question": "Show the names of countries in descending order of overall scores.",
    "answer": "SELECT DISTINCT T2.name FROM \"languages\" AS T1 INNER JOIN countries AS T2 ON T1.country_id = T2.id ORDER BY T1.`overall_score`, T2.PRIMARY KEY (`T1.id`) DESC LIMIT 1</sql>"
  },
  {
    "id": 1365,
    "db_id": "country_language",
    "question": "What are the names of the countries, ordered descending by overall score?",
    "answer": "SELECT DISTINCT T2.name FROM \"official_languages AS T1 INNER JOIN countries AS T2 ON T1.country_id = T2.id ORDER BY T1.overall_score DESC LIMIT 1</sql>"
  },
  {
    "id": 1366,
    "db_id": "country_language",
    "question": "What is the average justice scores among countries?",
    "answer": "SELECT AVG(T2.justice_score), T3.name FROM  `languages` AS T1 INNER JOIN `countries` AS T2 ON T1.id = T2.country_id INNER JOIN \"official_languages\" AS T3 ON T2.id = T3.language_id GROUP BY T1.name ORDER BY SUM(T3.justice_score) / COUNT(T2.id) DESC LIMIT 1"
  },
  {
    "id": 1367,
    "db_id": "country_language",
    "question": "Give the average justice scores across all countries.",
    "answer": "SELECT CAST(SUM(CASE WHEN T2.justice IS NULL THEN 1 ELSE -1 END) AS REAL) / COUNT(T2.country_id), SUM(CASE WHEN T2.health IS NULL THEN 1 ELSE -1 END), SUM(CASE WHEN T2.education IS NULL THEN 1 ELSE -1 END), SUM(CASE WHEN T2.economics IS NULL THEN 1 ELSE -1 END), SUM(CASE WHEN"
  },
  {
    "id": 1368,
    "db_id": "country_language",
    "question": "What are the maximum and minimum health scores among countries that are not \"Norway\".",
    "answer": "SELECT DISTINCT MAX(T2.health_score), MIN(T2.health_score) FROM `countries` AS T1 INNER JOIN `official_languages\" AS T2 ON T1.id = T2.country_id WHERE T1.name != 'Norway'</sql>"
  },
  {
    "id": 1369,
    "db_id": "country_language",
    "question": "Return the maximum and minimum health scores across all countries other than Norway.",
    "answer": "SELECT SUM(health_score), MAX(MIN(health_score)) FROM ( SELECT T1.ID, T2.`overall_score`, T3.`justice_score`, T4.T2.`nationality` AS country_from_orange , SUM(CASE WHEN T5.country_id != \"Norway\" THEN t1.health_score END) AS score_max , SUM(CASE WHEN T5.country_id"
  },
  {
    "id": 1370,
    "db_id": "country_language",
    "question": "How many different official languages are there?",
    "answer": "SELECT COUNT(DISTINCT T2.name), T1.`id`, T3.ID FROM ( SELECT DISTINCT `languages` AS id, `country_id` ,  COUNT(T3.name) AS num FROM \"official_languages\" AS T1 INNER JOIN countries AS T2 ON T1.`language_id` = T2.id INNER JOIN countries AS T3 ON T1.country_id = T3.ID WHERE T1"
  },
  {
    "id": 1371,
    "db_id": "country_language",
    "question": "Count the number of different official languages.",
    "answer": "SELECT COUNT(DISTINCT T2.name), SUM(DISTINCT T2.name) FROM \"languages AS T1 INNER JOIN countries AS T2 ON T1.country_id = T2.id GROUP BY T1.name ORDER BY COUNT(DISTINCT T2.name) DESC LIMIT 1</sql>"
  },
  {
    "id": 1372,
    "db_id": "country_language",
    "question": "List names of countries in descending order of education_score.",
    "answer": "SELECT DISTINCT T2.name FROM ( SELECT T1.\"name\", SUM(T1.Education_Score) AS sum FROM \"countries\" AS T1 INNER JOIN `languages` AS T2 ON T1.id = T2.CountryId GROUP BY T1.Name ORDER BY COUNT(T2.score DESC) DESC LIMIT 1 </sql>"
  },
  {
    "id": 1373,
    "db_id": "country_language",
    "question": "What are the names of the countries, ordered descending by education score?",
    "answer": "SELECT DISTINCT T2.name FROM \"languages\" AS T1 INNER JOIN countries AS T2 ON T1.id = T2.country_id ORDER BY T2.`education_score` DESC LIMIT 1</sql>"
  },
  {
    "id": 1374,
    "db_id": "country_language",
    "question": "List the name of the country with the biggest score in politics.",
    "answer": "SELECT T1.name FROM countries AS T1 INNER JOIN \"politics\" AS T2 ON T1.id = T2.country_id GROUP BY T1.name ORDER BY SUM(T2.`score`) DESC LIMIT 1</sql>"
  },
  {
    "id": 1375,
    "db_id": "country_language",
    "question": "What is the name of the country with the highest politics score?",
    "answer": "SELECT T1.name FROM countries AS T1 INNER JOIN politics AS T2 ON T1.id = T2.country_id ORDER BY T1.politics_score DESC LIMIT 1</sql>"
  },
  {
    "id": 1376,
    "db_id": "country_language",
    "question": "Show the names of countries and their official languages.",
    "answer": "SELECT DISTINCT T2.name, T3.name FROM ( SELECT T2.name AS `languages`, T1.`country_id`, T2.`overall_score` ,  T3.`language_id` FROM \"countries\" AS `T1` INNER JOIN \"languages\" AS `T2` ON T1.id = T2.id INNER JOIN \"official_languages\" AS `T3` ON T1.id ="
  },
  {
    "id": 1377,
    "db_id": "country_language",
    "question": "What are the names of the countries, as well as the names of their official langauges?",
    "answer": "SELECT DISTINCT T2.name FROM languages AS T1 INNER JOIN countries AS T2 ON T1.language_id = T2.id WHERE T1.name = 'zh' GROUP BY T1.name ORDER BY T2.name UNION SELECT T3.name, T2.name FROM nations AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.id INNER JOIN languages AS T3 ON T2.language_id ="
  },
  {
    "id": 1378,
    "db_id": "country_language",
    "question": "Show the official languages and the number of countries speaking each language.",
    "answer": "SELECT DISTINCT T2.name, COUNT(T1.language_id), T3.overall_score FROM 'languages' AS T1 INNER JOIN countries AS T2 ON T1.id = T2.country_id INNER JOIN `official_languages` AS T3 ON T2.id = T3.language_id GROUP BY T2.name ORDER BY T1.overall_score DESC LIMIT 3</sql>"
  },
  {
    "id": 1379,
    "db_id": "country_language",
    "question": "What are the names of the different official languages, as well as the number of countries that speak each?",
    "answer": "SELECT DISTINCT T2.name AS language, COUNT(T1.country_id), T3.countries.overall_score FROM `languages` AS T1 INNER JOIN countries AS T2 ON T1.id = T2.id INNER JOIN ( SELECT T1.name , COUNT(*) AS total FROM `language` AS T1 INNER JOIN T2 AS T3 ON T1.id = T3.language_id WHERE T1.overall_"
  },
  {
    "id": 1380,
    "db_id": "country_language",
    "question": "Show the official language spoken by the most number of countries.",
    "answer": "SELECT T1.name FROM languages AS T1 INNER JOIN countries AS T2 ON T1.id = T2.country_id GROUP BY T1.name ORDER BY COUNT(T2.language_id) DESC LIMIT 1</sql>"
  },
  {
    "id": 1381,
    "db_id": "country_language",
    "question": "What is the official language that is most common?",
    "answer": "SELECT T1.name FROM languages AS T1 INNER JOIN countries AS T2 ON T1.id = T2.id ORDER BY T1.overall_score DESC LIMIT 1</sql>"
  },
  {
    "id": 1382,
    "db_id": "country_language",
    "question": "Show the official languages spoken by at least two countries.",
    "answer": "SELECT DISTINCT T2.name FROM `languages` AS T1 INNER JOIN countries AS T2 ON T1.country_id = T2.id GROUP BY T2.name ORDER BY COUNT(T2.id) > 2 GROUP BY T3.name</sql>"
  },
  {
    "id": 1383,
    "db_id": "country_language",
    "question": "Which official languages are spoken in two or more countries?",
    "answer": "SELECT DISTINCT T2.name FROM \"languages\" AS T1 INNER JOIN countries AS T2 ON T1.country_id = T2.id GROUP BY T1.language_id ORDER BY COUNT(T1.language_id) DESC LIMIT 2</sql>"
  },
  {
    "id": 1384,
    "db_id": "country_language",
    "question": "Show the average overall scores of countries whose official language is \"English\".",
    "answer": "SELECT AVG(T2.overall_score), T3.name FROM COUNTRIES AS T1 INNER JOIN LANGUAGES AS T2 ON T1.id = T2.language_id WHERE T1.name = 'English' ORDER BY T1.name, T3.name</sql>"
  },
  {
    "id": 1385,
    "db_id": "country_language",
    "question": "What is the average overall score across countries with English as their official language?",
    "answer": "SELECT AVG(T2.overall_score), T3.name FROM country AS T1 INNER JOIN languages AS T2 ON T1.country_id = T2.country_id WHERE T3.name = 'english' GROUP BY T2.name ORDER BY COUNT(T2.language_id) DESC LIMIT 1</sql>"
  },
  {
    "id": 1386,
    "db_id": "country_language",
    "question": "Show the three official languages that are most commonly spoken.",
    "answer": "SELECT DISTINCT T2.name FROM \"official_languages AS T1 INNER JOIN countries AS T2 ON T1.country_id = T2.id ORDER BY SUM(T2.justice_score) DESC LIMIT 3</sql>"
  },
  {
    "id": 1387,
    "db_id": "country_language",
    "question": "What are the names of the three official languages spoken in the most countries?",
    "answer": "SELECT DISTINCT T2.name FROM `languages` AS T1 INNER JOIN countries AS T2 ON T1.country_id = T2.id ORDER BY T1.overall_score DESC LIMIT 3</sql>"
  },
  {
    "id": 1388,
    "db_id": "country_language",
    "question": "Show the official languages sorted in descending order by the average overall scores among countries speaking them.",
    "answer": "SELECT DISTINCT T2.name, SUM(T1.`overall_score`) AS total , AVG(T2.`overall_score`) FROM \"languages\" AS T1 INNER JOIN 'countries' AS T2 ON T2.id = T1.country_id GROUP BY T1.name ORDER DESC LIMIT 1</sql>"
  },
  {
    "id": 1389,
    "db_id": "country_language",
    "question": "What are the names of the official languages, sorted descending by the average overall scores across the countries that correspond to each?",
    "answer": "SELECT DISTINCT T2.name FROM 'languages' AS T1 INNER JOIN \"official_languages\" AS T2 ON T1.id = T2.language_id ORDER BY T1.overall_score DESC LIMIT 3</sql>"
  },
  {
    "id": 1390,
    "db_id": "country_language",
    "question": "Show the name of the country that has the greatest number of official languages.",
    "answer": "SELECT DISTINCT T2.name FROM countries AS T1 INNER JOIN `languages` AS T2 ON T1.id = T2.country_id GROUP BY T1.name ORDER BY COUNT(T2.language_id) DESC LIMIT 1</sql>"
  },
  {
    "id": 1391,
    "db_id": "country_language",
    "question": "Which country has the greatest number of official languages?",
    "answer": "SELECT DISTINCT T2.name FROM countries AS T1 INNER JOIN \"languages\" AS T2 ON T1.id = T2.country_id GROUP BY T1.name ORDER BY COUNT(T2.language_id) DESC LIMIT 1</sql>"
  },
  {
    "id": 1392,
    "db_id": "country_language",
    "question": "List the names of languages that are not the official language of any countries.",
    "answer": "SELECT DISTINCT T2.name FROM languages AS T1 INNER JOIN countries AS T2 ON T1.id = T2.country_id WHERE T1.overall_score IS NULL OR T2.name != 'the official language of no country' LIMIT 1</sql>"
  },
  {
    "id": 1393,
    "db_id": "country_language",
    "question": "What are the names of languages that are not the official language of any country?",
    "answer": "SELECT DISTINCT T2.name FROM countries AS T1 INNER JOIN languages AS T2 ON T1.country_id = T2.id WHERE T1.overall_score IS NULL OR T2.name IS NOT IN ( SELECT T1.name FROM languages AS T1 INNER JOIN countries AS T2 ON T1.country_id = T2 .\"id\")</sql>"
  },
  {
    "id": 1394,
    "db_id": "country_language",
    "question": "List the names of countries that do not have any official language.",
    "answer": "SELECT DISTINCT T2.name FROM languages AS T1 INNER JOIN countries AS T2 ON T1.country_id = T2.id WHERE T1.overall_score IS NULL OR T2.name IS NULL</sql>"
  },
  {
    "id": 1395,
    "db_id": "country_language",
    "question": "What are the names of countries that do not have an official language?",
    "answer": "SELECT DISTINCT T2.name FROM languages AS T1 INNER JOIN countries AS T2 ON T1.country_id = T2.id WHERE T1.overall_score IS NULL OR T2.name IS NULL AND T1.id IS NULL ORDER BY T2.name NOT IN (T2.name)</sql>"
  },
  {
    "id": 1396,
    "db_id": "country_language",
    "question": "Show the names of languages that are the official language for both countries with overall score greater than 95 and countries with overall score less than than 90.",
    "answer": "SELECT DISTINCT T2.name FROM \"languages\" AS T1 INNER JOIN countries AS T2 ON T1.id = T2.country_id WHERE T1.overall_score >  95 AND T2.overall_score <  90</sql>"
  },
  {
    "id": 1397,
    "db_id": "country_language",
    "question": "What are the names of languages that are the official language not only for countries that have an overall score of above 95, but also for countries that have an overall score below 90?",
    "answer": "SELECT DISTINCT T2.name FROM \"official_languages\" AS T1 INNER JOIN COUNTRIES AS T2 ON T1.language_id = T2.ID WHERE T2.overall_score BETWEEN 1 AND 350 ORDER BY T1.overall_score LIMIT 4</sql>"
  },
  {
    "id": 1398,
    "db_id": "real_estate_rentals",
    "question": "Which countries and cities are included in addresses?",
    "answer": "SELECT T1.city, T2.country FROM Addresses AS T1 INNER JOIN users AS T2 ON T1.user_id = T2.user_id WHERE T2.zip_postcode = '5783' GROUP BY T1.city ORDER BY COUNT(T1.line_1_number) INTERSECT SELECT T3.country, T1.city FROM Addresses AS T1 INNER JOIN users AS T2 ON T1."
  },
  {
    "id": 1399,
    "db_id": "real_estate_rentals",
    "question": "What are the countries and cities for each address?",
    "answer": "SELECT T1.city, T2.country FROM Addresses AS T1 INNER JOIN addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T1.city ORDER BY T2.county_state_province DESC</sql>"
  },
  {
    "id": 1400,
    "db_id": "real_estate_rentals",
    "question": "In which states are each of the the properties located?",
    "answer": "SELECT DISTINCT T1.state, T2.zip_postcode FROM addresses AS T1 INNER JOIN addresses AS T2 ON T1.address_id = T2.address_id WHERE strftime('%J', T1.`date_registered`) IN ( SELECT T3.STATE , T3.ZipPostCode FROM properties AS T3 INNER JOIN state_provinces AS T4 ON T3.property_name = T4.state WHERE"
  },
  {
    "id": 1401,
    "db_id": "real_estate_rentals",
    "question": "Give the states or provinces corresponding to each property.",
    "answer": "SELECT DISTINCT T2.state, T3.province FROM Addresses AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.user_address_id AND T1.property_type_code IN ('mansion', 'condo') INNER JOIN properties AS T3 ON T3.property_id = T2.property_id ORDER BY T3.country DESC LIMIT 1</sql>"
  },
  {
    "id": 1402,
    "db_id": "real_estate_rentals",
    "question": "How is the feature rooftop described?",
    "answer": "SELECT DISTINCT T2.feature_name FROM Addresses AS T1 INNER JOIN Features AS T2 ON T1.address_id = T2.address_id WHERE T1.line_2_number_building = 'roof' AND T1.property_type_description = 'office'</sql>"
  },
  {
    "id": 1403,
    "db_id": "real_estate_rentals",
    "question": "Return the description of the feature 'rooftop'.",
    "answer": "SELECT DISTINCT T2.feature_description FROM Addresses AS T1 INNER JOIN Features AS T2 ON T1.address_id = T2.address_id WHERE T1.city = 'lakewood' AND T2.name = 'Roof Top'</sql>"
  },
  {
    "id": 1404,
    "db_id": "real_estate_rentals",
    "question": "What are the feature name and description of the most commonly seen feature across properties?",
    "answer": "SELECT DISTINCT T2.feature_name, T1.`feature_description`, COUNT(T3.feature_id) FROM Addresses AS T1 INNER JOIN Features AS T2 ON T1.`address_id` = T2.`address_id`) AS T3 ORDER BY T3.feature_name DESC LIMIT 1</sql>"
  },
  {
    "id": 1405,
    "db_id": "real_estate_rentals",
    "question": "Give the feature name and description for the most common feature across all properties.",
    "answer": "SELECT DISTINCT T1.feature_name, T2.`description` FROM ( SELECT MAX(T2.feature_name) AS feature_name , T2.feature_description FROM Addresses AS T1 INNER JOIN Features AS T2 ON T1.address_id = T2.address_id GROUP BY T1.address_id ORDER BY COUNT(T1.user_id) DESC LIMIT 1 ) AS T3 UNION ALL SELECT DISTINCT T"
  },
  {
    "id": 1406,
    "db_id": "real_estate_rentals",
    "question": "What is the minimum number of rooms in a property?",
    "answer": "SELECT DISTINCT T1.room_type_description FROM addresses AS T1 INNER JOIN properties AS T2 ON T1.address_id = T2.property_address_id ORDER BY T1.line_3_area_locality LIMIT 5</sql>"
  },
  {
    "id": 1407,
    "db_id": "real_estate_rentals",
    "question": "What is the lowest room count across all the properties?",
    "answer": "SELECT MAX(room_count) FROM `Properties` GROUP BY rooms ORDER BY COUNT(`rooms`) LIMIT 1</sql>"
  },
  {
    "id": 1408,
    "db_id": "real_estate_rentals",
    "question": "How many properties have 1 parking lot or 1 garage?",
    "answer": "SELECT COUNT(T2.property_id) FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id WHERE T1.parking_lot OR T1.garage = 'true' AND T2.property_type LIKE 'parking%'</sql>"
  },
  {
    "id": 1409,
    "db_id": "real_estate_rentals",
    "question": "Count the number of properties that have 1 parking lot or 1 garage.",
    "answer": "SELECT COUNT(T2.property_id) FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id WHERE T1.parking_lot OR T1.garage = 'YES'</sql>"
  },
  {
    "id": 1410,
    "db_id": "real_estate_rentals",
    "question": "For users whose description contain the string 'Mother', which age categories are they in?",
    "answer": "SELECT T2.age_category_description FROM `Addresses` AS T1 INNER JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code WHERE T1.user_id IS NULL AND strftime('%Y', T1.`date_on_market`) BETWEEN '70' AND '45986843226659372'</"
  },
  {
    "id": 1411,
    "db_id": "real_estate_rentals",
    "question": "What are the age categories for users whose description contains the string Mother?",
    "answer": "SELECT T1.age_category_description FROM Users AS T1 INNER JOIN Ref_Age_Categories AS T2 ON T1.user_id = T2.user_id WHERE T1.user_details LIKE '%Mother%' AND strftime(STRFTIME('%Y', T2.date), '%B') IS NULL</sql>"
  },
  {
    "id": 1412,
    "db_id": "real_estate_rentals",
    "question": "What is the first name of the user who owns the greatest number of properties?",
    "answer": "SELECT DISTINCT T1.first_name, T2.last_name FROM users AS T1 INNER JOIN addresses AS T2 ON T1.user_id = T2.user_id WHERE strftime('%J', T2.`date_off_market`) > strftime('%J', T2) GROUP BY T1.first_name, T2.last_name ORDER BY COUNT(T1.first_name, T2.last"
  },
  {
    "id": 1413,
    "db_id": "real_estate_rentals",
    "question": "Return the first name of the user who owns the most properties.",
    "answer": "SELECT T2.first_name, T1.last_name FROM users AS T1 INNER JOIN addresses AS T2 ON T1.user_address_id = T2.user_address_id WHERE T1.is_seller = 'f' ORDER BY COUNT(T1.property_type_code) DESC LIMIT 1</sql>"
  },
  {
    "id": 1414,
    "db_id": "real_estate_rentals",
    "question": "List the average room count of the properties with gardens.",
    "answer": "SELECT CAST(SUM(CASE WHEN T2.town = 'city' THEN (T3.row_1 / COUNT(T2.row_1)) * 100 END) AS REFINTIONAL), SUM(CASE WHEN T2.property_type_code = 'room' THEN (T3.ROW_1 / COUNT(T2.row_1)) * 100 ELSE NULL END) FROM Addresses AS T1 INNER JOIN `"
  },
  {
    "id": 1415,
    "db_id": "real_estate_rentals",
    "question": "On average, how many rooms do properties with garden features have?",
    "answer": "SELECT CAST(SUM(CASE WHEN T2.room_type_description = 'Garden' THEN 1 ELSE NULL END) AS REAL) / COUNT(T1.address_id) FROM ( SELECT DISTINCT T1.address_id, sum(CASE WHEN T2.property_name LIKE '%garden%' THEN 1 ELSE NULL END ) AS num FROM addresses AS T1 INNER JOIN Property_types AS T2 ON T1.address_id ="
  },
  {
    "id": 1416,
    "db_id": "real_estate_rentals",
    "question": "In which cities are there any properties equipped with a swimming pool?",
    "answer": "SELECT T1.city FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id WHERE T2.property_type_name = 'swimming pool' GROUP BY T1.city ORDER BY COUNT(T1.property_name) DESC LIMIT 1</sql>"
  },
  {
    "id": 1417,
    "db_id": "real_estate_rentals",
    "question": "Return the cities in which there exist properties that have swimming pools.",
    "answer": "SELECT DISTINCT T2.city FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id WHERE T2.property_type = 'swimming pool'</sql>"
  },
  {
    "id": 1418,
    "db_id": "real_estate_rentals",
    "question": "Which property had the lowest price requested by the vendor? List the id and the price.",
    "answer": "SELECT DISTINCT T1.property_id, T2.price FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id GROUP BY T1.address_id ORDER BY SUM(CASE WHEN T2.date_on_market IS NULL THEN 1 ELSE 0 END) - COUNT(T2.price) DESC LIMIT 1</sql>"
  },
  {
    "id": 1419,
    "db_id": "real_estate_rentals",
    "question": "What is the id of the property that had the lowest requested price from the vendor, and what was that price?",
    "answer": "SELECT DISTINCT T1.owner_user_id FROM addresses AS T1 INNER JOIN `Properties` AS T2 ON T1.address_id = T2.property_address_id WHERE T1.line_3_area_locality = 'street' ORDER BY T2.price DESC LIMIT 1</sql>"
  },
  {
    "id": 1420,
    "db_id": "real_estate_rentals",
    "question": "On average, how many rooms does a property have?",
    "answer": "SELECT SUM(T1.room_type_description) / COUNT(T2.`user_id`) AS num FROM `Properties` AS T1 INNER JOIN `Addresses` AS T2 ON T1.`address_id` = T2.`address_id` WHERE T1.`property_name` IN ('Room Type B') GROUP BY T1.num ORDER BY SUM(T1.room_type_description) / COUNT(T2.user_id)"
  },
  {
    "id": 1421,
    "db_id": "real_estate_rentals",
    "question": "What is the average number of rooms in a property?",
    "answer": "SELECT AVG(T2.room_type_description) FROM Addresses AS T1 INNER JOIN properties AS T2 ON T1.address_id = T2.property_id WHERE T2.owner_user_id = '59' GROUP BY T1.line_3_area_locality ORDER BY COUNT(T2.room_type_description) DESC LIMIT 1</sql>"
  },
  {
    "id": 1422,
    "db_id": "real_estate_rentals",
    "question": "How many kinds of room sizes are listed?",
    "answer": "SELECT COUNT(DISTINCT T1.room_type_description) FROM `properties` AS T1 INNER JOIN `ref_user_categories` AS T2 ON T1.user_id = T2.user_id WHERE T1.property_name LIKE '%room size%'</sql>"
  },
  {
    "id": 1423,
    "db_id": "real_estate_rentals",
    "question": "Return the number of different room sizes.",
    "answer": "SELECT COUNT(DISTINCT T1.room_type_description) FROM `addresses AS T1 INNER JOIN rooms AS T2 ON T1.address_id = T2.address_id WHERE strftime('%J', T1.`date_registered`) BETWEEN '2009-01' AND '2012-05'</sql>"
  },
  {
    "id": 1424,
    "db_id": "real_estate_rentals",
    "question": "What are the ids of users who have searched at least twice, and what did they search?",
    "answer": "SELECT DISTINCT T1.user_address_id FROM Users AS T1 INNER JOIN addresses AS T2 ON T1.user_address_id = T2.address_id WHERE T2.postcode LIKE '%Los Angeles%' GROUP BY T1.first_name, T1.last_name ORDER BY COUNT(DISTINCT T1.user_address_id) >= 2 GROUP BY T2.postcode</sql>"
  },
  {
    "id": 1425,
    "db_id": "real_estate_rentals",
    "question": "Return the ids of users who have performed two or more searches, as well as their search sequence.",
    "answer": "SELECT DISTINCT T1.user_id , T2.`search_sequence`.COUNT(T3.login_name) AS num FROM Addresses AS T1 INNER JOIN Users AS T2 ON T1.address_id = T2.address_id AND T2.is_seller WHERE strftime('%M', T1.date_registered) > strftime('%M', T2.date_on_market) GROUP BY T1"
  },
  {
    "id": 1426,
    "db_id": "real_estate_rentals",
    "question": "When was the time of the latest search by a user?",
    "answer": "SELECT MAX(TIMESTAMP) AS `time` FROM users WHERE is_seller = 1 ORDER BY T2.date_on_market DESC LIMIT 1</sql>"
  },
  {
    "id": 1427,
    "db_id": "real_estate_rentals",
    "question": "What was the time of the most recent search?",
    "answer": "SELECT DISTINCT T2.last_name AS strftime('%J', T3.`datetime`) FROM Addresses AS T1 INNER JOIN Property_Types AS T2 ON T1.address_id = T2.address_id WHERE `date_registered` > ( SELECT MAX(T1.date_registered) FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.`property_id`) ORDER BY"
  },
  {
    "id": 1428,
    "db_id": "real_estate_rentals",
    "question": "What are all the user searches time and content? Sort the result descending by content.",
    "answer": "SELECT strftime('%J', T2.timestamp) - strftime('%J', T1.timestamp), 'User Search Time' AS desc FROM Addresses AS T1 INNER JOIN Ref_Properties AS T2 ON T1.address_id = T2.property_address_id ORDER BY T2.content DESC</sql>"
  },
  {
    "id": 1429,
    "db_id": "real_estate_rentals",
    "question": "Return the search strings and corresonding time stamps for all user searches, sorted by search string descending.",
    "answer": "SELECT DISTINCT T1.login_name AS username , T2.`dateregistered` FROM Addresses AS T1 INNER JOIN users AS T2 ON T1.user_address_id = T2.user_address_id WHERE T2.first_name = 'Kate' ORDER BY T2.first_name, T2.last_name DESC LIMIT 3</sql>"
  },
  {
    "id": 1430,
    "db_id": "real_estate_rentals",
    "question": "What are the zip codes of properties which do not belong to users who own at most 2 properties?",
    "answer": "SELECT T3.zip_postcode FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id WHERE T1.is_seller = 'Y' AND T2.is_buyer IS NULL LIMIT 2</sql>"
  },
  {
    "id": 1431,
    "db_id": "real_estate_rentals",
    "question": "Return the zip codes for properties not belonging to users who own two or fewer properties.",
    "answer": "SELECT T1.zip_postcode FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id WHERE T1.owner_user_id IS NULL AND COUNT(T2.property_id) < 2 GROUP BY T1.zip_postcode HAVING COUNT(T2.property_id) != 0</sql>"
  },
  {
    "id": 1432,
    "db_id": "real_estate_rentals",
    "question": "What are the users making only one search? List both category and user id.",
    "answer": "SELECT DISTINCT T1.user_id FROM Addresses AS T1 INNER JOIN Users AS T2 ON T1.address_id = T2.user_address_id WHERE T1.line_3_area_locality = 'town city' LIMIT 1</sql>"
  },
  {
    "id": 1433,
    "db_id": "real_estate_rentals",
    "question": "What are the ids of users who have only made one search, and what are their category codes?",
    "answer": "SELECT DISTINCT T1.user_id FROM Users AS T1 INNER JOIN addresses AS T2 ON T1.user_address_id = T2.address_id WHERE strftime('%M', T2.first_name) > '09' AND strftime('%m', T2.last_name) = 'Jones' LIMIT 1</sql>"
  },
  {
    "id": 1434,
    "db_id": "real_estate_rentals",
    "question": "What is the age range category of the user who made the first search?",
    "answer": "SELECT T2.age_category_description FROM `Addresses AS T1 INNER JOIN `User_Categories AS T2 ON T1.user_id = T2.user_id WHERE T1.`address_id` LIKE '%%Age_Category%' LIMIT 1</sql>"
  },
  {
    "id": 1435,
    "db_id": "real_estate_rentals",
    "question": "Return the age category for the user who made the earliest search.",
    "answer": "SELECT DISTINCT T1.age_category_description FROM users AS T1 INNER JOIN addresses AS T2 ON T1.user_id = T2.address_id ORDER BY strftime(date_on, 'UTC') - strftime('%Y', T2.property_timestamp) DESC LIMIT 3</sql>"
  },
  {
    "id": 1436,
    "db_id": "real_estate_rentals",
    "question": "Find the login names of all senior citizen users ordered by their first names.",
    "answer": "SELECT DISTINCT T1.login_name, T2.first_name, T2.last_name FROM Users AS T1 INNER JOIN Addresses AS T2 ON T1.user_id = T2.user_id WHERE T2.city != 'new york city' ORDER BY T1.first_name</sql>"
  },
  {
    "id": 1437,
    "db_id": "real_estate_rentals",
    "question": "What are the login names of all senior citizens, sorted by first name?",
    "answer": "SELECT DISTINCT T1.login_name FROM Users AS T1 INNER JOIN addresses AS T2 ON T1.user_address_id = T2.address_id WHERE strftime('%M', T2.first_name) <= 'Alice' AND strftime('%m', T2.middle_name) > 0 ORDER BY strftime('%M', T2.last_name)</sql>"
  },
  {
    "id": 1438,
    "db_id": "real_estate_rentals",
    "question": "How many searches do buyers make in total?",
    "answer": "SELECT COUNT(DISTINCT T1.user_id) FROM Addresses AS T1 INNER JOIN Features AS T2 ON T1.address_id = T2.address_id WHERE T2.`feature_name` LIKE '%Buyer%' AND T3.date_on_market IS NULL ORDER BY COUNT(T3.`property_type_code`) DESC LIMIT 0</sql>"
  },
  {
    "id": 1439,
    "db_id": "real_estate_rentals",
    "question": "Count the number of searches made by buyers.",
    "answer": "SELECT COUNT(T1.user_address_id) FROM `Addresses` AS T1 INNER JOIN `users` AS T2 ON T1.user_address_id = T2.login_name WHERE T2.first_name = 'M' AND T2.last_name = 'Z' GROUP BY T2.first_name, T2.last_name ORDER BY COUNT(T2.login_name) DESC LIMIT 1</sql>"
  },
  {
    "id": 1440,
    "db_id": "real_estate_rentals",
    "question": "When did the user with login name ratione register?",
    "answer": "SELECT DISTINCT T1.first_name, T2.last_name, T1.login_name FROM Users AS T1 INNER JOIN Addresses AS T2 ON T1.user_id = T2.user_id WHERE T2.owner_user_id = 'ratione'</sql>"
  },
  {
    "id": 1441,
    "db_id": "real_estate_rentals",
    "question": "What was the registration date for the user whose login name is ratione?",
    "answer": "SELECT DISTINCT T2.first_name, T2.middle_name FROM Users AS T1 INNER JOIN Addresses AS T2 ON T1.user_id = T2.address_id WHERE T1.login_name = 'ratio' GROUP BY T2.first_name ,T2.last_name ORDER BY T2.date_registered DESC LIMIT 1</sql>"
  },
  {
    "id": 1442,
    "db_id": "real_estate_rentals",
    "question": "List the first name, middle name and last name, and log in name of all the seller users, whose seller value is 1.",
    "answer": "SELECT DISTINCT T2.first_name, T2.middle_name, T2.last_name FROM Addresses AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T2.is_seller = 'true' AND T2.login_name = 'seller'</sql>"
  },
  {
    "id": 1443,
    "db_id": "real_estate_rentals",
    "question": "What are the first, middle, last, and login names for all users who are sellers?",
    "answer": "SELECT DISTINCT T1.first_name, T2.middle_name FROM Users AS T1 INNER JOIN Addresses AS T2 ON T1.user_id = T2.address_id INNER JOIN Addresses AS T3 ON T3.address_id = T2.line_2 WHERE T1.is_seller = 'Y' AND T3.lines IN ( SELECT T2.lines FROM Addresses AS T2 INNER JOIN Properties AS T3"
  },
  {
    "id": 1444,
    "db_id": "real_estate_rentals",
    "question": "Where do the Senior Citizens live? List building, street, and the city.",
    "answer": "SELECT DISTINCT T1.building, T1.street FROM Addresses AS T1 INNER JOIN addresses AS T2 ON T1.address_id = T2.user_address_id WHERE T1.age_category_description = 'Senior citizen' AND T2.city IS NOT NULL</sql>"
  },
  {
    "id": 1445,
    "db_id": "real_estate_rentals",
    "question": "What are the buildings, streets, and cities corresponding to the addresses of senior citizens?",
    "answer": "SELECT DISTINCT T1.line_2_number_locality, T2.city FROM addresses AS T1 INNER JOIN users AS T2 ON T1.user_address_id = T2.user_address_id WHERE T2.age = 65 AND T1.line_3_area_locality IN ( SELECT DISTINCT T2.town , T2.city FROM addresses AS T1 INNER JOIN users AS T2 ON T1"
  },
  {
    "id": 1446,
    "db_id": "real_estate_rentals",
    "question": "How many properties are there with at least 2 features?",
    "answer": "SELECT COUNT(T1.property_id) FROM Properties AS T1 INNER JOIN Features AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_address_id HAVING COUNT(T1.feature_name) >= 2</sql>"
  },
  {
    "id": 1447,
    "db_id": "real_estate_rentals",
    "question": "Count the number of properties with at least two features.",
    "answer": "SELECT COUNT(T1.property_id) FROM Properties AS T1 INNER JOIN Features AS T2 ON T1.property_id = T2.feature_id GROUP BY T1.property_address_id HAVING COUNT(T1.property_type_code) >= 2</sql>"
  },
  {
    "id": 1448,
    "db_id": "real_estate_rentals",
    "question": "How many photos does each property have?",
    "answer": "SELECT COUNT(T2.property_id) FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id GROUP BY T2.address_id ORDER BY COUNT(T1.property_images) DESC LIMIT 1</sql>"
  },
  {
    "id": 1449,
    "db_id": "real_estate_rentals",
    "question": "Count the number of property photos each property has by id.",
    "answer": "SELECT COUNT(T2.property_id) FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id GROUP BY T2.address_id ORDER BY COUNT(T1.property_details.property_name) DESC LIMIT 5</sql>"
  },
  {
    "id": 1450,
    "db_id": "real_estate_rentals",
    "question": "How many photos does each owner has of his or her properties? List user id and number of photos.",
    "answer": "SELECT DISTINCT T1.owner_user_id, COUNT(T2.`photo_id`) FROM `Users` AS T1 INNER JOIN `Properties` AS T2 ON T1.user_address_id = T2.property_id WHERE T2.property_name IN ('Apartment 5', 'apartment 6') GROUP BY T1.owner_user_id ORDER BY SUM(T2.`photo_id`) DESC LIMIT 3</"
  },
  {
    "id": 1451,
    "db_id": "real_estate_rentals",
    "question": "What are the user ids of property owners who have property photos, and how many do each of them have?",
    "answer": "SELECT COUNT(DISTINCT T1.user_id) FROM Addresses AS T1 INNER JOIN properties AS T2 ON T1.address_id = T2.property_id WHERE T2.PHOTO IS NOT NULL AND T1.line_4_area_locality != 'unknown'</sql>"
  },
  {
    "id": 1452,
    "db_id": "real_estate_rentals",
    "question": "What is the total max price of the properties owned by single mothers or students?",
    "answer": "SELECT COUNT(DISTINCT T1.property_id) FROM Addresses AS T1 INNER JOIN Property_Types AS T2 ON T1.property_type_code = T2.property_type_code WHERE T2.description = 'Student home' INTERSECT SELECT MAX(T2.`price`) FROM Addresses WHERE T1.user_id IS NULL OR strftime('%Y', T1.address_date) != '2016"
  },
  {
    "id": 1453,
    "db_id": "real_estate_rentals",
    "question": "Give the total max price corresponding to any properties owned by single mothers or students.",
    "answer": "SELECT MAX(price) FROM Addresses WHERE is_seller = 'single' GROUP BY user_address_id ORDER BY COUNT(user_address_id) DESC LIMIT 1</sql>"
  },
  {
    "id": 1454,
    "db_id": "real_estate_rentals",
    "question": "What are the date stamps and property names for each item of property history, ordered by date stamp?",
    "answer": "SELECT DISTINCT T2.first_name , T2.middle_name AS last_name , T3.property_details FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.address_id INNER JOIN `Feature` AS T3 ON T3.feature_id = T2.feature_id WHERE T2.last_name != 'North' ORDER BY T1.property_details DESC LIMIT 1"
  },
  {
    "id": 1455,
    "db_id": "real_estate_rentals",
    "question": "Return the date stamp and property name for each property history event, sorted by date stamp.",
    "answer": "SELECT strftime('%J', T2.DATE), T1.property_name FROM Addresses AS T1 INNER JOIN Property_History AS T2 ON T1.address_id = T2.address_id WHERE T2.date LIKE '%%' AND T1.user_id IN ( SELECT DISTINCT T2.owner_user_id ORDER BY strftime('%J', T1.`DATE`) ) GROUP BY strftime('%J',"
  },
  {
    "id": 1456,
    "db_id": "real_estate_rentals",
    "question": "What is the description of the most common property type? List the description and code.",
    "answer": "SELECT DISTINCT T2.description, T3.code FROM Addresses AS T1 INNER JOIN `Property_Types` AS T2 ON T1.property_type_id = T2.code GROUP BY T2.name ORDER BY COUNT(T1.address_id) DESC LIMIT 1</sql>"
  },
  {
    "id": 1457,
    "db_id": "real_estate_rentals",
    "question": "What is the most common property type, and what is its description.",
    "answer": "SELECT DISTINCT T1.property_type_description FROM properties AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id ORDER BY COUNT(T2.property_type_code) DESC LIMIT 1</sql>"
  },
  {
    "id": 1458,
    "db_id": "real_estate_rentals",
    "question": "What is the detailed description of the age category code 'Over 60'?",
    "answer": "SELECT T2.description FROM Addresses AS T1 INNER JOIN Age_Categories AS T2 ON T1.address_id = T2.address_id WHERE T1.property_type_code LIKE '%Over 60%' AND T2.age_category_description = 'D'</sql>"
  },
  {
    "id": 1459,
    "db_id": "real_estate_rentals",
    "question": "Give the category description of the age category 'Over 60'.",
    "answer": "SELECT DISTINCT T2.category_description FROM Addresses AS T1 INNER JOIN `Ref_Age_Categories` AS T2 ON T1.address_id = T2.age_category_code WHERE T1.user_category_name = 'Over 60'</sql>"
  },
  {
    "id": 1460,
    "db_id": "real_estate_rentals",
    "question": "What are the different room sizes, and how many of each are there?",
    "answer": "SELECT T2.size , COUNT(T1.room_type_description) AS num FROM Addresses AS T1 INNER JOIN Rooms AS T2 ON T1.address_id = T2.user_address_id GROUP BY T1.`size`,  T1.room_type_description ORDER BY SUM(CASE WHEN T2.size IN ( ) THEN 1 ELSE 0 END) DESC LIMIT 1</sql>"
  },
  {
    "id": 1461,
    "db_id": "real_estate_rentals",
    "question": "Return the number of rooms with each different room size.",
    "answer": "SELECT COUNT(DISTINCT T1.room_type_description) FROM `addresses AS T1 INNER JOIN property_types AS T2 ON T1.property_type_id = T2.property_type_id WHERE T1.zip_postcode = '54079' AND strftime('%J', T1.date_on_market) < strftime('%Y', T1.date_off_market))</sql"
  },
  {
    "id": 1462,
    "db_id": "real_estate_rentals",
    "question": "In which country does the user with first name Robbie live?",
    "answer": "SELECT DISTINCT T2.country FROM Addresses AS T1 INNER JOIN users AS T2 ON T1.user_id = T2.user_id WHERE T1.line_3_locality = 'city' AND T2.login_name = 'robbie'</sql>"
  },
  {
    "id": 1463,
    "db_id": "real_estate_rentals",
    "question": "Return the country in which the user with first name Robbie lives.",
    "answer": "SELECT DISTINCT T2.country FROM Addresses AS T1 INNER JOIN users AS T2 ON T1.user_id = T2.user_id WHERE T1.city = 'robby' AND T1.first_name = 'Robinson'</sql>"
  },
  {
    "id": 1464,
    "db_id": "real_estate_rentals",
    "question": "What are the first, middle and last names of users who own the property they live in?",
    "answer": "SELECT DISTINCT T1.first_name , T2.middle_name FROM Addresses AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id ORDER BY T1.line_3_locality, strftime('%Y', T2.`date_registered`) DESC LIMIT 1</sql>"
  },
  {
    "id": 1465,
    "db_id": "real_estate_rentals",
    "question": "Return the full names of users who live in properties that they own.",
    "answer": "SELECT DISTINCT T1.first_name, T2.middle_name, T1.last_name FROM Users AS T1 INNER JOIN Properties AS T2 ON T1.user_id = T2.property_id WHERE T2.owner_user_id IS NOT NULL ORDER BY T1.date_on_market DESC LIMIT 1</sql>"
  },
  {
    "id": 1466,
    "db_id": "real_estate_rentals",
    "question": "List the search content of the users who do not own a single property.",
    "answer": "SELECT T2.first_name, T1.last_name FROM Users AS T1 INNER JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id WHERE T2.property_address_id IS NULL ORDER BY T3.first_name, T3.middle_name, T4.last_name LIMIT 5</sql>"
  },
  {
    "id": 1467,
    "db_id": "real_estate_rentals",
    "question": "What search strings were entered by users who do not own any properties?",
    "answer": "SELECT T2.login_name FROM Addresses AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.property_type_description IS NULL AND T2.other_address_details IS NULL OR T2.other_address_details IS NULL</sql>"
  },
  {
    "id": 1468,
    "db_id": "real_estate_rentals",
    "question": "List the last names and ids of users who have at least 2 properties and searched at most twice.",
    "answer": "SELECT DISTINCT T1.first_name, T1.middle_name, T2.last_name FROM Users AS T1 INNER JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id WHERE strftime(STRFTIME('%Y', T1.date_registered), '%M') > 6 AND strftime(STRFTIME('%J', T1.date_on_market), '%B"
  },
  {
    "id": 1469,
    "db_id": "real_estate_rentals",
    "question": "What are the last names and ids of users who have searched two or fewer times, and own two or more properties?",
    "answer": "SELECT DISTINCT T1.first_name , T2.last_name, T1.user_address_id FROM Users AS T1 INNER JOIN Addresses AS T2 ON T1.user_address_id = T2.address_id WHERE (T1.login_name = 'rishabh') GROUP BY T1.first_name , T1.last_name ORDER BY COUNT(T1.login_name) LIMIT 2</sql"
  },
  {
    "id": 1470,
    "db_id": "bike_racing",
    "question": "How many bikes are heavier than 780 grams?",
    "answer": "SELECT COUNT(T2.bicycle_id) FROM 'cyclists' AS T1 INNER JOIN \"bike\" AS T2 ON T1.id = T2.id WHERE T1.`weight` > 780 AND strftime('%Y', T2.purchase_year) < '1946'</sql>"
  },
  {
    "id": 1471,
    "db_id": "bike_racing",
    "question": "List the product names and weights of the bikes in ascending order of price.",
    "answer": "SELECT DISTINCT T1.product_name, T2.`price` FROM ( SELECT distinct T2.`product_name`, SUM(T3.price) AS total FROM `bike` AS T1 INNER JOIN `cyclist` AS T2 ON T1.id = T2.id ORDER BY T2.primary_key DESC LIMIT 1) AS T3 WHERE T3.total > T3.total</sql>"
  },
  {
    "id": 1472,
    "db_id": "bike_racing",
    "question": "List the heat, name, and nation for all the cyclists.",
    "answer": "SELECT DISTINCT T1.name, T2.nation, T3.`cyclist_id`, SUM(T3.result) AS total FROM `bike` AS T1 INNER JOIN cyclists AS T2 ON T1.cyclist_id = T2.id WHERE T2.nation IS 'ja' GROUP BY T1.`product_name`, T2.nation ORDER BY SUM(T1.price) DESC LIMIT 1</"
  },
  {
    "id": 1473,
    "db_id": "bike_racing",
    "question": "What are the maximum and minimum weight of all bikes?",
    "answer": "SELECT SUM(max(weight)) - SUM(min(weight)), MAX(weight), MIN(weight) FROM bike GROUP BY product_name ORDER BY SUM(weight) DESC LIMIT 1</sql>"
  },
  {
    "id": 1474,
    "db_id": "bike_racing",
    "question": "What is the average price of the bikes made of material 'Carbon CC'?",
    "answer": "SELECT SUM(CAST(SUM(CASE WHEN product_name = 'CC' THEN 1 ELSE 0 END)) AS REAL)) / COUNT(DISTINCT T2.bike_id) AS price FROM `cyclists` AS T1 INNER JOIN `bikes` AS T2 ON T1.cyclist_id = T2.bicycle_id GROUP BY T2.material WHERE product_name IN ('Carbon CC', 'Dur"
  },
  {
    "id": 1475,
    "db_id": "bike_racing",
    "question": "What are the name and result of the cyclists not from 'Russia' ?",
    "answer": "SELECT DISTINCT T2.name, T3.result FROM \"cyclists\" AS T1 INNER JOIN \"bike_owners\" AS T2 ON T1.id = T2.cycleuser_id WHERE T1.nation != 'ru' AND T1.cyclist_id NOT IN (SELECT DISTINCT T2.cycleuser_id FROM cyclists AS T3 WHERE T3.country == 'ru')</sql>"
  },
  {
    "id": 1476,
    "db_id": "bike_racing",
    "question": "What are the distinct ids and product names of the bikes that are purchased after year 2015?",
    "answer": "SELECT T1.id, T1.product_name FROM 'bike' AS T1 INNER JOIN 'cyclists_own_bikes' AS T2 ON T1.id = T2.cyclist_id WHERE T2.`purchase_year` > 2015 ORDER BY T1.PurchaseYear DESC LIMIT 1</sql>"
  },
  {
    "id": 1477,
    "db_id": "bike_racing",
    "question": "What are the ids and names of racing bikes that are purchased by at least 4 cyclists?",
    "answer": "SELECT DISTINCT T2.id, T3.name FROM \"cyclists_own_bikes\" AS T1 INNER JOIN \"bike\" AS T2 ON T1.cyclist_id = T2.id INNER JOIN 'bike' AS T3 ON T1.bike_id = T3.id WHERE T1.primary KEY('cycle ID', 'PURCHASE_YEAR') BETWEEN 4 AND 5"
  },
  {
    "id": 1478,
    "db_id": "bike_racing",
    "question": "What are the id and name of the cyclist who owns the most bikes?",
    "answer": "SELECT DISTINCT T1.id, T1.name FROM \"cyclists\" AS T1 INNER JOIN \"bike_owners\" AS T2 ON T1.id = T2.riding_id GROUP BY T1.name ORDER BY SUM(T2.purchase_year) DESC LIMIT 1</sql>"
  },
  {
    "id": 1479,
    "db_id": "bike_racing",
    "question": "What are the distinct product names of bikes owned by cyclists from 'Russia' or cyclists from 'Great Britain'?",
    "answer": "SELECT T1.product_name FROM \"cyclist\" AS T1 INNER JOIN \"bike\" AS T2 ON T1.id = T2.cyclist_id WHERE T2.country IN ('RUSSIA', 'GBR') GROUP BY T1.product_name ORDER BY DISTINCT T1.product_name LIMIT 1</sql>"
  },
  {
    "id": 1480,
    "db_id": "bike_racing",
    "question": "How many different levels of heat are there for the cyclists?",
    "answer": "SELECT SUM(heat) FROM \"cyclists\" WHERE country = 'sweden' GROUP BY country ORDER BY COUNT(DISTINCT T2.name) DESC LIMIT 1</sql>"
  },
  {
    "id": 1481,
    "db_id": "bike_racing",
    "question": "How many cyclists did not purchase any bike after year 2015?",
    "answer": "SELECT COUNT(DISTINCT T1.cyclist_id) FROM \"cycle\" AS T1 INNER JOIN \"bike\" AS T2 ON T1.id = T2.bicycle_id WHERE T2.purchase_year IS NULL GROUP BY T1.cyclist_id ORDER BY COUNT(T2.bicycle_id) DESC LIMIT 1</sql>"
  },
  {
    "id": 1482,
    "db_id": "bike_racing",
    "question": "What are the names of distinct racing bikes that are purchased by the cyclists with better results than '4:21.558' ?",
    "answer": "SELECT T1.`name`, T3.`result` FROM `cyclist` AS T1 INNER JOIN `bike` AS T2 ON T1.id = T2.cycle_id INNER JOIN `bike` AS T3 ON T3.bike_id = T2.bike WHERE T1.nation = 'american' AND (T2.result IS NULL OR T3.weight < 4500) GROUP BY T1.`"
  },
  {
    "id": 1483,
    "db_id": "bike_racing",
    "question": "List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Antonio Tauler'.",
    "answer": "SELECT DISTINCT T1.name, T2.price FROM \"bike\" AS T1 INNER JOIN \"cyclist\" AS T2 ON T1.id = T2.id INNER JOIN cyclists_own_bikes AS T3 ON T1.id = T3.cycler_id WHERE T3.name = 'Bradley Wiggins' AND T3.name = 'Antonio Tauler'</sql>"
  },
  {
    "id": 1484,
    "db_id": "bike_racing",
    "question": "Show the name, nation and result for the cyclists who did not purchase any racing bike.",
    "answer": "SELECT DISTINCT T2.name, T3.nation, T1.`cyclist_id` FROM `bike` AS T1 INNER JOIN `cyclists` AS T2 ON t1.id = T2.cyclerid WHERE not T1.purchase_year IN (-1) GROUP BY DISTINCT T2.name UNION ALL SELECT T1.name, T3.nation, T2.`cyclist_id` FROM"
  },
  {
    "id": 1485,
    "db_id": "bike_racing",
    "question": "What are the names of the bikes that have substring 'fiber' in their material?",
    "answer": "SELECT DISTINCT T1.name FROM \"bikes\" AS T1 INNER JOIN \"bike_owners\" AS T2 ON T1.id = T2.cyclist_id WHERE strftime('%Y', T2.`purchase_year`) LIKE 'fiber%'</sql>"
  },
  {
    "id": 1486,
    "db_id": "bike_racing",
    "question": "How many bikes does each cyclist own? Order by cyclist id.",
    "answer": "SELECT SUM(b.weight), COUNT(T1.cyclist_id), T2.primary_key AS total FROM bike AS T1 INNER JOIN cyclists_own_bikes AS T2 ON T1.bike_id = T2.cyclist_id WHERE T2.nation = 'England' ORDER BY T2.`cyclist_id` DESC LIMIT 3</sql>"
  },
  {
    "id": 1487,
    "db_id": "bakery_1",
    "question": "What is the most expensive cake and its flavor?",
    "answer": "SELECT MAX(T1.Price), T2.`Item` FROM receipts AS T1 INNER JOIN items AS T2 ON T1.ReceiptID = T2.Id WHERE T1.Flavor = 'caramel' GROUP BY T1.`ReceiptNumber`, T2.`Item`.Taste ORDER BY ( SELECT MAX(T2.price) FROM receipts AS T1 INNER JOIN items AS T2 ON T1.ReceiptID = T"
  },
  {
    "id": 1488,
    "db_id": "bakery_1",
    "question": "Give the id and flavor of the most expensive cake.",
    "answer": "SELECT T1.Flavor, T2.Food FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T2.Price > 100 ORDER BY T2.Quantity DESC LIMIT 1</sql>"
  },
  {
    "id": 1489,
    "db_id": "bakery_1",
    "question": "What is the cheapest cookie and its flavor?",
    "answer": "SELECT T1.Price FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Ordinal WHERE T1.Flavor = 'Cheesecake' AND T2.ReceiptNumber LIKE '% $%' ORDER BY T2.Date DESC LIMIT 1</sql>"
  },
  {
    "id": 1490,
    "db_id": "bakery_1",
    "question": "What is the id and flavor of the cheapest cookie?",
    "answer": "SELECT T1.Id, T2.Flavor FROM receipts AS T1 INNER JOIN items AS T2 ON T1.ReceiptID = T2.ReceiptNumber WHERE T1.Item LIKE '% chocolate%' ORDER BY strftime(date, 'medium') - strftime('%Y',  receipt) / 30 LIMIT 1</sql>"
  },
  {
    "id": 1491,
    "db_id": "bakery_1",
    "question": "Find the ids of goods that have apple flavor.",
    "answer": "SELECT DISTINCT item.Item FROM items AS T1 INNER JOIN goods AS T2 ON T1.item = T2.Item WHERE T2.Flavor = 'Apple'</sql>"
  },
  {
    "id": 1492,
    "db_id": "bakery_1",
    "question": "What are the ids with apple flavor?",
    "answer": "SELECT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Item = T2.item WHERE T2.Flavor = 'Apple'</sql>"
  },
  {
    "id": 1493,
    "db_id": "bakery_1",
    "question": "What are the ids of goods that cost less than 3 dollars?",
    "answer": "SELECT DISTINCT T2.Item FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Receipt = T2.Receipt WHERE T1.Price <= 300 LIMIT 1</sql>"
  },
  {
    "id": 1494,
    "db_id": "bakery_1",
    "question": "Give the ids of goods that cost less than 3 dollars.",
    "answer": "SELECT DISTINCT T2.Item FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Receipt = T2.Receipt WHERE T1.Price <= 3 AND T1.Flavor != 'unknown' ORDER BY T1.Price LIMIT 1</sql>"
  },
  {
    "id": 1495,
    "db_id": "bakery_1",
    "question": "List the distinct ids of all customers who bought a cake with lemon flavor?",
    "answer": "SELECT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Item = T2.Food WHERE T2.Flavor LIKE '%lemony%'</sql>"
  },
  {
    "id": 1496,
    "db_id": "bakery_1",
    "question": "What are the distinct ids of customers who bought lemon flavored cake?",
    "answer": "SELECT T1.Item FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T2.Flavor = 'lemon' ORDER BY COUNT(T2.CustomerId) DESC LIMIT 1</sql>"
  },
  {
    "id": 1497,
    "db_id": "bakery_1",
    "question": "For each type of food, tell me how many customers have ever bought it.",
    "answer": "SELECT DISTINCT COUNT(T2.Item), T1.\"LastName\" , T3.\"FirstName\" FROM \"items AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.ReceiptNumber WHERE T2.Flavor = 'Burger' AND T3.\"FirstName\" = T2.CustomerId GROUP BY DISTINCT T2.Item ORDER BY COUNT(T2.Item) DESC LIMIT 1</sql>"
  },
  {
    "id": 1498,
    "db_id": "bakery_1",
    "question": "How many customers have bought each food?",
    "answer": "SELECT DISTINCT COUNT(T1.CustomerId), T2.Item FROM `items` AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T2.Food IN ('Apple', 'Orange') GROUP BY T1.Item ORDER BY COUNT(DISTINCT T1.CustomerId)</sql>"
  },
  {
    "id": 1499,
    "db_id": "bakery_1",
    "question": "Find the id of customers who shopped at the bakery at least 15 times.",
    "answer": "SELECT T3.customer_id FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Item = T2.item WHERE T1.Date BETWEEN '2012-07-04' AND '2020-09-16' AND T2.Food > 15</sql>"
  },
  {
    "id": 1500,
    "db_id": "bakery_1",
    "question": "What are the customer ids of customers who have at least 15 receipts?",
    "answer": "SELECT T2.customer_id FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Item WHERE T1.quantity > 15 GROUP BY T2.ReceiptNumber ORDER BY COUNT(T3.CustomerId) DESC LIMIT 1</sql>"
  },
  {
    "id": 1501,
    "db_id": "bakery_1",
    "question": "What is the last name of the customers who shopped at the bakery more than 10 times?",
    "answer": "SELECT DISTINCT T2.LastName FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T1.Price BETWEEN 8 AND 3465 AND T1.Flavor LIKE 'Bakery%' GROUP BY T2.CustomerId ORDER BY COUNT(T2.ReceiptNumber) DESC LIMIT 1</sql>"
  },
  {
    "id": 1502,
    "db_id": "bakery_1",
    "question": "Give the last names of customers who have been to the bakery more than 10 times?",
    "answer": "SELECT DISTINCT T2.LastName FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T1.Price BETWEEN 60 AND 75 ORDER BY T1.Date - ( SELECT MAX(T3.Date) FROM receipts AS T3 INNER JOIN customers AS T4 ON T2.Item = T3.Id WHERE T4.LastName = 'A' GROUP BY"
  },
  {
    "id": 1503,
    "db_id": "bakery_1",
    "question": "How many types of Cake does this bakery sell?",
    "answer": "SELECT COUNT(DISTINCT T2.Item), SUM(T1.Price / 50) AS num FROM items AS T1 INNER JOIN receipts AS T2 ON T1.ReceiptID = T2.ReceiptNumber GROUP BY T2.Flavor ORDER BY COUNT(DISTINCT T2.item) DESC LIMIT 3</sql>"
  },
  {
    "id": 1504,
    "db_id": "bakery_1",
    "question": "Count the number of types of cake this bakery sells.",
    "answer": "SELECT COUNT(DISTINCT T2.item), T1.`ReceiptNumber`, T1.pricerange FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Flavor WHERE T2.Food = 'cake' AND T2.`Ordinal` BETWEEN 50 AND 70 GROUP BY T1.receiptNumber, T1.item ORDER BY COUNT(DISTINCT T"
  },
  {
    "id": 1505,
    "db_id": "bakery_1",
    "question": "List all the flavors of Croissant available in this bakery.",
    "answer": "SELECT T1.Flavor FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T2.Ordinal = 439</sql>"
  },
  {
    "id": 1506,
    "db_id": "bakery_1",
    "question": "What are all the flavors of croissant?",
    "answer": "SELECT T1.Flavor FROM items AS T1 INNER JOIN goods AS T2 ON T1.Item = T2.Item WHERE T2.Food = 'croissant' GROUP BY T1.Flavor ORDER BY COUNT(T1.Item) DESC LIMIT 1</sql>"
  },
  {
    "id": 1507,
    "db_id": "bakery_1",
    "question": "Give me a list of all the distinct items bought by the customer number 15.",
    "answer": "SELECT T3.Item FROM receipts AS T1 INNER JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE T1.CustomerId = '15'</sql>"
  },
  {
    "id": 1508,
    "db_id": "bakery_1",
    "question": "What are all the distinct items bought by customer 15?",
    "answer": "SELECT DISTINCT T2.Item FROM receipts AS T1 INNER JOIN products AS T2 ON T1.ReceiptNumber = T2.ProductId WHERE T1.CustomerId = 15 GROUP BY T2.Flavor ORDER BY T3.ID DESC LIMIT 1</sql>"
  },
  {
    "id": 1509,
    "db_id": "bakery_1",
    "question": "For each type of food, what are the average, maximum and minimum price?",
    "answer": "SELECT AVG(T2.Price), MAX(T1.Price), MIN(T1.Price) FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T1.food = 'chicken' GROUP BY T1.item ORDER BY T1.`total_price` DESC LIMIT 3</sql>"
  },
  {
    "id": 1510,
    "db_id": "bakery_1",
    "question": "What are the average, minimum and maximum prices for each food?",
    "answer": "SELECT T1.`Price`, SUM(T2.`Price`) FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T2.Ordinal = 0 GROUP BY T1.Flavor ORDER BY T1.Food DESC LIMIT 4</sql>"
  },
  {
    "id": 1511,
    "db_id": "bakery_1",
    "question": "Find the receipt numbers where both Cake and Cookie were bought.",
    "answer": "SELECT DISTINCT T2.ReceiptNumber FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Ordinal WHERE T1.Flavor LIKE '%Cookie%' AND T1.Food = 'Cake'</sql>"
  },
  {
    "id": 1512,
    "db_id": "bakery_1",
    "question": "What are the receipt numbers for instances where both cakes and cookies were purchased?",
    "answer": "SELECT T1.ReceiptNumber FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Ordinal WHERE T1.Flavor LIKE '%cookie%' AND T2.Food LIKE '%cake%' GROUP BY T1.ReceiptNumber ORDER BY SUM(T1.Receipt) DESC LIMIT 1</sql>"
  },
  {
    "id": 1513,
    "db_id": "bakery_1",
    "question": "Find all the receipt numbers in which customer with last name LOGAN purchased Croissant.",
    "answer": "SELECT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN customers AS T2 ON T1.CustomerId = T2.Id WHERE T2.LastName = 'LOGAN' AND strftime('%Y', T1.Date) - strftime('%Y', T2.ReceiptDate) < 3</sql>"
  },
  {
    "id": 1514,
    "db_id": "bakery_1",
    "question": "What are the receipt numbers for a customer with the last name Logan who purchased a croissant?",
    "answer": "SELECT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Item = T2.Food WHERE T2.Flavor = 'croissant' ORDER BY T2.Price DESC LIMIT 3</sql>"
  },
  {
    "id": 1515,
    "db_id": "bakery_1",
    "question": "What is the receipt number and date of the receipt in which the most expensive item was bought?",
    "answer": "SELECT MAX(ReceiptNumber), MIN(Date) FROM items WHERE price > ( SELECT T2.Price ) GROUP BY ReceiptNumber ORDER BY SUM(T1.price) DESC LIMIT 1</sql>"
  },
  {
    "id": 1516,
    "db_id": "bakery_1",
    "question": "What is the receipt number and date corresponding to the receipt for which the most expensive item was purchased?",
    "answer": "SELECT MAX(ReceiptNumber), MIN(Date) FROM items WHERE price > 120 GROUP BY receipt ORDER BY COUNT(receipt) DESC LIMIT 1</sql>"
  },
  {
    "id": 1517,
    "db_id": "bakery_1",
    "question": "What is the item that was bought the least number of times?",
    "answer": "SELECT T1.Item FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T1.Price IS NULL GROUP BY T1.item ORDER BY COUNT(T1.Receipt) INTERSECT SELECT T1.item FROM items AS T1 INNER JOIN receipts AS T2 ON T2.ReceiptID = T1.ReceiptID WHERE T2.price IS NULL GROUP BY T1."
  },
  {
    "id": 1518,
    "db_id": "bakery_1",
    "question": "Which item was bought the fewest times?",
    "answer": "SELECT T1.Item FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T1.Price BETWEEN 500 AND 1000 ORDER BY COUNT(T2.Date) LIMIT 1</sql>"
  },
  {
    "id": 1519,
    "db_id": "bakery_1",
    "question": "How many goods are available for each food type?",
    "answer": "SELECT COUNT(DISTINCT T2.Item), SUM(DISTINCT T2.Price) FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Receipt = T2.Receipt WHERE T1.Foodtype IN ('gluten free', 'vegetarian')</sql>"
  },
  {
    "id": 1520,
    "db_id": "bakery_1",
    "question": "Count the number of goods for each food type.",
    "answer": "SELECT SUM(IIF(T2.foodtype = 'Fresh', T1.food, 0)) / COUNT(DISTINCT T2.foodtype) FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T2.itemid LIKE '%Corn%'</sql>"
  },
  {
    "id": 1521,
    "db_id": "bakery_1",
    "question": "What is the average price for each food type?",
    "answer": "SELECT T1.Price / COUNT(DISTINCT T2.`Item`) AS price , strftime('%Y', T2.Receipt), strftime('%M', T2.Receipt) FROM items AS T1 INNER JOIN goods AS T2 ON T1.Item = T2.Food WHERE T1.foodtype IN ('apple', 'peach', 'orange') AND T2.Price IS NOT NULL GROUP BY T1.fo"
  },
  {
    "id": 1522,
    "db_id": "bakery_1",
    "question": "Give the average price for each food type.",
    "answer": "SELECT T1.Price / COUNT(DISTINCT T2.`Item`) AS sum , CAST((SUM(T1.price) AS REAL) * 1000) AS per FROM products AS T1 INNER JOIN items AS T2 ON T2.ProductId = T1.ProductId GROUP BY T1.`FoodType` ORDER BY T1.Price / COUNT(DISTINCT T2.`Item`) DESC LIMIT 3</sql>"
  },
  {
    "id": 1523,
    "db_id": "bakery_1",
    "question": "What are ids of the goods that have Apricot flavor and are cheaper than 5 dollars?",
    "answer": "SELECT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Item = T2.item WHERE T2.Flavor = 'Apricot' AND T1.Price < 500</sql>"
  },
  {
    "id": 1524,
    "db_id": "bakery_1",
    "question": "Give the ids for goods that have Apricot flavor and have a price lower than 5 dollars.",
    "answer": "SELECT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Item = T2.Item WHERE T2.Flavor = 'Apricot' ORDER BY T1.Price LIMIT 4</sql>"
  },
  {
    "id": 1525,
    "db_id": "bakery_1",
    "question": "Find flavor of cakes that cost more than 10 dollars.",
    "answer": "SELECT T3.Flavor FROM receipts AS T1 INNER JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE T2.Price > 10 ORDER BY T2.Flavor DESC LIMIT 1</sql>"
  },
  {
    "id": 1526,
    "db_id": "bakery_1",
    "question": "What are the flavors of cakes that cost more than 10 dollars?",
    "answer": "SELECT DISTINCT T2.Flavor FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Item = T2.Ordinal WHERE T1.Price > 10</sql>"
  },
  {
    "id": 1527,
    "db_id": "bakery_1",
    "question": "Give me the distinct id and price for all goods whose price is below the average of all goods?",
    "answer": "SELECT T1.Id, SUM(T2.Price) FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T2.Prices LIKE '%%' GROUP BY T1.Flavor ORDER BY T1.Price DESC LIMIT 1</sql>"
  },
  {
    "id": 1528,
    "db_id": "bakery_1",
    "question": "What are the distinct ids and prices for goods that cost less than the average good?",
    "answer": "SELECT T1.Id , SUM(T2.Price) AS total FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T1.price BETWEEN 0 AND 639 IN ORDER GROUP BY T1.Id ORDER BY sum(T1.`Pricing`) / count(*) DESC LIMIT 2</sql>"
  },
  {
    "id": 1529,
    "db_id": "bakery_1",
    "question": "What are the distinct ids of all goods that are cheaper than some goods of type Tart?",
    "answer": "SELECT DISTINCT T2.Item, MAX(T1.`ReceiptNumber`) FROM ( SELECT T2.`Ordinal`, COUNT(DISTINCT T2.`Item`) AS `NumOfGoods` FROM items AS T1 INNER JOIN receipts AS T2 ON T1.id = T2.Receipt_No GROUP BY T2.Item ORDER BY T1.`ReceiptNumber` DESC LIMIT 1</sql>"
  },
  {
    "id": 1530,
    "db_id": "bakery_1",
    "question": "Give the distinct ids for goods that cost less than any Tart.",
    "answer": "SELECT DISTINCT T2.Item FROM items AS T1 INNER JOIN receipts AS T2 ON T1.item = T2.Receipt WHERE T2.Price < ( SELECT MAX(T1.Price) FROM goods AS T3 WHERE T1.Flavor = 'tart' LIMIT 1 )</sql>"
  },
  {
    "id": 1531,
    "db_id": "bakery_1",
    "question": "List distinct receipt numbers for which someone bought a good that costs more than 13 dollars.",
    "answer": "SELECT DISTINCT T2.ReceiptNumber FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Item WHERE T1.Price > 13</sql>"
  },
  {
    "id": 1532,
    "db_id": "bakery_1",
    "question": "What distinct receipt numbers correspond to someone who bought a good that costs more than 13 dollars?",
    "answer": "SELECT T2.ReceiptNumber FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Item WHERE T1.Price > 13 ORDER BY T2.`ReceiptNumber` DESC LIMIT 1</sql>"
  },
  {
    "id": 1533,
    "db_id": "bakery_1",
    "question": "On which date did some customer buy a good that costs more than 15 dollars?",
    "answer": "SELECT strftime('%J', T2.Date), (T2.Price - strftime('%Y', T2.Date)) / 100 AS total FROM receipts AS T1 INNER JOIN goods AS T2 ON T1.receipt_id = T2.Id ORDER BY T1.Total DESC LIMIT 1</sql>"
  },
  {
    "id": 1534,
    "db_id": "bakery_1",
    "question": "Which date corresponds to when a customer purchased a good costing over 15 dollars?",
    "answer": "SELECT strftime('%J', T2.Receipt), strftime('%d', T2.Receipt) - strftime('%Y', T2.Receipt) AS days, CAST(SUM(CASE WHEN SUBSTR(`T3`.`Price`, 1, 14) > '07965' THEN 0 ELSE NULL END)) * 100 AS mins FROM receipts AS T1 INNER JOIN items AS"
  },
  {
    "id": 1535,
    "db_id": "bakery_1",
    "question": "Give me the list of ids of all goods whose id has \"APP\".",
    "answer": "SELECT T1.Item FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T1.Flavor = 'App'</sql>"
  },
  {
    "id": 1536,
    "db_id": "bakery_1",
    "question": "What are all the ids of goods with an id which contains \"APP\"?",
    "answer": "SELECT T1.Item FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T1.Flavor LIKE '%app%' GROUP BY T2.ReceiptNumber ORDER BY T2.Receipt - 50 DESC LIMIT 1</sql>"
  },
  {
    "id": 1537,
    "db_id": "bakery_1",
    "question": "Which good has \"70\" in its id? And what is its price?",
    "answer": "SELECT DISTINCT T2.Item, T3.Price FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.ReceiptNumber INNER JOIN goods AS T3 ON T1.Ordinal = T2.Ordinal WHERE T1.Flavor LIKE '70%'</sql>"
  },
  {
    "id": 1538,
    "db_id": "bakery_1",
    "question": "What are the id and price for the good with \"70\" in its id?",
    "answer": "SELECT DISTINCT T2.Item.Flavor,  T2.price FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T2.Ordinal BETWEEN 50 AND 70</sql>"
  },
  {
    "id": 1539,
    "db_id": "bakery_1",
    "question": "List the last names of all customers in an alphabetical order.",
    "answer": "SELECT DISTINCT T2.LastName FROM receipts AS T1 INNER JOIN customers AS T2 ON T1.CustomerId = T2.Id ORDER BY T2.Flavor DESC</sql>"
  },
  {
    "id": 1540,
    "db_id": "bakery_1",
    "question": "What are the last names of the customers in alphabetical order?",
    "answer": "SELECT T1.LastName FROM customers AS T1 INNER JOIN items AS T2 ON T1.id = T2.Item ORDER BY T1.LastName ASC LIMIT 1</sql>"
  },
  {
    "id": 1541,
    "db_id": "bakery_1",
    "question": "Return the ordered list of all good ids.",
    "answer": "SELECT DISTINCT T2.Item FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Receipt = T2.Receipt WHERE T1.Flavor = 'Apple' ORDER BY T2.Ordinal ASC</sql>"
  },
  {
    "id": 1542,
    "db_id": "bakery_1",
    "question": "Order the distinct good ids.",
    "answer": "SELECT DISTINCT T2.Item FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Receipt = T2.Receipt WHERE T1.Flavor IS NOT NULL AND T1.Id IN ( SELECT DISTINCT T1.Item FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Receipt = T2.Receipt WHERE T1.Flavor IS NOT NULL GROUP BY T2.Item ORDER"
  },
  {
    "id": 1543,
    "db_id": "bakery_1",
    "question": "Find all receipts in which either apple flavor pie was bought or customer id 12 shopped.",
    "answer": "SELECT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Item = T2.Ordinal WHERE T2.Flavor LIKE '%Apple%'</sql>"
  },
  {
    "id": 1544,
    "db_id": "bakery_1",
    "question": "What are the receipt numbers for which either an apple flavor pie was purchased or the customer with id 12 shopped?",
    "answer": "SELECT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Item = T2.Food WHERE T2.Flavor LIKE '%apple%' AND strftime('%J', T1.Date) > '2021-09-30' ORDER BY strftime('%J', T1.ReceiptNumber) = '63784723596787"
  },
  {
    "id": 1545,
    "db_id": "bakery_1",
    "question": "Find all receipts which has the latest date. Also tell me that date.",
    "answer": "SELECT T1.\"ReceiptNumber\", T2.\"Date\" FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Item = T2.Item ORDER BY T2.PrincipalDate DESC LIMIT 1</sql>"
  },
  {
    "id": 1546,
    "db_id": "bakery_1",
    "question": "What is the receipt number with the latest date, and what is that date?",
    "answer": "SELECT DISTINCT T2.ReceiptNumber FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Ordinal WHERE T1.Date BETWEEN '2020-09-06' AND '2021-07-31'</sql>"
  },
  {
    "id": 1547,
    "db_id": "bakery_1",
    "question": "Find all receipts which either has the earliest date or has a good with price above 10.",
    "answer": "SELECT T3.ReceiptNumber FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Id WHERE T2.Date BETWEEN '2022-06-17' AND '2022-08-09'</sql>"
  },
  {
    "id": 1548,
    "db_id": "bakery_1",
    "question": "What are all the receipt numbers that have a good with a price above 10 or have the earliest date?",
    "answer": "SELECT T3.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Item = T2.Item WHERE T2.Price > 10 ORDER BY strftime(T1.Date, 'YYYY-MM') LIMIT 1</sql>"
  },
  {
    "id": 1549,
    "db_id": "bakery_1",
    "question": "What are the ids of Cookie and Cake that cost between 3 and 7 dollars.",
    "answer": "SELECT DISTINCT T2.Item FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Receipt = T2.Receipt WHERE T1.Price BETWEEN 3 AND 7 ORDER BY T2.CustomerId</sql>"
  },
  {
    "id": 1550,
    "db_id": "bakery_1",
    "question": "Give the ids of Cookies or Cakes that cost between 3 and 7 dollars.",
    "answer": "SELECT DISTINCT T2.Item FROM receipts AS T1 INNER JOIN \"items\" AS T2 ON T1.Receipt = T2.Id WHERE T1.Price BETWEEN '3' AND '7'</sql>"
  },
  {
    "id": 1551,
    "db_id": "bakery_1",
    "question": "Find the first name and last name of a customer who visited on the earliest date.",
    "answer": "SELECT DISTINCT T2.firstname, T2.lastname FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Receipt = T2.id WHERE T2.receiptdate BETWEEN '2013-04-07' AND '2016-11-28'</sql>"
  },
  {
    "id": 1552,
    "db_id": "bakery_1",
    "question": "What is the full name of the customer who visited on the earliest date?",
    "answer": "SELECT DISTINCT T1.LastName, T2.firstname FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T1.ReceiptDate BETWEEN '2013-04-07 06:39:30' AND '2014-08-31 09:05:35' ORDER BY T2.date DESC"
  },
  {
    "id": 1553,
    "db_id": "bakery_1",
    "question": "What is average price of goods whose flavor is blackberry or blueberry?",
    "answer": "SELECT T1.Price / COUNT(DISTINCT T2.`Item`) AS num FROM ( SELECT T3.Flavor, SUM(T3.Price) AS num FROM receipts AS T1 INNER JOIN items AS T2 ON T2.Receipt = T1.Receipt WHERE T3.Food IN (\"Blackberry\", \"Blueberry\") GROUP BY T1.`Item` ORDER BY ( SELECT AVG(SUM(price)) FROM receipts WHERE"
  },
  {
    "id": 1554,
    "db_id": "bakery_1",
    "question": "What are the average prices of goods with blackberry or blueberry flavor?",
    "answer": "SELECT AVG(Price), T2.Flavor FROM receipts AS T1 INNER JOIN items AS T2 ON T1.ReceiptID = T2.Item WHERE T2.food ~ 'blackberry' OR T2.food ~ 'blueberry'</sql>"
  },
  {
    "id": 1555,
    "db_id": "bakery_1",
    "question": "Return the cheapest price for goods with cheese flavor.",
    "answer": "SELECT T1.`Price` FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T2.Flavor = 'Cheese' ORDER BY T1.price LIMIT 1</sql>"
  },
  {
    "id": 1556,
    "db_id": "bakery_1",
    "question": "What is the cheapest good with cheese flavor?",
    "answer": "SELECT T1.Price FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Ordinal WHERE T1.Flavor = 'Cheese' GROUP BY T1.Flavor ORDER BY T2.ReceiptNumber LIMIT 1</sql>"
  },
  {
    "id": 1557,
    "db_id": "bakery_1",
    "question": "What are highest, lowest, and average prices of goods, grouped and ordered by flavor?",
    "answer": "SELECT MAX(price), MIN(price), AVG(price) FROM items ORDER BY T2.`Flavor` DESC LIMIT 1</sql>"
  },
  {
    "id": 1558,
    "db_id": "bakery_1",
    "question": "What are the maximum, minimum, and average prices of goods of each flavor, ordered by flavor?",
    "answer": "SELECT DISTINCT SUM(Price), AVG(Price), T2.Flavor AS item , ORDER BY T1.Price DESC LIMIT 1</sql>"
  },
  {
    "id": 1559,
    "db_id": "bakery_1",
    "question": "Return the lowest and highest prices of goods grouped and ordered by food type.",
    "answer": "SELECT T1.Price, T2.Price FROM items AS T1 INNER JOIN ( SELECT GROUP_CONCAT(DISTINCT t3.Food ORDER BY SUBSTR(T1.Ordinal, LOCALWITH(SUBSTR(t1.Price), 'Flavor'), 2 ) DESC LIMIT 1) AS T2 , T2 AS T1 FROM goods AS T1 INNER JOIN ( SELECT GROUP_CONCAT(DISTINCT t3.F"
  },
  {
    "id": 1560,
    "db_id": "bakery_1",
    "question": "What are the minimum and maximum prices of food goods, ordered by food?",
    "answer": "SELECT MAX(price), MIN(price) FROM items WHERE Food = 'food' ORDER BY Food DESC LIMIT 1</sql>"
  },
  {
    "id": 1561,
    "db_id": "bakery_1",
    "question": "Find the top three dates with the most receipts.",
    "answer": "SELECT strftime('%J', T2.Receipt), strftime('%d', T1.Receipt) AS date FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt ORDER BY date DESC LIMIT 3</sql>"
  },
  {
    "id": 1562,
    "db_id": "bakery_1",
    "question": "What are the three dates for which the most receipts were given?",
    "answer": "SELECT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Item = T2.Item ORDER BY COUNT(T2.Receipt) DESC LIMIT 3 GROUP BY T2.Receipt ORDER BY SUM(IIF(T1.Date BETWEEN '2005-04-13' AND '2009-03-28') = '2010-06"
  },
  {
    "id": 1563,
    "db_id": "bakery_1",
    "question": "Which customer shopped most often? How many times?",
    "answer": "SELECT SUM(CASE WHEN T2.LastName = 'Burke' THEN 1 END) AS num , SUM(CASE WHEN T3.FirstName = 'Tony' THEN 1 ELSE 0 END) AS num FROM ( SELECT DISTINCT T2, T3.Id FROM items AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.id ORDER BY CASE WHEN T3.LastName != 'Burke' THEN T2"
  },
  {
    "id": 1564,
    "db_id": "bakery_1",
    "question": "Give the customer id of the customer that made the most purchases, as well as the number of purchases made.",
    "answer": "SELECT DISTINCT T2.CustomerId , COUNT(T1.Item) AS num_purchases FROM items AS T1 INNER JOIN receipts AS T2 ON T1.item = T2.Receipt WHERE T1.Price = ( SELECT MAX(Price) FROM receipts ) GROUP BY T2.Item ORDER BY SUM(num_purchases) DESC LIMIT 1</sql>"
  },
  {
    "id": 1565,
    "db_id": "bakery_1",
    "question": "For each date, return how many distinct customers visited on that day.",
    "answer": "SELECT COUNT(DISTINCT T2.CustomerId), SUM(CASE WHEN T2.Name = 'Jerry' THEN 1 ELSE NULL END) AS num FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Item = T2.Item WHERE DATE(T1.ReceiptDate) BETWEEN '2018-09-03' AND '2018-09-15' GROUP BY T"
  },
  {
    "id": 1566,
    "db_id": "bakery_1",
    "question": "How many cusomters visited on each date?",
    "answer": "SELECT SUM(DISTINCT T2.Date), T1.FirstName FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Receipt = T2.Item WHERE T2.Item IS NOT NULL GROUP BY T1.Id ORDER BY SUBSTR(T2.ReceiptNumber, INSTR(T1.ReceiptNumber,'') + 3) , INSTR(SUBSTR(T2.ReceiptNumber, INSTR(T1."
  },
  {
    "id": 1567,
    "db_id": "bakery_1",
    "question": "Give me the first name and last name of customers who have bought apple flavor Tart.",
    "answer": "SELECT DISTINCT T2.firstname, T2.lastname FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Receipt = T2.Receipt WHERE T2.\"Flavor\" = 'Apple' ORDER BY T1.Date DESC LIMIT 1</sql>"
  },
  {
    "id": 1568,
    "db_id": "bakery_1",
    "question": "What are the full names of customers who bought apple flavored Tarts?",
    "answer": "SELECT DISTINCT T2.LastName FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T1.Flavor = 'Apple' AND T1.Price BETWEEN 600 AND 850</sql>"
  },
  {
    "id": 1569,
    "db_id": "bakery_1",
    "question": "What are the ids of Cookies whose price is lower than any Croissant?",
    "answer": "SELECT DISTINCT T2.Item.ReceiptNumber FROM \"items\" AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.Receipt_id WHERE T1.\"Flavor\" < ( SELECT MAX(T3.\") AS Flavor FROM \"goods\" AS T1 INNER JOIN items AS T2 ON T2.Item = T1.item WHERE T1.Flavor LIKE '% Croissant%' )</sql>"
  },
  {
    "id": 1570,
    "db_id": "bakery_1",
    "question": "Give the ids of cookes that are cheaper than any croissant.",
    "answer": "SELECT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Item = T2.Food WHERE T2.Price < 9500 AND item LIKE '%croissant%' GROUP BY T2.ReceiptNumber ORDER BY T2.Price LIMIT 1</sql>"
  },
  {
    "id": 1571,
    "db_id": "bakery_1",
    "question": "Give me the ids of Cakes whose price is at least as much as the average price of Tart?",
    "answer": "SELECT DISTINCT T2.Item, SUM(T1.`Price`) AS total FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.Receipt WHERE strftime('%J', T2.`Date`) LIKE '%Tart%' GROUP BY T1.`Item` ORDER BY avg(T1.price) DESC LIMIT 3</sql>"
  },
  {
    "id": 1572,
    "db_id": "bakery_1",
    "question": "What are the ids of cakes that are at least as expensive as the average Tart?",
    "answer": "SELECT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Item = T2.item WHERE T2.Price > ( SELECT AVG(price) , 0 ) AND T2.Flavor = 'tart'</sql>"
  },
  {
    "id": 1573,
    "db_id": "bakery_1",
    "question": "What are the ids of goods whose price is above twice the average price of all goods?",
    "answer": "SELECT DISTINCT T2.Item FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Receipt = T2.Receipt WHERE T1.Price BETWEEN 98 AND 200 ORDER BY total(T3.Price) DESC LIMIT 1</sql>"
  },
  {
    "id": 1574,
    "db_id": "bakery_1",
    "question": "Give the ids of goods that are more than twice as expensive as the average good.",
    "answer": "SELECT T1.Item FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.ReceiptNumber GROUP BY T1.Item ORDER BY COUNT(T1.ID) / 2 DESC LIMIT 1</sql>"
  },
  {
    "id": 1575,
    "db_id": "bakery_1",
    "question": "List the id, flavor and type of food of goods ordered by price.",
    "answer": "SELECT DISTINCT T2.Item, T1.Flavor, T2.Type FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Receipt = T2.id WHERE T1.Price BETWEEN 5 AND 80 ORDER BY T2.price</sql>"
  },
  {
    "id": 1576,
    "db_id": "bakery_1",
    "question": "What are the ids, flavors, and food types of goods, ordered by price?",
    "answer": "SELECT T1.ReceiptNumber, T2.Flavor, T3.`Price` FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Ordinal INNER JOIN goods AS T3 ON T3.Id = T2.Item WHERE T2.Item = 'Goods with price under $10' AND T2.Flavor = 'tomato soup' ORDER BY T2.`Price` DESC LIMIT 1"
  },
  {
    "id": 1577,
    "db_id": "bakery_1",
    "question": "Return a list of the id and flavor for Cakes ordered by flavor.",
    "answer": "SELECT DISTINCT T2.id, T3.flavor FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T2.Item = 'Cake' ORDER BY T3.Flavor</sql>"
  },
  {
    "id": 1578,
    "db_id": "bakery_1",
    "question": "What are the ids and flavors of cakes, ordered by flavor?",
    "answer": "SELECT DISTINCT T2.Item, T3.Flavor FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.ReceiptNumber WHERE T1.Item = 'cake' ORDER BY item, T1.Flavor</sql>"
  },
  {
    "id": 1579,
    "db_id": "bakery_1",
    "question": "Find all the items that have chocolate flavor but were not bought more than 10 times.",
    "answer": "SELECT T3.Item FROM receipts AS T1 INNER JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE T2.Flavor LIKE '%Choco%' LIMIT 1</sql>"
  },
  {
    "id": 1580,
    "db_id": "bakery_1",
    "question": "What are the items with chocolate flavor that were purchased at most 10 times.",
    "answer": "SELECT DISTINCT T2.Item FROM receipts AS T1 INNER JOIN \"items\" AS T2 ON T1.Receipt = T2.Id WHERE T2.Flavor LIKE '%Chocolate%' ORDER BY COUNT(T1.Receipt) DESC LIMIT 10</sql>"
  },
  {
    "id": 1581,
    "db_id": "bakery_1",
    "question": "What are the flavors available for Cake but not for Tart?",
    "answer": "SELECT T1.Flavor FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T2.Ordinal != 407 AND strftime('%J', T2.Date) LIKE '%Tart%'</sql>"
  },
  {
    "id": 1582,
    "db_id": "bakery_1",
    "question": "Give the flavors of Cakes that are not available for Tart.",
    "answer": "SELECT T1.Flavor FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T2.Ordinal IS NULL AND T2.ReceiptNumber IS NULL GROUP BY T1.Flavor ORDER BY COUNT(T1.Flavor) - 1 DESC LIMIT 1</sql>"
  },
  {
    "id": 1583,
    "db_id": "bakery_1",
    "question": "What is the three most popular goods in this bakery?",
    "answer": "SELECT T1.Price FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Ordinal GROUP BY T1.Flavor ORDER BY COUNT(T2.Receipt) DESC LIMIT 3</sql>"
  },
  {
    "id": 1584,
    "db_id": "bakery_1",
    "question": "Give the three most purchased items at this bakery.",
    "answer": "SELECT T1.id FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Receipt = T2.Item ORDER BY T2.Price DESC LIMIT 3</sql>"
  },
  {
    "id": 1585,
    "db_id": "bakery_1",
    "question": "Find the ids of customers who have spent more than 150 dollars in total.",
    "answer": "SELECT T3.customer_id FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Receipt = T2.Item WHERE T2.Price > 150</sql>"
  },
  {
    "id": 1586,
    "db_id": "bakery_1",
    "question": "What are the ids of customers who have spent over 150 dollars in total?",
    "answer": "SELECT DISTINCT T2.CustomerId FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Ordinal WHERE T1.Price BETWEEN 100 AND 300 ORDER BY SUM(T2.ReceiptNumber) DESC LIMIT 1</sql>"
  },
  {
    "id": 1587,
    "db_id": "bakery_1",
    "question": "Find the ids of customers whose average spending for each good is above 5.",
    "answer": "SELECT T1.Id FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Ordinal WHERE T1.Price > 5 GROUP BY T1.Flavor ORDER BY AVG(T1.`ReceiptNumber`) DESC LIMIT 1</sql>"
  },
  {
    "id": 1588,
    "db_id": "bakery_1",
    "question": "What are the ids of customers who spend more than 5 on average for each good?",
    "answer": "SELECT DISTINCT T2.CustomerId FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Receipt = T2.Item WHERE T1.Price BETWEEN 30 AND 75 ORDER BY T2.Food / COUNT(T2.item_name) DESC LIMIT 5</sql>"
  },
  {
    "id": 1589,
    "db_id": "bakery_1",
    "question": "On which day did the bakery sell more than 100 dollars in total.",
    "answer": "SELECT CAST((SUM(CASE WHEN T2.Price > 100 THEN 1 ELSE 0 END) AS REAL)) - SUM(CASE WHEN T2.Price < 56 THEN 1 ELSE 0 END) AS Total , CASE WHEN t3.CustomerId = '43479' THEN COUNT(T2.ReceiptID) + COUNT(CASE WHEN T3.OrderNumber = '8616907937"
  },
  {
    "id": 1590,
    "db_id": "bakery_1",
    "question": "On what dates did the bakery sell more than 100 dollars worth of goods in total?",
    "answer": "SELECT COUNT(T2.ReceiptNumber), CAST(SUM(CASE WHEN item = 'brown sugar' THEN 1 ELSE NULL END) AS REAL) * 100 / SUM(item IN ('French Toast', 'Oreos')) AS total FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Receipt=T2.Id ORDER BY T2.price DESC LIMIT 100</sql>"
  },
  {
    "id": 1591,
    "db_id": "car_racing",
    "question": "How many drivers are there?",
    "answer": "SELECT COUNT(DISTINCT T2.Driver_ID) FROM driver AS T1 INNER JOIN team AS T2 ON T1.Team_ID = T2.Team_ID WHERE T2.Country != 'USA' AND T1.Car_# IS NOT NULL GROUP BY T2.Country ORDER BY COUNT(T2.Driver_ID) DESC LIMIT 1</sql>"
  },
  {
    "id": 1592,
    "db_id": "car_racing",
    "question": "Find the total number of drivers.",
    "answer": "SELECT COUNT(DISTINCT T2.Driver_ID), SUM(T1.`Winnings`) FROM team AS T1 INNER JOIN driver AS T2 ON T1.Team_ID = T2.Team_ID WHERE T1.Country IN ('USA','UK') GROUP BY T1.Team, T2.Country ORDER BY COUNT(DISTINCT T2.Driver_id) DESC LIMIT 2</sql>"
  },
  {
    "id": 1593,
    "db_id": "car_racing",
    "question": "Find the number of drivers whose points are greater than 150 for each make.",
    "answer": "SELECT SUM(points), COUNT(DISTINCT T2.Make) FROM driver AS T1 INNER JOIN team AS T2 ON T1.Driver_ID = T2.Team_ID WHERE T1.`Points` > 150 GROUP BY T1.`Make` ORDER BY SUM(T2.`Winnings`) DESC LIMIT 3</sql>"
  },
  {
    "id": 1594,
    "db_id": "car_racing",
    "question": "How many drivers receive points greater than 150 for each make? Show the make and the count.",
    "answer": "SELECT DISTINCT T2.make, COUNT(T1.car_#), T1.name FROM `driver` AS T1 INNER JOIN team AS T2 ON T1.Team_ID = T2.Team_id WHERE T1.`Points` BETWEEN 150 AND 100 ORDER BY T2.make, T2.model</sql>"
  },
  {
    "id": 1595,
    "db_id": "car_racing",
    "question": "Find the average age of drivers for each make.",
    "answer": "SELECT T1.Age, SUM(T2.Winnings * 100), CAST(SUM(CASE WHEN T2.Make = 'Audi' THEN T2.Winnings END) AS REAL) / COUNT(DISTINCT T2.Car_Owner) FROM ( SELECT T3.Age, MIN(T3.car_owner),  MAX(T1.Date), SUM(CASE WHEN T1.Make = 'Audi"
  },
  {
    "id": 1596,
    "db_id": "car_racing",
    "question": "What is the average age of drivers for each make? Return the average age and make.",
    "answer": "SELECT SUM(DISTINCT T2.Age), T1.`Make`, T3.`make` FROM driver AS T1 INNER JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID WHERE T1.Make = 'Acura' GROUP BY T2.Driver_id ORDER BY SUM(T2.Age) / COUNT(`T2.Model`) DESC</sql>"
  },
  {
    "id": 1597,
    "db_id": "car_racing",
    "question": "What are the average laps of all the drivers who are younger than 20?",
    "answer": "SELECT AVG(T1.Laps), SUM(T3.Points) / COUNT(T3.Car_Owner) AS avg FROM ( SELECT T1.Driver, strftime('%Y', T1.`Date`) - strftime('%Y', T2.Age) AS PCT ,  T3.`Winnings` AS CAR_POINTS , SUM(T2.`Points`) AS Points , T1.Car_#"
  },
  {
    "id": 1598,
    "db_id": "car_racing",
    "question": "Compute the average laps of drivers under the age of 20.",
    "answer": "SELECT AVG(T1.Laps), CAST(DATE() AS REAL) - T2.Age FROM driver AS T1 INNER JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID WHERE CAST(STRFTIME('%J', T1.`Date`) AS REAL) BETWEEN 8 AND 20 ORDER BY CAST(T1.Age AS REAL) DESC LIMIT 1</sql"
  },
  {
    "id": 1599,
    "db_id": "car_racing",
    "question": "What are the managers and sponsors of teams? Sort the results by Car Owners.",
    "answer": "SELECT DISTINCT T2.Name, T3.Name FROM team AS T1 INNER JOIN manager AS T2 ON T1.Team_ID = T2.Team_ID WHERE T2.Name LIKE '%Manager%' AND T3.Name = 'car #' ORDER BY T2.Name ASC LIMIT 1</sql>"
  },
  {
    "id": 1600,
    "db_id": "car_racing",
    "question": "Find the manager and sponsor for each team and order them by the car owner.",
    "answer": "SELECT DISTINCT T2.Manager, T3.Sponsor FROM \"team\" AS T1 INNER JOIN `driver` AS T2 ON T1.Team_ID = T2.Driver_id WHERE T2.Car_Owner = 0 ORDER BY T2.Name ORDER BY T1.`Car_#`</sql>"
  },
  {
    "id": 1601,
    "db_id": "car_racing",
    "question": "Find the make that has more than one team.",
    "answer": "SELECT DISTINCT T2.make FROM ( SELECT T1.\"Make\" AS M , T2.`Team_ID` AS `Team_Id`, COUNT(T2.`Team_ID`) FROM driver AS T1 INNER JOIN team AS T2 ON T1.\"Driver_ID\" = T2 .\"`Driver_ID\"` WHERE T1.car_owner <> 'none' GROUP BY T2.\"Make\", 1 ) AS t ORDER BY COUNT(T2.make"
  },
  {
    "id": 1602,
    "db_id": "car_racing",
    "question": "Which make has more than one team?",
    "answer": "SELECT DISTINCT T2.make FROM ( SELECT DISTINCT T1.T3, COUNT(DISTINCT T2.make) AS num FROM `team` AS T1 INNER JOIN `driver_id` AS T2 ON T1.Team_Id = T2.Driver_ID WHERE T2.car_ # IS NULL GROUP BY T2.make ORDER BY num DESC LIMIT 1 ) T1 INNER JOIN team AS T3 ON T1.Team_"
  },
  {
    "id": 1603,
    "db_id": "car_racing",
    "question": "What are the makes of the teams with car owner \"Buddy Arrington\"?",
    "answer": "SELECT DISTINCT T2.make FROM team AS T1 INNER JOIN driver AS T2 ON T1.Team_id = T2.Team_ID WHERE T2.Car_Owner = 'Buddy Arrington'</sql>"
  },
  {
    "id": 1604,
    "db_id": "car_racing",
    "question": "Find the make of the team whose car owner is \"Buddy Arrington\".",
    "answer": "SELECT DISTINCT T2.make FROM driver AS T1 INNER JOIN team AS T2 ON T1.Driver_ID = T2.Team_ID WHERE T1.Car_Owner = 'Buddy Arrington' AND T2.Car_# IS NULL LIMIT 1</sql>"
  },
  {
    "id": 1605,
    "db_id": "car_racing",
    "question": "What are the maximum and minimum points of drivers.",
    "answer": "SELECT SUM(DISTINCT T2.Points), MIN(T1.POINTS) FROM driver AS T1 INNER JOIN team AS T2 ON T1.Driver_ID = T2.Car_Owner WHERE T2.Country IS NULL AND T2.Team = 'Championship Team (Winnings)' ORDER BY T1.Points DESC LIMIT 1</sql>"
  },
  {
    "id": 1606,
    "db_id": "car_racing",
    "question": "Find the highest and lowest points of drivers.",
    "answer": "SELECT DISTINCT T2.Points, MAX(T1.`Winnings`), MIN(T2.Points) FROM driver AS T1 INNER JOIN team AS T2 ON T1.Team_ID = T2.Team_ID WHERE T2.country = 'United States' GROUP BY T1.Driver ORDER BY COUNT(T1.Car_#) DESC LIMIT 1</sql>"
  },
  {
    "id": 1607,
    "db_id": "car_racing",
    "question": "How many drivers have points smaller than 150?",
    "answer": "SELECT COUNT(DISTINCT T2.Driver_ID) AS num FROM driver AS T1 INNER JOIN team AS T2 ON T1.Team_ID = T2.Team_ID WHERE T1.`Points` < ( SELECT MAX(T3.points - 150 ) AS num FROM team AS T2 INNER JOIN driver AS T3 ON T3.Driver_ID = T2.Driver_ID WHERE T2.Team_ID = 'team' AND"
  },
  {
    "id": 1608,
    "db_id": "car_racing",
    "question": "Count the number of drivers whose points are below 150.",
    "answer": "SELECT COUNT(DISTINCT T2.Driver_ID) FROM driver AS T1 INNER JOIN team AS T2 ON T1.Team_ID = T2.Team_ID WHERE T1.`Points` IS NULL AND T2.Car_# = 76</sql>"
  },
  {
    "id": 1609,
    "db_id": "car_racing",
    "question": "List all the driver names in ascending order of age.",
    "answer": "SELECT T1.name FROM driver AS T1 INNER JOIN team AS T2 ON T1.Team_ID = T2.Team_ID ORDER BY T1.Age DESC LIMIT 1</sql>"
  },
  {
    "id": 1610,
    "db_id": "car_racing",
    "question": "Sort the driver names by age in ascending order.",
    "answer": "SELECT T1.name, T2.Age FROM driver AS T1 INNER JOIN team AS T2 ON T1.Team_id = T2.Team_id ORDER BY T2.Year INTERSECT SELECT T2.Name FROM driver AS T1 INNER JOIN team AS T2 ON T1.Team_id = T2.Team_id WHERE T1.Age > (SELECT MAX(T1.Age) FROM driver AS T1 INNER JOIN team AS T"
  },
  {
    "id": 1611,
    "db_id": "car_racing",
    "question": "List all the driver names in descending order of points.",
    "answer": "SELECT T1.name FROM driver AS T1 INNER JOIN team AS T2 ON T1.Team_ID = T2.Team_ID ORDER BY T1.Points DESC LIMIT 1</sql>"
  },
  {
    "id": 1612,
    "db_id": "car_racing",
    "question": "What is the list of drivers ordered by points in descending order?",
    "answer": "SELECT T1.name, SUM(T2.`Points`) DESC FROM driver AS T1 INNER JOIN team AS T2 ON T1.Team_ID = T2.Team_Id WHERE T1.driver LIKE '%Driver%' ORDER BY T1.`Points` DESC LIMIT 1</sql>"
  },
  {
    "id": 1613,
    "db_id": "car_racing",
    "question": "Please show the names of drivers, and countries they are from.",
    "answer": "SELECT T1.Name , T2.Country FROM driver AS T1 INNER JOIN country AS T2 ON T1.Team_id = T2.Team_ID WHERE T1.Driver_ID IN ( SELECT DISTINCT T2.Country ,  T3.Name FROM driver AS T3 INNER JOIN team AS T4 ON T3.Driver_ID = T4.Driver_ID WHERE T1.Years = '6' ORDER BY T3.Name )"
  },
  {
    "id": 1614,
    "db_id": "car_racing",
    "question": "For each driver, return his or her name and country.",
    "answer": "SELECT T1.name, T2.country FROM driver AS T1 INNER JOIN team AS T2 ON T1.Team_ID = T2.Team_ID WHERE T2.Country = 'USA'</sql>"
  },
  {
    "id": 1615,
    "db_id": "car_racing",
    "question": "Show the maximum points of the drivers from countries with capital \"Dublin\"",
    "answer": "SELECT SUM(MAX(T2.Points)) AS total FROM ( SELECT DISTINCT T1.Driver, T2.Country FROM driver AS T1 INNER JOIN country AS T2 ON T1.Driver = T2.Country WHERE T2.Capital = 'Dublin' GROUP BY T2.Country ORDER BY SUM(T2.Points) DESC LIMIT 1 ) AS t ORDER BY SUM(MAX(T2.Points)) DESC LIMIT 1</sql>"
  },
  {
    "id": 1616,
    "db_id": "car_racing",
    "question": "What is the maximum points of the drivers from a country whose capital is \"Dublin\"?",
    "answer": "SELECT SUM(max(T2.Points)) AS total FROM team AS T1 INNER JOIN country AS T2 ON T1.Country_Id = T2.Country WHERE T1.city = 'DUBLIN' GROUP BY T1.country ORDER BY T3.capital = 'Dublin LIMIT 1'</sql>"
  },
  {
    "id": 1617,
    "db_id": "car_racing",
    "question": "What is the average age of drivers from countries with official native language \"English\"",
    "answer": "SELECT SUM(DISTINCT CAST(T1.Age AS REAL)) / COUNT(T2.Country), T2.Language FROM `driver` AS T1 INNER JOIN country AS T2 ON T1.Country_Id = T2.`Country_id` WHERE T2.Language = 'EN' GROUP BY T1.Country ORDER BY SUM(CAST(DISTINCT CAST(T2.`native_language` AS REAL)) / COUNT(T"
  },
  {
    "id": 1618,
    "db_id": "car_racing",
    "question": "Find the average age of the drivers from the countries that use \"English\" as official native language.",
    "answer": "SELECT SUM(DISTINCT CAST(T1.Age AS REAL)) / COUNT(T2.Country) FROM `driver` AS T1 INNER JOIN `country_driver` AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Country IN ('ENG', 'ENGLANK')</sql>"
  },
  {
    "id": 1619,
    "db_id": "car_racing",
    "question": "What are the countries that have drivers with points larger than 150?",
    "answer": "SELECT T2.Country, SUM(T3.`Points`) FROM driver AS T1 INNER JOIN team AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.country ORDER BY COUNT(`Points`) DESC LIMIT 1</sql>"
  },
  {
    "id": 1620,
    "db_id": "car_racing",
    "question": "Find all the countries where some drivers have points above 150.",
    "answer": "SELECT T3.Country, SUM(T2.`Points`) - SUM(T4.`Points`) AS num FROM ( SELECT DISTINCT T1.Country , T2.`Points` FROM driver AS T1 INNER JOIN team AS T2 ON T2.Team_ID = T1.Team_ID GROUP BY T3.country ) AS T3 ORDER BY sum(num) > 150</sql>"
  },
  {
    "id": 1621,
    "db_id": "car_racing",
    "question": "What is the capital of the country where the driver with the most points is from?",
    "answer": "SELECT DISTINCT T2.Capital FROM ( SELECT DISTINCT T1.\"Country_Id\" AS `Country_Id`, T2.`Points` AS `Points`, T2.`Team` AS \"Team\", COUNT(T2.`Car_#`) - 1 AS num FROM team AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Country WHERE T1.\"Name\" LIKE '%Driver%' GROUP BY T2.Capital ORDER BY"
  },
  {
    "id": 1622,
    "db_id": "car_racing",
    "question": "Which country is the driver with the highest points from? Give me the capital of the country.",
    "answer": "SELECT DISTINCT T2.Capital FROM ( SELECT DISTINCT T1.\"Country_Id\" AS `country_id`, SUM(T1.`Points`) AS total , SUM(CASE WHEN T2.`Capital` IS NULL THEN 1 ELSE 0 END) AS per FROM team AS T1 INNER JOIN driver AS T2 ON T1.Team_ID = T2.Driver_ID WHERE T1.Country = 'US' GROUP BY T2.Country"
  },
  {
    "id": 1623,
    "db_id": "car_racing",
    "question": "List each make with the number of drivers with that make.",
    "answer": "SELECT DISTINCT T2.make, COUNT(T1.driver) FROM ( SELECT 'Dodge', 0 AS num , 'Cadillac' AS t1_manufacturer , 'Mercury' AS t2_model UNION ALL SELECT Dodge, 3, 'Chevrolet' AS t2_manufacturer , 'Chevrolet' FROM driver AS T1 INNER JOIN team AS T2 ON T1.Team_ID ="
  },
  {
    "id": 1624,
    "db_id": "car_racing",
    "question": "For each make, return the make and the count of drivers with that make.",
    "answer": "SELECT DISTINCT T2.make , COUNT(T1.driver) FROM car_owner AS T1 INNER JOIN driver AS T2 ON T1.car_owner = T2.car_# GROUP BY T2.make ORDER BY COUNT(T1.driver) DESC LIMIT 1</sql>"
  },
  {
    "id": 1625,
    "db_id": "car_racing",
    "question": "List the make that are associated with most drivers.",
    "answer": "SELECT DISTINCT T2.make FROM driver AS T1 INNER JOIN team AS T2 ON T1.Team_ID = T2.Team_ID ORDER BY COUNT(T2.Make) DESC LIMIT 1</sql>"
  },
  {
    "id": 1626,
    "db_id": "car_racing",
    "question": "Which make does the most drivers have?",
    "answer": "SELECT DISTINCT T2.make FROM driver AS T1 INNER JOIN team AS T2 ON T1.Team_ID = T2.Team_ID WHERE T1.driver_id IN ( SELECT T2.make , COUNT(T2.car) - 1 FROM driver AS T1 INNER JOIN team AS T2 ON T1.team_id = T2.team_id GROUP BY T1.make ORDER BY COUNT(DISTINCT T2.car"
  },
  {
    "id": 1627,
    "db_id": "car_racing",
    "question": "List the driver makes that are associated with at least three drivers.",
    "answer": "SELECT T1.make, T2.manufacturer FROM `driver` AS T1 INNER JOIN `team` AS T2 ON T1.Team_ID = T2.Team_ID ORDER BY T2.manufacturer DESC LIMIT 3</sql>"
  },
  {
    "id": 1628,
    "db_id": "car_racing",
    "question": "Which make is associated with 3 or more drivers?",
    "answer": "SELECT DISTINCT T2.make FROM driver AS T1 INNER JOIN team AS T2 ON T1.Team_ID = T2.Team_ID WHERE T1.driver LIKE '%' ?%' OR T1.driver LIKE '%' ? OR T2.Make LIKE '%' ? GROUP BY T3.make ORDER BY COUNT(T2.make) INTERSECT SUM (COUNT(T2.manufacturer)) AS num , COUNT(T2.model"
  },
  {
    "id": 1629,
    "db_id": "car_racing",
    "question": "List the names of teams that do not have any drivers.",
    "answer": "SELECT DISTINCT T2.name FROM team AS T1 INNER JOIN driver AS T2 ON T1.Team_id = T2.Team_ID WHERE T1.car_owner IS NULL AND (T2.Points = 0 OR T2.Manager = 'admin')</sql>"
  },
  {
    "id": 1630,
    "db_id": "car_racing",
    "question": "Which team does not have drivers?",
    "answer": "SELECT DISTINCT T2.Team_ID FROM driver AS T1 INNER JOIN ( SELECT Team_id, COUNT(T2.Driver_ID) AS num FROM driver AS T2 INNER JOIN team AS T3 ON T1.Driver_ID = T3 .Driver_ID WHERE T1.Team != T2.Team LIMIT 1 ) AS T4 AS T5 ON T4.Team_id = T5.Team_id ORDER BY T2.Team NOT"
  },
  {
    "id": 1631,
    "db_id": "car_racing",
    "question": "Which country has both drivers with make \"Dodge\" and drivers with make \"Chevrolet\"?",
    "answer": "SELECT T1.Country, T2.Make, T3.Car_Owner FROM driver AS T1 INNER JOIN team AS T2 ON T1.Driver_ID = T2.Driver_ID INNER JOIN country AS T3 ON T2.Team_ID = T3.Team_Id WHERE T2.Make = 'Chevrolet' AND T1.Car_ # = 'Dodge' ORDER BY T2.make, T3.country</sql>"
  },
  {
    "id": 1632,
    "db_id": "car_racing",
    "question": "Find the countries in which there are both drivers with make \"Dodge\" and drivers with make \"Chevrolet\".",
    "answer": "SELECT T1.Country FROM driver AS T1 INNER JOIN team AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Make = 'chevrolet' AND T2.Make = 'dodge' LIMIT 1</sql>"
  },
  {
    "id": 1633,
    "db_id": "car_racing",
    "question": "Show total and average points of all drivers.",
    "answer": "SELECT SUM(CASE WHEN T2.Points > 0 THEN 1 ELSE 0 END) AS Average, SUM(T1.Points) FROM driver AS T1 INNER JOIN team AS T2 ON T1.Team_ID = T2.Team_Id WHERE T1.Driver_ID IN ( SELECT DISTINCT D3.Driver_ID FROM car_owner AS D1 INNER JOIN cars AS C on D1.Car_Owner = C.Car_ID"
  },
  {
    "id": 1634,
    "db_id": "car_racing",
    "question": "What are the total and average points of drivers?",
    "answer": "SELECT SUM(p2.Points), AVG(T1.`Winnings`), SUM(T2.`Total Points`) FROM driver AS T1 INNER JOIN team_driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Name = 'Austin Butler' GROUP BY T2.Team ORDER BY SUM(P2) / COUNT(`T2.Driver_id`) DESC LIMIT 3</sql>"
  },
  {
    "id": 1635,
    "db_id": "car_racing",
    "question": "Find the countries where no driver come from.",
    "answer": "SELECT T1.Country FROM \"driver AS T1 INNER JOIN country AS T2 ON T1.Team_id = T2.Country WHERE T1.Name = 'No Driver' AND T1.LivesIn(null)</sql>"
  },
  {
    "id": 1636,
    "db_id": "car_racing",
    "question": "Which countries do not have any drivers?",
    "answer": "SELECT T1.Country FROM driver AS T1 INNER JOIN team AS T2 ON T1.Team_ID = T2.Team_ID WHERE T2.Country IS NULL GROUP BY T2.Country ORDER BY COUNT(T2.Country) LIMIT 1</sql>"
  },
  {
    "id": 1637,
    "db_id": "car_racing",
    "question": "What are the manager and sponsor of the team that has the most drivers?",
    "answer": "SELECT DISTINCT T2.manager, T2.sponsor FROM driver AS T1 INNER JOIN team AS T2 ON T1.Driver_ID = T2.Team_ID GROUP BY T1.Manager ORDER BY COUNT(T1.driver) DESC LIMIT 1</sql>"
  },
  {
    "id": 1638,
    "db_id": "car_racing",
    "question": "Find the manager and sponsor of the team that has the most drivers.",
    "answer": "SELECT DISTINCT T2.Manager, T2.Sponsor FROM driver AS T1 INNER JOIN team AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Team ORDER BY COUNT(T1.Driver_id) DESC LIMIT 1</sql>"
  },
  {
    "id": 1639,
    "db_id": "car_racing",
    "question": "What are the manager and car owner of the team that has at least 2 drivers?",
    "answer": "SELECT DISTINCT T1.Manager, T2.Car_Owner FROM driver AS T1 INNER JOIN team AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T2.Team ORDER BY COUNT(T2.Car_Owner) > 2</sql>"
  },
  {
    "id": 1640,
    "db_id": "car_racing",
    "question": "Find the team with two or more drivers and return the the manager and car owner of the team.",
    "answer": "SELECT DISTINCT T2.Manager, T3.Car_Owner FROM driver AS T1 INNER JOIN team AS T2 ON T1.Driver_ID = T2.Driver_ID INNER JOIN team_driver AS T3 ON T2.Team_ID = T3.Team_ID WHERE T3.Car_# != 0 GROUP BY T2.Manager, T3.Car_Owner ORDER BY COUNT(T2.Driver_ID) + 1 DESC"
  },
  {
    "id": 1641,
    "db_id": "institution_sports",
    "question": "How many institutions are there?",
    "answer": "SELECT COUNT(T1.Institution_ID), T2.Name FROM \"Institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T2.Nickname = 'League of Legends Championship' GROUP BY T2.Name ORDER BY COUNT(T2.Institution_ID) DESC LIMIT 3</sql>"
  },
  {
    "id": 1642,
    "db_id": "institution_sports",
    "question": "Count the number of institutions.",
    "answer": "SELECT COUNT(T1.Institution_ID), T2.`Institution_ID`, CAST((COUNT(DISTINCT T1.Institution_ID) AS REAL) * 100 / COUNT(T2.Institution_ID)) INTO #total FROM `institution` AS T1 INNER JOIN `championship` AS T2 ON T1.Institution_ID = T2.`Institution_ID`</sql>"
  },
  {
    "id": 1643,
    "db_id": "institution_sports",
    "question": "List the names of institutions in ascending alphabetical order.",
    "answer": "SELECT DISTINCT T2.Name FROM `championship` AS T1 INNER JOIN Institutions AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T1.Nickname ASC</sql>"
  },
  {
    "id": 1644,
    "db_id": "institution_sports",
    "question": "What are the names of institutions, ordered alphabetically?",
    "answer": "SELECT DISTINCT T2.Name FROM `championship` AS T1 INNER JOIN institution AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T2.Name ASC</sql>"
  },
  {
    "id": 1645,
    "db_id": "institution_sports",
    "question": "List the names of institutions in ascending order of founded year.",
    "answer": "SELECT DISTINCT T2.Name FROM `Championship` AS T1 INNER JOIN Institutions AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T2.Founded DESC</sql>"
  },
  {
    "id": 1646,
    "db_id": "institution_sports",
    "question": "What are the names of institutions, ordered by the years in which they were founded?",
    "answer": "SELECT DISTINCT T2.Name FROM \"Championship\" AS T1 INNER JOIN Institutions AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T2.Founded / 365 LIMIT 1</sql>"
  },
  {
    "id": 1647,
    "db_id": "institution_sports",
    "question": "What are the cities and provinces of institutions?",
    "answer": "SELECT DISTINCT T2.city, T2.province FROM `Championship` AS T1 INNER JOIN \"institution\" AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.Stadium != 'null' AND T1.Team IN ('NHL', '') ORDER BY T2.city , T2.province</sql>"
  },
  {
    "id": 1648,
    "db_id": "institution_sports",
    "question": "Return the cities and provinces of institutions.",
    "answer": "SELECT DISTINCT T2.city, T2.province FROM `Championship` AS T1 INNER JOIN `institutions` AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.Nickname = 'Championship'</sql>"
  },
  {
    "id": 1649,
    "db_id": "institution_sports",
    "question": "What are the maximum and minimum enrollment of all institutions?",
    "answer": "SELECT DISTINCT SUM(endowment), min(endowment) FROM institution WHERE Team = 'Baltimore Ravens' GROUP BY Institution_ID ORDER BY SUM(enrollment - min(endowment)) DESC LIMIT 1</sql>"
  },
  {
    "id": 1650,
    "db_id": "institution_sports",
    "question": "Return the maximum and minimum enrollment across all institutions.",
    "answer": "SELECT DISTINCT MAX(enrollment), MIN(enrollment) FROM \"Institution\" WHERE \"Team\" = 'Championship' GROUP BY institution ORDER BY COUNT(*) DESC LIMIT 1, 2</sql>"
  },
  {
    "id": 1651,
    "db_id": "institution_sports",
    "question": "What are the affiliations of institutions that are not in city \"Vancouver\"?",
    "answer": "SELECT T1.Affiliation FROM `institutions` AS T1 INNER JOIN `city` AS T2 ON T1.Institution_ID = T2.City WHERE T2.City IS NOT NULL AND T2.Name != 'Vancouver' LIMIT 1</sql>"
  },
  {
    "id": 1652,
    "db_id": "institution_sports",
    "question": "Return the affiliations of instituions that are not in the city of Vancouver.",
    "answer": "SELECT T1.Affiliation FROM \"institution\" AS T1 INNER JOIN `city` AS T2 ON T1.Institution_ID = T2.City WHERE T1.Province IS NULL AND T1.Name != 'Boston College'</sql>"
  },
  {
    "id": 1653,
    "db_id": "institution_sports",
    "question": "What are the stadiums of institutions in descending order of the capacity.",
    "answer": "SELECT DISTINCT T2.Stadium FROM \"Championship\" AS T1 INNER JOIN `institution` AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T2.Capacity DESC LIMIT 1</sql>"
  },
  {
    "id": 1654,
    "db_id": "institution_sports",
    "question": "Return the stadiums of institutions, ordered by capacity descending.",
    "answer": "SELECT T1.name FROM \"institution\" AS T1 INNER JOIN 'stadium' AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T1.Stadium DESC LIMIT 1</sql>"
  },
  {
    "id": 1655,
    "db_id": "institution_sports",
    "question": "What is the stadium of the institution with the largest enrollment?",
    "answer": "SELECT DISTINCT T2.Stadium FROM `Championship` AS T1 INNER JOIN Institution AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY (T1.number_of_championships DESC > 1) LIMIT 1</sql>"
  },
  {
    "id": 1656,
    "db_id": "institution_sports",
    "question": "Give the stadium of the institution which is the greatest enrollment.",
    "answer": "SELECT DISTINCT T2.Stadium FROM Championship AS T1 INNER JOIN Institution AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.Nickname = 'Leeds United' ORDER BY T2.\"Capacity\" DESC LIMIT 1</sql>"
  },
  {
    "id": 1657,
    "db_id": "institution_sports",
    "question": "What are the names and nicknames of institutions?",
    "answer": "SELECT DISTINCT T2.Name, T2.Nickname FROM `institution` AS T1 INNER JOIN `Championship` AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.Team = 'United States'</sql>"
  },
  {
    "id": 1658,
    "db_id": "institution_sports",
    "question": "Return the names of institutions, as well as their nicknames.",
    "answer": "SELECT DISTINCT T2.Name, T3.Nickname FROM \"championship\" AS T1 INNER JOIN `institution` AS T2 ON T1.Institution_ID = T2.Institution_ID INNER JOIN `player` AS T3 ON T2.Player_ID = T3.Player_ID WHERE T1.Nickname = 'Oakland Raiders' AND T1.Endowment BETWEEN 0 AND"
  },
  {
    "id": 1659,
    "db_id": "institution_sports",
    "question": "What is the nickname of the institution with the smallest enrollment?",
    "answer": "SELECT T1.Name FROM \"Championship\" AS T1 INNER JOIN \"Institution\" AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T1.number_of_champions - ( SELECT MAX(T2.number_of_champions) FROM `Institution` AS T1 INNER JOIN `Championship` AS T2 ON T1.Institution_ID = T2.Institution_"
  },
  {
    "id": 1660,
    "db_id": "institution_sports",
    "question": "Return the nickname of the institution with the lowest enrollment.",
    "answer": "SELECT T1.Nickname FROM \"Championship\" AS T1 INNER JOIN \"Institution\" AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY (T1.Stadium - T1.number_of_champions) LIMIT 1</sql>"
  },
  {
    "id": 1661,
    "db_id": "institution_sports",
    "question": "List the names of institutions in descending order of the number of championships.",
    "answer": "SELECT DISTINCT T2.Name FROM `Championship` AS T1 INNER JOIN institution AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY COUNT(T1.Nickname) DESC LIMIT 1</sql>"
  },
  {
    "id": 1662,
    "db_id": "institution_sports",
    "question": "What are the names of institutions, ordered descending by their number of championships?",
    "answer": "SELECT DISTINCT T2.Name FROM `Championship` AS T1 INNER JOIN institution AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY COUNT(T1.Nickname) DESC LIMIT 1</sql>"
  },
  {
    "id": 1663,
    "db_id": "institution_sports",
    "question": "List the names of institutions with at least one championship.",
    "answer": "SELECT DISTINCT T2.Name FROM \"Championship AS T1 INNER JOIN Institution AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T2.Affiliation DESC LIMIT 1</sql>"
  },
  {
    "id": 1664,
    "db_id": "institution_sports",
    "question": "What are the names of institutions that have 1 or more championships?",
    "answer": "SELECT DISTINCT T2.Name FROM \"Championship\" AS T1 INNER JOIN 'institution' AS T2 ON T1.Institution_ID = T2.Institution_ID GROUP BY T2.Nickname ORDER BY SUM(T3.Number_of_Championships) DESC LIMIT 1</sql>"
  },
  {
    "id": 1665,
    "db_id": "institution_sports",
    "question": "What is the total number of championship of institution with public affiliation?",
    "answer": "SELECT COUNT(DISTINCT T2.Nickname), SUM(T1.`Endowment`) FROM Championships AS T1 INNER JOIN `Institution` AS T2 ON T1.institution = T2.Institution_ID WHERE T2.affiliation = 'Public Affiliation' GROUP BY T1.`Institution_ID`, T1.`Nickname`, T2.City ORDER BY COUNT(T1.institution) DESC LIMIT 1"
  },
  {
    "id": 1666,
    "db_id": "institution_sports",
    "question": "Return the total number of championships of institutions that have a Public affiliation.",
    "answer": "SELECT COUNT(T1.Institution_ID) FROM \"Championship\" AS T1 INNER JOIN `Institutions` AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T2.Public INTERSECT SELECT T2.Name FROM `institution` AS T1 INNER JOIN 'Institutions' AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T2.Public IS"
  },
  {
    "id": 1667,
    "db_id": "institution_sports",
    "question": "What are different types of affiliations of institutions and the corresponding number of institutions?",
    "answer": "SELECT T1.Affiliation, COUNT(DISTINCT T2.Name), T3.PRIMARY KEY (\"Institution_ID\"), T1.Affiliation FROM \"Institution\" AS T1 INNER JOIN \"Championship\" AS T2 ON T1.Institution_ID = T2.Institution_ID GROUP BY T1.Affiliation ORDER BY COUNT(DISTINCT T1.Name) DESC LIMIT 1</sql>"
  },
  {
    "id": 1668,
    "db_id": "institution_sports",
    "question": "How many institutions are there for each type of affiliation?",
    "answer": "SELECT T1.type, COUNT(T2.Institution_ID) FROM championships AS T1 INNER JOIN institutions AS T2 ON T1.Institution_ID = T2.Institution_ID GROUP BY T1.Type ORDER BY COUNT(DISTINCT T2.Institution_ID) DESC LIMIT 4</sql>"
  },
  {
    "id": 1669,
    "db_id": "institution_sports",
    "question": "What is the most common type of affiliation for institutions?",
    "answer": "SELECT DISTINCT T2.Affiliation FROM `Championship` AS T1 INNER JOIN institution AS T2 ON T1.Institution_ID = T2.Institution_ID GROUP BY T2.Affiliation ORDER BY COUNT(T2.Affiliation) DESC LIMIT 1</sql>"
  },
  {
    "id": 1670,
    "db_id": "institution_sports",
    "question": "Return the most common type of affiliation across all institutions.",
    "answer": "SELECT DISTINCT T2.Affiliation FROM `Championship` AS T1 INNER JOIN institution AS T2 ON T1.Institution_ID = T2.Institution_ID GROUP BY T2.Affiliation ORDER BY COUNT(T2.Affiliation) DESC LIMIT 1</sql>"
  },
  {
    "id": 1671,
    "db_id": "institution_sports",
    "question": "In which years were more than one institution founded?",
    "answer": "SELECT 'year' AS year FROM `Championship` WHERE `Institution_ID` = '513428967033382265288' LIMIT 1</sql>"
  },
  {
    "id": 1672,
    "db_id": "institution_sports",
    "question": "Return the years in which more than 1 institution was founded, as well as the number of institutions founded in each of those.",
    "answer": "SELECT strftime('%Y', T2.Created), SUM(T3.`Institution_ID`) AS `num` FROM `Championship` AS T1 INNER JOIN 'institutions' AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T2.Name LIKE '%(Stadium)' GROUP BY STRFTIME('%Y', T1.Created), SUM(T3.`Institution_ID`) ORDER BY"
  },
  {
    "id": 1673,
    "db_id": "institution_sports",
    "question": "List the nicknames of institutions in descending order of capacity.",
    "answer": "SELECT DISTINCT T1.Nickname FROM `Championship` AS T1 INNER JOIN `institution` AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T1.Capacity DESC LIMIT 1</sql>"
  },
  {
    "id": 1674,
    "db_id": "institution_sports",
    "question": "What are the nicknames of institutions, ordered descending by their capacities?",
    "answer": "SELECT DISTINCT T1.Nickname ORDER BY T2.capacity DESC LIMIT 1</sql>"
  },
  {
    "id": 1675,
    "db_id": "institution_sports",
    "question": "What are the total enrollment of institutions in city `` Vancouver '' or `` Calgary '' ?",
    "answer": "SELECT SUM(enrollment) FROM \"institution\" WHERE location = 'Vancouver' AND province = 'BC' OR location = 'Calgary'</sql>"
  },
  {
    "id": 1676,
    "db_id": "institution_sports",
    "question": "Return all the enrollments of institutions in either the city of Vancouver or the city of Calgary .",
    "answer": "SELECT SUM(SUM(CASE WHEN T2.city = 'VANCOU' THEN T1.enrollment ELSE 0 END)) AS num FROM `institution` AS T1 INNER JOIN `location` AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T2.City IS NULL OR T2.city BETWEEN 'calgary' AND 'vancouver'</sql>"
  },
  {
    "id": 1677,
    "db_id": "institution_sports",
    "question": "Show the provinces that have both institutions founded before 1920 and institutions founded after 1950.",
    "answer": "SELECT T1.Province FROM \"Institution\" AS T1 INNER JOIN 'institution' AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T2.`Institution_ID` IS NOT NULL ORDER BY T1.City LIMIT 1</sql>"
  },
  {
    "id": 1678,
    "db_id": "institution_sports",
    "question": "What are the provinces that have not only institutions founded before 1920, but also institutions founded after 1950?",
    "answer": "SELECT T1.Province FROM \"Championship\" AS T1 INNER JOIN `Institutions` AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE CAST(T2.`Year` AS REAL) < 50</sql>\n<question>What provinces are all colleges founded before 1863 with no buildings or sports venues located there?</question>\n<sql>SELECT DISTINCT"
  },
  {
    "id": 1679,
    "db_id": "institution_sports",
    "question": "How many distinct provinces are the institutions in?",
    "answer": "SELECT COUNT(DISTINCT T2.Province) FROM `institution` AS T1 INNER JOIN \"Province\" AS T2 ON T1.Institution_ID = T2.City WHERE T1.Institution_ID LIKE 'Cal%' GROUP BY T2.Province ORDER BY COUNT(DISTINCT T2.Province) DESC LIMIT 0</sql>"
  },
  {
    "id": 1680,
    "db_id": "institution_sports",
    "question": "Count the number of different provinces that have institutions.",
    "answer": "SELECT COUNT(DISTINCT T2.Province) FROM `institution` AS T1 INNER JOIN `Region` AS T2 ON T1.Institution_ID = T2.Country WHERE T1.City IS NULL AND T1.Province = 'FR' GROUP BY T1.Province ORDER BY COUNT(DISTINCT T1.Province) DESC LIMIT 1</sql>"
  },
  {
    "id": 1681,
    "db_id": "warehouse_1",
    "question": "Select all details of all warehouses.",
    "answer": "SELECT DISTINCT T1.Location, T2.Value, T3.Contents FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.code INNER JOIN Contents AS T3 ON T1.Warehouse = T3.Warehouse WHERE T1.Forecast IS NULL AND T3.Value > 100 ORDER BY T3.Value DESC LIMIT 1</sql>"
  },
  {
    "id": 1682,
    "db_id": "warehouse_1",
    "question": "What is all the information about the warehouses?",
    "answer": "SELECT DISTINCT T1.Location, T3.Contents, T2.value FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse INNER JOIN boxes AS T3 ON T1.Code = T3.Code WHERE T3.Warehouse IS NOT NULL</sql>"
  },
  {
    "id": 1683,
    "db_id": "warehouse_1",
    "question": "Find all different contents stored in New York.",
    "answer": "SELECT T1.Contents FROM Boxes AS T1 INNER JOIN Contents AS T2 ON T1.Code = T2.Code WHERE T1.Location = 'New York' ORDER BY T1.Contents DESC LIMIT 1</sql>"
  },
  {
    "id": 1684,
    "db_id": "warehouse_1",
    "question": "What are all the different contents stored in boxes in New York?",
    "answer": "SELECT DISTINCT T1.Contents FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse WHERE T2.Location = 'NewYork' GROUP BY T1.Contents ORDER BY COUNT(T1.Contents) DESC LIMIT 1</sql>"
  },
  {
    "id": 1685,
    "db_id": "warehouse_1",
    "question": "Select contents of all boxes with a value larger than $150.",
    "answer": "SELECT DISTINCT T2.Contents FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T1.Value > 150</sql>"
  },
  {
    "id": 1686,
    "db_id": "warehouse_1",
    "question": "What are the contents of boxes with value greater than 150?",
    "answer": "SELECT DISTINCT T2.Contents FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse WHERE T1.Value > ( SELECT MAX(VALUE) FROM boxes )</sql>"
  },
  {
    "id": 1687,
    "db_id": "warehouse_1",
    "question": "Select the warehouse code and the average value of the boxes in each warehouse.",
    "answer": "SELECT T2.Warehouse, AVG(T1.Value) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Code GROUP BY T2.Warehouse ORDER BY T1.Warehouse DESC LIMIT 1</sql>"
  },
  {
    "id": 1688,
    "db_id": "warehouse_1",
    "question": "What is the average value of boxes for each warehouse?",
    "answer": "SELECT AVG(T2.Value) FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code GROUP BY T2.Code ORDER BY SUM(T1.Value) DESC LIMIT 1</sql>"
  },
  {
    "id": 1689,
    "db_id": "warehouse_1",
    "question": "Find the average and total values of all boxes.",
    "answer": "SELECT CAST(SUM(T2.Value / COUNT(T1.Boxes)) AS REAL) * 100, SUM(T3.Value) FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T2.Location IS NOT NULL GROUP BY T2.location ORDER BY CAST((SUM(T2.value) / COUNT(T2.Boxes)) AS RE"
  },
  {
    "id": 1690,
    "db_id": "warehouse_1",
    "question": "What are the average and total values across all boxes?",
    "answer": "SELECT CAST(SUM(CASE WHEN T2.Value > 0 THEN T2.value ELSE NULL END)) / COUNT(T1.Warehouse), SUM(T2.Value) FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Code GROUP BY T2.Warehouse ORDER BY sum(CASE WHEN T1.Value > 0 THEN T1.value ELSE NULL END) DESC LIMIT 3"
  },
  {
    "id": 1691,
    "db_id": "warehouse_1",
    "question": "Find the average and total capacity of all warehouses.",
    "answer": "SELECT T2.TotalCapacity, SUM(T1.Capacity) FROM boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse GROUP BY T2.Location ORDER BY SUM(t2.value) DESC LIMIT 1</sql>"
  },
  {
    "id": 1692,
    "db_id": "warehouse_1",
    "question": "What are the average and total capacities across all warehouses?",
    "answer": "SELECT CAST(SUM(T2.Capacity) AS REAL), SUM(T3.TotalCapacity) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Code INNER JOIN Quantity AS T3 ON T1.Warehouse = T3.Warehouse WHERE T1.Location IS NOT NULL AND T3.Value = 1 ORDER BY CAST(SUM(T3.Quantity)"
  },
  {
    "id": 1693,
    "db_id": "warehouse_1",
    "question": "Find the average and maximum value for each different content.",
    "answer": "SELECT CAST(SUM(CASE WHEN T2.Value > 0 THEN T2.value END) AS REAL), MAX(T1.value) FROM Boxes AS T1 INNER JOIN Content AS T2 ON T1.Code = T2.Code ORDER BY T1.Contents DESC LIMIT 3</sql>"
  },
  {
    "id": 1694,
    "db_id": "warehouse_1",
    "question": "What are the average and maximum values for each type of content in boxes?",
    "answer": "SELECT CAST(SUM(CASE WHEN T2.value > 0 THEN T2.Value ELSE NULL END) AS REAL) / COUNT(T1.boxes), SUM(CASE WHEN T3.`Content Type` = 'Box' THEN strftime('%J', T3.Date_received) - strftime('%J', T1.Date_shipped))</sql>"
  },
  {
    "id": 1695,
    "db_id": "warehouse_1",
    "question": "Find the content that has the highest total values in all boxes.",
    "answer": "SELECT DISTINCT T1.Contents FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse ORDER BY SUM(T2.`Value`) DESC LIMIT 1</sql>"
  },
  {
    "id": 1696,
    "db_id": "warehouse_1",
    "question": "What is the content with the greatest value across all boxes?",
    "answer": "SELECT DISTINCT T1.Contents FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse ORDER BY T2.Value DESC LIMIT 1</sql>"
  },
  {
    "id": 1697,
    "db_id": "warehouse_1",
    "question": "Select the average value of all the boxes.",
    "answer": "SELECT SUM(SUM(T2.Value)) / COUNT(DISTINCT T2.Code) AS avg FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Code ORDER BY AVG(T2.Value) DESC LIMIT 1</sql>"
  },
  {
    "id": 1698,
    "db_id": "warehouse_1",
    "question": "What is the average value of boxes?",
    "answer": "SELECT SUM(AVG(T2.Value)) / COUNT(T1.Contents) FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T1.Location = 'box3567'</sql>"
  },
  {
    "id": 1699,
    "db_id": "warehouse_1",
    "question": "Select all distinct contents in all the boxes.",
    "answer": "SELECT T2.Contents FROM Boxes AS T1 INNER JOIN Contents AS T2 ON T1.Code = T2.Code GROUP BY T2.Contents ORDER BY DISTINCT T2.Contents DISTINCT</sql>"
  },
  {
    "id": 1700,
    "db_id": "warehouse_1",
    "question": "What are the different contents in boxes?",
    "answer": "SELECT DISTINCT T2.Contents FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse WHERE T1.Value IS NULL AND T1.Location IN ('N', 'H') ORDER BY T2.Location DESC LIMIT 3</sql>"
  },
  {
    "id": 1701,
    "db_id": "warehouse_1",
    "question": "Find the number of all distinct contents in all the boxes.",
    "answer": "SELECT COUNT(DISTINCT T1.Contents) FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T2.Location LIKE '%Rockville%' GROUP BY T2.Location</sql>"
  },
  {
    "id": 1702,
    "db_id": "warehouse_1",
    "question": "How many different contents are stored in boxes?",
    "answer": "SELECT COUNT(DISTINCT T2.Contents) FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code ORDER BY T2.Name ASC LIMIT 1</sql>"
  },
  {
    "id": 1703,
    "db_id": "warehouse_1",
    "question": "Find all distinct locations of warehouses.",
    "answer": "SELECT T2.Location FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Warehouse = T2.Warehouse WHERE T1.Location IS NOT NULL GROUP BY T2.Location ORDER BY COUNT(DISTINCT t1.Location) DISTINCT T1.Code</sql>"
  },
  {
    "id": 1704,
    "db_id": "warehouse_1",
    "question": "What are the different locations of warehouses?",
    "answer": "SELECT T2.Location FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Warehouse = T2.Warehouse WHERE T1.Code IN ( 'A84930', 'C58975', 'F26425' )</sql>"
  },
  {
    "id": 1705,
    "db_id": "warehouse_1",
    "question": "Find the code of boxes that are stored at the warehouses located at Chicago or New York.",
    "answer": "SELECT DISTINCT T1.Code FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Location WHERE T1.Contents IN ('Red_pizza', 'Green_peppers') AND (T2.city IN ('Chicago') OR T2.city = 'New York')</sql>"
  },
  {
    "id": 1706,
    "db_id": "warehouse_1",
    "question": "What are the codes of boxes stored in warehouses in either Chicago or New York?",
    "answer": "SELECT DISTINCT T1.Code FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Location = T2.Code WHERE T2.City = 'Chicago' AND T2.State = 'NY' ORDER BY T1.Warehouse DESC LIMIT 1</sql>"
  },
  {
    "id": 1707,
    "db_id": "warehouse_1",
    "question": "Find the total value of boxes in the warehouses located at Chicago or New York.",
    "answer": "SELECT SUM(Value) FROM Boxes WHERE Location = 'Chicago' OR Location = 'New York' GROUP BY Location ORDER BY SUM(Value) DESC LIMIT 1</sql>"
  },
  {
    "id": 1708,
    "db_id": "warehouse_1",
    "question": "What is the total value of boxes located in Chicago or New York?",
    "answer": "SELECT SUM(Value) FROM Boxes WHERE Location IN ('Chicago', 'New York')</sql>"
  },
  {
    "id": 1709,
    "db_id": "warehouse_1",
    "question": "Find all contents present in warehouses located in Chicago and those located in New York.",
    "answer": "SELECT DISTINCT T2.Contents FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Warehouse = T2.Code WHERE T1.Location IN ('Chicago', 'New York')</sql>"
  },
  {
    "id": 1710,
    "db_id": "warehouse_1",
    "question": "Find the contents that are stored in both Chicago and New York.",
    "answer": "SELECT DISTINCT T1.Contents FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse WHERE T2.Location = 'Chicago' AND T2.Location = 'New York' GROUP BY T1.Contents ORDER BY SUM(T1.Value) / COUNT(T1.Code) DESC LIMIT 3</sql>"
  },
  {
    "id": 1711,
    "db_id": "warehouse_1",
    "question": "Find the type of contents that are not in the warehouses located at New York.",
    "answer": "SELECT DISTINCT T1.type FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse WHERE T2.Location = 'New York'</sql>"
  },
  {
    "id": 1712,
    "db_id": "warehouse_1",
    "question": "What types of contents cannot be found in warehouses in New York?",
    "answer": "SELECT DISTINCT T2.Contents FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse WHERE T1.Location IS NOT NULL GROUP BY T2.Contents ORDER BY COUNT(T2.Contents) DESC LIMIT 1</sql>"
  },
  {
    "id": 1713,
    "db_id": "warehouse_1",
    "question": "Find the location of the warehouses which have contents Rocks but not Scissors.",
    "answer": "SELECT DISTINCT T2.Location FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse WHERE T1.Contents = 'Rocks' AND T2.Warehouse IS NULL AND T1.Warehouse IS NOT NULL</sql>"
  },
  {
    "id": 1714,
    "db_id": "warehouse_1",
    "question": "What are the locations of warehouses that have boxes containing Rocks but not Scissors?",
    "answer": "SELECT DISTINCT T2.Location FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse WHERE T1.Contents != 'Rocks' AND T1.Value > 0 INTEGER GROUP BY T2.Location ORDER BY COUNT(T2.Code) DESC LIMIT 1</sql>"
  },
  {
    "id": 1715,
    "db_id": "warehouse_1",
    "question": "Find the warehouses which store contents Rocks or Scissors.",
    "answer": "SELECT DISTINCT T1.Location FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse WHERE T1.Contents LIKE 'Rock%' OR T1.Contents LIKE 'Sixpennies%'</sql>"
  },
  {
    "id": 1716,
    "db_id": "warehouse_1",
    "question": "What are the distinct warehouses that have boxes with Rocks or Scissors as contents?",
    "answer": "SELECT T1.Code, T2.contents FROM Boxes AS T1 INNER JOIN Contents AS T2 ON T1.Code = T2.Code WHERE T2.content IN ('ROCK','SCISSORS') GROUP BY T2.content ORDER BY COUNT(T2.content) DISTINCT T1.Code</sql>"
  },
  {
    "id": 1717,
    "db_id": "warehouse_1",
    "question": "Find the location of the warehouses which store contents Rocks and Scissors.",
    "answer": "SELECT DISTINCT T2.Location FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse WHERE T1.Contents = 'Rocks' AND T1.Contents = 'Scissors'</sql>"
  },
  {
    "id": 1718,
    "db_id": "warehouse_1",
    "question": "What are the locations of warehouses in which boxes that contain Rocks and Scissors are kept?",
    "answer": "SELECT DISTINCT T2.Location FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse WHERE T1.Contents LIKE 'Rocks%' AND T1.Contents LIKE '%Scissors%' ORDER BY T2.Location DESC LIMIT 1</sql>"
  },
  {
    "id": 1719,
    "db_id": "warehouse_1",
    "question": "List the code and contents of all boxes sorted by their values.",
    "answer": "SELECT DISTINCT T1.Code, T2.Contents FROM Boxes AS T1 INNER JOIN Contents AS T2 ON T1.Code = T2.Code ORDER BY T2.Value DESC</sql>"
  },
  {
    "id": 1720,
    "db_id": "warehouse_1",
    "question": "What are the codes and corresponding contents of all the boxes, ordered by their values?",
    "answer": "SELECT DISTINCT T1.Code , T2.Contents FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code ORDER BY T2.`Value` DESC LIMIT 1</sql>"
  },
  {
    "id": 1721,
    "db_id": "warehouse_1",
    "question": "Find the code and contents of the box with the lowest value.",
    "answer": "SELECT DISTINCT T1.Code, T2.Contents FROM Boxes AS T1 INNER JOIN Contents AS T2 ON T1.Code = T2.Code ORDER BY (T1.Value < T2.Value LIMIT 1) LIMIT 1</sql>"
  },
  {
    "id": 1722,
    "db_id": "warehouse_1",
    "question": "What is the code and contents for the box that has the smallest value?",
    "answer": "SELECT DISTINCT T1.Code, T2.Contents FROM Boxes AS T1 INNER JOIN warehouses AS T2 ON T1.Warehouse = T2.Code ORDER BY T2.Value LIMIT 1</sql>"
  },
  {
    "id": 1723,
    "db_id": "warehouse_1",
    "question": "Find the unique contents of all boxes whose value is higher than the average value of all boxes.",
    "answer": "SELECT DISTINCT T1.Contents FROM Boxes AS T1 INNER JOIN ( SELECT DISTINCT CONVERT(VALUE, 20), COUNT(DISTINCT T2.Value) FROM Warehouses AS T2 INNER JOIN Contents AS T3 ON T2.Warehouse = T3.Code GROUP BY DISTINCT T2.value ORDER BY SUM(t1.value) ) AS T4 ON T1.Warehouse = T4"
  },
  {
    "id": 1724,
    "db_id": "warehouse_1",
    "question": "What are the different contents of boxes for which the value is higher than the average value across all boxes?",
    "answer": "SELECT DISTINCT T1.Contents FROM Boxes AS T1 INNER JOIN Warehouse AS T2 ON T1.Code = T2.Warehouse ORDER BY SUM(T1.Value) > ( SELECT AVG(T2.VALUE) FROM ( SELECT CAST(SUM(CASE WHEN t1.Contents IN (''\\t' , '09641035') THEN T2.Value END) AS REAL ) AS v FROM Bo"
  },
  {
    "id": 1725,
    "db_id": "warehouse_1",
    "question": "List all different types of contents ordered by contents.",
    "answer": "SELECT DISTINCT T1.Contents FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code ORDER BY T2.Contents</sql>"
  },
  {
    "id": 1726,
    "db_id": "warehouse_1",
    "question": "What are the different contents of boxes, ordered alphabetically?",
    "answer": "SELECT DISTINCT T1.Contents FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse ORDER BY T2.Location DESC LIMIT 1</sql>"
  },
  {
    "id": 1727,
    "db_id": "warehouse_1",
    "question": "Find the code of all boxes whose value is higher than the value of any boxes with Rocks as content.",
    "answer": "SELECT DISTINCT T1.Code FROM Boxes AS T1 INNER JOIN Rocks AS T2 ON T1.Boxes = T2.Code WHERE T2.Value > 0 ORDER BY T2.Value DESC LIMIT 1</sql>"
  },
  {
    "id": 1728,
    "db_id": "warehouse_1",
    "question": "What are the codes of boxes for which the value is greater than the value of any box that contains Rocks?",
    "answer": "SELECT DISTINCT T1.Code FROM Boxes AS T1 INNER JOIN Contents AS T2 ON T1.BoxID = T2.BoxID WHERE T2.Value > ( SELECT SUM(Value) FROM boxes AS T3 INNER JOIN containers AS T4 ON T3.Warehouse = T4.Warehouse WHERE T3.Contents LIKE 'Rock%' ORDER BY T2.Value LIMIT 1 )</sql>"
  },
  {
    "id": 1729,
    "db_id": "warehouse_1",
    "question": "Find the code and content of all boxes whose value is higher than the value of all boxes with Scissors as content.",
    "answer": "SELECT DISTINCT T1.Code, T2.Contents FROM Boxes AS T1 INNER JOIN Box AS T2 ON T1.Warehouse = T2.Warehouse WHERE T2.Content LIKE '%Scissors%' GROUP BY T1.Code ORDER BY SUM(T2.Value) DESC LIMIT 1</sql>"
  },
  {
    "id": 1730,
    "db_id": "warehouse_1",
    "question": "What are the codes and corresponding contents of boxes for which their value is higher than the values of all boxes containing Scissors?",
    "answer": "SELECT DISTINCT T1.Code, T2.Contents FROM Boxes AS T1 INNER JOIN Contents AS T2 ON T1.Warehouse = T2.Warehouse WHERE T1.Value > ( SELECT MAX(VALUE) FROM Contents GROUP BY T1.Code )</sql>"
  },
  {
    "id": 1731,
    "db_id": "warehouse_1",
    "question": "Find the total value of boxes stored in the warehouse with the largest capacity.",
    "answer": "SELECT SUM(value) FROM Boxes WHERE Location = 'New York' GROUP BY T2.Warehouse ORDER BY MAX(T1.Value) DESC LIMIT 1</sql>"
  },
  {
    "id": 1732,
    "db_id": "warehouse_1",
    "question": "What is the total value of boxes kept in the warehouse with the greatest capacity?",
    "answer": "SELECT SUM(Value) FROM Boxes WHERE Warehouse = ( SELECT MAX(Warehouse) FROM Boxes )</sql>"
  },
  {
    "id": 1733,
    "db_id": "warehouse_1",
    "question": "Select the warehouse code and the average value of the boxes only for those warehouses where the average value of the boxes is greater than 150.",
    "answer": "SELECT DISTINCT T2.Warehouse, AVG(T3.value) AS avg FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Code INNER JOIN Contents AS T3 ON T1.Location = T3.Code ORDER BY T3.Value DESC LIMIT 1</sql>"
  },
  {
    "id": 1734,
    "db_id": "warehouse_1",
    "question": "What are the average values of boxes for each warehouse than has an average value greater than 150?",
    "answer": "SELECT T3.Value, SUM(T2.Value) FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse GROUP BY T3.Warehouse ORDER BY SUM(SUM(T3.Value)) / COUNT(T3.Warehouse) DESC LIMIT 1</sql>"
  },
  {
    "id": 1735,
    "db_id": "warehouse_1",
    "question": "Find the total value and number of boxes for each content type.",
    "answer": "SELECT T1.value, COUNT(T2.Contents) FROM Boxes AS T1 INNER JOIN ContentTypes AS T2 ON T1.Code = T2.ContentType GROUP BY T1.Contents</sql>"
  },
  {
    "id": 1736,
    "db_id": "warehouse_1",
    "question": "For each content, what is the total value and number of boxes?",
    "answer": "SELECT SUM(Value) , COUNT(DISTINCT T2.Warehouse), COUNT(T1.Warehouse) FROM Boxes AS T1 INNER JOIN Contents AS T2 ON T1.Code = T2.Code GROUP BY T2.Value ORDER BY SUM(T1.value__REAL) DESC LIMIT 1</sql>"
  },
  {
    "id": 1737,
    "db_id": "warehouse_1",
    "question": "Find the total, average, and maximum capacity for different locations.",
    "answer": "SELECT T2.value, SUM(T1.Value), MAX(T1.Value), SUM(T2.value) FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code GROUP BY T2.Location ORDER BY SUM(t2.Value) DESC LIMIT 3</sql>"
  },
  {
    "id": 1738,
    "db_id": "warehouse_1",
    "question": "For each location, what are the total, average, and maximum capacities of warehouses?",
    "answer": "SELECT T2.location , SUM(T1.Value), MAX(T1.Value) AS total_avg ,  sum(T1.value) AS max FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Code GROUP BY T1.Location ORDER BY ( SELECT SUM(CASE WHEN T3.location = 'xxxxx' THEN T2.Value END ) AS avg ,  MAX(T2"
  },
  {
    "id": 1739,
    "db_id": "warehouse_1",
    "question": "Find the total capacity of all warehouse locations.",
    "answer": "SELECT SUM(capacity) FROM Warehouses WHERE Location IN ('Lake County', 'Covington')</sql>"
  },
  {
    "id": 1740,
    "db_id": "warehouse_1",
    "question": "What is the total capacity of all warehouses?",
    "answer": "SELECT SUM(Capacity) FROM Warehouses GROUP BY Warehouse ORDER BY COUNT(Warehouse) DESC LIMIT 1</sql>"
  },
  {
    "id": 1741,
    "db_id": "warehouse_1",
    "question": "Find the value of the most expensive boxes saved in each warehouse location.",
    "answer": "SELECT DISTINCT T2.Value, T3.Location FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse ORDER BY T3.Capacity DESC LIMIT 1</sql>"
  },
  {
    "id": 1742,
    "db_id": "warehouse_1",
    "question": "For each warehouse location, what is the value of the most expensive box?",
    "answer": "SELECT DISTINCT T2.Value FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Location = T2.Code ORDER BY T2.value DESC LIMIT 1</sql>"
  },
  {
    "id": 1743,
    "db_id": "warehouse_1",
    "question": "Select the warehouse codes along with the number of boxes in each warehouse.",
    "answer": "SELECT DISTINCT T1.Code, SUM(T2.Value) FROM ( SELECT T3.`Warehouse`, COUNT(T2.contents) AS num FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.BoxID = T2.Code GROUP BY T2.Code ORDER BY COUNT(T2.Contents), T2.Code</sql>"
  },
  {
    "id": 1744,
    "db_id": "warehouse_1",
    "question": "How many boxes are there with each warehouse ?",
    "answer": "SELECT SUM(DISTINCT T1.Value) FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code ORDER BY T1.value DESC LIMIT 1</sql>"
  },
  {
    "id": 1745,
    "db_id": "warehouse_1",
    "question": "Find the number of different locations where Rocks are stored.",
    "answer": "SELECT COUNT(DISTINCT T2.Location) FROM Boxes AS T1 INNER JOIN Rocks AS T2 ON T1.Code = T2.Code WHERE T1.Contents = 'Rocks' GROUP BY T2.Location ORDER BY COUNT(DISTINCT T2.Location) DESC LIMIT 1</sql>"
  },
  {
    "id": 1746,
    "db_id": "warehouse_1",
    "question": "In how many different warehouses are Rocks stored within boxes?",
    "answer": "SELECT COUNT(DISTINCT T2.Warehouse) FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Code GROUP BY T2.Code ORDER BY COUNT(DISTINCT T1.Contents), COUNT(DISTINCT T2.Code) DESC LIMIT 20</sql>"
  },
  {
    "id": 1747,
    "db_id": "warehouse_1",
    "question": "Select the code of each box, along with the name of the city the box is located in.",
    "answer": "SELECT DISTINCT T1.Code , T2.Location, T2.Name FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T2.City = 'Atlanta'</sql>"
  },
  {
    "id": 1748,
    "db_id": "warehouse_1",
    "question": "What are the codes of all boxes, as well as the locations of the warehouses they are in?",
    "answer": "SELECT DISTINCT T1.Code , T2.Location FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code ORDER BY T1.Code, T2.Location</sql>"
  },
  {
    "id": 1749,
    "db_id": "warehouse_1",
    "question": "Select the codes of all the boxes located in Chicago.",
    "answer": "SELECT T2.Code FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T1.Location = 'Chicago'</sql>"
  },
  {
    "id": 1750,
    "db_id": "warehouse_1",
    "question": "What are the codes of boxes stored in warehouses in Chicago?",
    "answer": "SELECT DISTINCT T1.Code FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse WHERE T2.Location = 'Chicago' AND T2.Capacity BETWEEN 0 AND 4</sql>"
  },
  {
    "id": 1751,
    "db_id": "warehouse_1",
    "question": "Find the number of boxes saved in each warehouse.",
    "answer": "SELECT T1.value , SUM(T2.value) FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code GROUP BY T2.Location ORDER BY COUNT(T1.code)</sql>"
  },
  {
    "id": 1752,
    "db_id": "warehouse_1",
    "question": "How many boxes are stored in each warehouse?",
    "answer": "SELECT SUM(COUNT(DISTINCT T2.Code)) / COUNT(DISTINCT T1.Warehouse), T2.Location FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Code WHERE T1.Location IN ( SELECT DISTINCT T3.Location FROM Warehouses AS T3 INNER JOIN Boxes AS T4 ON T3.Warehouse = T4.Warehouse"
  },
  {
    "id": 1753,
    "db_id": "warehouse_1",
    "question": "Find the number of distinct types of contents in each warehouse.",
    "answer": "SELECT DISTINCT T2.Contents, SUM(T1.Value) FROM boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code GROUP BY T2.Location ORDER BY COUNT(T1.Contents) DESC LIMIT 1</sql>"
  },
  {
    "id": 1754,
    "db_id": "warehouse_1",
    "question": "How many different types of contents are stored in each warehouse?",
    "answer": "SELECT T1.contents, COUNT(DISTINCT T2.type) FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Contents ORDER BY DISTINCT t2.Type</sql>"
  },
  {
    "id": 1755,
    "db_id": "warehouse_1",
    "question": "Select the codes of all warehouses that are above capacity.",
    "answer": "SELECT T2.Code FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Code WHERE T1.Capacity > 0 GROUP BY T2.Location ORDER BY SUM(T2.Value) DESC LIMIT 1</sql>"
  },
  {
    "id": 1756,
    "db_id": "warehouse_1",
    "question": "What are the codes of warehouses that have more boxes than their capacity?",
    "answer": "SELECT DISTINCT T1.Code FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Location = T2.Location WHERE T2.Value > ( SELECT SUM(MAX(VALUE)) FROM Boxes ) GROUP BY T1.Code ORDER BY COUNT(T2.Value) DESC LIMIT 3</sql>"
  },
  {
    "id": 1757,
    "db_id": "warehouse_1",
    "question": "Find the total values of boxes that are not in the warehouses located at Chicago.",
    "answer": "SELECT SUM(SUM(T2.Value)) - SUM(SUM(T1.Value)) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Code WHERE T2.Location IS NULL ORDER BY T3.Warehouse DESC LIMIT 0</sql>"
  },
  {
    "id": 1758,
    "db_id": "warehouse_1",
    "question": "What is the total value of boxes contained in any location but Chicago?",
    "answer": "SELECT SUM(Value) FROM Boxes WHERE Location = 'Chicago' GROUP BY CONVERT(int, T2.Location), T1.Warehouse ORDER BY SUM(value) DESC LIMIT 3</sql>"
  },
  {
    "id": 1759,
    "db_id": "university_rank",
    "question": "Show name, city, and state for all universities in  alphabetical order of university name.",
    "answer": "SELECT DISTINCT T2.University_Name, T3.City, T1.State FROM `university` AS T1 INNER JOIN 'overall_ranking' AS T2 ON T2.University_ID = T1.University_ID ORDER BY T1.University_Name</sql>"
  },
  {
    "id": 1760,
    "db_id": "university_rank",
    "question": "What are the names, cities, and states of all universities in alphabetical order (by name of the university).",
    "answer": "SELECT DISTINCT T2.University_Name FROM \"university AS T1 INNER JOIN `overall_ranking` AS T2 ON T1.University_ID = T2.University_ID ORDER BY T2.University_Name LIMIT 1</sql>"
  },
  {
    "id": 1761,
    "db_id": "university_rank",
    "question": "How many universities are in Illinois or Ohio?",
    "answer": "SELECT COUNT(T1.University_ID), T2.State FROM \"university AS T1 INNER JOIN 'overall_ranking' AS T2 ON T1.University_ID = T2.University_ID WHERE T1.State LIKE '%Illinois%' OR T1.state LIKE '%Ohio%''</sql>"
  },
  {
    "id": 1762,
    "db_id": "university_rank",
    "question": "What is the total number of universities located in Illinois or Ohio?",
    "answer": "SELECT COUNT(T1.University_ID) FROM \"university\" AS T1 INNER JOIN state AS T2 ON T1.State = T2.State WHERE T1.City = 'Chicago' AND T1.State IN ('Ohio') AND T1.State LIKE '%Illinois%'</sql>"
  },
  {
    "id": 1763,
    "db_id": "university_rank",
    "question": "What is the maximum, average, and minimum enrollment for universities?",
    "answer": "SELECT CAST(SUM(CASE WHEN T2.Enrollment = 15 THEN 1 ELSE 0 END) AS REAL), SUM(CASE WHEN T2.Enrollment > 32 AND T2.Enrollment < 9476 THEN 1 ELSE 0 END) , SUM(CASE WHEN T2.Enrollment IS NULL AND T2.Enrollment <= 25 THEN 1 ELSE 0 END) AS avg"
  },
  {
    "id": 1764,
    "db_id": "university_rank",
    "question": "What is the maximum, average, and minimum enrollment for all universities?",
    "answer": "SELECT CAST(SUM(CASE WHEN T2.Enrollment = 'max' THEN T1.enrollment END) AS REAL), SUM(CASE WHEN T2.Enrollment > 150 THEN 1 ELSE 0 END) AS num, SUM(CASE WHEN T2.enrollment BETWEEN 36 AND 64 THEN T2.enrollment END) - SUM(CASE WHEN T2.enrollment BET"
  },
  {
    "id": 1765,
    "db_id": "university_rank",
    "question": "List team name for all universities with enrollments above the average.",
    "answer": "SELECT DISTINCT T2.Team_Name FROM \"university\" AS T1 INNER JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID ORDER BY T2.Total DESC LIMIT 1</sql>"
  },
  {
    "id": 1766,
    "db_id": "university_rank",
    "question": "What are the names of all teams from universities that have more people enrolled than average ?",
    "answer": "SELECT DISTINCT T2.Team_Name FROM \"university\" AS T1 INNER JOIN team AS T2 ON T1.University_ID = T2.University_ID GROUP BY T1.University_ID ORDER BY SUM(T1.Enrollment) / COUNT(T2.Team_Name), CAST(SUM(CASE WHEN T2.Involved THEN 'Involved' ELSE NULL END) AS REAL) AS avg"
  },
  {
    "id": 1767,
    "db_id": "university_rank",
    "question": "Show all home conferences.",
    "answer": "SELECT T2.home_conference FROM \"university\" AS T1 INNER JOIN \"team_name\" AS T2 ON T1.University_ID = T2.Team_ID ORDER BY T1.City</sql>"
  },
  {
    "id": 1768,
    "db_id": "university_rank",
    "question": "What are the different home conferences from the university table?",
    "answer": "SELECT T1.Home_Conference FROM \"university\" AS T1 INNER JOIN \"home_conference\" AS T2 ON T1.University_ID = T2.University_ID GROUP BY T1.University_Name ORDER BY T3.Home_Conference DESC LIMIT 0, 4</sql>"
  },
  {
    "id": 1769,
    "db_id": "university_rank",
    "question": "Show all home conferences and the number of universities in each conference.",
    "answer": "SELECT DISTINCT T2.home_conference, COUNT(T1.University_ID) FROM 'university' AS T1 INNER JOIN 'overall_ranking' AS T2 ON T1.University_ID = T2.University_ID GROUP BY T2.Home_Conference ORDER BY DISTINCT T2.Reputation_point DESC</sql>"
  },
  {
    "id": 1770,
    "db_id": "university_rank",
    "question": "For every home conference, how many universities attended that conference?",
    "answer": "SELECT COUNT(T1.University_ID) FROM overview AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID WHERE T1.City IN ( SELECT city FROM overview WHERE T2.state = 'CA' GROUP BY T1.city ORDER BY COUNT(T2.home_conference) DESC LIMIT 1 )</sql>"
  },
  {
    "id": 1771,
    "db_id": "university_rank",
    "question": "Which state has most number of universities?",
    "answer": "SELECT DISTINCT T2.State FROM ( SELECT COUNT(DISTINCT T2.University_ID) AS Total , ROWNUM AS P1, T3.State AS State FROM ( SELECT distinct T1.state, T2.University_name, T2.city, T1.Enrollment AS E0, T1.PRIMARY_KEY FROM `university` AS T1 INNER JOIN `state` AS T2 ON T1.Univers"
  },
  {
    "id": 1772,
    "db_id": "university_rank",
    "question": "What is the state with the most universities?",
    "answer": "SELECT DISTINCT T2.State FROM \"university\" AS T1 INNER JOIN \"university\" AS T2 ON T1.University_ID = T2.University_ID WHERE T2.State IN ( SELECT DISTINCT State FROM 'all-states' ORDER BY COUNT(T3.state) DESC LIMIT 1 ) GROUP BY T3.state ORDER BY count(T1.City), count(T3.state) DESC LIMIT 1</"
  },
  {
    "id": 1773,
    "db_id": "university_rank",
    "question": "Show all home conferences with average enrollment of universities above 2000.",
    "answer": "SELECT DISTINCT T1.home_conference FROM university AS T1 INNER JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID GROUP BY T1.city ORDER BY SUM(T1.enrollment) / COUNT(T1.city) DESC LIMIT 2</sql>"
  },
  {
    "id": 1774,
    "db_id": "university_rank",
    "question": "What are the home conferences that have an average university enrollment above 2000?",
    "answer": "SELECT DISTINCT T1.home_conference, SUM(T2.university.enrollment / COUNT(T1.university)) AS avg FROM \"university\" AS T1 INNER JOIN \"university\" AS T2 ON T1.University_ID = T2.University_ID WHERE T2.State = 'FL' GROUP BY T2.state ORDER BY SUM(CASE WHEN T2.state LIKE '%FL%' THEN 1"
  },
  {
    "id": 1775,
    "db_id": "university_rank",
    "question": "Which conference has the least number of total enrollment?",
    "answer": "SELECT DISTINCT T2.conference FROM overall_ranking AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID WHERE T1.`total` = ( SELECT SUM(T1.Total) FROM overall_ranking AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID ) AND T2.city IS NULL GROUP BY T2.city"
  },
  {
    "id": 1776,
    "db_id": "university_rank",
    "question": "What are the home conferences with the fewest number of people enrolled?",
    "answer": "SELECT DISTINCT T1.home_conference FROM \"university\" AS T1 INNER JOIN 'overall_ranking' AS T2 ON T1.University_ID = T2.University_ID ORDER BY T2.Research_point DESC LIMIT 0</sql>"
  },
  {
    "id": 1777,
    "db_id": "university_rank",
    "question": "List all major name and major code in the order of their major code",
    "answer": "SELECT DISTINCT T2.major, T3.major FROM \"major\" AS T1 INNER JOIN \"university\" AS T2 ON T1.University_ID = T2.University_ID ORDER BY T3.major DESC LIMIT 1</sql>"
  },
  {
    "id": 1778,
    "db_id": "university_rank",
    "question": "What are the names and codes for all majors ordered by their code?",
    "answer": "SELECT DISTINCT T2.name, T3.code FROM \"major\" AS T1 INNER JOIN \"university\" AS T2 ON T1.University_ID = T2.University_ID ORDER BY T3.code</sql>"
  },
  {
    "id": 1779,
    "db_id": "university_rank",
    "question": "Show all majors and major ranks for the university with name Augustana College.",
    "answer": "SELECT T1.Major_Name, T2.Major_Rank FROM `major` AS T1 INNER JOIN `university` AS T2 ON T1.University_ID = T2.University_ID WHERE T2.State = 'Illinois' AND T1.Major_Code = 'MAJOR_D'</sql>"
  },
  {
    "id": 1780,
    "db_id": "university_rank",
    "question": "What are the ranks and names of all majors at Augustana College?",
    "answer": "SELECT DISTINCT T2.name, T3.major_code FROM \"major\" AS T1 INNER JOIN \"university\" AS T2 ON T1.University_ID = T2.University_ID INNER JOIN \"overall_ranking\" AS T3 ON T2.Major_ID = T3.University_ID ORDER BY T1.name, T1.major DESC LIMIT 1</sql>"
  },
  {
    "id": 1781,
    "db_id": "university_rank",
    "question": "What is the name, city, state of the university with a rank 1 on Accounting major?",
    "answer": "SELECT DISTINCT T2.University_Name, T2.City, T2.State FROM `major` AS T1 INNER JOIN \"university\" AS T2 ON T1.University_ID = T2.University_ID WHERE T2.University_Name = 'Accounting' ORDER BY T2.State DESC LIMIT 1</sql>"
  },
  {
    "id": 1782,
    "db_id": "university_rank",
    "question": "What is the name, city, and state of the university with number 1 ranked Accounting major?",
    "answer": "SELECT DISTINCT T2.University_Name, T2.City, T2.State FROM \"university\" AS T1 INNER JOIN `major` AS T2 ON T1.University_ID = T2.University_ID ORDER BY T2.Major_Code DESC LIMIT 1</sql>"
  },
  {
    "id": 1783,
    "db_id": "university_rank",
    "question": "What is the name of the university that has most number of majors with rank 1?",
    "answer": "SELECT DISTINCT T2.University_Name FROM \"overall_ranking\" AS T1 INNER JOIN \"major\" AS T2 ON T1.University_ID = T2.Major_ID WHERE T1.Rank > 9 ORDER BY T2.Major_Code DESC LIMIT 1</sql>"
  },
  {
    "id": 1784,
    "db_id": "university_rank",
    "question": "What is the name of the university with the most majors ranked number 1?",
    "answer": "SELECT DISTINCT T2.University_Name FROM \"overall_ranking\" AS T1 INNER JOIN \"major\" AS T2 ON T1.University_ID = T2.Major_ID ORDER BY T1.Total DESC LIMIT 1</sql>"
  },
  {
    "id": 1785,
    "db_id": "university_rank",
    "question": "Show all university names without a major with rank 1?",
    "answer": "SELECT T2.University_Name FROM \"overall_ranking\" AS T1 INNER JOIN 'university' AS T2 ON T1.University_ID = T2.University_ID WHERE T1.Rank = 1 ORDER BY T1.Reputation_point DESC LIMIT 1</sql>"
  },
  {
    "id": 1786,
    "db_id": "university_rank",
    "question": "What are the names of all universities without any majors ranked number 1?",
    "answer": "SELECT T3.name FROM \"university\" AS T1 INNER JOIN major AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Major_id IN ( SELECT MAX(T2.major_id) FROM major AS T2 INNER JOIN `overall_ranking` AS T3 ON T2.Major_id = T3.University_ID WHERE T1.State = 'FL' AND"
  },
  {
    "id": 1787,
    "db_id": "university_rank",
    "question": "Show all university names with both major Accounting and major Urban Education.",
    "answer": "SELECT T1.University_Name FROM \"university\" AS T1 INNER JOIN \"major\" AS T2 ON T1.University_ID = T2.Major_ID WHERE T1.Major_Code = 'Urban Education' AND T2.Major_Code = 'Accounting'</sql>"
  },
  {
    "id": 1788,
    "db_id": "university_rank",
    "question": "What are the names of all universities that have both Accounting and Urban Education majors?",
    "answer": "SELECT T1.University_Name FROM \"university\" AS T1 INNER JOIN major AS T2 ON T1.University_ID = T2.University_ID WHERE T2.`Major_Code` = 'ACCOUNTING' AND T2.`Major_Code` = 'Urban'</sql>"
  },
  {
    "id": 1789,
    "db_id": "university_rank",
    "question": "What is the name and overall ranking of universities in Wisconsin state?",
    "answer": "SELECT DISTINCT T2.University_Name, T3.Overall_ranking FROM university AS T1 INNER JOIN major AS T2 ON T1.University_ID = T2.Major_ID INNER JOIN overall_ranking AS T3 ON T1.University_ID = T3.University_ID WHERE T3.State = 'wisconsin'</sql>"
  },
  {
    "id": 1790,
    "db_id": "university_rank",
    "question": "What is the name and rank of every university in Wisconsin?",
    "answer": "SELECT DISTINCT T2.University_Name, T3.Rank FROM \"university AS T1 INNER JOIN 'overall_ranking' AS T2 ON T1.University_ID = T2.University_ID WHERE T1.\"State\" = 'WI' ORDER BY T2.REP DESC LIMIT 1</sql>"
  },
  {
    "id": 1791,
    "db_id": "university_rank",
    "question": "What is the university name with highest research point?",
    "answer": "SELECT DISTINCT T2.University_Name FROM \"overall_ranking\" AS T1 INNER JOIN \"university\" AS T2 ON T1.University_ID = T2.University_ID WHERE T1.Rank = ( SELECT MAX(RANK) FROM overall_ranking ) LIMIT 1</sql>"
  },
  {
    "id": 1792,
    "db_id": "university_rank",
    "question": "What is the name of the university with the most research points?",
    "answer": "SELECT DISTINCT T2.University_Name FROM \"overall_ranking\" AS T1 INNER JOIN \"university\" AS T2 ON T1.University_ID = T2.University_ID GROUP BY T2.University ORDER BY SUM(T2.Research_point) DESC LIMIT 1</sql>"
  },
  {
    "id": 1793,
    "db_id": "university_rank",
    "question": "List all university names in ascending order of their reputation points.",
    "answer": "SELECT DISTINCT T2.University_Name FROM \"overall_ranking\" AS T1 INNER JOIN \"university\" AS T2 ON T1.University_ID = T2.University_ID ORDER BY T1.reputation_point DESC LIMIT 1</sql>"
  },
  {
    "id": 1794,
    "db_id": "university_rank",
    "question": "What are the names of all universities in ascending order of reputation points?",
    "answer": "SELECT DISTINCT T2.University_Name FROM \"overall_ranking AS T1 INNER JOIN \"university AS T2 ON T1.University_ID = T2.University_ID ORDER BY T1.RESTORATIONPOINTS DESC LIMIT 1</sql>"
  },
  {
    "id": 1795,
    "db_id": "university_rank",
    "question": "What is the name of university with major Accounting ranked 3 or above?",
    "answer": "SELECT DISTINCT T2.University_Name FROM \"overall_ranking\" AS T1 INNER JOIN \"university\" AS T2 ON T1.University_ID = T2.University_ID WHERE T1.rank LIKE '%Accounting%' ORDER BY T1.rank DESC LIMIT 3</sql>"
  },
  {
    "id": 1796,
    "db_id": "university_rank",
    "question": "What are the names of the university with an Accounting major ranked 3 or higher?",
    "answer": "SELECT DISTINCT T2.University_Name FROM \"overall_ranking\" AS T1 INNER JOIN `university` AS T2 ON T1.University_ID = T2.University_ID WHERE T1.rank LIKE '3%' GROUP BY T2.University ORDER BY SUM(T1.REPRINT) DESC LIMIT 3</sql>"
  },
  {
    "id": 1797,
    "db_id": "university_rank",
    "question": "What is the total enrollment of universities with a overall rank 5 or below?",
    "answer": "SELECT SUM(SUM(T2.enrollment)) FROM university AS T1 INNER JOIN \"overall_ranking\" AS T2 ON T1.University_ID = T2.university_id WHERE T2.rank < 3 AND T2.reputation_point <= 794</sql>\n</question>"
  },
  {
    "id": 1798,
    "db_id": "university_rank",
    "question": "What is the total number of students enrolled in an university with a rank of 5 or below?",
    "answer": "SELECT SUM(COUNT(T2.student_id)) FROM `university` AS T1 INNER JOIN 'overall_ranking' AS T2 ON T1.University_ID = T2.University_ID WHERE T1.Rank BETWEEN 5 AND 1 ORDER BY T2.Total LIMIT 1</sql>"
  },
  {
    "id": 1799,
    "db_id": "university_rank",
    "question": "Find the name and Citation point of the universities whose reputation points are top 3 and above.",
    "answer": "SELECT DISTINCT T2.University_Name, T2.Research_point , T2.Citation_point FROM `university` AS T1 INNER JOIN `major` AS T2 ON T1.University_ID = T2.Major_ID ORDER BY T1.`Reputation_point` + 3 DESC LIMIT 3</sql>"
  },
  {
    "id": 1800,
    "db_id": "university_rank",
    "question": "What is the name and citation point of the unversities with the top 3 reputation points?",
    "answer": "SELECT DISTINCT T2.University_Name, T2.REP(T1.Research_point) FROM 'university' AS T1 INNER JOIN 'overall_ranking' AS T2 ON T1.University_ID = T2.University_ID ORDER BY T1.Total DESC LIMIT 3</sql>"
  },
  {
    "id": 1801,
    "db_id": "university_rank",
    "question": "which states do have more than two universities with enrollment smaller than 3000?",
    "answer": "SELECT DISTINCT T2.State FROM university AS T1 INNER JOIN state AS T2 ON T1.University_ID = T2.University_ID WHERE T1.enrollment <  3000 GROUP BY T2.State ORDER BY COUNT(T2.state) > 1</sql>"
  },
  {
    "id": 1802,
    "db_id": "university_rank",
    "question": "What are the states that have more than 2 universities with an enrollment less than 3000?",
    "answer": "SELECT DISTINCT T1.State FROM university AS T1 INNER JOIN `university` AS T2 ON T1.University_ID = T2.University_ID ORDER BY T1.STATE, T2.Enrollment LIMIT 2</sql>"
  },
  {
    "id": 1803,
    "db_id": "movie_2",
    "question": "Find the titles of movies that don\u2019t have any rating.",
    "answer": "SELECT DISTINCT T2.Title FROM MovieTheaters AS T1 INNER JOIN movies AS T2 ON T1.Movie = T2.ID WHERE T2.Rating IS NULL AND T1.Name != 'none'</sql>"
  },
  {
    "id": 1804,
    "db_id": "movie_2",
    "question": "What are the names of movies that do not have any ratings?",
    "answer": "SELECT DISTINCT T2.Name FROM MovieTheaters AS T1 INNER JOIN movies AS T2 ON T1.Movie = T2.ID WHERE T2.Rating IS NULL LIMIT 1</sql>"
  },
  {
    "id": 1805,
    "db_id": "movie_2",
    "question": "Find the names of movies whose rating is \u2018G\u2019.",
    "answer": "SELECT T1.Name FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Title = T2.Movie WHERE T1.Rating = 'G'</sql>"
  },
  {
    "id": 1806,
    "db_id": "movie_2",
    "question": "What are names of movies that have a 'G' ratings?",
    "answer": "SELECT DISTINCT T2.Name FROM MovieTHEATERS AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T1.Rating IS NULL AND T1.Title LIKE '%PG%' ORDER BY SUBSTR(T1.Name, 0, CHAR_LENGTH(SUBSTR('movie', 4)) - (CHAR_LENGTH(T1.title) / CHAR_LENGTH(SUBSTR(T2.title, "
  },
  {
    "id": 1807,
    "db_id": "movie_2",
    "question": "Find the title of the movie that is played in the Odeon theater.",
    "answer": "SELECT T2.Title FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Movie WHERE T1.Name = 'ODEON'</sql>"
  },
  {
    "id": 1808,
    "db_id": "movie_2",
    "question": "What are the movie titles for ones that are played in the Odeon theater?",
    "answer": "SELECT T1.Title FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T2.Name = 'ODEON' AND T1.Name IN ( SELECT DISTINCT T3.Titel FROM MovieTHEATERS AS T1 INNER JOIN movies AS T3 ON T1.MovieID = T3.movieid WHERE T3.title = 'Odeon')</sql>"
  },
  {
    "id": 1809,
    "db_id": "movie_2",
    "question": "Find the names of movies that are played in any theater and the name of the corresponding theater.",
    "answer": "SELECT T1.Name FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code ORDER BY T2.Rating DESC LIMIT 1</sql>"
  },
  {
    "id": 1810,
    "db_id": "movie_2",
    "question": "What are the names of the movies that are played in any theater and the name of the corresponding theater?",
    "answer": "SELECT T1.Name, T2.Name FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Code = T2.Movie WHERE T1.name = 'All movies' AND T2.Rating IS NOT NULL GROUP BY T2.Name ORDER BY COUNT(T2.movie) LIMIT 1</sql>"
  },
  {
    "id": 1811,
    "db_id": "movie_2",
    "question": "Find the number of movies whose rating is \u2018G\u2019.",
    "answer": "SELECT SUM(SUM(CASE WHEN Rating = 'G' THEN 1 ELSE -1 END)) FROM MovieTheaters WHERE Name = 'Movies with rating of\u00a0G' AND Rating IS NOT NULL</sql>"
  },
  {
    "id": 1812,
    "db_id": "movie_2",
    "question": "How many movies had a 'G' rating?",
    "answer": "SELECT COUNT(DISTINCT T2.Title), SUM(IIF(T2.Rating BETWEEN 5 AND 10)) AS num FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Movie = T2.Code WHERE T1.Rating >= 'G' GROUP BY T2.Name ORDER BY SUM(IIF(T2.Rating BETWEEN 5 AND 10)) DESC LIMIT "
  },
  {
    "id": 1813,
    "db_id": "movie_2",
    "question": "How many movies are playing across all theaters?",
    "answer": "SELECT COUNT(*) FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Name = T2.Movie WHERE T1.name = 'All movies'</sql>"
  },
  {
    "id": 1814,
    "db_id": "movie_2",
    "question": "How many movies are playing in theaters?",
    "answer": "SELECT COUNT(*) FROM movieTHEATERS WHERE Name = 'Movies' AND Movie IS NOT NULL ORDER BY Rating DESC LIMIT 1</sql>"
  },
  {
    "id": 1815,
    "db_id": "movie_2",
    "question": "How many distinct movies are on in theaters?",
    "answer": "SELECT COUNT(DISTINCT T2.Title) FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T1.Name = 'Mainstreet' GROUP BY DISTINCT T2.Title ORDER BY COUNT(DISTINCT T2.title) DESC LIMIT 0</sql>"
  },
  {
    "id": 1816,
    "db_id": "movie_2",
    "question": "How many different movies are playing?",
    "answer": "SELECT COUNT(T1.Title) FROM MovieTHEATERS AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T1.Name IS NOT NULL AND T1.Rating < 5 ORDER BY CASE WHEN T3.Rating = '7' THEN COUNT(T1.movie__title) ELSE 0 END DESC LIMIT 1</sql>"
  },
  {
    "id": 1817,
    "db_id": "movie_2",
    "question": "How many distinct movie theaters are there?",
    "answer": "SELECT COUNT(DISTINCT T2.Name), SUM(T1.Rating) FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Code = T2.Movie INNER JOIN movies AS T3 ON T3.Code = T1.Movie WHERE T3.Rating IS NULL GROUP BY COUNT(DISTINCT T3.Name), SUM(T1.Rating) ORDER BY COUNT(DISTINCT T2.Name)"
  },
  {
    "id": 1818,
    "db_id": "movie_2",
    "question": "How many different movie theaters exist?",
    "answer": "SELECT COUNT(DISTINCT T2.Name) FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T1.Name = 'movie49' GROUP BY T2.Name ORDER BY COUNT(T2.Title) DESC LIMIT 3</sql>"
  },
  {
    "id": 1819,
    "db_id": "movie_2",
    "question": "Find the rating of the movie whose name includes the word \u2018Citizen\u2019.",
    "answer": "SELECT DISTINCT T2.Rating FROM movies AS T1 INNER JOIN movies AS T2 ON T1.Movie = T2.Code WHERE T1.Title LIKE '%Citizen%' AND T2.Name LIKE '%Citizen'</sql>"
  },
  {
    "id": 1820,
    "db_id": "movie_2",
    "question": "What is the rating of the movie what has a name including a word like 'Citizen'?",
    "answer": "SELECT CAST(T2.Rating AS STRING) - 5 FROM ( SELECT DISTINCT T1.Name, SUBSTR(T2.Title, INSTR(T2.title,' ',2)) + strftime('%A', T3.Date), RATING FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.MovieID = T2.Movie ) AS T1 ORDER BY CAST(T1.R"
  },
  {
    "id": 1821,
    "db_id": "movie_2",
    "question": "Find the name of the cinemas that are playing movies with either rating \u2018G\u2019 or rating \u2018PG\u2019.",
    "answer": "SELECT T1.Name FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Code = T2.Movie WHERE T1.Rating BETWEEN 'G' AND 'R' OR T1.Rating LIKE '%PG%'</sql>"
  },
  {
    "id": 1822,
    "db_id": "movie_2",
    "question": "What are the names of the movie theaters that are playing 'G' or 'PG' rated movies?",
    "answer": "SELECT DISTINCT T2.Name FROM MovieTheaters AS T1 INNER JOIN Rating AS T2 ON T1.Code = T2.Movie WHERE T1.Rating IN ('PG', 'K') AND T2.Title LIKE '%' ?%' GROUP BY T2.Name ORDER BY COUNT(T2.Rating) DESC LIMIT 1</sql>"
  },
  {
    "id": 1823,
    "db_id": "movie_2",
    "question": "Find the name of the movies that are played in either cinema Odeon or Imperial.",
    "answer": "SELECT DISTINCT T2.Name FROM MovieTheaters AS T1 INNER JOIN Movie AS T2 ON T1.Movie = T2.Code WHERE T1.Name IN ('Cinema Odeon', 'Imperial')</sql>"
  },
  {
    "id": 1824,
    "db_id": "movie_2",
    "question": "What are the titles of all the movies that played at the Odeon or Imperial theater?",
    "answer": "SELECT DISTINCT T1.Title FROM MovieTheaters AS T1 INNER JOIN movies AS T2 ON T1.Code = T2.Movie WHERE T1.Name = 'ODEON' ORDER BY T2.Rating DESC LIMIT 1</sql>"
  },
  {
    "id": 1825,
    "db_id": "movie_2",
    "question": "Find the name of the movie that is on in both Odeon and Imperial theaters.",
    "answer": "SELECT T1.Name FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T2.Rating BETWEEN 40 AND 65 ORDER BY T2.Title LIKE '%Od%'</sql>"
  },
  {
    "id": 1826,
    "db_id": "movie_2",
    "question": "What movie is playing at both the Odeon and Imperial theater?",
    "answer": "SELECT T1.Title FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T1.Name = 'ODEON' AND T1.Name = 'Imperial' GROUP BY T1.Name ORDER BY T2.Rating</sql>"
  },
  {
    "id": 1827,
    "db_id": "movie_2",
    "question": "Find the name of all movies that are not played in Odeon theater.",
    "answer": "SELECT DISTINCT T1.Name FROM MovieTheaters AS T1 INNER JOIN Movie AS T2 ON T1.Movie = T2.Code WHERE T1.Name != 'ODEON'</sql>"
  },
  {
    "id": 1828,
    "db_id": "movie_2",
    "question": "What are the names of every movie that is not playing at the Odeon theater?",
    "answer": "SELECT DISTINCT T2.Name FROM MovieTheaters AS T1 INNER JOIN Movie AS T2 ON T1.Movie = T2.Code WHERE T1.name != 'ODEON' AND t1.movie != 'What to Watching?'</sql>"
  },
  {
    "id": 1829,
    "db_id": "movie_2",
    "question": "List in alphabetical order the titles of all movies.",
    "answer": "SELECT DISTINCT T2.Title FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code ORDER BY T2.Title IN ( 'Skyline', 'Beyond the Sea',  'Lifeforce',  'Ride Along')</sql>"
  },
  {
    "id": 1830,
    "db_id": "movie_2",
    "question": "What are the movie names in alphabetical order?",
    "answer": "SELECT T2.Name FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Code = T2.Movie ORDER BY T2.Title ASC LIMIT 1</sql>"
  },
  {
    "id": 1831,
    "db_id": "movie_2",
    "question": "Find the titles of all movies sorted by their ratings.",
    "answer": "SELECT DISTINCT T1.Title FROM Movies AS T1 INNER JOIN MovieTHEATERS AS T2 ON T1.Code = T2.Movie ORDER BY T2.Rating DESC LIMIT 1</sql>"
  },
  {
    "id": 1832,
    "db_id": "movie_2",
    "question": "What are the movie names sorted by rating?",
    "answer": "SELECT T2.Name FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code ORDER BY T2.Rating DESC LIMIT 1</sql>"
  },
  {
    "id": 1833,
    "db_id": "movie_2",
    "question": "Find the name of the theater that is playing the most number of movies.",
    "answer": "SELECT T1.Name FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code ORDER BY T2.Rating DESC LIMIT 1</sql>"
  },
  {
    "id": 1834,
    "db_id": "movie_2",
    "question": "What is the name of the theater playing the most movies?",
    "answer": "SELECT T1.Name FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code ORDER BY COUNT(T2.Title) DESC LIMIT 1</sql>"
  },
  {
    "id": 1835,
    "db_id": "movie_2",
    "question": "Find the name of the movie that is played in the most number of theaters.",
    "answer": "SELECT T1.Name FROM movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Movie = T2.Movie ORDER BY T2.Count DESC LIMIT 1</sql>"
  },
  {
    "id": 1836,
    "db_id": "movie_2",
    "question": "What is the name of the film playing at the most number of theaters?",
    "answer": "SELECT T1.Name FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code ORDER BY T1.Count DESC LIMIT 1</sql>"
  },
  {
    "id": 1837,
    "db_id": "movie_2",
    "question": "Find the number of movies in each rating.",
    "answer": "SELECT SUM(CASE WHEN T2.Rating BETWEEN 3 AND 5 THEN 1 ELSE 0 END), COUNT(T2.Title) FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Movie = T2.Movie WHERE T1.Rating IN (3,5 ) GROUP BY T2.Rating ORDER BY SUM(CASE WHEN T2.Rating BETWEEN 3 AND 5 THEN 1"
  },
  {
    "id": 1838,
    "db_id": "movie_2",
    "question": "How many movies exist for each rating?",
    "answer": "SELECT SUM(Count(T2.Title)) FROM Movies AS T1 INNER JOIN Rating AS T2 ON T1.Code = T2.Movie WHERE T1.Rating BETWEEN 3 AND 7 ORDER BY T1.Rating LIMIT 1</sql>"
  },
  {
    "id": 1839,
    "db_id": "movie_2",
    "question": "Find the number of movies whose rating is not null.",
    "answer": "SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL</sql>"
  },
  {
    "id": 1840,
    "db_id": "movie_2",
    "question": "How many movies have a rating that is not null?",
    "answer": "SELECT COUNT(T2.Title) FROM Movies AS T1 INNER JOIN MovieTHEATERS AS T2 ON T1.Movie = T2.Movie WHERE T1.Rating IS NOT NULL AND T1.Rating IS NULL LIMIT 0</sql>"
  },
  {
    "id": 1841,
    "db_id": "movie_2",
    "question": "Find the name of theaters that has at least one movie playing.",
    "answer": "SELECT DISTINCT T2.Name FROM MovieTheaters AS T1 INNER JOIN movies AS T2 ON T1.Movie = T2.ID GROUP BY T2.Name ORDER BY COUNT(T3.Name) DESC LIMIT 1</sql>"
  },
  {
    "id": 1842,
    "db_id": "movie_2",
    "question": "What are the names of every theater with at least one movie playing?",
    "answer": "SELECT DISTINCT T2.Name FROM MovieTheaters AS T1 INNER JOIN movies AS T2 ON T1.Movie = T2.Code GROUP BY T2.Name ORDER BY COUNT(T1.Name) > 1 LIMIT 1</sql>"
  },
  {
    "id": 1843,
    "db_id": "movie_2",
    "question": "Select the name of all movie theaters that are not currently showing a movie.",
    "answer": "SELECT DISTINCT T2.Name FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T1.Name IS NOT NULL AND T2 = '' ORDER BY COUNT(T1.Title) DESC LIMIT 1</sql>"
  },
  {
    "id": 1844,
    "db_id": "movie_2",
    "question": "What are the names of all cinemas not showing any movies?",
    "answer": "SELECT DISTINCT T2.Name FROM MovieTheaters AS T1 INNER JOIN movies AS T2 ON T1.Movie = T2.Code WHERE T1.movie IS NULL AND T1.Count < 5</sql>"
  },
  {
    "id": 1845,
    "db_id": "movie_2",
    "question": "Find the name of the movie theaters that are playing the movies whose rating is \u2018G\u2019.",
    "answer": "SELECT T1.Name FROM MovieTheater AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T2.Rating = 'G'</sql>"
  },
  {
    "id": 1846,
    "db_id": "movie_2",
    "question": "What are the names of theaters playing 'G' rated movies?",
    "answer": "SELECT DISTINCT T2.Name FROM MovieTheaters AS T1 INNER JOIN movies AS T2 ON T1.Movie = T2.Title WHERE T1.Rating = 'G'</sql>"
  },
  {
    "id": 1847,
    "db_id": "movie_2",
    "question": "Select the title of all movies.",
    "answer": "SELECT DISTINCT T1.Title FROM Movies AS T1 INNER JOIN MovieTHEATERS AS T2 ON T1.Movie = T2.Movie WHERE T2.Name IS NOT NULL ORDER BY Rating DESC LIMIT 1</sql>"
  },
  {
    "id": 1848,
    "db_id": "movie_2",
    "question": "What are all of the movie names?",
    "answer": "SELECT DISTINCT T1.Name FROM Movies AS T1 INNER JOIN MovieTHEATERS AS T2 ON T1.Title = T2.Movie WHERE T2.Name LIKE '%@stars@%' AND T1.Rating IS NOT NULL ORDER BY T2.Name</sql>"
  },
  {
    "id": 1849,
    "db_id": "movie_2",
    "question": "Show all the distinct ratings in the database.",
    "answer": "SELECT DISTINCT T1.Rating FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Name IS NULL AND T1.Rating IS NOT NULL GROUP BY T2.Name ORDER BY COUNT(T2.Rating) DESC LIMIT 1</sql>"
  },
  {
    "id": 1850,
    "db_id": "movie_2",
    "question": "What are the different movie ratings?",
    "answer": "SELECT T3.rating FROM movies AS T1 INNER JOIN Movies AS T2 ON T1.movie = T2.CODE WHERE T2.Title = 'The Dark Knight Rises'</sql>"
  },
  {
    "id": 1851,
    "db_id": "movie_2",
    "question": "Show all information of all unrated movies.",
    "answer": "SELECT DISTINCT T1.Title FROM Movies AS T1 INNER JOIN MovieTHEATERS AS T2 ON T1.Code = T2.Code WHERE T2.Name = 'RATING LIMIT'</sql>"
  },
  {
    "id": 1852,
    "db_id": "movie_2",
    "question": "What is all the information about the unrated movies?",
    "answer": "SELECT DISTINCT T1.Title, T2.Rating FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Movie = T2.Code ORDER BY T1.title LIMIT 10</sql>"
  },
  {
    "id": 1853,
    "db_id": "movie_2",
    "question": "Show the titles of movies not currently being shown in any theaters.",
    "answer": "SELECT DISTINCT T2.Title FROM MovieTheaters AS T1 INNER JOIN Movie AS T2 ON T1.Movie = T2.Movie WHERE T1.Name IS NULL</sql>"
  },
  {
    "id": 1854,
    "db_id": "movie_2",
    "question": "What are the names of the movies not being shown in any theaters?",
    "answer": "SELECT DISTINCT T2.Title FROM MovieTheaters AS T1 INNER JOIN Movie AS T2 ON T1.Movie = T2.Code WHERE T1.Name IS NULL ORDER BY T1.ID LIMIT 1</sql>"
  },
  {
    "id": 1855,
    "db_id": "planet_1",
    "question": "Who receieved the heaviest package?",
    "answer": "SELECT DISTINCT T1.Name FROM Shipment AS T1 INNER JOIN AccountNumber AS T2 ON T1.ShipmentID = T2.AccountNumber ORDER BY T1.Weight DESC LIMIT 1</sql>"
  },
  {
    "id": 1856,
    "db_id": "planet_1",
    "question": "What is the name of the client who received the heaviest package?",
    "answer": "SELECT DISTINCT T1.Name FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.AccountNumber ORDER BY T2.Weight DESC LIMIT 1</sql>"
  },
  {
    "id": 1857,
    "db_id": "planet_1",
    "question": "What is the total weight of all the packages that customer Leo Wong sent?",
    "answer": "SELECT SUM(weight) FROM shipment WHERE CustomerID = 'leo' AND DISTINCT T3.PlanetID IN ( SELECT DISTINCT T2.planetid, T1.contractnumber AS contract , 0 ) ORDER BY T1.</sql>"
  },
  {
    "id": 1858,
    "db_id": "planet_1",
    "question": "What is the total weight for all packages that Leo Wong sent?",
    "answer": "SELECT SUM(weight) FROM shipment WHERE name = 'Leo Wong'</sql>"
  },
  {
    "id": 1859,
    "db_id": "planet_1",
    "question": "What is the position of Amy Wong?",
    "answer": "SELECT DISTINCT T1.Position FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.Name = 'Amy WONG' AND T2.Date IS NOT NULL ORDER BY T2.Date DESC LIMIT 1</sql>"
  },
  {
    "id": 1860,
    "db_id": "planet_1",
    "question": "What position does Amy Wong have?",
    "answer": "SELECT DISTINCT T1.Position FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.ShipmentID WHERE T1.Name = 'Amy Wong'</sql>"
  },
  {
    "id": 1861,
    "db_id": "planet_1",
    "question": "What is Turanga Leela's salary and position?",
    "answer": "SELECT DISTINCT T1.Name , T1.Position, T2.name FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.EmployeeID ORDER BY T1.salary DESC LIMIT 1</sql>"
  },
  {
    "id": 1862,
    "db_id": "planet_1",
    "question": "What is the salary and position of the employee named Turanga Leela?",
    "answer": "SELECT DISTINCT T1.Name, T1.Position, T2.name FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Planet AS T3 ON T1.Planet = T3.Planet WHERE T3.Name = 'Turanga Leela'</sql>"
  },
  {
    "id": 1863,
    "db_id": "planet_1",
    "question": "What is the average salary of all intern jobs?",
    "answer": "SELECT AVG(salary) FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.ShipmentID WHERE T2.Date IS NOT NULL AND T1.Name IN ('intern', 'overseas-intership')</sql>"
  },
  {
    "id": 1864,
    "db_id": "planet_1",
    "question": "What is the average salary of an intern?",
    "answer": "SELECT AVG(salary) FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.ShipmentID WHERE T2.PlanetID IS NULL ORDER BY T2.Date DESC LIMIT 1</sql>"
  },
  {
    "id": 1865,
    "db_id": "planet_1",
    "question": "What level is Physician?",
    "answer": "SELECT DISTINCT T1.Level FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.ShipmentID WHERE T1.Name = 'Physician' AND T2.PlanetID = 885649</sql>"
  },
  {
    "id": 1866,
    "db_id": "planet_1",
    "question": "What is the clearance level of a physician?",
    "answer": "SELECT DISTINCT T1.Level FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.ShipmentID WHERE T1.Name = 'Dr.' ORDER BY T1.Level DESC LIMIT 1</sql>"
  },
  {
    "id": 1867,
    "db_id": "planet_1",
    "question": "List Package Number of all package sent by Leo Wong?",
    "answer": "SELECT T3.PackageNumber FROM Shipment AS T1 INNER JOIN Client AS T2 ON T1.ShipmentID = T2.AccountNumber WHERE T2.Name = 'Leo WONG' AND T2.Name = 'Baby-X' ORDER BY T1.Date DESC LIMIT 1</sql>"
  },
  {
    "id": 1868,
    "db_id": "planet_1",
    "question": "What is the number of all packages that Leo Wong sent?",
    "answer": "SELECT COUNT(*) FROM package AS T1 INNER JOIN shipment AS T2 ON T1.PackageNumber = T2.ShipmentID WHERE T1.Name = 'Leo Wong'</sql>"
  },
  {
    "id": 1869,
    "db_id": "planet_1",
    "question": "List all package numbers received by Leo Wong ?",
    "answer": "SELECT T3.PackageNumber FROM Shipment AS T1 INNER JOIN Package AS T2 ON T1.ShipmentID = T2.PackageNumber WHERE T1.Name = 'Leo WONG' AND T2.AccountNumber = T1.AccountNumber ORDER BY T2.PackageNumber LIMIT 1</sql>"
  },
  {
    "id": 1870,
    "db_id": "planet_1",
    "question": "What are all of the package numbers received by Leo Wong?",
    "answer": "SELECT T3.PackageNumber FROM Shipment AS T1 INNER JOIN Package AS T2 ON T1.ShipmentID = T2.PackageNumber WHERE T1.Name = 'Leo WONG' AND T2.AccountNumber = '1735968024550011963'</sql>"
  },
  {
    "id": 1871,
    "db_id": "planet_1",
    "question": "List all package sent or received by Leo Wong.",
    "answer": "SELECT T3.Name FROM Shipment AS T1 INNER JOIN Package AS T2 ON T1.ShipmentID = T2.ShipmentID WHERE T1.Name = 'LeoWong'</sql>"
  },
  {
    "id": 1872,
    "db_id": "planet_1",
    "question": "What are all the different package numbers that Leo Wong sent or received?",
    "answer": "SELECT T3.PackageNumber FROM Shipment AS T1 INNER JOIN Package AS T2 ON T1.ShipmentID = T2.ShipmentID WHERE T1.Name = 'Leo Wong' AND T2.PackageNumber IN (1, 2)</sql>"
  },
  {
    "id": 1873,
    "db_id": "planet_1",
    "question": "Count the number of packages sent by Ogden Wernstrom and received by Leo Wong.",
    "answer": "SELECT COUNT(T1.PackageNumber) FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.AccountNumber WHERE T1.Name = 'Ogden Wernstrom' AND T2.Contents = 'Apparel'</sql>"
  },
  {
    "id": 1874,
    "db_id": "planet_1",
    "question": "How many packages sent by Ogden Wernstrom and received by Leo Wong?",
    "answer": "SELECT COUNT(*) FROM package AS T1 INNER JOIN employee AS T2 ON T1.Employee = T2.EmployeeID WHERE T1.Name = 'Ogden Wernstrom' AND T2.Name = 'Leo Wong' AND T1.ShipmentID INTEGER IS NULL</sql>"
  },
  {
    "id": 1875,
    "db_id": "planet_1",
    "question": "What are the contents of package sent by John Zoidfarb?",
    "answer": "SELECT DISTINCT T1.Contents FROM Package AS T1 INNER JOIN Employee AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.Name = 'John Zoidfarb' AND T1.PackageNumber = 26968305</sql>"
  },
  {
    "id": 1876,
    "db_id": "planet_1",
    "question": "What are the package contents of all those sent by John Zoidfarb?",
    "answer": "SELECT DISTINCT T1.Contents FROM Package AS T1 INNER JOIN Employee AS T2 ON T1.AccountNumber = T2.EmployeeID WHERE T2.Name = 'John Zoidfarb' AND T1.Contents = 'Some package contents for John Zoidfarb.'</sql>"
  },
  {
    "id": 1877,
    "db_id": "planet_1",
    "question": "What is the heaviest package sent by the clients which 'John' is part of their name? List package number and weight.",
    "answer": "SELECT DISTINCT T1.PackageNumber, T1.Weight FROM Clients AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Accountnumber WHERE T2.Name = 'John'</sql>"
  },
  {
    "id": 1878,
    "db_id": "planet_1",
    "question": "What is the package number and weight of the heaviest package that was sent by a client named John or something similar?",
    "answer": "SELECT T3.PackageNumber, T1.Weight FROM Package AS T1 INNER JOIN Shipment AS T2 ON T1.ShipmentID = T2.ShipmentID WHERE T1.Name = 'John' ORDER BY T3.Weight DESC LIMIT 1</sql>"
  },
  {
    "id": 1879,
    "db_id": "planet_1",
    "question": "List package number and weight of top 3 lightest packages.",
    "answer": "SELECT DISTINCT T1.PackageNumber, T2.Weight FROM Package AS T1 INNER JOIN ( SELECT DISTINCT T1.PlanetID , SUM(T2.weight) AS num FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.ShipmentID ORDER BY T2.Date DESC LIMIT 3 ) AS T3 ON T1.PackageNumber = T2.PackageNumber WHERE T2.Weight"
  },
  {
    "id": 1880,
    "db_id": "planet_1",
    "question": "What is the package number and weight of the 3 lightest packages?",
    "answer": "SELECT T1.PackageNumber, T1.Weight FROM Package AS T1 INNER JOIN Shipment AS T2 ON T1.ShipmentID = T2.ShipmentID ORDER BY T2.Weight DESC LIMIT 3</sql>"
  },
  {
    "id": 1881,
    "db_id": "planet_1",
    "question": "Who sent most number of packages? List client name and number of packages sent by that client.",
    "answer": "SELECT DISTINCT T1.Name, COUNT(T2.PackageNumber) AS num FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.AccountNumber WHERE strftime('%J', T2.`Date`) IS NOT NULL GROUP BY T1.Name ORDER BY SUM(T3.`num`) DESC LIMIT 2</sql>"
  },
  {
    "id": 1882,
    "db_id": "planet_1",
    "question": "What is the name of the client who sent the most packages and how many were there?",
    "answer": "SELECT DISTINCT T1.Name FROM Package AS T1 INNER JOIN Clients AS T2 ON T1.Client = T2.AccountNumber ORDER BY COUNT(T1.PackageNumber) DESC LIMIT 1</sql>"
  },
  {
    "id": 1883,
    "db_id": "planet_1",
    "question": "Who received least number of packages ? List client name and number of packages received by that client .",
    "answer": "SELECT DISTINCT T1.Name , SUM(T3.PackageNumber) / COUNT(T2.AccountNumber) FROM Shipment AS T1 INNER JOIN Client AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Package AS T3 ON T1.ShipmentID = T3.ShipmentID GROUP BY T3.PackageNumber ORDER BY SUM(CASE WHEN DISTINCT T2.AccountNumber IS NULL THEN 0 ELSE"
  },
  {
    "id": 1884,
    "db_id": "planet_1",
    "question": "What is the smallest number of packages received and by whom ?",
    "answer": "SELECT T3.Count FROM Shipment AS T1 INNER JOIN Package AS T2 ON T1.ShipmentID = T2.ShipmentID WHERE T2.Contents = 'Package number' ORDER BY T1.Date DESC LIMIT 1</sql>"
  },
  {
    "id": 1885,
    "db_id": "planet_1",
    "question": "Who sent more than one packages? List the client's name.",
    "answer": "SELECT DISTINCT T1.Name FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.AccountNumber GROUP BY T1.Name ORDER BY COUNT(T2.PackageNumber) DESC LIMIT 1</sql>"
  },
  {
    "id": 1886,
    "db_id": "planet_1",
    "question": "What is the name of all clients who sent more than one package?",
    "answer": "SELECT DISTINCT T1.Name FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.AccountNumber GROUP BY T1.Name ORDER BY COUNT(T2.PackageNumber) DESC LIMIT 1</sql>"
  },
  {
    "id": 1887,
    "db_id": "planet_1",
    "question": "What are the Coordinates of planet Mars?",
    "answer": "SELECT DISTINCT T1.Coordinates FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.Planet = T2.ShipmentID WHERE T2.Date BETWEEN '2014-11-20' AND '2015-7-30' AND T2.Manager = 4</sql>"
  },
  {
    "id": 1888,
    "db_id": "planet_1",
    "question": "What are the coordinates of the planet named Mars?",
    "answer": "SELECT DISTINCT T1.Coordinates FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.ShipmentID WHERE T1.Name = 'Mars'</sql>"
  },
  {
    "id": 1889,
    "db_id": "planet_1",
    "question": "List all Planets' names and coordinates in alphabetical order of name.",
    "answer": "SELECT DISTINCT T1.Name, T2.Coordinates FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.Planet = T2.ShipmentID WHERE T2.Date IS NOT NULL ORDER BY T2.Name DESC</sql>"
  },
  {
    "id": 1890,
    "db_id": "planet_1",
    "question": "What are the names and coordinates of all planets in alphabetical order by name?",
    "answer": "SELECT DISTINCT T1.Name, T1.Coordinates FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.Planet = T2.ShipmentID WHERE T2.Date IS NOT NULL ORDER BY T2.Name, T1.Name</sql>"
  },
  {
    "id": 1891,
    "db_id": "planet_1",
    "question": "List all shipment id under Phillip J. Fry's management.",
    "answer": "SELECT T3.ShipmentID FROM Shipment AS T1 INNER JOIN Manager AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.Name = 'Phillip Jay Fry' AND T2.Name IS 'Manager'</sql>"
  },
  {
    "id": 1892,
    "db_id": "planet_1",
    "question": "What are the shipment IDs of every delivery managed by Phillip J Fry?",
    "answer": "SELECT T3.ShipmentID FROM Shipment AS T1 INNER JOIN Customers AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.Name = 'Phillip J Fry' AND T1.EmployeeID IS NOT NULL ORDER BY T2.AccountNumber ASC LIMIT 1</sql>"
  },
  {
    "id": 1893,
    "db_id": "planet_1",
    "question": "List the dates of all shipments.",
    "answer": "SELECT DATE AS T1 FROM Shipment WHERE shipmentID = ( SELECT MAX(shipmentID) FROM Shipment )</sql>"
  },
  {
    "id": 1894,
    "db_id": "planet_1",
    "question": "What are the dates of every shipment in the database?",
    "answer": "SELECT Date FROM Shipment GROUP BY Date ORDER BY COUNT(DISTINCT T3.EmployeeID) DESC LIMIT 1</sql>"
  },
  {
    "id": 1895,
    "db_id": "planet_1",
    "question": "List all shipment ids for the planet Mars.",
    "answer": "SELECT T3.ShipmentID FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.PlanetID = T2.PlanetID WHERE T2.Name = 'Mars'</sql>"
  },
  {
    "id": 1896,
    "db_id": "planet_1",
    "question": "What are the shipment ids for the planet Mars?",
    "answer": "SELECT T3.ShipmentID FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.Planet = T2.Name WHERE T2.Name = 'Mars' AND T1.EmployeeID IN ( SELECT DISTINCT T0.EmployeeID FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.Employees = T2.ShipmentNumber)</sql>"
  },
  {
    "id": 1897,
    "db_id": "planet_1",
    "question": "List all shipment ids for the planet Mars and under the management of Turanga Leela.",
    "answer": "SELECT T2.ShipmentID FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.Planet = T2.Name WHERE T1.Manager = 'Turanga Leela' AND T1.Name = 'Mars' AND T2.IsClearance IS NULL AND T2.Remarks IN ('No clearance', '<strong>None')</sql>"
  },
  {
    "id": 1898,
    "db_id": "planet_1",
    "question": "What are the ids of all shipments on the planet Mars that are managed by Turanga Leela?",
    "answer": "SELECT T3.planetID FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.ShipmentID = T2.PlanetID WHERE T2.Name = 'Mars' AND T2.Manager = 'Turanga Leela'</sql>"
  },
  {
    "id": 1899,
    "db_id": "planet_1",
    "question": "List all shipment ids on the planet Mars or under the management of Turanga Leela.",
    "answer": "SELECT T2.ShipmentID FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.PlanetID = T2.Planet WHERE T1.Manager = 'Turanga Leela' AND T2.Name LIKE '%Mars%'</sql>"
  },
  {
    "id": 1900,
    "db_id": "planet_1",
    "question": "What are the ids for all shipments on the planet Mars that Turanga Leela manages?",
    "answer": "SELECT T3.PlanetID FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.ShipmentID = T2.PlanetID WHERE T1.Name = 'Turanga Leela' AND T2.name = 'Mars'</sql>"
  },
  {
    "id": 1901,
    "db_id": "planet_1",
    "question": "What is the total shipments in each planet? List the planet name and total shipments.",
    "answer": "SELECT DISTINCT T1.Name, SUM(T2.Shipment), T2.Total FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.Planet = T2.Planet GROUP BY T1.planet ORDER BY SUM(T2.Shipment) DESC LIMIT 1</sql>"
  },
  {
    "id": 1902,
    "db_id": "planet_1",
    "question": "How many shipments take place on each planet?",
    "answer": "SELECT DISTINCT T1.PlanetID FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.ShipmentID = T2.PlanetID GROUP BY T2.Planet ORDER BY COUNT(T2.Planet) FOR KEY INTERSECT SELECT T2.Name, T1.Name FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.ShipmentID = T2.Planet WHERE T"
  },
  {
    "id": 1903,
    "db_id": "planet_1",
    "question": "Which planet has most shipments? List the planet name.",
    "answer": "SELECT T3.Name FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.ShipmentID = T2.PlanetID ORDER BY T1.Shipment INTEGER DESC LIMIT 1</sql>"
  },
  {
    "id": 1904,
    "db_id": "planet_1",
    "question": "What is the name of the planet with the most shipments?",
    "answer": "SELECT T3.Name FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.ShipmentID = T2.PlanetID ORDER BY T1.Employee, T1.Year DESC LIMIT 1</sql>"
  },
  {
    "id": 1905,
    "db_id": "planet_1",
    "question": "List the manger's name and number of shipments under his management.",
    "answer": "SELECT T3.Name, T1.PlanetID FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.ShipmentID WHERE T1.JobTitle = 'Manager' AND T2.Date BETWEEN '2021-5-29' AND '2021-12-30' GROUP BY T3.</sql>"
  },
  {
    "id": 1906,
    "db_id": "planet_1",
    "question": "What are the number of shipments managed and names of each manager?",
    "answer": "SELECT T2.EmployeeID, T1.Name FROM Shipment AS T1 INNER JOIN Employee AS T2 ON T1.ShipmentID = T2.EmployeeID GROUP BY T1.Managers ORDER BY COUNT(T1.shipmentID) DESC LIMIT 1</sql>"
  },
  {
    "id": 1907,
    "db_id": "planet_1",
    "question": "Calculate total weight of package shipped on Mars.",
    "answer": "SELECT SUM(T1.Weight) FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.ShipmentID = T2.PlanetID WHERE T1.Name = 'Mars'</sql>"
  },
  {
    "id": 1908,
    "db_id": "planet_1",
    "question": "what is the total weight of all packages shipped on Mars?",
    "answer": "SELECT SUM(T1.Weight) FROM Shipment AS T1 INNER JOIN Package AS T2 ON T1.ShipmentID = T2.PackageNumber WHERE T2.Name = 'Mars' AND T1.Date BETWEEN '1983-04-09 00:33:57' AND '1986-06-15 10:41:22'</sql>"
  },
  {
    "id": 1909,
    "db_id": "planet_1",
    "question": "Calculate total weight of package shipped in each planet . show the name of each planet .",
    "answer": "SELECT T3.Name FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.ShipmentID = T2.PlanetID WHERE T1.Date LIKE '%DATE%' GROUP BY T2.name ORDER BY SUM(T1.TotalWeight) DESC LIMIT 1</sql>"
  },
  {
    "id": 1910,
    "db_id": "planet_1",
    "question": "what is the total package weight for each planet, list its name ?",
    "answer": "SELECT T3.Name, SUM(T1.Weight * 0.8), T1.Name FROM Planet AS T1 INNER JOIN Package AS T2 ON T1.Planet = T2.PLANET_ID GROUP BY T2.Planet ORDER BY T2.Weight DESC LIMIT 3</sql>"
  },
  {
    "id": 1911,
    "db_id": "planet_1",
    "question": "Which planet has total weight of shipment greater than 30? List planet name.",
    "answer": "SELECT T1.Name FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.ShipmentID = T2.PlanetID WHERE T1.Weight > 30</sql>"
  },
  {
    "id": 1912,
    "db_id": "planet_1",
    "question": "What are the names of all planets tjat have a total shipment weight greater than 30?",
    "answer": "SELECT T1.Name FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.ShipmentID = T2.PlanetID WHERE T1.Weight > 30 GROUP BY T1.Name ORDER BY COUNT(T1.name) DESC LIMIT 1</sql>"
  },
  {
    "id": 1913,
    "db_id": "planet_1",
    "question": "List package number of package shipped in planet Omicron Persei 8 and sent by Zapp Brannigan.",
    "answer": "SELECT T3.PackageNumber FROM Package AS T1 INNER JOIN Shipment AS T2 ON T1.ShipmentID = T2.ShipmentID WHERE T1.Name = 'Omicron Persei 8' AND T1.Manufacturer = 'Zapp Brannigan'</sql>"
  },
  {
    "id": 1914,
    "db_id": "planet_1",
    "question": "What are the number of packages sent by Zapp Brannigan and shipped on the Omicron Persei 8?",
    "answer": "SELECT COUNT(T1.PackageNumber) FROM Package AS T1 INNER JOIN Shipment AS T2 ON T1.ShipmentID = T2.ShipmentID WHERE T1.Name LIKE '%Zapp%' AND T2.Manager = '%Brannigan%'</sql>"
  },
  {
    "id": 1915,
    "db_id": "planet_1",
    "question": "List package number of packages shipped in Omicron Persei 8 planet or sent by Zapp Brannigan.",
    "answer": "SELECT T3.PackageNumber FROM Package AS T1 INNER JOIN Shipment AS T2 ON T1.ShipmentID = T2.ShipmentID WHERE T1.Name = 'Omicron Persei 8' AND T1.Name IN ('Zapp Brannigan', '')</sql>"
  },
  {
    "id": 1916,
    "db_id": "planet_1",
    "question": "What are the number of packages shipped on Omicron Persei 8 planet or sent by Zapp Brannigan?",
    "answer": "SELECT COUNT(*) FROM ( SELECT DISTINCT T3.PackageNumber AS pnum, T1.PlanetID , T2.Name , T1.Employee AS EMPLOYEE , CAST(T2.Shipment AS REAL) - T1.Weight AS Rate FROM Package AS T1 INNER JOIN OmicronPersei8 As T2 ON T2.AccountNumber = T1.AccountNumber INNER JOIN Planet AS T3 ON T3"
  },
  {
    "id": 1917,
    "db_id": "planet_1",
    "question": "Which packages have weight between 10 and 30? List the package number and weight.",
    "answer": "SELECT DISTINCT T2.PackageNumber, SUM(T3.Weight * 185 / (47 * 3)) AS total FROM Shipment AS T1 INNER JOIN Package AS T2 ON T1.ShipmentID = T2.ShipmentID WHERE T1.Status = 'Pending' AND T1.Date BETWEEN '2019-07-15' AND '2019-08"
  },
  {
    "id": 1918,
    "db_id": "planet_1",
    "question": "What are the package numbers and weights that are between 10 and 30?",
    "answer": "SELECT T2.PackageNumber, T2.Weight FROM Package AS T1 INNER JOIN Shipment AS T2 ON T1.ShipmentID = T2.ShipmentID WHERE strftime('%J', T1.Date) BETWEEN '2015-9-27' AND '2016-4-30' ORDER BY T1.PackageNumber , T2.Weight DESC LIMIT 1</sql>"
  },
  {
    "id": 1919,
    "db_id": "planet_1",
    "question": "Which employees do not have clearance in Mars? List employee's name.",
    "answer": "SELECT T3.Name FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.ShipmentID WHERE T2.Planet IS NULL AND T2.`Level` IS NOT NULL ORDER BY T3.Name IS NULL LIMIT 1</sql>"
  },
  {
    "id": 1920,
    "db_id": "planet_1",
    "question": "What are the names of all employees who don't have clearance on Mars?",
    "answer": "SELECT T3.Name FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.ShipmentID WHERE T2.Planet != 'Mars' GROUP BY T1.Name ORDER BY COUNT(T1.Name) - 1 LIMIT 1</sql>"
  },
  {
    "id": 1921,
    "db_id": "planet_1",
    "question": "Which employees have clearance in Omega III? List employees' name.",
    "answer": "SELECT DISTINCT T1.Name FROM Employee AS T1 INNER JOIN Package AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.PackageNumber = 5678403</sql>"
  },
  {
    "id": 1922,
    "db_id": "planet_1",
    "question": "What are the names of all employees with clearance on Omega III?",
    "answer": "SELECT DISTINCT T1.Name FROM Employee AS T1 INNER JOIN Package AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.PackageNumber = 3 AND T2.Contents = 'Omega III'</sql>"
  },
  {
    "id": 1923,
    "db_id": "planet_1",
    "question": "Which planets that have exact one employee has clearance? List planets' name.",
    "answer": "SELECT DISTINCT T1.Name FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.ShipmentID WHERE T2.Date IS NULL AND T1.Salary > 5000</sql>"
  },
  {
    "id": 1924,
    "db_id": "planet_1",
    "question": "What are the names of all planets with one employee that has clearance?",
    "answer": "SELECT DISTINCT T1.Name FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.ShipmentID WHERE T2.Planet IN ( SELECT T3.Name FROM Client AS T3 INNER JOIN shipment AS T4 ON T3.ClientID = T4 .ShipmentID WHERE T2.Level BETWEEN 6 AND 7 ORDER BY T2.Date DESC LIMIT 1 )</"
  },
  {
    "id": 1925,
    "db_id": "planet_1",
    "question": "Which employees have salaries between 5000 and 10000? List employees' name.",
    "answer": "SELECT DISTINCT T3.Name FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.ShipmentID WHERE T2.Salary BETWEEN 5000 AND 10000</sql>"
  },
  {
    "id": 1926,
    "db_id": "planet_1",
    "question": "What are the employees's names for those that have salaries between 5000 and 10000?",
    "answer": "SELECT DISTINCT T3.Name FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.ShipmentID WHERE T2.Salary BETWEEN 5000 AND 10000 ORDER BY T2.Date DESC LIMIT 1</sql>"
  },
  {
    "id": 1927,
    "db_id": "planet_1",
    "question": "Find the name of employees whose salary is above the average salary or more than 5000.",
    "answer": "SELECT T3.Name FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.ShipmentID WHERE T2.Salary > ( SELECT AVG(T2.Salary) FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.PlanetID = T2.Planet WHERE Remarks = 'Calculate salaries' AND Name LIKE '%%' ORDER BY salary DESC LIMIT 1 )"
  },
  {
    "id": 1928,
    "db_id": "planet_1",
    "question": "What are the names of all employees who have a salary greater than average or more than 5000?",
    "answer": "SELECT DISTINCT T1.Name FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.ShipmentID WHERE T2.`Weight` IS NULL GROUP BY T1.Name ORDER BY SUM(T1.`Salary`) / COUNT(T1) - AVG(salary) DESC LIMIT 1</sql>"
  },
  {
    "id": 1929,
    "db_id": "planet_1",
    "question": "Find the number of employees who do not have clearance in Mars .",
    "answer": "SELECT COUNT(DISTINCT T1.EmployeeID) FROM Employee AS T1 INNER JOIN Package AS T2 ON T1.Employee = T2.AccountNumber WHERE T2.PackageNumber IS NULL AND T1.Name = 'Mars' ORDER BY COUNT(T2.PackageNumber) DESC LIMIT 1</sql>"
  },
  {
    "id": 1930,
    "db_id": "planet_1",
    "question": "What is the number of employees that do not have clearance on Mars ?",
    "answer": "SELECT COUNT(DISTINCT T1.EmployeeID) FROM Shipment AS T1 INNER JOIN Client AS T2 ON T1.ShipmentID = T2.ShipmentID WHERE T1.Planet != 'Mars' GROUP BY T2.AccountNumber ORDER BY COUNT(T1.EmployeeID) - 1</sql>"
  },
  {
    "id": 1931,
    "db_id": "video_game",
    "question": "How many games are there?",
    "answer": "SELECT COUNT(T1.game_id) FROM \"game\" AS T1 INNER JOIN player AS T2 ON T1.platform_id = T2.Platform_ID WHERE T1.Title = 'Game Name' GROUP BY T1.Platform_name ORDER BY COUNT(T1.game_id) DESC LIMIT 0</sql>"
  },
  {
    "id": 1932,
    "db_id": "video_game",
    "question": "Count the number of games.",
    "answer": "SELECT COUNT(DISTINCT T2.game_id) FROM game AS T1 INNER JOIN player AS T2 ON T1.game_id = T2.game_id WHERE T1.title IS NULL AND T1.release_date BETWEEN '2009-08' AND '2004-10'</sql>"
  },
  {
    "id": 1933,
    "db_id": "video_game",
    "question": "List the Title and Developers of all games ordered by units sold from large to small.",
    "answer": "SELECT T2.title, T1.Developers FROM ( SELECT DISTINCT title , CAST(SUM(CASE WHEN \"units_sold\" > 0 THEN 'Small' END) AS REAL ) * 100/18 - SUM(CASE WHEN \"units_sold\" > 0 AND market_district = \"Large\" THEN 1 ELSE NULL END AS INDEX (SUM(CASE WHEN \"units_sold"
  },
  {
    "id": 1934,
    "db_id": "video_game",
    "question": "What are the titles and developers of all games, sorted by units sold descending?",
    "answer": "SELECT DISTINCT T2.title, T3.developer FROM game AS T1 INNER JOIN player AS T2 ON T1.Game_ID = T2.Game_ID ORDER BY T2.Platform_name DESC LIMIT 1</sql>"
  },
  {
    "id": 1935,
    "db_id": "video_game",
    "question": "What is the average units sold in millions of the games that are not developed by Nintendo?",
    "answer": "SELECT CAST(SUM(CASE WHEN T2.game IS NULL THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.Game_ID), SUM(T3.market_rank) FROM game AS T1 INNER JOIN player AS T2 ON T1.Game_ID = T2.Game_id INNER JOIN player AS T3 ON T1.Player_ID = T3.player_id WHERE T3.position != 'R' AND"
  },
  {
    "id": 1936,
    "db_id": "video_game",
    "question": "Return the average number of units sold in millions for games not developed by Nintendo.",
    "answer": "SELECT CAST(SUM(CASE WHEN T2.Market_district = 'Nintendo' THEN T1.Units_sold_Millions END) AS REAL) / COUNT(*) FROM \"game\" AS T1 INNER JOIN player AS T2 ON T1.Game_ID = T2.Game_ID WHERE NOT T2.College = 'Nintendo' AND T1.Platform_id != 'Nintendo'</sql>"
  },
  {
    "id": 1937,
    "db_id": "video_game",
    "question": "What are the names and market districts of all platforms?",
    "answer": "SELECT DISTINCT T2.Platform_name, T1.Market_district FROM ( SELECT DISTINCT T2.Platform_id AS Platform_ID , T3.`if_active` FROM \"game\" AS T1 INNER JOIN \"player\" AS T2 ON T1.Game_id = T2.Game_ID WHERE T1.Is_active IS NOT NULL AND T2.Played = 0 GROUP BY T2.Platform_name,"
  },
  {
    "id": 1938,
    "db_id": "video_game",
    "question": "Return all platform names and corresponding market districts.",
    "answer": "SELECT DISTINCT T2.platform_name, T1.market_district FROM games AS T1 INNER JOIN platforms AS T2 ON T1.game_id = T2.Game_ID GROUP BY T2.platform_name ORDER BY T1.`release_date` DESC LIMIT 1</sql>"
  },
  {
    "id": 1939,
    "db_id": "video_game",
    "question": "What are the names and id of platforms whose download rank is 1?",
    "answer": "SELECT DISTINCT T2.platform_name, T3.Platform_id FROM game AS T1 INNER JOIN platform AS T2 ON T1.Game_ID = T2.Platform_ID WHERE T1.Release_Date BETWEEN '2014-10' AND '2016-3' GROUP BY T2.Platform_name ORDER BY COUNT(T1.Download_rank) DESC LIMIT 2</sql>"
  },
  {
    "id": 1940,
    "db_id": "video_game",
    "question": "Return the names and ids of all platforms with the download rank of 1.",
    "answer": "SELECT DISTINCT T2.Platform_name, T3.Platform_id FROM game AS T1 INNER JOIN player AS T2 ON T1.Game_ID = T2.Game_ID WHERE T1.Release_Date BETWEEN '2014-07-18' AND '2022-06-13' ORDER BY T3.Platform_rank DESC LIMIT 1</sql>"
  },
  {
    "id": 1941,
    "db_id": "video_game",
    "question": "What are the maximum and minimum rank of the year of players.",
    "answer": "SELECT SUM(max(RANK()) - min(RANK())) AS x FROM ( SELECT CAST((T1.position AS float), 'float') AS T2, ROW_NUMBER() AS RN FROM player AS T1 INNER JOIN game AS T2 ON T1.Player_ID = T2.Game_ID ORDER BY T2.Title DESC LIMIT 3 ) AS T WHERE T2.Rank = ( SELECT SUM(T2.rank)"
  },
  {
    "id": 1942,
    "db_id": "video_game",
    "question": "Give the maximum and minimum rank of the year across all players.",
    "answer": "SELECT DISTINCT T2.rank_of_the_year, MAX(T1.`Rank_of_the_year`) FROM player AS T1 INNER JOIN game AS T2 ON T1.Player_ID = T2.Platform_id WHERE T2.Release_Date BETWEEN '2000-01-01' AND '2023-05-28' GROUP BY T2.Game_ID ORDER BY"
  },
  {
    "id": 1943,
    "db_id": "video_game",
    "question": "How many players have rank of the year smaller than 3?",
    "answer": "SELECT COUNT(T1.player_id) FROM player AS T1 INNER JOIN ( SELECT MAX(CASE WHEN DISTINCT 'Rank_of_the_year' = '50' THEN T1.Player_name END ) AS RATED FROM player AS T1 INNER JOIN game AS T2 ON T1.game_id = T2.Game_ID WHERE 'year' BETWEEN 3 AND 9 ORDER BY DISTINCT 'Rank"
  },
  {
    "id": 1944,
    "db_id": "video_game",
    "question": "Count the number of players that have a rank of year of at most 3.",
    "answer": "SELECT COUNT(T1.player_id) FROM player AS T1 INNER JOIN games AS T2 ON T1.game_id = T2.Game_ID WHERE T2.year <= ( SELECT MIN(YEAR) FROM game ) - 3 LIMIT 1</sql>"
  },
  {
    "id": 1945,
    "db_id": "video_game",
    "question": "List all player names in ascending alphabetical order.",
    "answer": "SELECT DISTINCT T2.player_name FROM player AS T1 INNER JOIN game AS T2 ON T1.Player_ID = T2.Platform_ID ORDER BY T1.Position, T1.Rank_of_the_year</sql>"
  },
  {
    "id": 1946,
    "db_id": "video_game",
    "question": "What are the names of all players in alphabetical order?",
    "answer": "SELECT DISTINCT T2.player_name FROM player AS T1 INNER JOIN game_player AS T2 ON T1.Player_ID = T2.Game_ID ORDER BY T1.Position ORDER BY T1.position ASC LIMIT 1</sql>"
  },
  {
    "id": 1947,
    "db_id": "video_game",
    "question": "List names and colleges of all players in descending order of rank of the year.",
    "answer": "SELECT DISTINCT T2.player_name, T1.college FROM ( SELECT CAST(T1.player_name AS REAL ) AS T2 , T3.game_ID AS PARENT_GAME_ID , strftime('%Y', T2.release_date) AS rank , SUBSTR(T2.title, 4, LENGTH - 36) AS college FROM ( SELECT CAST(T1."
  },
  {
    "id": 1948,
    "db_id": "video_game",
    "question": "What are the names and colleges of all players, ordered by rank of year descending?",
    "answer": "SELECT DISTINCT T2.player_name , T1.position, T1.position FROM player AS T1 INNER JOIN game_player AS T2 ON T1.Player_ID = T2.Game_ID ORDER BY T1.Rank DESC</sql>"
  },
  {
    "id": 1949,
    "db_id": "video_game",
    "question": "Please show the names and rank of players that have played the game titled \"Super Mario World\".",
    "answer": "SELECT DISTINCT T2.player_name, T1.rank FROM player AS T1 INNER JOIN game AS T2 ON T1.Player_ID = T2.Game_ID WHERE T2.\"Title\" = 'Super Mario World' LIMIT 1</sql>"
  },
  {
    "id": 1950,
    "db_id": "video_game",
    "question": "What are the names and ranks of players who have played the game with the title \"Super Mario World\"?",
    "answer": "SELECT DISTINCT T2.player_name, T1.rank FROM player AS T1 INNER JOIN game AS T2 ON T1.Player_ID = T2.Game_ID WHERE T2.title = 'Super Mario World'</sql>"
  },
  {
    "id": 1951,
    "db_id": "video_game",
    "question": "Show the distinct developer of games played by players that go to college \"Auburn\".",
    "answer": "SELECT T1.developer FROM game AS T1 INNER JOIN player AS T2 ON T1.game_id = T2.Game_ID WHERE T2.position = 'Player' AND T1.name LIKE '%Auburn%' ORDER BY COUNT(T1.developer) DESC LIMIT 1</sql>"
  },
  {
    "id": 1952,
    "db_id": "video_game",
    "question": "What are the different developers of games that are played by players that attend Auburn college?",
    "answer": "SELECT T1.Name FROM game AS T1 INNER JOIN player AS T2 ON T1.game_id = T2.Game_ID WHERE T2.College = 'Auburn' AND T2.Position IN ('RB', 'TE') AND T2.Player_name = 'Nathan Drew' LIMIT 1</sql>"
  },
  {
    "id": 1953,
    "db_id": "video_game",
    "question": "What is the average number of units sold in millions of games played by players with position \"Guard\"?",
    "answer": "SELECT CAST(SUM(CASE WHEN T2.Position = 'GUARD' THEN T1.units_sold_millions END) AS REAL) / COUNT(*) FROM player AS T1 INNER JOIN game AS T2 ON T1.Player_ID = T2.Player_ID GROUP BY T2.Game_ID ORDER BY SUM(T2.units_sold_millions) DESC LIMIT 3</sql>"
  },
  {
    "id": 1954,
    "db_id": "video_game",
    "question": "Return the average number of units sold in millions among games played by players who have the position Guard.",
    "answer": "SELECT AVG(T2.Rank_of_the_year) AS sum FROM game_player AS T1 INNER JOIN player AS T2 ON T1.Player_ID = T2.Player_ID WHERE T2.Position = 'Guard' ORDER BY T1.Rank_of_the_year DESC LIMIT 1</sql>"
  },
  {
    "id": 1955,
    "db_id": "video_game",
    "question": "Please list the title and platform name of games.",
    "answer": "SELECT T2.title, T1.platform_name FROM \"game AS T1 INNER JOIN player AS T2 ON T1.player_id = T2.Player_ID WHERE T1.release_date BETWEEN '2021-9' AND '2021-6'</sql>"
  },
  {
    "id": 1956,
    "db_id": "video_game",
    "question": "What are the titles and platform names of all games?",
    "answer": "SELECT DISTINCT T1.title, T2.platform_name FROM game AS T1 INNER JOIN player AS T2 ON T1.game_id = T2.Game_ID WHERE T2.position = 'Soldier' ORDER BY T2.`Rank_of_the_year`, T2.Platform_ID</sql>"
  },
  {
    "id": 1957,
    "db_id": "video_game",
    "question": "Please list the title of games with platforms that have market district in Asia or USA.",
    "answer": "SELECT DISTINCT T2.title FROM \"game\" AS T1 INNER JOIN game_player AS T2 ON T1.game_id = T2.Game_ID WHERE T1.Market_district IN ('Asia', 'United States')</sql>"
  },
  {
    "id": 1958,
    "db_id": "video_game",
    "question": "What are the titles of games that have platforms in the market districts of Asia or the USA?",
    "answer": "SELECT DISTINCT T2.title FROM game AS T1 INNER JOIN player AS T2 ON T1.game_id = T2.Game_ID WHERE T1.market_district = 'asia' AND T1.platform IN ( SELECT T1.platforms FROM game AS T1 INNER JOIN player AS T2 ON T1.game_id = T2.Player_ID WHERE T2.Market_district LIKE '%USA%' ORDER BY T"
  },
  {
    "id": 1959,
    "db_id": "video_game",
    "question": "List the name of each franchise and the number of games belonging to that franchise.",
    "answer": "SELECT DISTINCT T2.title, T3.num_games FROM `game` AS T1 INNER JOIN `game_player` AS T2 ON T1.Game_ID = T2.Game_ID WHERE T1.Title LIKE '%%' OR T1.Release_Date LIKE '%%'</sql>"
  },
  {
    "id": 1960,
    "db_id": "video_game",
    "question": "How many games are there from each Franchise?",
    "answer": "SELECT DISTINCT T2.title, COUNT(T1.game_id), T1.player_name FROM game AS T1 INNER JOIN player AS T2 ON T1.Game_ID = T2.Game_ID GROUP BY T2.Franchise ORDER BY COUNT(T2.Game_id) DESC</sql>"
  },
  {
    "id": 1961,
    "db_id": "video_game",
    "question": "List the name of franchise that have the most number of games.",
    "answer": "SELECT T1.title FROM game AS T1 INNER JOIN player AS T2 ON T1.game_id = T2.Game_ID ORDER BY T1.rank DESC LIMIT 1</sql>"
  },
  {
    "id": 1962,
    "db_id": "video_game",
    "question": "Which franchise has the most games?",
    "answer": "SELECT T1.title, T2.name FROM game AS T1 INNER JOIN game_player AS T2 ON T1.game_id = T2.Game_ID GROUP BY T1.title ORDER BY COUNT(T1.title) DESC LIMIT 3</sql>"
  },
  {
    "id": 1963,
    "db_id": "video_game",
    "question": "List the names of franchises that have at least two games.",
    "answer": "SELECT DISTINCT T2.title FROM game AS T1 INNER JOIN player AS T2 ON T1.game_id = T2.game_id WHERE T1.franchise IN ('Alien', 'Halo') GROUP BY T2.Title ORDER BY COUNT(T2.Franchise) DESC LIMIT 2</sql>"
  },
  {
    "id": 1964,
    "db_id": "video_game",
    "question": "What are the names of franchises that have two or more games?",
    "answer": "SELECT T1.title, T2.title FROM game AS T1 INNER JOIN game_player AS T2 ON T1.game_id = T2.Game_ID GROUP BY T1.title HAVING COUNT(T2.Game) > 1</sql>"
  },
  {
    "id": 1965,
    "db_id": "video_game",
    "question": "List the name of players that do not play any game.",
    "answer": "SELECT DISTINCT T2.player_name FROM player AS T1 INNER JOIN games AS T2 ON T1.Player_ID = T2.Platform_ID WHERE T1.Position IS NULL AND NOT T1.position IN ('Fighter, Jetfighter')</sql>"
  },
  {
    "id": 1966,
    "db_id": "video_game",
    "question": "What are the names of players who do not play any games?",
    "answer": "SELECT DISTINCT T2.player_name FROM player AS T1 INNER JOIN game AS T2 ON T1.Player_ID = T2.Game_ID WHERE T1.position IS NULL AND (T1.college IS NULL OR 'bachelor' IN ('bachelor', 'master') ORDER BY T2.Players.Rank_of_the_year LIMIT 1)</sql>"
  },
  {
    "id": 1967,
    "db_id": "video_game",
    "question": "Show the title of games that are played by both players from college \"Oklahoma\" and players from college \"Auburn\".",
    "answer": "SELECT DISTINCT T2.title FROM player AS T1 INNER JOIN game AS T2 ON T1.Player_ID = T2.Game_ID WHERE T1.College = 'OK' INTERSECT SELECT T2.title, T1.name FROM player AS T1 INNER JOIN game AS T2 ON T1.Player_ID = T2.Game_ID WHERE T2.title IS NOT NULL AND T2.title LIKE '%Oklahoma%'"
  },
  {
    "id": 1968,
    "db_id": "video_game",
    "question": "What are the titles of games that are played by players from Oklahoma college or Auburn college?",
    "answer": "SELECT DISTINCT T1.title FROM player AS T1 INNER JOIN game AS T2 ON T1.Player_ID = T2.Game_ID WHERE T2.Market_district = 'OKLAHOMA' AND T1.College  = 'Auburn'</sql>"
  },
  {
    "id": 1969,
    "db_id": "video_game",
    "question": "Show all distinct franchises of games.",
    "answer": "SELECT T1.title FROM game AS T1 INNER JOIN franchise AS T2 ON T1.Game_ID = T2.game_id ORDER BY T2.franchise DISTINCT</sql>"
  },
  {
    "id": 1970,
    "db_id": "video_game",
    "question": "What are all the distinct franchises?",
    "answer": "SELECT T1.title, T2.title FROM games AS T1 INNER JOIN players AS T2 ON T1.game_id = T2.game_id WHERE T1.Franchise IN ('Call of Duty', 'Fast and Furious') GROUP BY T1.Franchise ORDER BY COUNT(T2.Title) DESC LIMIT 1</sql>"
  },
  {
    "id": 1971,
    "db_id": "video_game",
    "question": "Show the title of games that are not played by any player who is in the Guard position.",
    "answer": "SELECT T1.title FROM game AS T1 INNER JOIN player AS T2 ON T1.game_id = T2.Game_ID WHERE T2.position = 'Guard'</sql>"
  },
  {
    "id": 1972,
    "db_id": "video_game",
    "question": "What are the titles of games not played by any players who play the Guard position?",
    "answer": "SELECT DISTINCT T2.title FROM player AS T1 INNER JOIN game AS T2 ON T1.Player_ID = T2.Game_ID WHERE T1.Position IN ('Guard')</sql>"
  },
  {
    "id": 1973,
    "db_id": "book_press",
    "question": "list all the names of press in descending order of the profit of the year.",
    "answer": "SELECT DISTINCT T1.name FROM \"press AS T1 INNER JOIN author AS T2 ON T1.Press_ID = T2.Author_ID ORDER BY T1.`Year_Profits_billion` DESC LIMIT 1</sql>"
  },
  {
    "id": 1974,
    "db_id": "book_press",
    "question": "Sorted all the press by year profits in descending order, and return press names.",
    "answer": "SELECT DISTINCT T1.name FROM press AS T1 INNER JOIN author AS T2 ON T1.press_id = T2.Press_ID ORDER BY T1.release_date DESC LIMIT 1</sql>"
  },
  {
    "id": 1975,
    "db_id": "book_press",
    "question": "What are the names of the publishers that made more than 15 billion profits each year or 1 billion each month?",
    "answer": "SELECT DISTINCT T2.name FROM book AS T1 INNER JOIN press AS T2 ON T1.Book_ID = T2.Press_ID WHERE T1.Year_Profits_billion > ( SELECT MAX(YEAR) - 1 ) * 100 + T1.month_profit_billion BIGGER THEN T1.name END AS result GROUP BY T2.press_id ORDER BY SUM(T2"
  },
  {
    "id": 1976,
    "db_id": "book_press",
    "question": "Find the press whose yearly profit is more than 15 billion or whose monthly profit is more than 1 billion. Return the press names.",
    "answer": "SELECT DISTINCT T2.name FROM book AS T1 INNER JOIN press AS T2 ON T1.Book_ID = T2.Press_ID WHERE T1.YearProfits BETWEEN 15 AND 1 AND T1.monthProfit BETWEEN 10 AND 30 GROUP BY T2.name ORDER BY SUM(T1.`YearProfits_billion`) + SUM(T1.monthProfit"
  },
  {
    "id": 1977,
    "db_id": "book_press",
    "question": "what are the average and maximum profit of a year for all presses?",
    "answer": "SELECT AVG(SUM(CASE WHEN T2.Years IN (1903, 2017) THEN Sale_Amount ELSE NULL END)) AS avg , MAX(CASE WHEN T2.Years = 1975 THEN T2.Price END) FROM press AS T1 INNER JOIN book AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T1.release_date LIMIT 1</sql>"
  },
  {
    "id": 1978,
    "db_id": "book_press",
    "question": "Find the average and maximum yearly profit for each press.",
    "answer": "SELECT CAST(SUM(CASE WHEN T2.Years IN (3,15000) THEN SUM(T2.Price * T1.Sales_Amount - 624.789601) END)) / COUNT(`Book`) AS Percentage , MAX(CAST(SUM(CASE WHEN T2.Years = 3 AND (T2.`Year` = '15000' OR T2.`Year"
  },
  {
    "id": 1979,
    "db_id": "book_press",
    "question": "Find the name of the publisher whose monthly profit is the highest.",
    "answer": "SELECT T2.name FROM press AS T1 INNER JOIN book AS T2 ON T1.Press_ID = T2.PRIMARY KEY WHERE T1.months_profits_billion BETWEEN 1 AND 56 ORDER BY t2.release_date LIMIT 1</sql>"
  },
  {
    "id": 1980,
    "db_id": "book_press",
    "question": "Which press has the largest monthly profit? Give me the press name.",
    "answer": "SELECT T1.name FROM \"press\" AS T1 INNER JOIN author AS T2 ON T1.Author_ID = T2.Author_ID ORDER BY T1.Months_billion DESC LIMIT 1</sql>"
  },
  {
    "id": 1981,
    "db_id": "book_press",
    "question": "Find the name of the publisher whose monthly profit is the highest or the lowest.",
    "answer": "SELECT T2.Name FROM press AS T1 INNER JOIN book AS T2 ON T1.Press_ID = T2.Book_ID ORDER BY T1.Years - ( SELECT MAX(T1.Years) FROM press AS T3 INNER JOIN publisher AS T4 ON T3.PRIMARY KEY (\"Author_ID\") = T4.Name WHERE T3.SalesAmount = 9 ) DESC LIMIT 2</sql>"
  },
  {
    "id": 1982,
    "db_id": "book_press",
    "question": "What are the names of the press that makes the highest monthly profit or the lowest monthly profit?",
    "answer": "SELECT DISTINCT T1.name FROM book AS T1 INNER JOIN pricing_data AS T2 ON T1.book_ID = T2.Book_ID ORDER BY SUM(T2.Profit_billion) DESC LIMIT 1</sql>"
  },
  {
    "id": 1983,
    "db_id": "book_press",
    "question": "how many authors are under age 30?",
    "answer": "SELECT COUNT(T2.Name) FROM book AS T1 INNER JOIN author AS T2 ON T1.Book_ID = T2.Book_ID WHERE T1.YearProfitsBillion > 98 AND T1.Age BETWEEN 30 AND 46 AND T2.Gender IS 'F'</sql>"
  },
  {
    "id": 1984,
    "db_id": "book_press",
    "question": "Count the number of authors of age below 30.",
    "answer": "SELECT COUNT(T2.Name) FROM book AS T1 INNER JOIN author AS T2 ON T1.Book_ID = T2.Book_ID WHERE T1.YearsProfitsBillion < 30 AND T2.Gender IS 'F'</sql>"
  },
  {
    "id": 1985,
    "db_id": "book_press",
    "question": "find the average age of authors for each gender.",
    "answer": "SELECT SUM(CASE WHEN T1.Gender = 'M' THEN strftime('%J', T2.release_date) - strftime('%J', T1.age)) / ( SELECT COUNT(T2.Author_ID) FROM Author AS T1 INNER JOIN Press AS T2 ON T1.Book_ID = T2.book_id WHERE strftime('%Y', T2.release_date) - strftime('%"
  },
  {
    "id": 1986,
    "db_id": "book_press",
    "question": "For each gender, return gender and the average age of authors.",
    "answer": "SELECT T1.Gender, AVG(T2.age) FROM author AS T1 INNER JOIN press AS T2 ON T1.Author_ID = T2.Press_ID GROUP BY T2.gender ORDER BY T2.gender, T2.`Age` DESC LIMIT 3</sql>"
  },
  {
    "id": 1987,
    "db_id": "book_press",
    "question": "find the number of authors who are older than 30 for each gender.",
    "answer": "SELECT DISTINCT T1.Name, SUM(T2.`Years_Worked`), SUM(T1.Age), strftime('%J', T2.Sale_Date) AS date , T1.Gender FROM authors AS T1 INNER JOIN press AS T2 ON T1.Author_ID = T2.Press_ID GROUP BY T1.`Gender` ORDER BY T2.`Years_Worked DESC LIMIT 3</sql>"
  },
  {
    "id": 1988,
    "db_id": "book_press",
    "question": "How many authors are of age above 30 for each gender?",
    "answer": "SELECT DISTINCT T1.Name, T2.Gender FROM 'author' AS T1 INNER JOIN 'press' AS T2 ON T1.Author_ID = T2.Press_ID INNER JOIN 'book' AS T3 ON T1.Book_ID = T3.Book_ID WHERE T1.Gender BETWEEN 60 AND 40 ORDER BY T3.`years_profits_billion` DESC LIMIT "
  },
  {
    "id": 1989,
    "db_id": "book_press",
    "question": "List all book titles in the order of their release date from the most recent to the past.",
    "answer": "SELECT DISTINCT T1.title FROM book AS T1 INNER JOIN press AS T2 ON T1.Book_ID = T2.Press_ID ORDER BY T2.Release_date</sql>"
  },
  {
    "id": 1990,
    "db_id": "book_press",
    "question": "Sort all the books in descending order of release date, and return the book titles.",
    "answer": "SELECT DISTINCT T1.title FROM book AS T1 INNER JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.RELEASE_DATE DESC LIMIT 1</sql>"
  },
  {
    "id": 1991,
    "db_id": "book_press",
    "question": "Find the number of books for each series.",
    "answer": "SELECT SUM(sale_amount), COUNT(title) FROM book GROUP BY series ORDER BY series DESC LIMIT 1</sql>"
  },
  {
    "id": 1992,
    "db_id": "book_press",
    "question": "How many books does each book series have? Return the counts and book series.",
    "answer": "SELECT COUNT(T2.Book_ID), T1.book_series FROM ( SELECT T2.Title AS book_title , T1.Name AS author, SUM(T2.Price) AS sales_amount FROM book AS T1 INNER JOIN press AS T2 ON T1.Book_ID = T2.Press_ID GROUP BY T2.Name ORDER BY COUNT(DISTINCT T2.Author_ID) ) AS T1 INNER JOIN book AS T"
  },
  {
    "id": 1993,
    "db_id": "book_press",
    "question": "Find the titles and publish dates of the top 5 best sale books.",
    "answer": "SELECT DISTINCT T1.title, T2.publish_date FROM book AS T1 INNER JOIN press AS T2 ON T1.Book_ID = T2.Press_ID ORDER BY T2.sale_amount DESC LIMIT 5</sql>"
  },
  {
    "id": 1994,
    "db_id": "book_press",
    "question": "What are the 5 best books in terms of sale amount? Give me their titles and release dates.",
    "answer": "SELECT DISTINCT T1.title, T2.release_date FROM book AS T1 INNER JOIN press AS T2 ON T1.Book_ID = T2.Press_ID ORDER BY T3.sale_amount DESC LIMIT 5</sql>"
  },
  {
    "id": 1995,
    "db_id": "book_press",
    "question": "Find the book series that have some book selling more than 1000 and some book less 500.",
    "answer": "SELECT DISTINCT T2.title FROM press AS T1 INNER JOIN book AS T2 ON T1.Press_ID = T2.Press_ID WHERE T1.sales BETWEEN (500 - 3) AND T1.num > 1000 ORDER BY t1.num DESC LIMIT 1</sql>"
  },
  {
    "id": 1996,
    "db_id": "book_press",
    "question": "Which book series contain both books with sale amount above 1000 and books with sale amount below 500?",
    "answer": "SELECT DISTINCT T2.title FROM ( SELECT DISTINCT T3.TITLE, SUM(T2.sale_amount) AS total FROM book AS T1 INNER JOIN press AS T2 ON T1.Book_ID = T2.Press_ID WHERE T1.release_date BETWEEN 0 AND 500 GROUP BY T1.title ORDER BY sum(t1.sales_amount) DESC LIMIT 1 ) AS"
  },
  {
    "id": 1997,
    "db_id": "book_press",
    "question": "Find the name of authors who publish their books in both \"MM\" and \"LT\" series.",
    "answer": "SELECT DISTINCT T1.name FROM 'author' AS T1 INNER JOIN press AS T2 ON T1.Author_ID = T2.Press_ID WHERE T2.series IN ('MM', 'LT') GROUP BY T1.name ORDER BY count(T1.name) DESC LIMIT 1</sql>"
  },
  {
    "id": 1998,
    "db_id": "book_press",
    "question": "Which authors publish books in both \"MM\" and \"LT\" series? Give me the author names.",
    "answer": "SELECT DISTINCT T1.Name FROM 'book' AS T1 INNER JOIN author AS T2 ON T1.Book_ID = T2.Author_ID WHERE T2.`Gender` = 'M' AND T2.PRIMARYKEY(\"YearProfitsBillion\") IN (('MM', 995637845), ('LT', 90414431))</sql>"
  },
  {
    "id": 1999,
    "db_id": "book_press",
    "question": "Find the name and age of the authors who do not have any book in the record.",
    "answer": "SELECT DISTINCT T1.Name, T2.Age FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Book_ID WHERE T2.Title = 'none' AND T2.YearProfits_billion = 0</sql>"
  },
  {
    "id": 2000,
    "db_id": "book_press",
    "question": "Which authors in the record have not published any books ? Give me their names .",
    "answer": "SELECT DISTINCT T2.Name FROM press AS T1 INNER JOIN book AS T2 ON T1.Press_ID = T2.Press_ID WHERE T1.Release_date IS NULL AND NOT T1.Book_Series IN ('Invisible Man','Halo 4')</sql>"
  },
  {
    "id": 2001,
    "db_id": "book_press",
    "question": "Find the names of authors who have more than one book in the database.",
    "answer": "SELECT DISTINCT T1.Name FROM \"book\" AS T1 INNER JOIN \"author\" AS T2 ON T1.Book_ID = T2.Author_ID GROUP BY T1.Title ORDER BY COUNT(T2.Name) > 1 LIMIT 1</sql>"
  },
  {
    "id": 2002,
    "db_id": "book_press",
    "question": "Which authors have published more than 1 book according to the database? Give me their names.",
    "answer": "SELECT DISTINCT T2.name FROM 'author' AS T1 INNER JOIN publication AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T2.author ORDER BY SUM(T2.sales_amount) DESC LIMIT 1</sql>"
  },
  {
    "id": 2003,
    "db_id": "book_press",
    "question": "Find the title, author name, and publisher name for the top 3 best sales books.",
    "answer": "SELECT T2.title, T1.name AS Author_ID, T2.`publisher_name` FROM \"book\" AS T1 INNER JOIN \"author\" AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T3 ORDER BY COUNT(T1.ISBN) DESC LIMIT 3</sql>"
  },
  {
    "id": 2004,
    "db_id": "book_press",
    "question": "What are the 3 best selling books? Show their titles, author names, and press names.",
    "answer": "SELECT DISTINCT T1.title, T2.name AS authors_and_press , T2.publisher FROM book AS T1 INNER JOIN press AS T2 ON T1.book_ID = T2.Book_ID ORDER BY SUM(T3.sales_amount) DESC LIMIT 3</sql>"
  },
  {
    "id": 2005,
    "db_id": "book_press",
    "question": "Find the name and total book sale amount of each press.",
    "answer": "SELECT DISTINCT T1.name, SUM(T2.`Sale_amount`) AS total FROM `press` AS T1 INNER JOIN `author` AS T2 ON T1.Press_ID = T2.Author_ID GROUP BY T1.PRIMARY KEY (T1.Name), T2.Gender</sql>"
  },
  {
    "id": 2006,
    "db_id": "book_press",
    "question": "What are the name and total book sale amount of each press?",
    "answer": "SELECT DISTINCT T1.name, SUM(T2.`Sales_amount`) AS total FROM `book` AS T1 INNER JOIN `press` AS T2 ON T1.Press_ID = T2.Press_ID GROUP BY T1.Author_ID ORDER BY SUM(T1.`sale_amount__2014`) DESC, SUM(T2.Sales_amount) ASC LIMIT 1</sql>"
  },
  {
    "id": 2007,
    "db_id": "book_press",
    "question": "Find the number of books that are sold more than 1000 for each publisher. List the press name as well.",
    "answer": "SELECT DISTINCT T2.name, SUM(T3.`sales_amount`) FROM `press` AS T1 INNER JOIN book AS T2 ON T1.Press_ID = T2.Book_ID GROUP BY T2.publisher ORDER BY sum(T1.sales_amount) DESC LIMIT 10</sql>"
  },
  {
    "id": 2008,
    "db_id": "book_press",
    "question": "For each press, return its name and the number of books that have sale amount above 1000.",
    "answer": "SELECT DISTINCT T2.name , T2.sales FROM press AS T1 INNER JOIN book AS T2 ON T1.Press_ID = T2.PRIMARY KEY GROUP BY T1.Press_ID ORDER BY SUM(T3.`sales`) > 1000</sql>"
  },
  {
    "id": 2009,
    "db_id": "book_press",
    "question": "What is the name of the author of best selling book?",
    "answer": "SELECT T1.Name FROM \"book\" AS T1 INNER JOIN \"author\" AS T2 ON T1.Book_ID = T2.Author_ID WHERE T1.title = 'best seller' ORDER BY T2.Gender ASC LIMIT 1</sql>"
  },
  {
    "id": 2010,
    "db_id": "book_press",
    "question": "Who wrote the best selling book? Give me the author name.",
    "answer": "SELECT T1.Name FROM \"book\" AS T1 INNER JOIN author AS T2 ON T1.Author_ID = T2.Author_ID ORDER BY T1.Sales_Amount DESC LIMIT 1</sql>"
  },
  {
    "id": 2011,
    "db_id": "book_press",
    "question": "find the name and gender of the author who published the most books.",
    "answer": "SELECT T1.name, T2.gender FROM book AS T1 INNER JOIN press AS T2 ON T1.Book_ID = T2.Press_ID ORDER BY COUNT(T1.title) DESC LIMIT 1</sql>"
  },
  {
    "id": 2012,
    "db_id": "book_press",
    "question": "Who wrote the largest number of books? Give me the author name and gender.",
    "answer": "SELECT T1.name, T2.gender FROM \"book\" AS T1 INNER JOIN authors AS T2 ON T1.author_id = T2.Author_ID ORDER BY T1.sales_amount DESC LIMIT 1</sql>"
  },
  {
    "id": 2013,
    "db_id": "book_press",
    "question": "Find the names of the authors who did not have any book with the \"Accor\" press.",
    "answer": "SELECT DISTINCT T1.Name FROM author AS T1 INNER JOIN press AS T2 ON T1.Author_ID = T2.Press_ID WHERE T2.Name NOT IN ( SELECT T1.Name FROM `book` AS T1 INNER JOIN `press` AS T2 ON T1.Book_ID = T2.Book_ID WHERE 'Accor' != 0 )</sql>"
  },
  {
    "id": 2014,
    "db_id": "book_press",
    "question": "Which authors have never published under the \"Accor\" press? Give me their names.",
    "answer": "SELECT DISTINCT T2.name FROM press AS T1 INNER JOIN author AS T2 ON T1.Press_ID = T2.Press_ID WHERE T1.press != 'Accor' ORDER BY T2.Name NOT IN (T2.Author_ID)</sql>"
  },
  {
    "id": 2015,
    "db_id": "book_press",
    "question": "Find the name and the yearly profit in billion for press that published more than two books.",
    "answer": "SELECT T2.Name, T1.YearProfitsBillion FROM Press AS T1 INNER JOIN book AS T2 ON T1.Press_ID = T2.Book_ID ORDER BY COUNT(T2.Title) DESC LIMIT 2</sql>"
  },
  {
    "id": 2016,
    "db_id": "book_press",
    "question": "Find the press that published more than two books, and return its name and yearly profit in billion.",
    "answer": "SELECT DISTINCT T1.name , T2.`Year_Profits_billion`, T1.release_date FROM press AS T1 INNER JOIN book AS T2 ON T1.press_id = T2.Press_ID GROUP BY T1.title ORDER BY COUNT(T2.book_id) > 2</sql>"
  },
  {
    "id": 2017,
    "db_id": "cre_Doc_Workflow",
    "question": "How many authors do we have?",
    "answer": "SELECT COUNT(T2.author_name) FROM Documents AS T1 INNER JOIN Authors AS T2 ON T1.document_id = T2.author_id WHERE T1.document_description LIKE '%author%' GROUP BY T2 ORDER BY COUNT(*) DESC LIMIT 1</sql>"
  },
  {
    "id": 2018,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all author names.",
    "answer": "SELECT DISTINCT T1.author_name FROM Documents AS T1 INNER JOIN authors AS T2 ON T1.document_id = T2.author_id WHERE T1.document_description IN ('Product Description', 'Marketing Description', 'Other')</sql>"
  },
  {
    "id": 2019,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the names and other details for all authors.",
    "answer": "SELECT DISTINCT T2.other_details FROM Documents AS T1 INNER JOIN Authors AS T2 ON T1.author_name = T2.author_name WHERE T1.document_name = 'Staff Roles'</sql>"
  },
  {
    "id": 2020,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the other details for the author Addison Denesik.",
    "answer": "SELECT DISTINCT T2.other_details FROM Documents AS T1 INNER JOIN authors AS T2 ON T1.author_name = T2.author_name WHERE T2.first_name = 'Addison' AND T2.last_name = 'Denesik'</sql>"
  },
  {
    "id": 2021,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the number of documents.",
    "answer": "SELECT COUNT(*) FROM Documents WHERE document_name = 'Documents' AND document_description = 'Show all process status for all authors'</sql>"
  },
  {
    "id": 2022,
    "db_id": "cre_Doc_Workflow",
    "question": "Who is the author of the document with id 4?",
    "answer": "SELECT DISTINCT T2.author_name FROM Documents AS T1 INNER JOIN authors AS T2 ON T1.document_id = T2.author_id WHERE T1.document_id IN ( SELECT MAX(T1.document_id) AS id FROM documents AS T1 INNER JOIN Authors AS T2 ON T1.author_name = T2.author_name WHERE T1.document_name = 'document-4' AND T1."
  },
  {
    "id": 2023,
    "db_id": "cre_Doc_Workflow",
    "question": "Who is the author of the document \"Travel to Brazil\"?",
    "answer": "SELECT DISTINCT T2.author_name FROM Documents AS T1 INNER JOIN authors AS T2 ON T1.document_id = T2.author_id WHERE T1.document_name LIKE '%Brazil%' AND T1.document_description LIKE '%Travel to Brazil%'</sql>"
  },
  {
    "id": 2024,
    "db_id": "cre_Doc_Workflow",
    "question": "How many documents does has the author Era Kerluke written?",
    "answer": "SELECT COUNT(DISTINCT T1.author_name) FROM Documents AS T1 INNER JOIN authors AS T2 ON T1.author_name = T2.author_name WHERE T1.document_description LIKE '%Era Kerluke%' AND T2.author_name IS NOT NULL GROUP BY T2.author_name ORDER BY COUNT(T2.author_name) DESC LIMIT 0, 3</sql>"
  },
  {
    "id": 2025,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the names and descriptions for all documents.",
    "answer": "SELECT T1.document_name, T2.other_details FROM Documents AS T1 INNER JOIN Author AS T2 ON T1.author_name = T2.author_name WHERE T1.document_description = 'Document description' ORDER BY T2.other_details</sql>"
  },
  {
    "id": 2026,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the ids and names for all documents by author Bianka Cummings.",
    "answer": "SELECT T2.document_id, T1.author_name FROM Documents AS T1 INNER JOIN authors AS T2 ON T1.author_name = T2.author_name WHERE T1.document_description LIKE '%Bianka%' ORDER BY T1.document_id DESC LIMIT 1</sql>"
  },
  {
    "id": 2027,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the author name and details for the document \"Travel to China\".",
    "answer": "SELECT DISTINCT T2.author_name, T1.document_description FROM Documents AS T1 INNER JOIN Authors AS T2 ON T1.author_name = T2.author_name WHERE T1.document_name = 'Travel to China'</sql>"
  },
  {
    "id": 2028,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all author names and number of documents corresponding to each.",
    "answer": "SELECT DISTINCT T2.author_name, COUNT(DISTINCT T2.document_id) FROM Documents AS T1 INNER JOIN authors AS T2 ON T1.author_name = T2.author_name GROUP BY T2.author_name ORDER BY SUM(T2.COUNT) DESC LIMIT 1</sql>"
  },
  {
    "id": 2029,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the name of the author with most number of documents?",
    "answer": "SELECT DISTINCT T2.author_name FROM Documents AS T1 INNER JOIN authors AS T2 ON T1.author_name = T2.author_name ORDER BY T1.number DESC LIMIT 1</sql>"
  },
  {
    "id": 2030,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the names for authors with at least two documents.",
    "answer": "SELECT T1.other_details FROM Documents AS T1 INNER JOIN Author AS T2 ON T1.document_id = T2.author_id GROUP BY T1.other_details ORDER BY COUNT(T1.author_name) DESC LIMIT 3</sql>"
  },
  {
    "id": 2031,
    "db_id": "cre_Doc_Workflow",
    "question": "How many business processes do we have?",
    "answer": "SELECT COUNT(T1.process_outcome_code) FROM Process_Outcomes AS T1 INNER JOIN Documents AS T2 ON T1.process_outcome_code = T2.document_id WHERE T1.business = 1 AND T2.author_name IS NOT NULL LIMIT 1</sql>"
  },
  {
    "id": 2032,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the next process id, process name, process description for process with id 9.",
    "answer": "SELECT DISTINCT T2.process_outcome_code , T2.document_id FROM Documents AS T1 INNER JOIN Process_Outcomes AS T2 ON T1.document_id = T2.process_outcome_id WHERE T1.author_name = 'Helen Jones' ORDER BY T2.process_outcome_description, T2.process_outcome_code</sql>"
  },
  {
    "id": 2033,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the process name for the next process of the process with id 9?",
    "answer": "SELECT T1.process_outcome_description FROM Process_Status AS T1 INNER JOIN Documents AS T2 ON T1.process_status_code = T2.document_id WHERE T2.author_name = 'Craig Swanson' GROUP BY T1.process_outcome_description ORDER BY COUNT(T2.document_id) DESC LIMIT 3</sql>"
  },
  {
    "id": 2034,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the number of process outcomes.",
    "answer": "SELECT COUNT(T1.process_outcome_code) FROM Process_Outcomes AS T1 INNER JOIN Documents AS T2 ON T1.process_outcome_code = T2.document_id WHERE T1.process_status = 'Active' GROUP BY T1.process_outcome_description ORDER BY COUNT(T1.process_outcome_description) DESC LIMIT 3</sql>"
  },
  {
    "id": 2035,
    "db_id": "cre_Doc_Workflow",
    "question": "List the codes and descriptions for all process outcomes.",
    "answer": "SELECT DISTINCT T1.process_outcome_description, T2.description FROM Documents AS T1 INNER JOIN Process_Outcomes AS T2 ON T1.document_id = T2.process_outcome_code WHERE T2.description != ''</sql>"
  },
  {
    "id": 2036,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the description for the process outcome code working?",
    "answer": "SELECT DISTINCT T2.process_outcome_description FROM Process_Outcomes AS T1 INNER JOIN Documents AS T2 ON T1.process_outcome_code = T2.document_id WHERE T1.process_status_code IN ( SELECT 'Working' UNION ALL ) ORDER BY T2.process_outcome_description</sql>"
  },
  {
    "id": 2037,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the number of process status.",
    "answer": "SELECT COUNT(process_status_code) FROM Process_Status GROUP BY process_outcome_description ORDER BY COUNT(process_status_code) DESC LIMIT 1</sql>"
  },
  {
    "id": 2038,
    "db_id": "cre_Doc_Workflow",
    "question": "List the codes and descriptions for all process status.",
    "answer": "SELECT DISTINCT T1.process_outcome_description, T2.staff_role_description FROM Documents AS T1 INNER JOIN Process_Status AS T2 ON T1.document_id = T2.process_status_code ORDER BY T1.process_outcome_code , T2.staff_role_description</sql>"
  },
  {
    "id": 2039,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the description for process status code ct?",
    "answer": "SELECT DISTINCT T2.process_status_description FROM Documents AS T1 INNER JOIN Process_Status AS T2 ON T1.document_id = T2.process_outcome_code ORDER BY T2.process_outcome_code DESC LIMIT 1</sql>"
  },
  {
    "id": 2040,
    "db_id": "cre_Doc_Workflow",
    "question": "How many staff do we have?",
    "answer": "SELECT COUNT(staff_id) FROM Documents WHERE document_name = 'Business'</sql>"
  },
  {
    "id": 2041,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the ids and details for all staff.",
    "answer": "SELECT DISTINCT T1.staff_id, T2.other_details FROM documents AS T1 INNER JOIN Staff AS T2 ON T1.document_id = T2.staff_id WHERE T1.document_name = 'Financial statement'</sql>"
  },
  {
    "id": 2042,
    "db_id": "cre_Doc_Workflow",
    "question": "What are the details for the staff member with id 100.",
    "answer": "SELECT DISTINCT T2.other_details FROM Documents AS T1 INNER JOIN Staff AS T2 ON T1.document_id = T2.staff_id WHERE T1.author_name = 'staff-100'</sql>"
  },
  {
    "id": 2043,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the number of staff roles.",
    "answer": "SELECT COUNT(*) FROM Staff AS T1 INNER JOIN Process_Outcome AS T2 ON T1.staff_id = T2.process_outcome_code WHERE T2.process_outcome_description = 'Job Duration'</sql>"
  },
  {
    "id": 2044,
    "db_id": "cre_Doc_Workflow",
    "question": "List the codes and descriptions for all staff roles.",
    "answer": "SELECT T1.staff_role_description, T2.other_details FROM Process_Outcomes AS T1 INNER JOIN Staff_Roles AS T2 ON T1.staff_id = T2.staff_id WHERE T2.staff_role_code IN ('P4', 'P5') AND T2.staff_status = 'Inactive'</sql>"
  },
  {
    "id": 2045,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the description for staff role code HR?",
    "answer": "SELECT DISTINCT T2.description FROM Documents AS T1 INNER JOIN Staff_roles AS T2 ON T1.document_id = T2.staff_role_code WHERE T1.author_name = 'HR' AND T2.description = 'HR'</sql>"
  },
  {
    "id": 2046,
    "db_id": "cre_Doc_Workflow",
    "question": "How many documents have a process?",
    "answer": "SELECT COUNT(DISTINCT T1.document_id) FROM Documents AS T1 INNER JOIN Process_Outcomes AS T2 ON T1.document_id = T2.process_outcome_code WHERE T1.document_name IN ('Employee Manual', 'Document 4') AND T2.process_status = 'In Progress'</sql>"
  },
  {
    "id": 2047,
    "db_id": "cre_Doc_Workflow",
    "question": "List all process ids with a document.",
    "answer": "SELECT T1.process_outcome_code FROM Documents AS T1 INNER JOIN Process_Outcomes AS T2 ON T1.document_id = T2.process_outcome_code WHERE T2.process_description = 'Business Process' AND T1.author_name = 'Adam'</sql>"
  },
  {
    "id": 2048,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all document ids without a process.",
    "answer": "SELECT T3.document_id FROM Documents AS T1 INNER JOIN Process_Status AS T2 ON T1.document_id = T2.process_status_code WHERE T2.description IS NULL</sql>"
  },
  {
    "id": 2049,
    "db_id": "cre_Doc_Workflow",
    "question": "List all process ids with no document.",
    "answer": "SELECT T2.process_outcome_code, T1.process_status FROM Documents AS T1 INNER JOIN Process_Outcomes AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name = 'None' AND T2.process_outcome_description IS NULL ORDER BY COUNT(T2.document_code) ASC LIMIT 1</sql>"
  },
  {
    "id": 2050,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the process outcome description and process status description for the document with id 0?",
    "answer": "SELECT DISTINCT T2.process_outcome_description, T2.process_status_description FROM documents AS T1 INNER JOIN Process_Outcomes AS T2 ON T1.document_id = T2.document_id WHERE T2.process_outcome_code = 'P583' AND T2.process_status_code LIKE '%P%']</sql>"
  },
  {
    "id": 2051,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the process name for the document \"Travel to Brazil\"?",
    "answer": "SELECT DISTINCT T1.process_outcome_description FROM Documents AS T1 INNER JOIN Process_Outcomes AS T2 ON T1.document_id = T2.process_outcome_code WHERE T2.process_outcome_description IN ('Travel to Brazil')</sql>"
  },
  {
    "id": 2052,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all process ids and the number of documents in each process.",
    "answer": "SELECT DISTINCT T2.process_outcome_code, COUNT(T2.document_id) FROM Documents AS T1 INNER JOIN Process_Outcomes AS T2 ON T1.document_id = T2.process_outcome_code WHERE T1.process_status_code LIKE '%Process%' GROUP BY T2.process_outcome_code ORDER BY DISTINCT T2.process_outcome_description DESC LIMIT 1</sql>"
  },
  {
    "id": 2053,
    "db_id": "cre_Doc_Workflow",
    "question": "How many staff are the document with id 0 and process with id 9.",
    "answer": "SELECT COUNT(T2.document_id) FROM Documents AS T1 INNER JOIN Process_Outcomes AS T2 ON T1.document_id = T2.process_outcome_code WHERE T1.document_name = '0584-0373' AND T1.process_status_code IN ('Pending', 'Failed')</sql>"
  },
  {
    "id": 2054,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all staff ids and the number of document processes for each staff.",
    "answer": "SELECT DISTINCT T2.staff_id, COUNT(T1.process_outcome_code) FROM Documents AS T1 INNER JOIN Staff AS T2 ON T1.document_id = T2.staff_id GROUP BY T2 ORDER BY T2.staff_role_description</sql>"
  },
  {
    "id": 2055,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all staff role codes and the number of document processes for each role.",
    "answer": "SELECT DISTINCT T2.staff_role_code, COUNT(T3.document_id) FROM Process_Outcomes AS T1 INNER JOIN Documents AS T2 ON T1.process_outcome_code = T2.document_name INNER JOIN Staff AS T3 ON T2.staff_id = T3.staff_id GROUP BY T3.staff_role_description ORDER BY T3.other_details DESC LIMIT 1"
  },
  {
    "id": 2056,
    "db_id": "cre_Doc_Workflow",
    "question": "How many different roles does the staff with id 3 have?",
    "answer": "SELECT COUNT(T1.staff_role_code) FROM Process_Outcomes AS T1 INNER JOIN Staff AS T2 ON T1.staff_role_code = T2.staff_role_code WHERE T2.staff_id IN ( SELECT MAX(staff_id), staff_role_name FROM Documents GROUP BY staff_role_name )</sql>"
  },
  {
    "id": 2057,
    "db_id": "advertising_agencies",
    "question": "How many agencies do we have?",
    "answer": "SELECT COUNT(DISTINCT T1.agency_id), SUM(T3.payment_details) FROM `Agencies AS T1 INNER JOIN Staff AS T2 ON T1.agency_id = T2.staff_id INNER JOIN payments AS T3"
  },
  {
    "id": 2058,
    "db_id": "advertising_agencies",
    "question": "Count the number of agencies.",
    "answer": "SELECT COUNT(T1.agency_id), T2.`client_details`' AS number FROM staff AS T1 INNER JOIN clients AS T2 ON T1.staff_id = T2.staff_id WHERE T2.client_id = '908463"
  },
  {
    "id": 2059,
    "db_id": "advertising_agencies",
    "question": "Show all agency ids and details.",
    "answer": "SELECT DISTINCT T2.agency_id, T3.agency_details FROM Invoices AS T1 INNER JOIN Staff AS T2 ON T1.staff_id = T2.staff_id INNER JOIN Agencies AS T4 ON T2.client"
  },
  {
    "id": 2060,
    "db_id": "advertising_agencies",
    "question": "What are all the agency ids and details?",
    "answer": "SELECT T1.agency_details, T2.client_details FROM ( SELECT DISTINCT T1.agency_id , T2.client_details FROM `Staff` AS T1 INNER JOIN `Agencies` AS T2 ON T2.st"
  },
  {
    "id": 2061,
    "db_id": "advertising_agencies",
    "question": "Show the number of clients.",
    "answer": "SELECT COUNT(client_id) FROM Clients GROUP BY client_id ORDER BY COUNT(client_id) DESC LIMIT 1</sql>"
  },
  {
    "id": 2062,
    "db_id": "advertising_agencies",
    "question": "How many clients are there?",
    "answer": "SELECT COUNT(DISTINCT T1.client_id) FROM Clients AS T1 INNER JOIN Invoices AS T2 ON T1.client_id = T2.client_id WHERE strftime('%Y', T2.`invoice_date`) IS NULL AND str"
  },
  {
    "id": 2063,
    "db_id": "advertising_agencies",
    "question": "List all client ids and client details.",
    "answer": "SELECT T1.client_id, T2.client_details FROM Clients AS T1 INNER JOIN Invoices AS T2 ON T1.client_id = T2.client_id ORDER BY T2.invoice_id LIMIT 1</sql>"
  },
  {
    "id": 2064,
    "db_id": "advertising_agencies",
    "question": "What are all the client ids and details?",
    "answer": "SELECT T1.client_id, T2.client_details FROM Clients AS T1 INNER JOIN Staff AS T2 ON T1.agency_id = T2.agency_id INNER JOIN Meetings AS T3 ON T2.meeting_id"
  },
  {
    "id": 2065,
    "db_id": "advertising_agencies",
    "question": "Show agency ids and the number of clients for each agency.",
    "answer": "SELECT DISTINCT T2.agency_details, COUNT(T1.client_id) FROM Agencies AS T1 INNER JOIN Staff_in_Meetings AS T2 ON T1.agency_id = T2.staff_"
  },
  {
    "id": 2066,
    "db_id": "advertising_agencies",
    "question": "How many clients does each agency have?",
    "answer": "SELECT T1.client_details, COUNT(T2.agency_id), SUM(CASE WHEN T1.agency_details = 'Staff' THEN 1 ELSE 0 END) AS staff FROM ( SELECT T2.staff , COUNT(CASE WHEN T2"
  },
  {
    "id": 2067,
    "db_id": "advertising_agencies",
    "question": "What is the agency id and details with most number of clients?",
    "answer": "SELECT DISTINCT T2.agency_id, T2.staff_details FROM ( SELECT DISTINCT T1.agency_id , T3.client_details FROM `Staff` AS T1 INNER JOIN `Agencies`"
  },
  {
    "id": 2068,
    "db_id": "advertising_agencies",
    "question": "Return the agency id and details for the agency with the greatest number of clients.",
    "answer": "SELECT DISTINCT T2.agency_id, T2.details FROM Invoices AS T1 INNER JOIN Clients AS T2 ON T1.client_id = T2.client_id GROUP BY T2.st"
  },
  {
    "id": 2069,
    "db_id": "advertising_agencies",
    "question": "Show agency ids and details with at least 2 clients.",
    "answer": "SELECT DISTINCT T1.agency_details, T1.client_name FROM `Staff AS T1 INNER JOIN Agencies AS T2 ON T1.staff_id = T2.staff_id WHERE T2.`Agency Name"
  },
  {
    "id": 2070,
    "db_id": "advertising_agencies",
    "question": "What are the agency ids and details agencies with at least 2 clients?",
    "answer": "SELECT DISTINCT T1.agency_details, T1.client_id FROM clients AS T1 INNER JOIN agencies AS T2 ON T1.client_id = T2.agency_id GROUP BY T1.ag"
  },
  {
    "id": 2071,
    "db_id": "advertising_agencies",
    "question": "Show agency details for client with detail 'Mac'.",
    "answer": "SELECT T1.agency_details FROM clients AS T1 INNER JOIN agencies AS T2 ON T1.client_id = T2.agency_id WHERE T1.sic_code LIKE '%Mac%' AND T2.name LIKE '%Mac'</"
  },
  {
    "id": 2072,
    "db_id": "advertising_agencies",
    "question": "What are the agency details for clients with the detail Mac?",
    "answer": "SELECT T1.agency_details FROM `Clients AS T1 INNER JOIN Staff AS T2 ON T1.client_id = T2.staff_id WHERE T2.staff_details LIKE '%Mac%'</sql>"
  },
  {
    "id": 2073,
    "db_id": "advertising_agencies",
    "question": "Show details for all clients and the details of their corresponding agents.",
    "answer": "SELECT T2.client_details, T1.agency_details FROM ( SELECT DISTINCT T3.`staff_id`, T4.client_details AS `client_details` , T6.`staff_details` AS `agency_details"
  },
  {
    "id": 2074,
    "db_id": "advertising_agencies",
    "question": "What are the client details for each client and the corresponding details of their agencies?",
    "answer": "SELECT DISTINCT T2.client_details, T1.agency_id FROM payments AS T1 INNER JOIN staff_in_meetings AS T2 ON T1.staff_id = T2.staff_"
  },
  {
    "id": 2075,
    "db_id": "advertising_agencies",
    "question": "Show all sic codes and the number of clients with each code.",
    "answer": "SELECT T1.`sic_code`, COUNT(T2.client_id), SUM(T2.number_of_clients) FROM Staff AS T1 INNER JOIN Clients AS T2 ON T1.staff_id = T2.st"
  },
  {
    "id": 2076,
    "db_id": "advertising_agencies",
    "question": "How many clients are there for each sic code?",
    "answer": "SELECT T1.client_details, SUM(CASE WHEN T2.sic = 'B' THEN 1 ELSE 0 END) AS total , COUNT(T3.client_id) FROM ( SELECT T1.client_details, CASE WHEN T2.sic"
  },
  {
    "id": 2077,
    "db_id": "advertising_agencies",
    "question": "Show all client ids and details with sic code \"Bad\".",
    "answer": "SELECT DISTINCT T2.client_id, T3.sic_code FROM `Staff` AS T1 INNER JOIN `Invoices` AS T2 ON T1.staff_id = T2.client_id WHERE T1.client"
  },
  {
    "id": 2078,
    "db_id": "advertising_agencies",
    "question": "What are the client ideas and details for clients with the sic code Bad?",
    "answer": "SELECT DISTINCT T2.client_details FROM Invoices AS T1 INNER JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T1.`sic_code` = 'BAD"
  },
  {
    "id": 2079,
    "db_id": "advertising_agencies",
    "question": "Show all agency ids and details for agencies with a client.",
    "answer": "SELECT T1.agency_id, T2.client_details FROM Agencies AS T1 INNER JOIN Staff AS T2 ON T1.agency_id = T2.staff_id WHERE T2.client_details = 'client_"
  },
  {
    "id": 2080,
    "db_id": "advertising_agencies",
    "question": "What are the agency ids and agency details for all agencies who have a client?",
    "answer": "SELECT DISTINCT T2.agency_details, T3.client_details FROM Clients AS T1 INNER JOIN Staff AS T2 ON T1.client_id = T2.staff_id INNER JOIN A"
  },
  {
    "id": 2081,
    "db_id": "advertising_agencies",
    "question": "Show all agency ids without any client.",
    "answer": "SELECT T1.agency_id FROM clients AS T1 INNER JOIN agencies AS T2 ON T1.client_id = T2.agency_id WHERE T2.name = 'NoAgency'</sql>"
  },
  {
    "id": 2082,
    "db_id": "advertising_agencies",
    "question": "What are ids of agencies that do not have any clients?",
    "answer": "SELECT T1.agency_details FROM ( SELECT DISTINCT T2.client_details, 1 AS num FROM Clients AS T1 INNER JOIN Agencies AS T2 ON T1.client_id = T2.agency_id"
  },
  {
    "id": 2083,
    "db_id": "advertising_agencies",
    "question": "How many invoices do we have?",
    "answer": "SELECT COUNT(DISTINCT T1.invoice_id), SUM(T3.start_date_time - T2.end_date_time) AS total FROM ( SELECT DISTINCT T3.client_details, strftime('%J', T3."
  },
  {
    "id": 2084,
    "db_id": "advertising_agencies",
    "question": "Count the number of invoices.",
    "answer": "SELECT COUNT(DISTINCT T1.invoice_id), SUM(T1.sic_code) FROM Clients AS T1 INNER JOIN Invoices AS T2 ON T1.client_id = T2.client_id GROUP BY T1.client_details"
  },
  {
    "id": 2085,
    "db_id": "advertising_agencies",
    "question": "Show ids, status codes, and details for all invoices for clients.",
    "answer": "SELECT DISTINCT T2.client_details , strftime('%Y %m %d', T3.start_date_time), 'Invoice Status' AS status , T1.invoice_details FROM Staff AS T1 INNER JOIN"
  },
  {
    "id": 2086,
    "db_id": "advertising_agencies",
    "question": "What are the ids, statuses, and details for all invoices?",
    "answer": "SELECT DISTINCT T2.invoice_details FROM Invoices AS T1 INNER JOIN Staff_in_Meetings AS T2 ON T1.client_id = T2.client_id WHERE T1.client_details LIKE"
  },
  {
    "id": 2087,
    "db_id": "advertising_agencies",
    "question": "Show all client ids and the number of invoices for each client.",
    "answer": "SELECT DISTINCT T2.client_id, COUNT(T1.invoice_details) FROM Payments AS T1 INNER JOIN Clients AS T2 ON T1.client_id = T2.client_id GROUP BY T1."
  },
  {
    "id": 2088,
    "db_id": "advertising_agencies",
    "question": "How many invoices are there for each client id?",
    "answer": "SELECT T1.client_details, COUNT(T2.invoice_id), SUM(CASE WHEN T3.staff_id = 'billable_0' THEN 1 ELSE 0 END) AS total FROM `Invoices` AS T1"
  },
  {
    "id": 2089,
    "db_id": "advertising_agencies",
    "question": "List the client id and detail with most number of invoices.",
    "answer": "SELECT DISTINCT T2.client_id, T3.`other_details`, COUNT(T1.invoice_id) FROM `Staff` AS T1 INNER JOIN Invoices AS T2 ON T1.staff_id = T2"
  },
  {
    "id": 2090,
    "db_id": "advertising_agencies",
    "question": "What are the client id and details for the client with the most invoices?",
    "answer": "SELECT DISTINCT T2.client_details FROM ( SELECT DISTINCT T3.`Client_Details`, SUM(T1.invoice_status) AS total FROM `Invoices` AS T1 INNER JOIN `Staff` AS"
  },
  {
    "id": 2091,
    "db_id": "advertising_agencies",
    "question": "What are client ids for clients with at least 2 invoices.",
    "answer": "SELECT DISTINCT T1.client_id FROM Clients AS T1 INNER JOIN Invoices AS T2 ON T1.client_id = T2.client_id GROUP BY T1.client_id ORDER BY COUNT(T1."
  },
  {
    "id": 2092,
    "db_id": "advertising_agencies",
    "question": "Return the client ids for clients with two or more invoices?",
    "answer": "SELECT DISTINCT T2.client_id FROM Payments AS T1 INNER JOIN Invoice AS T2 ON T1.invoice_id = T2.invoice_id GROUP BY T2.client_id ORDER BY COUNT(T1."
  },
  {
    "id": 2093,
    "db_id": "advertising_agencies",
    "question": "Show all invoice status codes and the number of invoices with each status.",
    "answer": "SELECT DISTINCT T2.invoice_status, COUNT(T1.staff_details.client_id) FROM invoices AS T1 INNER JOIN staff_in_meetings AS T2 ON T1.staff_"
  },
  {
    "id": 2094,
    "db_id": "advertising_agencies",
    "question": "How many invoices are there for each status code?",
    "answer": "SELECT SUM(invoice_details.invoice_status), SUM(SUM(invoice_details.billable_yn)) FROM ( SELECT CAST(SUBSTR(`staff_details` AS CHAR) AS REAL) AS T1, `staff"
  },
  {
    "id": 2095,
    "db_id": "advertising_agencies",
    "question": "What is the invoice status code with most number of invoices.",
    "answer": "SELECT COUNT(DISTINCT T1.invoice_details), SUM(T3.other_details) AS total FROM ( SELECT DISTINCT CASE WHEN T2.status = 'pending' THEN t1.staff_details ELSE NULL END,"
  },
  {
    "id": 2096,
    "db_id": "advertising_agencies",
    "question": "Return the invoice status that has the most invoices.",
    "answer": "SELECT SUM(invoice_status) FROM ( SELECT MAX(T2.invoice_status), T1.client_details AS str FROM `Invoices` AS T1 INNER JOIN Staff AS T2 ON T1.staff_id = T2."
  },
  {
    "id": 2097,
    "db_id": "advertising_agencies",
    "question": "Show all invoice status codes and details and the corresponding client id and details and agency id and details.",
    "answer": "SELECT DISTINCT T2.invoice_status, T3.client_details FROM invoices AS T1 INNER JOIN `Staff` AS T2 ON T1.staff_id = T2.st"
  },
  {
    "id": 2098,
    "db_id": "advertising_agencies",
    "question": "What are the invoice status, invoice details, and corresponding client ids and details and agency id and details?",
    "answer": "SELECT DISTINCT T1.invoice_status, T2.client_details FROM Payments AS T1 INNER JOIN Invoices AS T2 ON T1.payment_id = T2.payment"
  },
  {
    "id": 2099,
    "db_id": "advertising_agencies",
    "question": "List all meeting type codes and details.",
    "answer": "SELECT DISTINCT T2.meeting_type, T3.other_details FROM invoices AS T1 INNER JOIN meetings AS T2 ON T1.invoice_id = T2.invoice_id INNER JOIN staff_in_meetings AS T3 ON"
  },
  {
    "id": 2100,
    "db_id": "advertising_agencies",
    "question": "What are all meeting types and other details?",
    "answer": "SELECT DISTINCT T2.type, T3.other_details FROM ( SELECT DISTINCT `Meetings`.meeting_type AS t1 ,  T2.`start_date_time` AS t2,  T2.staff_name AS t3"
  },
  {
    "id": 2101,
    "db_id": "advertising_agencies",
    "question": "Show all meeting outcomes and purposes.",
    "answer": "SELECT DISTINCT T2.outcome, T1.purpose FROM ( SELECT DISTINCT `Meetings`.invoice_details AS outcome ,  `Invoices`.client_details,  `Staff_in_Meetings`.other_details AS purpose FROM"
  },
  {
    "id": 2102,
    "db_id": "advertising_agencies",
    "question": "What are all meeting outcomes and purposes?",
    "answer": "SELECT DISTINCT T2.outcome, T1.purpose_of_meeting FROM Invoices AS T1 INNER JOIN Meetings AS T2 ON T1.invoice_id = T2.invoice_id WHERE T2.billable_"
  },
  {
    "id": 2103,
    "db_id": "advertising_agencies",
    "question": "Show all payment ids and details for invoices whose status is 'Working'.",
    "answer": "SELECT DISTINCT T2.payment_id, T3.`invoice_status`, T1.`other_details` FROM ( SELECT T1.`client_id`, `payment_details` , COUNT(`T2.payment_id`)"
  },
  {
    "id": 2104,
    "db_id": "advertising_agencies",
    "question": "What are all payment ids and payment details for invoices with status Working?",
    "answer": "SELECT T1.payment_id, T2.`payment_details`, T3.client_details FROM `Payments` AS T1 INNER JOIN Invoices AS T2 ON T1.invoice_id = T2.invoice_"
  },
  {
    "id": 2105,
    "db_id": "advertising_agencies",
    "question": "Show all invoice ids and statuses without a payment.",
    "answer": "SELECT T1.invoice_id, T2.status FROM ( SELECT DISTINCT T3.invoice_id, 'PENDING' AS status FROM Payments AS T1 INNER JOIN Staff_in_Meetings AS T2 ON T1.st"
  },
  {
    "id": 2106,
    "db_id": "advertising_agencies",
    "question": "What are the invoice ids and statuses for invoices without a payment?",
    "answer": "SELECT DISTINCT T2.invoice_id, T2.payment_status FROM Staff AS T1 INNER JOIN Invoices AS T2 ON T1.staff_id = T2.staff_id WHERE T1."
  },
  {
    "id": 2107,
    "db_id": "advertising_agencies",
    "question": "How many payments do we have?",
    "answer": "SELECT COUNT(DISTINCT T1.payment_id), SUM(T2.`billable_yn` = 'Yes') AS total FROM ( SELECT DISTINCT T1.`client_details`, sum(`amount`) AS `total` FROM Clients GROUP BY T1.`"
  },
  {
    "id": 2108,
    "db_id": "advertising_agencies",
    "question": "Count the number of payments.",
    "answer": "SELECT COUNT(payment_id) FROM Payments GROUP BY payment_id ORDER BY SUM(SUM(CASE WHEN T1.payment_details = 'Billable' THEN 1 END)) DESC LIMIT 1</sql>"
  },
  {
    "id": 2109,
    "db_id": "advertising_agencies",
    "question": "List all payment ids and its corresponding invoice ids and details.",
    "answer": "SELECT DISTINCT T2.payment_id, T1.invoice_id FROM payments AS T1 INNER JOIN Staff_in_Meetings AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1"
  },
  {
    "id": 2110,
    "db_id": "advertising_agencies",
    "question": "What are the payment ids, invoice ids, and payment details for all payments?",
    "answer": "SELECT DISTINCT T2.payment_id , T3.invoice_details FROM ( SELECT `payment_id`, `staff_id`, `payment_details` AS invoice_details FROM staff_in_meetings"
  },
  {
    "id": 2111,
    "db_id": "advertising_agencies",
    "question": "Show all the different invoice ids and statuses of the payments",
    "answer": "SELECT DISTINCT T2.invoice_details, T3.payment_outcome FROM Payments AS T1 INNER JOIN Meetings AS T2 ON T1.meeting_id = T2.meeting_id INNER JOIN Invoices"
  },
  {
    "id": 2112,
    "db_id": "advertising_agencies",
    "question": "What are the distinct invoice ids and statuses for all payments?",
    "answer": "SELECT T1.invoice_id, T2.status FROM Payments AS T1 INNER JOIN Staff AS T2 ON T1.staff_id = T2.staff_id ORDER BY strftime('%J', T1.`"
  },
  {
    "id": 2113,
    "db_id": "advertising_agencies",
    "question": "Show all invoice ids and the number of payments for each invoice.",
    "answer": "SELECT DISTINCT T2.invoice_id, COUNT(T1.payment_details) FROM Payments AS T1 INNER JOIN Invoices AS T2 ON T1.client_id = T2.client_id GROUP BY T2"
  },
  {
    "id": 2114,
    "db_id": "advertising_agencies",
    "question": "How many payments are there for each invoice?",
    "answer": "SELECT SUM(sum(payment_details)) FROM invoices GROUP BY invoice_id ORDER BY SUM(invoice_details.billable_yn) DESC LIMIT 1</sql>"
  },
  {
    "id": 2115,
    "db_id": "advertising_agencies",
    "question": "What is the invoice id, status code, and details for the invoice with most number of payments.",
    "answer": "SELECT DISTINCT T2.invoice_details FROM ( SELECT MAX(T3.invoice_details),  SUM(T1.payment_details) AS total , T1.staff_details FROM Pay"
  },
  {
    "id": 2116,
    "db_id": "advertising_agencies",
    "question": "Return the invoice ids, statuses, and details for invoices with the most payments?",
    "answer": "SELECT DISTINCT T2.invoice_id, T3.payment_details FROM Invoices AS T1 INNER JOIN Staff_in_Meetings AS T2 ON T1.client_id = T2"
  },
  {
    "id": 2117,
    "db_id": "advertising_agencies",
    "question": "How many staff do we have?",
    "answer": "SELECT COUNT(T2.staff_id), T1.client_details FROM Staff AS T1 INNER JOIN Invoices AS T2 ON T1.staff_id = T2.staff_id WHERE T2.invoice_type = 'Invoice' GROUP BY"
  },
  {
    "id": 2118,
    "db_id": "advertising_agencies",
    "question": "Count the number of staff.",
    "answer": "SELECT COUNT(DISTINCT T2.staff_id), SUM(T2.invoice_details) FROM Staff AS T1 INNER JOIN Meetings AS T2 ON T1.staff_id = T2.client_id GROUP BY T2.client_id ORDER BY COUNT"
  },
  {
    "id": 2119,
    "db_id": "advertising_agencies",
    "question": "Show the agency ids and the number of staff in each agent?",
    "answer": "SELECT DISTINCT T2.agency_id, COUNT(T1.client_id) FROM Staff AS T1 INNER JOIN Agencies AS T2 ON T1.staff_id = T2.agency_id WHERE T1."
  },
  {
    "id": 2120,
    "db_id": "advertising_agencies",
    "question": "Return the agency ids and number of staff in each.",
    "answer": "SELECT DISTINCT T2.agency_id, COUNT(T1.client_id) FROM Staff AS T1 INNER JOIN Agencies AS T2 ON T1.staff_details = T2.agency_details WHERE T1.sic_"
  },
  {
    "id": 2121,
    "db_id": "advertising_agencies",
    "question": "What is the agent id and details for the agency with most staff?",
    "answer": "SELECT DISTINCT T2.agency_id, T3.client_details FROM Staff AS T1 INNER JOIN Agencies AS T2 ON T1.staff_id = T2.staff_id GROUP BY T2.ag"
  },
  {
    "id": 2122,
    "db_id": "advertising_agencies",
    "question": "Return the id and detail for the agency with the most staff.",
    "answer": "SELECT DISTINCT T2.agency_id, T3.staff_details FROM ( SELECT DISTINCT T1.agency_id , SUM(T2.num_staff) AS total FROM Staff AS T1 INNER JOIN meetings AS"
  },
  {
    "id": 2123,
    "db_id": "advertising_agencies",
    "question": "Show meeting outcome codes and the number of meeting in each outcome.",
    "answer": "SELECT CAST(SUBSTR(T2.start_date_time, 5, INSTR(T1.meeting_outcome, '-')) AS REAL), COUNT(*) FROM Meetings AS T1 INNER JOIN Staff_in_Meetings AS"
  },
  {
    "id": 2124,
    "db_id": "advertising_agencies",
    "question": "How many meetings had each meeting outcome?",
    "answer": "SELECT SUM(IIF(T1.meeting_outcome = 'success') OR T2.meeting_outcome = 'failure', 1, 0)) / COUNT(DISTINCT T1.invoice_id) AS per FROM meeting AS T1"
  },
  {
    "id": 2125,
    "db_id": "advertising_agencies",
    "question": "List the client ids and the number of meeting for each client.",
    "answer": "SELECT DISTINCT T2.client_id, COUNT(T1.invoice_details) FROM Invoices AS T1 INNER JOIN Meetings AS T2 ON T1.invoice_id = T2.invoice_id WHERE T2.`"
  },
  {
    "id": 2126,
    "db_id": "advertising_agencies",
    "question": "How many meetings are there for each client id?",
    "answer": "SELECT SUM(DISTINCT T2.client_id), T1.start_date, T3.end_date FROM `Staff` AS T1 INNER JOIN `Meetings` AS T2 ON T1.staff_id = T2.`me"
  },
  {
    "id": 2127,
    "db_id": "advertising_agencies",
    "question": "Show the meeting type codes and the number of meeting for each client.",
    "answer": "SELECT DISTINCT T2.meeting_type, COUNT(T1.invoice_id) FROM Payments AS T1 INNER JOIN Meetings AS T2 ON T1.client_id = T2.client_id GROUP BY T2."
  },
  {
    "id": 2128,
    "db_id": "advertising_agencies",
    "question": "How many meetings are there for each meeting type?",
    "answer": "SELECT SUM(IIF(T2.meeting_type = 'AGENCY GROUP MEETING') AND T1.invoice_outcome IS NULL OR T1.invoice_outcome IS NULL, T1.client_details) AS invo"
  },
  {
    "id": 2129,
    "db_id": "advertising_agencies",
    "question": "Show all meeting ids, meeting outcomes, meeting types and the details of the client atttending it.",
    "answer": "SELECT DISTINCT T2.meeting_id, T3.meeting_outcome, T4.meeting_type, T1.client_details FROM ( SELECT `invoice_id`, SUM(CASE"
  },
  {
    "id": 2130,
    "db_id": "advertising_agencies",
    "question": "What are the meeting ids, meeting outcomes, meeting types, and client details for all meetings?",
    "answer": "SELECT DISTINCT T2.meeting_id, T3.meeting_outcome, T3.meeting_type FROM `Meetings` AS T1 INNER JOIN `Staff_in_Meet"
  },
  {
    "id": 2131,
    "db_id": "advertising_agencies",
    "question": "Show the meeting ids and the number of staff in each meeting.",
    "answer": "SELECT DISTINCT T2.meeting_id, COUNT(T1.invoice_id), T2.num_staff FROM ( SELECT T3.meeting_id ,  strftime('%J', T3.start_date_time"
  },
  {
    "id": 2132,
    "db_id": "advertising_agencies",
    "question": "Count the number of staff in each meeting by meeting id.",
    "answer": "SELECT SUM(count(T2.staff_id)) AS total FROM ( SELECT T1.invoice_id, T2.client_id , COUNT(T2.meeting_outcome) AS num FROM Staff AS T1 INNER JOIN Meetings AS"
  },
  {
    "id": 2133,
    "db_id": "advertising_agencies",
    "question": "Show the staff id and the number of meetings attended by the staff who attended some meeting but had the lowest attendance.",
    "answer": "SELECT T1.staff_id, SUM(T2.`attendance`) FROM Staff AS T1 INNER JOIN Meetings AS T2 ON T1.staff_id = T2.client_"
  },
  {
    "id": 2134,
    "db_id": "advertising_agencies",
    "question": "What is the staff id of the staff who attended the least meetings but attended some meeting?",
    "answer": "SELECT DISTINCT T2.staff_details FROM ( SELECT T1.meeting_id AS meeting_id, SUM(T3.billable_yn) - COUNT(T2.invoice_id) AS"
  },
  {
    "id": 2135,
    "db_id": "advertising_agencies",
    "question": "How many staff have attended a meeting?",
    "answer": "SELECT COUNT(T1.staff_id), T2.`client_details`.first, T2.`other_details`.second FROM ( SELECT `client_id`, SUM(`amount`) AS sum FROM Client WHERE `client_details` = 'Payments' GROUP BY client_id"
  },
  {
    "id": 2136,
    "db_id": "advertising_agencies",
    "question": "Return the number of distinct staff who have attended a meeting?",
    "answer": "SELECT COUNT(T1.staff_id) FROM Staff AS T1 INNER JOIN Meetings AS T2 ON T1.staff_id = T2.client_id WHERE T1.date_time IS NOT NULL AND T2.`type` !="
  },
  {
    "id": 2137,
    "db_id": "advertising_agencies",
    "question": "How many staff did not attend any meeting?",
    "answer": "SELECT COUNT(DISTINCT T1.staff_id), SUM(CASE WHEN T2.meeting_type = 'invoice' THEN 1 ELSE NULL END) AS number FROM ( SELECT DISTINCT T1.staff_id , 1 - SUM(CASE"
  },
  {
    "id": 2138,
    "db_id": "advertising_agencies",
    "question": "Count the number of staff who did not attend any meeting.",
    "answer": "SELECT COUNT(T1.staff_id), SUM(CASE WHEN T2.`meeting_outcome` IS NULL THEN 0 ELSE 1 END) AS total FROM Staff AS T1 INNER JOIN Meetings AS T2 ON T1.staff_id"
  },
  {
    "id": 2139,
    "db_id": "advertising_agencies",
    "question": "What are the ids and details of the clients who have attended any meeting or have any invoice?",
    "answer": "SELECT DISTINCT T2.client_details FROM Meetings AS T1 INNER JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T1.`type` = '"
  },
  {
    "id": 2140,
    "db_id": "advertising_agencies",
    "question": "Return the ids and details of clients who have attended a meeting or had an invoice.",
    "answer": "SELECT DISTINCT T2.client_details FROM ( SELECT CAST(T2.meeting_outcome AS REAL ) AS str, T1.staff_id FROM meetings AS T1 INNER JOIN staff AS T2 ON"
  },
  {
    "id": 2141,
    "db_id": "advertising_agencies",
    "question": "What are the ids and details of the staff who have attended at least 1 meetings and have the detail with letter 's'?",
    "answer": "SELECT DISTINCT T2.staff_id, T2.client_details FROM invoices AS T1 INNER JOIN meetings AS T2 ON T1.invoice_id"
  },
  {
    "id": 2142,
    "db_id": "advertising_agencies",
    "question": "Return the ids and details of staff who have attended at least 1 meeting and have an s in their staff details?",
    "answer": "SELECT DISTINCT T2.staff_id, T2.other_details FROM Invoices AS T1 INNER JOIN Staff_in_Meetings AS T2 ON T1.invoice_"
  },
  {
    "id": 2143,
    "db_id": "advertising_agencies",
    "question": "What are the id, sic code and agency id of the client who has attended 1 meeting and has any invoice.",
    "answer": "SELECT DISTINCT T2.client_details.client_id FROM meetings AS T1 INNER JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE"
  },
  {
    "id": 2144,
    "db_id": "advertising_agencies",
    "question": "Return the ids, sic codes, and agency ids of clients who have attended 1 meeting and had an invoice.",
    "answer": "SELECT DISTINCT T2.client_details.sic_code AS id_, T3.agency_id FROM `Staff` AS T1 INNER JOIN `Meetings` AS T2 ON"
  },
  {
    "id": 2145,
    "db_id": "advertising_agencies",
    "question": "List the start time, end time of each meeting, and the corresponding client detail and staff detail.",
    "answer": "SELECT DISTINCT T2.start_date_time, T2.end_date_time, T3.client_details FROM `Meetings` AS T1 INNER JOIN `Staff_in_Meetings`"
  },
  {
    "id": 2146,
    "db_id": "advertising_agencies",
    "question": "What are the start and end times of each meeting, as well as the corresponding client and staff details the attendees?",
    "answer": "SELECT DISTINCT T2.start_date_time, T1.client_details FROM meetings AS T1 INNER JOIN ( SELECT DISTINCT T3.staff_id , SUM("
  }
]