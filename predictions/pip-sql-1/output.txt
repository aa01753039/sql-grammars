SELECT COUNT(T1.Club_ID), T2.Name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.club_id GROUP BY T1.Club_ID ORDER BY SUM(CASE WHEN T2.Country = 'USA' THEN 1 ELSE 0 END) DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T2.Club_ID), SUM(T2.Event_number) FROM 'player' AS T1 INNER JOIN club AS T2 ON T1.Player_ID = T2.Club_ID GROUP BY T1.Country ORDER BY COUNT(DISTINCT T2.Club_ID) DESC LIMIT 1</sql>
SELECT DISTINCT T2.Name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID ORDER BY T1.Name ASC</sql>
SELECT DISTINCT T2.Name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID ORDER BY T1.Name</sql>
SELECT DISTINCT T2.Name, T3.Name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID INNER JOIN manager AS T3 ON T2.Player_ID = T3.Player_ID WHERE T1.Manager = 'Danny Woodbury' AND T1.Captain = 'Alessandro Rocci'</sql>
SELECT DISTINCT T2.Name, T3.name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.club_id WHERE T2.manufacturer = 'BMW' ORDER BY T2.`Country`, T1.captain</sql>
SELECT DISTINCT T2.Name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Manufacturer != 'Nike' AND T1.Country IS NULL LIMIT 1</sql>
SELECT T1.name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.club_id WHERE T2.manufacturer = 'Nike' LIMIT 1</sql>
SELECT DISTINCT T2.Name FROM player AS T1 INNER JOIN club AS T2 ON T1.Player_ID = T2.Club_ID ORDER BY T1.Wins_count DESC LIMIT 1</sql>
SELECT DISTINCT T2.Name FROM player AS T1 INNER JOIN club AS T2 ON T1.Player_ID = T2.Club_ID ORDER BY T1.Wins_count DESC LIMIT 1</sql>
SELECT T1.name FROM player AS T1 INNER JOIN club AS T2 ON T1.Player_ID = T2.club_id ORDER BY T1.Wins_count DESC LIMIT 1</sql>
SELECT T1.Name FROM player AS T1 INNER JOIN club AS T2 ON T1.Player_ID = T2.Club_ID ORDER BY T1.Wins_count DESC LIMIT 1</sql>
SELECT T1.country FROM player AS T1 INNER JOIN club AS T2 ON T1.Player_ID = T2.Club_ID ORDER BY T1.Wins > 1200000 DESC LIMIT 1</sql>
SELECT T1.Country FROM player AS T1 INNER JOIN club AS T2 ON T1.Player_ID = T2.Club_ID WHERE T1.Wins_count > 12 AND T2.Sponsor = 'Total Golf Club' GROUP BY T1.Country ORDER BY COUNT(T2.club) DESC LIMIT 1</sql>
SELECT DISTINCT T1.Country FROM ( SELECT DISTINCT T2.country, MAX(CASE WHEN T3.`Wins_count` > 2 THEN T3.`Earnings ELSE NULL END) AS `Earnings`, T3.club.`Club_ID` FROM player AS T1 INNER JOIN club AS T2 ON T1.Club_ID = T2.club_id WHERE T1.Name LIKE 'player%' GROUP BY T2
SELECT DISTINCT T1.Country FROM ( SELECT DISTINCT T2.country , SUM(CASE WHEN T2.Country = 'USA' THEN 1 ELSE 0 END) AS sumWins AS winCount FROM players AS T1 INNER JOIN club AS T2 ON T1.Player_ID = T2.Club_ID GROUP BY T2.country ORDER BY T1.player.name LIKE 'Mike%' GROUP BY T2.country ORDER BY SUM
SELECT DISTINCT T1.Name, T2.name FROM player AS T1 INNER JOIN club AS T2 ON T1.Player_ID = T2.Club_ID WHERE T2.State IN ('N', 'P')</sql>
SELECT DISTINCT T2.Name, T3.Club_ID FROM `player` AS T1 INNER JOIN club AS T2 ON T1.Player_ID = T2.Club_ID WHERE T1.Country = 'United States' LIMIT 1</sql>
SELECT DISTINCT T1.Name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Wins_count BETWEEN 0 AND 3</sql>
SELECT DISTINCT T2.name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Wins_count BETWEEN 2 AND 10 ORDER BY COUNT(T2.Name) DESC LIMIT 3</sql>
SELECT DISTINCT T2.Name FROM 'club' AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Name = 'sam allardyce' AND T2.Country = 'England'"</sql>
SELECT DISTINCT T2.Name FROM "club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Manager = 'sam allardyce' AND T2.Country = 'United Kingdom'"</sql>
SELECT DISTINCT T2.Name FROM player AS T1 INNER JOIN club AS T2 ON T1.Player_ID = T2.Club_ID ORDER BY T1.`Wins` DESC</sql>
SELECT DISTINCT T1.Name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID ORDER BY T1.Wins_count DESC LIMIT 1</sql>
SELECT DISTINCT T2.Manufacturer, COUNT(T1.Club_ID) FROM 'player' AS T1 INNER JOIN club AS T2 ON T1.Player_ID = T2.Club_ID GROUP BY T1.Manufacturer ORDER BY T2.Name</sql>
SELECT DISTINCT T2.Name, COUNT(T1.Manufacturer), T1.Company FROM "player AS T1 INNER JOIN club AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T2.name ORDER BY T2.Company</sql>
SELECT DISTINCT T2.Manufacturer FROM "player AS T1 INNER JOIN club AS T2 ON T1.Player_ID = T2.Club_ID ORDER BY COUNT(T2.`CLUB_ID`) DESC LIMIT 3</sql>
SELECT T1.name FROM club AS T1 INNER JOIN manufacturer AS T2 ON T1.Club_ID = T2.Club_ID ORDER BY COUNT(T1.manufacturer) DESC LIMIT 1</sql>
SELECT DISTINCT T2.Manufacturer FROM 'player' AS T1 INNER JOIN `club` AS T2 ON T1.Player_ID = T2.Club_ID GROUP BY T1.Name ORDER BY COUNT(T1.name) DESC LIMIT 1</sql>
SELECT DISTINCT T2.Manufacturer FROM 'player' AS T1 INNER JOIN `club` AS T2 ON T1.Player_ID = T2.Club_ID WHERE T1.`Country` > ( SELECT COUNT(T3.manufacturer) FROM 'club' AS T2 INNER JOIN player AS T1 ON T1.Club_ID = T2.Club_ID WHERE T2.name LIKE '%Manufacturer%' ORDER BY
SELECT DISTINCT T2.Country FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.Country ORDER BY COUNT(T2.Player_ID) > 1 DESC LIMIT 1</sql>
SELECT T1.Country FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.Country ORDER BY COUNT(T1.Country) DESC LIMIT 1</sql>
SELECT T1.name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Name IS NULL LIMIT 1</sql>
SELECT T1.Name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Country IS NULL AND T1.Nickname != '' LIMIT 1</sql>
SELECT DISTINCT T2.Country FROM player AS T1 INNER JOIN club AS T2 ON T1.Player_ID = T2.Club_ID WHERE T1.Wins_count > ( SELECT MAX(wins) FROM player AS T3 GROUP BY T3.Country ) AND T2.Earnings - SUM(T1.Wins_number) / 100 < 500</sql>
SELECT DISTINCT T2.Country FROM "player" AS T1 INNER JOIN "club" AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.name = 'Championship' AND T2.earnings BETWEEN 1400000 AND 1100000</sql>
SELECT COUNT(DISTINCT T2.Country), DISTINCT T1.name FROM ( SELECT T1."Country", SUM(T2.country) AS num FROM player AS T1 INNER JOIN club AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T2.Country ORDER BY COUNT(DISTINCT T1.Name) DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T2.Country), T1.Name FROM player AS T1 INNER JOIN club AS T2 ON T1.Player_ID = T2.Club_ID GROUP BY T2.Country ORDER BY COUNT(T1.Country) DESC LIMIT 1</sql>
SELECT DISTINCT T1.Earnings FROM player AS T1 INNER JOIN club AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Name = 'country' AND T2.Country = "Australia" OR T2.Country = "Zimbabwe"</sql>
SELECT DISTINCT T1.Earnings, T2.Country FROM player AS T1 INNER JOIN club AS T2 ON T1.Club_ID = T2.club WHERE T1.name LIKE '%Australia%' OR T1.name LIKE 'Zimbabwe%'</sql>
SELECT DISTINCT T1.customer_first_name, T1.customer_middle_initial FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_last_name ORDER BY COUNT(T1.order_id) / COUNT(DISTINCT T2.order_id) > 3</sql>
SELECT T1.first_name, T2.last_name FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.order_items.total > 0 GROUP BY T1.first_name, T2.last_name HAVING COUNT(T2.order_item_id) >= 3 ORDER BY T1.first
SELECT T1.order_item_id, COUNT(T2.product_id) , SUM(T2.status) FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id WHERE T1.order_item_status_code IN ('P', 'D') GROUP BY T2.order_items.order_item_id ORDER BY SUM(T2.
SELECT COUNT(T1.product_id) , T2.`order_item_status_code`, T3.order_id FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_item_id WHERE T1.customer_first_name = 'C' AND T1.customer_middle_initial = 'U' ORDER BY T1.order_item_status_code</
SELECT DISTINCT T2.date_order_placed FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_item_id GROUP BY T1.order_item_id ORDER BY SUBSTR(T1.date_order_placed, 7, 3) DESC LIMIT 1</sql>
SELECT strftime('%J', T2.date) AS date, strftime('%j', T2.date) - strftime('%Y', T2.order_item_status_code) FROM Orders AS T1 INNER JOIN `Order_Items` AS T2 ON T1.order_id = T2.order_item_id WHERE strftime('%J', T2.date) > '2016
SELECT T2.first_name, T2.middle_initial, T2.last_name FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.invoice_date IS NULL AND T2.order_id IS NULL ORDER BY T1.first_name, T1.middle_initial, T2.last_name</sql>
SELECT DISTINCT T1.first_name , T2.last_name, T1.middle_initial, T1.login_name FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_item_status_code IN ( SELECT DISTINCT 'A' FROM Orders ORDER BY order_item_id NOT IN (SELECT DISTINCT T
SELECT T1.product_name, T2.`color`, T3.`price__c` FROM Order_Items AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.order_item_status_code IS NULL AND strftime('%J', T2.date_order_placed) > 5</sql>
SELECT T1.product_name, T2.`product_color`, T3.price, T2.address_line_1 FROM Orders AS T1 INNER JOIN Products AS T2 ON T1.order_id = T2.order_id AND strftime('%J', T2.`date_order_placed`) - strftime('%J', T2.price) > 2 ORDER BY strftime('
SELECT T2.order_item_id, T1.order_date FROM Order_Items AS T1 INNER JOIN Orders AS T2 ON T1.order_id = T2.order_id WHERE T1.product_id IN ( SELECT DISTINCT T3.product_id ORDER BY T2.order_item_status_code , 'placed' LIMIT 1 ) GROUP BY T1.order_date ORDER BY COUNT(T2.order
SELECT T1.order_item_id, SUM(T2.order_date) AS total_dates FROM Order_Items AS T1 INNER JOIN Orders AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_item_id HAVING COUNT(T1.product_id) > 2 AND SUM(T1.order_date) - sum(T1.order_date) < 3</
SELECT DISTINCT T2.product_name AS item_title , T1.`order_item_status_code`, T1.product_price FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id ORDER BY COUNT(T1.order_items.order_item_id) DESC LIMIT 3</sql>
SELECT T1.product_name , T2.`product_price`, T3.product_name FROM Orders AS T1 INNER JOIN Products AS T2 ON T1.order_id = T2.product_id ORDER BY T1.order_id DESC LIMIT 1</sql>
SELECT DISTINCT T2.order_item_id, SUM(T1.`product_price`) FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY ORDER_ITEM_ID ORDER BY COUNT(DISTINCT T2.order_item_id) LIMIT 0</sql>
SELECT T2.order_item_status_code, SUM(T1.customer_cost) FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_item_id ORDER BY COUNT(T1.order_item_status_code) LIMIT 3</sql>
SELECT DISTINCT T2.payment_method_code FROM Invoices AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.`order_status_code` IN ('D', 'B') GROUP BY T2.payment_method_code ORDER BY COUNT(T2.customer_id) DESC LIMIT 1</sql>
SELECT DISTINCT T2.payment_method_code FROM Customer_Payment_Methods AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_first_name, T2.customer_middle_initial ORDER BY SUM(T1.invoice_number) / COUNT(*) DESC LIMIT 1</sql>
SELECT DISTINCT T1.gender, COUNT(T2.`product_id`) FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.order_item_id WHERE T1.login_name = 'bob' GROUP BY T1.gender ORDER BY COUNT(`Product_Name`) DESC LIMIT 1</sql>
SELECT COUNT(T2.product_id) FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE gender_code IN ('F', 'M') GROUP BY T1.`order_id`, T2.gender ORDER BY SUM(`T1.invoice_number`) / COUNT(DISTINCT T2.`customer_first_name` , `customer_middle_initial` , `customer_
SELECT T1.customer_first_name, T2.gender_code FROM ( SELECT T3.customer_first_name, T3.customer_middle_initial AS male, T3.`gender` FROM Customers AS T1 INNER JOIN orders AS T2 ON T1.customer_id = T2.order_id INNER JOIN Customers AS T3 ON T3.customer_id = T1.customer_id ORDER BY gender_code LIMIT 1 )
SELECT T1.gender_code, COUNT(T2.invoice_number), SUM(T1.customer_first_name) AS total , SUM(T1.customer_middle_initial) , SUM(T1.customer_last_name) , SUM(T2.order_id), T1.login_name FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY
SELECT DISTINCT T2.first_name , T2.middle_initial AS login_name , T1.last_name FROM Customers AS T1 INNER JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id WHERE T2.phone_number = '5487693084'</sql>
SELECT DISTINCT T1.first_name, T2.middle_initial , T1.last_name FROM Customers AS T1 INNER JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.first_name, T2.middle_initial DESC LIMIT 1</sql>
SELECT DISTINCT T1.invoice_status_code , T2.date_order_placed FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_first_name = 'Jane' ORDER BY T2.shipment_date</sql>
SELECT T2.order_item_status_code, T3.order_item_date FROM Order_Items AS T1 INNER JOIN Orders AS T2 ON T1.order_id = T2.order_id INNER JOIN Customers AS T3 ON T1.customer_id = T3.customer_id GROUP BY T2.order_item_status_code ORDER BY T3.email_address</sql>
SELECT DISTINCT T1.product_name FROM Orders AS T1 INNER JOIN Products AS T2 ON T1.order_item_id = T2.product_id WHERE T2.parent_product_id IS NULL ORDER BY t2.shipping_date DESC LIMIT 1</sql>
SELECT DISTINCT T1.product_name FROM Orders AS T1 INNER JOIN Products AS T2 ON T1.order_id = T2.order_id WHERE ORDER_DATE IS NOT NULL AND T2.parent_product_id IN ( SELECT DISTINCT T2.product_id FROM Customers AS T2 INNER JOIN Products AS T3 ON T1.customer_id = T3.customer_id WHERE ORDER_DATE
SELECT DISTINCT T2.order_item_status_code, T1.`shipment_tracking_number` FROM Order_Items AS T1 INNER JOIN Orders AS T2 ON T1.order_id = T2.order_id WHERE ORDER_ITEM_STATUS_CODE IN ( SELECT DISTINCT t1.order_item_status_code FROM Customers AS T1 INNER JOIN orders AS T2 ON T1.customer_id
SELECT T1.order_item_status_code FROM Order_Items AS T1 INNER JOIN Orders AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number IS NULL LIMIT 1 AND T1.order_item_status_code = 'INVENTORY'</sql>
SELECT DISTINCT T1.product_name, T2.`color`, T2.FOREIGN KEY (`customer_id`) FROM Orders AS T1 INNER JOIN Products AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_item_status_code ORDER BY CASE WHEN T2.product_color IS NULL THEN t2.product_name END , T2.`color`</sql>
SELECT DISTINCT T1.product_name, T2.`color` FROM `Order_Items` AS T1 INNER JOIN Customers AS T2 ON T1.order_id = T2.customer_id WHERE T1.order_status_code != 'D' ORDER BY T1.invoice_date DESC LIMIT 1</sql>
SELECT T1.product_name , T2.`description`, T3.price FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.order_item_id INNER JOIN Products AS T3 ON T1.customer_id = T3.product_id WHERE strftime('%J', T2.`date_order_placed`) - strftime('%J', T2.order_status
SELECT T1.product_name, T2.`price`, T3.`description__incl_unit_price__2008` FROM `Order_Items` AS T1 INNER JOIN Products AS T2 ON T1.order_item_id = T2.product_id WHERE gender = 'F'</sql>
SELECT T2.invoice_status FROM Orders AS T1 INNER JOIN Invoices AS T2 ON T1.order_id = T2.order_id WHERE T2.customer_id IS NULL AND T1.order_status <> 'In process' GROUP BY T2.order_items ORDER BY COUNT(T1.invoice_number) DESC LIMIT 1</sql>
SELECT T1.invoice_status FROM Orders AS T1 INNER JOIN Invoices AS T2 ON T1.order_id = T2.order_id WHERE T2.customer_id IS NULL AND T1.order_item_status_code != 'Shipped'</sql>
SELECT T1.total_cost, T2.`order_date`, SUM(T3.`total_price`) FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_item_id WHERE T1.customer_id = 'FH89J'</sql>
SELECT T2.order_item_id, SUM(T3.order_status_code) FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_item_id = T2.order_item_id WHERE T2.order_id IN ( SELECT T4.order_id ORDER BY T2.order_items.order_date AS strftime('%J', T3.`order_date`) FROM Orders AS
SELECT COUNT(customer_id) FROM Orders WHERE order_items.order_item_id IN ( SELECT T1.order_item_id FROM Order_Items AS T1 INNER JOIN Customers AS T2 ON T1.order_item_id = T2.customer_id ORDER BY T2.first_name ,T2.last_name , T2.email_address LIMIT 1 )</sql>
SELECT COUNT(T1.customer_id) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.invoice_number IS NOT NULL AND T2.invoice_date BETWEEN '2022-06-18' AND '2022-06-30'</sql>
SELECT COUNT(T1.order_item_id) FROM Order_Items AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.`order_item_status_code` LIKE 'state-%' AND T1.order_id = ( SELECT MAX(ORDER_ID) FROM Orders ORDER BY order_items_status_code ) GROUP BY T1.order_item_id</sql>
SELECT COUNT(DISTINCT T2.order_item_status_code) AS num FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id WHERE T1.customer_first_name = 'Jeff' AND T1.order_item_title LIKE '%Order Item%' GROUP BY T2.order_item_status_code ORDER BY COUNT(DISTINCT T2.order_item
SELECT COUNT(T1.payment_method_code) FROM Customer_Payment_Methods AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.payment_method_code ORDER BY count(T1.payment_method_code) DESC LIMIT 5</sql>
SELECT COUNT(T1.payment_method_code) FROM Customers AS T1 INNER JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_first_name, T1.customer_middle_initial, T2.payment_method_code ORDER BY COUNT(T1.payment_method_code) DESC LIMIT 5</sql>
SELECT DISTINCT T3.login_name, T3.password FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id WHERE strftime('%Y', T2.`order_item_date`) LIKE '%+' AND strftime('%J', T2.phone_number) LIKE '+1%'</sql>
SELECT DISTINCT T3.login_name FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id WHERE strftime('%H:%M', T2.order_date) LIKE '+%'</sql>
SELECT DISTINCT T1.product_name, T2.`product_size`.substring(T2.product_name, 3) FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_item_status_code != 'cancelled' AND T1.customer_first_name = 'Dell'</sql>
SELECT DISTINCT T1.product_name, T2.`product_size` FROM Order_Items AS T1 INNER JOIN Products AS T2 ON T1.order_item_id = T2.product_id WHERE T2.Product_Name IN ('Dell', 'PowerEdge') AND T2.product_description LIKE '%Dell%' ORDER BY T2.product_size</sql>
SELECT DISTINCT T1.product_price , T2.product_size, T1.`order_item_status_code` FROM Orders AS T1 INNER JOIN Products AS T2 ON T1.order_id = T2.product_id WHERE T1.order_item_status_code > 'Price over average'</sql>
SELECT DISTINCT T1.price, T2.size FROM Orders AS T1 INNER JOIN Products AS T2 ON T1.order_id = T2.product_id WHERE strftime('%J', T1.date_order_placed) > ( SELECT MIN(T1.price) - T2.mean_price AS avg FROM Orders AS T1 INNER JOIN Products AS T2 ON T1.order_id =
SELECT COUNT(DISTINCT T1.product_name) FROM Orders AS T1 INNER JOIN Products AS T2 ON T1.order_id = T2.order_id WHERE T2.`type` != 'none' AND T2.price <= 0</sql>
SELECT COUNT(T1.product_id) FROM Orders AS T1 INNER JOIN Products AS T2 ON T1.order_id = T2.order_id WHERE T1.status = 'Not Ordered' AND T2.name IS NULL OR T2.name IS NULL</sql>
SELECT COUNT(T1.customer_id) FROM Customers AS T1 INNER JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id WHERE T1.payment_method_code IS NULL</sql>
SELECT COUNT(T1.customer_id) FROM Customers AS T1 INNER JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id WHERE T1.payment_method_code IS NULL</sql>
SELECT T2.order_item_status_code, T3.date_order_placed FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id INNER JOIN Products AS T3 ON T2.product_id = T3.product_id WHERE T1.customer_first_name = 'Nicholas' AND T2.order_item_status_code = 'Pending
SELECT T2.order_item_status_code, T3.order_item_date FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id WHERE T1.customer_id IS NULL AND T1.order_items_placed IS NULL GROUP BY T2.product_code ORDER BY T1.order_item_status_code DESC LIMIT 0, 3</sql>
SELECT DISTINCT T1.address_line_1, T2.towncity, T3.county FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.order_id WHERE strftime( '%Y', T2.`date_order_placed`) IN ('2016-7')</sql>
SELECT DISTINCT T2.address_line1, T2.town_city, T2.county FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id WHERE strftime(strftime('%J', `date_order_placed`) - strftime('%Y', `date_order_placed`), '%U') IN ( SELECT T3.address_line
SELECT T2.first_name, T1.product_name FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.order_item_id ORDER BY T1.invoice_date</sql>
SELECT DISTINCT T1.first_name, T2.last_name FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.order_item_id ORDER BY T1.gender_code DESC LIMIT 1</sql>
SELECT COUNT(T1.order_item_id) FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id WHERE T1.`order_status_code` = 'placed'</sql>
SELECT COUNT(T1.product_id) FROM Orders AS T1 INNER JOIN Products AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed = '2018-12-31'</sql>
SELECT CAST(SUM(T2.product_price) / COUNT(T2.customer_id) AS REAL) * 100 / COUNT(T2.order_item_id), T3.customer_first_name FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.order_id = T2.order_id WHERE T2.gender_code = 'F' GROUP BY T1.customer_id ORDER BY
SELECT SUM(SUM(T2.price)) / COUNT(DISTINCT T2.customer_id) AS average FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id ORDER BY T3.order_item_status_code, T3.invoice_date</sql>
SELECT CAST(SUM(T2.price) AS REAL) / COUNT(T1.order_item_id) FROM Orders AS T1 INNER JOIN Products AS T2 ON T1.order_item_id = T2.product_id WHERE T1.customer_id = 4</sql>
SELECT AVG(T2.price) FROM ( SELECT T1.`product_id`, COUNT(DISTINCT T2.`customer_id`) AS num FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_item_id = T2.order_item_id GROUP BY T1.`order_item_id` , T2.customer_first_name, T2.customer_last_name ORDER BY COUNT(T2
SELECT DISTINCT T2.town , T3.city, T2.email FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.gender_code LIKE '%M%' ORDER BY COUNT(T2.login_name) DESC LIMIT 1</sql>
SELECT DISTINCT T2.email_address, T1.city, T2.country FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.`customer_id` WHERE T1.order_status != 'pending' GROUP BY T1.email_address, T2.city ORDER BY COUNT(T2.first_name) ASC LIMIT 2</sql>
SELECT strftime('%J', T1.date_order_placed), strftime('%Y', T1.date_order_placed) - strftime('%B', '+' INVERSE) AS days FROM Invoices INNER JOIN Orders ON T2.invoice_number = T1.invoice_number WHERE customer_first_name LIKE '%D%' AND ( SELECT COUNT(T1.payment_method_code) FROM
SELECT DISTINCT T1.date_order_placed FROM Orders AS T1 INNER JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id WHERE T2.payment_method_code IN ( 'VISA', 'MasterCard', 'Amex') GROUP BY t2.payment_method_name ORDER BY COUNT(t1.order_id) DESC LIMIT 3</sql>
SELECT COUNT(T1.order_item_status_code) FROM Order_Items AS T1 INNER JOIN orders AS T2 ON T1.order_item_id = T2.order_item_id GROUP BY T1.order_status ORDER BY T2.order_status_code LIMIT 1</sql>
SELECT T1.order_item_status_code FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_item_id WHERE T1.order_items.order_item_status_code IS NULL GROUP BY T2.product_id ORDER BY COUNT(T2.order_item_status_code) LIMIT 1</sql>
SELECT product_id , product_name FROM Products WHERE product_price > ( SELECT MAX(product_price) FROM Products ) GROUP BY product_id ORDER BY COUNT(DISTINCT T1.order_item_id) DESC LIMIT 2</sql>
SELECT product_id , product_name FROM Products WHERE COUNT(DISTINCT product_id) > 3 ORDER BY product_name DESC LIMIT 1</sql>
SELECT DISTINCT T1.invoice_date, T3.invoice_number FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id INNER JOIN Invoices AS T3 ON T2.order_id = T3.order_id WHERE IN ( SELECT DISTINCT T3.invoice_date, T1.invoice_number FROM Order_Items AS T1 INNER JOIN Custom
SELECT DISTINCT T1.invoice_number, T2.invoice_date, T3.customer_id FROM `Invoices` AS T1 INNER JOIN Orders AS T2 ON T1.order_id = T2.`order_id` GROUP BY T1.invoice_number HAVING COUNT(T2.customer_first_name) >= 2 AND count(T1.invoice_date) > 0
SELECT DISTINCT T1.shipment_number, T2.shipment_date FROM Orders AS T1 INNER JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.customer_id = 35</sql>
SELECT DISTINCT T1.order_item_status_code, T2.`order_date`, T1.order_number FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_item_id WHERE T1.customer_id = 'custID' ORDER BY T2.shipment_status_code</sql>
SELECT product_name , product_color, product_size FROM Customers WHERE product_price > ( SELECT MAX(product_price) FROM Products )</sql>
SELECT product_name, product_description FROM Product WHERE product_price IS NULL LIMIT 1</sql>
SELECT DISTINCT T2.Name FROM director AS T1 INNER JOIN program AS T2 ON T1.Director_ID = T2.Program_ID WHERE T1.Age BETWEEN (T1.FIRST_DIRECTOR - ( SELECT AVG(T3.Date) AS age FROM director_admin AS T3 INNER JOIN actor AS T4 ON T3.director_ID = T4.Director_ID WHERE T2.
SELECT DISTINCT T2.name FROM "director AS T1 INNER JOIN directors AS T2 ON T1.Director_ID = T2.Director_ID WHERE T1.Age < 30 ORDER BY T2.Name DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T2.Channel_ID) FROM "program AS t1 INNER JOIN "director AS t2 ON t1.Director_ID = t2.Director_ID WHERE t1.Title LIKE '%bbc%' AND t2.Name = 'Internet'</sql>
SELECT COUNT(DISTINCT T2.Name), DISTINCT T1.PRIMARY KEY (Channel_ID)) FROM 'director' AS T1 INNER JOIN 'channel' AS T2 ON T1.Channel_ID = T2.Channel_ID GROUP BY T1.Name ORDER BY SUM(CASE WHEN T1.DISTINCT T2.name IS NULL THEN 0 ELSE 1 END) DESC LIMIT 1</sql>
SELECT T1."Title", T2."Start_Year" AS start_year ORDER BY T2.start_year DESC LIMIT 1</sql>
SELECT DISTINCT T2.Name FROM "director_admin" AS T1 INNER JOIN program AS T2 ON T1.Director_ID = T2.Director_ID ORDER BY COUNT(T2.Program_ID) DESC LIMIT 1</sql>
SELECT DISTINCT T2.Name, T3.Age FROM program AS T1 INNER JOIN director AS T2 ON T1.Director_ID = T2.Director_ID GROUP BY T3.Channel_ID ORDER BY COUNT(DISTINCT T1.Program_ID) DESC LIMIT 1</sql>
SELECT T1.title FROM program AS T1 INNER JOIN director_admin AS T2 ON T1.Program_ID = T2.Director_ID ORDER BY T2.T3.End_Year DESC LIMIT 1</sql>
SELECT DISTINCT T2.name, T3.website FROM channel AS T1 INNER JOIN director_admin AS T2 ON T1.Channel_ID = T2.Channel_ID WHERE T1.is_first_director = 'false' GROUP BY T2.channel ORDER BY COUNT(DISTINCT T2.name) DESC LIMIT 1</sql>
SELECT DISTINCT T2.name, T3.name FROM 'programs' AS T1 INNER JOIN channels AS T2 ON T1.Channel_ID = T2.channel_id WHERE T3.Name IN ('digital terrestrial television', 'TERRAINAL TELEVISION') ORDER BY T1.Show DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T2.Channel_ID) FROM director AS T1 INNER JOIN program AS T2 ON T1.Director_ID = T2.Director_ID WHERE T2.`Programs` IS NULL AND T1.`Name` <> 'director'</sql>
SELECT DISTINCT T2.Name FROM "program AS T1 INNER JOIN director_admin AS T2 ON T1.Program_ID = T2.Director_ID WHERE T1.TITLE = 'Dracula' AND T1.isFirstdirector = 1</sql>
SELECT DISTINCT T2.name, T3.Internet FROM director AS T1 INNER JOIN program AS T2 ON T1.Director_ID = T2.Director_ID INNER JOIN channel AS T3 ON T1.Channel_ID = T3.Channel_ID ORDER BY COUNT(DISTINCT T1.Name) DESC LIMIT 1</sql>
SELECT DISTINCT T2.name FROM director AS T1 INNER JOIN program AS T2 ON T1.Director_ID = T2.Director_ID WHERE T1.`Age` BETWEEN 30 AND 60 AND T1.`Name` LIKE '%@%'</sql>
SELECT DISTINCT T2.name FROM 'programs' AS T1 INNER JOIN "channel" AS T2 ON T1.Channel_ID = T2.Channel_ID WHERE T1.Director IS NOT NULL AND T1.Name < '' GROUP BY T2.name ORDER BY COUNT(DISTINCT T2) / 2 DESC LIMIT 2</sql>
SELECT T1.name, T2.name FROM director AS T1 INNER JOIN channel AS T2 ON T1.Channel_ID = T2.Channel_ID WHERE T1.Name != 'Hank Baskett' AND T2.Is_first_director = 'true'</sql>
SELECT COUNT(*) FROM `radio` WHERE `station_name` = '2FM Talkback'</sql>
SELECT DISTINCT T2.transmitter, T1.ERP_kW FROM radio AS T1 INNER JOIN city_channel AS T2 ON T1.Station_name = T2.STATION_NAME WHERE T
SELECT DISTINCT T2.tv_show_name, T1.original_airdate FROM "city_channel_tv_show AS T1 INNER JOIN tv_show AS T2 ON T1.City_channel_ID = T2.
SELECT DISTINCT T2.station_name FROM city_channel AS T1 INNER JOIN station_affiliated AS T2 ON T1.city_channel_ID = T2.City AND T1.Affiliation != '
SELECT DISTINCT T2.transmitter, T2.`ERP_kW` FROM city_channel AS T1 INNER JOIN radio AS T2 ON T1.City = T2.
SELECT DISTINCT T2.transmitter FROM city_channel AS T1 INNER JOIN station_name AS T2 ON T1.City = T2.city WHERE T2.station_name LIKE "%Lyric FM
SELECT AVG(T2.ERP) / COUNT(T1.radio), T1.City, SUM(T2.ERP) FROM radio AS T1 INNER JOIN city_channel_tv_show AS T2 ON T1.Station_
SELECT T1.Affiliation, COUNT(T2.Affiliation) AS num FROM city_channel AS T1 INNER JOIN station_info AS T2 ON T1.City = T2.city WHERE T2
SELECT DISTINCT T2.Affiliation FROM city_channel AS T1 INNER JOIN station_info AS T2 ON T1.Station_name = T2.Station_name WHERE T2.is_online = 'true' GROUP BY T2.
SELECT T1.Affiliation, COUNT(T2.City) FROM radio AS T1 INNER JOIN city_channel AS T2 ON T1.Station_name = T2.Station_name GROUP BY T1.Station_name HAVING COUNT
SELECT DISTINCT T1.city, T2.station FROM radio AS T1 INNER JOIN city_channel AS T2 ON T1.City_channel_ID = T2.City_channel_ID ORDER BY T
SELECT DISTINCT T1.transmitter, T2.city FROM radio AS T1 INNER JOIN city_channel AS T2 ON T1.Station_name = T2.City WHERE T2.affiliation IS
SELECT DISTINCT T2.transmitter, T1.station_name ORDER BY ERP(T1.radio) DESC LIMIT 1</sql>
SELECT DISTINCT T2.transmitter, COUNT(T1.city) FROM `radio` AS T1 INNER JOIN `city_channel_tv_show` AS T2 ON T1.radio_ID =
SELECT T1.station_name FROM station AS T1 INNER JOIN radio AS T2 ON T1.Station_name = T2.Station_name WHERE T2.Affiliation != 'Radio' ORDER BY T1.ID
SELECT DISTINCT T1.model FROM 'vehicle' AS T1 INNER JOIN 'driver' AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID GROUP BY T1.model ORDER BY MAX(T1."Power") DESC LIMIT 1</sql>
SELECT DISTINCT T1.model FROM "vehicle AS T1 INNER JOIN driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T2."Total_Production" > 6000 LIMIT 1</sql>
SELECT T1.name FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Vehicle_ID WHERE T2.Citizenship IS NULL AND T2.country = 'usa'</sql>
SELECT DISTINCT T2.Name FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Vehicle_ID WHERE T1.citizenship = 'us'</sql>
SELECT COUNT(T1.Driver_ID), T2.T3 FROM "driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID GROUP BY T1.Model ORDER BY count(T1.Vehicle_ID) DESC LIMIT 4</sql>
SELECT DISTINCT T2.Driver_ID , SUM(CASE WHEN T1.`Total_Production` = 1 THEN 1 ELSE NULL END) AS total FROM ( SELECT CAST(`Vehicle_ID`) AS INT , COUNT(DISTINCT `Vehicle_ID`) AS num, MAX(T2.`Model`, T1.Citizenship)` as T2 GROUP BY `Total_Production` ORDER BY SUM(CASE WHEN T1
SELECT MAX(T2.Power), AVG(T1.Power) FROM Vehicles AS T1 INNER JOIN driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T2.Citizenship = 'ZHUZHOU' AND T1.Builder = 'ZHUZHOU'</sql>
SELECT MAX(T1.Power), AVG(T2.`Total_Production`) FROM "driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Vehicle_ID WHERE T2.`Builder` LIKE '%Zhuzhou%' GROUP BY T1.Build_Year ORDER BY T1.Power DESC LIMIT 1</sql>
SELECT DISTINCT T2.Vehicle_ID FROM `driver` AS T1 INNER JOIN `vehicle_driver` AS T2 ON T1.Driver_ID = T2.Vehicle_ID WHERE T1.Name IS NOT NULL AND T2.Vehicle_ID < ( SELECT MAX(T1.Vehicle_ID) FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T
SELECT DISTINCT T1.Vehicle_ID FROM 'vehicle_driver' AS T1 INNER JOIN 'vehicle' AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID ORDER BY T1.`Total_Production` - 1 DESC LIMIT 1</sql>
SELECT SUM(top_speed), SUM(power) FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Vehicle_ID WHERE '1996' = 'Year' AND T1.name = 'Honda Accord'</sql>
SELECT SUM(top_speed), SUM(power) FROM ( SELECT T2.TOP_SPEED, T2.POWER FROM driver AS T1 INNER JOIN vehicle AS T2 ON T2.Vehicle_ID = T1.Vehicle_ID WHERE T1.Citizenship = 'USA' AND strftime(STRFTIME('%Y',T2.`Builder`) , '1996') = 1 )
SELECT DISTINCT T1.model, T1.build_year, T1.builder FROM ( SELECT '2008', 'Subaru BRZ' AS T1, 'Wright Motorsports' AS T2 UNION ALL SELECT '2015', 'Porsche 996 GT3 RS', 'Porsche Cars Argentina' AS T3 UNION ALL SELECT '2007', 'KTM X-ABS', '
SELECT DISTINCT T1.model, T1.build_year, T1.builder FROM "vehicles AS T1 INNER JOIN driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID GROUP BY T2.Vehicle_ID ORDER BY CAST(T1."build_year" AS REAL) , T1.</sql>
SELECT COUNT(T1.Driver_ID) FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Vehicle_ID WHERE STRFTIME('%Y', T2.Build_Year) BETWEEN '2013' AND '2012'</sql>
SELECT COUNT(DISTINCT T2.Driver_ID) FROM driver AS T1 INNER JOIN vehicle AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE SUBSTR(T1.Build_Year, 4 , LENGTH - 3) LIKE '201%' GROUP BY T1.Driver_ID ORDER BY COUNT(DISTINCT T1.Name) DESC LIMIT 2</sql>
SELECT COUNT(T1.Driver_ID) FROM driver AS T1 INNER JOIN `nascar` AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Name = 'NASCAR' GROUP BY T2.Name ORDER BY COUNT(T2.Vehicle_ID) DESC LIMIT 1</sql>
SELECT COUNT(T1.Driver_ID) FROM driver AS T1 INNER JOIN ( SELECT DISTINCT T2.Name , T3.Vehicle_ID FROM driver AS T2 INNER JOIN race_series AS T3 ON T2.Vehicle_ID = T3.Vehicle_ID WHERE T2.`Type` = 'NASCAR' AND T3.`Series` IN ('WR', 'SR') ORDER BY COUNT(T1.Driver_
SELECT T1.Top_Speed / COUNT(T2.Vehicle_ID) AS avg FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Vehicle_ID WHERE T1.Builder = 'D' GROUP BY T2.Vehicle_ID ORDER BY SUM(T2.`Top_Speed`) DESC LIMIT 3</sql>
SELECT AVG(T2.top_speed) FROM ( SELECT T1.build_year, T2.`total_production`, SUM(T2.top_speed) AS total FROM "vehicle" AS T1 INNER JOIN "driver" AS T2 ON T1.Vehicle_ID = T2.Driver_ID GROUP BY T1.`build_year` , T2.`total_production`) AS T ORDER BY AVG(T2.top
SELECT T1.name FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Vehicle_ID WHERE T2.POWER > 5000 ORDER BY T1.NAME</sql>
SELECT DISTINCT T2.Name FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Vehicle_ID WHERE T1.power > ( SELECT MAX(T2.power) FROM driver AS T3 INNER JOIN vehicle_driver AS T4 ON T1.Vehicle_ID = T4.Vehicle_ID WHERE T2.building_series = 'F350' AND T3
SELECT DISTINCT T2.model, T2.top_speed FROM "driver" AS T1 INNER JOIN "vehicle_driver" AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID GROUP BY T1.name ORDER BY SUM(T1.`Total_Production`) DESC LIMIT 1</sql>
SELECT DISTINCT T2.model, T2.power FROM "vehicles" AS T1 INNER JOIN driver AS T2 ON T1.Vehicle_ID = T2.Driver_ID WHERE T1.top_speed > '150' OR T1.total_production IS NULL</sql>
SELECT DISTINCT T1.model, T2.build_year FROM "driver AS T1 INNER JOIN vehicle AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T2.name LIKE '%JIMMY%' AND T2.car_name = 'DJ' ORDER BY T1.model, T2.build_year DESC LIMIT 1</sql>
SELECT DISTINCT T1.model, T2.build_year FROM `table_name` AS T1 INNER JOIN `vehicle_driver` AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T2.NAME LIKE '%DJ%' AND T2.RACING_SERIES = 'ROADWHEEL'</sql>
SELECT T1.model FROM driver AS T1 INNER JOIN vehicle AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Vehicle_ID IS NULL ORDER BY COUNT(T2.Model) DESC LIMIT 1</sql>
SELECT T1.model FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Vehicle_ID IS NULL ORDER BY T2.Vehicle_ID LIMIT 0</sql>
SELECT DISTINCT T2.Vehicle_ID, T1.Model, T1.Builder FROM "vehicle" AS T1 INNER JOIN driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID INNER JOIN vehicle_driver AS T3 ON T1.Driver_ID = T3.Driver_ID WHERE T1.RacingSeries LIKE 'XXX%Z%' AND T1.Build_Year BETWE
SELECT DISTINCT T2.Model, T3.Name FROM driver AS T1 INNER JOIN vehicle AS T2 ON T1.Driver_ID = T2.Vehicle_ID WHERE T1.`Total_Production` IN (2 , 4 ) AND T2.Build_Year IS NOT NULL GROUP BY T3.Name ORDER BY COUNT(DISTINCT T1.Vehicle_ID) DESC LIMIT 1</sql>
SELECT DISTINCT T1.Vehicle_ID, T3.Model, T3.Build_Year FROM driver AS T1 INNER JOIN vehicle AS T2 ON T1.Driver_ID = T2.Vehicle_ID WHERE T2.Model LIKE '%Jeff Gordon%' GROUP BY T2.Vehicle_ID ORDER BY COUNT(DISTINCT T2.Vehicle_ID) DESC LIMIT 1</sql>
SELECT DISTINCT T1.Model, T1.Vehicle_ID FROM driver AS T1 INNER JOIN vehicle AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Total_Production > 2 AND T1.Name != 'Jeff Gordon' LIMIT 1</sql>
SELECT SUM(MAX(T2.Top_Speed)) FROM 'vehicle_driver' AS T1 INNER JOIN 'vehicle' AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T1.citizenship = 'American' AND strftime('%J', T1.Build_Year) BETWEEN '2004' AND '2005' GROUP BY T1.
SELECT COUNT(DISTINCT T1.Vehicle_ID), MAX(T2.`Total_Production`) FROM `vehicle` AS T1 INNER JOIN `driver` AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Vehicle_ID ORDER BY COUNT(`Vehicle_ID`) LIMIT 1</sql>
SELECT T1.name FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID ORDER BY T2.Name IN ('D'), T1.Name</sql>
SELECT DISTINCT T2.Name FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Vehicle_ID ORDER BY T1.`Name`, T2.Year LIMIT 1</sql>
SELECT SUM(COUNT(DISTINCT T2.Driver_ID)) AS num , COUNT(T1.Race_Series) FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID GROUP BY T1.Race_Series ORDER BY SUM(DISTINCT T3.NUM) DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T2.Driver_ID), COUNT(T1.`Series`) FROM `driver` AS T1 INNER JOIN `vehicle_driver` AS T2 ON T1.Driver_ID = T2.Vehicle_ID ORDER BY T1.Racing_Series GROUP BY T2.Builder, T2.Model</sql>
SELECT DISTINCT T2.Name, T2.Citizenship FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.model = 'dj1' AND T2.Vehicle_ID IS NOT NULL</sql>
SELECT DISTINCT T2.Name, T2.Citizenship FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Vehicle_ID = 'dj1'</sql>
SELECT COUNT(T1.Driver_ID) FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Vehicle_ID WHERE T1.DRIVER_ID NOT IN ( SELECT T2.driver_id FROM driver AS T2 INNER JOIN vehicle AS T3 ON T2.Vehicle_ID = T3.Vehicle_ID ORDER BY T2.Name LIMIT 1 )</sql>
SELECT COUNT(DISTINCT T2.Driver_ID) FROM driver AS T1 INNER JOIN vehicle AS T2 ON T1.Driver_ID = T2.Vehicle_ID WHERE T1.`Citizenship` != 'Individual' GROUP BY T1.Name ORDER BY COUNT(T1.Vehicle_ID) DESC LIMIT 1</sql>
SELECT COUNT(*) FROM Exams WHERE SUBSTR(Question_Text, 1, CHARINDEX('</', Question_Text)) = '' AND Subject_Code = 'Exam' LIMIT 1</sql>)</blockquote><p>What percentage of valid answers have an answer text that starts with 'H', and how many people on average are not in a middle or last name who use the first letter 'O.</p>
SELECT COUNT(*) FROM Questions WHERE Subject_Code = 'Test' AND Exam_Name = 'Exam 120987563423056947'</sql><sql>SELECT DISTINCT SUBSTR(Question_Text, LENGTH(SUBSTR(Question_Text, 1)) - 3) AS str FROM Questions WHERE Question_Name = 'Count number of exams.' AND Sub
SELECT SUBSTR('Subject_Code', 1, LENGTH(SUBSTR('Subject_Code', 2)) - 3) FROM Questions ORDER BY SUBSTR('Subject_Code', 3, LENGTH(SUBSTR('Subject_Code', 3, 50)))</sql>
SELECT SUBSTR('SUBJECT_CODE', 1, LENGTH(SUBSTR(SUBSTR('SUBJECT_CODE', 2), 3)) - 4) AS DISTINCT FROM Exam</sql>
SELECT DISTINCT T1.Question_Name, T2.`Date` FROM Valid_Answers AS T1 INNER JOIN Exams AS T2 ON T1.Exam_ID = T2.Exam_ID WHERE T2.Subject_Code = 'Database'</sql>
SELECT T2.Exam_Date, T3.Question_Name FROM Questions AS T1 INNER JOIN Exams AS T2 ON T1.Question_ID = T2.Exam_ID INNER JOIN Valid_Answers AS T3 ON T3.Question_ID = T1.Question_ID WHERE T3.Subject_Code != 'database'</sql>
SELECT T2.Exam_Date, SUBSTR(T3.Question_Text, LOCATE('-', T3.Question_Text) - 10, 39) AS strStart, T2.Valid_Answer_text FROM Questions AS T1 INNER JOIN Exams AS T2 ON T1.Exam_ID = T2.Exam_ID WHERE T1.Question LIKE '%data%' ORDER BY
SELECT SUBSTR(SUBSTR(Question_Text, 1, LENGTH(SUBSTR(Question_Text, 1)) - 5), 2, INTEGER) FROM Questions ORDER BY SUBSTR(SUBSTR(Question_Text, LOCALITY(SUBSTR(Question_Text, LOCATION)))) DESC LIMIT 1</sql>
SELECT DISTINCT T1.Type_of_Question_Code, COUNT(DISTINCT T2.Question_Text) FROM Questions AS T1 INNER JOIN Exams AS T2 ON T1.Question_ID = T2.Exam_ID ORDER BY T2.Subject_Code DESC</sql>
SELECT DISTINCT T1.type_of_Question_Code, SUM(IIF(T2.code = 'q3' AND T1.count > 0)) - COUNT(DISTINCT T2.type_of_Question) FROM Questions AS T1 INNER JOIN Questions_in_Exams AS T2 ON T1.question_id = T2.Question_ID WHERE T1.subject_code = 'q3' GROUP BY T
SELECT T2.valid_answer_text FROM Valid_Answers AS T1 INNER JOIN Questions AS T2 ON T1.Question_ID = T2.Question_ID WHERE T1.Answer_Text LIKE '%Normal%' ORDER BY strftime(STRFTIME('%J', 'YYYYMMDDHHMMSS'), T2.Exam_Date) LIMIT 1</sql>
SELECT T2.valid_answer_text FROM Valid_Answers AS T1 INNER JOIN Questions AS T2 ON T1.Question_ID = T2.Question_ID WHERE T1.Exam_Name LIKE '%Normal%' AND strftime(strftime('%Y', T1.Valid_Answer_Date), 'MM/DD/YY') IN ('56740069', '62738193
SELECT COUNT(T1.Question_ID) FROM Questions AS T1 INNER JOIN Valid_Answers AS T2 ON T1.Question_ID = T2.Question_ID WHERE T2.Valid_Answer_Text = 'No Answer' AND strftime('%J', T1.`Date`) = '' AND strftime('%Y', T1.`Date`) BETWEEN 2006 AND 2014</sql>
SELECT COUNT(T1.Question_ID) FROM Questions AS T1 INNER JOIN Valid_Answers AS T2 ON T1.Question_ID = T2.Question_ID WHERE T2.Valid_Answer_Text = 'Comments' GROUP BY T1.Question_ID ORDER BY SUM(T2.Answer) DESC LIMIT 1</sql>
SELECT T2.valid_answer_text, SUM(T1.count) DESC FROM Valid_Answers AS T1 INNER JOIN Questions AS T2 ON T1.Question_ID = T2.Question_ID WHERE T2.question LIKE '%@%' ORDER BY COUNT(T2.Answer_Text) DESC LIMIT 1</sql>
SELECT DISTINCT T1.Question_Text FROM Questions AS T1 INNER JOIN Valid_Answers AS T2 ON T1.Question_ID = T2.Question_ID ORDER BY T1.Valid_Answer_Text DESC LIMIT 1</sql>
SELECT DISTINCT T1.FirstName, T2.Date FROM Questions AS T1 INNER JOIN Valid_Answers AS T2 ON T1.Question_ID = T2.Question_ID INNER JOIN Students AS T3 ON T3.Student_ID = T2.Valid_Answer_ID WHERE T1.Type_of_Question_Code = 'qquestion'</sql>
SELECT DISTINCT T1.FirstName, T2.LastName, T3.`Date`, T3.Answer FROM Student_Address AS T1 INNER JOIN Questions AS T2 ON T1.StuID = T2.StuID WHERE T2.`Question` LIKE '% % ' ORDER BY T1.FirstName = T2.FirstName LIMIT 3</sql>
SELECT DISTINCT T1.Email_Adress, T2.Date FROM Exams AS T1 INNER JOIN Valid_Answers AS T2 ON T1.Exam_ID = T2.Question_ID ORDER BY T2.Date DESC LIMIT 1</sql>
SELECT DISTINCT T2.Email_Adress, T3.Date FROM Exams AS T1 INNER JOIN Valid_Answers AS T2 ON T1.Exam_ID = T2.Question_ID WHERE T2.Valid_Answer_Text LIKE '%@%' ORDER BY T3.`Date` DESC LIMIT 1</sql>
SELECT CAST(SUM(CASE WHEN T1.Question LIKE 'L%C1%' THEN 1 ELSE NULL END) AS REAL) - SUM(CASE WHEN T2.Question LIKE 'W%B5%' THEN 1 ELSE NULL END)) / COUNT(*) FROM Questions_in_Exams AS T1 INNER JOIN Exam_Values AS T2 ON T1.Exam_ID = T2.Exam_ID WHERE SUBSTR(T2.Question
SELECT DISTINCT T1.Question_ID FROM Questions AS T1 INNER JOIN Valid_Answers AS T2 ON T1.Question_ID = T2.Question_ID WHERE T2.`Valid_Answer_Text` IS NOT NULL GROUP BY T1.Question_ID ORDER BY COUNT(T2.Question_ID) LIMIT 1</sql>
SELECT DISTINCT T1.FirstName, T2.LastName FROM Questions AS T1 INNER JOIN Valid_Answers AS T2 ON T1.Question_ID = T2.Question_ID WHERE T2.Valid_Answer_Text IN (T2.Fname, T2.MfU) GROUP BY T1.FirstName ORDER BY SUM(T1.FirstName) > 2 AND SUM(T1.LastName) > 2</sql
SELECT DISTINCT T1.FirstName, T3.LastName FROM Students AS T1 INNER JOIN Questions AS T2 ON T1.Student_ID = T2.Question_ID INNER JOIN Questions AS T3 ON T2.Exam_ID = T3.Exam_ID ORDER BY COUNT(T3.Question_Text) DESC</sql>
SELECT T2.valid_answer_text FROM Valid_Answers AS T1 INNER JOIN Questions AS T2 ON T1.Question_ID = T2.Question_ID WHERE T1.Valid_Answer_Text IN ( SELECT T1.Question_Text FROM Questions AS T1 INNER JOIN Exams AS T2 ON T1.Exam_ID = T2.Exam_ID WHERE SUBSTR(T1.`Answer_Text`, 0,
SELECT T3.valid_answer_text FROM Valid_Answers AS T1 INNER JOIN Questions AS T2 ON T1.Question_ID = T2.Question_ID WHERE T1.Valid_Answer_Text IN ( SELECT MAX(T2.Valid_Answer_Text) FROM Valid_Answers AS T3 INNER JOIN Questions AS T4 ON T2.Question_ID = T4.Question_ID GROUP BY T2.Question_ID
SELECT DISTINCT T1.Last_Name, T1.FirstName FROM Students AS T1 INNER JOIN Questions AS T2 ON T1.Student_ID = T2.Question_ID WHERE T2.Type_of_Question_Code != 'Q' AND T2.Subject_Code LIKE '%M%' ORDER BY T2.Question_Name NOT LIKE '%M%');</sql>
SELECT DISTINCT T1.Last_Name FROM Student AS T1 INNER JOIN Exams AS T2 ON T1.Student_ID = T2.Exam_ID WHERE T2.Question_Code LIKE '%Gender%' AND T1.<gender__FULL_NAME IS NULL</sql>
SELECT DISTINCT T1.gender, SUM(T3.Gender) AS num FROM Questions AS T1 INNER JOIN Students AS T2 ON T1.Student_ID = T2.STUDENT_ID WHERE T2.Name = 'male' GROUP BY T1.gender ORDER BY T1.num DESC LIMIT 1</sql><question>Calculate the number of female and male students.</question><sql>SELECT DISTINCT
SELECT DISTINCT T1.Gender_MFU , COUNT(T1.Question_Text) FROM Questions AS T1 INNER JOIN Student_Addresses AS T2 ON T1.Student_ID = T2.StuID GROUP BY T2.gender ORDER BY SUM(T1.Question_ID) DESC LIMIT 1</sql>
SELECT DISTINCT T1.Last_Name, T2.FirstName FROM Students AS T1 INNER JOIN Valid_Answers AS T2 ON T1.Student_ID = T2.Question_ID WHERE T1.Gender = 'F' ORDER BY T2.Valid_Answer_Text LIMIT 1</sql>
SELECT DISTINCT T1.Last_Name, T2.FirstName FROM Questions AS T1 INNER JOIN Valid_Answers AS T2 ON T1.Question_ID = T2.Question_ID WHERE T2.Gender_MFU  = 'F'</sql>
SELECT DISTINCT T1.FirstName, T2.LastName FROM Questions AS T1 INNER JOIN Valid_Answers AS T2 ON T1.Question_ID = T2.Question_ID WHERE T2.Valid_Answer_Text IS NULL GROUP BY T1.FirstName, T2.LastName ORDER BY COUNT(T1.FirstName) INTERSECT     SELECT DISTINCT First_name FROM students WHERE student_address IS NULL LIMIT 
SELECT DISTINCT T1.FirstName, T3.LastName FROM Students AS T1 INNER JOIN Valid_Answers AS T2 ON T1.Student_ID = T2.Question_ID WHERE T2.Question_Text IS NOT NULL ORDER BY T2.Valid_Answer_Text</sql>
SELECT DISTINCT T1.Question_Text FROM Questions AS T1 INNER JOIN Valid_Answers AS T2 ON T1.Question_ID = T2.Question_ID WHERE T2.`Valid Answer` IS NULL AND T2.`Valid Answer Text` IN ('Normal', 'Absent') GROUP BY T2.`Question_ID`, T1.`First_Name`, T1.`Last_Name` ORDER BY COUNT(T1.Question_
SELECT DISTINCT T1.Question_Text FROM Questions AS T1 INNER JOIN Valid_Answers AS T2 ON T1.Question_ID = T2.Question_ID WHERE T2.`Valid Answer` IS NULL AND T2.`Absent` IN ('Normal', 'Absent') ORDER BY T2.Possible_Answer_Text</sql>
SELECT DISTINCT T1.Question_Type, COUNT(T2.Question_ID) FROM Questions AS T1 INNER JOIN Exams AS T2 ON T1.Question_ID = T2.Exam_ID GROUP BY T1.Question_ID ORDER BY COUNT(T2.Question_ID) DESC LIMIT 3</sql>
SELECT QuestionType, SUM(QuestionType) FROM Questions GROUP BY QuestionType ORDER BY COUNT(QuestionType) DESC LIMIT 1</sql>
SELECT T3.FirstName, T1.LastName, T1.GenderMFU FROM Questions AS T1 INNER JOIN Students AS T2 ON T1.Student_ID = T2.StuID INNER JOIN Valid_Answers AS T3 ON T1.Question_ID = T3.Question_ID WHERE T2.FirstName != 'J' ORDER BY T1.LastName</sql>
SELECT DISTINCT T1.FirstName, T3.LastName FROM Students AS T1 INNER JOIN Questions AS T2 ON T1.Student_ID = T2.Question_ID INNER JOIN Questions AS T3 ON T2.Exam_ID = T3.Exam_ID GROUP BY T1.Full_name ORDER BY COUNT(T2.Question) DESC LIMIT 3</sql>
SELECT COUNT(T2.address_id) FROM Addresses AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.product_type_code = 'company' AND T2.customer_name = 'Amy S.'</sql>
SELECT COUNT(T1.address_details) FROM Addresses AS T1 INNER JOIN Customers AS T2 ON T1.address_id = T2.customer_id WHERE T2.payment_method_code = 'credit_card'</sql>
SELECT DISTINCT T2.address_id, T1.address_details FROM Addresses AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.address_details IS NOT NULL ORDER BY T1.address_details LIMIT 3</sql>
SELECT DISTINCT T2.address_id, T1.address_details FROM Addresses AS T1 INNER JOIN Customers AS T2 ON T1.address_id = T2.address_id WHERE T2.customer_number IS NOT NULL ORDER BY T2.customer_phone</sql>
SELECT COUNT(T2.product_name), T1.customer_address FROM address AS T1 INNER JOIN customers AS T2 ON T1.customer_id = T2.customer_id INNER JOIN `Order_Items` AS T3 ON T2.address_id = T3.order_item_id WHERE T2.payment_method_code LIKE 'Electricity%' ORDER BY COUNT(T3.product_name) DESC LIMIT 1</sql
SELECT COUNT(DISTINCT T1.product_name), COUNT(DISTINCT T2.order_item_id) FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.Product_id INNER JOIN Customers AS T3 ON T3.customer_id = T2.customer_id ORDER BY T2.order_quantity DESC LIMIT 1</sql>
SELECT T1.product_id, T2.product_type_code, T3.`product_name` FROM products AS T1 INNER JOIN addresses AS T2 ON T1.address_id = T2.address_id INNER JOIN address AS T3 ON T2.address_id = T3.address_id GROUP BY T1.product_id ORDER BY COUNT(T1.product_type_code) DESC LIMIT 1</sql>
SELECT T1.product_id, T2.`type_code`, T3.name FROM Products AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id INNER JOIN Customers AS T3 ON T3.customer_id = T1.customer_id WHERE T3.payment_method_code != 'card' AND strftime(T3.`order_date`, GETDATE()) BETWEEN 
SELECT DISTINCT T2.price FROM Products AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.product_name = 'Monitor' AND T2.customer_phone = '' AND T2.payment_method_code = 'creditcard'</sql>
SELECT DISTINCT T1.product_price, T2.product_name FROM Products AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.product_type_code = 'MONITOR'</sql>
SELECT CAST(SUM(T2.price * T1.`order_quantity`) AS DECIMAL) / COUNT(DISTINCT T2.product_id), AVG(T3.product_name), AVG(T4.`product_name`) FROM `Order_Items` AS T1 INNER JOIN Products AS T2 ON T1.product_id = T2.product_id ORDER BY T1.order_quantity DESC LIMIT 1</
SELECT DISTINCT SUM(T1.price), AVG(T2.Price), MAX(T2.Price) FROM `Order_Items` AS T1 INNER JOIN Products AS T2 ON T1.product_id = T2.`Product_id` GROUP BY T1.order_item_id ORDER BY sum(`T1.price`) - avg(T1.price), sum(max(T1.price)) DESC LIMIT 3</sql
SELECT CAST(SUM(CASE WHEN T2.`type_code` = 'CLOTHES' THEN product_price ELSE NULL END) AS REAL) / COUNT(T1.product_id) FROM `Order_Items` AS T1 INNER JOIN Addresses AS T2 ON T1.order_item_id = T2.address_id ORDER BY T2.address_details = 'qk976700835'</sql
SELECT CAST(SUM(T2.price) AS DECIMAL), CAST('%' AS T2.`total_price`) / COUNT(T1.customer_id) FROM Customer_Orders AS T1 INNER JOIN Products AS T2 ON T1.order_id = T2.product_id GROUP BY T1.customer_number, T1.customer_name ORDER BY SUM(CASE WHEN T2.`price` > 90 THEN CA
SELECT COUNT(DISTINCT T1.product_name) FROM Products AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE product_type_code = 'HARDWARE' AND product_name = 'Hardware'</sql>
SELECT COUNT(DISTINCT T2.product_name), COUNT(DISTINCT T2.product_type_code) FROM Products AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE t1.product_type_code IN ('Hardware') AND t1.customer_number = '185'</sql>
SELECT DISTINCT T2.product_name FROM ( SELECT AVG(T3.order_price) AS avg, SUM(T1.product_price) AS total, T2.product_id FROM Customers AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.payment_method_code != 'card' GROUP BY T2.product_name ) AS T3 ORDER BY T
SELECT DISTINCT T2.product_name FROM Order_Items AS T1 INNER JOIN Products AS T2 ON T1.order_item_id = T2.product_id WHERE (T2.`price` >  ( SELECT AVG(T1.product_price) - ( SELECT COUNT(T2.customer_number) FROM Customers AS T3 INNER JOIN Addresses AS T4 ON T3.address_id = T4.address_id
SELECT DISTINCT T2.product_name FROM ( SELECT CAST(SUM(T3.`price`) AS REAL) * 100 / COUNT(DISTINCT t2.Product_id) AS avg, SUM(CASE WHEN t3.type = 'HARDWARE' THEN T2.product_price END) AS total FROM Order_Items AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.
SELECT DISTINCT T2.product_name FROM Customer_Orders AS T1 INNER JOIN Products AS T2 ON T1.customer_id = T2.product_id WHERE T2.product_price > ( SELECT AVG(T2.product_price) FROM Products AS T2 WHERE T2.product_type_code = 'hardware' ) ORDER BY T1.order_quantity DESC LIMIT 1</sql>
SELECT DISTINCT T2.product_name FROM Products AS T1 INNER JOIN Addresses AS T2 ON T1.product_id = T2.address_id WHERE T1.type_code = 'Clothes' GROUP BY T2.ADDRESS_ID ORDER BY SUM(T3.`order_quantity` INTEGER) DESC LIMIT 1</sql>
SELECT DISTINCT T1.product_name FROM Products AS T1 INNER JOIN Customers AS T2 ON T1.product_id = T2.customer_id ORDER BY T2.customer_number DESC LIMIT 1</sql>
SELECT DISTINCT T2.product_name FROM ( SELECT CAST(T2.`Product_Price` AS REAL) - 1095683476000 AS pow FROM `Order_Items` WHERE ORDER_ITEM_ID = 'order_item_id_6' AND order_quantity = 1 GROUP BY product_name ORDER BY price LIMIT 1 ) T1 INNER JOIN Products AS T2 ON T1.product
SELECT DISTINCT T1.product_name , T2.`Product Name`, strftime('%J', T2.order_date) AS `Date` FROM Products AS T1 INNER JOIN Orders AS T2 ON T1.product_id = T2.order_item_id GROUP BY T1.product_price ORDER BY T1.`Product Price` DESC LIMIT 1</sql>
SELECT T1.product_name FROM Products AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.`price` DESC LIMIT 1</sql>
SELECT DISTINCT T2.product_name FROM Customer_Orders AS T1 INNER JOIN Products AS T2 ON T1.customer_id = T2.product_id ORDER BY T1.`order_price` DESC LIMIT 1</sql>
SELECT T1.product_name, T2.`price`, 1 AS total FROM Products AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id ORDER BY T2.`price` DESC</sql>
SELECT T1.product_name FROM Products AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id ORDER BY T1.`product_price` ASC LIMIT 1</sql>
SELECT DISTINCT T2.product_type_code, COUNT(T1.`Product Type Code`) FROM ( SELECT DISTINCT T3.`Product Type Code`, SUM(`quantity`) AS num , `Amount` FROM Products AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.product_name = 'Customers' GROUP BY product_type_code ) AS T3 ORDER BY T3.`
SELECT T1.product_type_code, SUM(T2.quantity) AS total , T3.name FROM ( SELECT T1.`product_type_code`, COUNT(`products`) AS qnt UNION ALL SELECT T1.product_type_code, t1.customer_number , NULL UNION all SELECT T1.product_type_code, t3.name FROM ( SELECT T2.`product_name`, SUM(CASE WHEN t2.`quantity` > 
SELECT DISTINCT T2.product_type_code, SUM(T1.price), AVG(T2.product_type_code) FROM `Order_Items` AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T2.customer_name LIKE 'John%' GROUP BY T1.product_type_code ORDER BY SUM(t2.price) DESC LIMIT 1</sql>
SELECT AVG(T2.price), T3.product_type_code, T2.product_name FROM Products AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id INNER JOIN Customers AS T3 ON T1.customer_id = T3.customer_id GROUP BY T1.`product_type_code`, T3.product_name ORDER BY COUNT(T2.product_type_
SELECT T1.product_type_code FROM Products AS T1 INNER JOIN `Order_Items` AS T2 ON T1.product_id = T2.order_item_id WHERE T1.product_price BETWEEN 0 AND ( SELECT MAX(T2.product_type_code) FROM Products AS T1 INNER JOIN `Order_Items` AS T2 ON T1.product_id = T2.order_item_id
SELECT T1.product_type_code, T2.product_name FROM Customers AS T1 INNER JOIN Products AS T2 ON T1.customer_id = T2.customer_id INNER JOIN Addresses AS T3 ON T3.address_id = T2.address_id WHERE T1.customer_number IN ( SELECT DISTINCT T2.product_type_code FROM `Addresses` AS T2 INNER JOIN Products AS T3
SELECT DISTINCT T2.product_type_code FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.order_item_id ORDER BY T2.total_quantity DESC LIMIT 1</sql>
SELECT DISTINCT T2.product_type_code FROM Addresses AS T1 INNER JOIN Products AS T2 ON T1.address_id = T2.product_id WHERE T2.name LIKE '%Product%'"%' ORDER BY T1.address_details DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T1.customer_id) FROM Customers AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.customer_name = 'John Doe' GROUP BY T1.customer_id ORDER BY COUNT(T1.customer_number) DESC LIMIT 1</sql>
SELECT COUNT(customer_id) FROM Customers WHERE customer_number = '17' LIMIT 1</sql>
SELECT T1.customer_id, T2.customer_name FROM Customers AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id INNER JOIN products AS T3 ON T1.product_id = T3.product_id WHERE T2.customer_phone IS NOT NULL AND T2.customer_email IS NOT NULL GROUP BY T2.customer_name ORDER BY COUNT(T2.customer_number)
SELECT T1.customer_name, T2.customer_address FROM Customers AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T1.customer_id ORDER BY T2.customer_phone, T2.customer_number DESC LIMIT 1</sql>
SELECT DISTINCT T2.address_details, T3.`customer_phone`, T2.customer_email FROM Customer_Orders AS T1 INNER JOIN Addresses AS T2 ON T1.customer_id = T2.address_id WHERE T3.customer_name = 'Jeromy'</sql>
SELECT DISTINCT T2.address_details AS 'address', T1.phone, T1.email FROM Customers AS T1 INNER JOIN Addresses AS T2 ON T1.customer_id = T2.address_id WHERE T2.product_name = 'Jeromy'</sql>
SELECT DISTINCT T2.payment_method_code, COUNT(T1.`customer_number`) FROM Customer_Orders AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T2.`payment_method_code` ORDER BY t1.order_id</sql>
SELECT SUM(T1.payment_method_code), T2.customer_name FROM `Addresses` AS T1 INNER JOIN `Customer_Orders` AS T2 ON T1.address_id = T2.order_id WHERE T1.address_details LIKE '%' ORDER BY T1.customer_number ASC</sql>
SELECT DISTINCT T2.payment_method_code FROM Order_Items AS T1 INNER JOIN Addresses AS T2 ON T1.order_item_id = T2.address_id WHERE strftime('%J', T2.customer_address) IN ( SELECT strftime('%J', T2.customer_address) FROM Customers ) GROUP BY t2.payment_method_code ORDER BY COUNT(T1.order_item_id
SELECT T2.payment_method_code, MAX(T3.order_item_id) FROM Order_Items AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.`product_type_code` IN ('shipping', 'credit card') AND strftime('%Y %m %d') LIKE '%%' GROUP BY T1.order_item_id ORDER BY COUNT(T3
SELECT DISTINCT T2.customer_name FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.order_item_id ORDER BY COUNT(T2.product_id) LIMIT 1</sql>
SELECT DISTINCT T2.customer_name FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.order_item_id ORDER BY T1.payment_method_code LIMIT 2</sql>
SELECT DISTINCT T2.customer_number, T1.`payment_method_code` FROM Customer_Orders AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.`customer_name` = 'Jeromy' AND T2.customer_type_code = 'PB9748920'</sql>
SELECT DISTINCT T2.payment_method_code, T1.customer_number FROM Customer_Orders AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.order_item_id = '5643038' AND T2.customer_name = 'Jeromy'</sql>
SELECT DISTINCT T2.payment_method FROM Customer_Orders AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T2.address_details LIKE '%bank%' ORDER BY T2.`customer_phone` DESC LIMIT 3</sql>
SELECT T1.payment_method_code, strftime('%J', T2.order_date), T2.customer_number FROM `Order_Items` AS T1 INNER JOIN addresses AS T2 ON T1.order_item_id = T2.address_id WHERE T2.`customer_phone` IN ( SELECT DISTINCT T1.customer_phone, strftime('%J', T2.order_date) FROM `Customer_
SELECT DISTINCT T1.product_id , T2.product_type_code FROM Products AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_name, t1.product_name</sql>
SELECT T1.product_id, T2.`product_type_code`, strftime('%J', T2.order_date), strftime('%Y', T2.order_date) AS order_year FROM `Product` AS T1 INNER JOIN `Order_Items` AS T2 ON T1.product_id = T2.`product_id` WHERE T1.`product_name` LIKE '%(%j%)' ORDER BY strftime
SELECT DISTINCT T2.product_type_code FROM Products AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY ( SELECT NULL, COUNT(T1.product_id) AS product_num FROM Customer_Orders AS T1 INNER JOIN Order_Items AS T2 ON T2.order_item_id = T1.order_item_id WHERE T2.order_status_
SELECT T1.product_type_code FROM products AS T1 INNER JOIN address_items AS T2 ON T1.product_id = T2.order_item_id GROUP BY T2.address_details ORDER BY COUNT(T2.order_description) LIMIT 3</sql>
SELECT COUNT(DISTINCT T1.customer_id) FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.order_item_id GROUP BY T1.customer_id ORDER BY COUNT(DISTINCT T1.order_items.order_id) DESC LIMIT 1</sql>
SELECT COUNT(T1.customer_id), SUM(T2.order_quantity) FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = 'John Doe' GROUP BY T1.customer_number ORDER BY COUNT(T1.customer_id) DESC LIMIT 1</sql>
SELECT DISTINCT T2.order_item_id, T1.order_date FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = 'Jeromy' ORDER BY T1.order_quantity DESC</sql>
SELECT DISTINCT T2.order_item_id, T1.order_date AS order_date , T2.order_status_code FROM Customer_Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_items IN ( SELECT DISTINCT T1.order_item_id, T2.order_date , T2.order_status_code FROM
SELECT DISTINCT T1.customer_name, T2.customer_id , COUNT(T3.order_item_id) FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.customer_id INNER JOIN Customer_Orders AS T3 ON T1.customer_id = T3.customer_id WHERE T3.customer_number IS NULL GROUP BY T1.customer_name, T2
SELECT DISTINCT T1.customer_name , SUM(T2.order_quantity) FROM Customer_Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.customer_number ORDER BY T2.customer_name, T2.customer_address</sql>
SELECT DISTINCT T2.customer_id , T1.customer_name AS first_name FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.order_item_id ORDER BY COUNT(T2.order_item_id) DESC LIMIT 1</sql>
SELECT DISTINCT T1.customer_id , T2.customer_name AS phone FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.order_item_id ORDER BY T1.customer_number DESC LIMIT 1</sql>
SELECT DISTINCT T2.order_status, COUNT(T1.order_item_id) FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.order_id GROUP BY t2.ORDER_STATUS ORDER BY count(DISTINCT t2.order_item_id) DESC LIMIT 1</sql>
SELECT SUM(SUM(CASE WHEN T2.status = 'Complete' THEN 1 ELSE NULL END)) AS num FROM ( SELECT DISTINCT T2.order_status_code , COUNT(T3.`order_item_id`) AS num, SUM(DISTINCT T3.`customer_number`, `customer_name`), T1.customer_address , T2.customer_phone, strftime('%J', T1.order_date) AS order
SELECT DISTINCT T2.order_status FROM Customer_Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.customer_id WHERE T1.`order_item_id` IN ( SELECT MAX(DISTINCT T2.order_status ) FROM Order_Items GROUP BY T2.order_items )</sql>
SELECT DISTINCT T2.order_status_code FROM ( SELECT T1.order_item_id, COUNT(T2.order_item_id) AS num FROM Customer_Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_items LIKE '%ORDER%' GROUP BY T2.order_item_id ORDER BY COUNT(T1.order_item_id
SELECT COUNT(T1.customer_id) FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.order_item_id WHERE T2.`order_status` = 'pending' AND T1.payment_method_code != '' AND T1.customer_phone != ''</sql>
SELECT COUNT(customer_id) FROM Customers WHERE customer_name = 'No products ordered' AND customer_address IS NULL</sql>
SELECT T1.product_name FROM Addresses AS T1 INNER JOIN Customers AS T2 ON T1.address_id = T2.address_id WHERE T2.payment_method_code != 'credit card' AND T2.`order_details` IS NULL</sql>
SELECT T1.product_name FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.order_item_id WHERE T2.order_status_code != 'Ordered' AND NOT T2.`order_quantity` IS NULL</sql>
SELECT COUNT(T2.product_name) FROM Customer_Orders AS T1 INNER JOIN Products AS T2 ON T1.order_id = T2.product_id WHERE T2.name = 'Monitor' AND T1.customer_id = 1 GROUP BY T2.name ORDER BY COUNT(T1.order_item_id) DESC LIMIT 0</sql>
SELECT COUNT(T1.product_name), SUM(T2.order_quantity) FROM Order_Items AS T1 INNER JOIN Products AS T2 ON T1.order_item_id = T2.product_id WHERE T1.customer_address IS NULL AND T2.product_name IN ('Monitor') GROUP BY T1.product_name ORDER BY COUNT(T1.order_quantity) DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T1.customer_name) FROM Customers AS T1 INNER JOIN Products AS T2 ON T1.customer_id = T2.product_id WHERE T2.product_name = 'Monitor' ORDER BY T2.product_name</sql>
SELECT COUNT(DISTINCT T1.customer_id) FROM Customers AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T2.`product_name` = 'Monitor' GROUP BY T1.customer_id ORDER BY COUNT(T1.customer_id) DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T1.customer_id) FROM Customer_Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_item_id = T2.order_item_id WHERE T1.order_date IS '2018-10-05' AND T1.order_status_code LIKE '%completed%' GROUP BY T2.product_id ORDER BY COUNT(DISTINCT T1.customer
SELECT COUNT(DISTINCT T1.customer_id), COUNT(T2.`order_item_id`) FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.order_item_id ORDER BY count(DISTINCT t3.`order_item_id`) DESC LIMIT 5</sql>
SELECT T1.customer_id FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.order_item_id WHERE T2.ORDER_STATUS IS NULL AND T2.order_id IS NOT IN ( SELECT DISTINCT T1.order_id FROM Customer_Orders )</sql>
SELECT T2.customer_id FROM Customer_Orders AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.payment_method_code IS NULL AND T1.order_status != 'completed'</sql>
SELECT DISTINCT T2.order_date, T1.order_item_id FROM Customer_Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_item_id = T2.order_item_id WHERE T2.product_quantity > 3 AND strftime('%Y', T1.order_date) BETWEEN '2018-01' AND '2019-01
SELECT DISTINCT T2.order_item_id, SUM(T1.`order_quantity`) FROM Customer_Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.customer_number ORDER BY SUM(SUM(T1.ORDER_QUANTITY)) > ( SELECT MAX(COUNT(`T2.order_quantity`)) FROM Customers WHERE customer_name = 'Customer
SELECT COUNT(T1.Building_ID), T2.Name FROM "building AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T2.Name ORDER BY COUNT(T1.Building_ID) DESC LIMIT 1</sql>
SELECT COUNT(T1.Building_ID), T2.Name FROM "building AS T1 INNER JOIN region AS T2 ON T1.Building_ID = T2.Region_ID GROUP BY T2.Region_ID ORDER BY SUM(CASE WHEN T2.Name = 'All buildings') - COUNT(T1.Building_ID) DESC LIMIT 1</sql>
SELECT DISTINCT T2.Name FROM "region" AS T1 INNER JOIN 'building' AS T2 ON T1.Region_ID = T2.Building_ID ORDER BY T1.number_of_stories DESC LIMIT 1</sql>
SELECT DISTINCT T2.Name FROM "region" AS T1 INNER JOIN `building` AS T2 ON T1.Region_ID = T2.Building_ID ORDER BY T1.Stories DESC LIMIT 1</sql>
SELECT DISTINCT T2.address FROM "region" AS T1 INNER JOIN `building` AS T2 ON T1.Region_ID = T2.Building_ID ORDER BY T1.completion_year DESC</sql>
SELECT DISTINCT T2.address FROM "region" AS T1 INNER JOIN buildings AS T2 ON T1.Region_ID = T2.Building_ID ORDER BY STRFTIME('%Y', T2.Completed_Year) DESC LIMIT 1</sql>
SELECT SUM(T2.number_of_stories) FROM "region" AS T1 INNER JOIN "building" AS T2 ON T1.Region_ID = T2.Region_ID WHERE SUBSTR(T1.Completed_Year, 3) != '1980' AND strftime('%J', T2.Date_built) < '2015-03-26'</sql>
SELECT SUM(COUNT("Stories")) FROM "region" WHERE MAX(T2.`Completed_Year`) BETWEEN 1975 AND 2013 GROUP BY COUNT(DISTINCT T2.Name) ORDER BY COUNT(T2.`Completed_Year`) DESC LIMIT 1</sql>
SELECT AVG(T2.population), T1.Region_ID FROM ( SELECT T1."Capital", SUM(CASE WHEN T1."Population > 500 THEN 1 ELSE -1 END) AS sum , T2 AS T3 ORDER BY T1."Name" DESC LIMIT 1 ) AS T4 INNER JOIN "region" AS T1 ON T2.Region_ID = T1.Region_ID GROUP BY T1.Region_ID
SELECT AVG(T2.population), SUM(T3.Population) FROM 'region' AS T1 INNER JOIN `building` AS T2 ON T1.Region_ID = T2.Building_ID WHERE T1.name = 'avgpop' GROUP BY T1.region_id ORDER BY sum(T2.population), T3.Population DESC LIMIT 1</sql>
SELECT DISTINCT T2.Name FROM "region" AS T1 INNER JOIN `building` AS T2 ON T1.Region_ID = T2.Building_ID ORDER BY T1.Capital ASC</sql>
SELECT DISTINCT T2.Name FROM "region" AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID ORDER BY T2.Name IN ( T1.Capital, T1.Address )</sql>
SELECT DISTINCT T2.capital FROM region AS T1 INNER JOIN building AS T2 ON T1.region_id = T2.Region_ID WHERE T1.Area > 10000</sql>
SELECT T3.Name FROM "region" AS T1 INNER JOIN "building" AS T2 ON T1.Region_ID = T2.Building_ID WHERE T2.Capital BETWEEN 10000 AND 10500</sql>
SELECT T1.capital FROM "region" AS T1 INNER JOIN building AS T2 ON T1.Region_ID = T2.Region_ID ORDER BY T1.population DESC LIMIT 1</sql>
SELECT T1.capital FROM "region" AS T1 INNER JOIN "building" AS T2 ON T1.Region_ID = T2.Building_ID ORDER BY T1.population DESC LIMIT 1</sql>
SELECT DISTINCT T2.name FROM "region" AS T1 INNER JOIN buildings AS T2 ON T1.Region_ID = T2.Building_ID ORDER BY (T2.Area > 500) DESC LIMIT 5</sql>
SELECT DISTINCT T2.Name FROM "region" AS T1 INNER JOIN `building` AS T2 ON T1.Region_ID = T2.Building_ID GROUP BY T1.Name ORDER BY COUNT(T1.Area) DESC LIMIT 5</sql>
SELECT DISTINCT T2.Name FROM "region" AS T1 INNER JOIN `building` AS T2 ON T1.Region_ID = T2.Building_ID ORDER BY T2.name</sql>
SELECT DISTINCT T2.Name, T3.Region_ID FROM "building" AS T1 INNER JOIN "region" AS T2 ON T1.Building_ID = T2.Region_ID WHERE T1.Name = 'city'</sql>
SELECT DISTINCT T2.Name FROM "region" AS T1 INNER JOIN `building` AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T2.Region_ID HAVING COUNT(T2.Building_ID) > 1</sql>
SELECT DISTINCT T2.Name FROM "region" AS T1 INNER JOIN building AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T2.Region_ID HAVING COUNT(T2.Building_ID) > 1</sql>
SELECT T1.capital FROM "region" AS T1 INNER JOIN 'building' AS T2 ON T1.Region_ID = T2.Region_ID ORDER BY COUNT(T2.Building_ID) DESC LIMIT 1</sql>
SELECT T1.capital FROM "region" AS T1 INNER JOIN building AS T2 ON T1.Region_ID = T2.Region_ID ORDER BY T2.Building_ID DESC LIMIT 1</sql>
SELECT DISTINCT T2.address FROM region AS T1 INNER JOIN building AS T2 ON T1.Region_ID = T2.Building_ID WHERE T1.name = 'CITY OF MADRAS'</sql>
SELECT DISTINCT T2.Address, T3.Name FROM "region" AS T1 INNER JOIN "building" AS T2 ON T1.Region_ID = T2.Building_ID GROUP BY T1.Region_ID ORDER BY T1.Region_ID</sql>
SELECT COUNT(DISTINCT T2.Building_ID) FROM 'region' AS T1 INNER JOIN building AS T2 ON T1.Region_ID = T2.Region_ID WHERE T2.Name = 'Abruzzo' AND T2.Address = 'Rome, Lazio 048203'</sql>
SELECT SUM(IIF(T2.region = 'Abruzzo') - IIF(T1.name != 'building') * 2) FROM "region" AS T1 INNER JOIN "region" AS T2 ON T1.region_id = T2.Region_ID WHERE T2.name = 'abruzzo'</sql>
SELECT SUM(Completed_Year), COUNT(Building_ID) FROM "region" WHERE 'Completed Year' IS NULL GROUP BY SUM(Completed_Year) ORDER BY SUM(Completed_Year) DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T2.Building_ID), SUM(T2.Completed_Year) FROM "region" AS T1 INNER JOIN "building" AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T2.Region_ID ORDER BY T2.Completed_Year DESC</sql>
SELECT SUM(DATE('2013') - MAX(CASE WHEN 'Completed_Year' = '2015' THEN DATE('2014') END)) AS per FROM "building" ORDER BY COUNT(CASE WHEN 'Completed_Year' = 2016 THEN Date('2014') ELSE NULL END) DESC LIMIT 1</sql>
SELECT T1.Year FROM "region" AS T1 INNER JOIN "building" AS T2 ON T1.Region_ID = T2.Building_ID ORDER BY COUNT(T2.Name) DESC LIMIT 1</sql>
SELECT DISTINCT T2.name FROM "region" AS T1 INNER JOIN `building` AS T2 ON T1.Region_ID = T2.Region_ID WHERE T1.IsEmpty AND T2.No_of_Stories IS NULL GROUP BY T2.Name ORDER BY COUNT(T2.Building_ID) ASC LIMIT 1</sql>
SELECT DISTINCT T2.name FROM "region" AS T1 INNER JOIN `building` AS T2 ON T1.Region_ID = T2.Region_ID WHERE T1.Population > 0 AND T2.Name IS NOT NULL GROUP BY T2.Name ORDER BY COUNT(T2.Building_ID) = 1</sql>
SELECT T1.Completed_Year FROM "region" AS T1 INNER JOIN "building" AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T1.Building_ID ORDER BY COUNT(T2.BUILDING) > 15 LIMIT 1</sql>
SELECT 'Completed' AS year FROM region WHERE COUNT(T2.Building_ID) > 2 AND T1.Number_of_Stories < 15 GROUP BY YEAR ORDER BY SUM(CASE WHEN T3.Capital = "T4" THEN 1 ELSE NULL END) - SUM(CASE WHEN T1.Number_of_Stories > 2 THEN 1 ELSE NULL END)) LIMIT 1</sql>
SELECT T1.address FROM "building" AS T1 INNER JOIN region AS T2 ON T1.Building_ID = T2.Region_ID ORDER BY T1.Region_ID, T1.Name</sql>
SELECT T1.address FROM "building" AS T1 INNER JOIN region AS T2 ON T1.Building_ID = T2.Region_ID GROUP BY T1.address ORDER BY COUNT(DISTINCT T2.name) DESC</sql>
SELECT COUNT(T1.Building_ID) FROM "region" AS T1 INNER JOIN "building" AS T2 ON T1.Region_ID = T2.Region_ID ORDER BY T1.Number_of_Stories DESC</sql>
SELECT DISTINCT T2.Name FROM "region" AS T1 INNER JOIN `building` AS T2 ON T1.Region_ID = T2.Building_ID ORDER BY T1.Population DESC LIMIT 1</sql>
SELECT T1.Channel_Details FROM Customers AS T1 INNER JOIN channels AS T2 ON T1.Customer_ID = T2.Channel_ID ORDER BY T2.Channel_Name IN ( T1.Channel_Details )</sql>
SELECT T1.Channel_Details, T2.Channel_details ORDER BY T2.Channel_name ASC FROM Customers AS T1 INNER JOIN channels AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Customer_and_Services_Details LIKE '%channel%'"</sql>
SELECT COUNT(Service_ID) FROM Customers AND Services WHERE Customers_and_Services = 'all'</sql>
SELECT COUNT(T1.Service_Details) FROM Customers AS T1 INNER JOIN Services AS T2 ON T1.Customer_ID = T2.Service_ID WHERE T1.customer_details IS NULL AND T1.customer_details IS NOT NULL AND T2.Service_Type = 'custom'</sql>
SELECT CASE T1.Status_Code FROM Customers AS T1 INNER JOIN Services_and_Channels AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Status_Code IN ('D', 'UA') GROUP BY T1.Service_ID ORDER BY COUNT(T2.Type_Code) DESC LIMIT 1</sql>
SELECT DISTINCT T1.analytical_layer_type FROM Customers AS T1 INNER JOIN Channels AS T2 ON T1.Customer_ID = T2.Channel_ID GROUP BY T1.analytical_layer_type ORDER BY COUNT(T1.analytical_layer_type) DESC LIMIT 1</sql>
SELECT T2.Service_Details FROM Customers AS T1 INNER JOIN Customers AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Name = 'Hardy Kutch' AND T2.Name LIKE '% Hardy Kutch%'</sql>
SELECT T2.Service_Details FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Customer_Details = 'Hardy Kutch'</sql>
SELECT T2.Service_Details, COUNT(T1.Service_ID) AS num FROM Customers AS T1 INNER JOIN Services AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T2.Service_id ORDER BY sum(CASE WHEN COUNT(T2.service_details) > 3 THEN T2.service_details END) DESC LIMIT 1</sql>
SELECT DISTINCT T1.Service_Details, SUM(CASE WHEN T2.`Status_Code` = 'D' THEN T1.Customer_ID ELSE NULL END) AS NumOfCodes FROM Services AS T1 INNER JOIN Customers AS T2 ON T1.Service_ID = T2.Service_ID WHERE T1.Service_Details LIKE '%%' GROUP BY SUM(CASE WHEN T2.Status_Code = 'D' THEN T1.Customer_
SELECT DISTINCT T1.Customer_Details, COUNT(T2.Service_ID) FROM Customers AS T1 INNER JOIN Services AS T2 ON T1.Customer_ID = T2.Service_ID GROUP BY T1.Customer_ID ORDER BY SUM(CASE WHEN T1.Status_Code = 'ACTUAL' THEN 1 ELSE -1 END) DESC LIMIT 1</sql>
SELECT T1.customer_details FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T2.customer_id ORDER BY COUNT(T2.Service_id) DESC LIMIT 1</sql>
SELECT DISTINCT T1.Customer_Details, SUM(CASE WHEN T2.Status_Code = 'UNAVAILABLE' THEN 1 ELSE 0 END) AS Total FROM Customers AS T1 INNER JOIN Services AS T2 ON T1.customer_id = T2.Service_ID GROUP BY T1.customer_details ORDER BY COUNT(T2.service_id) DESC LIMIT 1</sql>
SELECT T1.Customer_Details, SUM(T2.Services_and_Channels_Details) FROM Customers AS T1 INNER JOIN Services AS T2 ON T1.Customer_ID = T2.Service_ID GROUP BY T1.Customer_Id ORDER BY COUNT(T1.Customer_id) DESC LIMIT 1</sql>
SELECT T2.Service_Details FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Status_Code IS NULL AND T1.customer = 1 </sql>
SELECT T2.customer_details FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Status_Code IS NULL GROUP BY T2.customer_id HAVING COUNT(T2.Service_Details) > 0 ORDER BY T2.customer_details LIMIT 1</sql>
SELECT T2.Customer_Details FROM Customers AS T1 INNER JOIN Channels AS T2 ON T1.Customer_ID = T2.Channel_ID ORDER BY T1.Service_Code LIMIT 0, 5</sql>
SELECT T2.Customer_Details FROM Customers AS T1 INNER JOIN Services AS T2 ON T1.Customer_ID = T2.Service_ID GROUP BY T1.customer_id ORDER BY SUM(T1.Customer_Details) LIMIT 1, 5</sql>
SELECT DISTINCT T2.services, T3.service_details FROM Customers AS T1 INNER JOIN Channels AS T2 ON T1.Customer_ID = T2.Channel_id INNER JOIN Customers_and_Services AS T3 ON T3.Customer_ID = T1.customer_id WHERE T3.Service_ID IN (SELECT DISTINCT DISTINCT T1.Service_ID FROM Services AS T1 INNER JOIN Customers AS T
SELECT COUNT(T1.Customer_ID) FROM Customers AS T1 INNER JOIN Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Customer_Details IN ('Customer 4738549', 'Service 2')</sql>
SELECT T1.Customer_Name FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Channel_Details LIKE '%Kutch%'</sql>
SELECT T1.Customer_Details, T2.Services_details FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Customer_details = 'KUCH'</sql>
SELECT DISTINCT T1.Service_Details FROM Customers AS T1 INNER JOIN Services AS T2 ON T1.Customer_ID = T2.Service_ID WHERE T2.ServiceName = 'Nitrogen oxide' AND strftime(date, 'Ymd') - strftime('%Y', T1.Customer_Date) BETWEEN 0 AND 57 GROUP BY T1.Service_Details ORDER BY COUNT(T
SELECT DISTINCT T1.Services_details, T2.Status_code, T1.Service_ID FROM Customers AS T1 INNER JOIN Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.ServiceName = 'Apple TV' AND T2.Rating IS 'Good'</sql>
SELECT T1.Channel_Details, T2.Status_Code FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Customer_Name LIKE '%Hardy Kutch%' AND T2.Customer_Details = 'good' GROUP BY T1.Channel_Details ORDER BY T2.Service_Code INTERSECT SELECT T2.Service_Details FROM Custom
SELECT DISTINCT T1.Services, T2.Service_Details FROM Customers AS T1 INNER JOIN Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Service_Code = 'bad' ORDER BY T2.Service_Code DESC LIMIT 1</sql>
SELECT T3.Channel_Details FROM Customers AS T1 INNER JOIN Channels AS T2 ON T1.Customer_ID = T2.Channel_ID WHERE T2.Status_Code IN ('success', 'fail') AND T2.Services LIKE '%%15 ij%' GROUP BY T3.Channel_Name ORDER BY COUNT(T2.Channel_Details) DESC LIMIT 1</sql>
SELECT T3.Channel_Details, T2.Services_details FROM Customers_and_Services AS T1 INNER JOIN Channels AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Service_ID LIKE '15 ij%'</sql>
SELECT T2.service, T1.Customer_Details FROM Customers AS T1 INNER JOIN Customer_Interactions AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Status_Code = 'Stuck' AND T1.Service_Name = 'bad' ORDER BY T2.status, T2.services_details</sql>
SELECT T1.Customer_Details, T2.Status_Code FROM Customers AS T1 INNER JOIN Customer_Interactions AS T2 ON T1.Customer_ID = T2.Customer_ID INNER JOIN Services AS T3 ON T1.Service_id = T3.Service_ID WHERE T1.Customer_Detail LIKE '%bad%' AND T3.Status_Code IS 'N/A' ORDER BY T2.Service_Details DESC LIMIT 1</
SELECT COUNT(DISTINCT T1.Platforms_name) FROM Customers AS T1 INNER JOIN Integration_Platforms AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Successful IN (1, 0) GROUP BY T1.Customer_Name ORDER BY COUNT(T2.Platforms_name) DESC LIMIT 3</sql>
SELECT COUNT(DISTINCT T2.Customer_ID) FROM Customers AS T1 INNER JOIN Channels AS T2 ON T1.Customer_ID = T2.Channel_ID WHERE T2.Status_Code IN ('A', 'W') AND strftime('%J', T1.`Date`) BETWEEN '2013-08-06' AND '2014-08-31' GROUP BY T2
SELECT T1.Customer_Details FROM Customers AS T1 INNER JOIN Channels AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Channel_ID = 'FAILED'</sql>
SELECT T2.Customer_Details FROM Customers AS T1 INNER JOIN Channels AS T2 ON T1.Customer_ID = T2.Channel_ID WHERE T2.IntegrationPlatformName = 'Fail'</sql>
SELECT T1.Customer_Details, T2.Status_Code FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Service_ID != '' ORDER BY T2.Service_Details DESC LIMIT 1</sql>
SELECT T2.service_details FROM Customers AS T1 INNER JOIN Services AS T2 ON T1.Customer_ID = T2.Service_ID WHERE T1.customer IS NULL AND (T1.Status_Code <> 'NONE' OR T3.status_code != 'NONE')</sql>
SELECT T2.Code, SUM(T1.usage_count) FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Channel_Id IN ( SELECT DISTINCT T3.Channel_Name FROM Customers AS T3 INNER JOIN Services AS T4 ON T1.customer_id = T4.Customer_ID GROUP BY T2.Channel_Name ORDER
SELECT DISTINCT T2.AnalyticalLayerTypeCode , COUNT(T2.analyticalLayerTypeID) FROM Customers AS T1 INNER JOIN Analytics AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T2.AnalyticalLayerTypeCode</sql>
SELECT T2.services_details, T1.Status_Code FROM Customers AS T1 INNER JOIN Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.`STATUS_CODE` = 'unsatisfied' AND strftime('%J', T1.`TRIED_FOR`) != ''</sql>
SELECT T1.Service_Details FROM Customers AS T1 INNER JOIN Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Status_Code IS NULL AND strftime('%J', T2.`Date`) &lt; '2014-5'</sql>
SELECT COUNT(DISTINCT T1.vehicle_id) FROM Renting_history AS T1 INNER JOIN Vehicles AS T2 ON T1.customer_id = T2.Customer_id WHERE T2.name = 'GPS Vision'</sql>
SELECT COUNT(DISTINCT T1.vehicle_name) FROM Customers AS T1 INNER JOIN Vehicles AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(DISTINCT T1.vehicle_name) DESC LIMIT 1</sql>
SELECT DISTINCT T1.name FROM Vehicles AS T1 INNER JOIN Discount AS T2 ON T1.vehicle_id = T2.id ORDER BY T2.Model_Year DESC</sql>
SELECT DISTINCT T1.name FROM Vehicles AS T1 INNER JOIN customers AS T2 ON T1.customer_id = T2.id ORDER BY T1.Model_year DESC LIMIT 1</sql>
SELECT T1.Model_year, T2.model_name FROM Vehicles AS T1 INNER JOIN Discount AS T2 ON T1.vehicle_id = T2.vehicles_id WHERE T1.type IN ( SELECT DISTINCT T2.model_name FROM Customers AS T1 INNER JOIN Vehicles AS T2 ON T1.customer_id = T2.customer_id )</sql>
SELECT DISTINCT T2.model_year FROM Vehicles AS T1 INNER JOIN Customers AS T2 ON T1.vehicle_id = T2.id INNER JOIN Renting_history AS T3 ON T1.name = T3.customer_id WHERE T3.Discount_ID IN ( SELECT DISTINCT T2."discount_id" FROM Discount AS T4 INNER JOIN Vehicles AS T5 ON T4.
SELECT DISTINCT T1.name, T1.model_year FROM Vehicles AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id WHERE T2.model_year BETWEEN '2013' AND '2014' GROUP BY T1.name UNION ALL SELECT DISTINCT T1.name FROM Vehicles AS T1 INNER JOIN Renting_history
SELECT DISTINCT T2.name, T3.model_year, T5.type_of_powertrain FROM cars AS T1 INNER JOIN Renting_history AS T2 ON T2.vehicles_id = T1.id WHERE T1.model_year BETWEEN '2004' AND '2023' AND T3.year IS NULL AND T5.type_of_powertrain IN ('D
SELECT DISTINCT T2.model_year FROM Vehicles AS T1 INNER JOIN ( SELECT SUM(CASE WHEN T1.Model_year BETWEEN '2007' AND '2013' THEN T1.Id END ) / COUNT(T1.Id) FROM cars AS T2 INNER JOIN Vehicles AS T1 ON T1.Vehicle_id = T2.id WHERE CAST(( SELECT SUM(CASE WHEN T
SELECT DISTINCT T2.model_year FROM Vehicles AS T1 INNER JOIN Customers AS T2 ON T1.vehicle_id = T2.id WHERE T1.Model_year BETWEEN '2008' AND '2014' AND T1.Year IN ( 2013 , 2014 ) GROUP BY T1.name HAVING COUNT(T1.vehicle_id
SELECT DISTINCT T2.model_year, SUM(T1.type_of_powertrain), T2.num_vehicles FROM Vehicles AS T1 INNER JOIN ( SELECT t1.model_year , COUNT(T2.membership_credit) AS num FROM Discount AS T2 INNER JOIN Vehicles AS T3 ON T1.id = T3.Id WHERE T2.name LIKE '%Powertrain%'
SELECT T1.model_year, SUM(CASE WHEN T2.Type_of_powertrain = 'I4' THEN 1 ELSE 0 END) AS total , T1.vehicles_id FROM "Vehicles" AS T1 INNER JOIN "Discount" AS T2 ON T1.vehicle_id = T2.id WHERE T1.model_year IN ('i3', 'ii', 'iii') GROUP BY T1
SELECT DISTINCT T2.model_year, T1.`type_of_powertrain`, COUNT(T2.name) FROM Vehicles AS T1 INNER JOIN Discount AS T2 ON T1.id = T2.VehicleId GROUP BY T2.model_year ORDER BY SUM(CASE WHEN DISTINCT T2.power_source_type IS NULL THEN 1 ELSE 0 END) DESC LIMIT 1</sql>
SELECT DISTINCT T2.model_year, T1.`type_of_powertrain` FROM ( SELECT DISTINCT T2.Model_year , T1.`Type_of_powertrain` AS `type_of_powertrain__2015`, 1724696948323040000 AS `cityfuel_economy_rate` FROM Vehicles AS T1
SELECT AVG(T2.total_fuel_cost), MAX(T3.total_fuel_cost), SUM(T1.price * T2.discount) AS avg FROM 'vehicles' AS T1 INNER JOIN rentalhistory AS T2 ON T1.vehicle_id = T2.vehicles_id WHERE T1.type_of_powertrain = 'hybrid' AND T3.model_year
SELECT AVG(T2.total_fuel_cost), MAX(T3.total_fuel_cost), SUM(T1.membership_credit) AS total FROM cars AS T1 INNER JOIN vehicles AS T2 ON T1.id = T2.vehicles_id INNER JOIN discount AS T3 ON T2.ID = T3.customer_id GROUP BY T3.name ORDER BY SUM(T3.total_f
SELECT DISTINCT T1.name, T2.model_year FROM Vehicles AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id WHERE T1.city_fuel_economy_rate < 40 ORDER BY T2.model_year LIMIT 1</sql>
SELECT DISTINCT T1.name, T2.model_year FROM Vehicles AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id WHERE T2.city_fuel_economy_rate < ( SELECT SUM(T3.highway_fuel_economy_rate) FROM Renting_history AS T3 INNER JOIN Vehicle AS T4 ON T1
SELECT DISTINCT T2.model_year , SUM(T1.`Combined Fuel Economy Rate`) / COUNT(T1.`Vehicles`) AS avg FROM Vehicles AS T1 INNER JOIN Discount AS T2 ON T1.id = T2.vehicles_id GROUP BY T1.model_year, t2.name ORDER BY SUM(CASE WHEN t1.type IN ('Diesel', 'Fuel E
SELECT DISTINCT T2.model_year AS year , AVG(T2.fuel_economy_rate) FROM ( SELECT 'highway' AS t1 UNION ALL SELECT 'combined_fuel_economy_rate', 500000 FROM "Vehicles" WHERE `Discount` = 'Yes' AND T1.`city` = 'santaroes' GROUP BY DISTINCT t2.model_year
SELECT DISTINCT T1.name, T1.age FROM Customers AS T1 INNER JOIN ( SELECT id, MAX(T2.membership_credit), T1.id AS customerId FROM Customers AS T2 INNER JOIN vehicles AS T3 ON T1.customer_id = T3.Customer_ID GROUP BY T2.name, T1.id ) AS T1 ON T1.customer_id = T2.customer_id WHERE
SELECT DISTINCT T1.name, T2.age FROM Customers AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.Customer_id INNER JOIN Vehicles AS T3 ON T1.vehicles_id = T3.id ORDER BY T2.total_hours DESC LIMIT 1</sql>
SELECT T2.name, T1.age FROM customers AS T1 INNER JOIN Renting_history AS T2 ON T1.customer_id = T2.customer_id ORDER BY max(T1.membership_credit) DESC LIMIT 1</sql>
SELECT DISTINCT T1.name, T1.age FROM Customers AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.Customer_id GROUP BY T1.name ORDER BY COUNT(T1.membership_credit) DESC LIMIT 1</sql>
SELECT CAST(SUM(CASE WHEN T1.age > T2.age THEN 0 ELSE NULL END)) AS avg , SUM(T3.membership_credit) / COUNT(DISTINCT T2.customer_id), strftime('%J', T1.DATE_TRUNC ('DATE') - 96448534) FROM (SELECT DISTINCT T1.age , SUM(T2.memb
SELECT CAST(SUM(CASE WHEN T1.age > AVG(T3.Age) THEN T2.name END) AS REAL) / COUNT(T1.name), T3.Id FROM Customers AS T1 INNER JOIN discounts_all AS T2 ON T1.id = T2.Customer_id WHERE T2.Membership_credit > (SELECT AVG(T3.Age) FROM customers AS T3 INNER JOIN
SELECT T2.name, T1.membership_credit, T1.year , SUM(T1.total_hours) AS total FROM Customers AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.customer_id WHERE T1.discount_id = '693' GROUP BY T2.name ORDER BY T1.year , SUM(T2.total_hours) DESC LIMIT
SELECT T2.name, T1.membership_credit FROM Customers AS T1 INNER JOIN Discount AS T2 ON T1.id = T2.customer_id WHERE T2.name = 'Discount'</sql>
SELECT DISTINCT T1.name, SUM(T2.`total_hours`) AS sum FROM ( SELECT `Vehicles`.`vehicle_id`, SUM(`Total_Hours__F3058D67-2022C14E`), ROW_NUMBER() OVER (ORDER BY T1.name) FROM Customers AS T1 INNER JOIN vehicles AS T2 ON T1.customer_id = T2.ve
SELECT DISTINCT T1.name, SUM(T2.`total_hours`) AS sum FROM ( SELECT 'vehicle_id', 0 AS id , SUM(membership_credit) AS total_hours FROM "discount" ) AS T1 INNER JOIN cars AS T2 ON T1.Vehicles_id = T2.ID GROUP BY T1.vehicles_id ORDER BY SUM(T2.`total_hours
SELECT DISTINCT T1.name FROM Vehicles AS T1 INNER JOIN rentalhistory AS T2 ON T1.vehicle_id = T2.vehicles_id WHERE T1.membership_credit IS NULL AND T1.Model_year != 2021</sql>
SELECT DISTINCT T1.name FROM Vehicles AS T1 INNER JOIN renting_history AS T2 ON T1.vehicle_id = T2.vehicles_id WHERE T2.total_hours IS NULL LIMIT 1</sql>
SELECT DISTINCT T1.name FROM Customers AS T1 INNER JOIN Renting_history AS T2 ON T1.customer_id = T2.customer_id WHERE T2.total_hours > 2 GROUP BY T2.customer_id ORDER BY COUNT(T2.discount_id) HAVING COUNT(DISTINCT T2.name) >= 2</sql>
SELECT T1.name FROM Customers AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(T2.customer_id) LIMIT 2, 3</sql>
SELECT T1.name, T2.model_year FROM `renting_history` AS T1 INNER JOIN vehicles AS T2 ON T1.vehicles_id = T2.ID ORDER BY T1.total_hours DESC LIMIT 1</sql>
SELECT DISTINCT T1.name, T2.model_year FROM Vehicles AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id GROUP BY T1.id ORDER BY COUNT(T2.total_hours) DESC LIMIT 1</sql>
SELECT DISTINCT T1.name FROM ( SELECT DISTINCT T2.model_year, SUM(T2.total_hours) AS total FROM Vehicles AS T1 INNER JOIN Renting_history AS T2 ON T2.vehicle_id = T1.vehicles_id WHERE T1.name LIKE '%Model %' ORDER BY SUM(T2.total_hours) DESC LIMIT 1</sql>
SELECT DISTINCT T1.name FROM Renting_history AS T1 INNER JOIN Vehicles AS T2 ON T1.vehicle_id = T2.ID ORDER BY SUM(T2.total_hours) DESC</sql>
SELECT DISTINCT T2.name FROM Renting_history AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.id WHERE T2.name IS NOT NULL GROUP BY T1.customer_id ORDER BY COUNT(T1.customer_id) DESC LIMIT 1</sql>
SELECT DISTINCT T1.name FROM Renting_history AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.id ORDER BY T1.total_hours DESC LIMIT 1</sql>
SELECT DISTINCT T1.name, T2.model_year FROM Vehicles AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.vehicle_id WHERE T2.total_hours > 30 ORDER BY T1.ID</sql>
SELECT DISTINCT T1.name, T2.model_year FROM Renting_history AS T1 INNER JOIN Vehicles AS T2 ON T1.vehicle_id = T2.id WHERE T1.total_hours > ( SELECT MAX(T2.total_hours) FROM Rental_history AS T3 INNER JOIN Vehicles AS T4 ON T1.customer_id = T4.id WHERE T3.model
SELECT AVG(T2.City), T2.Highway FROM vehicles AS T1 INNER JOIN rental_history AS T2 ON T1.vehicle_id = T2.ID WHERE T2.model_year BETWEEN 1976 AND 2014 ORDER BY T2.Combined_fuel_economy_rate DESC LIMIT 3</sql>
SELECT AVG(T2.fuel_economy_rate), T2.Highway_fuel_economy_rate FROM cars AS T1 INNER JOIN vehicles AS T2 ON T1.vehicles_id = T2.vehicles_id WHERE T1.type IN ('SUV', 'PHEV') GROUP BY t1.model_year, t2.FUEL_ECONOMY_RATE ORDER BY SUM
SELECT AVG(T2.amount), T3.`event_type_description` FROM `addresses` AS T1 INNER JOIN Ref_Event_Types AS T2 ON T1.address_id = T2.event_type_code AND T2.`event_type_description` = 'Total amount of student loans received' GROUP BY T3, T1 ORDER BY T2.number DESC LIMIT 1</sql>
SELECT AVG(T2.amount) FROM Addresses AS T1 INNER JOIN Transcripts AS T2 ON T1.address_id = T2.student_id WHERE T1.status = 'LOAN' AND T2.type_code = 'detention_type_c'</sql>
SELECT DISTINCT T1.biographical_data, T1.student_details FROM Ref_Events AS T1 INNER JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T1.detention_type_c IN ( SELECT T2.detention_type_c FROM ( SELECT DISTINCT T1.`address_id`, SUM(T3.address_details) AS sum FROM Behaviour_Monitoring
SELECT DISTINCT T2.student_details, T1.`student_id`, T2.biographical_data FROM Behaviour_Monitoring AS T1 INNER JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T1.behaviour_monitoring_type = 'T3' AND strftime('%Y', T1.`transcript_details`) < strftime('%Y', T
SELECT DISTINCT T2.address_details, T1.`class_name`, T1.`attendance_pattern` FROM Ref_Address_Types AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.address_type_code IN ('net',) AND T1.address_type_description LIKE 'net%'</sql>
SELECT DISTINCT T1.address_details, T2.`detention_type_c` FROM Addresses AS T1 INNER JOIN Ref_Detention_Type AS T2 ON T1.address_id = T2.address_type_code WHERE strftime('%Y', T2.`detention_type_description`) LIKE '%data%' ORDER BY T1.address_details DESC LIMIT 1</sql>
SELECT DISTINCT T2.student_details FROM Behaviour_Monitoring AS T1 INNER JOIN Student AS T2 ON T1.student_id = T2.student_id WHERE T2.detention_type_c = '' OR T3.detention_type_c IS NULL ORDER BY T1.`address_id` DESC LIMIT 1</sql>
SELECT DISTINCT T2.student_details, T1.`address_type_description`, T1.address_type_code FROM Student AS T1 INNER JOIN Addresses AS T2 ON T1.student_id = T2.student_id WHERE T2.address_type IN ('Education', 'Business', 'Government') AND (T1.behaviour_monitoring_details LIKE '%NO_DISTRICT%' OR T
SELECT T3.address_details, T1.`event_type_code`, t1.`achievement_type_description`, SUM(T3.loan_amount) / COUNT(DISTINCT T1.student_id), SUM(DATE(TIMESTAMP)) AS year FROM Ref_Events AS T1 INNER JOIN Ref_Addresses AS T2 ON T1.student_id = T2.`student_id` GROUP BY T1.address_details
SELECT DISTINCT T2.achievement_type_description, SUM(CASE WHEN T1.`event_type_code` = 'A' THEN 1 ELSE NULL END) AS sum, T1.address_id FROM Ref_Event_Types AS T1 INNER JOIN Ref_Address_Types AS T2 ON T2.address_type_code = T1.address_type_description WHERE T2.address_type_c IN ('P', 'C
SELECT DISTINCT T2.teacher_id, T3.course_detail FROM Ref_Event_Types AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.event_type_code IN (T1.event_type_description) GROUP BY T2.teacher ORDER BY COUNT(T1.course_detail) DESC LIMIT 1</sql>
SELECT DISTINCT T2.teacher_name, T3.course_description FROM Student AS T1 INNER JOIN Addresses AS T2 ON T1.student_id = T2.student_id WHERE T2.course_type IN ( SELECT DISTINCT course_type FROM Ref_Event_Types GROUP BY course_type ORDER BY COUNT(T1.course_details) DESC LIMIT 1 ) GROUP BY T3.course_description ORDER BY COUNT(T
SELECT T1.description FROM Addresses AS T1 INNER JOIN Ref_Achievement_Type AS T2 ON T1.address_id = T2.achievement_type_code WHERE T2.event_type_description IN ( SELECT DISTINCT T3.description FROM Behaviour_Monitoring AS T3 INNER JOIN Ref_Address_Types AS T4 ON T2.address_id = T4.address_id WHERE T1.
SELECT T1.description FROM Behaviour_Monitoring AS T1 INNER JOIN Detention_Types AS T2 ON T1.behaviour_monitoring_id = T2.address_type_code WHERE T2.detention_type_c IN ( SELECT DISTINCT T3.description FROM Ref_Address_Types AS T3 INNER JOIN Detention_Type AS T4 ON T2.address_type_code = T4.address_
SELECT DISTINCT T2.address_type_description, T1.address_details FROM Addresses AS T1 INNER JOIN Ref_Address_Types AS T2 ON T1.address_id = T2.address_type_code WHERE T2.classification = 'Student' AND T2.`event_type_codes` IN ( SELECT DISTINCT `event_type_code`,  `achievement_type_description`,  `achievement_
SELECT DISTINCT T2.address_details, T1.`address_type_description` FROM Ref_Address_Types AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T2.student_id IN ( SELECT T3.student_id FROM Behaviour_Monitoring AS T4 INNER JOIN Student AS T5 ON T5.`student_id` = T1.student_id WHERE T
SELECT DISTINCT T2.address_details, T1.`student_details` FROM Behaviour_Monitoring AS T1 INNER JOIN Addresses AS T2 ON T1.behaviour_monitoring_id = T2.address_id WHERE T1.student_id IN ( SELECT DISTINCT `T3.student_id` FROM Ref_Event_Types AS T1 INNER JOIN Ref_Address_Types AS T2 ON T1.
SELECT DISTINCT T2.address_details, T1.`student_id`, T1.address_details FROM Addresses AS T1 INNER JOIN Ref_Address_Types AS T2 ON T1.address_id = T2.address_type_code INNER JOIN Behaviour_Monitoring AS T3 ON T2.behaviour_monitoring_id = T3.`transcript_id` WHERE T3.`student_details` = '
SELECT DISTINCT T2.biographical_data, T3.date_of_transcript FROM Behaviour_Monitoring AS T1 INNER JOIN Transcripts AS T2 ON T1.`transcript_id` = T2.`transcript_id` INNER JOIN Addresses AS T3 ON T2.address_id = T3.address_id WHERE T3.student_id IS NOT NULL ORDER BY T1.`date_of_transcript
SELECT DISTINCT T2.student_details, T1.`date_of_transcript`, T3.`transcript_details` FROM Behaviour_Monitoring AS T1 INNER JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id WHERE T1.student_details LIKE '%birthdate%'</sql>
SELECT SUM(T1.result), T2.description FROM Behaviour_Monitoring AS T1 INNER JOIN Ref_Detention_Type AS T2 ON T1.behaviour_monitoring_id = T2.detention_type_c GROUP BY T1.result ORDER BY T2.DETAILS DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T2.behaviour_monitoring_id), T1.address_details FROM Behaviour_Monitoring AS T1 INNER JOIN Ref_Address_Types AS T2 ON T1.address_type_code = T2.address_type_code ORDER BY COUNT(T1.behaviour_monitoring_id) DESC LIMIT 1</sql>
SELECT DISTINCT T2.student_details, T1.`event_type_description` FROM ( SELECT DISTINCT T2.student_id , COUNT(T2.detention_type_c) AS num , SUM(CASE WHEN T3.`status_code = 'completed' THEN T1.behaviour_monitoring_details END) AS detention_result FROM `events` AS T1 INNER JOIN behaviour_monitoring AS T2
SELECT DISTINCT T2.biographical_data, T2.details FROM Addresses AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.address_id = T2.student_id ORDER BY COUNT(T1.location) DESC LIMIT 3 GROUP BY T1.address_type_code ORDER BY SUM(CASE WHEN T2.status LIKE 'F' THEN t1.biographical_data END) INTERSECT SELECT
SELECT DISTINCT T2.student_details, T1.`address_type_description` FROM Addresses AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.address_id = T2.student_id GROUP BY T1.address_id ORDER BY COUNT(DISTINCT T2.`date_of_transcript`) DESC LIMIT 5</sql>
SELECT DISTINCT T2.student_details, T1.event_type_description FROM Behaviour_Monitoring AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id ORDER BY T1.`behaviour_monitoring_detail` DESC LIMIT 20</sql>
SELECT DISTINCT T2.student_details, T1.`event_date` FROM Student AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id WHERE T2.`events_submitted` = 'Yes' ORDER BY T2.date DESC LIMIT 1</sql>
SELECT DISTINCT T2.event_details, T1.`date_of_transcript`, T3.address_details FROM Behaviour_Monitoring AS T1 INNER JOIN Ref_Event_Types AS T2 ON T1.behaviour_monitoring_id = T2.event_type_code WHERE T2.event_type_description = 'events'</sql>
SELECT COUNT(DISTINCT T2.student_id) , T1.event_type_description FROM Addresses AS T1 INNER JOIN Ref_Event_Types AS T2 ON T1.address_id = T2.address_id ORDER BY T1.event_type_code DESC LIMIT 1</sql>
SELECT DISTINCT T2.event_type_description, T1.event_type_code FROM Addresses AS T1 INNER JOIN Ref_Events AS T2 ON T1.address_id = T2.student_id WHERE T1.event_details LIKE '%Detention%' GROUP BY T1.address_type_code ORDER BY COUNT(T1.address_type_description) DESC LIMIT 1</sql>
SELECT DISTINCT T2.achievement_type_description, T1.`event_type_code`, T2.T3 FROM Behaviour_Monitoring AS T1 INNER JOIN Addresses AS T2 ON T1.behaviour_monitoring_id = T2.address_id WHERE T2.address_details LIKE '%:%' ORDER BY T1.`event_type_code` DESC LIMIT 1</sql>
SELECT T1.achievement_type_description, T2.event_type_description FROM Addresses AS T1 INNER JOIN Ref_Achievement_Type AS T2 ON T1.address_id = T2.address_id WHERE T2.event_type_code IN ('problem', 'test') AND T1.address_details IN (T2.achievement_type_description, T2.event_type_description)</sql
SELECT COUNT(DISTINCT T2.student_id), strftime('%J', T2.transcript_details.date_of_transcript) AS date FROM Ref_Achievement_Type AS T1 INNER JOIN Ref_Detention_Type AS T2 ON T1.event_type_code = T2.detention_type_c WHERE T2.student_id IN ( SELECT DISTINCT T1.student_id FROM Be
SELECT COUNT(DISTINCT T2.teacher_id), SUM(CASE WHEN T3.`achievement_type_description` = 'WINNER' THEN 1 ELSE 0 END) AS cnt FROM Behaviour_Monitoring AS T1 INNER JOIN Addresses AS T2 ON T1.behaviour_monitoring_id = T2.address_id WHERE T1.transcript_details != '' GROUP BY T2.teacher
SELECT strftime('%J', T2.date_of_transcript) AS day, T1.event_type_description, T2.transcript_details FROM Student AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.`transcript_id` WHERE T2.date_of_transcript LIKE '%%T%'</sql>
SELECT DISTINCT T2.date, T3.transcript_details FROM Student AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.`transcript_id` WHERE T1.`course_type` = 'L10896' AND T1.`classroom_address_id` IN ( SELECT T1.address_id , NULL FROM Addresses INNER JOIN Behaviour_Monitoring
SELECT DISTINCT T2.achievement_type_code, T1.`event_type_description`, T3.`date_of_transcript` FROM Behaviour_Monitoring AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id INNER JOIN Ref_Detention_Type AS T3 ON T1.student_id = T3.detention_type_c WHERE T2.event_
SELECT DISTINCT T2.achievement_type_description, T1.`event_type_code`, T2.address_details FROM Addresses AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.address_id = T2.student_id WHERE T1.address_details BETWEEN '0' AND '94' GROUP BY T1.`event_type_code`, T1.achievement_type
SELECT DISTINCT T2.starttime, T2.endtime FROM Behaviour_Monitoring AS T1 INNER JOIN Ref_Event_Types AS T2 ON T1.behaviour_monitoring_id = T2.`event_type_code` WHERE T1.student_id = 'sj14937' GROUP BY T2.event_type_description ORDER BY T2.starttime DESC, T2.endtime
SELECT DISTINCT T2.starting_time, T1.ending_time FROM Student AS T1 INNER JOIN Addresses AS T2 ON T1.student_id = T2.student_id WHERE T2.address_type_code IN (REF_DETENTION) ORDER BY strftime('%H', T2.starting_time) , strftime('%H', T2.ending_time);</sql>
SELECT DISTINCT T2.student_details, T1.address_type FROM Addresses AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.address_id = T2.address_id WHERE T1.address_detail LIKE '%Suite%'</sql>
SELECT DISTINCT T2.student_details FROM Behaviour_Monitoring AS T1 INNER JOIN Addresses AS T2 ON T1.behaviour_monitoring_id = T2.address_id WHERE T1.location = 'suite'</sql>
SELECT DISTINCT T2.address_details FROM Behaviour_Monitoring AS T1 INNER JOIN Addresses AS T2 ON T1.student_id = T2.student_id WHERE T1.teacher_id IN ( SELECT T3._Teacher_ID , 0 AS classroom_groupnum FROM Ref_Event_Types AS T1 INNER JOIN addresses AS T2 ON T1.address_id = T2.address_id
SELECT DISTINCT T2.student_id, T1.teacher_details FROM Students AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id WHERE T1.school = 'staff' GROUP BY T1.Teacher_id ORDER BY T2.Student_Details</sql>
SELECT DISTINCT T2.course_id, T1.`student_id` FROM ( SELECT `T3`.course_id , COUNT(`T3`.`course_id`) AS num FROM Teachers AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T2.course_id ) AS T1, Ref_Event_Types AS `event_type_details`, T2 AS `Teach
SELECT DISTINCT T2.teacher_id, COUNT(T1.course_number) FROM Ref_Address_Types AS T1 INNER JOIN Addresses AS T2 ON T1.address_type_code = T2.address_type_code INNER JOIN Behaviour_Monitoring AS T3 ON T3.`transcript_id` = T1.teacher_id WHERE T3.`course_number` > ( SELECT MAX(T2.
SELECT DISTINCT T2.course_id FROM Behaviour_Monitoring AS T1 INNER JOIN Students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.transcript_details LIKE "%Course - 35% (W)%", COUNT(T1.T2.course_id), SUM(T2.course_detail__GMT__course_duration__s) DESC LIMIT 1</
SELECT DISTINCT T2.student_id, COUNT(T1.course) FROM Addresses AS T1 INNER JOIN Ref_Address_Types AS T2 ON T1.address_id = T2.address_type_code GROUP BY T1.address_id ORDER BY SUM(T1.`course`) DESC LIMIT 1</sql>
SELECT DISTINCT T1.student_id, T3.course_name AS course , T4.student_details FROM Students AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id INNER JOIN Addresses AS T3 ON T2.address_id = T3.address_id WHERE T3.course_name LIKE 'Course%' ORDER BY COUNT(T1.student_
SELECT DISTINCT T1.student_id, T3.`course_details` FROM Transcripts AS T1 INNER JOIN Addresses AS T2 ON T1.transcript_id = T2.`address_id` WHERE T2.STUDENT_ID IN ( SELECT T1.student_id ,  T4.course_details FROM Student AS T1 INNER JOIN Detention_type AS T2 ON T1.student_id = T2.T
SELECT DISTINCT T2.address_type_description, T1.`event_type_code` FROM Addresses AS T1 INNER JOIN Ref_Detention_Type AS T2 ON T1.address_id = T2.address_id ORDER BY COUNT(T2.detention_type_c) LIMIT 0</sql>
SELECT DISTINCT T2.event_type_description, T1.`address_type_code` FROM Behaviour_Monitoring AS T1 INNER JOIN Addresses AS T2 ON T1.student_id = T2.student_id ORDER BY T1.behaviour_monitoring_details LIMIT 3</sql>
SELECT DISTINCT T2.student_details, T1.`address_details`, T1.transcript_details FROM Student AS T1 INNER JOIN Addresses AS T2 ON T1.student_id = T2.student_id WHERE `average()` = ( SELECT AVG(T1.`behaviour_monitoring_details`) / COUNT(`T1.student_id`) )</sql>
SELECT DISTINCT T2.student_details, T1.bio_data AS `BiographyData`, T1.student_details FROM Student_Details AS T1 INNER JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T1.balance > 40 AND T1.`T1.student_type` IN ('LL', 'MLA')</sql>
SELECT MAX(date_of_transcript) AS str FROM Behaviour_Monitoring WHERE transcripts.student_id = '27893' GROUP BY MIN(TRANSCRIPT__DATE_OF_LOAN) ORDER BY date_of_transcript DESC LIMIT 1</sql>
SELECT MAX(T1.date_of_loan), T2.`event_type_description`, T2.`achievement_type_code` FROM Behaviour_Monitoring AS T1 INNER JOIN Addresses AS T2 ON T1.behaviour_monitoring_id = T2.address_id WHERE T1.student_id = 'RACHEL' ORDER BY T2.`date_of_loan` DESC LIMIT 
SELECT DISTINCT T2.student_details, T1.`address_id` FROM Ref_Event_Types AS T1 INNER JOIN Addresses AS T2 ON T1.behaviour_monitoring_id = T2.address_id WHERE T1.event_type_description = 'Loan' AND (T2.student_details != '') LIMIT 1</sql>
SELECT DISTINCT T2.student_details, T1.`address_id` FROM ( SELECT DISTINCT `T3`.address_details, T1.student_details, T1.`address_type_description`, MAX(T1.`student_id`) AS student_id FROM Addresses AS T1 INNER JOIN students AS T2 ON T1.`address_id` = T2.student_id WHERE T1.`address_details` IS NULL GROUP BY
SELECT strftime('%J', T2.date_of_transcript), T3.student_details FROM Transcripts AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.transcript_id = T2.behaviour_monitoring_id INNER JOIN Addresses AS T3 ON T1.student_id = T3.student_id WHERE strftime('%J', T2.date_of_
SELECT MAX(DATE) FROM Behaviour_Monitoring WHERE student_id IN ( SELECT T1.student_id FROM Students AS T1 INNER JOIN Transcripts AS T2 ON T1.`student_id` = T2.Student_id WHERE T2.T3 IS NULL ORDER BY SUM(T1.`payments`) DESC LIMIT 1)</sql>
SELECT DISTINCT T2.address_details FROM Behaviour_Monitoring AS T1 INNER JOIN Addresses AS T2 ON T1.student_id = T2.student_id WHERE T1.transcript_id IN ( SELECT MAX(transcript_id) FROM Transcripts ORDER BY date_of_transcript DESC LIMIT 1 )</sql>
SELECT DISTINCT T2.student_details, T1.date_of_transcript FROM Student AS T1 INNER JOIN Transcripts AS T2 ON T1.student_id = T2.`transcript_id` ORDER BY T1.date_of_transcript DESC LIMIT 1</sql>
SELECT DISTINCT T2.student_id, SUM(T1.`total_loan`) AS `Amount`, T2.student_details FROM Student AS T1 INNER JOIN Debt_Aggreement AS T2 ON T1.student_id = T2.student_id WHERE T1.name LIKE '%Chang%' GROUP BY T2.student_id ORDER BY SUM(T2.balance) DESC LIMIT 3</sql>
SELECT DISTINCT T2.student_id , SUM(T1.`total`) FROM Addresses AS T1 INNER JOIN Ref_Address_Types AS T2 ON T1.address_id = T2.address_type_code WHERE T1.event_type_description IN ('Educational Achievement', 'Behaviour Monitoring') GROUP BY T1.`student_id`</sql>
SELECT DISTINCT T2.student_id, T1.`course_details`, COUNT(T1.course_name) FROM Behaviour_Monitoring AS T1 INNER JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id WHERE T2.student_id LIKE '%%%' GROUP BY T1.student_id, T2.course_name ORDER BY COUNT(T2.course_details) DESC
SELECT DISTINCT T2.student_id , T1.`student_details`, COUNT(T1.course) FROM Student AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT DISTINCT T1.course, SUM(CASE WHEN T2.subjects LIKE 'COURSE%' THEN 1 ELSE 
SELECT COUNT(DISTINCT T2.student_id) FROM Behaviour_Monitoring AS T1 INNER JOIN Detention AS T2 ON T1.behaviour_monitoring_id = T2.detention_type_c WHERE T1.event_type_description LIKE '%detention%' GROUP BY T2.student_id ORDER BY COUNT(DISTINCT T1.T1.student_id) DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T2.student_id) FROM Behaviour_Monitoring AS T1 INNER JOIN Student AS T2 ON T1.student_id = T2.student_id WHERE T1.detention_type IN ('A') AND T1.behaviour_monitoring_details IS 'No detentions' GROUP BY T1.student_id ORDER BY COUNT(DISTINCT T2.student_id) DESC LIMIT
SELECT DISTINCT T2.address_type_description, T1.address_details FROM Addresses AS T1 INNER JOIN Ref_Address_Types AS T2 ON T1.address_id = T2.address_id ORDER BY COUNT(T1.address_type_code) DESC LIMIT 1</sql>
SELECT DISTINCT T2.address_type_description, T1.address_type_code FROM Addresses AS T1 INNER JOIN Ref_Address_Types AS T2 ON T1.address_id = T2.address_id ORDER BY COUNT(T1.address_type_description) DESC LIMIT 1</sql>
SELECT DISTINCT T2.student_details FROM Behaviour_Monitoring AS T1 INNER JOIN Addresses AS T2 ON T1.behaviour_monitoring_id = T2.address_id WHERE T1.detention_type_c IS NULL AND T1.transcript_id IS NOT IN ( SELECT DISTINCT `transcript_id` FROM Student)</sql>
SELECT DISTINCT T2.student_details FROM Behaviour_Monitoring AS T1 INNER JOIN Addresses AS T2 ON T1.behaviour_monitoring_id = T2.address_id WHERE T1.events IS NULL OR T1.event_type_description IN ('Detention', 'Participation')</sql>
SELECT DISTINCT T1.address_details FROM Addresses AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.address_id = T2.student_id WHERE strftime('%H:%M', T1.`start_time`) IN (T2.student_details) GROUP BY T1.address_details ORDER BY strftime('%H:%M')</sql>
SELECT strftime('%J', T1.transcripts.date) + 'T' AS date FROM Behaviour_Monitoring AS T1 INNER JOIN Addresses AS T2 ON T2.address_id = T1.address_id GROUP BY T1.student_id ORDER BY COUNT(T1.transcript_details) DESC LIMIT 1</sql>
SELECT CAST(strftime('%J', T2.date_of_transcript) - strftime('%Y', T1.date_of_transcript)) AS date, COUNT(`detention_type_c`) FROM Transcripts AS T1 INNER JOIN Addresses AS T2 ON T1.TRANSCRIPT_ID = T2.address_id GROUP BY CAST(strftime('%J', T2.date_of_
SELECT T1.date_of_detention, T2.`date_of_detention`, 'ALL' FROM Ref_Address_Types AS T1 INNER JOIN Detention_Types AS T2 ON T1.address_type_code = T2.achievement_type_code WHERE T1.address_type_description = 'all'</sql>
SELECT T1.Name FROM Author AS T1 INNER JOIN Orders AS T2 ON T1.IdAuthor = T2.idOrder WHERE T1.name = 'John Doe' ORDER BY T1.name</sql>
SELECT DISTINCT T2.name FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.idOrder = T2.IdAuthor WHERE T1.DateExped BETWEEN '2015-09-06' AND '2015-12-31' ORDER BY T1.dateOrder DESC</sql>
SELECT DISTINCT T2.Name, T3.Address FROM Orders AS T1 INNER JOIN Clients AS T2 ON T1.IdClient = T2.Id AND T1.Date < '2020-06' WHERE T3.NumCC = 9</sql>
SELECT DISTINCT T2.Name, T3.Address FROM Orders AS T1 INNER JOIN Client AS T2 ON T1.IdOrder = T2.Id ORDER BY T1.numCC, T1.numCC DESC LIMIT 2</sql>
SELECT DISTINCT T1.title, T2.ISBN, T3.purchaseprice FROM Author AS T1 INNER JOIN Books_Order AS T2 ON T1.Author = T2.IdAuthor INNER JOIN Orders AS T3 ON T1.IdClient = T3.idClient ORDER BY T1.Title LIMIT 1</sql>
SELECT DISTINCT T1.title, T2.ISBN, T3.Price FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.IdOrder = T2.idAuthor WHERE T1.DateExped BETWEEN '2017-10-18 09:55' AND '2019-06-03 09:04'</sql>
SELECT COUNT(*) FROM Author AS T1 INNER JOIN Orders AS T2 ON T1.Author = T2.IdOrder WHERE T1.Name LIKE '%book%' AND T2.NumCC > 30 ORDER BY T2.Date DESC LIMIT 1</sql>
SELECT COUNT(*) FROM Orders WHERE OrderType = 'PurchasePrice' GROUP BY ID ORDER BY COUNT(OrderID) DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T1.Author) FROM Author AS T1 INNER JOIN Orders AS T2 ON T1.idOrder = T2.IdOrder WHERE T2.DateEXPED > '2021-06' AND T1.Name = 'Abram Poulton'</sql>
SELECT COUNT(DISTINCT T1.Author) FROM Author AS T1 INNER JOIN Orders AS T2 ON T1.idOrder = T2.IdOrder WHERE T2.DateOrder BETWEEN '2013-11-01' AND '2014-56'</sql>
SELECT COUNT(IdClient) FROM Orders WHERE OrderDate IS NOT NULL GROUP BY Date ORDER BY COUNT(Name) DESC LIMIT 1</sql>
SELECT COUNT(idClient) FROM Orders WHERE Name = 'order'</sql>
SELECT DISTINCT T1.Name, T2.Address FROM Orders AS T1 INNER JOIN Client AS T2 ON T1.IdOrder = T2.Id ORDER BY T2.name</sql>
SELECT DISTINCT T1.Name, T2.Address FROM Orders AS T1 INNER JOIN Client AS T2 ON T1.IdClient = T2.Id ORDER BY T1.NumCC INTERSECT SELECT T1.Name, T2.Address FROM Orders AS T1 INNER JOIN Client AS T2 ON T1.IdClient = T2.Id ORDER BY T1.NumCC ASC</sql>
SELECT DISTINCT T1.title, T2.name FROM Books AS T1 INNER JOIN Author AS T2 ON T1.Author = T2.id ORDER BY T1.ISBN DESC LIMIT 5</sql>
SELECT DISTINCT T2.name FROM Orders AS T1 INNER JOIN Author_Book AS T2 ON T1.IdOrder = T2.idAuthor WHERE T1.Name = 'Fiction Title' AND T1.PurchasePrice <= 0 AND T1.SalePrice > 36 ORDER BY T1.numCC DESC LIMIT 2</sql>
SELECT DISTINCT T2.idclient, T1.name FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.IdOrder = T2.Id ORDER BY T1.DateORDER DESC LIMIT 1</sql>
SELECT DISTINCT T1.idOrder, T2.name FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.IdOrder = T2.idAuthor ORDER BY T2.name DESC LIMIT 1</sql>
SELECT T1.Name, SUM(T2.amount) FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.IdOrder = T2.idAuthor WHERE T2.Name = 'B' GROUP BY T1.author</sql>
SELECT DISTINCT T2.name , SUM(T1.PurchasePrice + SUM(T1.SalePrice)) AS total FROM Orders AS T1 INNER JOIN Author_Book AS T2 ON T1.idOrder = T2.Author WHERE T1.title IN ('Shopify, 5-Day Coupon Code', 'Woocommerce') GROUP BY T1.author ORDER BY T1.numCC</sql>
SELECT DISTINCT T1.title, SUM(T2.amount), T2.ISBN FROM Books AS T1 INNER JOIN Orders AS T2 ON T1.idOrder = T2.IdClient WHERE T1.ISBN = 'ibnb' GROUP BY T1.title ORDER BY T1.ISBN DESC LIMIT 3</sql>
SELECT COUNT(`Title`) AS num , SUM(T2.PurchasePrice - T1.`SalePrice`) FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.IdClient = T2.idAuthor WHERE T1.Title LIKE '%Invoice%' GROUP BY T1.Title ORDER BY COUNT(`Title`) DESC LIMIT 1</sql>
SELECT DISTINCT T1.title, SUM(T2.amount), T2.book_ISBN FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.idOrder = T2.Author WHERE T1.DateExped >= '2013-10' GROUP BY T2.book_ISBN ORDER BY SUM(T2.amount) DESC</sql>
SELECT T2.IsBNS, SUM(T1.amount) FROM Orders AS T1 INNER JOIN Books AS T2 ON T1.IdOrder = T2.ISBN GROUP BY T1.author ORDER BY T2.PurchasePrice / SUM(T1.amount) DESC LIMIT 1</sql>
SELECT T2.title FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.idOrder = T2.Id ORDER BY T2.numCC DESC LIMIT 1</sql>
SELECT T1.title FROM Orders AS T1 INNER JOIN Books_Order AS T2 ON T1.IdOrder = T2.id ORDER BY T1.numCC DESC LIMIT 1</sql>
SELECT T2.title, T1.PurchasePrice FROM Books AS T1 INNER JOIN Orders AS T2 ON T1.ISBN = T2.IdOrder WHERE T1.Amount > ( SELECT MAX(T2.amount) FROM Author ORDER BY T3.NumCC DESC LIMIT 1 ) AND T2.dateOrder IS NOT NULL GROUP BY T3.NumCC, T1.PurchasePrice ORDER BY COUNT(T1.ISBN) DESC LIMIT 1
SELECT T2.title, T1.PurchasePrice FROM Books AS T1 INNER JOIN Orders AS T2 ON T1.idOrder = T2.IdOrder ORDER BY SUM(T3.Amount) DESC LIMIT 1</sql>
SELECT DISTINCT T1.title FROM Orders AS T1 INNER JOIN Books_Order AS T2 ON T1.idorder = T2.Id ORDER BY T1.numCC DESC LIMIT 1</sql>
SELECT DISTINCT T1.title FROM Orders AS T1 INNER JOIN Books_Order AS T2 ON T1.IdOrder = T2.id ORDER BY T1.date ORDER BY SUM(CASE WHEN T2.DateExped > DATE - 4 THEN T2.amount END) DESC LIMIT 1</sql>
SELECT DISTINCT T1.Name FROM Orders AS T1 INNER JOIN Author_Book AS T2 ON T1.IdOrder = T2.Author WHERE T2.PurchasePrice > 0 AND T2.TotalInvoices >= T1.total ORDER BY T1.numCC LIMIT 1</sql>
SELECT DISTINCT T1.Name FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.IdOrder = T2.idAuthor WHERE T2.name IS NULL AND T2.Book IN ( SELECT DISTINCT T2.name FROM `Book` ORDER BY T2.author_id )</sql>
SELECT T1.Name, SUM(T2.numCC), COUNT(T3.IdOrder) FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.IdClient = T2.idAuthor WHERE T1.NumCC < 5</sql>
SELECT DISTINCT T1.Name FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.IdOrder = T2.idAuthor WHERE T2.name = 'Clients' AND COUNT(T1.DateExped) BETWEEN 1 AND 10 ORDER BY COUNT(T2.authorID) DESC LIMIT 4</sql>
SELECT T1.Name FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.idOrder = T2.Id ORDER BY T2.numCC DESC LIMIT 1</sql>
SELECT T1.Name FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.IdOrder = T2.Author WHERE T2.name = 'Mike' ORDER BY T2.idOrder DESC LIMIT 1</sql>
SELECT T2.Name, SUM(T1.amount) FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.IdOrder = T2.idAuthor WHERE T1.numCC BETWEEN 1 AND 48 ORDER BY T1.DateExped DESC LIMIT 2</sql>
SELECT DISTINCT T1.Name, SUM(T2.amount) FROM Books AS T1 INNER JOIN Orders AS T2 ON T1.IdOrder = T2.Id ORDER BY T2.`DateExped` DESC LIMIT 3 GROUP BY T2.numCC</sql>
SELECT T2.Name FROM Orders AS T1 INNER JOIN Books_Order AS T2 ON T1.IdOrder = T2.id ORDER BY T1.amount DESC LIMIT 1</sql>
SELECT T2.name FROM Orders AS T1 INNER JOIN Books_Order AS T2 ON T1.idorder = T2.Id ORDER BY T1.amount DESC LIMIT 1</sql>
SELECT DISTINCT T1.title FROM Books AS T1 INNER JOIN Orders AS T2 ON T1.idOrder = T2.IdOrder WHERE T2.NumCC = 0 GROUP BY T1.title ORDER BY COUNT(T2.ISBN) ASC LIMIT 1</sql>
SELECT DISTINCT title FROM Author AS T1 INNER JOIN Orders AS T2 ON T1.author = T2.IdOrder WHERE T2.DateExped IS NULL AND T2.amount IS 0 LIMIT 1</sql>
SELECT DISTINCT T2.Name FROM Orders AS T1 INNER JOIN Author_Book AS T2 ON T1.IdOrder = T2.Author WHERE T1.NumCC IS NULL GROUP BY T2.Name ORDER BY COUNT(T1.IDClient) ASC LIMIT 1</sql>
SELECT DISTINCT T2.Name FROM Orders AS T1 INNER JOIN Author_Book AS T2 ON T1.IdOrder = T2.Author WHERE T1.PurchasePrice IS NULL AND T1.SalePrice IS NULL AND NOT (T2.authorid IN (1,2,3))</sql>
SELECT T2.PurchasePrice, SUM(T1.amount) - SUM(T2.SalePrice) AS sum_sales FROM Books_Order AS T1 INNER JOIN Orders AS T2 ON T1.IdOrder = T2.idOrder GROUP BY T1.ISBN ORDER BY min(T2.sales) DESC LIMIT 1</sql>
SELECT MIN(T1.salePrice), MAX(T2.salesPrice) FROM Author AS T1 INNER JOIN Orders AS T2 ON T1.idAuthor = T2.IdClient WHERE T2.dateExped = ( SELECT MAX(T2.DateExped) - LOCALENGINE ) ORDER BY T2.name DESC LIMIT 2</sql>
SELECT AVG(PurchasePrice) , SUM(SalePrice) FROM Orders GROUP BY PurchasePrice / sale_price ORDER BY SUM(PurchasePrice) / SUM(sales_price) DESC LIMIT 1</sql>
SELECT AVG(PurchasePrice) , SUM(SalePrice) FROM Author WHERE ISBN = '0964521387' GROUP BY ISBN ORDER BY SUM(PurchasePrice) DESC, SUM(SalePrice) DESC</sql>
SELECT MAX(purchasePrice - salePrice) FROM Orders WHERE idOrder IS NOT NULL AND amount > 0 GROUP BY ID ORDER BY SUM(purchasePrice - salePrice) DESC LIMIT 1</sql>
SELECT MAX(SalePrice - PurchasePrice) FROM Orders WHERE OrderID = '6354189' AND DateExped < '2017-11-30 00:00:00.000'</sql>
SELECT T1.title FROM Books AS T1 INNER JOIN Orders AS T2 ON T1.IdOrder = T2.Id ORDER BY T2.Price DESC LIMIT 1</sql>
SELECT DISTINCT T1.title FROM Orders AS T1 INNER JOIN Author_Book AS T2 ON T1.IdOrder = T2.ISBN WHERE T2.PurchasePrice > ( SELECT SUM(T3.salePrice) AS sum FROM Author AS T3 INNER JOIN Books AS T4 ON T3.idAuthorA = T4.Id ORDER BY T2.PurchasePrice DESC LIMIT 1 )</sql>
SELECT T1.title FROM Books AS T1 INNER JOIN Orders AS T2 ON T1.IdOrder = T2.Id ORDER BY T2.PurchasePrice LIMIT 1</sql>
SELECT DISTINCT T1.title FROM Orders AS T1 INNER JOIN Author_Book AS T2 ON T1.IdOrder = T2.idAuthor WHERE T2.salePrice BETWEEN 0 AND ( SELECT MAX(PurchasePrice) FROM Books ORDER BY PurchasePrice DESC )</sql>
SELECT T1.title FROM Books AS T1 INNER JOIN Orders AS T2 ON T1.IdOrder = T2.Id ORDER BY T2.PurchasePrice DESC LIMIT 1</sql>
SELECT T1.title FROM Orders AS T1 INNER JOIN Books AS T2 ON T1.idOrder = T2.Id ORDER BY T1.PurchasePrice DESC LIMIT 1</sql>
SELECT CAST(SUM(T2.PurchasePrice * 100 + T2.SalePrice AS REAL) / COUNT(T1.author)) FROM Author AS T1 INNER JOIN Order AS T2 ON T1.Author = T2.IdOrder WHERE T1.Name = 'George Orwell' GROUP BY T1.ISBN ORDER BY SUM(CASE WHEN T1.PurchasePrice > 0 THEN CAST(T1.Purchase
SELECT CAST(SUM(T2.PurchasePrice / T1.SalesPrice AS REAL) * 100 AS float) FROM Author_Book AS T1 INNER JOIN Books AS T2 ON T1.ISBN = T2.ISBN WHERE T1.Name = 'George Orwell'</sql>
SELECT T2.salePrice FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.IdOrder = T2.Author WHERE T1.Name = 'Plato' AND T2.name = 'Lexicon'</sql>
SELECT T2.salePrice FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.IdOrder = T2.idAuthor WHERE T1.Name = 'PLATO'</sql>
SELECT T1.title FROM Author AS T1 INNER JOIN Book AS T2 ON T1.author = T2.Author WHERE T2.PurchasePrice = ( SELECT MIN(T3.`price`) FROM Books_Order AS T3 INNER JOIN Orders AS T4 ON T3.ISBN = T4.IdOrder ORDER BY T3.title ) ORDER BY T1.numCC DESC LIMIT 1</sql>
SELECT T2.title FROM Books AS T1 INNER JOIN Orders AS T2 ON T1.IdOrder = T2.Id ORDER BY T2.PurchasePrice LIMIT 1</sql>
SELECT T2.title FROM Orders AS T1 INNER JOIN Books_Order AS T2 ON T1.idOrder = T2.Id ORDER BY T1.PurchasePrice DESC LIMIT 1</sql>
SELECT T2.title FROM Orders AS T1 INNER JOIN Books AS T2 ON T1.idOrder = T2.ISBN WHERE T1.PurchasePrice < ( SELECT SUM(T2.purchaseprice) FROM Author AS T3 INNER JOIN Orders AS T4 ON T1.IdOrders = T4.id ORDER BY T3.totalorder DESC LIMIT 1 )</sql>
SELECT T1.Name FROM Author AS T1 INNER JOIN Orders AS T2 ON T1.IdAuthor = T2.IdOrder WHERE T1.name = 'Pride And Prejudice' ORDER BY T2.DateExped DESC LIMIT 1</sql>
SELECT T2.Name FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.IdOrder = T2.Author WHERE T1.DateExped = '2015-04-30' AND T1.ISBN = '76930869689295861'</sql>
SELECT T1.title FROM Author AS T1 INNER JOIN Books AS T2 ON T1.idAuthor = T2.Id ORDER BY T1.name LIKE '%Plato%' GROUP BY T2.Title ORDER BY COUNT(T2.title) > 3</sql>
SELECT T2.title FROM Books AS T1 INNER JOIN Author AS T2 ON T1.ISBN = T2.ISBN WHERE T2.Name LIKE '%Plato%' ORDER BY T1.ID ORDER LIMIT 1</sql>
SELECT COUNT(DISTINCT T1.IdOrder) FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.idOrder = T2.Author WHERE T2.Name = 'Pride &amp; Prejudice' AND Title = 'Pride and Prejudice'</sql>
SELECT COUNT(DISTINCT T1.IdOrder) FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.idOrder = T2.Author WHERE T2.Name = 'Pride &amp; Prejudice'</sql>
SELECT DISTINCT T1.idOrder FROM Orders AS T1 INNER JOIN Book AS T2 ON T1.IdOrder = T2.ISBN WHERE T1.Title IN ( SELECT 'Pride And Prejudice', 'The Little Prince' FROM Author) GROUP BY T1.idOrder ORDER BY T1.title UNION ALL SELECT DISTINCT T3.idOrder,T1.Author FROM Orders AS T1 INNER JOIN Book AS T2 ON T1
SELECT id ORDER FROM Orders WHERE Title IN ('Pride &amp; Prejudice', 'The Little Prince') AND SUBSTR(T2.Title, 1, 3) IN ( SELECT id FROM Author_Book AS T1 INNER JOIN Orders AS T2 ON T1.ISBN = T2.IdOrder INNER JOIN Book AS T3 ON T2.Id ORDER BY T1.ISBN + strftime('%J', T2.DateExped
SELECT DISTINCT T1.title FROM Author_Book AS T1 INNER JOIN Orders AS T2 ON T1.author = T2.idOrder WHERE T1.ISBN IN ( SELECT DISTINCT T2.book.ISBN FROM Author ORDER BY T3.client_name, T2.customer_name , T4.first_name, T6.last_name , T8.numCC > 0 ) GROUP BY T1.title ORDER BY T
SELECT DISTINCT T1.isbn FROM Books AS T1 INNER JOIN Orders AS T2 ON T1.idOrder = T2.IdOrder WHERE T1.Name LIKE '%Peter%' AND T1.Name LIKE '%James%' ORDER BY T2.NumCC DESC LIMIT 3</sql>
SELECT T2.title FROM Orders AS T1 INNER JOIN Books_Order AS T2 ON T1.idOrder = T2.Id ORDER BY T1.Name NOT IN ( SELECT DISTINCT T2.Title FROM Orders AS T2 INNER JOIN Books AS T3 ON T1.idClient = T2.ID WHERE T2.client = 'Pete' AND T2.DateExped < '2020-07-24')
SELECT DISTINCT T1.title FROM Author AS T1 INNER JOIN Orders AS T2 ON T1.author = T2.IdOrder WHERE T1.name = 'Pete Doe' ORDER BY T2.DateExped DESC, T2.`date` DESC LIMIT 1</sql>
SELECT DISTINCT T2.Name FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.IdOrder = T2.Author WHERE T1.Title = 'Pride and Prejudice' AND T1.DateExped < DATE_TRUNC('month', 'orderdate')</sql>
SELECT DISTINCT T1.Name FROM Orders AS T1 INNER JOIN Author AS T2 ON T1.IdOrder = T2.idAuthor WHERE T2.name = 'Pride' AND T2.name = 'Prejudice' ORDER BY CASE WHEN T2.name IS NULL THEN NULL ELSE T2.fullName END</sql>
SELECT COUNT(DISTINCT T1.Book_ID) FROM "review" AS T1 INNER JOIN book AS T2 ON T1.Review_ID = T2.Book_ID ORDER BY SUM(T1.Rating) DESC LIMIT 1</sql>
SELECT DISTINCT T1.title FROM review AS T1 INNER JOIN book AS T2 ON T1.Review_ID = T2.Book_ID ORDER BY T2."Title" DESC</sql>
SELECT DISTINCT T1.title FROM review AS T1 INNER JOIN book AS T2 ON T1.Review_ID = T2.Book_ID ORDER BY T2.pages DESC</sql>
SELECT DISTINCT T2.type, T2.release FROM "books" AS T1 INNER JOIN "reviews" AS T2 ON T1.book_id = T2.Book_ID ORDER BY T1.title, T1.release DESC LIMIT 3</sql>
SELECT SUM(chapters), MIN(pages) FROM 'books' GROUP BY title ORDER BY MAX(T1.pages) DESC LIMIT 2</sql>
SELECT DISTINCT T1.title FROM book AS T1 INNER JOIN review AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Rating IS NULL LIMIT 1</sql>
SELECT SUM(T1.Rating) / COUNT(T2.Book_id) AS avg FROM "review" AS T1 INNER JOIN "book" AS T2 ON T1.Book_ID = T2.Book_ID WHERE T1.Book_ID IN ( SELECT T2.title , AVG(Rating) FROM review AS T1 INNER JOIN book AS T2 ON T1.Review_id = T2.Book_ID GROUP BY
SELECT DISTINCT T1.title, T2.rating FROM "books" AS T1 INNER JOIN "review" AS T2 ON T1.Book_ID = T2.Book_ID WHERE T1.type = 'fiction' GROUP BY T2.book ORDER BY SUM(T1.Rating) DESC LIMIT 1</sql>
SELECT DISTINCT T2.Rating FROM ( SELECT MAX(T1.pages), T1.Chapters AS num , T1.Book_ID FROM review AS T1 INNER JOIN `book` AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Pages DESC LIMIT 1 ) AS T3 WHERE T3.num = ( SELECT MAX(T3.num) FROM review AS T1 INNER JOIN `book`
SELECT SUM(IIF(T2.pages > 1 AND T2.Paperback = 'hardcover', 0, 1)) AS rank FROM review AS T1 INNER JOIN "book" AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Pages DESC LIMIT 1</sql>
SELECT T1.title FROM "review" AS T1 INNER JOIN "book" AS T2 ON T1.Review_ID = T2.Book_ID ORDER BY T2.Rating DESC LIMIT 1</sql>
SELECT AVG(T2.Rating) FROM "review" AS T1 INNER JOIN "book" AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.TYPE = 'novel' GROUP BY T2.Book_ID ORDER BY SUM(T2.Page - 35796084050344700) / COUNT(`book`) DESC LIMIT 1</sql>
SELECT DISTINCT T2.type, COUNT(T1.Book_ID), T3.Num FROM book AS T1 INNER JOIN review AS T2 ON T1.Book_ID = T2.Book_ID INNER JOIN ( SELECT T4.type, SUM(T3.Num) AS total FROM book AS T5 WHERE T5.Type = 'Audio' GROUP BY T5.Title ) AS T3 ON T2.Book_ID = T3.
SELECT DISTINCT T2.type FROM review AS T1 INNER JOIN book AS T2 ON T1.Review_ID = T2.Book_ID ORDER BY COUNT(T2.Title) DESC LIMIT 1</sql>
SELECT DISTINCT T2.type FROM "books" AS T1 INNER JOIN `review` AS T2 ON T1.Book_ID = T2.Book_ID GROUP BY T2.book, COUNT(T1.ISBN) ORDER BY SUM(t2.Rating) >= 3 DESC LIMIT 1</sql>
SELECT DISTINCT T1.title FROM "review" AS T1 INNER JOIN 'book' AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T1.Rating DESC LIMIT 1</sql>
SELECT DISTINCT T1.title, T2.Audio FROM review AS T1 INNER JOIN book AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T1.Rating DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T1.Book_ID) FROM "review" AS T1 INNER JOIN book AS T2 ON T1.Review_ID = T2.Book_ID WHERE T1.Rating IS NULL AND T2.Type != 'audio'</sql>
SELECT DISTINCT T1.type FROM "books" AS T1 INNER JOIN `review` AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Rating IS NULL GROUP BY T1.type ORDER BY COUNT(DISTINCT T2.Chapter) - SUM(CASE WHEN DISTINCT T2.Page IS NULL THEN 0 END) BETWEEN 75 AND <65</sql>
SELECT COUNT(DISTINCT T2.type), DISTINCT T1.release FROM 'books' AS T1 INNER JOIN "review" AS T2 ON T1.Book_ID = T2.Book_ID GROUP BY T2.title ORDER BY T2.type</sql>
SELECT DISTINCT T1.title, T2.type FROM "review" AS T1 INNER JOIN book AS T2 ON T1.Book_ID = T2.Book_ID WHERE T1.Rating IS NULL ORDER BY T2.`title`</sql>
SELECT COUNT(DISTINCT T1.Customer_ID) FROM "customer" AS T1 INNER JOIN branch AS T2 ON T1.Customer_ID = T2.Branch_ID GROUP BY T2.Location_of_office ORDER BY COUNT(DISTINCT T2.Customer_ID) DESC LIMIT 3</sql>
SELECT COUNT(T1.Customer_ID) FROM `customer_order` AS T1 INNER JOIN customer AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Name = 'customer'</sql>
SELECT DISTINCT T1.Name FROM customer AS T1 INNER JOIN branch AS T2 ON T1.Customer_ID = T2.Branch_ID ORDER BY T2.Level_of_Membership DESC LIMIT 1</sql>
SELECT DISTINCT T2.Name FROM "customer" AS T1 INNER JOIN `branch` AS T2 ON T1.Customer_ID = T2.Branch_ID WHERE T1.Level_of_Membership BETWEEN 50 AND 70 ORDER BY T1.`Level_of_Membership` DESC</sql>
SELECT DISTINCT T2.Nationality, SUM(T3.CardCredit) AS total FROM `customer` AS T1 INNER JOIN `branch` AS T2 ON T1.Branch_ID = T2.Branch_ID GROUP BY T1.Name ORDER BY T1.Name, T2.Nationality DESC LIMIT 1</sql>
SELECT DISTINCT T2.Nationality, SUM(T3.`Level_of_Membership`) AS Total FROM "customer" AS T1 INNER JOIN `branch` AS T2 ON T1.Customer_ID = T2.Branch_ID AND T2.Location_of_office = 'London' AS T3 ON T1.Branch_ID WHERE T2.Name = 'Financial Services' GROUP BY T2.Nationality,
SELECT DISTINCT T2.name FROM `customer` AS T1 INNER JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Nationality IN ('England', 'Australia') OR T1.Nationality IS NULL</sql>
SELECT DISTINCT T2.name FROM customer AS T1 INNER JOIN branch AS T2 ON T1.customer = T2.Branch_ID WHERE T1.Nationality = 'England' AND T1.Location = 'Australia'</sql>
SELECT AVG(T2.Card_Credit) FROM customer AS T1 INNER JOIN branch AS T2 ON T1.Customer_ID = T2.Branch_ID WHERE T1.Level_of_Membership > 1</sql>
SELECT SUM(DISTINCT CASE WHEN T2.Level_of_Membership > 1 THEN CAST(T2.Card_Credit AS REAL)) / COUNT(T1.Customer_ID) FROM "customer" AS T1 INNER JOIN customer_order AS T2 ON T1.Customer_ID = T2.Branch_ID ORDER BY T1.`Level_of_Membership` DESC LIMIT 1</sql>
SELECT T1.card_credit FROM `customer` AS T1 INNER JOIN 'branch' AS T2 ON T1.Customer_ID = T2.Branch_ID GROUP BY T2.branch.location ORDER BY COUNT(T1.card_credit) DESC LIMIT 1</sql>
SELECT DISTINCT T1.Name, SUM(T2.`Level_of_Membership`) AS sum FROM `customer` AS T1 INNER JOIN `branch` AS T2 ON T1.Branch_ID = T2.Branch_ID WHERE T1.Nationality = 'Italy' GROUP BY T2.Manager ORDER BY SUM(T2.`Level_of_Membership`) DESC LIMIT 1</sql>
SELECT DISTINCT T2.Nationality FROM 'customer' AS T1 INNER JOIN branch AS T2 ON T1.Customer_ID = T2.Branch_ID WHERE T1.Nationality LIKE '%%'</sql>
SELECT DISTINCT T2.Nationality, SUM(T1.num_of_customers) FROM `customer` AS T1 INNER JOIN branch AS T2 ON T1.Customer_ID = T2.Branch_ID GROUP BY T2.Country ORDER BY COUNT(T1.Nationality) DESC LIMIT 3</sql>
SELECT DISTINCT T2.Nationality FROM customer AS T1 INNER JOIN branch AS T2 ON T1.Customer_ID = T2.Branch_ID ORDER BY COUNT(T1.Name) DESC LIMIT 1</sql>
SELECT DISTINCT T2.Nationality FROM customer AS T1 INNER JOIN branch AS T2 ON T1.Customer_ID = T2.Branch_ID ORDER BY COUNT(T1.Name) DESC LIMIT 1</sql>
SELECT T1.nation, SUM(T2.Quantity) - SUM(T1.Card_Credit) AS Total FROM `customer` AS T1 INNER JOIN `branch` AS T2 ON T1.Customer_ID = T2.Branch_ID WHERE T2.Level_of_Membership &gt; 50 AND T2.Location_of_office LIKE '%#France%' GROUP BY T1.nation ORDER BY SUM(
SELECT T1.nation, SUM(T2.card_credit) FROM `customer` AS T1 INNER JOIN `branch` AS T2 ON T1.Branch_ID = T2.Branch_ID WHERE T1.Nation IN ('USA', 'Japan') GROUP BY T1.Nation ORDER BY SUM(T2.Card_Credit - ( SELECT AVG(Card_Credit) FROM `customer` AS T1 INNER JOIN
SELECT DISTINCT T1.name, T2.dish_name FROM ( SELECT 'customer', T2.name , 0 AS id UNION ALL SELECT T3.name, T2.dish_name FROM "customer" AS T1 INNER JOIN 'branch' AS T2 ON T1.Customer_ID = T2.Branch_ID ORDER BY T1.id DESC LIMIT 1) AS T1 INNER JOIN `customer_order` AS T2
SELECT DISTINCT T2.name , T3.dish_name FROM ( SELECT 'Customer', T1.customer_id AS cid, T2.name AS t3 FROM `order` WHERE `branch` = 'branch' AND level_of_membership = 9 ORDER BY t2.yearsopened DESC LIMIT 1 ) AS T1 INNER JOIN ( SELECT DISTINCT name , T2.dish_name FROM customer_order WHERE
SELECT DISTINCT T2.name FROM `customer_order` AS T1 INNER JOIN 'customer' AS T2 ON T1.Customer_ID = T2.Customer_ID ORDER BY T1.`Quantity` DESC LIMIT 1</sql>
SELECT DISTINCT T2.Name, T3.Dish_name FROM customer_order AS T1 INNER JOIN `branch` AS T2 ON T1.Branch_ID = T2.Branch_ID WHERE T1.Customer_ID IN ( SELECT DISTINCT T1.Name FROM customer ORDER BY T3.`Quantity` DESC LIMIT 1 )</sql>
SELECT DISTINCT T2.Name, SUM(T1.Quantity) FROM `customer_order` AS T1 INNER JOIN `customer` AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.Customer_ID ORDER BY T1.Level_of_Membership DESC</sql>
SELECT T1.name, SUM(T2.Quantity) FROM ( SELECT T1."Customer_ID", COUNT(DISTINCT T2.`Dish_Name`) AS sum , SUM(T1.quantity) AS total FROM `customer_order` WHERE `Branch_ID` = 95 GROUP BY T2.") AS T1 INNER JOIN 'customer' AS T2 ON T2."Customer_ID" = T1.Customer_ID ORDER BY T
SELECT DISTINCT T2.Name FROM "customer_order" AS T1 INNER JOIN 'customer' AS T2 ON T1.Customer_ID = T2.Customer_ID ORDER BY T1.`Quantity` > 1 LIMIT 1</sql>
SELECT DISTINCT T2.name FROM `customer_order` AS T1 INNER JOIN branch AS T2 ON T1.branch_id = T2.Branch_ID GROUP BY T2.Name ORDER BY SUM(T1.Quantity) > 1</sql>
SELECT DISTINCT T2.manager FROM ( SELECT DISTINCT T1.location_of_office AS 'LocationOfOffice', T3.branch_id, COUNT(T3.Dish_name) AS num FROM `branch` AS T1 INNER JOIN `customer` AS T2 ON T2.Branch_ID = T1.Branch_ID WHERE T2.Nationality = 'Japanese' GROUP BY T3.branch_id ORDER BY
SELECT T1.Name FROM "branch AS T1 INNER JOIN customer AS T2 ON T1.Branch_ID = T2.Branch_ID WHERE T1.Location = 'customer-office' ORDER BY T1.Years_opened DESC LIMIT 1</sql>
SELECT DISTINCT T1.name FROM "customer" AS T1 INNER JOIN `order" AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Status != 0 AND T2.Order_ID IS NULL</sql>
SELECT T2.name FROM "customer_order" AS T1 INNER JOIN `customer` AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Nationality != 'Afghan' ORDER BY T1.Branch_ID NOT IN ( SELECT Branch_ID FROM customer_order WHERE Customer_ID IS NULL )</sql>
SELECT COUNT(DISTINCT T2.Member_ID) FROM club AS T1 INNER JOIN member AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Name = 'exampleclub' GROUP BY COUNT(T2.Member_ID) ORDER BY COUNT(DISTINCT T1.Member_ID) DESC LIMIT 3</sql>
SELECT DISTINCT T2.Name FROM club AS T1 INNER JOIN member AS T2 ON T1.Club_ID = T2.Club_ID ORDER BY T1.Year_Join ASC</sql>
SELECT DISTINCT T2.Name, T3.Nationality FROM `club` AS T1 INNER JOIN `member` AS T2 ON T1.Club_ID = T2.Club_ID INNER JOIN club AS T3 ON T2.Club_ID = T3.Club_ID WHERE T2.Nationality = 'Federal Republic of Germany' AND T2.Name LIKE '%Bundesrepublik%'</sql>
SELECT DISTINCT T2.Name FROM club AS T1 INNER JOIN member AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Nationality != 'England'</sql>
SELECT DISTINCT T3.Name FROM club AS T1 INNER JOIN member AS T2 ON T1.Club_ID = T2.Member_ID WHERE T1.Year_Join IS NULL OR strftime('%J', T2.Age) BETWEEN 19 AND 20</sql>
SELECT T1.Name FROM club AS T1 INNER JOIN member AS T2 ON T1.Club_ID = T2.Club_ID ORDER BY T2.Years - 2096 LIMIT 1</sql>
SELECT DISTINCT T2.Nationality, COUNT(T1.Member_ID) FROM club AS T1 INNER JOIN member AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Team_Leader  = 'Japanese' GROUP BY T2.Nationality ORDER BY T2.Nationality ASC</sql>
SELECT DISTINCT T2.Nationality FROM 'club' AS T1 INNER JOIN member AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.Member_ID ORDER BY COUNT(T1.Name) DESC LIMIT 1</sql>
SELECT DISTINCT T2.Nationality FROM "club" AS T1 INNER JOIN member AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Overall_Ranking > 3 GROUP BY T2.`Member_ID` ORDER BY COUNT(DISTINCT T2.`Member_ID`) DESC LIMIT 2</sql>
SELECT DISTINCT T2.Name, T3.Club_ID FROM ( SELECT T1.club_leader AS T2, T3.Club_ID FROM club AS T1 INNER JOIN member AS T2 ON T1.Member_ID = T2.Member_ID WHERE T2.Nationality = 'Australia' AND T1.Club_Name IN ('Crown PUBLISHING CARLISLE') ORDER BY T
SELECT DISTINCT T2.Name FROM "club" AS T1 INNER JOIN 'club_leader' AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Overall_Ranking BETWEEN 100 AND 99 AND T2.Member_ID IN ( SELECT DISTINCT T2.member.Name FROM 'club_leader' AS T1 INNER JOIN 'club' AS T
SELECT DISTINCT T3.Name FROM club AS T1 INNER JOIN club_leader AS T2 ON T1.Club_ID = T2.Club_ID WHERE strftime('%Y', T1.Year_Join) < '2018'</sql>
SELECT DISTINCT T2.Club_Name FROM 'club' AS T1 INNER JOIN member AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Team_Leader = 'houston' AND T1.Nationality = 'american'</sql>
SELECT DISTINCT T2.Name FROM member AS T1 INNER JOIN club AS T2 ON T1.Member_ID = T2.Club_ID WHERE T2.IsClubLeader = 'F'</sql>
SELECT DISTINCT T3.Nationality FROM member AS T1 INNER JOIN club AS T2 ON T1.Member_ID = T2.Club_ID WHERE T1.Age BETWEEN 20 AND 18 AND T1.Nation IN ('France', 'Italy', 'Spain') ORDER BY T2.Overall_Ranking DESC LIMIT 3</sql>
SELECT AVG(T2.Year_Join) FROM club_leader AS T1 INNER JOIN member AS T2 ON T1.Club_ID = T2.Member_ID WHERE T1.club_name = 'Club1' GROUP BY t1.club_name ORDER BY SUM(t1.year_join) DESC LIMIT 1</sql>
SELECT DISTINCT T2.club_name FROM club AS T1 INNER JOIN `club` AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.team_leader LIKE '%state%' ORDER BY T1.club_name LIMIT 1</sql>
SELECT DISTINCT T2.Collection_Name FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID ORDER BY T2.Collection_Name</sql>
SELECT DISTINCT T2.Collection_Name FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Parent_Collection_ID = 6</sql>
SELECT T1.description FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.collection_name = 'Top collection'</sql>
SELECT DISTINCT T2.Collection_Description FROM Documents_in_Collections AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = 'Top collection'</sql>
SELECT T1.name FROM Documents AS T1 INNER JOIN Collection_Subsets AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Subset_ID WHERE T1.Name = 'Documents'</sql>
SELECT T1.Document_Subset_Name FROM Documents_in_Collections AS T1 INNER JOIN Subsets AS T2 ON T1.Collection_ID = T2.Collection_ID ORDER BY T2.Document_Subset_Name, T1.</sql>
SELECT T3.description FROM Documents_in_Collections AS T1 INNER JOIN collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = "Best for 2000" GROUP BY T2.Collection_Subset_Name ORDER BY COUNT(T2.collection_name) DESC LIMIT 1</sql>
SELECT T3.Name, T1.Description FROM Documents AS T1 INNER JOIN Collection_Subsets AS T2 ON T1.Document_Object_ID = T2.Collection_Subset_ID WHERE T2.Document_Subset_Details = 'Best for 2000'</sql>
SELECT T2.Document_Object_ID FROM Documents AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collecrtion_Subset_Details = 'Sales and Distribution'</sql>
SELECT T1.Object_ID FROM Documents AS T1 INNER JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T1.Name LIKE '%Object%' ORDER BY T1.Description LIMIT 1</sql>
SELECT DISTINCT T1.Parent_Document_Object_ID FROM Documents AS T1 INNER JOIN Collections AS T2 ON T1.Document_Object_ID = T2.Collection_ID ORDER BY T1.Name</sql>
SELECT T1.parent_collection_id FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.collection_name = 'Marlin' ORDER BY T2.Document_Object_ID DESC LIMIT 1</sql>
SELECT T1.owner FROM Documents_in_Collections AS T1 INNER JOIN Collection_Subsets AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Document_Subset_Name = 'Braeden Collection'</sql>
SELECT T1.owner FROM Documents_in_Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.collection_name = 'Braeden Collection'</sql>
SELECT DISTINCT T1.Owner FROM Documents AS T1 INNER JOIN Collections AS T2 ON T1.Document_Object_ID = T2.Collection_ID WHERE T2.Name = "Marlin" AND T2.Parent_Collection_Name = 'Catalog'</sql>
SELECT T1.owner FROM Documents AS T1 INNER JOIN Collection_Subsets AS T2 ON T1.Parent_Document_Object_ID = T2.Collection_Subset_ID WHERE T1.Name = 'Marlin' GROUP BY T1.Owner ORDER BY COUNT(T1.Prefers_Title = 'Marlin')</sql>
SELECT T1.Description FROM Documents AS T1 INNER JOIN Collections AS T2 ON T1.Parent_Document_Object_ID = T2.Collection_ID WHERE T1.Parent_Document_Object_ID = 3 ORDER BY T1.Document_Subset_Name</sql>
SELECT T1.description FROM Documents AS T1 INNER JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T2.Collections = ( SELECT DISTINCT T2.collection_name FROM documents AS T2 INNER JOIN collections AS T1 ON T2.parent_collection_id = T1.Collection_ID ORDER BY T2.collection_description DESC LIMIT 1 )</sql>
SELECT COUNT(DISTINCT T1.Owner) FROM Documents_in_Collections AS T1 INNER JOIN Collection_Subsets AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Document_Object_ID = 2389457</sql>
SELECT COUNT(DISTINCT T1.Owner) FROM Documents_in_Collections AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Parent_Collection_ID = T2.collection_id AND T1.Name = 'Marlin'</sql>
SELECT DISTINCT T2.Document_Object_ID FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID ORDER BY T1.Parent_Collection_ID IS NULL AND T1.Other_Details != 'other' LIMIT 1</sql>
SELECT DISTINCT T2.Document_Object_ID FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.parent_collection_id != '123456789' ORDER BY T1.docnum LIMIT 1</sql>
SELECT COUNT(DISTINCT T1.Parent_Document_Object_ID),  COUNT(T2.parent_document_id) FROM Documents AS T1 INNER JOIN Collections AS T2 ON T1.Collection_Subset_ID = T2.Collection_Subset_ID WHERE T2.parent_collection = 'parent' GROUP BY T2.Parent_Document_Object_ID ORDER BY COUNT(DISTINCT T2.parent_document_id
SELECT T1.Parent_Collection_ID , SUM(T2.Child_Document_Count) FROM Documents_in_Collections AS T1 INNER JOIN Collection_Subsets AS T2 ON T1.Collection_Subset_ID = T2.Collection_Subset_ID GROUP BY T1.parent_collection_id</sql>
SELECT DISTINCT T2.Collection_Name FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID ORDER BY T1.Collection_ID DESC LIMIT 1</sql>
SELECT DISTINCT T2.Collection_Name FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Parent_Collection_ID = 9</sql>
SELECT DISTINCT T2.Description FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collecrtion_Subset_Details = 'Best'</sql>
SELECT DISTINCT T2.Collection_Description FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Name = 'Best' AND T2.Description IN ('Winner', 'Runner-up', 'Nominee')</sql>
SELECT DISTINCT T2.Collection_Name FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = 'Nice' AND T2.Parent_Collection_ID IS NULL LIMIT 1</sql>
SELECT T1.parent_collection_name FROM Documents_in_Collections AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.collection_name = 'Nice' ORDER BY T2.parent_collection_name</sql>
SELECT DISTINCT T2.Collection_Name FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID ORDER BY T1.Other_Details,T2.Collections.Name</sql>
SELECT T1.Collection_Name FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID ORDER BY T2.Collections.Collection_ID DESC LIMIT 1</sql>
SELECT T1.Document_Object_ID FROM Documents AS T1 INNER JOIN Collection_Subsets AS T2 ON T1.Parent_Document_Object_ID = T2.Collection_Subset_ID ORDER BY T1.Description LIMIT 1</sql>
SELECT T1.Parent_Collection_ID FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Child_Details IN ( SELECT DISTINCT T1."Document_Object_ID", COUNT(DISTINCT T1)" ,"child_details" ) GROUP BY T2.Parent_Collection_ID ORDER BY COUNT(T1.") DESC LIMIT 1</sql
SELECT COUNT(Collection_Name) FROM Collections WHERE Collection_Subset_Name = 'Best' AND Collection_Description = 'child collection'</sql>
SELECT COUNT(T1.Collection_Name) FROM Documents AS T1 INNER JOIN Collections AS T2 ON T1.Document_Object_ID = T2.Collection_ID WHERE T1.Document_Subset_Name = 'Best' GROUP BY T2.Collection_Name ORDER BY T1.Count DESC LIMIT 1</sql>
SELECT T1.Document_Object_ID FROM Documents_in_Collections AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Parent_Collection_ID = 'Ransom' LIMIT 1</sql>
SELECT T1.Parent_Collection_ID FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = 'Ransom' ORDER BY T1.Document_Object_ID DESC LIMIT 1</sql>
SELECT T2.Collection_Subset_ID , strftime('%Y %m', T3.Date), strftime('%J', T1.Date) AS number FROM Documents_in_Collections AS T1 INNER JOIN Collection_Subsets AS T2 ON T1.Collection_Object_ID = T2.Collection_Subset_ID WHERE T2.Document_Name = 'Sample collection'</sql>
SELECT T1.Collection_Subset_ID , T2.Collection_Name AS Collection_Name, COUNT(T2.Document_Object_ID) FROM Documents_in_Collections AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID ORDER BY T2.COLLECTION_SUBSET_DESCRIPTION</sql>
SELECT DISTINCT T2.Document_Object_ID, SUM(T1.`Child` = 'true') FROM Documents_in_Collections AS T1 INNER JOIN Documents AS T2 ON T2.Collection_ID = T1.collection_id ORDER BY T1.parent_collection_id DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T2.Document_Object_ID) FROM Documents AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Parent_Document_Object_id IS NOT NULL GROUP BY T2.parent_collection_id ORDER BY COUNT(DISTINCT T2.Collection_Subset_details) DESC LIMIT 3</sql>
SELECT T1.Document_Object_ID, SUM(T2.Count) AS num FROM Documents_in_Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID GROUP BY T1.Document_Object_ID ORDER BY COUNT(T2.Document_Object_ID), SUM(T1.num) DESC LIMIT 1</sql>
SELECT T1.Collection_ID FROM Documents AS T1 INNER JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID ORDER BY COUNT(T2.Collection_Name) LIMIT 1</sql>
SELECT T3.Document_Object_ID, SUM(T1.numberOfDocs * 2) AS total FROM Documents_in_Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_id = T2.Collection_id WHERE T2.Document_object_id BETWEEN 2 AND 4 GROUP BY T2.Document_object_ID ORDER BY COUNT(T1.Document_Object_ID
SELECT DISTINCT T1.Collection_Subset_ID FROM Documents AS T1 INNER JOIN Collection_Subsets AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID WHERE T2.Document_Description IN ('doc', 'desc') GROUP BY T2.Document_Subset_Details ORDER BY COUNT(T1.Document_Object_ID) / 30 DESC LIMIT 1</sql>
SELECT T1.owner FROM Documents AS T1 INNER JOIN collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T2.collection_name = 'Braeden'</sql>
SELECT T1.owner FROM Documents AS T1 INNER JOIN Collection_Subsets AS T2 ON T1.Parent_Document_Object_ID = T2.Collection_Subset_ID WHERE T1.Owner = 'Braeden' AND T2.Owner IS NULL</sql>
SELECT T1.Name FROM Documents_in_Collections AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Parent_Collection_ID = 64 ORDER BY T2.Collecrtion_Subset_Details LIMIT 1</sql>
SELECT T1.Name FROM Documents AS T1 INNER JOIN Collection_Subsets AS T2 ON T1.Document_Object_ID = T2.Parent_Document_Object_ID WHERE T2.Collection_Name = 'Braeden' ORDER BY T2.Name</sql>
SELECT T1.Collection_Subset_Name , COUNT(DISTINCT T1.Parent_Collection_ID), SUM(DISTINCT T2.Document_Object_ID) FROM Documents_in_Collections AS T1 INNER JOIN Collection_Subsets AS T2 ON T1.Collection_ID = T2.Collection_ID GROUP BY T1.Collection_Subset_Name , T1.parent_collection_id ORDER BY T2.Number DESC LIMIT
SELECT T1.Collection_Subset_ID , T2.Name , COUNT(T3.Description) FROM Collection_Subsets AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_Subset_ID = T2.Collection_ID GROUP BY T1.Document_Subset_id, T2.Name ORDER BY T1.collection_subset_id,T2.name DESC LIMIT 3</sql>
SELECT T1.Name, T2.Description FROM Documents_in_Collections AS T1 INNER JOIN Documents AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID GROUP BY T1.Collection_id ORDER BY SUM(DISTINCT COUNT(T1.Document_Object_id)) DESC LIMIT 1</sql>
SELECT T1.Parent_Collection_ID, T2.Description FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID ORDER BY T1.Count DESC LIMIT 10</sql>
SELECT T3.Document_Object_ID FROM Collection_Subsets AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_Subset_ID = T2.Collection_ID WHERE T2.Collection_Name = 'Best 2000'</sql>
SELECT T3.Document_Object_ID FROM Collection_Subsets AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_Subset_ID = T2.Collection_ID WHERE T2.Collection_Name LIKE 'Best%20200%'</sql>
SELECT DISTINCT T1.Name, T2.Document_Subset_id FROM Documents AS T1 INNER JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID GROUP BY T1.ID ORDER BY t2.Document_Object_ID DESC</sql>
SELECT T2.Name, T1.Parent_Document_Object_ID FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID ORDER BY T1.collection_name </sql>
SELECT DISTINCT T2.Collection_Name FROM Documents AS T1 INNER JOIN Collections AS T2 ON T1.Document_Object_ID = T2.Collection_ID WHERE T2.Other_Details = 'Ransom' INTERSECT SELECT DISTINCT T2.collection_name FROM Collection AS T1 INNER JOIN Documents AS T2 ON T1.parent_collection_id = T2.parent_collection_id WHERE T2.
SELECT DISTINCT T2.Collection_Name FROM Documents AS T1 INNER JOIN Collections AS T2 ON T1.Document_Object_ID = T2.Collection_ID WHERE T2.T2.Owner = 'Ransom' AND T2.T2.Description = 'Wheat'</sql>
SELECT COUNT(DISTINCT T1.Collection_Name), T2.Document_Object_ID FROM Documents AS T1 INNER JOIN Collections AS T2 ON T1.Parent_Document_Object_ID = T2.Collection_ID GROUP BY T2.Collection_Name ORDER BY COUNT(DISTINCT T1.Document_Object_ID)</sql>
SELECT COUNT(DISTINCT T1.Collection_ID) FROM Documents_in_Collections AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Parent_Collection_ID IN ( SELECT DISTINCT T2.Parent_Collection_ID FROM Collection AS T3 INNER JOIN Documents_in_Collections AS T4 ON T3.parent_collection_id = T4.Collection_ID WHERE
SELECT COUNT(DISTINCT T1.Document_Object_ID) FROM Documents_in_Collections AS T1 INNER JOIN Collection_Subsets AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Document_Subset_Name = 'Best'</sql>
SELECT COUNT(DISTINCT T1.Document_Object_ID) FROM Documents_in_Collections AS T1 INNER JOIN collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = 'Best' GROUP BY T1.Collection_ID ORDER BY COUNT(DISTINCT T1.Document_Object_ID) DESC LIMIT 1</sql>
SELECT T2.Document_Object_ID FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = 'Best'</sql>
SELECT COUNT(DISTINCT T1.Document_Object_ID) FROM Documents_in_Collections AS T1 INNER JOIN collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.collection_name = 'Best' GROUP BY T1.Collection_ID ORDER BY COUNT(T2.Collection_Name) DESC LIMIT 1</sql>
SELECT DISTINCT T2.Collection_Name , T1.Collection_ID , COUNT(T3.Document_Object_ID) FROM Documents_in_Collections AS T1 INNER JOIN collections AS T2 ON T1.Collection_ID = T2.Collection_ID INNER JOIN documents AS T3 ON T3.parent_collection_id = T2.Parent_Collection_ID GROUP BY T1.Collection_Name ORDER BY SUM(T1.Count)
SELECT DISTINCT T2.Collection_Name , T1.Document_Object_ID AS Document_Id FROM Documents_in_Collections AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID ORDER BY COUNT(T2.Collection_Name) DESC LIMIT 1</sql>
SELECT T2.Document_Object_ID FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.`Document_Subset_Name` LIKE 'Best%' GROUP BY T2.Document_Object_ID ORDER BY T1.`Document_Subset_Details`' DESC LIMIT 2</sql>
SELECT T3.Collection_Subset_Name FROM Documents_in_Collections AS T1 INNER JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID INNER JOIN Documents_in_Collections AS T3 ON T2.Document_Object_ID = T3.Document_Object_ID WHERE T1.Other_Details = 'Best for 2000' AND T3.Collecrtion_Sub
SELECT T2.Collection_ID FROM Documents AS T1 INNER JOIN Collections AS T2 ON T1.Document_Object_ID = T2.Collection_ID WHERE T2.COLLECTION_NAME = 'Best but not in document subset' AND strftime('%Y', T1.TARGET_DEPT) != '2000'</sql>
SELECT T3.Collection_ID FROM Documents_in_Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.collection_name = 'Best' AND T1.document_object_id IN ( SELECT DISTINCT T1.Document_Object_ID FROM Documents_in_Collections AS T3 INNER JOIN Documents_subsets AS T4 ON T3.
SELECT T1.Document_Object_ID FROM Documents_in_Collections AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE strftime('%Y', T2.Date) LIKE '%Best%'</sql>
SELECT T3.Document_Object_ID FROM Collection_Subsets AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_Subset_ID = T2.Collection_ID WHERE T1.Collection_Name IN ('Best for 2000', 'Best') AND T2.PRIMARY KEY (T3.Document_Object_ID)</sql>
SELECT DISTINCT T2.Collection_Name FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.collection_name = 'Best'</sql>
SELECT DISTINCT T2.Collection_Name FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = 'Best' ORDER BY T3.Document_Object_ID DESC LIMIT 1</sql>
SELECT COUNT(T1.Collection_Name) FROM Documents AS T1 INNER JOIN Collections AS T2 ON T1.Document_Object_ID = T2.Collection_ID WHERE T1.Parent_Collection_Name = 'Best'</sql>
SELECT COUNT(DISTINCT T2.Collection_Name) FROM Documents_in_Collections AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.collection_name = 'Best' ORDER BY T1.collection_name LIMIT 1</sql>
SELECT DISTINCT T2.Collection_Name FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.collection_id = T2.collection_id WHERE T2.collection_name = 'Best' ORDER BY T3.parent_collection_id DESC LIMIT 1</sql>
SELECT DISTINCT T2.Collection_Name FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = 'Best' ORDER BY T3.Collection_Subset_Details</sql>
SELECT COUNT(DISTINCT T1.name), SUM(CASE WHEN T2.`language` = 'en' THEN 1 ELSE NULL END) AS total FROM ( SELECT DISTINCT T1.name AS T2, `songs_id`, `popularity` AS sum FROM songs WHERE `original_artist` = 'love' GROUP BY `title` ) AS T1 INNER JOIN performances AS T2 ON T1.participant_id = T
SELECT T1.name FROM "songs" AS T1 INNER JOIN participant_id AS T2 ON T1.songs_id = T2.id ORDER BY T2.popularity ASC LIMIT 1</sql>
SELECT DISTINCT T2.name, T3.language FROM "songs AS T1 INNER JOIN performances AS T2 ON T1.songs_id = T2.songs_id INNER JOIN participants AS T3 ON T1.participant_id = T3.id WHERE T3.popularity = 'high' ORDER BY T3.name LIMIT 5</sql>
SELECT SUM(vocal_sound_quality), AVG(T2.voice_sound_quality) FROM ( SELECT MAX(T1.voice_sound_quality), MIN(T1.voice_sound_quality) AS T1 , `songs`.id FROM performance_score AS T1 INNER JOIN songs AS T2 ON T1.participant_id = T2.id GROUP BY T2.name ORDER BY SUM(T1.voice_sound
SELECT DISTINCT T2.voice_sound_quality, T1.rhythmic_tempo, T2.stage_presence FROM songs AS T1 INNER JOIN performance_score AS T2 ON T1.id = T2.participant_id WHERE T1.name = 'freeway'</sql>
SELECT DISTINCT T2.name FROM "songs" AS T1 INNER JOIN participants AS T2 ON T1.id = T2.popularity WHERE T1.title != 'Love'</sql>
SELECT DISTINCT T1.name, T2.original_artist FROM `songs` AS T1 INNER JOIN performances AS T2 ON T1.id = T2.participant_id WHERE T2.language = 'english' AND T1.name = 'All the streets of love'</sql>
SELECT SUM(DISTINCT T1.stage_presence) FROM ( SELECT id, AVG(T2.voice_sound_quality) AS sum , SUBSTR(T1.name,'song_name__startswith="") AS str_title , MAX(T1.id) AS participant_id FROM "performance_score" AS T1 INNER JOIN songs AS T2 ON T1.songs_id = T2.id WHERE T2.
SELECT DISTINCT T2.name, T3.name FROM performance_score AS T1 INNER JOIN "participants" AS T2 ON T1.participant_id = T2.id WHERE T1.songs_id BETWEEN 1 AND COUNT(T1.songs_id) / 2 GROUP BY T2.name ORDER BY SUM(T2.popularity) > 1</sql>
SELECT id FROM performance_score ORDER BY COUNT(T2.participant_id), T1.name ASC LIMIT 1</sql>
SELECT T1.id, T2.name FROM performance_score AS T1 INNER JOIN `participants` AS T2 ON T1.participant_id = T2.id ORDER BY T1.score DESC LIMIT 5</sql>
SELECT DISTINCT T2.voice_sound_quality, T1.name, T1.original_artist FROM `performance_score` AS T1 INNER JOIN songs AS T2 ON T2.songs_id = T1.songs_id WHERE T1.language = 'english' AND T2.name = 'The Balkan Girls '</sql>
SELECT T1.name, T2.name FROM ( SELECT MAX(T1."id"), T2.name FROM `participants` AS T1 INNER JOIN songs AS T2 ON T1.id = T2.songs_id ORDER BY T1.`popularity` DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T1.participant_id), SUM(IIF('stage_presence' < 'high') > '7', 1, 0)) AS total , SUM(IIF('stage_presence' = 'high', '9', 1)) AS high FROM performances AS T1 INNER JOIN songs AS T2 ON T1.songs_id = T2.id WHERE T1.name = 'performances' GROUP BY
SELECT COUNT(DISTINCT T1.name), SUM(T2.popularity * 100 / T3.popularity) AS total FROM ( SELECT DISTINCT T2.language, T3.title FROM "songs" AS T1 INNER JOIN participants AS T2 ON T1.participant_id = T2.id INNER JOIN performances AS T3 ON T2.name = T3.singer WHERE T1.name !=
SELECT AVG(T2.rhythm_tempo), SUM(T1.`participant_id`) AS num FROM `songs` AS T1 INNER JOIN performance_score AS T2 ON T1.songs_id = T2.songs_id GROUP BY T2.language</sql>
SELECT T1.name FROM "participants" AS T1 INNER JOIN songs AS T2 ON T1.id = T2.songs_id WHERE T2.language IS NULL AND T2.`ENGLISH` IN ( SELECT distinct T1.`name` FROM participants AS T1 INNER JOIN songs AS T2 ON T1.id = T2.songs_id WHERE T2.lang LIKE 'english' AND T2.language != 'en
SELECT T1.name, T2.popularity FROM participant AS T1 INNER JOIN songs AS T2 ON T1.id = T2.songs_id WHERE T2.language = 'croatian' AND T2.voice_sound_quality = 'f390884676B6D5A2FBCC06' AND T2.english_translation = 'yelena-na-mik
SELECT DISTINCT T1.name FROM songs AS T1 INNER JOIN performance_score AS T2 ON T1.id = T2.participant_id WHERE T1.name LIKE 'is' ORDER BY T1.name LIMIT 1</sql>
SELECT DISTINCT T1.name FROM performances AS T1 INNER JOIN song AS T2 ON T1.id = T2.songs_id WHERE T1.voice_sound_quality BETWEEN 5 AND T2.rhythm_tempo DESC LIMIT 1</sql>
SELECT COUNT(city_code) FROM City WHERE city_name = 'Washington DC' GROUP BY city_name ORDER BY COUNT(city_code) DESC LIMIT 1</sql>
SELECT COUNT(*) FROM City WHERE city_name = 'New York City'</sql>
SELECT T3.state FROM City AS T1 INNER JOIN State AS T2 ON T1.city_code = T2.city_code WHERE T2.country = 'USA' AND T2.Latitude IS NULL LIMIT 1</sql>
SELECT T3.state FROM City AS T1 INNER JOIN State AS T2 ON T1.city_code = T2.city_code WHERE T2.country = 'USA' GROUP BY T3.state ORDER BY COUNT(T2.longitude) ASC LIMIT 1</sql>
SELECT COUNT(city_code) FROM City WHERE city_name IN ('Amsterdam','Berlin')</sql>
SELECT COUNT(city_code) FROM City WHERE state = 'united-states' GROUP BY city_code ORDER BY COUNT(city_code) DESC LIMIT 1</sql>
SELECT DISTINCT T1.city_name , T3.city_code FROM City AS T1 INNER JOIN State AS T2 ON T1.city_code = T2.city_code INNER JOIN Country AS T3 ON T1.country = T3.country WHERE T1.city_name = 'Los Angeles, CA'</sql>
SELECT DISTINCT T1.city_name , T3.state, T1.country FROM City AS T1 INNER JOIN direct_distance AS T2 ON T1.city_code = T2.city_code INNER JOIN state AS T3 ON T3.city_code = T2.city_code ORDER BY city_code</sql>
SELECT T3.latitude , T3.longitude FROM City AS T1 INNER JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T1.city_name = 'Baltimore' AND T1.state  =  'MD'</sql>
SELECT T3.longitude, T3.latitude FROM City AS T1 INNER JOIN direct_distance AS T2 ON T1.city_code = T2.city1_code INNER JOIN city AS T2 ON T2.city_code = T2.city_code WHERE T1.name = 'Baltimore'</sql>
SELECT DISTINCT T1.city_name FROM City AS T1 INNER JOIN state AS T2 ON T1.city_code = T2.state WHERE T2.country  = 'USA' GROUP BY T1.city_name ORDER BY T1.city_name LIMIT 1</sql>
SELECT DISTINCT T1.city_name FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code WHERE T1.state IN ('PA', 'NJ') ORDER BY T1.latitude LIMIT 1</sql>
SELECT COUNT(T1.city_code) FROM City AS T1 INNER JOIN Province AS T2 ON T1.city_name = T2.city_name WHERE T2.country = 'Canada'</sql>
SELECT COUNT(T1.city_code) FROM City AS T1 INNER JOIN Distance AS T2 ON T1.city_code = T2.city_code WHERE T2.country  = 'canada'</sql>
SELECT DISTINCT T1.city_name ORDER BY T3.longitude LIMIT 1</sql>
SELECT DISTINCT T1.city_name ORDER BY T2.latitude ASC LIMIT 1</sql>
SELECT DISTINCT T1.state , COUNT(T2.city_name) FROM State AS T1 INNER JOIN City AS T2 ON T1.state = T2.city_code WHERE T1.country = 'US' GROUP BY T1.state ORDER BY T1.country DESC LIMIT 1</sql>
SELECT DISTINCT T1.city_name, COUNT(DISTINCT T3.city_code) FROM City AS T1 INNER JOIN State AS T2 ON T1.city_code = T2.state_name GROUP BY T2.city_name ORDER BY SUM(T1.longitude + T1.latitude) / 60 + COUNT(DISTINCT T3.city_code) DESC LIMIT 3</sql>
SELECT T3.city_name , COUNT(DISTINCT T1.city_code) FROM City AS T1 INNER JOIN City AS T2 ON T1.city_code = T2.city_code GROUP BY T2.city_name ORDER BY DISTINCT T1.city_code LIMIT 1</sql>
SELECT DISTINCT T1.city_name, COUNT(DISTINCT T3.city_code) FROM City AS T1 INNER JOIN Country AS T2 ON T1.city_code = T2.country WHERE T2.country = 'US' AND T2.country != '' GROUP BY T1.city_code ORDER BY COUNT(T2.city_code) DESC LIMIT 1</sql>
SELECT DISTINCT T1.state FROM City AS T1 INNER JOIN State AS T2 ON T1.city_code = T2.city_code GROUP BY T1.state ORDER BY COUNT(T1.city_code) > 1</sql>
SELECT DISTINCT T1.city_name FROM City AS T1 INNER JOIN States AS T2 ON T1.city_code = T2.state WHERE T2.country IS NOT NULL GROUP BY city_name ORDER BY COUNT(T1.city_id) > 2 GROUP BY T2.city_name</sql>
SELECT DISTINCT T1.state FROM City AS T1 INNER JOIN State AS T2 ON T1.city_code = T2.state ORDER BY COUNT(T2.name) DESC LIMIT 1</sql>
SELECT DISTINCT T1.state FROM City AS T1 INNER JOIN State AS T2 ON T1.city_code = T2.state WHERE T2.country = 'us' GROUP BY T2.country ORDER BY COUNT(T1.city_code) DESC LIMIT 1</sql>
SELECT DISTINCT T1.country FROM City AS T1 INNER JOIN Country AS T2 ON T1.city_code = T2.city_code ORDER BY COUNT(T1.city_name) LIMIT 1</sql>
SELECT DISTINCT T1.country FROM City AS T1 INNER JOIN state AS T2 ON T1.city_code = T2.city_code ORDER BY COUNT(T1.city_name) LIMIT 1</sql>
SELECT T1.firstname, T1.lastname FROM Student AS T1 INNER JOIN City AS T2 ON T1.StuID = T2.city_code WHERE T2.state = 'MD'</sql>
SELECT DISTINCT T1.LName FROM Student AS T1 INNER JOIN City AS T2 ON T1.StuID = T2.city_code WHERE T2.country = 'US' ORDER BY T2.city_name</sql>
SELECT COUNT(T1.city_code) FROM City AS T1 INNER JOIN STUDENT AS T2 ON T1.city_code = T2.StuID WHERE T1.state = 'CN' AND T2.sex = 'F' INTERSECT SELECT T2.Lname, T2.towns, COUNT(T2.city_code) FROM City AS T1 INNER JOIN STUDENT AS T2 ON T1.city_
SELECT COUNT(T1.StuID) FROM City AS T1 INNER JOIN student AS T2 ON T1.city_code = T2.city_code WHERE T1.country = 'china' AND T1.state = 'rkkiang'</sql>
SELECT T3.Fname, T1.major FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code WHERE T2.state LIKE '%baltimore%' ORDER BY T2.StuID LIMIT 1</sql>
SELECT DISTINCT T1.LName, T3.Major FROM Student AS T1 INNER JOIN City AS T2 ON T1.StuID = T2.city_code INNER JOIN ( SELECT T2.city_name, MAX(T4.first) AS first FROM City AS T2 INNER JOIN direct_distance AS T3 ON T3.city1_code = T2.city_code WHERE T1.city_name = 'Balt
SELECT COUNT(*) , T1.city_name FROM City AS T1 INNER JOIN city_name AS T2 ON T1.city_code = T2.city_code GROUP BY T1.city_name ORDER BY COUNT(T2.city_name) DESC LIMIT 1</sql>
SELECT COUNT(T1.city_code) , T2.country FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.StuID WHERE T1.state = 'RU' GROUP BY T1.city_code ORDER BY COUNT(T2.country) DESC LIMIT 5</sql>
SELECT DISTINCT T1.city_name, SUM(T2.distance / COUNT(T3.StuID)) AS num FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code INNER JOIN Student AS T3 ON T1.StuID = T3.StuID WHERE T3.LName = 'Anaheim' GROUP BY T1.city_name ORDER BY SUM
SELECT SUM(COUNT(T1.city_code)) FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.StuID WHERE T1.city_name IN ('A', 'B') GROUP BY T1.city_name ORDER BY SUM(T1.city_code) DESC LIMIT 1</sql>
SELECT DISTINCT T1.state FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.StuID WHERE T2.Fname = 'David' ORDER BY COUNT(T1.city_name) DESC LIMIT 1</sql>
SELECT DISTINCT T1.state FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.StuID ORDER BY T2.LName, T2.Fname DESC LIMIT 1</sql>
SELECT DISTINCT T1.country FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.StuID ORDER BY COUNT(T1.city_name) DESC LIMIT 1</sql>
SELECT DISTINCT T1.country FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.StuID WHERE T2.sex != 'F' GROUP BY T1.city_name ORDER BY COUNT(T2.StuID) LIMIT 1</sql>
SELECT DISTINCT T1.city_name FROM City AS T1 INNER JOIN student AS T2 ON T1.city_code = T2.StuID WHERE T2.LName IS NOT NULL AND T2.Fname LIKE '%@%' ORDER BY COUNT(T1.city_name) > 3</sql>
SELECT DISTINCT T1.city_name FROM City AS T1 INNER JOIN student AS T2 ON T1.city_code = T2.StuID ORDER BY COUNT(T2.StuID) DESC LIMIT 3</sql>
SELECT DISTINCT T1.state FROM City AS T1 INNER JOIN State AS T2 ON T1.city_code = T2.city_code WHERE T2.countries = 'us' ORDER BY COUNT(T1.city_code) DESC LIMIT 5</sql>
SELECT DISTINCT T1.state FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.StuID WHERE T2.Age BETWEEN 6 AND 13 ORDER BY COUNT(T1.longitude) DESC LIMIT 5</sql>
SELECT StuID FROM Student WHERE city_name = 'United States of America' UNION SELECT DISTINCT StuID FROM City WHERE state != 'USA' AND country != 'USA' ORDER BY StuID LIMIT 1</sql>
SELECT DISTINCT StuID FROM Student WHERE city_name = 'USA' AND location != ''</sql>
SELECT DISTINCT T1.StuID FROM City AS T1 INNER JOIN student AS T2 ON T1.city_code = T2.city_code WHERE T1.state IN ('PA', 'WV') AND T2.Sex = 'F'</sql>
SELECT StuID FROM City WHERE city_name = 'PA' AND sex = 'female' LIMIT 1</sql>
SELECT DISTINCT T1.StuID FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T2.sex IN ('F', 'M') AND T1.country = 'USA'</sql>
SELECT T3.city_code FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.StuID WHERE T2.sex != 'F' AND T1.country != 'USA' ORDER BY T1.latitude DESC LIMIT 1</sql>
SELECT T3.distance FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T1.city_name = 'BAL' AND T1.city_name  = 'Chicago'</sql>
SELECT DISTINCT T1.distance FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T1.state  =  'bal' AND T1.cityname = 'chicago'</sql>
SELECT DISTINCT T1.distance FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T2.cityname = 'Boston' AND T2.city_code IN ( 'newark', 'new jersey')</sql>
SELECT T3.distance FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code INNER JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T1.city_name = 'Boston' AND T2.city1_code = 'newark'</sql>
SELECT AVG(T1.distance), MAX(T1.distance), MIN(T2.distance) FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city_code ORDER BY T2.`longitude`, T2.`latitude` DESC LIMIT 5</sql>
SELECT SUM(AVG(distance)) , MAX(distance), MIN(distance) FROM City WHERE city_name IN ('Los Angeles', 'San Francisco') GROUP BY city_code ORDER BY AVG(longitude) DESC LIMIT 1</sql>
SELECT DISTINCT T1.city_code FROM City AS T1 INNER JOIN CityDistance AS T2 ON T1.city_code = T2.city_code ORDER BY MAX(T1.distance) DESC LIMIT 2</sql>
SELECT DISTINCT T1.city_code FROM City AS T1 INNER JOIN ( SELECT MAX(T2.distance), T3.city_name FROM City AS T2 INNER JOIN Direct_distance AS T3 ON T1.city_code = T3.city_code WHERE T3.FOREIGN KEY(city_code) REFERENCES City(city_code)) AS T4 ORDER BY T4.city_name DESC LIMIT 1</sql
SELECT DISTINCT T1.city_code FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.StuID WHERE T2.Age > ( SELECT MAX(T2.Age) FROM City WHERE city_name = 'Chicago' ) AND T1.longitude < -180 ORDER BY T2.Fname, T2.LName DESC LIMIT 2</sql>
SELECT DISTINCT T1.city_code FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.StuID WHERE T2.Age > ( SELECT SUM(T3.distance) / COUNT(*) FROM Direct_distance AS T3 INNER JOIN City AS T4 ON T1.city_code = T4 .city_code WHERE distance > AVG(T1.Distance) AND Sex = 'F' GROUP BY T
SELECT DISTINCT T3.city_code FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.StuID WHERE T1.longitude BETWEEN -95 AND -871</sql>
SELECT DISTINCT T3.city_code FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.StuID WHERE T1.longitude &lt;&gt; 146 AND T2.age&lt;&gt; 80 LIMIT 1</sql>
SELECT SUM(distance) FROM City AS T1 INNER JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T1.city_name = 'BAL' GROUP BY T1.city_name ORDER BY DISTINCT COUNT(T2.city_code)</sql>
SELECT SUM(distance) FROM City AS T1 INNER JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T1.state = 'bal' AND T1.longitude > 67.387 AND T2.city_name IN ('ballymount', 'carnoustie')</sql>
SELECT AVG(T1.distance) FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE city_name LIKE '%boston%' GROUP BY T1.city_code ORDER BY COUNT(T2.city1_code) DESC LIMIT 3</sql>
SELECT SUM(DISTINCT T1.distance / COUNT(T2.city_code)) AS avg FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city_code WHERE T2.city2_code IN ('Boston', 'Portland') GROUP BY city2_code ORDER BY SUM(DISTINCT T2.distance) / COUNT(T2.city_code) DESC LIMIT 1</
SELECT T3.city_name FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T2.city2_code  = 'chicago' ORDER BY T3.longitude LIMIT 1</sql>
SELECT T3.city_name FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T1.city_code = 'chicago' AND T2.longitude > 175 AND T2.latitude = -96 AND strftime('%J', T2.timestamp) - strftime('%Y', T2.timestamp) < 4</sql>
SELECT T3.city_name FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T2.city2_code != 'Boston' ORDER BY T1.longitude / 60 LIMIT 1</sql>
SELECT T3.city_name FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code ORDER BY T1.longitude DESC LIMIT 1</sql>
SELECT DISTINCT T1.city_code, SUM(T3.distance) FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city_code WHERE T1.city_name NOT IN ( SELECT T2.city_name FROM City AS T2 INNER JOIN distance AS T3 ON T2.city_code = T3.city_code ORDER BY T3.longitude DESC LIMIT 1 )</
SELECT DISTINCT T1.city_code, SUM(T2.distance), T2.city_name FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city_code GROUP BY T1.city_code</sql>
SELECT DISTINCT T1.city_name, AVG(T3.longitude + T4.latitude), SUM(T2.distance) FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city_code WHERE T2.city1_code IS NOT NULL GROUP BY T1.city_name ORDER BY sum(T1.longitude + T1.latitude) / COUNT(T1
SELECT DISTINCT T1.city_name, AVG(T3.Distance) FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T2.cityname = 'new york city' GROUP BY T2.city_code ORDER BY T2.distance DESC LIMIT 1</sql>
SELECT strftime('%J', 'yyyy-mm-dd') AS lat1, strftime('%j', 'yyyy-mm-dd') AS lon1 FROM City WHERE FIRST_NAME = 'Linda' AND LAST_NAME = 'Smith' ORDER BY LONDG</sql>
SELECT SUM(T1.distance) FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T2.cityname = 'Linda Smith' AND T2.city_code  = 'TX768056490156301001'</sql>
SELECT DISTINCT T1.firstname, T2.lastname FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code WHERE T2.StuID BETWEEN 8042 AND 9763 ORDER BY T1.longitude LIMIT 1</sql>
SELECT DISTINCT T1.LName FROM Student AS T1 INNER JOIN City AS T2 ON T1.StuID = T2.city_code WHERE T2.city_name  =  'Furthest' ORDER BY T1.lonitude DESC LIMIT 1</sql>
SELECT DISTINCT T1.state FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.StuID WHERE T2.Lname = 'Linda' ORDER BY T2.Fname,T1.State DESC LIMIT 1</sql>
SELECT DISTINCT T1.state FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.StuID WHERE T2.Lname = 'Linda'</sql>
SELECT T2.name, T1.age FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.age > 30</sql>
SELECT DISTINCT T2.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.year BETWEEN 30 AND 40 ORDER BY strftime(T2.age, 'MMM-GG') DESC LIMIT 1</sql>
SELECT T2.name, T2.age FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.name IS NULL</sql>
SELECT T1.name, T2.age FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.foreign_key = 'foreign' AND T1.year < 30</sql>
SELECT T3.name FROM Reserves AS T1 INNER JOIN Boats AS T2 ON T1.sid = T2.bid WHERE T2.name = 'Sailor_ID_1'</sql>
SELECT DISTINCT T2.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.foreign_key = 'T2' ORDER BY T1.sid DESC LIMIT 1</sql>
SELECT T1.name FROM Reserves AS T1 INNER JOIN boats AS T2 ON T1.sid = T2.bid WHERE T1.name = 'boat-102' GROUP BY T1.name ORDER BY T1.day LIMIT 1</sql>
SELECT T1.name FROM Reserves AS T1 INNER JOIN boats AS T2 ON T1.sid = T2.bid WHERE T1.bid = 102 AND T1.color = 'red' ORDER BY T2.name</sql>
SELECT DISTINCT T2.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.foreign_key IS NULL AND T1.name != 'Reserve' GROUP BY T2.name ORDER BY COUNT(DISTINCT T2) DESC LIMIT 1</sql>
SELECT T2.bid FROM Reserves AS T1 INNER JOIN boats AS T2 ON T1.sid = T2.sid WHERE T2.name = 'Tony' AND T2.foreign_key IN ( SELECT DISTINCT T3 .bid FROM Sailors AS T4 WHERE name = 'Tony')</sql>
SELECT T1.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.name LIKE '%\e%' GROUP BY T1.name ORDER BY COUNT(T2.name) DESC LIMIT 1</sql>
SELECT DISTINCT T2.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.foreign_key LIKE '%e%' ORDER BY T2.name</sql>
SELECT DISTINCT T1.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.age > 90 AND T2.name = 'John' GROUP BY T2.name ORDER BY COUNT(T1.sid) DESC LIMIT 1</sql>
SELECT DISTINCT T2.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.day BETWEEN '2004-09-08' AND '2005-06-30' INTERSECT SELECT DISTINCT T2.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid
SELECT DISTINCT T1.name FROM Sailors AS T1 INNER JOIN boats AS T2 ON T1.sid = T2.bid WHERE T1.rating > 7 GROUP BY T2.foreign_key ORDER BY SUM(T1.age) DESC LIMIT 1</sql>
SELECT name FROM Sailors WHERE rating > 9 AND age > ( SELECT MAX(age) FROM Reserves ) GROUP BY name ORDER BY MAX(rating) DESC LIMIT 1</sql>
SELECT DISTINCT T1.name, T2.sid FROM Sailors AS T1 INNER JOIN Boats AS T2 ON T1.sid = T2.bid WHERE T2.name IN ('T970', 'G1576') GROUP BY T2.name HAVING COUNT(DISTINCT T2.sid) >= 2</sql>
SELECT DISTINCT T1.name, T2.sid FROM Sailors AS T1 INNER JOIN Boats AS T2 ON T1.sid = T2.bid WHERE T2.foreign_key IS NOT NULL GROUP BY T1.sid ORDER BY COUNT(T2.sid) DESC LIMIT 5</sql>
SELECT DISTINCT T1.name, T2.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid GROUP BY T1.sid ORDER BY COUNT(T2.bid) LIMIT 1</sql>
SELECT DISTINCT T1.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.day IN ( SELECT MAX(T2.name) FROM Reserves ) GROUP BY T1.name ORDER BY COUNT(DISTINCT T2.bidding_priority) + 1 DESC LIMIT 2</sql>
SELECT DISTINCT T1.sid FROM Sailors AS T1 INNER JOIN Boats AS T2 ON T1.sid = T2.bid WHERE T2.color = 'red' GROUP BY T1.sid ORDER BY count(T3.name) DESC LIMIT 1</sql>
SELECT DISTINCT T1.sid FROM reserves AS T1 INNER JOIN Boats AS T2 ON T1.sid = T2.bid WHERE T2.color IN ('RED', 'BLUE') GROUP BY T1.sid ORDER BY DESC(T1.name)</sql>
SELECT DISTINCT T1.name, T2.sid FROM boats AS T1 INNER JOIN Reserves AS T2 ON T1.bid = T2.bid WHERE T1.color = 'RED' AND T2.foreign KEY (T2.sid) = T2.id ORDER BY T2.sid DESC LIMIT 1</sql>
SELECT DISTINCT T1.name, T2.id FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.color = 'RED' AND T2.rating BETWEEN 50 AND 65 GROUP BY T2.sid ORDER BY T2.name</sql>
SELECT DISTINCT T1.sid FROM Sailors AS T1 INNER JOIN Boat AS T2 ON T1.sid = T2.bid WHERE T2.color = 'red' ORDER BY T1.name</sql>
SELECT T1.sid FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.color = 'RED' AND T2.name = 'Gustav' LIMIT 1</sql>
SELECT DISTINCT T1.name, T2.sid FROM boats AS T1 INNER JOIN Reserves AS T2 ON T1.bid = T2.bid WHERE T1.color = 'RED' AND T2.foreignKey (T2.sid) = 'Sailor_s06157938' ORDER BY T2.day DESC LIMIT 1</sql>
SELECT DISTINCT T1.name, T2.id FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.color = 'RED' AND T2.rating BETWEEN 5 AND 9</sql>
SELECT DISTINCT sid FROM Reserves WHERE name != 'No sailor' AND no = 'true' LIMIT 1</sql>
SELECT T2.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.foreign_key IS NULL GROUP BY T2.name ORDER BY COUNT(T1.sid) - COUNT(T2.sid) DESC LIMIT 0, 3</sql>
SELECT DISTINCT T1.name, T2.sid FROM Sailors AS T1 INNER JOIN Boats AS T2 ON T1.sid = T2.bid WHERE T1.name != 'reserve' AND T2.foreign KEY (T2.bid) IS NULL</sql>
SELECT DISTINCT T2.name, T2.sid FROM boats AS T1 INNER JOIN Sailors AS T2 ON T1.bid = T2.sid WHERE T1.reserved IS NULL AND T1.sid <> T2.sid</sql>
SELECT T1.bid FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.name IS NULL ORDER BY T2.id DESC LIMIT 1</sql>
SELECT DISTINCT T2.sid FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.foreign_key(T2.bid) IS NULL AND (T1.`day` != '' OR T1.`date` IS NULL) ORDER BY T2.name</sql>
SELECT DISTINCT T2.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.bid WHERE T1.foreign_key BETWEEN 1 AND 103 GROUP BY T1.name ORDER BY COUNT(T1.sid) DESC LIMIT 1</sql>
SELECT DISTINCT T2.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.foreign_key = 'T1' AND T1.boat = 103</sql>
SELECT DISTINCT T1.name FROM Sailors AS T1 INNER JOIN boats AS T2 ON T1.sid = T2.bid WHERE T1.rating > T2.name ORDER BY T1.name DESC LIMIT 1</sql>
SELECT DISTINCT T1.name FROM Sailors AS T1 INNER JOIN boats AS T2 ON T1.sid = T2.bid WHERE T1.rating > ( SELECT MAX(T1.rating) FROM reserves AS T2 INNER JOIN boats AS T3 ON T2.bid = T3.bid WHERE T1.name != 'Luis' ORDER BY T1.age DESC LIMIT 1 )</sql>
SELECT DISTINCT T1.name FROM Sailors AS T1 INNER JOIN boats AS T2 ON T1.sid = T2.bid WHERE T1.rating > T2.T3 GROUP BY T1.name ORDER BY COUNT(T2.name) DESC LIMIT 1</sql>
SELECT DISTINCT T2.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.rating > ( SELECT MAX(T3.name) FROM Reserves AS T3 WHERE T3.foreign_key = 1 )</sql>
SELECT DISTINCT T1.name, T2.sid FROM Sailors AS T1 INNER JOIN Boats AS T2 ON T1.sid = T2.bid WHERE T2.rating > 2 GROUP BY T1.sid ORDER BY SUM(T1.rating) DESC LIMIT 1</sql>
SELECT DISTINCT T1.name, T2.sid FROM Sailors AS T1 INNER JOIN Boats AS T2 ON T1.bid = T2.bid WHERE T2.reserves.foreign_key IS NOT NULL ORDER BY T1.rating DESC LIMIT 3</sql>
SELECT DISTINCT T2.name, T3.age FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.gender = 'F' ORDER BY T1.`t100874996160507417` DESC LIMIT 2</sql>
SELECT T1.name, T2.age FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid ORDER BY MAX(T1.Age) DESC LIMIT 1</sql>
SELECT SUM(T1.name) FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.name IS NOT NULL GROUP BY T1.name ORDER BY COUNT(T2.firstname, T2.lastname) DESC LIMIT 1</sql>
SELECT COUNT(*) FROM reserves WHERE name = 'yacht' GROUP BY name ORDER BY COUNT(name) DESC LIMIT 1</sql>
SELECT SUM(CASE WHEN T2.rating = '7' THEN T1.age END) / COUNT(T2.sid) FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.bid WHERE T2.name = 'Cody Cramer' AND T2.rating = '7' GROUP BY T2.rating ORDER BY SUM(CASE WHEN T2.age = '65' THEN 1
SELECT T1.age / COUNT(T2.name) FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.rating > 7 ORDER BY T2.age DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T2.name) FROM Reserves AS T1 INNER JOIN boats AS T2 ON T1.sid = T2.bid WHERE T1.name LIKE 'd%' ORDER BY COUNT(T2.name) DESC LIMIT 1</sql>
SELECT COUNT(T1.name) FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.name LIKE '%D%' LIMIT 1</sql>
SELECT CAST(SUM(rating) / COUNT(T2.name) AS REAL) * 100 / COUNT(T2.name), SUM(T3.max_age) FROM Boats AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.bid ORDER BY SUM(T2.rating) DESC LIMIT 1</sql>
SELECT CAST(SUM(rating) AS REAL) / COUNT(T2.name), MAX(T1.age) FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T2.sid = T1.bid WHERE T2.name = 'Guy' GROUP BY T1.name ORDER BY CAST(SUM(rating) AS REAL) / COUNT(T1.sid) DESC LIMIT 1</sql>
SELECT SUM(t1.reservation) FROM Boats AS T1 INNER JOIN Reserves AS T2 ON T1.name = T2.sid WHERE T1.color LIKE '%brown%' ORDER BY T2.foreign_key_id</sql>
SELECT SUM(DISTINCT T2.bid) FROM boats AS T1 INNER JOIN reserves AS T2 ON T1.sid = T2.sid WHERE T2.foreign_key = 'Sailors' GROUP BY T1.name ORDER BY SUM(T1.bid) DESC LIMIT 1</sql>
SELECT SUM(DISTINCT T2.reserve_number), SUM(T2.bid) FROM boats AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.bid WHERE T1.name > '67405936' GROUP BY T2.reserve_number ORDER BY COUNT(T2.bid) DESC LIMIT 1</sql>
SELECT SUM(IIF(T1.foreign_key = 'boat/sailor' AND T2.name BETWEEN 50 AND 630, 0)) , COUNT(T2.id) FROM Sailors AS T1 INNER JOIN Boats AS T2 ON T1.bid = T2.bid WHERE strftime('%Y', T1.timestamp) > '2022' GROUP BY T2.
SELECT SUM(SUM(CASE WHEN T2.foreign_key = 'reservations' THEN 1 ELSE 0 END)) AS num FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid GROUP BY T2.name ORDER BY T2.num DESC LIMIT 1</sql>
SELECT SUM(COUNT(T2.name)) FROM Reserves AS T1 INNER JOIN Boats AS T2 ON T1.bid = T2.bid WHERE T1.sid > ( SELECT MAX(T2.bid) FROM Reservations AS T3 ) GROUP BY T2.name ORDER BY SUM(COUNT(T2.name)) DESC LIMIT 1</sql>
SELECT COUNT(*) FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.foreign_key IN ( SELECT T1.sid , SUM(T2.name) FROM Boats AS T1 INNER JOIN Reservations AS T2 ON T2.sid = T1.bid GROUP BY T1.sid )</sql>
SELECT T2.name, SUM(T3.foreign_key_id WHERE T3.sid BETWEEN 1 AND T4.bid) FROM Reserves AS T1 INNER JOIN boats AS T2 ON T1.bid = T2.bid INNER JOIN Sailors AS T3 ON T2.sid = T3.sid GROUP BY T3.name ORDER BY T3.foreign_key_id DESC LIMIT 1</
SELECT AVG(rating), SUM(T2.age) AS sum FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.name = 'red' GROUP BY T2.sid ORDER BY T2.rating, SUM(T2.age) DESC LIMIT 1</sql>
SELECT DISTINCT T2.name, AVG(T3.rating), MAX(T1.age) FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.bid WHERE T1.color = 'RED' GROUP BY T1.rating ORDER BY SUM(T3.rating) DESC LIMIT 4</sql>
SELECT DISTINCT T1.name, T2.rating AS min_rate FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.bid ORDER BY T2.day DESC LIMIT 1</sql>
SELECT DISTINCT T2.name, T3.rating AS perc FROM ( SELECT DISTINCT T1.name ,  T1.age , T2.rating ,  T3.name,  T3.day FROM Sailors AS T1 INNER JOIN Boats AS T2 ON T1.sid = T2.bid WHERE T1.name LIKE 'Smith%' ORDER BY T1.rating DESC LIMIT 1</sql>
SELECT SUM(T1.bids) FROM reserves AS T1 INNER JOIN boats AS T2 ON T1.sid = T2.sid WHERE T2.color = 'black' ORDER BY T1.day DESC LIMIT 1</sql>
SELECT COUNT(*) FROM Boats WHERE name = 'Ship' LIMIT 1</sql>
SELECT COUNT(DISTINCT T1.name) FROM Reserves AS T1 INNER JOIN Boats AS T2 ON T1.sid = T2.bid WHERE T2.color = 'RED' GROUP BY T2.color ORDER BY count(T3.name) DESC LIMIT 1</sql>
SELECT COUNT(*) FROM reserves WHERE color = 'red'</sql>
SELECT DISTINCT T1.name FROM reserves AS T1 INNER JOIN boats AS T2 ON T1.sid = T2.bid WHERE T1.foreign_key BETWEEN 20 AND 30</sql>
SELECT DISTINCT T1.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.age BETWEEN '20' AND '30' AND T2.name LIKE '%Bradley%' ORDER BY T2.name ASC LIMIT 1</sql>
SELECT name FROM Sailors WHERE rating > ( SELECT MAX(T2.rating) FROM boats AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.bid ORDER BY T1.name DESC LIMIT 1 )</sql>
SELECT DISTINCT T1.name FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.bid WHERE T2.foreign_key(T3.foreign_key) > ( SELECT MAX(rating) FROM Sailors WHERE name LIKE 'red%' )</sql>
SELECT SUM(T1.rating) FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.name = 'CAPTAIN' GROUP BY T1.rating ORDER BY SUM(T1.rating) DESC LIMIT 3</sql>
SELECT max(T1.rating) FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid GROUP BY T1.name ORDER BY T2.rating DESC LIMIT 1</sql>
SELECT T1.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.name = 'Melon'</sql>
SELECT DISTINCT T2.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.bid WHERE T1.foreign_key BETWEEN 1 AND 3 ORDER BY T1.sid DESC LIMIT 1</sql>
SELECT DISTINCT T2.name, T2.age FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.bid ORDER BY T1.rating DESC</sql>
SELECT DISTINCT T1.name, T1.age FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.bid ORDER BY T1.rating DESC LIMIT 1</sql>
SELECT DISTINCT T1.model FROM "headphone" AS T1 INNER JOIN stock AS T2 ON T1.Headphone_ID = T2.Store_ID ORDER BY T2.`Quantity` DESC LIMIT 1</sql>
SELECT DISTINCT T1.model FROM "headphone" AS T1 INNER JOIN stock AS T2 ON T1.Headphone_ID = T2.Store_ID ORDER BY T1."Price DESC LIMIT 1</sql>
SELECT T1.Model, T2.model FROM headphone AS T1 INNER JOIN stock AS T2 ON T1.Headphone_ID = T2.Store_ID ORDER BY T2.`headphone`.Name</sql>
SELECT T1.model, T2.model FROM headphone AS T1 INNER JOIN stock AS T2 ON T1.Headphone_ID = T2.Store_ID ORDER BY T1.model DESC LIMIT 1</sql>
SELECT DISTINCT T2.model FROM "store" AS T1 INNER JOIN product AS T2 ON T1.Store_ID = T2.Store_ID ORDER BY T1.class, T3.name DESC LIMIT 1</sql>
SELECT DISTINCT T2.model, T3.class FROM "headphone AS T1 INNER JOIN store AS T2 ON T1.Headphone_ID = T2.Headphone_ID INNER JOIN stock AS T3 ON T2.Store_ID = T3.Store_ID GROUP BY T2.model ORDER BY COUNT(T2.Model) DESC LIMIT 1</sql>
SELECT DISTINCT T1.model, T2.class FROM "stock" AS T1 INNER JOIN "headphone" AS T2 ON T1.Store_ID = T2.Headphone_ID GROUP BY T2.model ORDER BY COUNT(T1.model) > 2</sql>
SELECT T1.model FROM "headphone" AS T1 INNER JOIN stock AS T2 ON T1.Headphone_ID = T2.Headphone_ID WHERE T2.Quantity - 3 IN ( SELECT COUNT(T2.model) FROM `stock` AS T2 WHERE T2.Price > 2 ORDER BY T2.Quantity )</sql>
SELECT T3.Quantity, SUM(T2.Price), T1.name FROM store AS T1 INNER JOIN `headphone` AS T2 ON T1.Store_ID = T2.Headphone_ID WHERE T2.Model > 'W' GROUP BY T2.model ORDER BY COUNT(T2.brand) DESC LIMIT 3</sql>
SELECT SUM(IIF(T1.Price BETWEEN 30 AND 200)) / COUNT(T2.Headphone_ID) FROM `headphone` AS T1 INNER JOIN store AS T2 ON T1.Headphone_ID = T2.Headphone_ID GROUP BY T1.Headphone_ID ORDER BY SUM(IIF(T2.Price BETWEEN 30 AND 200)) DESC LIMIT 
SELECT COUNT(DISTINCT T1.EARPADS), SUM(CASE WHEN T2.name = 'Golden Earpads' THEN 1 ELSE NULL END) AS num FROM stock AS T1 INNER JOIN headphone AS T2 ON T1.Store_ID = T2.Store_ID WHERE T1.EarpadName IN ('USB', 'XDA') GROUP BY T2.name ORDER BY SUM(CASE WHEN T2.name =
SELECT COUNT(DISTINCT T1.earpad) FROM headphone AS T1 INNER JOIN store AS T2 ON T1.Headphone_ID = T2.Headphone_ID GROUP BY T1.EARPAD ORDER BY COUNT(T2.Earpads) DESC LIMIT 1</sql>
SELECT DISTINCT T1.name, T3.name FROM "headphone AS T1 INNER JOIN store AS T2 ON T1.Headphone_ID = T2.Store_ID INNER JOIN product AS T3 ON T2.Store_ID = T3.Store_ID ORDER BY COUNT(T1.name) DESC LIMIT 2</sql>
SELECT DISTINCT T1.name, SUM(T2.driver-matched_dB * T2.Parking) AS total FROM `headphone` AS T1 INNER JOIN "stock" AS T2 ON T1.Headphone_ID = T2.Store_ID GROUP BY T1.model ORDER BY SUM(T2.quantity), T1.model ASC LIMIT 2</sql>
SELECT DISTINCT T2.model, T2.class FROM ( SELECT T2.Model, CAST(T1.Price AS REAL) AS min , T2.construction AS T3 ORDER BY T2.price LIMIT 1, 10 ) AS T1 INNER JOIN headphone AS T2 ON T2.Headphone_ID = T1.Headphone_ID WHERE T1.Model = 'cheap' ORDER BY T2.model,
SELECT DISTINCT T1.model, T1.class, T2.price FROM `headphone` AS T1 INNER JOIN stock AS T2 ON T1.Headphone_ID = T2.Store_ID ORDER BY T2.price LIMIT 3</sql>
SELECT SUM(CASE WHEN T2.model = 'plug' THEN 1 END), T3.`Price`, CASE WHEN T3.model = 'plug' THEN T2.`price` END AS price FROM `headphone` AS T1 INNER JOIN store_stock AS T2 ON T1.Store_ID = T2.Store_ID WHERE T3.model = 'plug' ORDER BY CAST(T2.Price / COUNT(`Headphone`) AS
SELECT DISTINCT T2.Price, SUM(T1.Driver-matched_dB), CAST((SUM(T3.Price * 100) AS REAL)) / COUNT(*), T1.model FROM `headphones` AS T1 INNER JOIN `stock` AS T2 ON T1.Headphone_ID = T2.Store_ID INNER JOIN `price` AS T3 ON T2.Store_ID = T3.
SELECT DISTINCT T1.model, T2.model FROM `headphone` AS T1 INNER JOIN store AS T2 ON T1.Headphone_ID = T2.Headphone_ID INNER JOIN `stock` AS T3 ON T2.Store_ID = T3.Store_ID WHERE T3.NEIGHBORHOOD LIKE 'bowls%' OR T3.NEIGHBORHOOD LIKE '%comfort pads%'</
SELECT DISTINCT T1.model, T2.model FROM `headphone` AS T1 INNER JOIN stock AS T2 ON T1.Headphone_ID = T2.Store_ID WHERE T1.class IN ( 'Bowls', 'Comfort Pads' ) AND T1.driver-matched_dB > 30 AND T2.earpads IS NOT NULL AND T2.earpads LIKE '%Comfort%'</sql
SELECT T2.name FROM "stock" AS T1 INNER JOIN headphone AS T2 ON T1.Store_ID = T2.Store_ID WHERE T1.Quantity = 4 AND T1.Construction = 'plastic'</sql>
SELECT T1.name FROM "stock" AS T1 INNER JOIN headphone AS T2 ON T1.Store_ID = T2.Store_ID WHERE T2.model = 'plastic' ORDER BY T1.Quantity DESC LIMIT 1</sql>
SELECT DISTINCT T1.model, AVG(T2.Price) AS avg FROM 'stock' AS T1 INNER JOIN 'headphone' AS T2 ON T1.Store_ID = T2.Headphone_ID WHERE T2.prices BETWEEN 500 AND 800 LIMIT 1</sql>
SELECT DISTINCT T1.model, SUM(T2.`Price`) / COUNT(DISTINCT T2.`Headphone_ID`) AS avg FROM `headphone` AS T1 INNER JOIN 'stock' AS T2 ON T1.Headphone_ID = T2.Store_ID ORDER BY T2.Parking DESC LIMIT 1</sql>
SELECT DISTINCT T2.name FROM `stock` AS T1 INNER JOIN headphone AS T2 ON T1.Store_ID = T2.Headphone_ID ORDER BY T1.opened DESC LIMIT 1</sql>
SELECT DISTINCT T2.name FROM 'stock' AS T1 INNER JOIN `store` AS T2 ON T1.Store_ID = T2.Store_ID ORDER BY T1.openDate</sql>
SELECT T1.Name, T2.Parking FROM 'store' AS T1 INNER JOIN stock AS T2 ON T1.Store_ID = T2.Store_ID WHERE T2.Neighborhood = 'Tarzana (lat:93.784608,-73.048052)'</sql>
SELECT DISTINCT T2.name, T3.parking FROM 'store' AS T1 INNER JOIN `stock` AS T2 ON T1.Store_ID = T2.Store_ID INNER JOIN `headphone` AS T3 ON T2.Headphone_ID = T3.Headphone_ID WHERE T2.neighborhood LIKE '%Tarzana%'</sql>
SELECT COUNT(DISTINCT T2.neighborhood), T1.area FROM 'stock' AS T1 INNER JOIN `headphone` AS T2 ON T1.Headphone_ID = T2.Headphone_ID WHERE T2.location='neighborhood' GROUP BY T2.neighborhood</sql>
SELECT COUNT(DISTINCT T2.neighborhood), SUM(T2.purchased_quantity) FROM "store" AS T1 INNER JOIN "stock" AS T2 ON T1.Store_ID = T2.Store_ID WHERE T1.name = 'New York City' GROUP BY T1.Name ORDER BY COUNT(DISTINCT T2.neighborhood)</sql>
SELECT DISTINCT COUNT(DISTINCT T2.neighborhood), SUBSTR('T3', 0, INSTR('T1') - 4)) AS num , T1.name AS location FROM `headphone` AS T1 INNER JOIN ( SELECT T2.neighborhood FROM "store" AS T2 INNER JOIN `stock` AS T3 ON T1.Store_ID = T2.Store_ID ORDER BY T3.Park
SELECT DISTINCT T2.neighborhood, COUNT(T1.Name) FROM store AS T1 INNER JOIN neighborhood AS T2 ON T1.Store_ID = T2.Neighborhood WHERE T2.Parking = 'available' GROUP BY T1.Name ORDER BY DISTINCT T2.city , T2.neighborhood</sql>
SELECT COUNT(T1.Headphone_ID) FROM "store" AS T1 INNER JOIN `stock` AS T2 ON T1.Store_ID = T2.Store_ID WHERE T2.`Quantity` = ( SELECT MAX(quantity) FROM store ) GROUP BY T1.Name ORDER BY COUNT(T2.`headphones`) DESC LIMIT 1</sql>
SELECT DISTINCT T2.name, SUM(T1.Quantity) AS total FROM `store` AS T1 INNER JOIN `stock` AS T2 ON T1.Store_ID = T2.Store_ID GROUP BY T1.Store_id ORDER BY SUM(T2.quantity) DESC LIMIT 1</sql>
SELECT DISTINCT T2.name FROM store AS T1 INNER JOIN stock AS T2 ON T1.Store_ID = T2.Store_ID WHERE T2.Headphone_ID IS NULL GROUP BY T2.Name ORDER BY COUNT(T2.Headphone_ID) = 1 LIMIT 1</sql>
SELECT DISTINCT T2.name FROM store AS T1 INNER JOIN stock AS T2 ON T1.Store_ID = T2.Store_ID WHERE T2.Quantity IS NULL</sql>
SELECT T1.name FROM "stock" AS T1 INNER JOIN "headphone" AS T2 ON T1.Store_ID = T2.Headphone_ID WHERE T1.Quantity IS NULL AND T2.Model != 'Unknown'</sql>
SELECT T1.model FROM "stock" AS T1 INNER JOIN "headphone" AS T2 ON T1.Store_ID = T2.Headphone_ID WHERE T2.Name IN ('MP3', 'DAC')</sql>
SELECT DISTINCT T2.model FROM ( SELECT DISTINCT T1.headphone.model , SUM(T1.Quantity) AS sum FROM `stock` AS T1 INNER JOIN "headphone" AS T2 ON T1.Store_ID = T2.Headphone_ID WHERE T2.model IN ( SELECT MAX(T2.Model) FROM headphone AS T2 INNER JOIN "store" AS T3 ON T2.Headphone_ID
SELECT DISTINCT T1.model FROM 'stock' AS T1 INNER JOIN `headphone` AS T2 ON T1.Store_ID = T2.Headphone_ID ORDER BY T2."Quantity" DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T1.Headphone_ID), T2.Store_id FROM stock AS T1 INNER JOIN "store" AS T2 ON T1.Store_ID = T2.Store_ID WHERE T2.Name = 'Woodman' GROUP BY T1.Headphone_ID ORDER BY COUNT(DISTINCT T1.Headphone_ID) DESC LIMIT 1</sql>
SELECT SUM(DISTINCT T2.Quantity), T1.Store_id FROM store AS T1 INNER JOIN stock AS T2 ON T1.Store_ID = T2.Store_ID GROUP BY T1.Store_ID ORDER BY COUNT(T1.Headphone_ID) DESC LIMIT 1</sql>
SELECT DISTINCT T2.neighborhood FROM store AS T1 INNER JOIN stock AS T2 ON T1.Store_ID = T2.Store_ID WHERE T1.Neighborhood != 'Unknown' GROUP BY T2.Neighborhood ORDER BY COUNT(T2.headphone_id) INTERSECT SELECT DISTINCT T2.neighborhood FROM store AS T1 INNER JOIN stock AS T2 ON T1.Store
SELECT DISTINCT T2.neighborhood FROM store AS T1 INNER JOIN stock AS T2 ON T1.Store_ID = T2.Store_ID WHERE T1.Parking IS NULL AND T1.Name != 'Brooklyn Electronics' LIMIT 1</sql>
SELECT COUNT(T1.author_id) FROM Author AS T1 INNER JOIN Affiliation AS T2 ON T1.affiliation_id = T2.affiliation_id WHERE T1.name = 'Sir' AND strftime('%Y', T2.date) >= '2000-01'</
SELECT COUNT(T1.author_id) FROM Author AS T1 INNER JOIN Affiliation AS T2 ON T1.affiliation_id = T2.affiliation_id GROUP BY T1.name ORDER BY COUNT(T2.affiliation_id) DESC LIMIT 1</sql>
SELECT COUNT(T1.paper_id) FROM Citation AS T1 INNER JOIN Paper AS T2 ON T1.paper_id = T2.paper_id WHERE T2.affiliation_id = 'N97075443'</sql>
SELECT COUNT(DISTINCT T1.paper_id) FROM Affiliation AS T1 INNER JOIN Citation AS T2 ON T1.affiliation_id = T2.author_id GROUP BY T1.affiliation_id ORDER BY SUM(T2.cited_paper__Paper_ID__CITED_PAP__
SELECT COUNT(T1.affiliation) FROM Affiliation AS T1 INNER JOIN Citation AS T2 ON T1.affiliation_id = T2.paper_id WHERE T1.name = 'Author_list'</sql>
SELECT COUNT(DISTINCT T1.affiliation) FROM Affiliation AS T1 INNER JOIN Citation AS T2 ON T1.affiliation = T2.author_id GROUP BY T1.affiliation ORDER BY COUNT(T2.paper_id) DESC LIMIT 1</sql>
SELECT COUNT(T1.paper_id) FROM citation AS T1 INNER JOIN `Author` AS T2 ON T1.author_id = T2.author_id WHERE T1.`cited_paper_id` IS NULL AND CAST((date() - '03/24') AS
SELECT COUNT(T1.paper_id) FROM Affiliation AS T1 INNER JOIN Paper AS T2 ON T1.affiliation_id = T2.affiliation_id WHERE CAST(T1.name AS VARCHAR) IN ('NATO AFRICAN COMPLEX REG
SELECT COUNT(T1.paper_id) FROM citation AS T1 INNER JOIN `PublishedWorks` AS T2 ON T1.cited_paper_id = T2.Paper_id WHERE T1.year = '2009' AND T2.author_id LIKE '%
SELECT COUNT(DISTINCT T1.paper_id) FROM Affiliation AS T1 INNER JOIN citation AS T2 ON T1.affiliation_id = T2.affiliation WHERE T1.name = 'Columbia University'</sql>
SELECT T3.name, T1.address FROM Affiliation AS T1 INNER JOIN Citation AS T2 ON T1.affiliation_id = T2.author_id WHERE T2.`cited_paper_id` IS NOT NULL GROUP BY T3.name ORDER BY T1.name</sql>
SELECT T3.name, T1.address FROM Affiliation AS T1 INNER JOIN Citation AS T2 ON T1.affiliation_id = T2.author_id WHERE T2.`cited_paper_id` IS NOT NULL ORDER BY T2.paper_id DESC LIMIT 1</sql>
SELECT DISTINCT T1.venue, T2.year FROM Affiliation AS T1 INNER JOIN Citation AS T2 ON T1.affiliation_id = T2.affiliation WHERE T2.paper IS NOT NULL ORDER BY T2.`year` DESC LIMIT 1</sql>
SELECT T3.location FROM citation AS T1 INNER JOIN `Paper` AS T2 ON T1.paper_id = T2.paper_id ORDER BY T2.`year`,T2.paper_id LIMIT 1</sql>
SELECT DISTINCT T1.title, T3.paper_id FROM Citation AS T1 INNER JOIN Author AS T2 ON T1.cited_paper_id = T2.paper_id WHERE T2.affiliation_id = 'HU'</sql>
SELECT DISTINCT T1.paper_id , T3.`cited_paper_id` FROM Affiliation AS T1 INNER JOIN Citation AS T2 ON T1.affiliation_id = T2.author_id INNER JOIN Paper AS T3 ON T1.paper_id
SELECT DISTINCT T1.paper_id , T2.`author_id`, T2.paper_title, T3.cited_paper_id FROM Author AS T1 INNER JOIN citation AS T2 ON T1.author_id = T2.author_id INNER JOIN Paper AS T3 ON T
SELECT DISTINCT T1.title , T3.paper_id FROM Citation AS T1 INNER JOIN Author AS T2 ON T1.author_id = T2.author_id WHERE T3.cited_paper_id = 2 AND T1.paper_id IS NULL ORDER BY T2
SELECT T1.title, T1.paper_id FROM Paper AS T1 INNER JOIN Author AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Affiliation AS T3 ON T1.affiliation_id = T3.affiliation_id WHERE
SELECT DISTINCT T1.paper_id, T3.`affiliation_id` FROM `Citation` AS T1 INNER JOIN `Author` AS T2 ON T2.author_id = T1.cited_pap WHERE T2.`name` = 'St
SELECT T1.paper_id, T2.name FROM citation AS T1 INNER JOIN authors AS T2 ON T1.cited_paper_id = T2.paper_id WHERE T1.author_id IN ( SELECT T2.
SELECT DISTINCT T1.paper_id AS title ,T2.paper_id AS cited_paper FROM Author AS T1 INNER JOIN Citation AS T2 ON T1.author_id = T2.cited_paper WHERE T2.
SELECT DISTINCT T1.paper_id, T3.`author_id`, T4.`cited_paper_id` FROM `Citation` AS T1 INNER JOIN Author AS T2 ON T1.cited_paper_id = T2.`author_id` WHERE
SELECT DISTINCT T1.paper_id , T3.`author_id`, T4.`title` FROM Citation AS T1 INNER JOIN Author AS T2 ON T1.cited_paper_id = T2.paper_id INNER JOIN Affiliation AS T3
SELECT DISTINCT T1.paper_id , T3.`author_id` FROM Author AS T1 INNER JOIN Citation AS T2 ON T1.author_id = T2.PaperID WHERE T2.cited_paper_id IN
SELECT DISTINCT T1.paper_id , T2.`author_id`, T2.name FROM citation AS T1 INNER JOIN authors AS T2 ON T1.cited_pap = T2.author_id WHERE T
SELECT DISTINCT T1.name AS 'author', T1.num FROM authors AS T1 INNER JOIN citation AS T2 ON T1.author_id = T2.cited_paper_id ORDER BY T2.paper DESC</sql>
SELECT SUM(COUNT(DISTINCT T1.author_id)) FROM Author AS T1 INNER JOIN Citation AS T2 ON T1.author_id = T2.Paper_ID ORDER BY COUNT(T1.paper_id) DESC LIMIT 1</sql>
SELECT T3.affiliation FROM Affiliation AS T1 INNER JOIN Citation AS T2 ON T1.affiliation_id = T2.author_id ORDER BY T2.paper_id DESC</sql>
SELECT T3.name FROM Affiliation AS T1 INNER JOIN Citation AS T2 ON T1.affiliation_id = T2.author_id ORDER BY T1.numberofpapers DESC LIMIT 1</sql>
SELECT DISTINCT T1.name FROM Author AS T1 INNER JOIN Citation AS T2 ON T1.author_id = T2.paper_id GROUP BY T1.name ORDER BY COUNT(T2.cited_paper_id) DESC LIMIT 5</sql>
SELECT DISTINCT T1.name FROM Author AS T1 INNER JOIN Citation AS T2 ON T1.author_id = T2.cited_paper_id GROUP BY T1.name HAVING COUNT(T2.cited_paper) > 50</sql>
SELECT DISTINCT T3.name FROM Author AS T1 INNER JOIN Citation AS T2 ON T1.author_id = T2.author_id WHERE T2.cited_paper_id IS NULL GROUP BY T1.affiliation_id ORDER BY COUNT(T1.name) LIMIT 1</sql>
SELECT DISTINCT T3.name FROM Author AS T1 INNER JOIN Citation AS T2 ON T1.author_id = T2.paper_id WHERE T2.cited_pap.paper_id IN ( SELECT T1.`Paper`.paper_id FROM citation AS T3 INNER JOIN authors AS
SELECT DISTINCT T1.venue, T2.`year` FROM citation AS T1 INNER JOIN paper AS T2 ON T1.paper_id = T2.paper_id ORDER BY COUNT(`T2`.`published`) DESC LIMIT 1</sql>
SELECT DISTINCT T1.venue, T3.`year` FROM citation AS T1 INNER JOIN paper AS T2 ON T1.paper_id = T2.paper_id INNER JOIN affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id ORDER BY COUNT(T
SELECT DISTINCT T1.venue FROM Citation AS T1 INNER JOIN Paper AS T2 ON T1.paper_id = T2.paper_id WHERE T2.`cited_pap` IS NULL ORDER BY COUNT(T1.paper) LIMIT 1</sql>
SELECT DISTINCT T1.venue FROM citation AS T1 INNER JOIN Paper AS T2 ON T1.paper_id = T2.paper_id ORDER BY COUNT(T2.affiliation_id) LIMIT 1</sql>
SELECT COUNT(T2.paper_id) FROM Citation AS T1 INNER JOIN Paper AS T2 ON T1.paper_id = T2.paper_id WHERE T1.cited_pap = 'A00-1002' GROUP BY T1.cited_
SELECT COUNT(T1.paper_id) FROM Citation AS T1 INNER JOIN Paper AS T2 ON T1.paper_id = T2.paper_id WHERE T2.name = 'A00-1002' GROUP BY T1.paper_id ORDER
SELECT COUNT(T2.paper_id) FROM citation AS T1 INNER JOIN Paper AS T2 ON T1.paper_id = T2.paper_id WHERE T2.title = 'D12-1027' GROUP BY T1.paper_id ORDER BY SUM
SELECT COUNT(T1.paper_id) FROM citation AS T1 INNER JOIN papers AS T2 ON T1.paper_id = T2.paper_id WHERE T1.cited_pap = 'D12-1027'</sql>
SELECT DISTINCT T1.paper_id , SUM(IIF(T1.`Cited_Paper_ID` IS NULL AND T2.`cited_paper_id` IS NOT NULL, 1, 0)) AS total_cited, COUNT(T2.affiliation_
SELECT DISTINCT T1.paper_id , SUM(T2.`cited_paper_id`) FROM ( SELECT T3.paper_id, COUNT(`cited_pap`) AS num AS cnt FROM Author_list AS T1 INNER JOIN citations AS T2 ON T1.author_
SELECT DISTINCT T1.title FROM ( SELECT DISTINCT T1.`author_id`, SUM(CASE WHEN T1.affiliation = 'Affiliation-34925738' THEN 1 END) AS avg FROM ( SELECT T2.`paper_id` , SUM(
SELECT DISTINCT T1.title FROM Author AS T1 INNER JOIN Citation AS T2 ON T1.author_id = T2.paper_id GROUP BY T1.name ORDER BY COUNT(T2.cited_paper_id) DESC LIMIT 1</sql>
SELECT COUNT(T1.paper_id), SUM(T3.`number`) AS total FROM `Citation` AS T1 INNER JOIN `Paper` AS T2 ON T1.paper_id = T2.paper_id WHERE T3.affiliation_id IN ( SELECT DISTINCT T2
SELECT CAST(COUNT(DISTINCT T3.paper_id) AS DECIMAL) * 2 AS per FROM Affiliation AS T1 INNER JOIN Citation AS T2 ON T2.paper_id = T1.affiliation_id WHERE T1.name
SELECT COUNT(T1.author_id) FROM Affiliation AS T1 INNER JOIN citation AS T2 ON T1.affiliation_id = T2.paper_id WHERE T2.`cited_pap` IS NULL</sql>
SELECT COUNT(T1.cited_paper_id) FROM citation AS T1 INNER JOIN Author AS T2 ON T1.author_id = T2.author_id WHERE T1.name = 'Mckee', T2.name = 'Kathleen'</sql>
SELECT COUNT(T1.paper_id) FROM Author AS T1 INNER JOIN citation AS T2 ON T1.author_id = T2.cited_paper_id WHERE T2.name = 'MCKOWN, KATHLEEN' AND T2.paper_id IS NULL GROUP BY T
SELECT COUNT(T1.paper_id) FROM Author AS T1 INNER JOIN citation AS T2 ON T1.author_id = T2.author_id WHERE T2.cited_pap = 'Mckeown , Kathleen' LIMIT 1</sql>
SELECT DISTINCT T1.name, SUM(T1.`cited_pap`) FROM Affiliation AS T1 INNER JOIN Author AS T2 ON T1.affiliation_id = T2.affiliation_id GROUP BY T1.`author_id` ORDER BY
SELECT DISTINCT T1.name, T2.numCitations FROM Author AS T1 INNER JOIN Citation AS T2 ON T1.author_id = T2.author_id WHERE T3.numCitedPapers > 9 ORDER BY COUNT(T2.
SELECT DISTINCT T1.venue, T2.`year` FROM citation AS T1 INNER JOIN authors AS T2 ON T1.cited_paper_id = T2.author_id WHERE T2.name = 'Mckeown , Kathleen'</sql>
SELECT DISTINCT T1.venue, T2.`year` FROM citation AS T1 INNER JOIN authors AS T2 ON T1.cited_paper_id = T2.author_id WHERE T2.name = 'Mckeown , Kathleen'</sql>
SELECT DISTINCT T1.venue , strftime('%Y', T3.dates) FROM Citation AS T1 INNER JOIN Venue AS T2 ON T1.cited_paper_id = T2.paper_id WHERE T1.conference = 'columbia'</sql>
SELECT T3.title FROM citation AS T1 INNER JOIN publication AS T2 ON T1.paper_id = T2.paper_id WHERE T2.venue IS NULL AND T2.year BETWEEN 1967 & 2008</sql>
SELECT DISTINCT T1.name FROM Affiliation AS T1 INNER JOIN citation AS T2 ON T1.affiliation_id = T2.author_id GROUP BY T2.author_id ORDER BY COUNT(T2.`cited paper id`) DESC LIMIT 1</sql>
SELECT DISTINCT T1.name FROM Affiliation AS T1 INNER JOIN `Author` AS T2 ON T1.affiliation_id = T2.affiliation_id GROUP BY t2.author_id ORDER BY COUNT(t2) DESC LIMIT 1</sql>
SELECT DISTINCT T1.affiliation_id, SUM(T2.cited_paper_id) AS total FROM Affiliation AS T1 INNER JOIN Citation AS T2 ON T1.affiliation_id = T2.author_id WHERE
SELECT T1.affiliation_id FROM Affiliation AS T1 INNER JOIN Citation AS T2 ON T1.affiliation_id = T2.author_id WHERE strftime( '%Y', T2.`cited-paper`) AND T2.year IN ( SELECT DIST
SELECT COUNT(T1.paper_id) FROM Affiliation AS T1 INNER JOIN `Citation` AS T2 ON T1.affiliation_id = T2.cited_paper_id WHERE CAST(STRFTIME('%Y', T2.cited_pap.timestamp
SELECT COUNT(T1.paper_id) FROM Affiliation AS T1 INNER JOIN `Citation` AS T2 ON T1.affiliation_id = T2.cited_paper_id WHERE CAST(STRFTIME('%Y', T2.cited_pap
SELECT COUNT(T1.paper_id) FROM Affiliation AS T1 INNER JOIN `Citation` AS T2 ON T1.affiliation_id = T2.cited_pap WHERE strftime('%Y', T1.name) BETWEEN
SELECT COUNT(T1.paper_id) FROM Citation AS T1 INNER JOIN Paper AS T2 ON T1.paper_id = T2.paper_id WHERE DATE(T1.`PUBLISHED_YEAR`) BETWEEN '2000
SELECT DISTINCT T1.title FROM Author AS T1 INNER JOIN citation AS T2 ON T1.author_id = T2.author_id GROUP BY T1.paper_id ORDER BY COUNT(T1.cited_paper_id) DESC LIMIT 1</sql>
SELECT DISTINCT T1.title FROM Author AS T1 INNER JOIN citation AS T2 ON T1.author_id = T2.author_id ORDER BY COUNT(T2.paper_id) DESC LIMIT 1</sql>
SELECT COUNT(T1.author_id) FROM Affiliation AS T1 INNER JOIN Citation AS T2 ON T1.affiliation_id = T2.paper_id WHERE T1.`name` = 'Mckeown, Katherine'</sql>
SELECT COUNT(T1.author_id) FROM Author AS T1 INNER JOIN citation AS T2 ON T1.author_id = T2.paper_id WHERE T1.name LIKE '%McKee%' AND T2.cited_paper = 'Mckeown, Kathleen'
SELECT DISTINCT T1.name AS author_id,T3.affiliation FROM Author AS T1 INNER JOIN Citation AS T2 ON T1.author_id = T2.author_id INNER JOIN Paper AS T3 ON T2.paper_id = T3.c
SELECT DISTINCT T1.name FROM Affiliation AS T1 INNER JOIN authors AS T2 ON T1.affiliation_id = T2.affiliation_id WHERE T1.Name IN ( SELECT DISTINCT T1.name FROM Citation
SELECT DISTINCT T1.paper_id FROM citation AS T1 INNER JOIN `author` AS T2 ON T1.cited_paper_id = T2.author_id WHERE T1.keyword IN ('translation') ORDER BY T2.name</sql>
SELECT DISTINCT T1.paper_id FROM citation AS T1 INNER JOIN authors AS T2 ON T1.author_id = T2.author_id WHERE T1.cited_pap LIKE '%Trans%'</sql>
SELECT T3.paper_id, T1.title FROM ( SELECT DISTINCT T3.paper_id AS cited_paper_id , T2.title AS citation FROM Citation AS T1 INNER JOIN authors AS T2 ON T1.cited_paper_id = T2.paper_
SELECT T3.cited_paper_id FROM Affiliation AS T1 INNER JOIN Author AS T2 ON T1.affiliation_id = T2.author_id WHERE T1.address IS NULL AND T2.name = '' GROUP BY t1.affiliation_id ORDER BY COUNT(
SELECT DISTINCT T1.name FROM Affiliation AS T1 INNER JOIN `Citation` AS T2 ON T1.affiliation_id = T2.cited_paper_id GROUP BY T1.affiliation ORDER BY COUNT(T2.paper_
SELECT DISTINCT T1.affiliation_id FROM Affiliation AS T1 INNER JOIN citation AS T2 ON T1.affiliation_id = T2.paper_id WHERE strftime('%J', T2.`cited-paper
SELECT SUM(COUNT(DISTINCT T1.paper_id)) / COUNT(DISTINCT t2.Paper) AS num FROM Citation AS T1 INNER JOIN Paper AS T2 ON T1.cited_paper_id = T2.`published_paper_id` WHERE year IS NULL AND T1
SELECT DISTINCT T1.paper_id FROM Affiliation AS T1 INNER JOIN Paper AS T2 ON T1.affiliation_id = T2.affiliation_id WHERE `Date` BETWEEN '2008' AND '2015' ORDER BY T2.paper
SELECT SUM(SUM(CASE WHEN T1.affiliation IN ('GQN') THEN 1 ELSE 0 END)) AS num , COUNT(T2.paper_id) FROM Affiliation AS T1 INNER JOIN Author AS T2 ON T1.affiliation = T2.affiliation WHERE T1.name =
SELECT DISTINCT COUNT(DISTINCT T1.affiliation_id), SUM(T3.num) FROM Affiliation AS T1 INNER JOIN Citation AS T2 ON T1.affiliation_id = T2.paper_id WHERE T2.paper_id IS NOT NULL GROUP BY T3.num ORDER
SELECT DISTINCT T1.title FROM citation AS T1 INNER JOIN paper AS T2 ON T1.paper_id = T2.paper_id WHERE T2.numCited < 50 GROUP BY T1.paper_id ORDER BY SUM(T1.numCited) DESC LIMIT 1
SELECT DISTINCT T1.title FROM citation AS T1 INNER JOIN papers AS T2 ON T1.paper_id = T2.paper_id WHERE T2.total_citations >  50 ORDER BY T1.paper_id LIMIT 1</sql>
SELECT COUNT(T1.author_id) AS num FROM author AS T1 INNER JOIN Citation AS T2 ON T1.author_id = T2.paper_id WHERE T2.`cited_pap` > 50 LIMIT 1</sql>
SELECT COUNT(T1.author_id) FROM Affiliation AS T1 INNER JOIN citation AS T2 ON T1.affiliation_id = T2.paper_id WHERE T2.`cited_paper_id` > '50' AND T1.name != 'Jürgen
SELECT DISTINCT T1.name FROM Affiliation AS T1 INNER JOIN author AS T2 ON T1.affiliation_id = T2.affiliation_id WHERE strftime('%Y', T2.date) IN ( '200
SELECT DISTINCT T1.name FROM Author AS T1 INNER JOIN citation AS T2 ON T1.author_id = T2.paper_id WHERE T2.cited_pap BETWEEN '2009' AND '2014
SELECT DISTINCT T1.name FROM Author AS T1 INNER JOIN citation AS T2 ON T1.author_id = T2.author_id WHERE T2.paper_id IS NULL LIMIT 1</sql>
SELECT DISTINCT T1.name FROM Author AS T1 INNER JOIN citation AS T2 ON T1.author_id = T2.cited_paper_id WHERE T2.author_id IS NULL AND T2.paper_id IS NULL AND T2.cited_paper_id IS
SELECT COUNT(T1.Conference_Name), T2.Conference_Location FROM institution AS T1 INNER JOIN conference AS T2 ON T1.Institution_ID = T2.Staff_ID WHERE T2.Year BETWEEN 96 AND 2020 ORDER BY T2.Date LIMIT 1</sql>
SELECT COUNT(T1.Conference_ID), T2.`Conference_Name`, COUNT(DISTINCT T2.Institution_ID) FROM conference AS T1 INNER JOIN institution AS T2 ON T1.Conference_ID = T2.Conference_ID GROUP BY T1.conference_name ORDER BY COUNT(T1.Conference_ID) DESC LIMIT 1</sql>
SELECT T1.name FROM conference AS T1 INNER JOIN institution AS T2 ON T1.Conference_ID = T2.Institution_ID WHERE T2.location IS NOT NULL ORDER BY T2.Name</sql>
SELECT DISTINCT T2.name FROM "institution AS T1 INNER JOIN "conference AS T2 ON T1.Institution_ID = T2.Conference_ID WHERE T2.CONFERENCE_NAME LIKE 'sample%' GROUP BY T2.conference_name ORDER BY COUNT(T1.location) DESC LIMIT 1</sql>
SELECT DISTINCT T2.Conference_Name, T3.Year, T1.location FROM "conference AS T1 INNER JOIN conference AS T2 ON T1.Conference_ID = T2.Conference_ID INNER JOIN ( SELECT T0.name , MAX(T0.Year) AS Year FROM `staff` AS T0 INNER JOIN `conference AS T3 ON T0.Staff_ID = T3.Staff_ID
SELECT DISTINCT T2.name, T3.year FROM conference AS T1 INNER JOIN institution AS T2 ON T1.conference_id = T2.Conference_ID WHERE T1.location IS NULL AND T2.Institution_Name <> 'UNK'</sql>
SELECT DISTINCT T2.name, COUNT(T1.conference_ID) FROM conference AS T1 INNER JOIN `staff` AS T2 ON T1.Conference_ID = T2.Staff_ID GROUP BY T2.Name ORDER BY T2.Age DESC LIMIT 1</sql>
SELECT COUNT(T1.name), SUM(T2.nationality) AS total FROM conference AS T1 INNER JOIN "conference" AS T2 ON T1.Conference_ID = T2.Conference_ID GROUP BY T2.conference_name ORDER BY COUNT(T1.name) DESC LIMIT 1</sql>
SELECT SUM(YEAR), COUNT(DISTINCT T2.CONFERENCE_ID) FROM institution AS T1 INNER JOIN conference AS T2 ON T1.Institution_ID = T2.Conference_ID GROUP BY T2.Year</sql>
SELECT COUNT(T1.Conference_ID), T2.`Year`, T2.Name FROM institution AS T1 INNER JOIN conference AS T2 ON T1.Institution_ID = T2.Conference_ID GROUP BY T1.Staff_ID ORDER BY COUNT(T2.Date) DESC LIMIT 3</sql>
SELECT MAX(DISTINCT T2.year) - COUNT(T1.name) AS total FROM institution AS T1 INNER JOIN conference AS T2 ON T1.Institution_ID = T2.Conference_ID GROUP BY T1.institution, T1.location ORDER BY SUM(IIF(T1."Total" IS NULL AND T3.total BETWEEN 1 AND 8)) - COUNT(T2.name) AS min ORDER
SELECT COUNT(T1.Conference_ID), T2.`Year` FROM 'institution AS T1 INNER JOIN conference AS T2 ON T1.Institution_ID = T2.Conference_ID GROUP BY T2.Year ORDER BY SUM(DISTINCT T1.Conference_Name) - COUNT(T2.Conference_ID) LIMIT 1</sql>
SELECT T1.location FROM conference AS T1 INNER JOIN conference_participation AS T2 ON T1.conference_id = T2.Conference_ID WHERE T1.Location IN ( SELECT DISTINCT T3.location FROM `conference` AS T3 INNER JOIN `staff` AS T4 ON T2.Staff_ID  = T4.Staff_ID WHERE T4.name = 'Allen' AND T3.Con
SELECT T1.location FROM conference AS T1 INNER JOIN location AS T2 ON T1.Conference_ID = T2.Conference_ID GROUP BY T1.Location HAVING COUNT(DISTINCT T1.Conference_ID) > 2 AND SUM(T1.PRIMARY KEY (staff_ID)) IN ( SELECT SUM (SUM(CASE WHEN conference.year != '1986' THEN CONVERT(T2.location
SELECT DISTINCT T2.Institution_Name, T3.location, CAST(STRFTIME('%Y', T1.Founded) AS datetime) FROM "conference" AS T1 INNER JOIN institution AS T2 ON T1.Conference_ID = T2.Institution_ID INNER JOIN `staff` AS T3 ON T2.Staff_ID = T3.Staff_ID WHERE T2.Institution_Name =
SELECT DISTINCT T2.name, T3.location, T1.founded FROM institution AS T1 INNER JOIN conference AS T2 ON T1.Institution_ID = T2.Conference_ID INNER JOIN staff AS T3 ON T3.staff_ID = T2.staff_ID ORDER BY T1.name, strftime('%J', T1.Created), strftime('%Y', T1.Founded
SELECT COUNT(Institution_ID) FROM "institution WHERE Foundation BETWEEN '2013' AND '1900'" GROUP BY Institution_ID ORDER BY Founded DESC LIMIT 4</sql>
SELECT COUNT(T2.Institution_ID), T3.`Year`, strftime('%J', T3.Founded) FROM institution AS T1 INNER JOIN staff AS T2 ON T2.Staff_ID = T1.Staff_ID WHERE strftime('%J', T3.Founded) BETWEEN '600' AND 1897 AND 'T1' INTERSECT SELECT COUNT(T2
SELECT T1.institution_name, T2.location FROM institution AS T1 INNER JOIN conference_participation AS T2 ON T1.Institution_ID = T2.staff_ID WHERE T2.conference IS NULL GROUP BY T2.institution ORDER BY T2.instance DESC LIMIT 1</sql>
SELECT DISTINCT T2.name, T3.location FROM "institutions" AS T1 INNER JOIN `conferences` AS T2 ON T1.Institution_ID = T2.Conference_ID INNER JOIN "staff" AS T3 ON T1.Staff_ID = T3.staff_ID ORDER BY T2.Year DESC LIMIT 1</sql>
SELECT DISTINCT T2.Institution_Name, COUNT(T1.Institution_ID) FROM conference AS T1 INNER JOIN "staff" AS T2 ON T1.Conference_ID = T2.Staff_ID WHERE T1."Year" > 1800</sql>
SELECT T2.name, COUNT(T1.staff_id), strftime('%J', T1.Founded) FROM `institution` AS T1 INNER JOIN `conference` AS T2 ON T1.Institution_ID = T2.Conference_ID WHERE strftime('%Y', T1.Founded) >= 1800 GROUP BY T1.staff_id ORDER BY COUNT(T1.staff
SELECT DISTINCT T2.institution_name FROM conference AS T1 INNER JOIN staff AS T2 ON T1.conference_id = T2.staff_id WHERE T2.name = 'No Staff'</sql>
SELECT DISTINCT T2.institution_name FROM conference AS T1 INNER JOIN "staff" AS T2 ON T1.Conference_ID = T2.Staff_ID WHERE T2.Nationality = 'United States of America' AND T1.Location IS NULL</sql>
SELECT DISTINCT T2.name FROM "staff AS T1 INNER JOIN conference AS T2 ON T1.staff_id = T2.staff_ID WHERE CAST(STRFTIME('%Y', T1.year) AS INT) BETWEEN 60405 AND 65493 ORDER BY strftime('%Y', T1.year), (strftime('%M', T2.year))
SELECT DISTINCT T2.name FROM conference AS T1 INNER JOIN staff AS T2 ON T1.conference_id = T2.staff_ID WHERE T1.year BETWEEN 2003 AND 2025</sql>
SELECT CAST(SUM(CASE WHEN T2.Nationality = 'United states' THEN T1.age ELSE NULL END)) AS float, SUM(CASE WHEN T2.Nationality = 'United states' THEN T1.age ELSE NULL END) / COUNT(T1.Staff_ID) FROM `conference` AS T1 INNER JOIN institution AS T2 ON T1.Conference_ID = T2.Institution_ID WHERE T2.
SELECT DISTINCT MAX(age), MIN(age) FROM staff GROUP BY staff ORDER BY age DESC LIMIT 1</sql>
SELECT DISTINCT T2.name FROM conference AS T1 INNER JOIN conference_participation AS T2 ON T1.conference_id = T2.Conference_ID WHERE T2.country = 'Canada'</sql>
SELECT DISTINCT T2.name FROM conference AS T1 INNER JOIN conference_participation AS T2 ON T1.conference_ID = T2.Conference_ID WHERE T2.country = 'canada' AND T2.role IN ('Host', 'Facilitator')</sql>
SELECT DISTINCT T2.name FROM "conference AS T1 INNER JOIN `staff AS T2 ON T1.Conference_ID = T2.Staff_ID WHERE T2.name IN ('Speaker', 'Sponsor') AND T1.Year BETWEEN 1983 AND 1996 GROUP BY T2.name</sql>
SELECT DISTINCT T2.name FROM conference AS T1 INNER JOIN "staff" AS T2 ON T1.Conference_ID = T2.Staff_ID WHERE T1.Location LIKE '%Chicago%' AND T1.Nationality = 'US' GROUP BY T2.Name ORDER BY COUNT(T3.Name) DESC LIMIT 3</sql>
SELECT DISTINCT T2.name FROM conference AS T1 INNER JOIN staff AS T2 ON T1.conference_id = T2.staff_ID WHERE T2.nacl != 'ACL' AND T1.country = 'asia'</sql>
SELECT DISTINCT T2.name FROM conference AS T1 INNER JOIN participation AS T2 ON T1.conference_ID = T2.Conference_ID WHERE T1.location = 'nacl' AND T1.year = '2021' GROUP BY T2.staff_id ORDER BY DISTINCT T2.name</sql>
SELECT DISTINCT T1.name FROM "staff" AS T1 INNER JOIN conference AS T2 ON T1.Staff_ID = T2.Staff_ID WHERE T2.`Conference_Name` LIKE '2003%' OR T2.Year LIKE '2004%'</sql>
SELECT DISTINCT T1.name FROM "staff" AS T1 INNER JOIN conference_participation AS T2 ON T1.staff_ID = T2.Staff_ID WHERE (T1.Age BETWEEN '30' AND '65') OR strftime('%Y', T1.Institution_Date) BETWEEN 2003 AND 2004 GROUP BY T1.name ORDER BY
SELECT DISTINCT T2.Conference_Name, T2.Year FROM Conference AS T1 INNER JOIN Conference_participation AS T2 ON T1.Conference_ID = T2.conference_id WHERE T1.Location LIKE '%newton%' ORDER BY T2.year DESC LIMIT 1</sql>
SELECT DISTINCT T2.name AS conference , CAST(T1.Year AS varchar) + ': ' AS str FROM `conference` AS T1 INNER JOIN `staff` AS T2 ON T1.Conference_ID = T2.Staff_ID WHERE T1.Conference_Name = ''Summer'' ORDER BY T1.Year DESC</sql>
SELECT DISTINCT T1.name FROM conference AS T1 INNER JOIN staff AS T2 ON T1.Conference_ID = T2.Staff_ID ORDER BY SUM(T1.NumAttendants) DESC LIMIT 2</sql>
SELECT DISTINCT T1.name FROM conference AS T1 INNER JOIN staff AS T2 ON T1.Conference_ID = T2.Staff_ID ORDER BY T2.PRIMARYKEY('staff_id') DESC LIMIT 2</sql>
SELECT DISTINCT T2.name, T2.nationality FROM "institution" AS T1 INNER JOIN conference_participation AS T2 ON T1.Institution_ID = T2.Staff_ID WHERE T2.`role` NOT IN ( SELECT DISTINCT T3.`Role` FROM institution AS T3 INNER JOIN conference AS T4 ON T2.Staff_ID = T4.staff_id WHERE T1.Institution
SELECT DISTINCT T2.name, T2.nationality FROM conference AS T1 INNER JOIN participation AS T2 ON T1.Conference_ID = T2.conference_id WHERE T2.role = 'unknown' AND NOT T1.participated IN ( SELECT T1.Participated FROM participant AS T1 INNER JOIN participation AS T2 ON T1.Staff_ID = T2.staff_ID WHERE T2.
SELECT DISTINCT T1.name, T1.location FROM institution AS T1 INNER JOIN conference AS T2 ON T1.Institution_ID = T2.Conference_ID WHERE strftime('%Y', T2.Date) = '2004' AND T2.Included IN ( SELECT T1.name, T1.location FROM institution AS T1 INNER JOIN conference AS T2 ON T1.Institution_ID = T2
SELECT DISTINCT T1.name, T1.location FROM conference AS T1 INNER JOIN `staff` AS T2 ON T1.Conference_ID = T2.Staff_ID WHERE strftime('%Y', T1.Created) = '2004' AND NOT T2.Nationality = 'United States of America'</sql>
SELECT T3.pilot_name FROM pilots AS T1 INNER JOIN hangars AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.age > ( SELECT MAX(T2.location) FROM hangar AS T3 )</sql>
SELECT T3.pilot_name FROM pilots AS T1 INNER JOIN hangars AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.age > ( SELECT MAX(T2.age) FROM ( SELECT T1.pilot_name, COUNT(T3.pilot_name), T1.pilot_id AS id , SUBSTR(SUBSTR(T1.location, 
SELECT T3.pilot_name, avg(T2.age), T1.location ORDER BY T2.age DESC LIMIT 1</sql>
SELECT T3.pilot_name FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name WHERE T1.location = 'north' ORDER BY T2.`age` DESC LIMIT 3</sql>
SELECT DISTINCT T2.pilot_name FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name WHERE T1.location = 'Waco,TX' AND T1.age < 30</sql>
SELECT DISTINCT T2.pilot_name, T2.plane_name, T1.age FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.age BETWEEN 30 AND 50</sql>
SELECT T2.pilot_name FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T2.location IS NOT NULL AND T1.age BETWEEN 35 AND 45 GROUP BY T2.planemaker ORDER BY COUNT(T2.planemaker) DESC LIMIT 1</sql>
SELECT T2.pilot_name FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name WHERE T2.age BETWEEN 34 AND 50 AND T1.location = 'miami'</sql>
SELECT T3.location FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.plane_name = 'F-14 Fighter'</sql>
SELECT T3.location FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name WHERE T1.planes LIKE '%F-14%'</sql>
SELECT COUNT(T2.pilot_name), T2.location FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.plane_name IN ( SELECT plane_name FROM PilotSkills GROUP BY aircraft_name )</sql>
SELECT COUNT(DISTINCT T2.location), T1.pilot_name FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name WHERE location IS NOT NULL GROUP BY T1.pilot_name ORDER BY COUNT(T1.pilot_name) DESC LIMIT 1</sql>
SELECT T3.pilot_name FROM Pilots AS T1 INNER JOIN Hangars AS T2 ON T1.plane_name = T2.plane_name WHERE T1.age BETWEEN 1 AND 46 IN ORDER BY strftime('%J', T1.`timestamp`)</sql>
SELECT T2.pilot_name FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T2.location = 'Tokyo' LIMIT 1</sql>
SELECT COUNT(pilot_name) FROM Hangar WHERE age BETWEEN '40' AND '60' GROUP BY pilot_name ORDER BY COUNT(pilot_name) DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T2.pilot_name) FROM Pilots AS T1 INNER JOIN Hangars AS T2 ON T1.plane_name = T2.plane_name GROUP BY T1.age ORDER BY COUNT(T2.plane_name) DESC LIMIT 1</sql>
SELECT COUNT(pilot_name) FROM pilots WHERE age < ( SELECT MIN(age) FROM Hangar WHERE aircraft_name = 'Bomber' AND location LIKE '% % ') GROUP BY pilot_name ORDER BY COUNT(pilot_name) DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T1.pilot_name) FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.age < 34 GROUP BY T1.pilot_name ORDER BY COUNT(DISTINCT T1.pilot_name) DESC LIMIT 1</sql>
SELECT T3.pilot_name FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name ORDER BY age LIMIT 1, 1</sql>
SELECT T3.pilot_name FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name ORDER BY age DESC LIMIT 1</sql>
SELECT T3.pilot_name FROM Pilots AS T1 INNER JOIN hangars AS T2 ON T1.pilot_name = T2.plane_name GROUP BY T3.plane_name ORDER BY COUNT(T1.pilot_name) DESC LIMIT 1</sql>
SELECT T3.pilot_name FROM Hangar AS T1 INNER JOIN Pilots AS T2 ON T1.plane_name = T2.pilot_name ORDER BY T1.`number` DESC LIMIT 1</sql>
SELECT T3.pilot_name FROM Pilots AS T1 INNER JOIN hangars AS T2 ON T1.plane_name = T2.plane_name ORDER BY total_appearances = ( SELECT SUM(T2.appearance) - ( SELECT COUNT(T2.location) AS avg FROM Hangar AS T3 INNER JOIN Pilots AS T4 ON T1.pilot_name = T4.pilot_name WHERE
SELECT T3.plane_name FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name ORDER BY (T2.location - COUNT(T2.pilot) / 100) DESC LIMIT 1</sql>
SELECT COUNT(pilot_name) FROM PilotSkills WHERE location = 'Chicago' AND aircraft_name = 'Cessna Citation XLSL'</sql>
SELECT COUNT(pilot_name) FROM PilotSkills WHERE location = 'Chicago'</sql>
SELECT T3.pilot_name FROM Pilots AS T1 INNER JOIN Hangars AS T2 ON T1.plane_name = T2.plane_name WHERE T1.age BETWEEN 0 AND 56 LIMIT 1</sql>
SELECT T3.pilot_name FROM Pilots AS T1 INNER JOIN Hangars AS T2 ON T1.pilot_name = T2.plane_name WHERE T2.location = 'New York City' AND T3.age  = 41</sql>
SELECT COUNT(DISTINCT T2.pilot_name) FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.age >= 24 GROUP BY T2.planes ORDER BY COUNT(T2.planes) DESC LIMIT 3</sql>
SELECT COUNT(DISTINCT T2.pilot_name) FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.age >= 48 AND T1.location IS NOT NULL ORDER BY T2.plane_name DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T2.pilot_name) FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name WHERE T1.location IS NOT NULL ORDER BY T2.age DESC LIMIT 1</sql>
SELECT COUNT(pilot_name) FROM Hangar WHERE plane_name IN ( 'Smith' , 'Kenny' )</sql>
SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > ( SELECT MAX(age) FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.pilot_name = T2.plane_name)</sql>
SELECT COUNT(*) FROM PilotSkills WHERE age > 40 AND T2.pilot_name = 'John' GROUP BY T1.pilot_name ORDER BY COUNT(T1.plane_name) DESC LIMIT 1</sql>
SELECT T2.pilot_name FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T2.location BETWEEN 30 AND 40 ORDER BY T2.age</sql>
SELECT T2.pilot_name FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name ORDER BY (T1.age BETWEEN 30 AND 40) DESC LIMIT 1</sql>
SELECT DISTINCT T2.pilot_name FROM Pilots AS T1 INNER JOIN Hangars AS T2 ON T1.plane_name = T2.plane_name ORDER BY T2.location DESC LIMIT 1</sql>
SELECT T3.pilot_name, AVG(T2.age), T1.pilot_name FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name ORDER BY T2.location</sql>
SELECT DISTINCT T2.location FROM Hangar AS T1 INNER JOIN pilots AS T2 ON T1.plane_name = T2.pilot_name ORDER BY T2.name</sql>
SELECT DISTINCT T2.location FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name ORDER BY T1.plane_name</sql>
SELECT T3.type FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name ORDER BY T1.pilot_name DESC LIMIT 1</sql>
SELECT DISTINCT T2.pilot_name FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name ORDER BY T1.location</sql>
SELECT COUNT(DISTINCT T2.pilot_name) FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.age > 40 OR T1.age < 30 GROUP BY T2.planemaker ORDER BY COUNT(T2.pilot_name) DESC LIMIT 1</sql>
SELECT COUNT(pilot_name) FROM pilots WHERE age > 4 AND age < 30 GROUP BY pilot_name ORDER BY COUNT(pilot_name) LIMIT 1</sql>
SELECT T2.pilot_name, T2.plane_name FROM ( SELECT DISTINCT T2.pilot_name , CAST(T2.age AS REAL) AS float FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name ORDER BY T1.years_held ASC ) AS T1, T1.pilot_name
SELECT T2.pilot_name, T2.plane_name FROM pilots AS T1 INNER JOIN hangars AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.age BETWEEN 25 AND 30 AND T2.location LIKE 'Piper%Cub%'</sql>
SELECT DISTINCT T3.pilot_name FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name WHERE T2.pilot_name NOT IN ( SELECT T2.pilot_name FROM Hangar AS T2 INNER JOIN PilotSkills AS T3 ON T2.plane_name = T3.pilot_name WHERE T1
SELECT DISTINCT T3.pilot_name FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name WHERE T1.location != 'bomb' AND T2.plane_name = 'piper cub'</sql>
SELECT DISTINCT T3.pilot_name FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name WHERE T1.location = 'USA' AND T1.plane_name IN ('PiperCub', 'BombA')</sql>
SELECT DISTINCT T3.pilot_name FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name WHERE T1.location IN ( 'r-03897', 'r-67940' ) GROUP BY T1.pilot_name ORDER BY COUNT(T2.planes) DESC LIMIT 1</sql>
SELECT T3.age / COUNT(T2.pilot_name), strftime('%J', T3.location) AS avg , min(T1.avg) FROM Pilots AS T1 INNER JOIN Hangars AS T2 ON T1.pilot_name = T2.plane_name WHERE T2.location != 'unknown' ORDER BY strftime('%J', T3.location) DESC LIMIT 1</sql
SELECT SUM(AVG(age)) / COUNT(pilot_name), T2.min_age FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name ORDER BY T1.location, T1.`TIMESTAMP` DESC LIMIT 1</sql>
SELECT DISTINCT T2.pilot_name FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.location IN ('Austin', 'Boston')</sql>
SELECT DISTINCT T2.pilot_name FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name WHERE T1.location IN ('Austin', 'Boston')</sql>
SELECT DISTINCT T2.pilot_name FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.pilot_name LIKE '%P-10%' OR T1.plane_name LIKE '%F-%14%'</sql>
SELECT DISTINCT T2.pilot_name FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.age BETWEEN 60 AND 70 ORDER BY T2.location, T1.`class` DESC LIMIT 1</sql>
SELECT avg(T2.age) FROM ( SELECT T3.plane_name AS flight_type , AVG(T3.pilot_name) AS avgFROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name INNER JOIN FlightType AS T3 ON T3.plane_name = T1.flight_type GROUP BY flight_type ORDER BY
SELECT AVG(T2.age), T2.pilot_name FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name GROUP BY T1.pilot_name ORDER BY SUM(T1.age) DESC</sql>
SELECT COUNT(T2.pilot_name), T1.location FROM ( SELECT plane_name AS pilot_name , aircraft_type, group_by(plane_name) AS grp FROM ( SELECT T3.plane_name AS aircraft_type UNION ALL SELECT 'T3' AS aircraft_type FROM pilots WHERE type = 'F27-A182M' GROUP BY plane_name ) AS T2 INNER JOIN hangars AS T1 ON
SELECT COUNT(T2.pilot_name), T1.location FROM ( SELECT T2.plane_name , SUM(CASE WHEN T1.pilot_name IS NULL THEN 0 END) AS num FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name GROUP BY T2.plane_name ORDER BY COUNT(T2.pilot_name)
SELECT T3.pilot_name, AVG(T2.age) AS age FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name INNER JOIN ( SELECT T2.plane_name ,  min(T2.years) AS minAge FROM pilotskills AS T1 INNER JOIN hangars AS T3 ON T1.pilot_name = T
SELECT T3.plane_name, MAX(T2.age), T3.`pilot_name` FROM Pilots AS T1 INNER JOIN Hangars AS T2 ON T1.pilot_name = T2.plane_name ORDER BY T2.location</sql>
SELECT DISTINCT T2.pilot_name FROM ( SELECT DISTINCT T2.pilot_name, strftime('%J', T1.location), T1.`type`, 'Aircraft' AS aircraft_type, strftime('%Y', T2.planet_name) AS aircraft_age , T1.date FROM Pilots AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name
SELECT T3.plane_name, T2.pilot_name FROM ( SELECT T1.plane_name AS pilot_name , MAX(T2.location) AS x FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name GROUP BY T1.planes_name ) AS T3 INTERSECT SELECT T1.plane_name, T2.p
SELECT DISTINCT T2.pilot_name, SUM(T3.`age`) AS total FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name GROUP BY T2.pilot_name ORDER BY MAX(`T1.age`) DESC LIMIT 1</sql>
SELECT DISTINCT T2.pilot_name, SUM(T3.`age`) AS total FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name GROUP BY T1.pilot_name ORDER BY MAX(T1.`age`) DESC LIMIT 4</sql>
SELECT avg(T2.age), T3.pilot_name , SUM(T1.plane_name) FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name INNER JOIN City AS T3 ON T2.location = T3.city WHERE T3.location = 'new york city'</sql>
SELECT DISTINCT T2.location, SUM(T3.`pilot` INTEGER) FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name WHERE T1.location IS NOT NULL GROUP BY T2.location ORDER BY AVG(T2.age) DESC LIMIT 3</sql>
SELECT SUM(T2.pilot_name), AVG(T2.age) FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name GROUP BY T2.location ORDER BY COUNT(T1.pilot_name) BETWEEN 1 AND 30 DESC LIMIT 2</sql>
SELECT AVG(T2.plane_name), COUNT(DISTINCT T2.pilot_name) FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T2.pilot_name = T1.pilot_name GROUP BY T1.PLACEMENT ORDER BY CAST(T1.PLACEMENT AS INT) LIMIT 1</sql>
SELECT T3.location FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name ORDER BY T1.age / 100 - 5 DESC LIMIT 1</sql>
SELECT T3.location FROM PilotSkills AS T1 INNER JOIN Hangars AS T2 ON T1.pilot_name = T2.plane_name ORDER BY T1.`age` LIMIT 1</sql>
SELECT T3.pilot_name, T2.age FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name WHERE T1.location = 'Austin'</sql>
SELECT T3.pilot_name, T2.location FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name WHERE T1.location IS NULL AND T3.pilot_name IN ( SELECT T2.pilot_name ,  MAX(T2.age) FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T
SELECT DISTINCT T2.pilot_name FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name WHERE T1.location LIKE '%Pi%' ORDER BY age DESC LIMIT 1</sql>
SELECT T3.pilot_name FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.pilot_name WHERE T2.age BETWEEN 0 AND ( SELECT MAX(T2.age) FROM pilotskills AS T3 WHERE T3.pilot_name = 'Pilot P21397' ORDER BY T2.pilot_
SELECT COUNT(DISTINCT T2.pilot_name) FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.age > 92 AND T2.location = 'USA'</sql>
SELECT COUNT(DISTINCT T2.pilot_name) FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.age > 68 AND T2.location = 'fl39' GROUP BY t2.plane_name ORDER BY COUNT(T1.pilot_name) DESC LIMIT 1</sql>
SELECT DISTINCT T2.pilot_name FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.name LIKE '%Bomb%' GROUP BY T2.pilot_name ORDER BY COUNT(T1.pilot_name) DESC LIMIT 3</sql>
SELECT DISTINCT T2.pilot_name FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.age BETWEEN 60 AND 70 AND T2.location = 'military aircraft'</sql>
SELECT COUNT(DISTINCT T2.pilot_name) FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T1.age IS NULL GROUP BY T2.pilot_name ORDER BY COUNT(T1.pilot_name), T2.pilot_name DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T2.pilot_name), T3.`pilot_name` FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.pilot_name = T2.plane_name WHERE T2.location BETWEEN 'youngest' AND 'piper cub' AND T1.age IS NULL</sql>
SELECT DISTINCT T2.Name FROM "spokesman AS T1 INNER JOIN district AS T2 ON T1.Spokesman_ID = T2.District_ID ORDER BY T2."Area_km" DESC LIMIT 1</sql>
SELECT DISTINCT T1.Area, T2.Government_website FROM "spokesman AS T1 INNER JOIN "district AS T2 ON T1.District_ID = T2.District_ID ORDER BY T1.Population DESC LIMIT 1</sql>
SELECT DISTINCT T2.Name, SUM(T1.`Area_km` / ( SELECT SUM(SUM(`Area_km`) AS total FROM district WHERE District_ID = '54') ) - AVG(SUM(`Area_km`)) OFFSET 1000) / ( SELECT SUM(CASE WHEN `District_ID` LIKE '%6797%' THEN `Population` END) AS num FROM districts WHERE Population > ( SELECT CA
SELECT CAST(SUM(DISTINCT T1.Area * 1045469375830213630000) AS REAL), AVG(T1.Area) FROM "district" AS T1 INNER JOIN "spokesman_district" AS T2 ON T1.District_ID = T2.District_ID WHERE T2.PRIMARY KEY (T2.Spokes
SELECT SUM(SUM(CASE WHEN T2.area IS NULL THEN 1 ELSE -1 END)) / COUNT(DISTINCT T2.district_ID) FROM "district" AS T1 INNER JOIN "spokesman" AS T2 ON T2.Spokesman_ID = T1.Spokesman_ID ORDER BY T1.Rank_position DESC LIMIT 3</sql>
SELECT DISTINCT T2.Name, T3.name , T4.Government_website FROM "district" AS T1 INNER JOIN "spokesman" AS T2 ON T1.District_ID = T2.Spokesman_ID ORDER BY T1.Population DESC LIMIT 1</sql>
SELECT DISTINCT T2.name FROM "districts" AS T1 INNER JOIN spokesman AS T2 ON T1.District_ID = T2.District_ID WHERE T2.Name = 'gov'</sql>
SELECT DISTINCT T2.Name, T1.Name FROM "districts" AS T1 INNER JOIN spokesman AS T2 ON T1.District_ID = T2.District_ID WHERE T1.Population BETWEEN 4000 AND 3000</sql>
SELECT DISTINCT T2.name, T1.speech_title FROM District AS T1 INNER JOIN spokesman AS T2 ON T1.District_ID = T2.District_ID WHERE T2.Name = 'Bob'</sql>
SELECT SUM(AVG(T2.Points), T2.Age), AVG(T3.Rank_position) FROM "spokesman" AS T1 INNER JOIN district AS T2 ON T1.District_ID = T2.District_ID WHERE T1.Name LIKE 's%' GROUP BY T2.Rank_position ORDER BY SUM(AVG(T3.Points)) / COUNT(T1) DESC LIMIT 1</sql
SELECT T1.name, T2.points FROM "spokesman" AS T1 INNER JOIN district AS T2 ON T1.District_ID = T2.District_ID ORDER BY strftime('%J', T1.`Start_year`) - strftime('%J', T2.START) ASC LIMIT 1</sql>
SELECT T1.Name FROM "spokesman" AS T1 INNER JOIN district AS T2 ON T1.Spokesman_ID = T2.District_ID ORDER BY T1."Age", T2.START_YEAR LIMIT 1</sql>
SELECT DISTINCT T2.Name, SUM(T1.Points - AVG(T3.Points)) / COUNT(T1.Name) AS avg FROM "spokesman" AS T1 INNER JOIN "spokesman_district" AS T2 ON T1.Spokesman_ID = T2.Spokesman_ID WHERE T2.Density_km * 3 = ( SELECT AVG(DISTINCT T2.Points
SELECT DISTINCT T2.Name FROM ( SELECT T1."District_ID", COUNT(T1."Spokesman_ID") AS num FROM "district" AS T1 INNER JOIN "spokesman" AS T2 ON T1.District_ID = T2.District_ID GROUP BY T2."District_ID ORDER BY SUM(num) DESC LIMIT 1 ) AS T1 ORDER BY COUNT(T1."District_ID
SELECT DISTINCT T1.name FROM "spokesman" AS T1 INNER JOIN `district` AS T2 ON T1.Spokesman_ID = T2.`District_ID`, DATE('2004') AS `Start_Year` WHERE T1.start_year > 2007 ORDER BY T2.name DESC LIMIT 1</sql>
SELECT COUNT(T1.Spokesman_ID), T2.Name FROM ( SELECT T1."District_ID", SUBSTR(T2.Name, 0, CHARINDEX(' ', T1.Name)) AS str FROM "district" AS T1 INNER JOIN spokesman AS T2 ON T1.District_ID = T2.District_ID WHERE T2.Rank = 'Spokesman' GROUP BY T2.Name ORDER
SELECT DISTINCT T3.name FROM district AS T1 INNER JOIN spokesman AS T2 ON T1.District_ID = T2.District_ID WHERE T2.rank_position IN (1, 2) GROUP BY T2.Rank_position ORDER BY COUNT(DISTINCT T1.district) DESC LIMIT 2</sql>
SELECT T1.Name FROM district AS T1 INNER JOIN spokesman AS T2 ON T1.District_ID = T2.District_ID GROUP BY T1.District_ID HAVING COUNT(T2.Spokesman_ID) > 1</sql>
SELECT COUNT(DISTINCT T1.District_ID), SUM(CASE WHEN T2.Points IS NULL THEN 0 ELSE T2.Points END) AS total FROM ( SELECT DISTINCT T3.District_ID, T3.`Rank position` FROM "spokesman" AS T1 INNER JOIN district AS T2 ON T1.District_ID = T2.District_ID WHERE T2.Name IS NULL AND T2.Pop
SELECT DISTINCT T2.name FROM `spokesman` AS T1 INNER JOIN district AS T2 ON T1.Spokesman_ID = T2.District_ID WHERE T1.`Speach_title` IS NULL AND (T1.`Rank_position` = '10' OR T1.Name LIKE '%Government_(United States)%')</sql>
SELECT T1.Area, SUM(T2.Population) / COUNT(DISTINCT T2.Spokesman_ID), AVG(T2.Population) FROM "district" AS T1 INNER JOIN "spokesman" AS T2 ON T1.District_ID = T2.District_ID GROUP BY T1.Name ORDER BY SUM(T2.Population) / COUNT(DISTINCT T2.Spokesman
SELECT T2.title FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID WHERE DATE(T2.`date`) BETWEEN '2007-2008' AND '2023' ORDER BY date(`year`) DESC LIMIT 1</sql>
SELECT DISTINCT T1.title FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID WHERE T2.`year` IS NULL ORDER BY T1.`year`,T2.lname DESC LIMIT 1</sql>
SELECT T2.title, T1.location FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID ORDER BY CAST(STRFTIME('%J', T1.birthYear) - '84') DESC LIMIT 2</sql>
SELECT DISTINCT T1.title, T2.location FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.artistID WHERE T1.year BETWEEN 1846 AND 1900 INTERSECT SELECT T3.title, T2.location FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID =
SELECT DISTINCT T1.title FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T2.location LIKE 'gallery 226%' LIMIT 1</sql>
SELECT DISTINCT T1.title FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T2.location IN ('Gallery', 'Park') ORDER BY T3.year DESC LIMIT 1</sql>
SELECT T2.title, T3.location FROM Paintings AS T1 INNER JOIN Sculptures AS T2 ON T1.paintingID = T2.paintingID WHERE T2.artistID = '730449'</sql>
SELECT DISTINCT T1.title, T2.location FROM Paintings AS T1 INNER JOIN Sculptures AS T2 ON T1.paintingID = T2.sculptureID WHERE T1.artistID IS NOT NULL LIMIT 1</sql>
SELECT T2.title, T3.location FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID INNER JOIN Artists AS T3 ON T2.artistid = T3.artistID WHERE T3.lname IS NOT NULL AND T3.birthYear IS NOT NULL ORDER BY T2.year DESC LIMIT 5</sql>
SELECT DISTINCT T1.title, T2.location FROM Sculpture AS T1 INNER JOIN Painting AS T2 ON T1.painterID = T2.painterID WHERE T2.artistID IS NOT NULL LIMIT 1</sql>
SELECT DISTINCT T2.medium FROM Paintings AS T1 INNER JOIN sculptures AS T2 ON T1.paintingID = T2.sculptureID WHERE T1.title LIKE '%Penelope%' AND T1.year LIKE '2036%'</sql>
SELECT DISTINCT T2.medium FROM Paintings AS T1 INNER JOIN sculptures AS T2 ON T1.paintingID = T2.sculptureID WHERE T1.title LIKE '%Carpin (medium)%' GROUP BY T1.medium ORDER BY COUNT(T1.PainterID, 'Carpin (medium)') DESC LIMIT 2</sql>
SELECT DISTINCT T2.lname, T2.fname FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistid WHERE T1.year BETWEEN 1963 AND 2018 INTERSECT SELECT T1.lname, T2.fname FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.art
SELECT DISTINCT T2.lname, T3.fname FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistid WHERE T1.year BETWEEN 1950 AND 2008 ORDER BY T1.BirthYear DESC LIMIT 1</sql>
SELECT DISTINCT T1.title, T2.year FROM Sculpture AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistID WHERE NOT T1.location IS NULL AND T1.name NOT IN ( SELECT T3.lname, T3.birthYear FROM Sculptures AS T3 INNER JOIN Location AS T4 ON T2.artistID = T4.artistID WHERE
SELECT DISTINCT T1.title, T2.year FROM Sculpture AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistID WHERE location IS NULL AND artistID NOT IN ( SELECT ARTISTID FROM Sculptures WHERE artistID = '48406' )</sql>
SELECT T1.first, T2.last FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.paintingID WHERE SUBSTR(T2.title, 1, -3) <> 'Artist' ORDER BY T1.year DESC LIMIT 3</sql>
SELECT T2.lname, T3.fname FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistID WHERE SUBSTR(T1.year, 1, -4) = '1900' ORDER BY SUBSTR(T2.`date`, 3, 3) DESC LIMIT 2</sql>
SELECT T1.birthYear FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.paintingID WHERE CAST(strftime('%Y', T2.years) - 2005) BETWEEN 19 AND 1934</sql>
SELECT T1.birthYear, T3.location FROM ( SELECT DISTINCT T2.painterID , SUBSTR(T2.`year`, -4) AS start FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptureID ORDER BY T2.year DESC LIMIT 1 ) AS t1 INNER JOIN Artists AS T3 ON T1.artistID = T3
SELECT DISTINCT T1.lname, T2.fname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.paintingid ORDER BY T1.birthYear / 345897640 - T2.deathyear</sql>
SELECT T2.fname, T3.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.paintingID INNER JOIN sculptures AS T3 ON T2.sculptureID = T3.sculptureID WHERE T2.birthYear BETWEEN 1948 AND 2003</sql>
SELECT MAX(years_alive) FROM Artists WHERE fname = 'Bob' AND deathYear = 2017 AND birthYear < 1936</sql>
SELECT DISTINCT T1.birthYear - T2.deathYear, T2.deathYear FROM artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.paintingID ORDER BY T1.birthYear - T2.deathYear LIMIT 5</sql>
SELECT T2.fname, T2.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.paintingID WHERE T1.deathYear - T2.year BETWEEN 2007 AND 2014 ORDER BY T2.birthYear ASC LIMIT 3</sql>
SELECT DISTINCT T1.lname, T2.birthYear FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistid ORDER BY T2.deathYear DESC LIMIT 2</sql>
SELECT COUNT(paintingID) FROM Paintings WHERE location = 'gallery' AND artistID IN ( SELECT T1.artistID , 28639 AS num FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptor )</sql>
SELECT COUNT(DISTINCT T1.paintingID), SUM(T1.location) FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.sculptureID = T2.artistID GROUP BY T2.location ORDER BY COUNT(T1.location) DESC LIMIT 2</sql>
SELECT COUNT(paintingID) FROM Paintings WHERE lname = 'Vincent van Gogh' ORDER BY MAX(deathYear) DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T1.paintingID) FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistID WHERE T2.lname = 'Scarface' LIMIT 1</sql>
SELECT DISTINCT T1.lname, T2.year FROM artists AS T1 INNER JOIN sculptures AS T2 ON T1.artistID = T2.paintingID WHERE T2.title = 'Mary'</sql>
SELECT DISTINCT T1.title, T1.year FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistID WHERE T1.lname = 'Mary'</sql>
SELECT DISTINCT T2.width_mm, T3.height_mm FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.artistID WHERE T1.birthYear <= 1800 AND T1.deathYear BETWEEN '5' AND INTERSECT ('00047773')</sql>
SELECT DISTINCT T2.height_mm * 3/4 AS w_inches FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.paintingID WHERE T1 BETWEEN '1800 - 1950' AND '2000'</sql>
SELECT DISTINCT T1.location, T1.medium FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistID WHERE T1.lname = 'Pablo' AND T1.fname = 'Pablo'</sql>
SELECT DISTINCT T1.location, T1.medium, T2.Pablo FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T2.lname LIKE '%Pablo%'</sql>
SELECT DISTINCT T1.lname, T2.fname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.paintingid WHERE T2.title IN ('Cactus', 'Storm') AND T2.location LIKE '%Storm%' AND T2.medium = 'polyester'</sql>
SELECT DISTINCT T1.lname, T2.fname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.paintingid INNER JOIN Sculptures AS T3 ON T3.sculptureID = T2.sculptureID ORDER BY T1.birthYear, T2.deathYear LIMIT 4</sql>
SELECT DISTINCT T1.lname, T2.fname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.paintingid WHERE T2.medium = 'oil' AND not T2.mediumOn INTEGER and T2.location LIKE '%print%'</sql>
SELECT DISTINCT T1.lname, T2.fname FROM Painting AS T1 INNER JOIN Sculpture AS T2 ON T1.paintingID = T2.paintingID WHERE T1.medium IN ('oil', 'lio') AND T2.mediumInside IS NULL ORDER BY T2.year DESC LIMIT 1</sql>
SELECT DISTINCT T2.birthYear, T3.location FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistID WHERE T1.year BETWEEN 1984 AND 2017</sql>
SELECT MAX(year) FROM Paintings WHERE T2.year = 1901 AND T2.painterID = '5267'</sql>
SELECT T2.firstname, T3.fname FROM Paintings AS T1 INNER JOIN Sculptures AS T2 ON T1.paintingID = T2.sculptureid WHERE T2.location IS 'gallery 241'</sql>
SELECT DISTINCT T3.fname, T3.lname FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistid WHERE T1.location IN ('Gallery 241', 'Gallery 582') AND T1.medium = 'oil' AND T1.mediumOn = 'baltic glass'</sql>
SELECT SUM(IIF(T1.medium != 'slate' AND T3.location = 'wood') - IIF(T2.medium != 'slate' AND T3.location = 'stucco'), 0, '') FROM ( SELECT 'slate', 'wood' AS location FROM Paintings WHERE T2.medium = 'slate' GROUP BY medium ORDER BY SUM(IIF(T1.medium == 'slate') - IIF
SELECT T1.medium, COUNT(T2.paintingID) FROM artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.paintingID WHERE T1.lname = 'Anna Wintour' GROUP BY T1.medium ORDER BY SUM(COUNT(DISTINCT T2.sculptorID))</sql>
SELECT AVG(T1.height_mm) FROM Paintings AS T1 INNER JOIN Sculptures AS T2 ON T1.paintingID = T2.sculptureID ORDER BY T2.medium, T2.location GROUP BY T2.medium ORDER BY COUNT(DISTINCT T2.scientific_name) FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2
SELECT AVG(T2.height_mm) FROM Paintings AS T1 INNER JOIN Sculptures AS T2 ON T1.paintingID = T2.sculptureID ORDER BY T2.medium, T2.`mediumOn` DESC LIMIT 1</sql>
SELECT SUM(paintings.height_mm) , SUM(paintings.width_mm), COUNT(T2.artistID) FROM ( SELECT T3.location AS x, 'P', 1978 AS y UNION ALL SELECT T5.location AS x, 'R' , -1 UNION SELECT t1.location AS x, 1941 UNION SELECT T3.x AS x, T3.y AS y FROM ( SELECT D
SELECT COUNT(T2.paintingID) FROM Paintings AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T1.year BETWEEN '000' AND '998'</sql>
SELECT DISTINCT T2.title FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID WHERE strftime('%Y', T1.birthYear) IS NULL AND strftime('%J', T1.deathYear) BETWEEN '1904' AND '2000' ORDER BY strftime('%Y', T1
SELECT DISTINCT T2.title FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistID WHERE T2.deathYear < '1978' AND strftime('%Y', T1.birthYear) BETWEEN '2006' AND 2021 GROUP BY T1.paintingID ORDER BY strftime('%Y', T
SELECT DISTINCT T1.painterID FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistID WHERE T1.medium = 'oil' AND T1.location LIKE '%gallery%' GROUP BY T2.fname,T1.lname ORDER BY DISTINCT T2.painterID, strftime('%Y', T2.birthYear
SELECT DISTINCT T1.painterID FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.sculptureID = T2.paintingID WHERE T2.location IS NULL AND T1.medium IS 'oil'</sql>
SELECT DISTINCT T1.title FROM Paintings AS T1 INNER JOIN sculptures AS T2 ON T1.paintingID = T2.sculptureID ORDER BY T1.height_mm DESC LIMIT 1</sql>
SELECT DISTINCT T1.title FROM Paintings AS T1 INNER JOIN Sculptures AS T2 ON T1.paintingID = T2.sculptureID WHERE T2.`height_mm` > ( SELECT MAX(T2.`height_mm`) FROM sculptures WHERE location IS NULL ) AND T1.medium != 'canvas'</sql>
SELECT T1.paintingID FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.artistID WHERE T1.location LIKE '%Gallery%' GROUP BY T1.PaintingID ORDER BY COUNT(T2.painting) DESC LIMIT 1</sql>
SELECT T2.paintingID FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.artistID WHERE T2.deathYear BETWEEN (T3.birthYear - 90) AND (T4.location LIKE 'galerie%') ORDER BY t1.year DESC LIMIT 1</sql>
SELECT DISTINCT T1.paintingID FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.artistID ORDER BY CAST(STRFTIME('%J', T1.year) - '98-' ) DESC LIMIT 2</sql>
SELECT DISTINCT T1.paintingID FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.artistID ORDER BY strftime('%Y', T1.birthYear) DESC LIMIT 1</sql>
SELECT DISTINCT T1.lname, T2.F1 FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.paintingid WHERE T2.title LIKE '%f%M%' OR T2.title LIKE '%F%' AND T2.year LIKE '%Y%'</sql>
SELECT DISTINCT T1.lname, T2.t1.title FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.paintingID = T2.artistID WHERE T1.title IN ( 'woman', 'female' ) AND T2.t3 IS NULL</sql>
SELECT DISTINCT T1.title FROM Paintings AS T1 INNER JOIN sculptures AS T2 ON T1.paintingID = T2.sculptureID WHERE T2.location IN ('Africa', 'Asia')</sql>
SELECT DISTINCT T1.title FROM Paintings AS T1 INNER JOIN sculptures AS T2 ON T1.paintingID = T2.sculptureID WHERE T2.location ORDER BY T2.location ASC LIMIT 1</sql>
SELECT DISTINCT T1.title, strftime('%J', T1.year), T2.location FROM Paintings AS T1 INNER JOIN Sculptures AS T2 ON T1.paintingID = T2.sculptureID ORDER BY strftime('%Y', T1.deathYear) DESC LIMIT 2</sql>
SELECT DISTINCT T1.title FROM Paintings AS T1 INNER JOIN sculptures AS T2 ON T1.paintingID = T2.sculptureID WHERE T2.`height` IN (395, 637, 840) ORDER BY T2.`year` DESC LIMIT 2</sql>
SELECT DISTINCT T2.title, T2.year FROM Paintings AS T1 INNER JOIN Sculptures AS T2 ON T1.paintingID = T2.paintingID WHERE T2.location IS NULL ORDER BY T3.year LIMIT 1</sql>
SELECT DISTINCT T2.title, T2.year FROM Sculpture AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID WHERE T2.year BETWEEN 1900 AND 2008 ORDER BY T1.`name` DESC LIMIT 3</sql>
SELECT DISTINCT T1.title FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID WHERE T1.artistID = 222 LIMIT 1</sql>
SELECT DISTINCT T1.title FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T1.year > 1973 AND T2.lname = 'Tony Tarrant' ORDER BY T1.year ASC</sql>
SELECT DISTINCT T2.paintingID FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID ORDER BY T1.year DESC LIMIT 1</sql>
SELECT DISTINCT T2.paintingID FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistID WHERE strftime('%Y', T1.year) > strftime('%J', T2.deathYear)) GROUP BY DISTINCT T2.paintingID ORDER BY COUNT(DISTINCT T2.paintingID) DESC LIMIT 1</
SELECT DISTINCT T1.lname FROM artists AS T1 INNER JOIN sculptures AS T2 ON T1.artistID = T2.paintingID ORDER BY count(T1.name) DESC LIMIT 1</sql>
SELECT DISTINCT T1.fname FROM artists AS T1 INNER JOIN sculptures AS T2 ON T1.artistID = T2.paintingID ORDER BY count(T1.artistID) DESC LIMIT 1</sql>
SELECT DISTINCT T1.title FROM Paintings AS T1 INNER JOIN Sculptures AS T2 ON T1.paintingID = T2.sculptureID WHERE T2.`width_mm` > 60 AND T2.`height_mm` > 80</sql>
SELECT DISTINCT title FROM Paintings WHERE lname = 'Penelope' ORDER BY w DESC LIMIT 1</sql>
SELECT DISTINCT T2.location FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID WHERE DATE(T2.year) BETWEEN 1846 AND 2035 INTERSECT SELECT DISTINCT T2.location FROM Paintings AS T2 INNER JOIN Sculptures AS T1 ON T2.paintingID =
SELECT DISTINCT T2.location FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID WHERE DATE(T2.`year`) BETWEEN '2067' AND '2039' OR DATE(T1.`year`) BETWEEN '1841' AND '1875'</sql>
SELECT DISTINCT T1.paintingID FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistID WHERE strftime('%Y', T1.year) > '500' AND strftime('%Y', T1.year) < 2000</sql>
SELECT DISTINCT T1.paintingID FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistID WHERE STRFTIME('%Y', T1.year) BETWEEN 500 AND 2000 ORDER BY MAX(T1.height_mm) DESC LIMIT 2</sql>
SELECT DISTINCT T2.location FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID WHERE T1.`medium` IN ('on panel', 'on canvas') ORDER BY T2.location</sql>
SELECT DISTINCT T2.location FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID WHERE T1.`medium` IN ('panels', 'canvas') AND T1.year BETWEEN 2004 AND 2015</sql>
SELECT DISTINCT T2.location FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.artistID WHERE T2.deathYear BETWEEN '2034-' AND '2036-2019' LIMIT 1</sql>
SELECT DISTINCT T2.location FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID WHERE CAST((T1.year - '1897') - 30) BETWEEN '2015-6' AND '2004-9' AND T1.mediumOn != 'watercolor'</sql>
SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE medium = 'oil' GROUP BY location ORDER BY SUM(height_mm) / COUNT(T3.medium) DESC LIMIT 1</sql>
SELECT AVG(T1.height_mm + T1.width_mm) / COUNT(T1.paintingID), SUM(T1.height_mm * T1.length_cm / 1000) AS px FROM `artists` AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.painterID GROUP BY T1.location ORDER BY SUM(T1.height
SELECT T3.height_mm, T2.painterID FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistID WHERE T1.year BETWEEN 1870 AND 1900</sql>
SELECT MAX(height_mm), T2.id FROM Paintings AS T1 INNER JOIN sculptures AS T2 ON T1.paintingID = T2.sculptureID WHERE T2.location IS NOT NULL GROUP BY T3.title, T2.height_mm ORDER BY ( SELECT MAX(height_) - 1 FROM sculptures ORDER BY T1.medium DESC LIMIT 1 ) LIMIT 1</sql>
SELECT SUM(max(height_mm, width_mm)) FROM Paintings GROUP BY artistID ORDER BY CAST(STRFTIME('%Y', artistID) AS DECIMAL) LIMIT 1</sql>
SELECT MAX(T1.height_mm), MAX(T2.width_mm) FROM Paintings AS T1 INNER JOIN Sculptures AS T2 ON T1.paintingID = T2.sculptureID WHERE SUBSTR(SUBSTR(T1.year, 8), -3, LENGTH(SUBSTR())) > ( SELECT SUM(LENGTH(MIN(YEAR)) - MIN(SUBSTR(T1.
SELECT CAST(SUM(height_mm / COUNT(painterID)) AS REAL) * 100 / COUNT(DISTINCT T2.artistID) , SUM(width_mm / COUNT(T3.location)) FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID GROUP BY T1.lname ORDER BY CAST(SUM(height_mm /
SELECT T2.height_mm, T2.width_mm FROM Paintings AS T1 INNER JOIN Sculptures AS T2 ON T1.painterID = T2.painterID ORDER BY T2.artistID ASC, T2.title DESC</sql>
SELECT DISTINCT T1.lname, T2.num FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.paintingID ORDER BY T2.year DESC LIMIT 1</sql>
SELECT DISTINCT T1.firstname, SUM(T2.length * T3.height_mm / 2) FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.paintingid INNER JOIN Sculptures AS T3 ON T1.sculptureid = T3.sculptureID WHERE T1.lname IN ('JOHN', 'MICHAEL') GROUP
SELECT DISTINCT T2.deathYear FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.paintingID WHERE T1.numberOfPaintings - 3 > 0 GROUP BY t1.deathYear ORDER BY COUNT(T2.painterID) LIMIT 1</sql>
SELECT COUNT(T2.paintingID), strftime('%Y', T2.birthYear), strftime('%J', T2.deathYear) FROM ( SELECT CAST(STRFTIME('%Y', T1.year) AS REAL) - 1390849005 , strftime('%J', T1.year) + 60774782 FROM Artists AS
SELECT MAX(years) - MIN(deathYear) FROM Artists GROUP BY deathYear ORDER BY COUNT(T2.artistID) LIMIT 1</sql>
SELECT strftime('%J', T2.birthYear - 1501496873) FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T2.artistID = T1.painter WHERE T1.deathYear IS NULL</sql>
SELECT DISTINCT T1.paintingID, T1.height_mm FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.sculptureid = T2.artistID WHERE T1.location IN ( 'Gallery 240' , 'Gallery 158') ORDER BY T1.width_mm DESC LIMIT 2</sql>
SELECT DISTINCT T1.height_mm , T1.id FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.artistID WHERE T2.location = 'Gallery 240' GROUP BY T1.height_mm ORDER BY SUM(T1.height) DESC LIMIT 3</sql>
SELECT DISTINCT T1.paintingID FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistID WHERE strftime('%Y', T1.birthYear) = '2065' AND strftime('%M', T1.deathYear) < 1778</sql><question>What is the year of birth for artist named K
SELECT DISTINCT T1.paintingID FROM Paintings AS T1 INNER JOIN Sculptures AS T2 ON T1.paintingID = T2.sculptureID ORDER BY T2.`year` DESC LIMIT 3</sql>
SELECT DISTINCT T2.paintingID FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.sculptureID = T2.paintingID ORDER BY T1.`height_mm` BETWEEN 104 AND 162, T1.`year` BETWEEN 853 AND 1902</sql>
SELECT DISTINCT T2.paintingID FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.artistID WHERE CAST(T2.year AS REAL) - MAX(CAST(T2.birthYear AS REAL)) BETWEEN 38 AND 67 GROUP BY T1.title ORDER BY SUM(MAX(CASE WHEN T2.height_
SELECT DISTINCT T1.lname, T2.title FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T1.medium = 'oil' ORDER BY COUNT(T2.location) DESC LIMIT 3</sql>
SELECT DISTINCT T2.painterID FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID GROUP BY T2.painterID ORDER BY COUNT(T2.title) DESC LIMIT 3</sql>
SELECT DISTINCT T1.paintingID, T2.location, T3.title FROM Paintings AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.painterID INNER JOIN Artists AS T3 ON T2.painterID = T3.artistID ORDER BY T1.year DESC</sql>
SELECT DISTINCT T1.paintingID , T2.location , T3.title FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.artistID INNER JOIN sculptures AS T3 ON T1.painterID = T3.sculptorID ORDER BY T3.year DESC</sql>
SELECT DISTINCT T2.year, T2.location FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID ORDER BY T1.height > 1000</sql>
SELECT DISTINCT T2.year, T2.location FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.artistID = T2.artistID WHERE CAST(T2.height_mm - T2.weight AS REAL) BETWEEN 1000 AND ( ORDER BY T2.`lname`, `t2.deathyear` DESC LIMIT 1 )</sql>
SELECT DISTINCT T1.lname, T2.fname FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.painterID WHERE T1.location IS NULL OR T1.location IS NOT NULL ORDER BY T1.year DESC LIMIT 1</sql>
SELECT DISTINCT T1.lname, T2.fname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.paintingid WHERE T2.location IS NULL AND T2.title != 'Painter'</sql>
SELECT DISTINCT T2.location FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID WHERE T1.`year` BETWEEN 1965 AND 2004 INTERSECT SELECT DISTINCT t2.location FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2
SELECT DISTINCT T2.title FROM Sculptures AS T1 INNER JOIN Paintings AS T2 ON T1.paintingID = T2.paintingID WHERE strftime('%Y', T1.birthYear) >= 1875 AND strftime('%Y', T2.deathYear) IS NULL</sql>
SELECT COUNT(DISTINCT T2.race), SUM(CASE WHEN T1.`Report` = 'Race' THEN 1 ELSE 0 END) AS num FROM `driver" AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.PolePosition > ( SELECT MAX(T2.`PolePosition`) ) GROUP BY T1.`Report` ORDER BY SUM(CASE WHEN T1.`Report`
SELECT COUNT(DISTINCT T2.race) FROM "race" AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Pole_Position IS NOT NULL AND T1.Pole_Position = 'N/A' GROUP BY T1.Race ORDER BY COUNT(DISTINCT T2.race) DESC LIMIT 1</sql>
SELECT DISTINCT T2.name, T3.team FROM race AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID INNER JOIN `team` AS T3 ON T2.Team_ID = T3.Team_ID ORDER BY T2.team DESC</sql>
SELECT DISTINCT T2.Team, T3.Name FROM race AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Pole_Position IS NULL ORDER BY T2.Name</sql>
SELECT T2.name FROM race AS T1 INNER JOIN driver AS T2 ON T1.Race_Name = T2.Driver_ID WHERE T1.Pole_Position IS NULL OR T2.name NOT LIKE '%Junior Sonsen'</sql>
SELECT T1.name FROM race AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Pole_Position IS NULL AND T2 = 'Junior Strous'</sql>
SELECT DISTINCT T2.name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID ORDER BY T1.Pole_Position DESC, T1.Age ASC LIMIT 1</sql>
SELECT T1.Entrant FROM "driver" AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.DRIVER_ID ORDER BY T2.Fastest_Lap DESC LIMIT 1</sql>
SELECT T3.entrant FROM "race" AS T1 INNER JOIN driver AS T2 ON T1.Race_Name = T2.Driver_ID WHERE T1.PolePosition > ( SELECT MAX(T1.PolePosition) FROM 'driver' AS T1 INNER JOIN race AS T2 ON T2.Driver_ID = T1.Driver_ID ) AND T2.entrant IS NOT NULL</sql>
SELECT T3.entrant, T1.`Age`, 'Mini' FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.driver_id WHERE age > 20 GROUP BY T3.`Entrant` ORDER BY COUNT(T2.entrant) DESC LIMIT 5</sql>
SELECT DISTINCT T2.max(T1.age) - T2.`minimum(Age)` FROM `race` AS T1 INNER JOIN `driver` AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.driver ORDER BY T1.report LIMIT 1</sql>
SELECT DISTINCT T2.Age, MAX(T1.Age), MIN(T1.Age) FROM "race" AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T2.Name ORDER BY COUNT(T2.PolePosition) DESC LIMIT 1</sql>
SELECT COUNT(T1.engine) FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.driver WHERE T1.age BETWEEN 20 AND 30 AND T2.chassis LIKE 'motor%'</sql>
SELECT COUNT(T1.engine) FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.driver WHERE T1.age BETWEEN 20 AND 30 GROUP BY T1.driver ORDER BY T2.PolePosition DESC LIMIT 1</sql>
SELECT T1.Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.DRIVER_ID ORDER BY T1.Name ASC LIMIT 1</sql>
SELECT T1.Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.DRIVER_ID ORDER BY T1.Name ASC LIMIT 1</sql>
SELECT DISTINCT T1.name, T2.race_name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.driver WHERE T1.enlist = 'yes'</sql>
SELECT DISTINCT T2.name, T3.race FROM "driver" AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID INNER JOIN `event` AS T3 ON T1.entrant = T3.Entrant WHERE T2.PolePosition > 5 AND T3.Date IS NOT NULL ORDER BY T3.Winning_driver, T2.race DESC LIMIT 1</sql
SELECT DISTINCT T2.name, COUNT(T1.driver_id), T3.number FROM "race" AS T1 INNER JOIN "driver" AS T2 ON T1.Driver_ID = T2.Driver_ID INNER JOIN `driver` AS T3 ON T1.Race_Name = T3.Race_name WHERE T1.PolePosition IS NULL</sql>
SELECT COUNT(T1.Driver_ID), SUM(T2.Entrant) FROM "race" AS T1 INNER JOIN "driver" AS T2 ON T1.Race_Name = T2.Driver_ID GROUP BY T2.Driver_ID ORDER BY COUNT(T2.Entrant) DESC</sql>
SELECT COUNT(DISTINCT T2.Driver_ID), T1.Age, T2.Driver_Name FROM `driver` AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T2.Race_Name ORDER BY SUM(CASE WHEN COUNT(T3.Entrant) > 0 THEN 1 ELSE 0 END) DESC LIMIT 1</sql>
SELECT SUM(DISTINCT T2.Age), MAX(T1.Age), T1.Pole_Position FROM "race" AS T1 INNER JOIN "driver" AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Year ORDER BY COUNT(DISTINCT T2.Date) DESC LIMIT 1</sql>
SELECT DISTINCT T1.name, T2.age FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.driver_id WHERE T1.enlistment > 2 AND T2.contestant = 'Yes' GROUP BY T1.enlistment ORDER BY SUM(T2.num_racers) - SUM(T2.num_racers) DESC LIMIT 2</sql>
SELECT DISTINCT T2.name, T3.age FROM race AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T2.name HAVING COUNT(T1.Date) IN (( SELECT MAX(Date) ,  COUNT(*) FROM race AS T3 ) )</sql>
SELECT DISTINCT T1.race_name FROM "race" AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.Driver_ID WHERE T2.age BETWEEN 23 AND 58 ORDER BY T2.years_participating LIMIT 1</sql>
SELECT DISTINCT T1.race_name FROM "race" AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.driver_name LIKE '%older%' AND T1.pole_position IS NULL</sql>
SELECT DISTINCT T2.name FROM race AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.chassis = 'bugatti' AND T1.constructor != 'F382A'</sql>
SELECT DISTINCT T2.name FROM race AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.chassis != 'Bugatti' AND T1.constructor != ''</sql>
SELECT DISTINCT T2.name, COUNT(T1.chassis), T1.constructor FROM ( SELECT DISTINCT T1.chassis , T3.`Name` FROM `constructor` AS T1 INNER JOIN `driver` AS T2 ON T1.driver_id = T2.Driver_ID WHERE T2.name NOT IN ('Amelie', 'Laurens van den Acker') GROUP BY T1.constructor ORDER
SELECT T1.constructor FROM "race" AS T1 INNER JOIN "driver" AS T2 ON T1.driver_id = T2.Driver_ID ORDER BY T1."Pole_Position" DESC LIMIT 3</sql>
SELECT T1.type FROM "race" AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.Driver_ID ORDER BY COUNT(T1.`Type`) DESC LIMIT 1</sql>
SELECT T1.type FROM "race" AS T1 INNER JOIN "engine" AS T2 ON T1.driver = T2.Driver_ID ORDER BY T1.winning_team ORDER BY T2.engine, T1.winning_driver ASC LIMIT 1</sql>
SELECT DISTINCT T2.engine FROM race AS T1 INNER JOIN driver AS T2 ON T1.Drivers_ID = T2.Driver_ID GROUP BY T1.Entrant, T1.Name ORDER BY COUNT(DISTINCT t1.Entrant) DESC LIMIT 2</sql>
SELECT DISTINCT T2.engine FROM race AS T1 INNER JOIN driver AS T2 ON T1.Drivers_ID = T2.Driver_ID GROUP BY T1.Entrant, T1.Name ORDER BY COUNT(DISTINCT t1.engine) DESC LIMIT 1</sql>
SELECT T1.name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.DRIVER_ID WHERE T2.Pole_Position IS NULL AND T2.RaceName != 'None'</sql>
SELECT T1.Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.DRIVER_ID WHERE T2.Pole_Position IS NULL AND T2.Race_Name != 'United States Nationals'</sql>
SELECT DISTINCT T1.chassis, T2.engine FROM "race" AS T1 INNER JOIN "driver" AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Pole_Position <= '33' AND T1.Entrant IN ('JOSE FRANCISCO SALAS', 'ADRIA LORDE') AND age BETWEEN 20 AND 30</
SELECT DISTINCT T1.chassis, T2.chassis FROM "driver" AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.driver WHERE T1.Entrant < '20' AND strftime('%J', T2.Date) BETWEEN 20 AND 30 GROUP BY T2.chassis ORDER BY COUNT(T1.Entrant) DESC LIMIT 
SELECT DISTINCT T2.team FROM "race" AS T1 INNER JOIN `driver` AS T2 ON T1.DRIVER_ID = T2.Driver_ID GROUP BY T2.team ORDER BY COUNT(T2.name) DESC LIMIT 1</sql>
SELECT DISTINCT T2.team, COUNT(T3.Team_ID), SUM(CASE WHEN T3.Team_ID = 'team-1' THEN 1 ELSE 0 END) AS avg FROM ( SELECT DISTINCT T3.Team_ID , COUNT(T2.Entrant) AS num AS per FROM `driver` AS T1 INNER JOIN teams AS T2 ON T1.Driver_ID = T2.Team_ID WHERE T
SELECT DISTINCT T2.name FROM race AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.Driver_ID WHERE T1.Pole_Position BETWEEN 3 AND 5</sql>
SELECT DISTINCT T1.name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.driver_id WHERE T2.Pole_Position IN ( 'James Hinchcliffe', 'Carl Skerlong' )</sql>
SELECT DISTINCT T1.name FROM driver AS T1 INNER JOIN race AS T2 ON T1.driver = T2.Driver_ID WHERE T2.PolePosition IS NULL ORDER BY T3.PolePosition DESC LIMIT 1</sql>
SELECT DISTINCT T1.name FROM driver AS T1 INNER JOIN race AS T2 ON T1.driver = T2.Driver_ID WHERE T2.Pole_Position IS NULL ORDER BY T1.Entrant DESC LIMIT 1</sql>
SELECT COUNT(T1.language_id) FROM countries AS T1 INNER JOIN language AS T2 ON T1.country_id = T2.id WHERE T1.name LIKE '%other%' GROUP BY T1.name ORDER BY COUNT(DISTINCT T2.language_id) DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T2.name), SUM(CASE WHEN T1.`overall_score` = '0' THEN 1 ELSE NULL END) AS total FROM countries AS T1 INNER JOIN language AS T2 ON T1.id = T2.`id` GROUP BY T1.name</sql>
SELECT DISTINCT T2.name FROM languages AS T1 INNER JOIN countries AS T2 ON T1.country_id = T2.id ORDER BY T1.name ASC LIMIT 1</sql>
SELECT DISTINCT T2.name FROM countries AS T1 INNER JOIN `languages` AS T2 ON T1.id = T2.language_id ORDER BY T2.name</sql>
SELECT DISTINCT T2.name FROM languages AS T1 INNER JOIN countries AS T2 ON T1.country_id = T2.id WHERE T1.word LIKE '%is%'</sql>
SELECT DISTINCT T2.name FROM "official_languages AS T1 INNER JOIN languages AS T2 ON T1.language_id = T2.id WHERE T2.name LIKE '%sh%' AND T2.overall_score IS NULL GROUP BY T2.name ORDER BY T1.name NOT IN (SELECT DISTINCT T2.name FROM languages AS T2 INNER JOIN langauges AS T3 ON T1.language_id = T
SELECT DISTINCT T2.name FROM "languages" AS T1 INNER JOIN countries AS T2 ON T1.country_id = T2.id ORDER BY T1.`overall_score`, T2.PRIMARY KEY (`T1.id`) DESC LIMIT 1</sql>
SELECT DISTINCT T2.name FROM "official_languages AS T1 INNER JOIN countries AS T2 ON T1.country_id = T2.id ORDER BY T1.overall_score DESC LIMIT 1</sql>
SELECT AVG(T2.justice_score), T3.name FROM  `languages` AS T1 INNER JOIN `countries` AS T2 ON T1.id = T2.country_id INNER JOIN "official_languages" AS T3 ON T2.id = T3.language_id GROUP BY T1.name ORDER BY SUM(T3.justice_score) / COUNT(T2.id) DESC LIMIT 1
SELECT CAST(SUM(CASE WHEN T2.justice IS NULL THEN 1 ELSE -1 END) AS REAL) / COUNT(T2.country_id), SUM(CASE WHEN T2.health IS NULL THEN 1 ELSE -1 END), SUM(CASE WHEN T2.education IS NULL THEN 1 ELSE -1 END), SUM(CASE WHEN T2.economics IS NULL THEN 1 ELSE -1 END), SUM(CASE WHEN
SELECT DISTINCT MAX(T2.health_score), MIN(T2.health_score) FROM `countries` AS T1 INNER JOIN `official_languages" AS T2 ON T1.id = T2.country_id WHERE T1.name != 'Norway'</sql>
SELECT SUM(health_score), MAX(MIN(health_score)) FROM ( SELECT T1.ID, T2.`overall_score`, T3.`justice_score`, T4.T2.`nationality` AS country_from_orange , SUM(CASE WHEN T5.country_id != "Norway" THEN t1.health_score END) AS score_max , SUM(CASE WHEN T5.country_id
SELECT COUNT(DISTINCT T2.name), T1.`id`, T3.ID FROM ( SELECT DISTINCT `languages` AS id, `country_id` ,  COUNT(T3.name) AS num FROM "official_languages" AS T1 INNER JOIN countries AS T2 ON T1.`language_id` = T2.id INNER JOIN countries AS T3 ON T1.country_id = T3.ID WHERE T1
SELECT COUNT(DISTINCT T2.name), SUM(DISTINCT T2.name) FROM "languages AS T1 INNER JOIN countries AS T2 ON T1.country_id = T2.id GROUP BY T1.name ORDER BY COUNT(DISTINCT T2.name) DESC LIMIT 1</sql>
SELECT DISTINCT T2.name FROM ( SELECT T1."name", SUM(T1.Education_Score) AS sum FROM "countries" AS T1 INNER JOIN `languages` AS T2 ON T1.id = T2.CountryId GROUP BY T1.Name ORDER BY COUNT(T2.score DESC) DESC LIMIT 1 </sql>
SELECT DISTINCT T2.name FROM "languages" AS T1 INNER JOIN countries AS T2 ON T1.id = T2.country_id ORDER BY T2.`education_score` DESC LIMIT 1</sql>
SELECT T1.name FROM countries AS T1 INNER JOIN "politics" AS T2 ON T1.id = T2.country_id GROUP BY T1.name ORDER BY SUM(T2.`score`) DESC LIMIT 1</sql>
SELECT T1.name FROM countries AS T1 INNER JOIN politics AS T2 ON T1.id = T2.country_id ORDER BY T1.politics_score DESC LIMIT 1</sql>
SELECT DISTINCT T2.name, T3.name FROM ( SELECT T2.name AS `languages`, T1.`country_id`, T2.`overall_score` ,  T3.`language_id` FROM "countries" AS `T1` INNER JOIN "languages" AS `T2` ON T1.id = T2.id INNER JOIN "official_languages" AS `T3` ON T1.id =
SELECT DISTINCT T2.name FROM languages AS T1 INNER JOIN countries AS T2 ON T1.language_id = T2.id WHERE T1.name = 'zh' GROUP BY T1.name ORDER BY T2.name UNION SELECT T3.name, T2.name FROM nations AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.id INNER JOIN languages AS T3 ON T2.language_id =
SELECT DISTINCT T2.name, COUNT(T1.language_id), T3.overall_score FROM 'languages' AS T1 INNER JOIN countries AS T2 ON T1.id = T2.country_id INNER JOIN `official_languages` AS T3 ON T2.id = T3.language_id GROUP BY T2.name ORDER BY T1.overall_score DESC LIMIT 3</sql>
SELECT DISTINCT T2.name AS language, COUNT(T1.country_id), T3.countries.overall_score FROM `languages` AS T1 INNER JOIN countries AS T2 ON T1.id = T2.id INNER JOIN ( SELECT T1.name , COUNT(*) AS total FROM `language` AS T1 INNER JOIN T2 AS T3 ON T1.id = T3.language_id WHERE T1.overall_
SELECT T1.name FROM languages AS T1 INNER JOIN countries AS T2 ON T1.id = T2.country_id GROUP BY T1.name ORDER BY COUNT(T2.language_id) DESC LIMIT 1</sql>
SELECT T1.name FROM languages AS T1 INNER JOIN countries AS T2 ON T1.id = T2.id ORDER BY T1.overall_score DESC LIMIT 1</sql>
SELECT DISTINCT T2.name FROM `languages` AS T1 INNER JOIN countries AS T2 ON T1.country_id = T2.id GROUP BY T2.name ORDER BY COUNT(T2.id) > 2 GROUP BY T3.name</sql>
SELECT DISTINCT T2.name FROM "languages" AS T1 INNER JOIN countries AS T2 ON T1.country_id = T2.id GROUP BY T1.language_id ORDER BY COUNT(T1.language_id) DESC LIMIT 2</sql>
SELECT AVG(T2.overall_score), T3.name FROM COUNTRIES AS T1 INNER JOIN LANGUAGES AS T2 ON T1.id = T2.language_id WHERE T1.name = 'English' ORDER BY T1.name, T3.name</sql>
SELECT AVG(T2.overall_score), T3.name FROM country AS T1 INNER JOIN languages AS T2 ON T1.country_id = T2.country_id WHERE T3.name = 'english' GROUP BY T2.name ORDER BY COUNT(T2.language_id) DESC LIMIT 1</sql>
SELECT DISTINCT T2.name FROM "official_languages AS T1 INNER JOIN countries AS T2 ON T1.country_id = T2.id ORDER BY SUM(T2.justice_score) DESC LIMIT 3</sql>
SELECT DISTINCT T2.name FROM `languages` AS T1 INNER JOIN countries AS T2 ON T1.country_id = T2.id ORDER BY T1.overall_score DESC LIMIT 3</sql>
SELECT DISTINCT T2.name, SUM(T1.`overall_score`) AS total , AVG(T2.`overall_score`) FROM "languages" AS T1 INNER JOIN 'countries' AS T2 ON T2.id = T1.country_id GROUP BY T1.name ORDER DESC LIMIT 1</sql>
SELECT DISTINCT T2.name FROM 'languages' AS T1 INNER JOIN "official_languages" AS T2 ON T1.id = T2.language_id ORDER BY T1.overall_score DESC LIMIT 3</sql>
SELECT DISTINCT T2.name FROM countries AS T1 INNER JOIN `languages` AS T2 ON T1.id = T2.country_id GROUP BY T1.name ORDER BY COUNT(T2.language_id) DESC LIMIT 1</sql>
SELECT DISTINCT T2.name FROM countries AS T1 INNER JOIN "languages" AS T2 ON T1.id = T2.country_id GROUP BY T1.name ORDER BY COUNT(T2.language_id) DESC LIMIT 1</sql>
SELECT DISTINCT T2.name FROM languages AS T1 INNER JOIN countries AS T2 ON T1.id = T2.country_id WHERE T1.overall_score IS NULL OR T2.name != 'the official language of no country' LIMIT 1</sql>
SELECT DISTINCT T2.name FROM countries AS T1 INNER JOIN languages AS T2 ON T1.country_id = T2.id WHERE T1.overall_score IS NULL OR T2.name IS NOT IN ( SELECT T1.name FROM languages AS T1 INNER JOIN countries AS T2 ON T1.country_id = T2 ."id")</sql>
SELECT DISTINCT T2.name FROM languages AS T1 INNER JOIN countries AS T2 ON T1.country_id = T2.id WHERE T1.overall_score IS NULL OR T2.name IS NULL</sql>
SELECT DISTINCT T2.name FROM languages AS T1 INNER JOIN countries AS T2 ON T1.country_id = T2.id WHERE T1.overall_score IS NULL OR T2.name IS NULL AND T1.id IS NULL ORDER BY T2.name NOT IN (T2.name)</sql>
SELECT DISTINCT T2.name FROM "languages" AS T1 INNER JOIN countries AS T2 ON T1.id = T2.country_id WHERE T1.overall_score >  95 AND T2.overall_score <  90</sql>
SELECT DISTINCT T2.name FROM "official_languages" AS T1 INNER JOIN COUNTRIES AS T2 ON T1.language_id = T2.ID WHERE T2.overall_score BETWEEN 1 AND 350 ORDER BY T1.overall_score LIMIT 4</sql>
SELECT T1.city, T2.country FROM Addresses AS T1 INNER JOIN users AS T2 ON T1.user_id = T2.user_id WHERE T2.zip_postcode = '5783' GROUP BY T1.city ORDER BY COUNT(T1.line_1_number) INTERSECT SELECT T3.country, T1.city FROM Addresses AS T1 INNER JOIN users AS T2 ON T1.
SELECT T1.city, T2.country FROM Addresses AS T1 INNER JOIN addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T1.city ORDER BY T2.county_state_province DESC</sql>
SELECT DISTINCT T1.state, T2.zip_postcode FROM addresses AS T1 INNER JOIN addresses AS T2 ON T1.address_id = T2.address_id WHERE strftime('%J', T1.`date_registered`) IN ( SELECT T3.STATE , T3.ZipPostCode FROM properties AS T3 INNER JOIN state_provinces AS T4 ON T3.property_name = T4.state WHERE
SELECT DISTINCT T2.state, T3.province FROM Addresses AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.user_address_id AND T1.property_type_code IN ('mansion', 'condo') INNER JOIN properties AS T3 ON T3.property_id = T2.property_id ORDER BY T3.country DESC LIMIT 1</sql>
SELECT DISTINCT T2.feature_name FROM Addresses AS T1 INNER JOIN Features AS T2 ON T1.address_id = T2.address_id WHERE T1.line_2_number_building = 'roof' AND T1.property_type_description = 'office'</sql>
SELECT DISTINCT T2.feature_description FROM Addresses AS T1 INNER JOIN Features AS T2 ON T1.address_id = T2.address_id WHERE T1.city = 'lakewood' AND T2.name = 'Roof Top'</sql>
SELECT DISTINCT T2.feature_name, T1.`feature_description`, COUNT(T3.feature_id) FROM Addresses AS T1 INNER JOIN Features AS T2 ON T1.`address_id` = T2.`address_id`) AS T3 ORDER BY T3.feature_name DESC LIMIT 1</sql>
SELECT DISTINCT T1.feature_name, T2.`description` FROM ( SELECT MAX(T2.feature_name) AS feature_name , T2.feature_description FROM Addresses AS T1 INNER JOIN Features AS T2 ON T1.address_id = T2.address_id GROUP BY T1.address_id ORDER BY COUNT(T1.user_id) DESC LIMIT 1 ) AS T3 UNION ALL SELECT DISTINCT T
SELECT DISTINCT T1.room_type_description FROM addresses AS T1 INNER JOIN properties AS T2 ON T1.address_id = T2.property_address_id ORDER BY T1.line_3_area_locality LIMIT 5</sql>
SELECT MAX(room_count) FROM `Properties` GROUP BY rooms ORDER BY COUNT(`rooms`) LIMIT 1</sql>
SELECT COUNT(T2.property_id) FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id WHERE T1.parking_lot OR T1.garage = 'true' AND T2.property_type LIKE 'parking%'</sql>
SELECT COUNT(T2.property_id) FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id WHERE T1.parking_lot OR T1.garage = 'YES'</sql>
SELECT T2.age_category_description FROM `Addresses` AS T1 INNER JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code WHERE T1.user_id IS NULL AND strftime('%Y', T1.`date_on_market`) BETWEEN '70' AND '45986843226659372'</
SELECT T1.age_category_description FROM Users AS T1 INNER JOIN Ref_Age_Categories AS T2 ON T1.user_id = T2.user_id WHERE T1.user_details LIKE '%Mother%' AND strftime(STRFTIME('%Y', T2.date), '%B') IS NULL</sql>
SELECT DISTINCT T1.first_name, T2.last_name FROM users AS T1 INNER JOIN addresses AS T2 ON T1.user_id = T2.user_id WHERE strftime('%J', T2.`date_off_market`) > strftime('%J', T2) GROUP BY T1.first_name, T2.last_name ORDER BY COUNT(T1.first_name, T2.last
SELECT T2.first_name, T1.last_name FROM users AS T1 INNER JOIN addresses AS T2 ON T1.user_address_id = T2.user_address_id WHERE T1.is_seller = 'f' ORDER BY COUNT(T1.property_type_code) DESC LIMIT 1</sql>
SELECT CAST(SUM(CASE WHEN T2.town = 'city' THEN (T3.row_1 / COUNT(T2.row_1)) * 100 END) AS REFINTIONAL), SUM(CASE WHEN T2.property_type_code = 'room' THEN (T3.ROW_1 / COUNT(T2.row_1)) * 100 ELSE NULL END) FROM Addresses AS T1 INNER JOIN `
SELECT CAST(SUM(CASE WHEN T2.room_type_description = 'Garden' THEN 1 ELSE NULL END) AS REAL) / COUNT(T1.address_id) FROM ( SELECT DISTINCT T1.address_id, sum(CASE WHEN T2.property_name LIKE '%garden%' THEN 1 ELSE NULL END ) AS num FROM addresses AS T1 INNER JOIN Property_types AS T2 ON T1.address_id =
SELECT T1.city FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id WHERE T2.property_type_name = 'swimming pool' GROUP BY T1.city ORDER BY COUNT(T1.property_name) DESC LIMIT 1</sql>
SELECT DISTINCT T2.city FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id WHERE T2.property_type = 'swimming pool'</sql>
SELECT DISTINCT T1.property_id, T2.price FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id GROUP BY T1.address_id ORDER BY SUM(CASE WHEN T2.date_on_market IS NULL THEN 1 ELSE 0 END) - COUNT(T2.price) DESC LIMIT 1</sql>
SELECT DISTINCT T1.owner_user_id FROM addresses AS T1 INNER JOIN `Properties` AS T2 ON T1.address_id = T2.property_address_id WHERE T1.line_3_area_locality = 'street' ORDER BY T2.price DESC LIMIT 1</sql>
SELECT SUM(T1.room_type_description) / COUNT(T2.`user_id`) AS num FROM `Properties` AS T1 INNER JOIN `Addresses` AS T2 ON T1.`address_id` = T2.`address_id` WHERE T1.`property_name` IN ('Room Type B') GROUP BY T1.num ORDER BY SUM(T1.room_type_description) / COUNT(T2.user_id)
SELECT AVG(T2.room_type_description) FROM Addresses AS T1 INNER JOIN properties AS T2 ON T1.address_id = T2.property_id WHERE T2.owner_user_id = '59' GROUP BY T1.line_3_area_locality ORDER BY COUNT(T2.room_type_description) DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T1.room_type_description) FROM `properties` AS T1 INNER JOIN `ref_user_categories` AS T2 ON T1.user_id = T2.user_id WHERE T1.property_name LIKE '%room size%'</sql>
SELECT COUNT(DISTINCT T1.room_type_description) FROM `addresses AS T1 INNER JOIN rooms AS T2 ON T1.address_id = T2.address_id WHERE strftime('%J', T1.`date_registered`) BETWEEN '2009-01' AND '2012-05'</sql>
SELECT DISTINCT T1.user_address_id FROM Users AS T1 INNER JOIN addresses AS T2 ON T1.user_address_id = T2.address_id WHERE T2.postcode LIKE '%Los Angeles%' GROUP BY T1.first_name, T1.last_name ORDER BY COUNT(DISTINCT T1.user_address_id) >= 2 GROUP BY T2.postcode</sql>
SELECT DISTINCT T1.user_id , T2.`search_sequence`.COUNT(T3.login_name) AS num FROM Addresses AS T1 INNER JOIN Users AS T2 ON T1.address_id = T2.address_id AND T2.is_seller WHERE strftime('%M', T1.date_registered) > strftime('%M', T2.date_on_market) GROUP BY T1
SELECT MAX(TIMESTAMP) AS `time` FROM users WHERE is_seller = 1 ORDER BY T2.date_on_market DESC LIMIT 1</sql>
SELECT DISTINCT T2.last_name AS strftime('%J', T3.`datetime`) FROM Addresses AS T1 INNER JOIN Property_Types AS T2 ON T1.address_id = T2.address_id WHERE `date_registered` > ( SELECT MAX(T1.date_registered) FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.`property_id`) ORDER BY
SELECT strftime('%J', T2.timestamp) - strftime('%J', T1.timestamp), 'User Search Time' AS desc FROM Addresses AS T1 INNER JOIN Ref_Properties AS T2 ON T1.address_id = T2.property_address_id ORDER BY T2.content DESC</sql>
SELECT DISTINCT T1.login_name AS username , T2.`dateregistered` FROM Addresses AS T1 INNER JOIN users AS T2 ON T1.user_address_id = T2.user_address_id WHERE T2.first_name = 'Kate' ORDER BY T2.first_name, T2.last_name DESC LIMIT 3</sql>
SELECT T3.zip_postcode FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id WHERE T1.is_seller = 'Y' AND T2.is_buyer IS NULL LIMIT 2</sql>
SELECT T1.zip_postcode FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id WHERE T1.owner_user_id IS NULL AND COUNT(T2.property_id) < 2 GROUP BY T1.zip_postcode HAVING COUNT(T2.property_id) != 0</sql>
SELECT DISTINCT T1.user_id FROM Addresses AS T1 INNER JOIN Users AS T2 ON T1.address_id = T2.user_address_id WHERE T1.line_3_area_locality = 'town city' LIMIT 1</sql>
SELECT DISTINCT T1.user_id FROM Users AS T1 INNER JOIN addresses AS T2 ON T1.user_address_id = T2.address_id WHERE strftime('%M', T2.first_name) > '09' AND strftime('%m', T2.last_name) = 'Jones' LIMIT 1</sql>
SELECT T2.age_category_description FROM `Addresses AS T1 INNER JOIN `User_Categories AS T2 ON T1.user_id = T2.user_id WHERE T1.`address_id` LIKE '%%Age_Category%' LIMIT 1</sql>
SELECT DISTINCT T1.age_category_description FROM users AS T1 INNER JOIN addresses AS T2 ON T1.user_id = T2.address_id ORDER BY strftime(date_on, 'UTC') - strftime('%Y', T2.property_timestamp) DESC LIMIT 3</sql>
SELECT DISTINCT T1.login_name, T2.first_name, T2.last_name FROM Users AS T1 INNER JOIN Addresses AS T2 ON T1.user_id = T2.user_id WHERE T2.city != 'new york city' ORDER BY T1.first_name</sql>
SELECT DISTINCT T1.login_name FROM Users AS T1 INNER JOIN addresses AS T2 ON T1.user_address_id = T2.address_id WHERE strftime('%M', T2.first_name) <= 'Alice' AND strftime('%m', T2.middle_name) > 0 ORDER BY strftime('%M', T2.last_name)</sql>
SELECT COUNT(DISTINCT T1.user_id) FROM Addresses AS T1 INNER JOIN Features AS T2 ON T1.address_id = T2.address_id WHERE T2.`feature_name` LIKE '%Buyer%' AND T3.date_on_market IS NULL ORDER BY COUNT(T3.`property_type_code`) DESC LIMIT 0</sql>
SELECT COUNT(T1.user_address_id) FROM `Addresses` AS T1 INNER JOIN `users` AS T2 ON T1.user_address_id = T2.login_name WHERE T2.first_name = 'M' AND T2.last_name = 'Z' GROUP BY T2.first_name, T2.last_name ORDER BY COUNT(T2.login_name) DESC LIMIT 1</sql>
SELECT DISTINCT T1.first_name, T2.last_name, T1.login_name FROM Users AS T1 INNER JOIN Addresses AS T2 ON T1.user_id = T2.user_id WHERE T2.owner_user_id = 'ratione'</sql>
SELECT DISTINCT T2.first_name, T2.middle_name FROM Users AS T1 INNER JOIN Addresses AS T2 ON T1.user_id = T2.address_id WHERE T1.login_name = 'ratio' GROUP BY T2.first_name ,T2.last_name ORDER BY T2.date_registered DESC LIMIT 1</sql>
SELECT DISTINCT T2.first_name, T2.middle_name, T2.last_name FROM Addresses AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T2.is_seller = 'true' AND T2.login_name = 'seller'</sql>
SELECT DISTINCT T1.first_name, T2.middle_name FROM Users AS T1 INNER JOIN Addresses AS T2 ON T1.user_id = T2.address_id INNER JOIN Addresses AS T3 ON T3.address_id = T2.line_2 WHERE T1.is_seller = 'Y' AND T3.lines IN ( SELECT T2.lines FROM Addresses AS T2 INNER JOIN Properties AS T3
SELECT DISTINCT T1.building, T1.street FROM Addresses AS T1 INNER JOIN addresses AS T2 ON T1.address_id = T2.user_address_id WHERE T1.age_category_description = 'Senior citizen' AND T2.city IS NOT NULL</sql>
SELECT DISTINCT T1.line_2_number_locality, T2.city FROM addresses AS T1 INNER JOIN users AS T2 ON T1.user_address_id = T2.user_address_id WHERE T2.age = 65 AND T1.line_3_area_locality IN ( SELECT DISTINCT T2.town , T2.city FROM addresses AS T1 INNER JOIN users AS T2 ON T1
SELECT COUNT(T1.property_id) FROM Properties AS T1 INNER JOIN Features AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_address_id HAVING COUNT(T1.feature_name) >= 2</sql>
SELECT COUNT(T1.property_id) FROM Properties AS T1 INNER JOIN Features AS T2 ON T1.property_id = T2.feature_id GROUP BY T1.property_address_id HAVING COUNT(T1.property_type_code) >= 2</sql>
SELECT COUNT(T2.property_id) FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id GROUP BY T2.address_id ORDER BY COUNT(T1.property_images) DESC LIMIT 1</sql>
SELECT COUNT(T2.property_id) FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id GROUP BY T2.address_id ORDER BY COUNT(T1.property_details.property_name) DESC LIMIT 5</sql>
SELECT DISTINCT T1.owner_user_id, COUNT(T2.`photo_id`) FROM `Users` AS T1 INNER JOIN `Properties` AS T2 ON T1.user_address_id = T2.property_id WHERE T2.property_name IN ('Apartment 5', 'apartment 6') GROUP BY T1.owner_user_id ORDER BY SUM(T2.`photo_id`) DESC LIMIT 3</
SELECT COUNT(DISTINCT T1.user_id) FROM Addresses AS T1 INNER JOIN properties AS T2 ON T1.address_id = T2.property_id WHERE T2.PHOTO IS NOT NULL AND T1.line_4_area_locality != 'unknown'</sql>
SELECT COUNT(DISTINCT T1.property_id) FROM Addresses AS T1 INNER JOIN Property_Types AS T2 ON T1.property_type_code = T2.property_type_code WHERE T2.description = 'Student home' INTERSECT SELECT MAX(T2.`price`) FROM Addresses WHERE T1.user_id IS NULL OR strftime('%Y', T1.address_date) != '2016
SELECT MAX(price) FROM Addresses WHERE is_seller = 'single' GROUP BY user_address_id ORDER BY COUNT(user_address_id) DESC LIMIT 1</sql>
SELECT DISTINCT T2.first_name , T2.middle_name AS last_name , T3.property_details FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.address_id INNER JOIN `Feature` AS T3 ON T3.feature_id = T2.feature_id WHERE T2.last_name != 'North' ORDER BY T1.property_details DESC LIMIT 1
SELECT strftime('%J', T2.DATE), T1.property_name FROM Addresses AS T1 INNER JOIN Property_History AS T2 ON T1.address_id = T2.address_id WHERE T2.date LIKE '%%' AND T1.user_id IN ( SELECT DISTINCT T2.owner_user_id ORDER BY strftime('%J', T1.`DATE`) ) GROUP BY strftime('%J',
SELECT DISTINCT T2.description, T3.code FROM Addresses AS T1 INNER JOIN `Property_Types` AS T2 ON T1.property_type_id = T2.code GROUP BY T2.name ORDER BY COUNT(T1.address_id) DESC LIMIT 1</sql>
SELECT DISTINCT T1.property_type_description FROM properties AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id ORDER BY COUNT(T2.property_type_code) DESC LIMIT 1</sql>
SELECT T2.description FROM Addresses AS T1 INNER JOIN Age_Categories AS T2 ON T1.address_id = T2.address_id WHERE T1.property_type_code LIKE '%Over 60%' AND T2.age_category_description = 'D'</sql>
SELECT DISTINCT T2.category_description FROM Addresses AS T1 INNER JOIN `Ref_Age_Categories` AS T2 ON T1.address_id = T2.age_category_code WHERE T1.user_category_name = 'Over 60'</sql>
SELECT T2.size , COUNT(T1.room_type_description) AS num FROM Addresses AS T1 INNER JOIN Rooms AS T2 ON T1.address_id = T2.user_address_id GROUP BY T1.`size`,  T1.room_type_description ORDER BY SUM(CASE WHEN T2.size IN ( ) THEN 1 ELSE 0 END) DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T1.room_type_description) FROM `addresses AS T1 INNER JOIN property_types AS T2 ON T1.property_type_id = T2.property_type_id WHERE T1.zip_postcode = '54079' AND strftime('%J', T1.date_on_market) < strftime('%Y', T1.date_off_market))</sql
SELECT DISTINCT T2.country FROM Addresses AS T1 INNER JOIN users AS T2 ON T1.user_id = T2.user_id WHERE T1.line_3_locality = 'city' AND T2.login_name = 'robbie'</sql>
SELECT DISTINCT T2.country FROM Addresses AS T1 INNER JOIN users AS T2 ON T1.user_id = T2.user_id WHERE T1.city = 'robby' AND T1.first_name = 'Robinson'</sql>
SELECT DISTINCT T1.first_name , T2.middle_name FROM Addresses AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id ORDER BY T1.line_3_locality, strftime('%Y', T2.`date_registered`) DESC LIMIT 1</sql>
SELECT DISTINCT T1.first_name, T2.middle_name, T1.last_name FROM Users AS T1 INNER JOIN Properties AS T2 ON T1.user_id = T2.property_id WHERE T2.owner_user_id IS NOT NULL ORDER BY T1.date_on_market DESC LIMIT 1</sql>
SELECT T2.first_name, T1.last_name FROM Users AS T1 INNER JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id WHERE T2.property_address_id IS NULL ORDER BY T3.first_name, T3.middle_name, T4.last_name LIMIT 5</sql>
SELECT T2.login_name FROM Addresses AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.property_type_description IS NULL AND T2.other_address_details IS NULL OR T2.other_address_details IS NULL</sql>
SELECT DISTINCT T1.first_name, T1.middle_name, T2.last_name FROM Users AS T1 INNER JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id WHERE strftime(STRFTIME('%Y', T1.date_registered), '%M') > 6 AND strftime(STRFTIME('%J', T1.date_on_market), '%B
SELECT DISTINCT T1.first_name , T2.last_name, T1.user_address_id FROM Users AS T1 INNER JOIN Addresses AS T2 ON T1.user_address_id = T2.address_id WHERE (T1.login_name = 'rishabh') GROUP BY T1.first_name , T1.last_name ORDER BY COUNT(T1.login_name) LIMIT 2</sql
SELECT COUNT(T2.bicycle_id) FROM 'cyclists' AS T1 INNER JOIN "bike" AS T2 ON T1.id = T2.id WHERE T1.`weight` > 780 AND strftime('%Y', T2.purchase_year) < '1946'</sql>
SELECT DISTINCT T1.product_name, T2.`price` FROM ( SELECT distinct T2.`product_name`, SUM(T3.price) AS total FROM `bike` AS T1 INNER JOIN `cyclist` AS T2 ON T1.id = T2.id ORDER BY T2.primary_key DESC LIMIT 1) AS T3 WHERE T3.total > T3.total</sql>
SELECT DISTINCT T1.name, T2.nation, T3.`cyclist_id`, SUM(T3.result) AS total FROM `bike` AS T1 INNER JOIN cyclists AS T2 ON T1.cyclist_id = T2.id WHERE T2.nation IS 'ja' GROUP BY T1.`product_name`, T2.nation ORDER BY SUM(T1.price) DESC LIMIT 1</
SELECT SUM(max(weight)) - SUM(min(weight)), MAX(weight), MIN(weight) FROM bike GROUP BY product_name ORDER BY SUM(weight) DESC LIMIT 1</sql>
SELECT SUM(CAST(SUM(CASE WHEN product_name = 'CC' THEN 1 ELSE 0 END)) AS REAL)) / COUNT(DISTINCT T2.bike_id) AS price FROM `cyclists` AS T1 INNER JOIN `bikes` AS T2 ON T1.cyclist_id = T2.bicycle_id GROUP BY T2.material WHERE product_name IN ('Carbon CC', 'Dur
SELECT DISTINCT T2.name, T3.result FROM "cyclists" AS T1 INNER JOIN "bike_owners" AS T2 ON T1.id = T2.cycleuser_id WHERE T1.nation != 'ru' AND T1.cyclist_id NOT IN (SELECT DISTINCT T2.cycleuser_id FROM cyclists AS T3 WHERE T3.country == 'ru')</sql>
SELECT T1.id, T1.product_name FROM 'bike' AS T1 INNER JOIN 'cyclists_own_bikes' AS T2 ON T1.id = T2.cyclist_id WHERE T2.`purchase_year` > 2015 ORDER BY T1.PurchaseYear DESC LIMIT 1</sql>
SELECT DISTINCT T2.id, T3.name FROM "cyclists_own_bikes" AS T1 INNER JOIN "bike" AS T2 ON T1.cyclist_id = T2.id INNER JOIN 'bike' AS T3 ON T1.bike_id = T3.id WHERE T1.primary KEY('cycle ID', 'PURCHASE_YEAR') BETWEEN 4 AND 5
SELECT DISTINCT T1.id, T1.name FROM "cyclists" AS T1 INNER JOIN "bike_owners" AS T2 ON T1.id = T2.riding_id GROUP BY T1.name ORDER BY SUM(T2.purchase_year) DESC LIMIT 1</sql>
SELECT T1.product_name FROM "cyclist" AS T1 INNER JOIN "bike" AS T2 ON T1.id = T2.cyclist_id WHERE T2.country IN ('RUSSIA', 'GBR') GROUP BY T1.product_name ORDER BY DISTINCT T1.product_name LIMIT 1</sql>
SELECT SUM(heat) FROM "cyclists" WHERE country = 'sweden' GROUP BY country ORDER BY COUNT(DISTINCT T2.name) DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T1.cyclist_id) FROM "cycle" AS T1 INNER JOIN "bike" AS T2 ON T1.id = T2.bicycle_id WHERE T2.purchase_year IS NULL GROUP BY T1.cyclist_id ORDER BY COUNT(T2.bicycle_id) DESC LIMIT 1</sql>
SELECT T1.`name`, T3.`result` FROM `cyclist` AS T1 INNER JOIN `bike` AS T2 ON T1.id = T2.cycle_id INNER JOIN `bike` AS T3 ON T3.bike_id = T2.bike WHERE T1.nation = 'american' AND (T2.result IS NULL OR T3.weight < 4500) GROUP BY T1.`
SELECT DISTINCT T1.name, T2.price FROM "bike" AS T1 INNER JOIN "cyclist" AS T2 ON T1.id = T2.id INNER JOIN cyclists_own_bikes AS T3 ON T1.id = T3.cycler_id WHERE T3.name = 'Bradley Wiggins' AND T3.name = 'Antonio Tauler'</sql>
SELECT DISTINCT T2.name, T3.nation, T1.`cyclist_id` FROM `bike` AS T1 INNER JOIN `cyclists` AS T2 ON t1.id = T2.cyclerid WHERE not T1.purchase_year IN (-1) GROUP BY DISTINCT T2.name UNION ALL SELECT T1.name, T3.nation, T2.`cyclist_id` FROM
SELECT DISTINCT T1.name FROM "bikes" AS T1 INNER JOIN "bike_owners" AS T2 ON T1.id = T2.cyclist_id WHERE strftime('%Y', T2.`purchase_year`) LIKE 'fiber%'</sql>
SELECT SUM(b.weight), COUNT(T1.cyclist_id), T2.primary_key AS total FROM bike AS T1 INNER JOIN cyclists_own_bikes AS T2 ON T1.bike_id = T2.cyclist_id WHERE T2.nation = 'England' ORDER BY T2.`cyclist_id` DESC LIMIT 3</sql>
SELECT MAX(T1.Price), T2.`Item` FROM receipts AS T1 INNER JOIN items AS T2 ON T1.ReceiptID = T2.Id WHERE T1.Flavor = 'caramel' GROUP BY T1.`ReceiptNumber`, T2.`Item`.Taste ORDER BY ( SELECT MAX(T2.price) FROM receipts AS T1 INNER JOIN items AS T2 ON T1.ReceiptID = T
SELECT T1.Flavor, T2.Food FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T2.Price > 100 ORDER BY T2.Quantity DESC LIMIT 1</sql>
SELECT T1.Price FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Ordinal WHERE T1.Flavor = 'Cheesecake' AND T2.ReceiptNumber LIKE '% $%' ORDER BY T2.Date DESC LIMIT 1</sql>
SELECT T1.Id, T2.Flavor FROM receipts AS T1 INNER JOIN items AS T2 ON T1.ReceiptID = T2.ReceiptNumber WHERE T1.Item LIKE '% chocolate%' ORDER BY strftime(date, 'medium') - strftime('%Y',  receipt) / 30 LIMIT 1</sql>
SELECT DISTINCT item.Item FROM items AS T1 INNER JOIN goods AS T2 ON T1.item = T2.Item WHERE T2.Flavor = 'Apple'</sql>
SELECT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Item = T2.item WHERE T2.Flavor = 'Apple'</sql>
SELECT DISTINCT T2.Item FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Receipt = T2.Receipt WHERE T1.Price <= 300 LIMIT 1</sql>
SELECT DISTINCT T2.Item FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Receipt = T2.Receipt WHERE T1.Price <= 3 AND T1.Flavor != 'unknown' ORDER BY T1.Price LIMIT 1</sql>
SELECT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Item = T2.Food WHERE T2.Flavor LIKE '%lemony%'</sql>
SELECT T1.Item FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T2.Flavor = 'lemon' ORDER BY COUNT(T2.CustomerId) DESC LIMIT 1</sql>
SELECT DISTINCT COUNT(T2.Item), T1."LastName" , T3."FirstName" FROM "items AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.ReceiptNumber WHERE T2.Flavor = 'Burger' AND T3."FirstName" = T2.CustomerId GROUP BY DISTINCT T2.Item ORDER BY COUNT(T2.Item) DESC LIMIT 1</sql>
SELECT DISTINCT COUNT(T1.CustomerId), T2.Item FROM `items` AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T2.Food IN ('Apple', 'Orange') GROUP BY T1.Item ORDER BY COUNT(DISTINCT T1.CustomerId)</sql>
SELECT T3.customer_id FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Item = T2.item WHERE T1.Date BETWEEN '2012-07-04' AND '2020-09-16' AND T2.Food > 15</sql>
SELECT T2.customer_id FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Item WHERE T1.quantity > 15 GROUP BY T2.ReceiptNumber ORDER BY COUNT(T3.CustomerId) DESC LIMIT 1</sql>
SELECT DISTINCT T2.LastName FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T1.Price BETWEEN 8 AND 3465 AND T1.Flavor LIKE 'Bakery%' GROUP BY T2.CustomerId ORDER BY COUNT(T2.ReceiptNumber) DESC LIMIT 1</sql>
SELECT DISTINCT T2.LastName FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T1.Price BETWEEN 60 AND 75 ORDER BY T1.Date - ( SELECT MAX(T3.Date) FROM receipts AS T3 INNER JOIN customers AS T4 ON T2.Item = T3.Id WHERE T4.LastName = 'A' GROUP BY
SELECT COUNT(DISTINCT T2.Item), SUM(T1.Price / 50) AS num FROM items AS T1 INNER JOIN receipts AS T2 ON T1.ReceiptID = T2.ReceiptNumber GROUP BY T2.Flavor ORDER BY COUNT(DISTINCT T2.item) DESC LIMIT 3</sql>
SELECT COUNT(DISTINCT T2.item), T1.`ReceiptNumber`, T1.pricerange FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Flavor WHERE T2.Food = 'cake' AND T2.`Ordinal` BETWEEN 50 AND 70 GROUP BY T1.receiptNumber, T1.item ORDER BY COUNT(DISTINCT T
SELECT T1.Flavor FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T2.Ordinal = 439</sql>
SELECT T1.Flavor FROM items AS T1 INNER JOIN goods AS T2 ON T1.Item = T2.Item WHERE T2.Food = 'croissant' GROUP BY T1.Flavor ORDER BY COUNT(T1.Item) DESC LIMIT 1</sql>
SELECT T3.Item FROM receipts AS T1 INNER JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE T1.CustomerId = '15'</sql>
SELECT DISTINCT T2.Item FROM receipts AS T1 INNER JOIN products AS T2 ON T1.ReceiptNumber = T2.ProductId WHERE T1.CustomerId = 15 GROUP BY T2.Flavor ORDER BY T3.ID DESC LIMIT 1</sql>
SELECT AVG(T2.Price), MAX(T1.Price), MIN(T1.Price) FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T1.food = 'chicken' GROUP BY T1.item ORDER BY T1.`total_price` DESC LIMIT 3</sql>
SELECT T1.`Price`, SUM(T2.`Price`) FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T2.Ordinal = 0 GROUP BY T1.Flavor ORDER BY T1.Food DESC LIMIT 4</sql>
SELECT DISTINCT T2.ReceiptNumber FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Ordinal WHERE T1.Flavor LIKE '%Cookie%' AND T1.Food = 'Cake'</sql>
SELECT T1.ReceiptNumber FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Ordinal WHERE T1.Flavor LIKE '%cookie%' AND T2.Food LIKE '%cake%' GROUP BY T1.ReceiptNumber ORDER BY SUM(T1.Receipt) DESC LIMIT 1</sql>
SELECT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN customers AS T2 ON T1.CustomerId = T2.Id WHERE T2.LastName = 'LOGAN' AND strftime('%Y', T1.Date) - strftime('%Y', T2.ReceiptDate) < 3</sql>
SELECT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Item = T2.Food WHERE T2.Flavor = 'croissant' ORDER BY T2.Price DESC LIMIT 3</sql>
SELECT MAX(ReceiptNumber), MIN(Date) FROM items WHERE price > ( SELECT T2.Price ) GROUP BY ReceiptNumber ORDER BY SUM(T1.price) DESC LIMIT 1</sql>
SELECT MAX(ReceiptNumber), MIN(Date) FROM items WHERE price > 120 GROUP BY receipt ORDER BY COUNT(receipt) DESC LIMIT 1</sql>
SELECT T1.Item FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T1.Price IS NULL GROUP BY T1.item ORDER BY COUNT(T1.Receipt) INTERSECT SELECT T1.item FROM items AS T1 INNER JOIN receipts AS T2 ON T2.ReceiptID = T1.ReceiptID WHERE T2.price IS NULL GROUP BY T1.
SELECT T1.Item FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T1.Price BETWEEN 500 AND 1000 ORDER BY COUNT(T2.Date) LIMIT 1</sql>
SELECT COUNT(DISTINCT T2.Item), SUM(DISTINCT T2.Price) FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Receipt = T2.Receipt WHERE T1.Foodtype IN ('gluten free', 'vegetarian')</sql>
SELECT SUM(IIF(T2.foodtype = 'Fresh', T1.food, 0)) / COUNT(DISTINCT T2.foodtype) FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T2.itemid LIKE '%Corn%'</sql>
SELECT T1.Price / COUNT(DISTINCT T2.`Item`) AS price , strftime('%Y', T2.Receipt), strftime('%M', T2.Receipt) FROM items AS T1 INNER JOIN goods AS T2 ON T1.Item = T2.Food WHERE T1.foodtype IN ('apple', 'peach', 'orange') AND T2.Price IS NOT NULL GROUP BY T1.fo
SELECT T1.Price / COUNT(DISTINCT T2.`Item`) AS sum , CAST((SUM(T1.price) AS REAL) * 1000) AS per FROM products AS T1 INNER JOIN items AS T2 ON T2.ProductId = T1.ProductId GROUP BY T1.`FoodType` ORDER BY T1.Price / COUNT(DISTINCT T2.`Item`) DESC LIMIT 3</sql>
SELECT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Item = T2.item WHERE T2.Flavor = 'Apricot' AND T1.Price < 500</sql>
SELECT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Item = T2.Item WHERE T2.Flavor = 'Apricot' ORDER BY T1.Price LIMIT 4</sql>
SELECT T3.Flavor FROM receipts AS T1 INNER JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE T2.Price > 10 ORDER BY T2.Flavor DESC LIMIT 1</sql>
SELECT DISTINCT T2.Flavor FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Item = T2.Ordinal WHERE T1.Price > 10</sql>
SELECT T1.Id, SUM(T2.Price) FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T2.Prices LIKE '%%' GROUP BY T1.Flavor ORDER BY T1.Price DESC LIMIT 1</sql>
SELECT T1.Id , SUM(T2.Price) AS total FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T1.price BETWEEN 0 AND 639 IN ORDER GROUP BY T1.Id ORDER BY sum(T1.`Pricing`) / count(*) DESC LIMIT 2</sql>
SELECT DISTINCT T2.Item, MAX(T1.`ReceiptNumber`) FROM ( SELECT T2.`Ordinal`, COUNT(DISTINCT T2.`Item`) AS `NumOfGoods` FROM items AS T1 INNER JOIN receipts AS T2 ON T1.id = T2.Receipt_No GROUP BY T2.Item ORDER BY T1.`ReceiptNumber` DESC LIMIT 1</sql>
SELECT DISTINCT T2.Item FROM items AS T1 INNER JOIN receipts AS T2 ON T1.item = T2.Receipt WHERE T2.Price < ( SELECT MAX(T1.Price) FROM goods AS T3 WHERE T1.Flavor = 'tart' LIMIT 1 )</sql>
SELECT DISTINCT T2.ReceiptNumber FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Item WHERE T1.Price > 13</sql>
SELECT T2.ReceiptNumber FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Item WHERE T1.Price > 13 ORDER BY T2.`ReceiptNumber` DESC LIMIT 1</sql>
SELECT strftime('%J', T2.Date), (T2.Price - strftime('%Y', T2.Date)) / 100 AS total FROM receipts AS T1 INNER JOIN goods AS T2 ON T1.receipt_id = T2.Id ORDER BY T1.Total DESC LIMIT 1</sql>
SELECT strftime('%J', T2.Receipt), strftime('%d', T2.Receipt) - strftime('%Y', T2.Receipt) AS days, CAST(SUM(CASE WHEN SUBSTR(`T3`.`Price`, 1, 14) > '07965' THEN 0 ELSE NULL END)) * 100 AS mins FROM receipts AS T1 INNER JOIN items AS
SELECT T1.Item FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T1.Flavor = 'App'</sql>
SELECT T1.Item FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T1.Flavor LIKE '%app%' GROUP BY T2.ReceiptNumber ORDER BY T2.Receipt - 50 DESC LIMIT 1</sql>
SELECT DISTINCT T2.Item, T3.Price FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.ReceiptNumber INNER JOIN goods AS T3 ON T1.Ordinal = T2.Ordinal WHERE T1.Flavor LIKE '70%'</sql>
SELECT DISTINCT T2.Item.Flavor,  T2.price FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T2.Ordinal BETWEEN 50 AND 70</sql>
SELECT DISTINCT T2.LastName FROM receipts AS T1 INNER JOIN customers AS T2 ON T1.CustomerId = T2.Id ORDER BY T2.Flavor DESC</sql>
SELECT T1.LastName FROM customers AS T1 INNER JOIN items AS T2 ON T1.id = T2.Item ORDER BY T1.LastName ASC LIMIT 1</sql>
SELECT DISTINCT T2.Item FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Receipt = T2.Receipt WHERE T1.Flavor = 'Apple' ORDER BY T2.Ordinal ASC</sql>
SELECT DISTINCT T2.Item FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Receipt = T2.Receipt WHERE T1.Flavor IS NOT NULL AND T1.Id IN ( SELECT DISTINCT T1.Item FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Receipt = T2.Receipt WHERE T1.Flavor IS NOT NULL GROUP BY T2.Item ORDER
SELECT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Item = T2.Ordinal WHERE T2.Flavor LIKE '%Apple%'</sql>
SELECT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Item = T2.Food WHERE T2.Flavor LIKE '%apple%' AND strftime('%J', T1.Date) > '2021-09-30' ORDER BY strftime('%J', T1.ReceiptNumber) = '63784723596787
SELECT T1."ReceiptNumber", T2."Date" FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Item = T2.Item ORDER BY T2.PrincipalDate DESC LIMIT 1</sql>
SELECT DISTINCT T2.ReceiptNumber FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Ordinal WHERE T1.Date BETWEEN '2020-09-06' AND '2021-07-31'</sql>
SELECT T3.ReceiptNumber FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Id WHERE T2.Date BETWEEN '2022-06-17' AND '2022-08-09'</sql>
SELECT T3.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Item = T2.Item WHERE T2.Price > 10 ORDER BY strftime(T1.Date, 'YYYY-MM') LIMIT 1</sql>
SELECT DISTINCT T2.Item FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Receipt = T2.Receipt WHERE T1.Price BETWEEN 3 AND 7 ORDER BY T2.CustomerId</sql>
SELECT DISTINCT T2.Item FROM receipts AS T1 INNER JOIN "items" AS T2 ON T1.Receipt = T2.Id WHERE T1.Price BETWEEN '3' AND '7'</sql>
SELECT DISTINCT T2.firstname, T2.lastname FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Receipt = T2.id WHERE T2.receiptdate BETWEEN '2013-04-07' AND '2016-11-28'</sql>
SELECT DISTINCT T1.LastName, T2.firstname FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T1.ReceiptDate BETWEEN '2013-04-07 06:39:30' AND '2014-08-31 09:05:35' ORDER BY T2.date DESC
SELECT T1.Price / COUNT(DISTINCT T2.`Item`) AS num FROM ( SELECT T3.Flavor, SUM(T3.Price) AS num FROM receipts AS T1 INNER JOIN items AS T2 ON T2.Receipt = T1.Receipt WHERE T3.Food IN ("Blackberry", "Blueberry") GROUP BY T1.`Item` ORDER BY ( SELECT AVG(SUM(price)) FROM receipts WHERE
SELECT AVG(Price), T2.Flavor FROM receipts AS T1 INNER JOIN items AS T2 ON T1.ReceiptID = T2.Item WHERE T2.food ~ 'blackberry' OR T2.food ~ 'blueberry'</sql>
SELECT T1.`Price` FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T2.Flavor = 'Cheese' ORDER BY T1.price LIMIT 1</sql>
SELECT T1.Price FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Ordinal WHERE T1.Flavor = 'Cheese' GROUP BY T1.Flavor ORDER BY T2.ReceiptNumber LIMIT 1</sql>
SELECT MAX(price), MIN(price), AVG(price) FROM items ORDER BY T2.`Flavor` DESC LIMIT 1</sql>
SELECT DISTINCT SUM(Price), AVG(Price), T2.Flavor AS item , ORDER BY T1.Price DESC LIMIT 1</sql>
SELECT T1.Price, T2.Price FROM items AS T1 INNER JOIN ( SELECT GROUP_CONCAT(DISTINCT t3.Food ORDER BY SUBSTR(T1.Ordinal, LOCALWITH(SUBSTR(t1.Price), 'Flavor'), 2 ) DESC LIMIT 1) AS T2 , T2 AS T1 FROM goods AS T1 INNER JOIN ( SELECT GROUP_CONCAT(DISTINCT t3.F
SELECT MAX(price), MIN(price) FROM items WHERE Food = 'food' ORDER BY Food DESC LIMIT 1</sql>
SELECT strftime('%J', T2.Receipt), strftime('%d', T1.Receipt) AS date FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt ORDER BY date DESC LIMIT 3</sql>
SELECT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Item = T2.Item ORDER BY COUNT(T2.Receipt) DESC LIMIT 3 GROUP BY T2.Receipt ORDER BY SUM(IIF(T1.Date BETWEEN '2005-04-13' AND '2009-03-28') = '2010-06
SELECT SUM(CASE WHEN T2.LastName = 'Burke' THEN 1 END) AS num , SUM(CASE WHEN T3.FirstName = 'Tony' THEN 1 ELSE 0 END) AS num FROM ( SELECT DISTINCT T2, T3.Id FROM items AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.id ORDER BY CASE WHEN T3.LastName != 'Burke' THEN T2
SELECT DISTINCT T2.CustomerId , COUNT(T1.Item) AS num_purchases FROM items AS T1 INNER JOIN receipts AS T2 ON T1.item = T2.Receipt WHERE T1.Price = ( SELECT MAX(Price) FROM receipts ) GROUP BY T2.Item ORDER BY SUM(num_purchases) DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T2.CustomerId), SUM(CASE WHEN T2.Name = 'Jerry' THEN 1 ELSE NULL END) AS num FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Item = T2.Item WHERE DATE(T1.ReceiptDate) BETWEEN '2018-09-03' AND '2018-09-15' GROUP BY T
SELECT SUM(DISTINCT T2.Date), T1.FirstName FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Receipt = T2.Item WHERE T2.Item IS NOT NULL GROUP BY T1.Id ORDER BY SUBSTR(T2.ReceiptNumber, INSTR(T1.ReceiptNumber,'') + 3) , INSTR(SUBSTR(T2.ReceiptNumber, INSTR(T1.
SELECT DISTINCT T2.firstname, T2.lastname FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Receipt = T2.Receipt WHERE T2."Flavor" = 'Apple' ORDER BY T1.Date DESC LIMIT 1</sql>
SELECT DISTINCT T2.LastName FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T1.Flavor = 'Apple' AND T1.Price BETWEEN 600 AND 850</sql>
SELECT DISTINCT T2.Item.ReceiptNumber FROM "items" AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.Receipt_id WHERE T1."Flavor" < ( SELECT MAX(T3.") AS Flavor FROM "goods" AS T1 INNER JOIN items AS T2 ON T2.Item = T1.item WHERE T1.Flavor LIKE '% Croissant%' )</sql>
SELECT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Item = T2.Food WHERE T2.Price < 9500 AND item LIKE '%croissant%' GROUP BY T2.ReceiptNumber ORDER BY T2.Price LIMIT 1</sql>
SELECT DISTINCT T2.Item, SUM(T1.`Price`) AS total FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.Receipt WHERE strftime('%J', T2.`Date`) LIKE '%Tart%' GROUP BY T1.`Item` ORDER BY avg(T1.price) DESC LIMIT 3</sql>
SELECT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Item = T2.item WHERE T2.Price > ( SELECT AVG(price) , 0 ) AND T2.Flavor = 'tart'</sql>
SELECT DISTINCT T2.Item FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Receipt = T2.Receipt WHERE T1.Price BETWEEN 98 AND 200 ORDER BY total(T3.Price) DESC LIMIT 1</sql>
SELECT T1.Item FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.ReceiptNumber GROUP BY T1.Item ORDER BY COUNT(T1.ID) / 2 DESC LIMIT 1</sql>
SELECT DISTINCT T2.Item, T1.Flavor, T2.Type FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Receipt = T2.id WHERE T1.Price BETWEEN 5 AND 80 ORDER BY T2.price</sql>
SELECT T1.ReceiptNumber, T2.Flavor, T3.`Price` FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Ordinal INNER JOIN goods AS T3 ON T3.Id = T2.Item WHERE T2.Item = 'Goods with price under $10' AND T2.Flavor = 'tomato soup' ORDER BY T2.`Price` DESC LIMIT 1
SELECT DISTINCT T2.id, T3.flavor FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T2.Item = 'Cake' ORDER BY T3.Flavor</sql>
SELECT DISTINCT T2.Item, T3.Flavor FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.ReceiptNumber WHERE T1.Item = 'cake' ORDER BY item, T1.Flavor</sql>
SELECT T3.Item FROM receipts AS T1 INNER JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE T2.Flavor LIKE '%Choco%' LIMIT 1</sql>
SELECT DISTINCT T2.Item FROM receipts AS T1 INNER JOIN "items" AS T2 ON T1.Receipt = T2.Id WHERE T2.Flavor LIKE '%Chocolate%' ORDER BY COUNT(T1.Receipt) DESC LIMIT 10</sql>
SELECT T1.Flavor FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T2.Ordinal != 407 AND strftime('%J', T2.Date) LIKE '%Tart%'</sql>
SELECT T1.Flavor FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Receipt WHERE T2.Ordinal IS NULL AND T2.ReceiptNumber IS NULL GROUP BY T1.Flavor ORDER BY COUNT(T1.Flavor) - 1 DESC LIMIT 1</sql>
SELECT T1.Price FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Ordinal GROUP BY T1.Flavor ORDER BY COUNT(T2.Receipt) DESC LIMIT 3</sql>
SELECT T1.id FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Receipt = T2.Item ORDER BY T2.Price DESC LIMIT 3</sql>
SELECT T3.customer_id FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Receipt = T2.Item WHERE T2.Price > 150</sql>
SELECT DISTINCT T2.CustomerId FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Ordinal WHERE T1.Price BETWEEN 100 AND 300 ORDER BY SUM(T2.ReceiptNumber) DESC LIMIT 1</sql>
SELECT T1.Id FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.Ordinal WHERE T1.Price > 5 GROUP BY T1.Flavor ORDER BY AVG(T1.`ReceiptNumber`) DESC LIMIT 1</sql>
SELECT DISTINCT T2.CustomerId FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Receipt = T2.Item WHERE T1.Price BETWEEN 30 AND 75 ORDER BY T2.Food / COUNT(T2.item_name) DESC LIMIT 5</sql>
SELECT CAST((SUM(CASE WHEN T2.Price > 100 THEN 1 ELSE 0 END) AS REAL)) - SUM(CASE WHEN T2.Price < 56 THEN 1 ELSE 0 END) AS Total , CASE WHEN t3.CustomerId = '43479' THEN COUNT(T2.ReceiptID) + COUNT(CASE WHEN T3.OrderNumber = '8616907937
SELECT COUNT(T2.ReceiptNumber), CAST(SUM(CASE WHEN item = 'brown sugar' THEN 1 ELSE NULL END) AS REAL) * 100 / SUM(item IN ('French Toast', 'Oreos')) AS total FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Receipt=T2.Id ORDER BY T2.price DESC LIMIT 100</sql>
SELECT COUNT(DISTINCT T2.Driver_ID) FROM driver AS T1 INNER JOIN team AS T2 ON T1.Team_ID = T2.Team_ID WHERE T2.Country != 'USA' AND T1.Car_# IS NOT NULL GROUP BY T2.Country ORDER BY COUNT(T2.Driver_ID) DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T2.Driver_ID), SUM(T1.`Winnings`) FROM team AS T1 INNER JOIN driver AS T2 ON T1.Team_ID = T2.Team_ID WHERE T1.Country IN ('USA','UK') GROUP BY T1.Team, T2.Country ORDER BY COUNT(DISTINCT T2.Driver_id) DESC LIMIT 2</sql>
SELECT SUM(points), COUNT(DISTINCT T2.Make) FROM driver AS T1 INNER JOIN team AS T2 ON T1.Driver_ID = T2.Team_ID WHERE T1.`Points` > 150 GROUP BY T1.`Make` ORDER BY SUM(T2.`Winnings`) DESC LIMIT 3</sql>
SELECT DISTINCT T2.make, COUNT(T1.car_#), T1.name FROM `driver` AS T1 INNER JOIN team AS T2 ON T1.Team_ID = T2.Team_id WHERE T1.`Points` BETWEEN 150 AND 100 ORDER BY T2.make, T2.model</sql>
SELECT T1.Age, SUM(T2.Winnings * 100), CAST(SUM(CASE WHEN T2.Make = 'Audi' THEN T2.Winnings END) AS REAL) / COUNT(DISTINCT T2.Car_Owner) FROM ( SELECT T3.Age, MIN(T3.car_owner),  MAX(T1.Date), SUM(CASE WHEN T1.Make = 'Audi
SELECT SUM(DISTINCT T2.Age), T1.`Make`, T3.`make` FROM driver AS T1 INNER JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID WHERE T1.Make = 'Acura' GROUP BY T2.Driver_id ORDER BY SUM(T2.Age) / COUNT(`T2.Model`) DESC</sql>
SELECT AVG(T1.Laps), SUM(T3.Points) / COUNT(T3.Car_Owner) AS avg FROM ( SELECT T1.Driver, strftime('%Y', T1.`Date`) - strftime('%Y', T2.Age) AS PCT ,  T3.`Winnings` AS CAR_POINTS , SUM(T2.`Points`) AS Points , T1.Car_#
SELECT AVG(T1.Laps), CAST(DATE() AS REAL) - T2.Age FROM driver AS T1 INNER JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID WHERE CAST(STRFTIME('%J', T1.`Date`) AS REAL) BETWEEN 8 AND 20 ORDER BY CAST(T1.Age AS REAL) DESC LIMIT 1</sql
SELECT DISTINCT T2.Name, T3.Name FROM team AS T1 INNER JOIN manager AS T2 ON T1.Team_ID = T2.Team_ID WHERE T2.Name LIKE '%Manager%' AND T3.Name = 'car #' ORDER BY T2.Name ASC LIMIT 1</sql>
SELECT DISTINCT T2.Manager, T3.Sponsor FROM "team" AS T1 INNER JOIN `driver` AS T2 ON T1.Team_ID = T2.Driver_id WHERE T2.Car_Owner = 0 ORDER BY T2.Name ORDER BY T1.`Car_#`</sql>
SELECT DISTINCT T2.make FROM ( SELECT T1."Make" AS M , T2.`Team_ID` AS `Team_Id`, COUNT(T2.`Team_ID`) FROM driver AS T1 INNER JOIN team AS T2 ON T1."Driver_ID" = T2 ."`Driver_ID"` WHERE T1.car_owner <> 'none' GROUP BY T2."Make", 1 ) AS t ORDER BY COUNT(T2.make
SELECT DISTINCT T2.make FROM ( SELECT DISTINCT T1.T3, COUNT(DISTINCT T2.make) AS num FROM `team` AS T1 INNER JOIN `driver_id` AS T2 ON T1.Team_Id = T2.Driver_ID WHERE T2.car_ # IS NULL GROUP BY T2.make ORDER BY num DESC LIMIT 1 ) T1 INNER JOIN team AS T3 ON T1.Team_
SELECT DISTINCT T2.make FROM team AS T1 INNER JOIN driver AS T2 ON T1.Team_id = T2.Team_ID WHERE T2.Car_Owner = 'Buddy Arrington'</sql>
SELECT DISTINCT T2.make FROM driver AS T1 INNER JOIN team AS T2 ON T1.Driver_ID = T2.Team_ID WHERE T1.Car_Owner = 'Buddy Arrington' AND T2.Car_# IS NULL LIMIT 1</sql>
SELECT SUM(DISTINCT T2.Points), MIN(T1.POINTS) FROM driver AS T1 INNER JOIN team AS T2 ON T1.Driver_ID = T2.Car_Owner WHERE T2.Country IS NULL AND T2.Team = 'Championship Team (Winnings)' ORDER BY T1.Points DESC LIMIT 1</sql>
SELECT DISTINCT T2.Points, MAX(T1.`Winnings`), MIN(T2.Points) FROM driver AS T1 INNER JOIN team AS T2 ON T1.Team_ID = T2.Team_ID WHERE T2.country = 'United States' GROUP BY T1.Driver ORDER BY COUNT(T1.Car_#) DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T2.Driver_ID) AS num FROM driver AS T1 INNER JOIN team AS T2 ON T1.Team_ID = T2.Team_ID WHERE T1.`Points` < ( SELECT MAX(T3.points - 150 ) AS num FROM team AS T2 INNER JOIN driver AS T3 ON T3.Driver_ID = T2.Driver_ID WHERE T2.Team_ID = 'team' AND
SELECT COUNT(DISTINCT T2.Driver_ID) FROM driver AS T1 INNER JOIN team AS T2 ON T1.Team_ID = T2.Team_ID WHERE T1.`Points` IS NULL AND T2.Car_# = 76</sql>
SELECT T1.name FROM driver AS T1 INNER JOIN team AS T2 ON T1.Team_ID = T2.Team_ID ORDER BY T1.Age DESC LIMIT 1</sql>
SELECT T1.name, T2.Age FROM driver AS T1 INNER JOIN team AS T2 ON T1.Team_id = T2.Team_id ORDER BY T2.Year INTERSECT SELECT T2.Name FROM driver AS T1 INNER JOIN team AS T2 ON T1.Team_id = T2.Team_id WHERE T1.Age > (SELECT MAX(T1.Age) FROM driver AS T1 INNER JOIN team AS T
SELECT T1.name FROM driver AS T1 INNER JOIN team AS T2 ON T1.Team_ID = T2.Team_ID ORDER BY T1.Points DESC LIMIT 1</sql>
SELECT T1.name, SUM(T2.`Points`) DESC FROM driver AS T1 INNER JOIN team AS T2 ON T1.Team_ID = T2.Team_Id WHERE T1.driver LIKE '%Driver%' ORDER BY T1.`Points` DESC LIMIT 1</sql>
SELECT T1.Name , T2.Country FROM driver AS T1 INNER JOIN country AS T2 ON T1.Team_id = T2.Team_ID WHERE T1.Driver_ID IN ( SELECT DISTINCT T2.Country ,  T3.Name FROM driver AS T3 INNER JOIN team AS T4 ON T3.Driver_ID = T4.Driver_ID WHERE T1.Years = '6' ORDER BY T3.Name )
SELECT T1.name, T2.country FROM driver AS T1 INNER JOIN team AS T2 ON T1.Team_ID = T2.Team_ID WHERE T2.Country = 'USA'</sql>
SELECT SUM(MAX(T2.Points)) AS total FROM ( SELECT DISTINCT T1.Driver, T2.Country FROM driver AS T1 INNER JOIN country AS T2 ON T1.Driver = T2.Country WHERE T2.Capital = 'Dublin' GROUP BY T2.Country ORDER BY SUM(T2.Points) DESC LIMIT 1 ) AS t ORDER BY SUM(MAX(T2.Points)) DESC LIMIT 1</sql>
SELECT SUM(max(T2.Points)) AS total FROM team AS T1 INNER JOIN country AS T2 ON T1.Country_Id = T2.Country WHERE T1.city = 'DUBLIN' GROUP BY T1.country ORDER BY T3.capital = 'Dublin LIMIT 1'</sql>
SELECT SUM(DISTINCT CAST(T1.Age AS REAL)) / COUNT(T2.Country), T2.Language FROM `driver` AS T1 INNER JOIN country AS T2 ON T1.Country_Id = T2.`Country_id` WHERE T2.Language = 'EN' GROUP BY T1.Country ORDER BY SUM(CAST(DISTINCT CAST(T2.`native_language` AS REAL)) / COUNT(T
SELECT SUM(DISTINCT CAST(T1.Age AS REAL)) / COUNT(T2.Country) FROM `driver` AS T1 INNER JOIN `country_driver` AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Country IN ('ENG', 'ENGLANK')</sql>
SELECT T2.Country, SUM(T3.`Points`) FROM driver AS T1 INNER JOIN team AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.country ORDER BY COUNT(`Points`) DESC LIMIT 1</sql>
SELECT T3.Country, SUM(T2.`Points`) - SUM(T4.`Points`) AS num FROM ( SELECT DISTINCT T1.Country , T2.`Points` FROM driver AS T1 INNER JOIN team AS T2 ON T2.Team_ID = T1.Team_ID GROUP BY T3.country ) AS T3 ORDER BY sum(num) > 150</sql>
SELECT DISTINCT T2.Capital FROM ( SELECT DISTINCT T1."Country_Id" AS `Country_Id`, T2.`Points` AS `Points`, T2.`Team` AS "Team", COUNT(T2.`Car_#`) - 1 AS num FROM team AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Country WHERE T1."Name" LIKE '%Driver%' GROUP BY T2.Capital ORDER BY
SELECT DISTINCT T2.Capital FROM ( SELECT DISTINCT T1."Country_Id" AS `country_id`, SUM(T1.`Points`) AS total , SUM(CASE WHEN T2.`Capital` IS NULL THEN 1 ELSE 0 END) AS per FROM team AS T1 INNER JOIN driver AS T2 ON T1.Team_ID = T2.Driver_ID WHERE T1.Country = 'US' GROUP BY T2.Country
SELECT DISTINCT T2.make, COUNT(T1.driver) FROM ( SELECT 'Dodge', 0 AS num , 'Cadillac' AS t1_manufacturer , 'Mercury' AS t2_model UNION ALL SELECT Dodge, 3, 'Chevrolet' AS t2_manufacturer , 'Chevrolet' FROM driver AS T1 INNER JOIN team AS T2 ON T1.Team_ID =
SELECT DISTINCT T2.make , COUNT(T1.driver) FROM car_owner AS T1 INNER JOIN driver AS T2 ON T1.car_owner = T2.car_# GROUP BY T2.make ORDER BY COUNT(T1.driver) DESC LIMIT 1</sql>
SELECT DISTINCT T2.make FROM driver AS T1 INNER JOIN team AS T2 ON T1.Team_ID = T2.Team_ID ORDER BY COUNT(T2.Make) DESC LIMIT 1</sql>
SELECT DISTINCT T2.make FROM driver AS T1 INNER JOIN team AS T2 ON T1.Team_ID = T2.Team_ID WHERE T1.driver_id IN ( SELECT T2.make , COUNT(T2.car) - 1 FROM driver AS T1 INNER JOIN team AS T2 ON T1.team_id = T2.team_id GROUP BY T1.make ORDER BY COUNT(DISTINCT T2.car
SELECT T1.make, T2.manufacturer FROM `driver` AS T1 INNER JOIN `team` AS T2 ON T1.Team_ID = T2.Team_ID ORDER BY T2.manufacturer DESC LIMIT 3</sql>
SELECT DISTINCT T2.make FROM driver AS T1 INNER JOIN team AS T2 ON T1.Team_ID = T2.Team_ID WHERE T1.driver LIKE '%' ?%' OR T1.driver LIKE '%' ? OR T2.Make LIKE '%' ? GROUP BY T3.make ORDER BY COUNT(T2.make) INTERSECT SUM (COUNT(T2.manufacturer)) AS num , COUNT(T2.model
SELECT DISTINCT T2.name FROM team AS T1 INNER JOIN driver AS T2 ON T1.Team_id = T2.Team_ID WHERE T1.car_owner IS NULL AND (T2.Points = 0 OR T2.Manager = 'admin')</sql>
SELECT DISTINCT T2.Team_ID FROM driver AS T1 INNER JOIN ( SELECT Team_id, COUNT(T2.Driver_ID) AS num FROM driver AS T2 INNER JOIN team AS T3 ON T1.Driver_ID = T3 .Driver_ID WHERE T1.Team != T2.Team LIMIT 1 ) AS T4 AS T5 ON T4.Team_id = T5.Team_id ORDER BY T2.Team NOT
SELECT T1.Country, T2.Make, T3.Car_Owner FROM driver AS T1 INNER JOIN team AS T2 ON T1.Driver_ID = T2.Driver_ID INNER JOIN country AS T3 ON T2.Team_ID = T3.Team_Id WHERE T2.Make = 'Chevrolet' AND T1.Car_ # = 'Dodge' ORDER BY T2.make, T3.country</sql>
SELECT T1.Country FROM driver AS T1 INNER JOIN team AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Make = 'chevrolet' AND T2.Make = 'dodge' LIMIT 1</sql>
SELECT SUM(CASE WHEN T2.Points > 0 THEN 1 ELSE 0 END) AS Average, SUM(T1.Points) FROM driver AS T1 INNER JOIN team AS T2 ON T1.Team_ID = T2.Team_Id WHERE T1.Driver_ID IN ( SELECT DISTINCT D3.Driver_ID FROM car_owner AS D1 INNER JOIN cars AS C on D1.Car_Owner = C.Car_ID
SELECT SUM(p2.Points), AVG(T1.`Winnings`), SUM(T2.`Total Points`) FROM driver AS T1 INNER JOIN team_driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Name = 'Austin Butler' GROUP BY T2.Team ORDER BY SUM(P2) / COUNT(`T2.Driver_id`) DESC LIMIT 3</sql>
SELECT T1.Country FROM "driver AS T1 INNER JOIN country AS T2 ON T1.Team_id = T2.Country WHERE T1.Name = 'No Driver' AND T1.LivesIn(null)</sql>
SELECT T1.Country FROM driver AS T1 INNER JOIN team AS T2 ON T1.Team_ID = T2.Team_ID WHERE T2.Country IS NULL GROUP BY T2.Country ORDER BY COUNT(T2.Country) LIMIT 1</sql>
SELECT DISTINCT T2.manager, T2.sponsor FROM driver AS T1 INNER JOIN team AS T2 ON T1.Driver_ID = T2.Team_ID GROUP BY T1.Manager ORDER BY COUNT(T1.driver) DESC LIMIT 1</sql>
SELECT DISTINCT T2.Manager, T2.Sponsor FROM driver AS T1 INNER JOIN team AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Team ORDER BY COUNT(T1.Driver_id) DESC LIMIT 1</sql>
SELECT DISTINCT T1.Manager, T2.Car_Owner FROM driver AS T1 INNER JOIN team AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T2.Team ORDER BY COUNT(T2.Car_Owner) > 2</sql>
SELECT DISTINCT T2.Manager, T3.Car_Owner FROM driver AS T1 INNER JOIN team AS T2 ON T1.Driver_ID = T2.Driver_ID INNER JOIN team_driver AS T3 ON T2.Team_ID = T3.Team_ID WHERE T3.Car_# != 0 GROUP BY T2.Manager, T3.Car_Owner ORDER BY COUNT(T2.Driver_ID) + 1 DESC
SELECT COUNT(T1.Institution_ID), T2.Name FROM "Institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T2.Nickname = 'League of Legends Championship' GROUP BY T2.Name ORDER BY COUNT(T2.Institution_ID) DESC LIMIT 3</sql>
SELECT COUNT(T1.Institution_ID), T2.`Institution_ID`, CAST((COUNT(DISTINCT T1.Institution_ID) AS REAL) * 100 / COUNT(T2.Institution_ID)) INTO #total FROM `institution` AS T1 INNER JOIN `championship` AS T2 ON T1.Institution_ID = T2.`Institution_ID`</sql>
SELECT DISTINCT T2.Name FROM `championship` AS T1 INNER JOIN Institutions AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T1.Nickname ASC</sql>
SELECT DISTINCT T2.Name FROM `championship` AS T1 INNER JOIN institution AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T2.Name ASC</sql>
SELECT DISTINCT T2.Name FROM `Championship` AS T1 INNER JOIN Institutions AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T2.Founded DESC</sql>
SELECT DISTINCT T2.Name FROM "Championship" AS T1 INNER JOIN Institutions AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T2.Founded / 365 LIMIT 1</sql>
SELECT DISTINCT T2.city, T2.province FROM `Championship` AS T1 INNER JOIN "institution" AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.Stadium != 'null' AND T1.Team IN ('NHL', '') ORDER BY T2.city , T2.province</sql>
SELECT DISTINCT T2.city, T2.province FROM `Championship` AS T1 INNER JOIN `institutions` AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.Nickname = 'Championship'</sql>
SELECT DISTINCT SUM(endowment), min(endowment) FROM institution WHERE Team = 'Baltimore Ravens' GROUP BY Institution_ID ORDER BY SUM(enrollment - min(endowment)) DESC LIMIT 1</sql>
SELECT DISTINCT MAX(enrollment), MIN(enrollment) FROM "Institution" WHERE "Team" = 'Championship' GROUP BY institution ORDER BY COUNT(*) DESC LIMIT 1, 2</sql>
SELECT T1.Affiliation FROM `institutions` AS T1 INNER JOIN `city` AS T2 ON T1.Institution_ID = T2.City WHERE T2.City IS NOT NULL AND T2.Name != 'Vancouver' LIMIT 1</sql>
SELECT T1.Affiliation FROM "institution" AS T1 INNER JOIN `city` AS T2 ON T1.Institution_ID = T2.City WHERE T1.Province IS NULL AND T1.Name != 'Boston College'</sql>
SELECT DISTINCT T2.Stadium FROM "Championship" AS T1 INNER JOIN `institution` AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T2.Capacity DESC LIMIT 1</sql>
SELECT T1.name FROM "institution" AS T1 INNER JOIN 'stadium' AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T1.Stadium DESC LIMIT 1</sql>
SELECT DISTINCT T2.Stadium FROM `Championship` AS T1 INNER JOIN Institution AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY (T1.number_of_championships DESC > 1) LIMIT 1</sql>
SELECT DISTINCT T2.Stadium FROM Championship AS T1 INNER JOIN Institution AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.Nickname = 'Leeds United' ORDER BY T2."Capacity" DESC LIMIT 1</sql>
SELECT DISTINCT T2.Name, T2.Nickname FROM `institution` AS T1 INNER JOIN `Championship` AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.Team = 'United States'</sql>
SELECT DISTINCT T2.Name, T3.Nickname FROM "championship" AS T1 INNER JOIN `institution` AS T2 ON T1.Institution_ID = T2.Institution_ID INNER JOIN `player` AS T3 ON T2.Player_ID = T3.Player_ID WHERE T1.Nickname = 'Oakland Raiders' AND T1.Endowment BETWEEN 0 AND
SELECT T1.Name FROM "Championship" AS T1 INNER JOIN "Institution" AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T1.number_of_champions - ( SELECT MAX(T2.number_of_champions) FROM `Institution` AS T1 INNER JOIN `Championship` AS T2 ON T1.Institution_ID = T2.Institution_
SELECT T1.Nickname FROM "Championship" AS T1 INNER JOIN "Institution" AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY (T1.Stadium - T1.number_of_champions) LIMIT 1</sql>
SELECT DISTINCT T2.Name FROM `Championship` AS T1 INNER JOIN institution AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY COUNT(T1.Nickname) DESC LIMIT 1</sql>
SELECT DISTINCT T2.Name FROM `Championship` AS T1 INNER JOIN institution AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY COUNT(T1.Nickname) DESC LIMIT 1</sql>
SELECT DISTINCT T2.Name FROM "Championship AS T1 INNER JOIN Institution AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T2.Affiliation DESC LIMIT 1</sql>
SELECT DISTINCT T2.Name FROM "Championship" AS T1 INNER JOIN 'institution' AS T2 ON T1.Institution_ID = T2.Institution_ID GROUP BY T2.Nickname ORDER BY SUM(T3.Number_of_Championships) DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T2.Nickname), SUM(T1.`Endowment`) FROM Championships AS T1 INNER JOIN `Institution` AS T2 ON T1.institution = T2.Institution_ID WHERE T2.affiliation = 'Public Affiliation' GROUP BY T1.`Institution_ID`, T1.`Nickname`, T2.City ORDER BY COUNT(T1.institution) DESC LIMIT 1
SELECT COUNT(T1.Institution_ID) FROM "Championship" AS T1 INNER JOIN `Institutions` AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T2.Public INTERSECT SELECT T2.Name FROM `institution` AS T1 INNER JOIN 'Institutions' AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T2.Public IS
SELECT T1.Affiliation, COUNT(DISTINCT T2.Name), T3.PRIMARY KEY ("Institution_ID"), T1.Affiliation FROM "Institution" AS T1 INNER JOIN "Championship" AS T2 ON T1.Institution_ID = T2.Institution_ID GROUP BY T1.Affiliation ORDER BY COUNT(DISTINCT T1.Name) DESC LIMIT 1</sql>
SELECT T1.type, COUNT(T2.Institution_ID) FROM championships AS T1 INNER JOIN institutions AS T2 ON T1.Institution_ID = T2.Institution_ID GROUP BY T1.Type ORDER BY COUNT(DISTINCT T2.Institution_ID) DESC LIMIT 4</sql>
SELECT DISTINCT T2.Affiliation FROM `Championship` AS T1 INNER JOIN institution AS T2 ON T1.Institution_ID = T2.Institution_ID GROUP BY T2.Affiliation ORDER BY COUNT(T2.Affiliation) DESC LIMIT 1</sql>
SELECT DISTINCT T2.Affiliation FROM `Championship` AS T1 INNER JOIN institution AS T2 ON T1.Institution_ID = T2.Institution_ID GROUP BY T2.Affiliation ORDER BY COUNT(T2.Affiliation) DESC LIMIT 1</sql>
SELECT 'year' AS year FROM `Championship` WHERE `Institution_ID` = '513428967033382265288' LIMIT 1</sql>
SELECT strftime('%Y', T2.Created), SUM(T3.`Institution_ID`) AS `num` FROM `Championship` AS T1 INNER JOIN 'institutions' AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T2.Name LIKE '%(Stadium)' GROUP BY STRFTIME('%Y', T1.Created), SUM(T3.`Institution_ID`) ORDER BY
SELECT DISTINCT T1.Nickname FROM `Championship` AS T1 INNER JOIN `institution` AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T1.Capacity DESC LIMIT 1</sql>
SELECT DISTINCT T1.Nickname ORDER BY T2.capacity DESC LIMIT 1</sql>
SELECT SUM(enrollment) FROM "institution" WHERE location = 'Vancouver' AND province = 'BC' OR location = 'Calgary'</sql>
SELECT SUM(SUM(CASE WHEN T2.city = 'VANCOU' THEN T1.enrollment ELSE 0 END)) AS num FROM `institution` AS T1 INNER JOIN `location` AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T2.City IS NULL OR T2.city BETWEEN 'calgary' AND 'vancouver'</sql>
SELECT T1.Province FROM "Institution" AS T1 INNER JOIN 'institution' AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T2.`Institution_ID` IS NOT NULL ORDER BY T1.City LIMIT 1</sql>
SELECT T1.Province FROM "Championship" AS T1 INNER JOIN `Institutions` AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE CAST(T2.`Year` AS REAL) < 50</sql><question>What provinces are all colleges founded before 1863 with no buildings or sports venues located there?</question><sql>SELECT DISTINCT
SELECT COUNT(DISTINCT T2.Province) FROM `institution` AS T1 INNER JOIN "Province" AS T2 ON T1.Institution_ID = T2.City WHERE T1.Institution_ID LIKE 'Cal%' GROUP BY T2.Province ORDER BY COUNT(DISTINCT T2.Province) DESC LIMIT 0</sql>
SELECT COUNT(DISTINCT T2.Province) FROM `institution` AS T1 INNER JOIN `Region` AS T2 ON T1.Institution_ID = T2.Country WHERE T1.City IS NULL AND T1.Province = 'FR' GROUP BY T1.Province ORDER BY COUNT(DISTINCT T1.Province) DESC LIMIT 1</sql>
SELECT DISTINCT T1.Location, T2.Value, T3.Contents FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.code INNER JOIN Contents AS T3 ON T1.Warehouse = T3.Warehouse WHERE T1.Forecast IS NULL AND T3.Value > 100 ORDER BY T3.Value DESC LIMIT 1</sql>
SELECT DISTINCT T1.Location, T3.Contents, T2.value FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse INNER JOIN boxes AS T3 ON T1.Code = T3.Code WHERE T3.Warehouse IS NOT NULL</sql>
SELECT T1.Contents FROM Boxes AS T1 INNER JOIN Contents AS T2 ON T1.Code = T2.Code WHERE T1.Location = 'New York' ORDER BY T1.Contents DESC LIMIT 1</sql>
SELECT DISTINCT T1.Contents FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse WHERE T2.Location = 'NewYork' GROUP BY T1.Contents ORDER BY COUNT(T1.Contents) DESC LIMIT 1</sql>
SELECT DISTINCT T2.Contents FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T1.Value > 150</sql>
SELECT DISTINCT T2.Contents FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse WHERE T1.Value > ( SELECT MAX(VALUE) FROM boxes )</sql>
SELECT T2.Warehouse, AVG(T1.Value) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Code GROUP BY T2.Warehouse ORDER BY T1.Warehouse DESC LIMIT 1</sql>
SELECT AVG(T2.Value) FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code GROUP BY T2.Code ORDER BY SUM(T1.Value) DESC LIMIT 1</sql>
SELECT CAST(SUM(T2.Value / COUNT(T1.Boxes)) AS REAL) * 100, SUM(T3.Value) FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T2.Location IS NOT NULL GROUP BY T2.location ORDER BY CAST((SUM(T2.value) / COUNT(T2.Boxes)) AS RE
SELECT CAST(SUM(CASE WHEN T2.Value > 0 THEN T2.value ELSE NULL END)) / COUNT(T1.Warehouse), SUM(T2.Value) FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Code GROUP BY T2.Warehouse ORDER BY sum(CASE WHEN T1.Value > 0 THEN T1.value ELSE NULL END) DESC LIMIT 3
SELECT T2.TotalCapacity, SUM(T1.Capacity) FROM boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse GROUP BY T2.Location ORDER BY SUM(t2.value) DESC LIMIT 1</sql>
SELECT CAST(SUM(T2.Capacity) AS REAL), SUM(T3.TotalCapacity) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Code INNER JOIN Quantity AS T3 ON T1.Warehouse = T3.Warehouse WHERE T1.Location IS NOT NULL AND T3.Value = 1 ORDER BY CAST(SUM(T3.Quantity)
SELECT CAST(SUM(CASE WHEN T2.Value > 0 THEN T2.value END) AS REAL), MAX(T1.value) FROM Boxes AS T1 INNER JOIN Content AS T2 ON T1.Code = T2.Code ORDER BY T1.Contents DESC LIMIT 3</sql>
SELECT CAST(SUM(CASE WHEN T2.value > 0 THEN T2.Value ELSE NULL END) AS REAL) / COUNT(T1.boxes), SUM(CASE WHEN T3.`Content Type` = 'Box' THEN strftime('%J', T3.Date_received) - strftime('%J', T1.Date_shipped))</sql>
SELECT DISTINCT T1.Contents FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse ORDER BY SUM(T2.`Value`) DESC LIMIT 1</sql>
SELECT DISTINCT T1.Contents FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse ORDER BY T2.Value DESC LIMIT 1</sql>
SELECT SUM(SUM(T2.Value)) / COUNT(DISTINCT T2.Code) AS avg FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Code ORDER BY AVG(T2.Value) DESC LIMIT 1</sql>
SELECT SUM(AVG(T2.Value)) / COUNT(T1.Contents) FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T1.Location = 'box3567'</sql>
SELECT T2.Contents FROM Boxes AS T1 INNER JOIN Contents AS T2 ON T1.Code = T2.Code GROUP BY T2.Contents ORDER BY DISTINCT T2.Contents DISTINCT</sql>
SELECT DISTINCT T2.Contents FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse WHERE T1.Value IS NULL AND T1.Location IN ('N', 'H') ORDER BY T2.Location DESC LIMIT 3</sql>
SELECT COUNT(DISTINCT T1.Contents) FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T2.Location LIKE '%Rockville%' GROUP BY T2.Location</sql>
SELECT COUNT(DISTINCT T2.Contents) FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code ORDER BY T2.Name ASC LIMIT 1</sql>
SELECT T2.Location FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Warehouse = T2.Warehouse WHERE T1.Location IS NOT NULL GROUP BY T2.Location ORDER BY COUNT(DISTINCT t1.Location) DISTINCT T1.Code</sql>
SELECT T2.Location FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Warehouse = T2.Warehouse WHERE T1.Code IN ( 'A84930', 'C58975', 'F26425' )</sql>
SELECT DISTINCT T1.Code FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Location WHERE T1.Contents IN ('Red_pizza', 'Green_peppers') AND (T2.city IN ('Chicago') OR T2.city = 'New York')</sql>
SELECT DISTINCT T1.Code FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Location = T2.Code WHERE T2.City = 'Chicago' AND T2.State = 'NY' ORDER BY T1.Warehouse DESC LIMIT 1</sql>
SELECT SUM(Value) FROM Boxes WHERE Location = 'Chicago' OR Location = 'New York' GROUP BY Location ORDER BY SUM(Value) DESC LIMIT 1</sql>
SELECT SUM(Value) FROM Boxes WHERE Location IN ('Chicago', 'New York')</sql>
SELECT DISTINCT T2.Contents FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Warehouse = T2.Code WHERE T1.Location IN ('Chicago', 'New York')</sql>
SELECT DISTINCT T1.Contents FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse WHERE T2.Location = 'Chicago' AND T2.Location = 'New York' GROUP BY T1.Contents ORDER BY SUM(T1.Value) / COUNT(T1.Code) DESC LIMIT 3</sql>
SELECT DISTINCT T1.type FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse WHERE T2.Location = 'New York'</sql>
SELECT DISTINCT T2.Contents FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse WHERE T1.Location IS NOT NULL GROUP BY T2.Contents ORDER BY COUNT(T2.Contents) DESC LIMIT 1</sql>
SELECT DISTINCT T2.Location FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse WHERE T1.Contents = 'Rocks' AND T2.Warehouse IS NULL AND T1.Warehouse IS NOT NULL</sql>
SELECT DISTINCT T2.Location FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse WHERE T1.Contents != 'Rocks' AND T1.Value > 0 INTEGER GROUP BY T2.Location ORDER BY COUNT(T2.Code) DESC LIMIT 1</sql>
SELECT DISTINCT T1.Location FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse WHERE T1.Contents LIKE 'Rock%' OR T1.Contents LIKE 'Sixpennies%'</sql>
SELECT T1.Code, T2.contents FROM Boxes AS T1 INNER JOIN Contents AS T2 ON T1.Code = T2.Code WHERE T2.content IN ('ROCK','SCISSORS') GROUP BY T2.content ORDER BY COUNT(T2.content) DISTINCT T1.Code</sql>
SELECT DISTINCT T2.Location FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse WHERE T1.Contents = 'Rocks' AND T1.Contents = 'Scissors'</sql>
SELECT DISTINCT T2.Location FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse WHERE T1.Contents LIKE 'Rocks%' AND T1.Contents LIKE '%Scissors%' ORDER BY T2.Location DESC LIMIT 1</sql>
SELECT DISTINCT T1.Code, T2.Contents FROM Boxes AS T1 INNER JOIN Contents AS T2 ON T1.Code = T2.Code ORDER BY T2.Value DESC</sql>
SELECT DISTINCT T1.Code , T2.Contents FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code ORDER BY T2.`Value` DESC LIMIT 1</sql>
SELECT DISTINCT T1.Code, T2.Contents FROM Boxes AS T1 INNER JOIN Contents AS T2 ON T1.Code = T2.Code ORDER BY (T1.Value < T2.Value LIMIT 1) LIMIT 1</sql>
SELECT DISTINCT T1.Code, T2.Contents FROM Boxes AS T1 INNER JOIN warehouses AS T2 ON T1.Warehouse = T2.Code ORDER BY T2.Value LIMIT 1</sql>
SELECT DISTINCT T1.Contents FROM Boxes AS T1 INNER JOIN ( SELECT DISTINCT CONVERT(VALUE, 20), COUNT(DISTINCT T2.Value) FROM Warehouses AS T2 INNER JOIN Contents AS T3 ON T2.Warehouse = T3.Code GROUP BY DISTINCT T2.value ORDER BY SUM(t1.value) ) AS T4 ON T1.Warehouse = T4
SELECT DISTINCT T1.Contents FROM Boxes AS T1 INNER JOIN Warehouse AS T2 ON T1.Code = T2.Warehouse ORDER BY SUM(T1.Value) > ( SELECT AVG(T2.VALUE) FROM ( SELECT CAST(SUM(CASE WHEN t1.Contents IN (''\t' , '09641035') THEN T2.Value END) AS REAL ) AS v FROM Bo
SELECT DISTINCT T1.Contents FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code ORDER BY T2.Contents</sql>
SELECT DISTINCT T1.Contents FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse ORDER BY T2.Location DESC LIMIT 1</sql>
SELECT DISTINCT T1.Code FROM Boxes AS T1 INNER JOIN Rocks AS T2 ON T1.Boxes = T2.Code WHERE T2.Value > 0 ORDER BY T2.Value DESC LIMIT 1</sql>
SELECT DISTINCT T1.Code FROM Boxes AS T1 INNER JOIN Contents AS T2 ON T1.BoxID = T2.BoxID WHERE T2.Value > ( SELECT SUM(Value) FROM boxes AS T3 INNER JOIN containers AS T4 ON T3.Warehouse = T4.Warehouse WHERE T3.Contents LIKE 'Rock%' ORDER BY T2.Value LIMIT 1 )</sql>
SELECT DISTINCT T1.Code, T2.Contents FROM Boxes AS T1 INNER JOIN Box AS T2 ON T1.Warehouse = T2.Warehouse WHERE T2.Content LIKE '%Scissors%' GROUP BY T1.Code ORDER BY SUM(T2.Value) DESC LIMIT 1</sql>
SELECT DISTINCT T1.Code, T2.Contents FROM Boxes AS T1 INNER JOIN Contents AS T2 ON T1.Warehouse = T2.Warehouse WHERE T1.Value > ( SELECT MAX(VALUE) FROM Contents GROUP BY T1.Code )</sql>
SELECT SUM(value) FROM Boxes WHERE Location = 'New York' GROUP BY T2.Warehouse ORDER BY MAX(T1.Value) DESC LIMIT 1</sql>
SELECT SUM(Value) FROM Boxes WHERE Warehouse = ( SELECT MAX(Warehouse) FROM Boxes )</sql>
SELECT DISTINCT T2.Warehouse, AVG(T3.value) AS avg FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Code INNER JOIN Contents AS T3 ON T1.Location = T3.Code ORDER BY T3.Value DESC LIMIT 1</sql>
SELECT T3.Value, SUM(T2.Value) FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse GROUP BY T3.Warehouse ORDER BY SUM(SUM(T3.Value)) / COUNT(T3.Warehouse) DESC LIMIT 1</sql>
SELECT T1.value, COUNT(T2.Contents) FROM Boxes AS T1 INNER JOIN ContentTypes AS T2 ON T1.Code = T2.ContentType GROUP BY T1.Contents</sql>
SELECT SUM(Value) , COUNT(DISTINCT T2.Warehouse), COUNT(T1.Warehouse) FROM Boxes AS T1 INNER JOIN Contents AS T2 ON T1.Code = T2.Code GROUP BY T2.Value ORDER BY SUM(T1.value__REAL) DESC LIMIT 1</sql>
SELECT T2.value, SUM(T1.Value), MAX(T1.Value), SUM(T2.value) FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code GROUP BY T2.Location ORDER BY SUM(t2.Value) DESC LIMIT 3</sql>
SELECT T2.location , SUM(T1.Value), MAX(T1.Value) AS total_avg ,  sum(T1.value) AS max FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Code GROUP BY T1.Location ORDER BY ( SELECT SUM(CASE WHEN T3.location = 'xxxxx' THEN T2.Value END ) AS avg ,  MAX(T2
SELECT SUM(capacity) FROM Warehouses WHERE Location IN ('Lake County', 'Covington')</sql>
SELECT SUM(Capacity) FROM Warehouses GROUP BY Warehouse ORDER BY COUNT(Warehouse) DESC LIMIT 1</sql>
SELECT DISTINCT T2.Value, T3.Location FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse ORDER BY T3.Capacity DESC LIMIT 1</sql>
SELECT DISTINCT T2.Value FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Location = T2.Code ORDER BY T2.value DESC LIMIT 1</sql>
SELECT DISTINCT T1.Code, SUM(T2.Value) FROM ( SELECT T3.`Warehouse`, COUNT(T2.contents) AS num FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.BoxID = T2.Code GROUP BY T2.Code ORDER BY COUNT(T2.Contents), T2.Code</sql>
SELECT SUM(DISTINCT T1.Value) FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code ORDER BY T1.value DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T2.Location) FROM Boxes AS T1 INNER JOIN Rocks AS T2 ON T1.Code = T2.Code WHERE T1.Contents = 'Rocks' GROUP BY T2.Location ORDER BY COUNT(DISTINCT T2.Location) DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T2.Warehouse) FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Code GROUP BY T2.Code ORDER BY COUNT(DISTINCT T1.Contents), COUNT(DISTINCT T2.Code) DESC LIMIT 20</sql>
SELECT DISTINCT T1.Code , T2.Location, T2.Name FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T2.City = 'Atlanta'</sql>
SELECT DISTINCT T1.Code , T2.Location FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code ORDER BY T1.Code, T2.Location</sql>
SELECT T2.Code FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T1.Location = 'Chicago'</sql>
SELECT DISTINCT T1.Code FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse WHERE T2.Location = 'Chicago' AND T2.Capacity BETWEEN 0 AND 4</sql>
SELECT T1.value , SUM(T2.value) FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code GROUP BY T2.Location ORDER BY COUNT(T1.code)</sql>
SELECT SUM(COUNT(DISTINCT T2.Code)) / COUNT(DISTINCT T1.Warehouse), T2.Location FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Code WHERE T1.Location IN ( SELECT DISTINCT T3.Location FROM Warehouses AS T3 INNER JOIN Boxes AS T4 ON T3.Warehouse = T4.Warehouse
SELECT DISTINCT T2.Contents, SUM(T1.Value) FROM boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code GROUP BY T2.Location ORDER BY COUNT(T1.Contents) DESC LIMIT 1</sql>
SELECT T1.contents, COUNT(DISTINCT T2.type) FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Contents ORDER BY DISTINCT t2.Type</sql>
SELECT T2.Code FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Code WHERE T1.Capacity > 0 GROUP BY T2.Location ORDER BY SUM(T2.Value) DESC LIMIT 1</sql>
SELECT DISTINCT T1.Code FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Location = T2.Location WHERE T2.Value > ( SELECT SUM(MAX(VALUE)) FROM Boxes ) GROUP BY T1.Code ORDER BY COUNT(T2.Value) DESC LIMIT 3</sql>
SELECT SUM(SUM(T2.Value)) - SUM(SUM(T1.Value)) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Code WHERE T2.Location IS NULL ORDER BY T3.Warehouse DESC LIMIT 0</sql>
SELECT SUM(Value) FROM Boxes WHERE Location = 'Chicago' GROUP BY CONVERT(int, T2.Location), T1.Warehouse ORDER BY SUM(value) DESC LIMIT 3</sql>
SELECT DISTINCT T2.University_Name, T3.City, T1.State FROM `university` AS T1 INNER JOIN 'overall_ranking' AS T2 ON T2.University_ID = T1.University_ID ORDER BY T1.University_Name</sql>
SELECT DISTINCT T2.University_Name FROM "university AS T1 INNER JOIN `overall_ranking` AS T2 ON T1.University_ID = T2.University_ID ORDER BY T2.University_Name LIMIT 1</sql>
SELECT COUNT(T1.University_ID), T2.State FROM "university AS T1 INNER JOIN 'overall_ranking' AS T2 ON T1.University_ID = T2.University_ID WHERE T1.State LIKE '%Illinois%' OR T1.state LIKE '%Ohio%''</sql>
SELECT COUNT(T1.University_ID) FROM "university" AS T1 INNER JOIN state AS T2 ON T1.State = T2.State WHERE T1.City = 'Chicago' AND T1.State IN ('Ohio') AND T1.State LIKE '%Illinois%'</sql>
SELECT CAST(SUM(CASE WHEN T2.Enrollment = 15 THEN 1 ELSE 0 END) AS REAL), SUM(CASE WHEN T2.Enrollment > 32 AND T2.Enrollment < 9476 THEN 1 ELSE 0 END) , SUM(CASE WHEN T2.Enrollment IS NULL AND T2.Enrollment <= 25 THEN 1 ELSE 0 END) AS avg
SELECT CAST(SUM(CASE WHEN T2.Enrollment = 'max' THEN T1.enrollment END) AS REAL), SUM(CASE WHEN T2.Enrollment > 150 THEN 1 ELSE 0 END) AS num, SUM(CASE WHEN T2.enrollment BETWEEN 36 AND 64 THEN T2.enrollment END) - SUM(CASE WHEN T2.enrollment BET
SELECT DISTINCT T2.Team_Name FROM "university" AS T1 INNER JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID ORDER BY T2.Total DESC LIMIT 1</sql>
SELECT DISTINCT T2.Team_Name FROM "university" AS T1 INNER JOIN team AS T2 ON T1.University_ID = T2.University_ID GROUP BY T1.University_ID ORDER BY SUM(T1.Enrollment) / COUNT(T2.Team_Name), CAST(SUM(CASE WHEN T2.Involved THEN 'Involved' ELSE NULL END) AS REAL) AS avg
SELECT T2.home_conference FROM "university" AS T1 INNER JOIN "team_name" AS T2 ON T1.University_ID = T2.Team_ID ORDER BY T1.City</sql>
SELECT T1.Home_Conference FROM "university" AS T1 INNER JOIN "home_conference" AS T2 ON T1.University_ID = T2.University_ID GROUP BY T1.University_Name ORDER BY T3.Home_Conference DESC LIMIT 0, 4</sql>
SELECT DISTINCT T2.home_conference, COUNT(T1.University_ID) FROM 'university' AS T1 INNER JOIN 'overall_ranking' AS T2 ON T1.University_ID = T2.University_ID GROUP BY T2.Home_Conference ORDER BY DISTINCT T2.Reputation_point DESC</sql>
SELECT COUNT(T1.University_ID) FROM overview AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID WHERE T1.City IN ( SELECT city FROM overview WHERE T2.state = 'CA' GROUP BY T1.city ORDER BY COUNT(T2.home_conference) DESC LIMIT 1 )</sql>
SELECT DISTINCT T2.State FROM ( SELECT COUNT(DISTINCT T2.University_ID) AS Total , ROWNUM AS P1, T3.State AS State FROM ( SELECT distinct T1.state, T2.University_name, T2.city, T1.Enrollment AS E0, T1.PRIMARY_KEY FROM `university` AS T1 INNER JOIN `state` AS T2 ON T1.Univers
SELECT DISTINCT T2.State FROM "university" AS T1 INNER JOIN "university" AS T2 ON T1.University_ID = T2.University_ID WHERE T2.State IN ( SELECT DISTINCT State FROM 'all-states' ORDER BY COUNT(T3.state) DESC LIMIT 1 ) GROUP BY T3.state ORDER BY count(T1.City), count(T3.state) DESC LIMIT 1</
SELECT DISTINCT T1.home_conference FROM university AS T1 INNER JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID GROUP BY T1.city ORDER BY SUM(T1.enrollment) / COUNT(T1.city) DESC LIMIT 2</sql>
SELECT DISTINCT T1.home_conference, SUM(T2.university.enrollment / COUNT(T1.university)) AS avg FROM "university" AS T1 INNER JOIN "university" AS T2 ON T1.University_ID = T2.University_ID WHERE T2.State = 'FL' GROUP BY T2.state ORDER BY SUM(CASE WHEN T2.state LIKE '%FL%' THEN 1
SELECT DISTINCT T2.conference FROM overall_ranking AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID WHERE T1.`total` = ( SELECT SUM(T1.Total) FROM overall_ranking AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID ) AND T2.city IS NULL GROUP BY T2.city
SELECT DISTINCT T1.home_conference FROM "university" AS T1 INNER JOIN 'overall_ranking' AS T2 ON T1.University_ID = T2.University_ID ORDER BY T2.Research_point DESC LIMIT 0</sql>
SELECT DISTINCT T2.major, T3.major FROM "major" AS T1 INNER JOIN "university" AS T2 ON T1.University_ID = T2.University_ID ORDER BY T3.major DESC LIMIT 1</sql>
SELECT DISTINCT T2.name, T3.code FROM "major" AS T1 INNER JOIN "university" AS T2 ON T1.University_ID = T2.University_ID ORDER BY T3.code</sql>
SELECT T1.Major_Name, T2.Major_Rank FROM `major` AS T1 INNER JOIN `university` AS T2 ON T1.University_ID = T2.University_ID WHERE T2.State = 'Illinois' AND T1.Major_Code = 'MAJOR_D'</sql>
SELECT DISTINCT T2.name, T3.major_code FROM "major" AS T1 INNER JOIN "university" AS T2 ON T1.University_ID = T2.University_ID INNER JOIN "overall_ranking" AS T3 ON T2.Major_ID = T3.University_ID ORDER BY T1.name, T1.major DESC LIMIT 1</sql>
SELECT DISTINCT T2.University_Name, T2.City, T2.State FROM `major` AS T1 INNER JOIN "university" AS T2 ON T1.University_ID = T2.University_ID WHERE T2.University_Name = 'Accounting' ORDER BY T2.State DESC LIMIT 1</sql>
SELECT DISTINCT T2.University_Name, T2.City, T2.State FROM "university" AS T1 INNER JOIN `major` AS T2 ON T1.University_ID = T2.University_ID ORDER BY T2.Major_Code DESC LIMIT 1</sql>
SELECT DISTINCT T2.University_Name FROM "overall_ranking" AS T1 INNER JOIN "major" AS T2 ON T1.University_ID = T2.Major_ID WHERE T1.Rank > 9 ORDER BY T2.Major_Code DESC LIMIT 1</sql>
SELECT DISTINCT T2.University_Name FROM "overall_ranking" AS T1 INNER JOIN "major" AS T2 ON T1.University_ID = T2.Major_ID ORDER BY T1.Total DESC LIMIT 1</sql>
SELECT T2.University_Name FROM "overall_ranking" AS T1 INNER JOIN 'university' AS T2 ON T1.University_ID = T2.University_ID WHERE T1.Rank = 1 ORDER BY T1.Reputation_point DESC LIMIT 1</sql>
SELECT T3.name FROM "university" AS T1 INNER JOIN major AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Major_id IN ( SELECT MAX(T2.major_id) FROM major AS T2 INNER JOIN `overall_ranking` AS T3 ON T2.Major_id = T3.University_ID WHERE T1.State = 'FL' AND
SELECT T1.University_Name FROM "university" AS T1 INNER JOIN "major" AS T2 ON T1.University_ID = T2.Major_ID WHERE T1.Major_Code = 'Urban Education' AND T2.Major_Code = 'Accounting'</sql>
SELECT T1.University_Name FROM "university" AS T1 INNER JOIN major AS T2 ON T1.University_ID = T2.University_ID WHERE T2.`Major_Code` = 'ACCOUNTING' AND T2.`Major_Code` = 'Urban'</sql>
SELECT DISTINCT T2.University_Name, T3.Overall_ranking FROM university AS T1 INNER JOIN major AS T2 ON T1.University_ID = T2.Major_ID INNER JOIN overall_ranking AS T3 ON T1.University_ID = T3.University_ID WHERE T3.State = 'wisconsin'</sql>
SELECT DISTINCT T2.University_Name, T3.Rank FROM "university AS T1 INNER JOIN 'overall_ranking' AS T2 ON T1.University_ID = T2.University_ID WHERE T1."State" = 'WI' ORDER BY T2.REP DESC LIMIT 1</sql>
SELECT DISTINCT T2.University_Name FROM "overall_ranking" AS T1 INNER JOIN "university" AS T2 ON T1.University_ID = T2.University_ID WHERE T1.Rank = ( SELECT MAX(RANK) FROM overall_ranking ) LIMIT 1</sql>
SELECT DISTINCT T2.University_Name FROM "overall_ranking" AS T1 INNER JOIN "university" AS T2 ON T1.University_ID = T2.University_ID GROUP BY T2.University ORDER BY SUM(T2.Research_point) DESC LIMIT 1</sql>
SELECT DISTINCT T2.University_Name FROM "overall_ranking" AS T1 INNER JOIN "university" AS T2 ON T1.University_ID = T2.University_ID ORDER BY T1.reputation_point DESC LIMIT 1</sql>
SELECT DISTINCT T2.University_Name FROM "overall_ranking AS T1 INNER JOIN "university AS T2 ON T1.University_ID = T2.University_ID ORDER BY T1.RESTORATIONPOINTS DESC LIMIT 1</sql>
SELECT DISTINCT T2.University_Name FROM "overall_ranking" AS T1 INNER JOIN "university" AS T2 ON T1.University_ID = T2.University_ID WHERE T1.rank LIKE '%Accounting%' ORDER BY T1.rank DESC LIMIT 3</sql>
SELECT DISTINCT T2.University_Name FROM "overall_ranking" AS T1 INNER JOIN `university` AS T2 ON T1.University_ID = T2.University_ID WHERE T1.rank LIKE '3%' GROUP BY T2.University ORDER BY SUM(T1.REPRINT) DESC LIMIT 3</sql>
SELECT SUM(SUM(T2.enrollment)) FROM university AS T1 INNER JOIN "overall_ranking" AS T2 ON T1.University_ID = T2.university_id WHERE T2.rank < 3 AND T2.reputation_point <= 794</sql></question>
SELECT SUM(COUNT(T2.student_id)) FROM `university` AS T1 INNER JOIN 'overall_ranking' AS T2 ON T1.University_ID = T2.University_ID WHERE T1.Rank BETWEEN 5 AND 1 ORDER BY T2.Total LIMIT 1</sql>
SELECT DISTINCT T2.University_Name, T2.Research_point , T2.Citation_point FROM `university` AS T1 INNER JOIN `major` AS T2 ON T1.University_ID = T2.Major_ID ORDER BY T1.`Reputation_point` + 3 DESC LIMIT 3</sql>
SELECT DISTINCT T2.University_Name, T2.REP(T1.Research_point) FROM 'university' AS T1 INNER JOIN 'overall_ranking' AS T2 ON T1.University_ID = T2.University_ID ORDER BY T1.Total DESC LIMIT 3</sql>
SELECT DISTINCT T2.State FROM university AS T1 INNER JOIN state AS T2 ON T1.University_ID = T2.University_ID WHERE T1.enrollment <  3000 GROUP BY T2.State ORDER BY COUNT(T2.state) > 1</sql>
SELECT DISTINCT T1.State FROM university AS T1 INNER JOIN `university` AS T2 ON T1.University_ID = T2.University_ID ORDER BY T1.STATE, T2.Enrollment LIMIT 2</sql>
SELECT DISTINCT T2.Title FROM MovieTheaters AS T1 INNER JOIN movies AS T2 ON T1.Movie = T2.ID WHERE T2.Rating IS NULL AND T1.Name != 'none'</sql>
SELECT DISTINCT T2.Name FROM MovieTheaters AS T1 INNER JOIN movies AS T2 ON T1.Movie = T2.ID WHERE T2.Rating IS NULL LIMIT 1</sql>
SELECT T1.Name FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Title = T2.Movie WHERE T1.Rating = 'G'</sql>
SELECT DISTINCT T2.Name FROM MovieTHEATERS AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T1.Rating IS NULL AND T1.Title LIKE '%PG%' ORDER BY SUBSTR(T1.Name, 0, CHAR_LENGTH(SUBSTR('movie', 4)) - (CHAR_LENGTH(T1.title) / CHAR_LENGTH(SUBSTR(T2.title, 
SELECT T2.Title FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Movie WHERE T1.Name = 'ODEON'</sql>
SELECT T1.Title FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T2.Name = 'ODEON' AND T1.Name IN ( SELECT DISTINCT T3.Titel FROM MovieTHEATERS AS T1 INNER JOIN movies AS T3 ON T1.MovieID = T3.movieid WHERE T3.title = 'Odeon')</sql>
SELECT T1.Name FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code ORDER BY T2.Rating DESC LIMIT 1</sql>
SELECT T1.Name, T2.Name FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Code = T2.Movie WHERE T1.name = 'All movies' AND T2.Rating IS NOT NULL GROUP BY T2.Name ORDER BY COUNT(T2.movie) LIMIT 1</sql>
SELECT SUM(SUM(CASE WHEN Rating = 'G' THEN 1 ELSE -1 END)) FROM MovieTheaters WHERE Name = 'Movies with rating of G' AND Rating IS NOT NULL</sql>
SELECT COUNT(DISTINCT T2.Title), SUM(IIF(T2.Rating BETWEEN 5 AND 10)) AS num FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Movie = T2.Code WHERE T1.Rating >= 'G' GROUP BY T2.Name ORDER BY SUM(IIF(T2.Rating BETWEEN 5 AND 10)) DESC LIMIT 
SELECT COUNT(*) FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Name = T2.Movie WHERE T1.name = 'All movies'</sql>
SELECT COUNT(*) FROM movieTHEATERS WHERE Name = 'Movies' AND Movie IS NOT NULL ORDER BY Rating DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T2.Title) FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T1.Name = 'Mainstreet' GROUP BY DISTINCT T2.Title ORDER BY COUNT(DISTINCT T2.title) DESC LIMIT 0</sql>
SELECT COUNT(T1.Title) FROM MovieTHEATERS AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T1.Name IS NOT NULL AND T1.Rating < 5 ORDER BY CASE WHEN T3.Rating = '7' THEN COUNT(T1.movie__title) ELSE 0 END DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T2.Name), SUM(T1.Rating) FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Code = T2.Movie INNER JOIN movies AS T3 ON T3.Code = T1.Movie WHERE T3.Rating IS NULL GROUP BY COUNT(DISTINCT T3.Name), SUM(T1.Rating) ORDER BY COUNT(DISTINCT T2.Name)
SELECT COUNT(DISTINCT T2.Name) FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T1.Name = 'movie49' GROUP BY T2.Name ORDER BY COUNT(T2.Title) DESC LIMIT 3</sql>
SELECT DISTINCT T2.Rating FROM movies AS T1 INNER JOIN movies AS T2 ON T1.Movie = T2.Code WHERE T1.Title LIKE '%Citizen%' AND T2.Name LIKE '%Citizen'</sql>
SELECT CAST(T2.Rating AS STRING) - 5 FROM ( SELECT DISTINCT T1.Name, SUBSTR(T2.Title, INSTR(T2.title,' ',2)) + strftime('%A', T3.Date), RATING FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.MovieID = T2.Movie ) AS T1 ORDER BY CAST(T1.R
SELECT T1.Name FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Code = T2.Movie WHERE T1.Rating BETWEEN 'G' AND 'R' OR T1.Rating LIKE '%PG%'</sql>
SELECT DISTINCT T2.Name FROM MovieTheaters AS T1 INNER JOIN Rating AS T2 ON T1.Code = T2.Movie WHERE T1.Rating IN ('PG', 'K') AND T2.Title LIKE '%' ?%' GROUP BY T2.Name ORDER BY COUNT(T2.Rating) DESC LIMIT 1</sql>
SELECT DISTINCT T2.Name FROM MovieTheaters AS T1 INNER JOIN Movie AS T2 ON T1.Movie = T2.Code WHERE T1.Name IN ('Cinema Odeon', 'Imperial')</sql>
SELECT DISTINCT T1.Title FROM MovieTheaters AS T1 INNER JOIN movies AS T2 ON T1.Code = T2.Movie WHERE T1.Name = 'ODEON' ORDER BY T2.Rating DESC LIMIT 1</sql>
SELECT T1.Name FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T2.Rating BETWEEN 40 AND 65 ORDER BY T2.Title LIKE '%Od%'</sql>
SELECT T1.Title FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T1.Name = 'ODEON' AND T1.Name = 'Imperial' GROUP BY T1.Name ORDER BY T2.Rating</sql>
SELECT DISTINCT T1.Name FROM MovieTheaters AS T1 INNER JOIN Movie AS T2 ON T1.Movie = T2.Code WHERE T1.Name != 'ODEON'</sql>
SELECT DISTINCT T2.Name FROM MovieTheaters AS T1 INNER JOIN Movie AS T2 ON T1.Movie = T2.Code WHERE T1.name != 'ODEON' AND t1.movie != 'What to Watching?'</sql>
SELECT DISTINCT T2.Title FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code ORDER BY T2.Title IN ( 'Skyline', 'Beyond the Sea',  'Lifeforce',  'Ride Along')</sql>
SELECT T2.Name FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Code = T2.Movie ORDER BY T2.Title ASC LIMIT 1</sql>
SELECT DISTINCT T1.Title FROM Movies AS T1 INNER JOIN MovieTHEATERS AS T2 ON T1.Code = T2.Movie ORDER BY T2.Rating DESC LIMIT 1</sql>
SELECT T2.Name FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code ORDER BY T2.Rating DESC LIMIT 1</sql>
SELECT T1.Name FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code ORDER BY T2.Rating DESC LIMIT 1</sql>
SELECT T1.Name FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code ORDER BY COUNT(T2.Title) DESC LIMIT 1</sql>
SELECT T1.Name FROM movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Movie = T2.Movie ORDER BY T2.Count DESC LIMIT 1</sql>
SELECT T1.Name FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code ORDER BY T1.Count DESC LIMIT 1</sql>
SELECT SUM(CASE WHEN T2.Rating BETWEEN 3 AND 5 THEN 1 ELSE 0 END), COUNT(T2.Title) FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Movie = T2.Movie WHERE T1.Rating IN (3,5 ) GROUP BY T2.Rating ORDER BY SUM(CASE WHEN T2.Rating BETWEEN 3 AND 5 THEN 1
SELECT SUM(Count(T2.Title)) FROM Movies AS T1 INNER JOIN Rating AS T2 ON T1.Code = T2.Movie WHERE T1.Rating BETWEEN 3 AND 7 ORDER BY T1.Rating LIMIT 1</sql>
SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL</sql>
SELECT COUNT(T2.Title) FROM Movies AS T1 INNER JOIN MovieTHEATERS AS T2 ON T1.Movie = T2.Movie WHERE T1.Rating IS NOT NULL AND T1.Rating IS NULL LIMIT 0</sql>
SELECT DISTINCT T2.Name FROM MovieTheaters AS T1 INNER JOIN movies AS T2 ON T1.Movie = T2.ID GROUP BY T2.Name ORDER BY COUNT(T3.Name) DESC LIMIT 1</sql>
SELECT DISTINCT T2.Name FROM MovieTheaters AS T1 INNER JOIN movies AS T2 ON T1.Movie = T2.Code GROUP BY T2.Name ORDER BY COUNT(T1.Name) > 1 LIMIT 1</sql>
SELECT DISTINCT T2.Name FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T1.Name IS NOT NULL AND T2 = '' ORDER BY COUNT(T1.Title) DESC LIMIT 1</sql>
SELECT DISTINCT T2.Name FROM MovieTheaters AS T1 INNER JOIN movies AS T2 ON T1.Movie = T2.Code WHERE T1.movie IS NULL AND T1.Count < 5</sql>
SELECT T1.Name FROM MovieTheater AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T2.Rating = 'G'</sql>
SELECT DISTINCT T2.Name FROM MovieTheaters AS T1 INNER JOIN movies AS T2 ON T1.Movie = T2.Title WHERE T1.Rating = 'G'</sql>
SELECT DISTINCT T1.Title FROM Movies AS T1 INNER JOIN MovieTHEATERS AS T2 ON T1.Movie = T2.Movie WHERE T2.Name IS NOT NULL ORDER BY Rating DESC LIMIT 1</sql>
SELECT DISTINCT T1.Name FROM Movies AS T1 INNER JOIN MovieTHEATERS AS T2 ON T1.Title = T2.Movie WHERE T2.Name LIKE '%@stars@%' AND T1.Rating IS NOT NULL ORDER BY T2.Name</sql>
SELECT DISTINCT T1.Rating FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Name IS NULL AND T1.Rating IS NOT NULL GROUP BY T2.Name ORDER BY COUNT(T2.Rating) DESC LIMIT 1</sql>
SELECT T3.rating FROM movies AS T1 INNER JOIN Movies AS T2 ON T1.movie = T2.CODE WHERE T2.Title = 'The Dark Knight Rises'</sql>
SELECT DISTINCT T1.Title FROM Movies AS T1 INNER JOIN MovieTHEATERS AS T2 ON T1.Code = T2.Code WHERE T2.Name = 'RATING LIMIT'</sql>
SELECT DISTINCT T1.Title, T2.Rating FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Movie = T2.Code ORDER BY T1.title LIMIT 10</sql>
SELECT DISTINCT T2.Title FROM MovieTheaters AS T1 INNER JOIN Movie AS T2 ON T1.Movie = T2.Movie WHERE T1.Name IS NULL</sql>
SELECT DISTINCT T2.Title FROM MovieTheaters AS T1 INNER JOIN Movie AS T2 ON T1.Movie = T2.Code WHERE T1.Name IS NULL ORDER BY T1.ID LIMIT 1</sql>
SELECT DISTINCT T1.Name FROM Shipment AS T1 INNER JOIN AccountNumber AS T2 ON T1.ShipmentID = T2.AccountNumber ORDER BY T1.Weight DESC LIMIT 1</sql>
SELECT DISTINCT T1.Name FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.AccountNumber ORDER BY T2.Weight DESC LIMIT 1</sql>
SELECT SUM(weight) FROM shipment WHERE CustomerID = 'leo' AND DISTINCT T3.PlanetID IN ( SELECT DISTINCT T2.planetid, T1.contractnumber AS contract , 0 ) ORDER BY T1.</sql>
SELECT SUM(weight) FROM shipment WHERE name = 'Leo Wong'</sql>
SELECT DISTINCT T1.Position FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.Name = 'Amy WONG' AND T2.Date IS NOT NULL ORDER BY T2.Date DESC LIMIT 1</sql>
SELECT DISTINCT T1.Position FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.ShipmentID WHERE T1.Name = 'Amy Wong'</sql>
SELECT DISTINCT T1.Name , T1.Position, T2.name FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.EmployeeID ORDER BY T1.salary DESC LIMIT 1</sql>
SELECT DISTINCT T1.Name, T1.Position, T2.name FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Planet AS T3 ON T1.Planet = T3.Planet WHERE T3.Name = 'Turanga Leela'</sql>
SELECT AVG(salary) FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.ShipmentID WHERE T2.Date IS NOT NULL AND T1.Name IN ('intern', 'overseas-intership')</sql>
SELECT AVG(salary) FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.ShipmentID WHERE T2.PlanetID IS NULL ORDER BY T2.Date DESC LIMIT 1</sql>
SELECT DISTINCT T1.Level FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.ShipmentID WHERE T1.Name = 'Physician' AND T2.PlanetID = 885649</sql>
SELECT DISTINCT T1.Level FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.ShipmentID WHERE T1.Name = 'Dr.' ORDER BY T1.Level DESC LIMIT 1</sql>
SELECT T3.PackageNumber FROM Shipment AS T1 INNER JOIN Client AS T2 ON T1.ShipmentID = T2.AccountNumber WHERE T2.Name = 'Leo WONG' AND T2.Name = 'Baby-X' ORDER BY T1.Date DESC LIMIT 1</sql>
SELECT COUNT(*) FROM package AS T1 INNER JOIN shipment AS T2 ON T1.PackageNumber = T2.ShipmentID WHERE T1.Name = 'Leo Wong'</sql>
SELECT T3.PackageNumber FROM Shipment AS T1 INNER JOIN Package AS T2 ON T1.ShipmentID = T2.PackageNumber WHERE T1.Name = 'Leo WONG' AND T2.AccountNumber = T1.AccountNumber ORDER BY T2.PackageNumber LIMIT 1</sql>
SELECT T3.PackageNumber FROM Shipment AS T1 INNER JOIN Package AS T2 ON T1.ShipmentID = T2.PackageNumber WHERE T1.Name = 'Leo WONG' AND T2.AccountNumber = '1735968024550011963'</sql>
SELECT T3.Name FROM Shipment AS T1 INNER JOIN Package AS T2 ON T1.ShipmentID = T2.ShipmentID WHERE T1.Name = 'LeoWong'</sql>
SELECT T3.PackageNumber FROM Shipment AS T1 INNER JOIN Package AS T2 ON T1.ShipmentID = T2.ShipmentID WHERE T1.Name = 'Leo Wong' AND T2.PackageNumber IN (1, 2)</sql>
SELECT COUNT(T1.PackageNumber) FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.AccountNumber WHERE T1.Name = 'Ogden Wernstrom' AND T2.Contents = 'Apparel'</sql>
SELECT COUNT(*) FROM package AS T1 INNER JOIN employee AS T2 ON T1.Employee = T2.EmployeeID WHERE T1.Name = 'Ogden Wernstrom' AND T2.Name = 'Leo Wong' AND T1.ShipmentID INTEGER IS NULL</sql>
SELECT DISTINCT T1.Contents FROM Package AS T1 INNER JOIN Employee AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.Name = 'John Zoidfarb' AND T1.PackageNumber = 26968305</sql>
SELECT DISTINCT T1.Contents FROM Package AS T1 INNER JOIN Employee AS T2 ON T1.AccountNumber = T2.EmployeeID WHERE T2.Name = 'John Zoidfarb' AND T1.Contents = 'Some package contents for John Zoidfarb.'</sql>
SELECT DISTINCT T1.PackageNumber, T1.Weight FROM Clients AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Accountnumber WHERE T2.Name = 'John'</sql>
SELECT T3.PackageNumber, T1.Weight FROM Package AS T1 INNER JOIN Shipment AS T2 ON T1.ShipmentID = T2.ShipmentID WHERE T1.Name = 'John' ORDER BY T3.Weight DESC LIMIT 1</sql>
SELECT DISTINCT T1.PackageNumber, T2.Weight FROM Package AS T1 INNER JOIN ( SELECT DISTINCT T1.PlanetID , SUM(T2.weight) AS num FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.ShipmentID ORDER BY T2.Date DESC LIMIT 3 ) AS T3 ON T1.PackageNumber = T2.PackageNumber WHERE T2.Weight
SELECT T1.PackageNumber, T1.Weight FROM Package AS T1 INNER JOIN Shipment AS T2 ON T1.ShipmentID = T2.ShipmentID ORDER BY T2.Weight DESC LIMIT 3</sql>
SELECT DISTINCT T1.Name, COUNT(T2.PackageNumber) AS num FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.AccountNumber WHERE strftime('%J', T2.`Date`) IS NOT NULL GROUP BY T1.Name ORDER BY SUM(T3.`num`) DESC LIMIT 2</sql>
SELECT DISTINCT T1.Name FROM Package AS T1 INNER JOIN Clients AS T2 ON T1.Client = T2.AccountNumber ORDER BY COUNT(T1.PackageNumber) DESC LIMIT 1</sql>
SELECT DISTINCT T1.Name , SUM(T3.PackageNumber) / COUNT(T2.AccountNumber) FROM Shipment AS T1 INNER JOIN Client AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Package AS T3 ON T1.ShipmentID = T3.ShipmentID GROUP BY T3.PackageNumber ORDER BY SUM(CASE WHEN DISTINCT T2.AccountNumber IS NULL THEN 0 ELSE
SELECT T3.Count FROM Shipment AS T1 INNER JOIN Package AS T2 ON T1.ShipmentID = T2.ShipmentID WHERE T2.Contents = 'Package number' ORDER BY T1.Date DESC LIMIT 1</sql>
SELECT DISTINCT T1.Name FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.AccountNumber GROUP BY T1.Name ORDER BY COUNT(T2.PackageNumber) DESC LIMIT 1</sql>
SELECT DISTINCT T1.Name FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.AccountNumber GROUP BY T1.Name ORDER BY COUNT(T2.PackageNumber) DESC LIMIT 1</sql>
SELECT DISTINCT T1.Coordinates FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.Planet = T2.ShipmentID WHERE T2.Date BETWEEN '2014-11-20' AND '2015-7-30' AND T2.Manager = 4</sql>
SELECT DISTINCT T1.Coordinates FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.ShipmentID WHERE T1.Name = 'Mars'</sql>
SELECT DISTINCT T1.Name, T2.Coordinates FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.Planet = T2.ShipmentID WHERE T2.Date IS NOT NULL ORDER BY T2.Name DESC</sql>
SELECT DISTINCT T1.Name, T1.Coordinates FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.Planet = T2.ShipmentID WHERE T2.Date IS NOT NULL ORDER BY T2.Name, T1.Name</sql>
SELECT T3.ShipmentID FROM Shipment AS T1 INNER JOIN Manager AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.Name = 'Phillip Jay Fry' AND T2.Name IS 'Manager'</sql>
SELECT T3.ShipmentID FROM Shipment AS T1 INNER JOIN Customers AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.Name = 'Phillip J Fry' AND T1.EmployeeID IS NOT NULL ORDER BY T2.AccountNumber ASC LIMIT 1</sql>
SELECT DATE AS T1 FROM Shipment WHERE shipmentID = ( SELECT MAX(shipmentID) FROM Shipment )</sql>
SELECT Date FROM Shipment GROUP BY Date ORDER BY COUNT(DISTINCT T3.EmployeeID) DESC LIMIT 1</sql>
SELECT T3.ShipmentID FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.PlanetID = T2.PlanetID WHERE T2.Name = 'Mars'</sql>
SELECT T3.ShipmentID FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.Planet = T2.Name WHERE T2.Name = 'Mars' AND T1.EmployeeID IN ( SELECT DISTINCT T0.EmployeeID FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.Employees = T2.ShipmentNumber)</sql>
SELECT T2.ShipmentID FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.Planet = T2.Name WHERE T1.Manager = 'Turanga Leela' AND T1.Name = 'Mars' AND T2.IsClearance IS NULL AND T2.Remarks IN ('No clearance', '<strong>None')</sql>
SELECT T3.planetID FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.ShipmentID = T2.PlanetID WHERE T2.Name = 'Mars' AND T2.Manager = 'Turanga Leela'</sql>
SELECT T2.ShipmentID FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.PlanetID = T2.Planet WHERE T1.Manager = 'Turanga Leela' AND T2.Name LIKE '%Mars%'</sql>
SELECT T3.PlanetID FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.ShipmentID = T2.PlanetID WHERE T1.Name = 'Turanga Leela' AND T2.name = 'Mars'</sql>
SELECT DISTINCT T1.Name, SUM(T2.Shipment), T2.Total FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.Planet = T2.Planet GROUP BY T1.planet ORDER BY SUM(T2.Shipment) DESC LIMIT 1</sql>
SELECT DISTINCT T1.PlanetID FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.ShipmentID = T2.PlanetID GROUP BY T2.Planet ORDER BY COUNT(T2.Planet) FOR KEY INTERSECT SELECT T2.Name, T1.Name FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.ShipmentID = T2.Planet WHERE T
SELECT T3.Name FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.ShipmentID = T2.PlanetID ORDER BY T1.Shipment INTEGER DESC LIMIT 1</sql>
SELECT T3.Name FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.ShipmentID = T2.PlanetID ORDER BY T1.Employee, T1.Year DESC LIMIT 1</sql>
SELECT T3.Name, T1.PlanetID FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.ShipmentID WHERE T1.JobTitle = 'Manager' AND T2.Date BETWEEN '2021-5-29' AND '2021-12-30' GROUP BY T3.</sql>
SELECT T2.EmployeeID, T1.Name FROM Shipment AS T1 INNER JOIN Employee AS T2 ON T1.ShipmentID = T2.EmployeeID GROUP BY T1.Managers ORDER BY COUNT(T1.shipmentID) DESC LIMIT 1</sql>
SELECT SUM(T1.Weight) FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.ShipmentID = T2.PlanetID WHERE T1.Name = 'Mars'</sql>
SELECT SUM(T1.Weight) FROM Shipment AS T1 INNER JOIN Package AS T2 ON T1.ShipmentID = T2.PackageNumber WHERE T2.Name = 'Mars' AND T1.Date BETWEEN '1983-04-09 00:33:57' AND '1986-06-15 10:41:22'</sql>
SELECT T3.Name FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.ShipmentID = T2.PlanetID WHERE T1.Date LIKE '%DATE%' GROUP BY T2.name ORDER BY SUM(T1.TotalWeight) DESC LIMIT 1</sql>
SELECT T3.Name, SUM(T1.Weight * 0.8), T1.Name FROM Planet AS T1 INNER JOIN Package AS T2 ON T1.Planet = T2.PLANET_ID GROUP BY T2.Planet ORDER BY T2.Weight DESC LIMIT 3</sql>
SELECT T1.Name FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.ShipmentID = T2.PlanetID WHERE T1.Weight > 30</sql>
SELECT T1.Name FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.ShipmentID = T2.PlanetID WHERE T1.Weight > 30 GROUP BY T1.Name ORDER BY COUNT(T1.name) DESC LIMIT 1</sql>
SELECT T3.PackageNumber FROM Package AS T1 INNER JOIN Shipment AS T2 ON T1.ShipmentID = T2.ShipmentID WHERE T1.Name = 'Omicron Persei 8' AND T1.Manufacturer = 'Zapp Brannigan'</sql>
SELECT COUNT(T1.PackageNumber) FROM Package AS T1 INNER JOIN Shipment AS T2 ON T1.ShipmentID = T2.ShipmentID WHERE T1.Name LIKE '%Zapp%' AND T2.Manager = '%Brannigan%'</sql>
SELECT T3.PackageNumber FROM Package AS T1 INNER JOIN Shipment AS T2 ON T1.ShipmentID = T2.ShipmentID WHERE T1.Name = 'Omicron Persei 8' AND T1.Name IN ('Zapp Brannigan', '')</sql>
SELECT COUNT(*) FROM ( SELECT DISTINCT T3.PackageNumber AS pnum, T1.PlanetID , T2.Name , T1.Employee AS EMPLOYEE , CAST(T2.Shipment AS REAL) - T1.Weight AS Rate FROM Package AS T1 INNER JOIN OmicronPersei8 As T2 ON T2.AccountNumber = T1.AccountNumber INNER JOIN Planet AS T3 ON T3
SELECT DISTINCT T2.PackageNumber, SUM(T3.Weight * 185 / (47 * 3)) AS total FROM Shipment AS T1 INNER JOIN Package AS T2 ON T1.ShipmentID = T2.ShipmentID WHERE T1.Status = 'Pending' AND T1.Date BETWEEN '2019-07-15' AND '2019-08
SELECT T2.PackageNumber, T2.Weight FROM Package AS T1 INNER JOIN Shipment AS T2 ON T1.ShipmentID = T2.ShipmentID WHERE strftime('%J', T1.Date) BETWEEN '2015-9-27' AND '2016-4-30' ORDER BY T1.PackageNumber , T2.Weight DESC LIMIT 1</sql>
SELECT T3.Name FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.ShipmentID WHERE T2.Planet IS NULL AND T2.`Level` IS NOT NULL ORDER BY T3.Name IS NULL LIMIT 1</sql>
SELECT T3.Name FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.ShipmentID WHERE T2.Planet != 'Mars' GROUP BY T1.Name ORDER BY COUNT(T1.Name) - 1 LIMIT 1</sql>
SELECT DISTINCT T1.Name FROM Employee AS T1 INNER JOIN Package AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.PackageNumber = 5678403</sql>
SELECT DISTINCT T1.Name FROM Employee AS T1 INNER JOIN Package AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.PackageNumber = 3 AND T2.Contents = 'Omega III'</sql>
SELECT DISTINCT T1.Name FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.ShipmentID WHERE T2.Date IS NULL AND T1.Salary > 5000</sql>
SELECT DISTINCT T1.Name FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.ShipmentID WHERE T2.Planet IN ( SELECT T3.Name FROM Client AS T3 INNER JOIN shipment AS T4 ON T3.ClientID = T4 .ShipmentID WHERE T2.Level BETWEEN 6 AND 7 ORDER BY T2.Date DESC LIMIT 1 )</
SELECT DISTINCT T3.Name FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.ShipmentID WHERE T2.Salary BETWEEN 5000 AND 10000</sql>
SELECT DISTINCT T3.Name FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.ShipmentID WHERE T2.Salary BETWEEN 5000 AND 10000 ORDER BY T2.Date DESC LIMIT 1</sql>
SELECT T3.Name FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.ShipmentID WHERE T2.Salary > ( SELECT AVG(T2.Salary) FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.PlanetID = T2.Planet WHERE Remarks = 'Calculate salaries' AND Name LIKE '%%' ORDER BY salary DESC LIMIT 1 )
SELECT DISTINCT T1.Name FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.ShipmentID WHERE T2.`Weight` IS NULL GROUP BY T1.Name ORDER BY SUM(T1.`Salary`) / COUNT(T1) - AVG(salary) DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T1.EmployeeID) FROM Employee AS T1 INNER JOIN Package AS T2 ON T1.Employee = T2.AccountNumber WHERE T2.PackageNumber IS NULL AND T1.Name = 'Mars' ORDER BY COUNT(T2.PackageNumber) DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T1.EmployeeID) FROM Shipment AS T1 INNER JOIN Client AS T2 ON T1.ShipmentID = T2.ShipmentID WHERE T1.Planet != 'Mars' GROUP BY T2.AccountNumber ORDER BY COUNT(T1.EmployeeID) - 1</sql>
SELECT COUNT(T1.game_id) FROM "game" AS T1 INNER JOIN player AS T2 ON T1.platform_id = T2.Platform_ID WHERE T1.Title = 'Game Name' GROUP BY T1.Platform_name ORDER BY COUNT(T1.game_id) DESC LIMIT 0</sql>
SELECT COUNT(DISTINCT T2.game_id) FROM game AS T1 INNER JOIN player AS T2 ON T1.game_id = T2.game_id WHERE T1.title IS NULL AND T1.release_date BETWEEN '2009-08' AND '2004-10'</sql>
SELECT T2.title, T1.Developers FROM ( SELECT DISTINCT title , CAST(SUM(CASE WHEN "units_sold" > 0 THEN 'Small' END) AS REAL ) * 100/18 - SUM(CASE WHEN "units_sold" > 0 AND market_district = "Large" THEN 1 ELSE NULL END AS INDEX (SUM(CASE WHEN "units_sold
SELECT DISTINCT T2.title, T3.developer FROM game AS T1 INNER JOIN player AS T2 ON T1.Game_ID = T2.Game_ID ORDER BY T2.Platform_name DESC LIMIT 1</sql>
SELECT CAST(SUM(CASE WHEN T2.game IS NULL THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.Game_ID), SUM(T3.market_rank) FROM game AS T1 INNER JOIN player AS T2 ON T1.Game_ID = T2.Game_id INNER JOIN player AS T3 ON T1.Player_ID = T3.player_id WHERE T3.position != 'R' AND
SELECT CAST(SUM(CASE WHEN T2.Market_district = 'Nintendo' THEN T1.Units_sold_Millions END) AS REAL) / COUNT(*) FROM "game" AS T1 INNER JOIN player AS T2 ON T1.Game_ID = T2.Game_ID WHERE NOT T2.College = 'Nintendo' AND T1.Platform_id != 'Nintendo'</sql>
SELECT DISTINCT T2.Platform_name, T1.Market_district FROM ( SELECT DISTINCT T2.Platform_id AS Platform_ID , T3.`if_active` FROM "game" AS T1 INNER JOIN "player" AS T2 ON T1.Game_id = T2.Game_ID WHERE T1.Is_active IS NOT NULL AND T2.Played = 0 GROUP BY T2.Platform_name,
SELECT DISTINCT T2.platform_name, T1.market_district FROM games AS T1 INNER JOIN platforms AS T2 ON T1.game_id = T2.Game_ID GROUP BY T2.platform_name ORDER BY T1.`release_date` DESC LIMIT 1</sql>
SELECT DISTINCT T2.platform_name, T3.Platform_id FROM game AS T1 INNER JOIN platform AS T2 ON T1.Game_ID = T2.Platform_ID WHERE T1.Release_Date BETWEEN '2014-10' AND '2016-3' GROUP BY T2.Platform_name ORDER BY COUNT(T1.Download_rank) DESC LIMIT 2</sql>
SELECT DISTINCT T2.Platform_name, T3.Platform_id FROM game AS T1 INNER JOIN player AS T2 ON T1.Game_ID = T2.Game_ID WHERE T1.Release_Date BETWEEN '2014-07-18' AND '2022-06-13' ORDER BY T3.Platform_rank DESC LIMIT 1</sql>
SELECT SUM(max(RANK()) - min(RANK())) AS x FROM ( SELECT CAST((T1.position AS float), 'float') AS T2, ROW_NUMBER() AS RN FROM player AS T1 INNER JOIN game AS T2 ON T1.Player_ID = T2.Game_ID ORDER BY T2.Title DESC LIMIT 3 ) AS T WHERE T2.Rank = ( SELECT SUM(T2.rank)
SELECT DISTINCT T2.rank_of_the_year, MAX(T1.`Rank_of_the_year`) FROM player AS T1 INNER JOIN game AS T2 ON T1.Player_ID = T2.Platform_id WHERE T2.Release_Date BETWEEN '2000-01-01' AND '2023-05-28' GROUP BY T2.Game_ID ORDER BY
SELECT COUNT(T1.player_id) FROM player AS T1 INNER JOIN ( SELECT MAX(CASE WHEN DISTINCT 'Rank_of_the_year' = '50' THEN T1.Player_name END ) AS RATED FROM player AS T1 INNER JOIN game AS T2 ON T1.game_id = T2.Game_ID WHERE 'year' BETWEEN 3 AND 9 ORDER BY DISTINCT 'Rank
SELECT COUNT(T1.player_id) FROM player AS T1 INNER JOIN games AS T2 ON T1.game_id = T2.Game_ID WHERE T2.year <= ( SELECT MIN(YEAR) FROM game ) - 3 LIMIT 1</sql>
SELECT DISTINCT T2.player_name FROM player AS T1 INNER JOIN game AS T2 ON T1.Player_ID = T2.Platform_ID ORDER BY T1.Position, T1.Rank_of_the_year</sql>
SELECT DISTINCT T2.player_name FROM player AS T1 INNER JOIN game_player AS T2 ON T1.Player_ID = T2.Game_ID ORDER BY T1.Position ORDER BY T1.position ASC LIMIT 1</sql>
SELECT DISTINCT T2.player_name, T1.college FROM ( SELECT CAST(T1.player_name AS REAL ) AS T2 , T3.game_ID AS PARENT_GAME_ID , strftime('%Y', T2.release_date) AS rank , SUBSTR(T2.title, 4, LENGTH - 36) AS college FROM ( SELECT CAST(T1.
SELECT DISTINCT T2.player_name , T1.position, T1.position FROM player AS T1 INNER JOIN game_player AS T2 ON T1.Player_ID = T2.Game_ID ORDER BY T1.Rank DESC</sql>
SELECT DISTINCT T2.player_name, T1.rank FROM player AS T1 INNER JOIN game AS T2 ON T1.Player_ID = T2.Game_ID WHERE T2."Title" = 'Super Mario World' LIMIT 1</sql>
SELECT DISTINCT T2.player_name, T1.rank FROM player AS T1 INNER JOIN game AS T2 ON T1.Player_ID = T2.Game_ID WHERE T2.title = 'Super Mario World'</sql>
SELECT T1.developer FROM game AS T1 INNER JOIN player AS T2 ON T1.game_id = T2.Game_ID WHERE T2.position = 'Player' AND T1.name LIKE '%Auburn%' ORDER BY COUNT(T1.developer) DESC LIMIT 1</sql>
SELECT T1.Name FROM game AS T1 INNER JOIN player AS T2 ON T1.game_id = T2.Game_ID WHERE T2.College = 'Auburn' AND T2.Position IN ('RB', 'TE') AND T2.Player_name = 'Nathan Drew' LIMIT 1</sql>
SELECT CAST(SUM(CASE WHEN T2.Position = 'GUARD' THEN T1.units_sold_millions END) AS REAL) / COUNT(*) FROM player AS T1 INNER JOIN game AS T2 ON T1.Player_ID = T2.Player_ID GROUP BY T2.Game_ID ORDER BY SUM(T2.units_sold_millions) DESC LIMIT 3</sql>
SELECT AVG(T2.Rank_of_the_year) AS sum FROM game_player AS T1 INNER JOIN player AS T2 ON T1.Player_ID = T2.Player_ID WHERE T2.Position = 'Guard' ORDER BY T1.Rank_of_the_year DESC LIMIT 1</sql>
SELECT T2.title, T1.platform_name FROM "game AS T1 INNER JOIN player AS T2 ON T1.player_id = T2.Player_ID WHERE T1.release_date BETWEEN '2021-9' AND '2021-6'</sql>
SELECT DISTINCT T1.title, T2.platform_name FROM game AS T1 INNER JOIN player AS T2 ON T1.game_id = T2.Game_ID WHERE T2.position = 'Soldier' ORDER BY T2.`Rank_of_the_year`, T2.Platform_ID</sql>
SELECT DISTINCT T2.title FROM "game" AS T1 INNER JOIN game_player AS T2 ON T1.game_id = T2.Game_ID WHERE T1.Market_district IN ('Asia', 'United States')</sql>
SELECT DISTINCT T2.title FROM game AS T1 INNER JOIN player AS T2 ON T1.game_id = T2.Game_ID WHERE T1.market_district = 'asia' AND T1.platform IN ( SELECT T1.platforms FROM game AS T1 INNER JOIN player AS T2 ON T1.game_id = T2.Player_ID WHERE T2.Market_district LIKE '%USA%' ORDER BY T
SELECT DISTINCT T2.title, T3.num_games FROM `game` AS T1 INNER JOIN `game_player` AS T2 ON T1.Game_ID = T2.Game_ID WHERE T1.Title LIKE '%%' OR T1.Release_Date LIKE '%%'</sql>
SELECT DISTINCT T2.title, COUNT(T1.game_id), T1.player_name FROM game AS T1 INNER JOIN player AS T2 ON T1.Game_ID = T2.Game_ID GROUP BY T2.Franchise ORDER BY COUNT(T2.Game_id) DESC</sql>
SELECT T1.title FROM game AS T1 INNER JOIN player AS T2 ON T1.game_id = T2.Game_ID ORDER BY T1.rank DESC LIMIT 1</sql>
SELECT T1.title, T2.name FROM game AS T1 INNER JOIN game_player AS T2 ON T1.game_id = T2.Game_ID GROUP BY T1.title ORDER BY COUNT(T1.title) DESC LIMIT 3</sql>
SELECT DISTINCT T2.title FROM game AS T1 INNER JOIN player AS T2 ON T1.game_id = T2.game_id WHERE T1.franchise IN ('Alien', 'Halo') GROUP BY T2.Title ORDER BY COUNT(T2.Franchise) DESC LIMIT 2</sql>
SELECT T1.title, T2.title FROM game AS T1 INNER JOIN game_player AS T2 ON T1.game_id = T2.Game_ID GROUP BY T1.title HAVING COUNT(T2.Game) > 1</sql>
SELECT DISTINCT T2.player_name FROM player AS T1 INNER JOIN games AS T2 ON T1.Player_ID = T2.Platform_ID WHERE T1.Position IS NULL AND NOT T1.position IN ('Fighter, Jetfighter')</sql>
SELECT DISTINCT T2.player_name FROM player AS T1 INNER JOIN game AS T2 ON T1.Player_ID = T2.Game_ID WHERE T1.position IS NULL AND (T1.college IS NULL OR 'bachelor' IN ('bachelor', 'master') ORDER BY T2.Players.Rank_of_the_year LIMIT 1)</sql>
SELECT DISTINCT T2.title FROM player AS T1 INNER JOIN game AS T2 ON T1.Player_ID = T2.Game_ID WHERE T1.College = 'OK' INTERSECT SELECT T2.title, T1.name FROM player AS T1 INNER JOIN game AS T2 ON T1.Player_ID = T2.Game_ID WHERE T2.title IS NOT NULL AND T2.title LIKE '%Oklahoma%'
SELECT DISTINCT T1.title FROM player AS T1 INNER JOIN game AS T2 ON T1.Player_ID = T2.Game_ID WHERE T2.Market_district = 'OKLAHOMA' AND T1.College  = 'Auburn'</sql>
SELECT T1.title FROM game AS T1 INNER JOIN franchise AS T2 ON T1.Game_ID = T2.game_id ORDER BY T2.franchise DISTINCT</sql>
SELECT T1.title, T2.title FROM games AS T1 INNER JOIN players AS T2 ON T1.game_id = T2.game_id WHERE T1.Franchise IN ('Call of Duty', 'Fast and Furious') GROUP BY T1.Franchise ORDER BY COUNT(T2.Title) DESC LIMIT 1</sql>
SELECT T1.title FROM game AS T1 INNER JOIN player AS T2 ON T1.game_id = T2.Game_ID WHERE T2.position = 'Guard'</sql>
SELECT DISTINCT T2.title FROM player AS T1 INNER JOIN game AS T2 ON T1.Player_ID = T2.Game_ID WHERE T1.Position IN ('Guard')</sql>
SELECT DISTINCT T1.name FROM "press AS T1 INNER JOIN author AS T2 ON T1.Press_ID = T2.Author_ID ORDER BY T1.`Year_Profits_billion` DESC LIMIT 1</sql>
SELECT DISTINCT T1.name FROM press AS T1 INNER JOIN author AS T2 ON T1.press_id = T2.Press_ID ORDER BY T1.release_date DESC LIMIT 1</sql>
SELECT DISTINCT T2.name FROM book AS T1 INNER JOIN press AS T2 ON T1.Book_ID = T2.Press_ID WHERE T1.Year_Profits_billion > ( SELECT MAX(YEAR) - 1 ) * 100 + T1.month_profit_billion BIGGER THEN T1.name END AS result GROUP BY T2.press_id ORDER BY SUM(T2
SELECT DISTINCT T2.name FROM book AS T1 INNER JOIN press AS T2 ON T1.Book_ID = T2.Press_ID WHERE T1.YearProfits BETWEEN 15 AND 1 AND T1.monthProfit BETWEEN 10 AND 30 GROUP BY T2.name ORDER BY SUM(T1.`YearProfits_billion`) + SUM(T1.monthProfit
SELECT AVG(SUM(CASE WHEN T2.Years IN (1903, 2017) THEN Sale_Amount ELSE NULL END)) AS avg , MAX(CASE WHEN T2.Years = 1975 THEN T2.Price END) FROM press AS T1 INNER JOIN book AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T1.release_date LIMIT 1</sql>
SELECT CAST(SUM(CASE WHEN T2.Years IN (3,15000) THEN SUM(T2.Price * T1.Sales_Amount - 624.789601) END)) / COUNT(`Book`) AS Percentage , MAX(CAST(SUM(CASE WHEN T2.Years = 3 AND (T2.`Year` = '15000' OR T2.`Year
SELECT T2.name FROM press AS T1 INNER JOIN book AS T2 ON T1.Press_ID = T2.PRIMARY KEY WHERE T1.months_profits_billion BETWEEN 1 AND 56 ORDER BY t2.release_date LIMIT 1</sql>
SELECT T1.name FROM "press" AS T1 INNER JOIN author AS T2 ON T1.Author_ID = T2.Author_ID ORDER BY T1.Months_billion DESC LIMIT 1</sql>
SELECT T2.Name FROM press AS T1 INNER JOIN book AS T2 ON T1.Press_ID = T2.Book_ID ORDER BY T1.Years - ( SELECT MAX(T1.Years) FROM press AS T3 INNER JOIN publisher AS T4 ON T3.PRIMARY KEY ("Author_ID") = T4.Name WHERE T3.SalesAmount = 9 ) DESC LIMIT 2</sql>
SELECT DISTINCT T1.name FROM book AS T1 INNER JOIN pricing_data AS T2 ON T1.book_ID = T2.Book_ID ORDER BY SUM(T2.Profit_billion) DESC LIMIT 1</sql>
SELECT COUNT(T2.Name) FROM book AS T1 INNER JOIN author AS T2 ON T1.Book_ID = T2.Book_ID WHERE T1.YearProfitsBillion > 98 AND T1.Age BETWEEN 30 AND 46 AND T2.Gender IS 'F'</sql>
SELECT COUNT(T2.Name) FROM book AS T1 INNER JOIN author AS T2 ON T1.Book_ID = T2.Book_ID WHERE T1.YearsProfitsBillion < 30 AND T2.Gender IS 'F'</sql>
SELECT SUM(CASE WHEN T1.Gender = 'M' THEN strftime('%J', T2.release_date) - strftime('%J', T1.age)) / ( SELECT COUNT(T2.Author_ID) FROM Author AS T1 INNER JOIN Press AS T2 ON T1.Book_ID = T2.book_id WHERE strftime('%Y', T2.release_date) - strftime('%
SELECT T1.Gender, AVG(T2.age) FROM author AS T1 INNER JOIN press AS T2 ON T1.Author_ID = T2.Press_ID GROUP BY T2.gender ORDER BY T2.gender, T2.`Age` DESC LIMIT 3</sql>
SELECT DISTINCT T1.Name, SUM(T2.`Years_Worked`), SUM(T1.Age), strftime('%J', T2.Sale_Date) AS date , T1.Gender FROM authors AS T1 INNER JOIN press AS T2 ON T1.Author_ID = T2.Press_ID GROUP BY T1.`Gender` ORDER BY T2.`Years_Worked DESC LIMIT 3</sql>
SELECT DISTINCT T1.Name, T2.Gender FROM 'author' AS T1 INNER JOIN 'press' AS T2 ON T1.Author_ID = T2.Press_ID INNER JOIN 'book' AS T3 ON T1.Book_ID = T3.Book_ID WHERE T1.Gender BETWEEN 60 AND 40 ORDER BY T3.`years_profits_billion` DESC LIMIT 
SELECT DISTINCT T1.title FROM book AS T1 INNER JOIN press AS T2 ON T1.Book_ID = T2.Press_ID ORDER BY T2.Release_date</sql>
SELECT DISTINCT T1.title FROM book AS T1 INNER JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.RELEASE_DATE DESC LIMIT 1</sql>
SELECT SUM(sale_amount), COUNT(title) FROM book GROUP BY series ORDER BY series DESC LIMIT 1</sql>
SELECT COUNT(T2.Book_ID), T1.book_series FROM ( SELECT T2.Title AS book_title , T1.Name AS author, SUM(T2.Price) AS sales_amount FROM book AS T1 INNER JOIN press AS T2 ON T1.Book_ID = T2.Press_ID GROUP BY T2.Name ORDER BY COUNT(DISTINCT T2.Author_ID) ) AS T1 INNER JOIN book AS T
SELECT DISTINCT T1.title, T2.publish_date FROM book AS T1 INNER JOIN press AS T2 ON T1.Book_ID = T2.Press_ID ORDER BY T2.sale_amount DESC LIMIT 5</sql>
SELECT DISTINCT T1.title, T2.release_date FROM book AS T1 INNER JOIN press AS T2 ON T1.Book_ID = T2.Press_ID ORDER BY T3.sale_amount DESC LIMIT 5</sql>
SELECT DISTINCT T2.title FROM press AS T1 INNER JOIN book AS T2 ON T1.Press_ID = T2.Press_ID WHERE T1.sales BETWEEN (500 - 3) AND T1.num > 1000 ORDER BY t1.num DESC LIMIT 1</sql>
SELECT DISTINCT T2.title FROM ( SELECT DISTINCT T3.TITLE, SUM(T2.sale_amount) AS total FROM book AS T1 INNER JOIN press AS T2 ON T1.Book_ID = T2.Press_ID WHERE T1.release_date BETWEEN 0 AND 500 GROUP BY T1.title ORDER BY sum(t1.sales_amount) DESC LIMIT 1 ) AS
SELECT DISTINCT T1.name FROM 'author' AS T1 INNER JOIN press AS T2 ON T1.Author_ID = T2.Press_ID WHERE T2.series IN ('MM', 'LT') GROUP BY T1.name ORDER BY count(T1.name) DESC LIMIT 1</sql>
SELECT DISTINCT T1.Name FROM 'book' AS T1 INNER JOIN author AS T2 ON T1.Book_ID = T2.Author_ID WHERE T2.`Gender` = 'M' AND T2.PRIMARYKEY("YearProfitsBillion") IN (('MM', 995637845), ('LT', 90414431))</sql>
SELECT DISTINCT T1.Name, T2.Age FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Book_ID WHERE T2.Title = 'none' AND T2.YearProfits_billion = 0</sql>
SELECT DISTINCT T2.Name FROM press AS T1 INNER JOIN book AS T2 ON T1.Press_ID = T2.Press_ID WHERE T1.Release_date IS NULL AND NOT T1.Book_Series IN ('Invisible Man','Halo 4')</sql>
SELECT DISTINCT T1.Name FROM "book" AS T1 INNER JOIN "author" AS T2 ON T1.Book_ID = T2.Author_ID GROUP BY T1.Title ORDER BY COUNT(T2.Name) > 1 LIMIT 1</sql>
SELECT DISTINCT T2.name FROM 'author' AS T1 INNER JOIN publication AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T2.author ORDER BY SUM(T2.sales_amount) DESC LIMIT 1</sql>
SELECT T2.title, T1.name AS Author_ID, T2.`publisher_name` FROM "book" AS T1 INNER JOIN "author" AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T3 ORDER BY COUNT(T1.ISBN) DESC LIMIT 3</sql>
SELECT DISTINCT T1.title, T2.name AS authors_and_press , T2.publisher FROM book AS T1 INNER JOIN press AS T2 ON T1.book_ID = T2.Book_ID ORDER BY SUM(T3.sales_amount) DESC LIMIT 3</sql>
SELECT DISTINCT T1.name, SUM(T2.`Sale_amount`) AS total FROM `press` AS T1 INNER JOIN `author` AS T2 ON T1.Press_ID = T2.Author_ID GROUP BY T1.PRIMARY KEY (T1.Name), T2.Gender</sql>
SELECT DISTINCT T1.name, SUM(T2.`Sales_amount`) AS total FROM `book` AS T1 INNER JOIN `press` AS T2 ON T1.Press_ID = T2.Press_ID GROUP BY T1.Author_ID ORDER BY SUM(T1.`sale_amount__2014`) DESC, SUM(T2.Sales_amount) ASC LIMIT 1</sql>
SELECT DISTINCT T2.name, SUM(T3.`sales_amount`) FROM `press` AS T1 INNER JOIN book AS T2 ON T1.Press_ID = T2.Book_ID GROUP BY T2.publisher ORDER BY sum(T1.sales_amount) DESC LIMIT 10</sql>
SELECT DISTINCT T2.name , T2.sales FROM press AS T1 INNER JOIN book AS T2 ON T1.Press_ID = T2.PRIMARY KEY GROUP BY T1.Press_ID ORDER BY SUM(T3.`sales`) > 1000</sql>
SELECT T1.Name FROM "book" AS T1 INNER JOIN "author" AS T2 ON T1.Book_ID = T2.Author_ID WHERE T1.title = 'best seller' ORDER BY T2.Gender ASC LIMIT 1</sql>
SELECT T1.Name FROM "book" AS T1 INNER JOIN author AS T2 ON T1.Author_ID = T2.Author_ID ORDER BY T1.Sales_Amount DESC LIMIT 1</sql>
SELECT T1.name, T2.gender FROM book AS T1 INNER JOIN press AS T2 ON T1.Book_ID = T2.Press_ID ORDER BY COUNT(T1.title) DESC LIMIT 1</sql>
SELECT T1.name, T2.gender FROM "book" AS T1 INNER JOIN authors AS T2 ON T1.author_id = T2.Author_ID ORDER BY T1.sales_amount DESC LIMIT 1</sql>
SELECT DISTINCT T1.Name FROM author AS T1 INNER JOIN press AS T2 ON T1.Author_ID = T2.Press_ID WHERE T2.Name NOT IN ( SELECT T1.Name FROM `book` AS T1 INNER JOIN `press` AS T2 ON T1.Book_ID = T2.Book_ID WHERE 'Accor' != 0 )</sql>
SELECT DISTINCT T2.name FROM press AS T1 INNER JOIN author AS T2 ON T1.Press_ID = T2.Press_ID WHERE T1.press != 'Accor' ORDER BY T2.Name NOT IN (T2.Author_ID)</sql>
SELECT T2.Name, T1.YearProfitsBillion FROM Press AS T1 INNER JOIN book AS T2 ON T1.Press_ID = T2.Book_ID ORDER BY COUNT(T2.Title) DESC LIMIT 2</sql>
SELECT DISTINCT T1.name , T2.`Year_Profits_billion`, T1.release_date FROM press AS T1 INNER JOIN book AS T2 ON T1.press_id = T2.Press_ID GROUP BY T1.title ORDER BY COUNT(T2.book_id) > 2</sql>
SELECT COUNT(T2.author_name) FROM Documents AS T1 INNER JOIN Authors AS T2 ON T1.document_id = T2.author_id WHERE T1.document_description LIKE '%author%' GROUP BY T2 ORDER BY COUNT(*) DESC LIMIT 1</sql>
SELECT DISTINCT T1.author_name FROM Documents AS T1 INNER JOIN authors AS T2 ON T1.document_id = T2.author_id WHERE T1.document_description IN ('Product Description', 'Marketing Description', 'Other')</sql>
SELECT DISTINCT T2.other_details FROM Documents AS T1 INNER JOIN Authors AS T2 ON T1.author_name = T2.author_name WHERE T1.document_name = 'Staff Roles'</sql>
SELECT DISTINCT T2.other_details FROM Documents AS T1 INNER JOIN authors AS T2 ON T1.author_name = T2.author_name WHERE T2.first_name = 'Addison' AND T2.last_name = 'Denesik'</sql>
SELECT COUNT(*) FROM Documents WHERE document_name = 'Documents' AND document_description = 'Show all process status for all authors'</sql>
SELECT DISTINCT T2.author_name FROM Documents AS T1 INNER JOIN authors AS T2 ON T1.document_id = T2.author_id WHERE T1.document_id IN ( SELECT MAX(T1.document_id) AS id FROM documents AS T1 INNER JOIN Authors AS T2 ON T1.author_name = T2.author_name WHERE T1.document_name = 'document-4' AND T1.
SELECT DISTINCT T2.author_name FROM Documents AS T1 INNER JOIN authors AS T2 ON T1.document_id = T2.author_id WHERE T1.document_name LIKE '%Brazil%' AND T1.document_description LIKE '%Travel to Brazil%'</sql>
SELECT COUNT(DISTINCT T1.author_name) FROM Documents AS T1 INNER JOIN authors AS T2 ON T1.author_name = T2.author_name WHERE T1.document_description LIKE '%Era Kerluke%' AND T2.author_name IS NOT NULL GROUP BY T2.author_name ORDER BY COUNT(T2.author_name) DESC LIMIT 0, 3</sql>
SELECT T1.document_name, T2.other_details FROM Documents AS T1 INNER JOIN Author AS T2 ON T1.author_name = T2.author_name WHERE T1.document_description = 'Document description' ORDER BY T2.other_details</sql>
SELECT T2.document_id, T1.author_name FROM Documents AS T1 INNER JOIN authors AS T2 ON T1.author_name = T2.author_name WHERE T1.document_description LIKE '%Bianka%' ORDER BY T1.document_id DESC LIMIT 1</sql>
SELECT DISTINCT T2.author_name, T1.document_description FROM Documents AS T1 INNER JOIN Authors AS T2 ON T1.author_name = T2.author_name WHERE T1.document_name = 'Travel to China'</sql>
SELECT DISTINCT T2.author_name, COUNT(DISTINCT T2.document_id) FROM Documents AS T1 INNER JOIN authors AS T2 ON T1.author_name = T2.author_name GROUP BY T2.author_name ORDER BY SUM(T2.COUNT) DESC LIMIT 1</sql>
SELECT DISTINCT T2.author_name FROM Documents AS T1 INNER JOIN authors AS T2 ON T1.author_name = T2.author_name ORDER BY T1.number DESC LIMIT 1</sql>
SELECT T1.other_details FROM Documents AS T1 INNER JOIN Author AS T2 ON T1.document_id = T2.author_id GROUP BY T1.other_details ORDER BY COUNT(T1.author_name) DESC LIMIT 3</sql>
SELECT COUNT(T1.process_outcome_code) FROM Process_Outcomes AS T1 INNER JOIN Documents AS T2 ON T1.process_outcome_code = T2.document_id WHERE T1.business = 1 AND T2.author_name IS NOT NULL LIMIT 1</sql>
SELECT DISTINCT T2.process_outcome_code , T2.document_id FROM Documents AS T1 INNER JOIN Process_Outcomes AS T2 ON T1.document_id = T2.process_outcome_id WHERE T1.author_name = 'Helen Jones' ORDER BY T2.process_outcome_description, T2.process_outcome_code</sql>
SELECT T1.process_outcome_description FROM Process_Status AS T1 INNER JOIN Documents AS T2 ON T1.process_status_code = T2.document_id WHERE T2.author_name = 'Craig Swanson' GROUP BY T1.process_outcome_description ORDER BY COUNT(T2.document_id) DESC LIMIT 3</sql>
SELECT COUNT(T1.process_outcome_code) FROM Process_Outcomes AS T1 INNER JOIN Documents AS T2 ON T1.process_outcome_code = T2.document_id WHERE T1.process_status = 'Active' GROUP BY T1.process_outcome_description ORDER BY COUNT(T1.process_outcome_description) DESC LIMIT 3</sql>
SELECT DISTINCT T1.process_outcome_description, T2.description FROM Documents AS T1 INNER JOIN Process_Outcomes AS T2 ON T1.document_id = T2.process_outcome_code WHERE T2.description != ''</sql>
SELECT DISTINCT T2.process_outcome_description FROM Process_Outcomes AS T1 INNER JOIN Documents AS T2 ON T1.process_outcome_code = T2.document_id WHERE T1.process_status_code IN ( SELECT 'Working' UNION ALL ) ORDER BY T2.process_outcome_description</sql>
SELECT COUNT(process_status_code) FROM Process_Status GROUP BY process_outcome_description ORDER BY COUNT(process_status_code) DESC LIMIT 1</sql>
SELECT DISTINCT T1.process_outcome_description, T2.staff_role_description FROM Documents AS T1 INNER JOIN Process_Status AS T2 ON T1.document_id = T2.process_status_code ORDER BY T1.process_outcome_code , T2.staff_role_description</sql>
SELECT DISTINCT T2.process_status_description FROM Documents AS T1 INNER JOIN Process_Status AS T2 ON T1.document_id = T2.process_outcome_code ORDER BY T2.process_outcome_code DESC LIMIT 1</sql>
SELECT COUNT(staff_id) FROM Documents WHERE document_name = 'Business'</sql>
SELECT DISTINCT T1.staff_id, T2.other_details FROM documents AS T1 INNER JOIN Staff AS T2 ON T1.document_id = T2.staff_id WHERE T1.document_name = 'Financial statement'</sql>
SELECT DISTINCT T2.other_details FROM Documents AS T1 INNER JOIN Staff AS T2 ON T1.document_id = T2.staff_id WHERE T1.author_name = 'staff-100'</sql>
SELECT COUNT(*) FROM Staff AS T1 INNER JOIN Process_Outcome AS T2 ON T1.staff_id = T2.process_outcome_code WHERE T2.process_outcome_description = 'Job Duration'</sql>
SELECT T1.staff_role_description, T2.other_details FROM Process_Outcomes AS T1 INNER JOIN Staff_Roles AS T2 ON T1.staff_id = T2.staff_id WHERE T2.staff_role_code IN ('P4', 'P5') AND T2.staff_status = 'Inactive'</sql>
SELECT DISTINCT T2.description FROM Documents AS T1 INNER JOIN Staff_roles AS T2 ON T1.document_id = T2.staff_role_code WHERE T1.author_name = 'HR' AND T2.description = 'HR'</sql>
SELECT COUNT(DISTINCT T1.document_id) FROM Documents AS T1 INNER JOIN Process_Outcomes AS T2 ON T1.document_id = T2.process_outcome_code WHERE T1.document_name IN ('Employee Manual', 'Document 4') AND T2.process_status = 'In Progress'</sql>
SELECT T1.process_outcome_code FROM Documents AS T1 INNER JOIN Process_Outcomes AS T2 ON T1.document_id = T2.process_outcome_code WHERE T2.process_description = 'Business Process' AND T1.author_name = 'Adam'</sql>
SELECT T3.document_id FROM Documents AS T1 INNER JOIN Process_Status AS T2 ON T1.document_id = T2.process_status_code WHERE T2.description IS NULL</sql>
SELECT T2.process_outcome_code, T1.process_status FROM Documents AS T1 INNER JOIN Process_Outcomes AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name = 'None' AND T2.process_outcome_description IS NULL ORDER BY COUNT(T2.document_code) ASC LIMIT 1</sql>
SELECT DISTINCT T2.process_outcome_description, T2.process_status_description FROM documents AS T1 INNER JOIN Process_Outcomes AS T2 ON T1.document_id = T2.document_id WHERE T2.process_outcome_code = 'P583' AND T2.process_status_code LIKE '%P%']</sql>
SELECT DISTINCT T1.process_outcome_description FROM Documents AS T1 INNER JOIN Process_Outcomes AS T2 ON T1.document_id = T2.process_outcome_code WHERE T2.process_outcome_description IN ('Travel to Brazil')</sql>
SELECT DISTINCT T2.process_outcome_code, COUNT(T2.document_id) FROM Documents AS T1 INNER JOIN Process_Outcomes AS T2 ON T1.document_id = T2.process_outcome_code WHERE T1.process_status_code LIKE '%Process%' GROUP BY T2.process_outcome_code ORDER BY DISTINCT T2.process_outcome_description DESC LIMIT 1</sql>
SELECT COUNT(T2.document_id) FROM Documents AS T1 INNER JOIN Process_Outcomes AS T2 ON T1.document_id = T2.process_outcome_code WHERE T1.document_name = '0584-0373' AND T1.process_status_code IN ('Pending', 'Failed')</sql>
SELECT DISTINCT T2.staff_id, COUNT(T1.process_outcome_code) FROM Documents AS T1 INNER JOIN Staff AS T2 ON T1.document_id = T2.staff_id GROUP BY T2 ORDER BY T2.staff_role_description</sql>
SELECT DISTINCT T2.staff_role_code, COUNT(T3.document_id) FROM Process_Outcomes AS T1 INNER JOIN Documents AS T2 ON T1.process_outcome_code = T2.document_name INNER JOIN Staff AS T3 ON T2.staff_id = T3.staff_id GROUP BY T3.staff_role_description ORDER BY T3.other_details DESC LIMIT 1
SELECT COUNT(T1.staff_role_code) FROM Process_Outcomes AS T1 INNER JOIN Staff AS T2 ON T1.staff_role_code = T2.staff_role_code WHERE T2.staff_id IN ( SELECT MAX(staff_id), staff_role_name FROM Documents GROUP BY staff_role_name )</sql>
SELECT COUNT(DISTINCT T1.agency_id), SUM(T3.payment_details) FROM `Agencies AS T1 INNER JOIN Staff AS T2 ON T1.agency_id = T2.staff_id INNER JOIN payments AS T3
SELECT COUNT(T1.agency_id), T2.`client_details`' AS number FROM staff AS T1 INNER JOIN clients AS T2 ON T1.staff_id = T2.staff_id WHERE T2.client_id = '908463
SELECT DISTINCT T2.agency_id, T3.agency_details FROM Invoices AS T1 INNER JOIN Staff AS T2 ON T1.staff_id = T2.staff_id INNER JOIN Agencies AS T4 ON T2.client
SELECT T1.agency_details, T2.client_details FROM ( SELECT DISTINCT T1.agency_id , T2.client_details FROM `Staff` AS T1 INNER JOIN `Agencies` AS T2 ON T2.st
SELECT COUNT(client_id) FROM Clients GROUP BY client_id ORDER BY COUNT(client_id) DESC LIMIT 1</sql>
SELECT COUNT(DISTINCT T1.client_id) FROM Clients AS T1 INNER JOIN Invoices AS T2 ON T1.client_id = T2.client_id WHERE strftime('%Y', T2.`invoice_date`) IS NULL AND str
SELECT T1.client_id, T2.client_details FROM Clients AS T1 INNER JOIN Invoices AS T2 ON T1.client_id = T2.client_id ORDER BY T2.invoice_id LIMIT 1</sql>
SELECT T1.client_id, T2.client_details FROM Clients AS T1 INNER JOIN Staff AS T2 ON T1.agency_id = T2.agency_id INNER JOIN Meetings AS T3 ON T2.meeting_id
SELECT DISTINCT T2.agency_details, COUNT(T1.client_id) FROM Agencies AS T1 INNER JOIN Staff_in_Meetings AS T2 ON T1.agency_id = T2.staff_
SELECT T1.client_details, COUNT(T2.agency_id), SUM(CASE WHEN T1.agency_details = 'Staff' THEN 1 ELSE 0 END) AS staff FROM ( SELECT T2.staff , COUNT(CASE WHEN T2
SELECT DISTINCT T2.agency_id, T2.staff_details FROM ( SELECT DISTINCT T1.agency_id , T3.client_details FROM `Staff` AS T1 INNER JOIN `Agencies`
SELECT DISTINCT T2.agency_id, T2.details FROM Invoices AS T1 INNER JOIN Clients AS T2 ON T1.client_id = T2.client_id GROUP BY T2.st
SELECT DISTINCT T1.agency_details, T1.client_name FROM `Staff AS T1 INNER JOIN Agencies AS T2 ON T1.staff_id = T2.staff_id WHERE T2.`Agency Name
SELECT DISTINCT T1.agency_details, T1.client_id FROM clients AS T1 INNER JOIN agencies AS T2 ON T1.client_id = T2.agency_id GROUP BY T1.ag
SELECT T1.agency_details FROM clients AS T1 INNER JOIN agencies AS T2 ON T1.client_id = T2.agency_id WHERE T1.sic_code LIKE '%Mac%' AND T2.name LIKE '%Mac'</
SELECT T1.agency_details FROM `Clients AS T1 INNER JOIN Staff AS T2 ON T1.client_id = T2.staff_id WHERE T2.staff_details LIKE '%Mac%'</sql>
SELECT T2.client_details, T1.agency_details FROM ( SELECT DISTINCT T3.`staff_id`, T4.client_details AS `client_details` , T6.`staff_details` AS `agency_details
SELECT DISTINCT T2.client_details, T1.agency_id FROM payments AS T1 INNER JOIN staff_in_meetings AS T2 ON T1.staff_id = T2.staff_
SELECT T1.`sic_code`, COUNT(T2.client_id), SUM(T2.number_of_clients) FROM Staff AS T1 INNER JOIN Clients AS T2 ON T1.staff_id = T2.st
SELECT T1.client_details, SUM(CASE WHEN T2.sic = 'B' THEN 1 ELSE 0 END) AS total , COUNT(T3.client_id) FROM ( SELECT T1.client_details, CASE WHEN T2.sic
SELECT DISTINCT T2.client_id, T3.sic_code FROM `Staff` AS T1 INNER JOIN `Invoices` AS T2 ON T1.staff_id = T2.client_id WHERE T1.client
SELECT DISTINCT T2.client_details FROM Invoices AS T1 INNER JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T1.`sic_code` = 'BAD
SELECT T1.agency_id, T2.client_details FROM Agencies AS T1 INNER JOIN Staff AS T2 ON T1.agency_id = T2.staff_id WHERE T2.client_details = 'client_
SELECT DISTINCT T2.agency_details, T3.client_details FROM Clients AS T1 INNER JOIN Staff AS T2 ON T1.client_id = T2.staff_id INNER JOIN A
SELECT T1.agency_id FROM clients AS T1 INNER JOIN agencies AS T2 ON T1.client_id = T2.agency_id WHERE T2.name = 'NoAgency'</sql>
SELECT T1.agency_details FROM ( SELECT DISTINCT T2.client_details, 1 AS num FROM Clients AS T1 INNER JOIN Agencies AS T2 ON T1.client_id = T2.agency_id
SELECT COUNT(DISTINCT T1.invoice_id), SUM(T3.start_date_time - T2.end_date_time) AS total FROM ( SELECT DISTINCT T3.client_details, strftime('%J', T3.
SELECT COUNT(DISTINCT T1.invoice_id), SUM(T1.sic_code) FROM Clients AS T1 INNER JOIN Invoices AS T2 ON T1.client_id = T2.client_id GROUP BY T1.client_details
SELECT DISTINCT T2.client_details , strftime('%Y %m %d', T3.start_date_time), 'Invoice Status' AS status , T1.invoice_details FROM Staff AS T1 INNER JOIN
SELECT DISTINCT T2.invoice_details FROM Invoices AS T1 INNER JOIN Staff_in_Meetings AS T2 ON T1.client_id = T2.client_id WHERE T1.client_details LIKE
SELECT DISTINCT T2.client_id, COUNT(T1.invoice_details) FROM Payments AS T1 INNER JOIN Clients AS T2 ON T1.client_id = T2.client_id GROUP BY T1.
SELECT T1.client_details, COUNT(T2.invoice_id), SUM(CASE WHEN T3.staff_id = 'billable_0' THEN 1 ELSE 0 END) AS total FROM `Invoices` AS T1
SELECT DISTINCT T2.client_id, T3.`other_details`, COUNT(T1.invoice_id) FROM `Staff` AS T1 INNER JOIN Invoices AS T2 ON T1.staff_id = T2
SELECT DISTINCT T2.client_details FROM ( SELECT DISTINCT T3.`Client_Details`, SUM(T1.invoice_status) AS total FROM `Invoices` AS T1 INNER JOIN `Staff` AS
SELECT DISTINCT T1.client_id FROM Clients AS T1 INNER JOIN Invoices AS T2 ON T1.client_id = T2.client_id GROUP BY T1.client_id ORDER BY COUNT(T1.
SELECT DISTINCT T2.client_id FROM Payments AS T1 INNER JOIN Invoice AS T2 ON T1.invoice_id = T2.invoice_id GROUP BY T2.client_id ORDER BY COUNT(T1.
SELECT DISTINCT T2.invoice_status, COUNT(T1.staff_details.client_id) FROM invoices AS T1 INNER JOIN staff_in_meetings AS T2 ON T1.staff_
SELECT SUM(invoice_details.invoice_status), SUM(SUM(invoice_details.billable_yn)) FROM ( SELECT CAST(SUBSTR(`staff_details` AS CHAR) AS REAL) AS T1, `staff
SELECT COUNT(DISTINCT T1.invoice_details), SUM(T3.other_details) AS total FROM ( SELECT DISTINCT CASE WHEN T2.status = 'pending' THEN t1.staff_details ELSE NULL END,
SELECT SUM(invoice_status) FROM ( SELECT MAX(T2.invoice_status), T1.client_details AS str FROM `Invoices` AS T1 INNER JOIN Staff AS T2 ON T1.staff_id = T2.
SELECT DISTINCT T2.invoice_status, T3.client_details FROM invoices AS T1 INNER JOIN `Staff` AS T2 ON T1.staff_id = T2.st
SELECT DISTINCT T1.invoice_status, T2.client_details FROM Payments AS T1 INNER JOIN Invoices AS T2 ON T1.payment_id = T2.payment
SELECT DISTINCT T2.meeting_type, T3.other_details FROM invoices AS T1 INNER JOIN meetings AS T2 ON T1.invoice_id = T2.invoice_id INNER JOIN staff_in_meetings AS T3 ON
SELECT DISTINCT T2.type, T3.other_details FROM ( SELECT DISTINCT `Meetings`.meeting_type AS t1 ,  T2.`start_date_time` AS t2,  T2.staff_name AS t3
SELECT DISTINCT T2.outcome, T1.purpose FROM ( SELECT DISTINCT `Meetings`.invoice_details AS outcome ,  `Invoices`.client_details,  `Staff_in_Meetings`.other_details AS purpose FROM
SELECT DISTINCT T2.outcome, T1.purpose_of_meeting FROM Invoices AS T1 INNER JOIN Meetings AS T2 ON T1.invoice_id = T2.invoice_id WHERE T2.billable_
SELECT DISTINCT T2.payment_id, T3.`invoice_status`, T1.`other_details` FROM ( SELECT T1.`client_id`, `payment_details` , COUNT(`T2.payment_id`)
SELECT T1.payment_id, T2.`payment_details`, T3.client_details FROM `Payments` AS T1 INNER JOIN Invoices AS T2 ON T1.invoice_id = T2.invoice_
SELECT T1.invoice_id, T2.status FROM ( SELECT DISTINCT T3.invoice_id, 'PENDING' AS status FROM Payments AS T1 INNER JOIN Staff_in_Meetings AS T2 ON T1.st
SELECT DISTINCT T2.invoice_id, T2.payment_status FROM Staff AS T1 INNER JOIN Invoices AS T2 ON T1.staff_id = T2.staff_id WHERE T1.
SELECT COUNT(DISTINCT T1.payment_id), SUM(T2.`billable_yn` = 'Yes') AS total FROM ( SELECT DISTINCT T1.`client_details`, sum(`amount`) AS `total` FROM Clients GROUP BY T1.`
SELECT COUNT(payment_id) FROM Payments GROUP BY payment_id ORDER BY SUM(SUM(CASE WHEN T1.payment_details = 'Billable' THEN 1 END)) DESC LIMIT 1</sql>
SELECT DISTINCT T2.payment_id, T1.invoice_id FROM payments AS T1 INNER JOIN Staff_in_Meetings AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1
SELECT DISTINCT T2.payment_id , T3.invoice_details FROM ( SELECT `payment_id`, `staff_id`, `payment_details` AS invoice_details FROM staff_in_meetings
SELECT DISTINCT T2.invoice_details, T3.payment_outcome FROM Payments AS T1 INNER JOIN Meetings AS T2 ON T1.meeting_id = T2.meeting_id INNER JOIN Invoices
SELECT T1.invoice_id, T2.status FROM Payments AS T1 INNER JOIN Staff AS T2 ON T1.staff_id = T2.staff_id ORDER BY strftime('%J', T1.`
SELECT DISTINCT T2.invoice_id, COUNT(T1.payment_details) FROM Payments AS T1 INNER JOIN Invoices AS T2 ON T1.client_id = T2.client_id GROUP BY T2
SELECT SUM(sum(payment_details)) FROM invoices GROUP BY invoice_id ORDER BY SUM(invoice_details.billable_yn) DESC LIMIT 1</sql>
SELECT DISTINCT T2.invoice_details FROM ( SELECT MAX(T3.invoice_details),  SUM(T1.payment_details) AS total , T1.staff_details FROM Pay
SELECT DISTINCT T2.invoice_id, T3.payment_details FROM Invoices AS T1 INNER JOIN Staff_in_Meetings AS T2 ON T1.client_id = T2
SELECT COUNT(T2.staff_id), T1.client_details FROM Staff AS T1 INNER JOIN Invoices AS T2 ON T1.staff_id = T2.staff_id WHERE T2.invoice_type = 'Invoice' GROUP BY
SELECT COUNT(DISTINCT T2.staff_id), SUM(T2.invoice_details) FROM Staff AS T1 INNER JOIN Meetings AS T2 ON T1.staff_id = T2.client_id GROUP BY T2.client_id ORDER BY COUNT
SELECT DISTINCT T2.agency_id, COUNT(T1.client_id) FROM Staff AS T1 INNER JOIN Agencies AS T2 ON T1.staff_id = T2.agency_id WHERE T1.
SELECT DISTINCT T2.agency_id, COUNT(T1.client_id) FROM Staff AS T1 INNER JOIN Agencies AS T2 ON T1.staff_details = T2.agency_details WHERE T1.sic_
SELECT DISTINCT T2.agency_id, T3.client_details FROM Staff AS T1 INNER JOIN Agencies AS T2 ON T1.staff_id = T2.staff_id GROUP BY T2.ag
SELECT DISTINCT T2.agency_id, T3.staff_details FROM ( SELECT DISTINCT T1.agency_id , SUM(T2.num_staff) AS total FROM Staff AS T1 INNER JOIN meetings AS
SELECT CAST(SUBSTR(T2.start_date_time, 5, INSTR(T1.meeting_outcome, '-')) AS REAL), COUNT(*) FROM Meetings AS T1 INNER JOIN Staff_in_Meetings AS
SELECT SUM(IIF(T1.meeting_outcome = 'success') OR T2.meeting_outcome = 'failure', 1, 0)) / COUNT(DISTINCT T1.invoice_id) AS per FROM meeting AS T1
SELECT DISTINCT T2.client_id, COUNT(T1.invoice_details) FROM Invoices AS T1 INNER JOIN Meetings AS T2 ON T1.invoice_id = T2.invoice_id WHERE T2.`
SELECT SUM(DISTINCT T2.client_id), T1.start_date, T3.end_date FROM `Staff` AS T1 INNER JOIN `Meetings` AS T2 ON T1.staff_id = T2.`me
SELECT DISTINCT T2.meeting_type, COUNT(T1.invoice_id) FROM Payments AS T1 INNER JOIN Meetings AS T2 ON T1.client_id = T2.client_id GROUP BY T2.
SELECT SUM(IIF(T2.meeting_type = 'AGENCY GROUP MEETING') AND T1.invoice_outcome IS NULL OR T1.invoice_outcome IS NULL, T1.client_details) AS invo
SELECT DISTINCT T2.meeting_id, T3.meeting_outcome, T4.meeting_type, T1.client_details FROM ( SELECT `invoice_id`, SUM(CASE
SELECT DISTINCT T2.meeting_id, T3.meeting_outcome, T3.meeting_type FROM `Meetings` AS T1 INNER JOIN `Staff_in_Meet
SELECT DISTINCT T2.meeting_id, COUNT(T1.invoice_id), T2.num_staff FROM ( SELECT T3.meeting_id ,  strftime('%J', T3.start_date_time
SELECT SUM(count(T2.staff_id)) AS total FROM ( SELECT T1.invoice_id, T2.client_id , COUNT(T2.meeting_outcome) AS num FROM Staff AS T1 INNER JOIN Meetings AS
SELECT T1.staff_id, SUM(T2.`attendance`) FROM Staff AS T1 INNER JOIN Meetings AS T2 ON T1.staff_id = T2.client_
SELECT DISTINCT T2.staff_details FROM ( SELECT T1.meeting_id AS meeting_id, SUM(T3.billable_yn) - COUNT(T2.invoice_id) AS
SELECT COUNT(T1.staff_id), T2.`client_details`.first, T2.`other_details`.second FROM ( SELECT `client_id`, SUM(`amount`) AS sum FROM Client WHERE `client_details` = 'Payments' GROUP BY client_id
SELECT COUNT(T1.staff_id) FROM Staff AS T1 INNER JOIN Meetings AS T2 ON T1.staff_id = T2.client_id WHERE T1.date_time IS NOT NULL AND T2.`type` !=
SELECT COUNT(DISTINCT T1.staff_id), SUM(CASE WHEN T2.meeting_type = 'invoice' THEN 1 ELSE NULL END) AS number FROM ( SELECT DISTINCT T1.staff_id , 1 - SUM(CASE
SELECT COUNT(T1.staff_id), SUM(CASE WHEN T2.`meeting_outcome` IS NULL THEN 0 ELSE 1 END) AS total FROM Staff AS T1 INNER JOIN Meetings AS T2 ON T1.staff_id
SELECT DISTINCT T2.client_details FROM Meetings AS T1 INNER JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T1.`type` = '
SELECT DISTINCT T2.client_details FROM ( SELECT CAST(T2.meeting_outcome AS REAL ) AS str, T1.staff_id FROM meetings AS T1 INNER JOIN staff AS T2 ON
SELECT DISTINCT T2.staff_id, T2.client_details FROM invoices AS T1 INNER JOIN meetings AS T2 ON T1.invoice_id
SELECT DISTINCT T2.staff_id, T2.other_details FROM Invoices AS T1 INNER JOIN Staff_in_Meetings AS T2 ON T1.invoice_
SELECT DISTINCT T2.client_details.client_id FROM meetings AS T1 INNER JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE
SELECT DISTINCT T2.client_details.sic_code AS id_, T3.agency_id FROM `Staff` AS T1 INNER JOIN `Meetings` AS T2 ON
SELECT DISTINCT T2.start_date_time, T2.end_date_time, T3.client_details FROM `Meetings` AS T1 INNER JOIN `Staff_in_Meetings`
SELECT DISTINCT T2.start_date_time, T1.client_details FROM meetings AS T1 INNER JOIN ( SELECT DISTINCT T3.staff_id , SUM(
