Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the different plane names, and what are the names of the oldest pilot who has each, ordered by plane name?SELECT plane_name, pilot_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills GROUP BY plane_name ORDER BY plane_name);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of oldest pilots for each type of plane?SELECT plane_name, pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills GROUP BY plane_name);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the names of the different planes, as well as the names of the oldest pilots who flew each.SELECT plane_name, pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the max age for each group of pilots with the same name.SELECT plane_name, MAX(age) FROM PilotSkills GROUP BY pilot_name;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the different pilot names, and what are the maximum ages of pilots for each?SELECT plane_name, MAX(age) FROM PilotSkills GROUP BY pilot_name;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: For each city, find the number and average age of pilots who have a plane.SELECT location, COUNT(pilot_name), AVG(age)
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the different hangar locations and how many pilots correspond to each. Also, what are their average ages?SELECT location, COUNT(pilot_name), AVG(age)
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the number of pilots for the plane types with average pilot age below 35.SELECT plane_name, COUNT(pilot_name) AS num_pilots FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the different plane names of planes with an average pilot age of below 35, and how many pilots have flown each of them?SELECT plane_name, COUNT(pilot_name) AS num_pilots FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the location of the plane that is owned by the youngest pilot.SELECT location FROM Hangar WHERE plane_name IN (
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the location of the plane that was flown by the pilot with the lowest age?SELECT location FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills WHERE pilot_name = 'John' AND age = (SELECT MIN(age) FROM PilotSkills));
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the name and age of pilots who have a plane in Austin.SELECT plane_name, age FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Austin') AND age > 30;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names and ages of pilots who have planes located in Austin?SELECT plane_name, pilot_name, age FROM PilotSkills WHERE location = 'Austin';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List in alphabetic order the names of pilots whose age is greater than some pilots having plane Piper Cub.SELECT plane_name FROM PilotSkills WHERE age > (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the names of pilots who are older than any pilot who has flown Piper Cub, ordered alphabetically.SELECT plane_name FROM PilotSkills WHERE age > (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the number of pilots whose age is younger than all pilots whose plane is F-14 Fighter.SELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'F-14 Fighter') AND age < ALL(SELECT age FROM PilotSkills WHERE plane_name = 'F-14 Fighter')
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many pilots are younger than all pilots who own the F-14 Fighter?SELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'F-14' AND age < ALL(SELECT age FROM PilotSkills WHERE plane_name = 'F-14'));
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find all different planes whose names contain substring 'Bomber'.SELECT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the different plane names that contain the word Bomber?SELECT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the number of all pilots whose age is older than some pilot who has plane Piper Cub.SELECT plane_name FROM PilotSkills WHERE age > (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub') GROUP BY plane_name HAVING COUNT(*)>1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many pilots are older than the youngest pilot who has Piper Cub?SELECT plane_name FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the name of the district which has the largest area.SELECT district.District_ID, district.Name FROM district WHERE district.Area_km = (SELECT MAX(district.Area_km) FROM district);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Select the area and government website of the district with the smallest population.SELECT district.District_ID, district.Area_km, district.Government_website FROM district WHERE district.Population = (SELECT MIN(district.Population) FROM district);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the names and populations of the districts whose area is greater than the average area.SELECT district.District_ID, district.Name, district.Population FROM district WHERE district.Area_km > (SELECT AVG(district.Area_km) FROM district);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Give me the biggest and average areas of all districts.SELECT district.District_ID, MAX(district.Area_km), AVG(district.Area_km) FROM district GROUP BY district.District_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the total population of the districts whose areas are in the top 3?SELECT district.District_ID, SUM(district.Population) AS Total_Population FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID WHERE district.Area_km IN (SELECT Area_km FROM district ORDER BY Area_km DESC LIMIT 3) GROUP BY district.District_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the ids, names, and government websites of all districts sorted by population.SELECT district.District_ID, district.Name, district.Government_website FROM district ORDER BY Population DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the names of districts whose government links use a 'gov' domain.SELECT district.District_ID, district.Name FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID WHERE spokesman_district.Start_year >= 2010 AND spokesman_district.Start_year <= 2020 AND spokesman_district.Spokesman_ID IN (SELECT spokesman.Spokesman_ID FROM spokesman JOIN spokesman_district ON spokesman.Spokesman_ID = spokesman_district.Spokesman_ID WHERE spokesman.Speach_title LIKE '%Minister%' OR spokesman.Speach_title LIKE '%Secretary%') AND district.Government_website LIKE '%.gov%'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the ids and names of the districts whose population is larger than 4000 or area bigger than 3000.SELECT district.District_ID, district.Name FROM district WHERE (population > 4000) OR (area > 3000);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find all spokesman's names and speech titles.SELECT spokesman.Spokesman_ID, spokemans.Name, spokemans.Speach_title FROM spokesman spokemans INNER JOIN spokesman_district spokedist ON spokemans.Spokema_ID = spokedist.Spokema_ID WHERE spokedist.District_ID = 1
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the average points and average ages of all spokesmen whose rank position is 1.SELECT district.District_ID, district.Name, spokesman.Speach_title, spokesman.Age, spokesman.Points FROM district INNER JOIN spokesman ON district.District_ID = spokesman.District_ID WHERE spokesman.Rank_position = 1 ORDER BY district.District_ID ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names and points of spokesmen who are younger than 40?SELECT spokesman.Spokesman_ID, Name, Points FROM spokesman WHERE Age < 40;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Who is the oldest spokesman?SELECT spokesman.Spokesman_ID FROM spokesman WHERE Age = (SELECT MAX(Age) FROM spokesman);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which spokesman has lower points than the average?SELECT spokesman.Spokesman_ID FROM spokesman WHERE Points < (SELECT AVG(Points) FROM spokesman);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the name of the district which has greatest number of spokesmen.SELECT district.District_ID, district.Name FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID WHERE spokesman_district.Spokesman_ID IN (SELECT spokesman.Spokesman_ID FROM spokesman ORDER BY spokesman.Points DESC LIMIT 1) GROUP BY district.District_ID HAVING COUNT(*) > ALL (SELECT COUNT(*) FROM spokesman_district GROUP BY District_ID);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the names of spokesmen who have served some district before 2004.SELECT spokesman.Spokesman_ID, spokesman.Name FROM spokesman INNER JOIN spokesman_district ON spokesman.Spokesman_ID = spokesman_district.Spokesma
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the number of spokesmen for each district, and the show district names as well.SELECT district.District_ID, district.Name, COUNT(spokesman.Spokesman_ID) AS num_spokesmen FROM spokesman JOIN spokesman_district ON spokesman.Spokesman_ID = spokesman_district.Spokesman_ID JOIN district ON spokesman_district.District_ID = district.District_ID GROUP BY district.District_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the names of the districts which have had both spokesman with rank position 1 and 2.SELECT district.District_ID, district.Name FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID WHERE spokesman_district.Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman WHERE Rank_position=1) AND spokesman_district.Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman WHERE Rank_position=2);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the names of districts which have more than one spokesman.SELECT district.District_ID, district.Name FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID GROUP BY district.District_ID HAVING COUNT(*) > 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the number of districts which have no spokesmen.SELECT District_ID FROM district WHERE District_ID NOT IN (SELECT DISTINCT(District_ID) FROM spokesman_district);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the name of spokesmen who do not speak for any district.SELECT spokesman.Spokesman_ID, spokesman.Name FROM spokesman LEFT JOIN spokesman_district ON spokesman.Spokesmam_ID = spokesman_district.Spokesmam_ID WHERE spokesman_district.District_ID IS NULL;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the total and average population of the districts which have some spokesman.SELECT district.District_ID, SUM(district.Population) AS Total_Population, AVG(district.Population) AS Average_Population FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID GROUP BY district.District_ID HAVING COUNT(spokesman_spokesman_district.Spokesman_ID) > 0;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the title of the sculpture that was created in the most recent year?SELECT title FROM Sculptures WHERE year = (SELECT MAX(year) FROM Sculptures);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the name of the scuplture that was created most recently?SELECT title FROM Sculptures WHERE year = (SELECT MAX(year) FROM Sculptures);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the title and location of the oldest painting?SELECT title, location FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the name of the oldest painting and where is it located?SELECT title, location FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the names of all sculptures located in gallery 226.SELECT sculptureID FROM Sculptures WHERE location = 'gallery 226';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of all sculptures in gallery 226?SELECT sculptureID, title FROM Sculptures WHERE location = 'gallery 226';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the title and location of all paintings.SELECT title, location FROM Paintings;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the paintings called and where are they located?SELECT Paintings.title, Paintings.location FROM Paintings WHERE Paintings.painterID = 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the title and location of all sculptures.SELECT sculptureID, title, location FROM Sculptures;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the sculptures called and where are they located?SELECT Sculptures.title, Sculptures.location FROM Sculptures;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the medium types of the painting with id = 80SELECT medium FROM Paintings WHERE paintingID = 80;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What mediums were used for the painting with id 80?SELECT medium FROM Paintings WHERE paintingID = 80;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the first and last names of all artists who were born after 1850.SELECT Artists.location FROM Artists WHERE Artists.birthYear > 1850;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the full names of artists born after 1850?SELECT Artists.location, Artists.fname, Artists.lname FROM Artists WHERE Artists.birthYear > 1850;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the names and years of all sculptures that are not located in gallery 226.SELECT sculptorID, title, year FROM Sculptures WHERE location!= 'gallery 226' ORDER BY sculptorID ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names and dates created for all sculptures not located in gallery 226?SELECT sculptorID, title, year FROM Sculptures WHERE location!= 'gallery 226' ORDER BY sculptorID ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the first and last names of all distinct artists who made sculptures before 1900?SELECT Artists.location, Artists.fname, Artists.lname FROM Artists INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.year < 1900;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the first and last name of each distinct artists who made a sculpture before 1900?SELECT Artists.location, Artists.fname, Artists.lname FROM Artists INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.year < 1900 GROUP BY Artists.location, Artists.fname, Artists.lname HAVING COUNT(*) > 1 ORDER BY Artists.location ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the birth years of all distinct artists who made sculptures after 1920?SELECT Artists.location FROM Artists WHERE Artists.artistID IN (SELECT Sculptors.sculptorID FROM Sculptors WHERE Sculptors.year > 1920);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the birth year of each distinct artists who created sculptures after 1920?SELECT Artists.location, Artists.birthYear FROM Artists INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.year > 1920 GROUP BY Artists.location HAVING COUNT(*)>1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the first and last names of the artist who lived the longest?SELECT Artists.location, Artists.fname, Artists.lname FROM Artists WHERE Artists.deathYear = (SELECT MAX(Artists.deathYear) FROM Artists);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Give the full name of the artist who lived the longest.SELECT Artists.location, Artists.fname ||'' || Artists.lname AS Full_Name FROM Artists WHERE Artists.deathYear = (SELECT MAX(Artists2.deathYear) FROM Artists as Artists2);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the age of the artist who had the shortest life?SELECT Artists.location FROM Artists WHERE Artists.artistID = (SELECT MIN(Artists.deathYear - Artists.birthYear) FROM Artists);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How old is the artist who lived the shortest life?SELECT Artists.location, MIN(Artists.deathYear - Artists.birthYear + 1) AS age FROM Artists GROUP BY Artists.location ORDER BY age DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the first name and age of the artist who had the longest life?SELECT Artists.location, Artists.fname, Artists.birthYear, Artists.deathYear FROM Artists WHERE Artists.artistID = (SELECT MAX(Artists.artistID) FROM Artists);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the first name and age of the artist who lived the longest?SELECT Artists.location, Artists.fname, Artists.birthYear, Artists.deathYear FROM Artists WHERE Artists.deathYear = MAX(Artists.deathYear);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many paintings are exhibited at gallery 240?SELECT Paintings.title FROM Paintings WHERE Paintings.location = 'Gallery 240';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the total number of paintings exhibited in gallery 240?SELECT Paintings.title FROM Paintings WHERE Paintings.location = 'Gallery 240';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many paintings did the artist with the longest life make?SELECT title FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE deathYear IS NOT NULL ORDER BY deathYear DESC LIMIT 1);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the painting count of the artist with the longest life?SELECT Paintings.title FROM Artists 
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Give me a list of names and years of paintings that were created by the artist whose first name is Mary.SELECT Artists.location, Paintings.year FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Artists.fname = 'Mary' AND Paintings.year > 1900 ORDER BY Paintings.year DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the name and year of each painting created by the artist whose first name is Mary?SELECT Paintings.title, Paintings.year FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.fname = 'Mary';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the widths of the paintings that were created by the artist who was born before 1850?SELECT Paintings.title, Paintings.width_mm FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.birthYear < 1850;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How wide were the paintings by the artist who was born prior to 1850?SELECT Paintings.title, Painting.width_mm FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Artists.birthYear < 1850;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the location and medium type of paintings that are created by the artist whose first name is Pablo?SELECT location, medium FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE fname = 'Pablo');
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: In what locations and on what mediums are the paintings created by the artist with the first name Pablo?SELECT location, mediumOn FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE fname = 'Pablo') ORDER BY location ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the first and last names of the artists who have both works of paintings and sculptures?SELECT Artists.location, Artists.fname, Artists.lname FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Give the full names of artists who have created paintings and sculptures.SELECT Artists.location, Artists.fname, Artists.lname FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the first and last names of the artists who have not only medium oil paintings but also paintings with the lithographic medium?SELECT Artists.location, Artists.fname, Artists.lname FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.medium = 'oil' AND Paintings.mediumOn = 'lithograph'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the first and last names of artists who have painted using both oil and lithographic mediums?SELECT Artists.location, Artists.fname, Artists.lname FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.medium IN ('oil', 'lithograph') GROUP BY Artists.location HAVING COUNT(DISTINCT Paintings.medium) > 1 ORDER BY Artists.location ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the birth year of the artist who created a painting in 1884 that is on canvas?SELECT Artists.year FROM Artists WHERE Artists.artistID = (SELECT Paintings.painterID FROM Paintings WHERE Paintings.year = 1884 AND Paintings.medium = 'canvas') AND Artists.birthYear IS NOT NULL;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: In what year was the artist who created a painting in 1884 born?SELECT Artists.location FROM Artists WHERE Artists.artistID IN (SELECT Paintings.painterID FROM Paintings WHERE Paintings.year = 1884);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the unique first names of the artists who had medium oil paintings located in gallery 241?SELECT Artists.location FROM Artists WHERE Artists.location = 'gallery 241' AND Artists.medium = 'oil'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are first names of the artists with oil paintings in gallery 241?SELECT Artists.title FROM Artists WHERE Artists.artistID IN (SELECT Paintings.painterID FROM Paintings WHERE Paintings.location = 'gallery 241' AND Paintings.medium = 'oil') ORDER BY Artists.title ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the numbers of works for different medium type?SELECT medium, COUNT(*) AS num_works FROM Paintings UNION ALL SELECT 'Sculpture', COUNT(*) FROM Sculptures GROUP BY medium ORDER BY medium ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many works are there in each medium?SELECT medium, COUNT(*) AS num_works FROM Paintings GROUP BY medium UNION SELECT medium, COUNT(*) AS num_works FROM Sculptures GROUP BY medium ORDER BY num_works DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the average height of paintings for different medium types?SELECT medium, AVG(height_mm) FROM Paintings GROUP BY medium;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the average height of paintings for different medium types?SELECT medium, AVG(height_mm) FROM Paintings GROUP BY medium;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the numbers of paintings created before 1900 in different places?SELECT location, COUNT(*) FROM Paintings WHERE year < 1900 GROUP BY location;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many paintings were created before 1900 in different locations?SELECT location, COUNT(*) FROM Paintings WHERE year < 1900 GROUP BY location;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the titles of paintings that are created after 1910 and whose medium is oil?SELECT title FROM Paintings WHERE year > 1910 AND medium = 'oil';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Give the names of all oil paintings created after 1910.SELECT title FROM Paintings WHERE year > 1910 AND medium = 'oil'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the unique id of the painters who had medium oil paintings exhibited at gallery 240?SELECT Artists.title FROM Artists WHERE Artists.artistID IN (SELECT Paintings.painterID FROM Paintings WHERE Paintings.location = 'gallery 240' AND Paintings.medium = 'oil') GROUP BY Artists.title HAVING COUNT(*)=1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the unique id of every painter who had a medium oil painting displayed at gallery 240?SELECT Artists.title FROM Artists WHERE Artists.artistID IN (SELECT Paintings.painterID FROM Paintings WHERE Paintings.location = 'Gallery 240' AND Paintings.medium = 'oil') ORDER BY Artists.title ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the distinct titles of all the paintings that have a longer height than some painting on canvas?SELECT title FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE medium = 'canvas');
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the distinct titles of every painting that has a greater height than some painting on canvas?SELECT title FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE medium = 'canvas') GROUP BY title;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the distinct ids of all paintings that are older than some painting at location gallery 240.SELECT Paintings.title FROM Paintings WHERE Paintings.year < (SELECT Paintings.year FROM Paintings WHERE Paintings.location = 'gallery 240') AND Paintings.location!= 'gallery 240';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the distinct ids of every painting that is older than some painting in gallery 240?SELECT Paintings.title FROM Paintings WHERE Paintings.year < (SELECT Paintings.year FROM Paintings JOIN Galleries ON Paintings.location = Galleries.name WHERE Galleries.galeryID = 240);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the id of the oldest painting.SELECT Paintings.title FROM Paintings WHERE Paintings.year = (SELECT MIN(Paintings.year) FROM Paintings);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the id of the oldest painting?SELECT Paintings.sculptureID FROM Paintings WHERE Paintings.year = (SELECT MIN(Paintings.year) FROM Paintings);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the first and last name of the artist who had a sculpture work whose title has the word “female” in it?SELECT Artists.location, Artists.fname, Artists.lname FROM Artists INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.title LIKE '%female%';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the full name of the artist with a sculpture whose title includes the word "female"?SELECT Artists.location, Artists.fname, Artists.lname FROM Artists INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.title LIKE '%female%';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the names of all distinct paintings in alphabetical order.SELECT title FROM Paintings WHERE title IS NOT NULL ORDER BY title ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the name of every distinct painting in alphabetical order?SELECT title FROM Paintings WHERE title NOT IN (SELECT title FROM Sculptures);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the names of all distinct paintings ordered by length.SELECT title FROM Paintings WHERE medium = 'oil' ORDER BY LENGTH(title);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the names of all distinct paintings from shortest to longest in height.SELECT title FROM Paintings WHERE height_mm = (SELECT MIN(height_mm) FROM Paintings);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of both paintings and sculptures created between 1900 and 1950?SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of  paintings and scupltures created between 1900 and 1950?SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the titles of paintings and sculpture works made by the artist whose id is 222?SELECT title FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the titles of all paintings and sculpture works made by the artist whose id is 222?SELECT title FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the id of the artist who has the highest number of painting works before 1900?SELECT Artists.title FROM Artists WHERE Artists.artistID = (SELECT MAX(Artists.artistID) FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.year < 1900);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the id of the artist with the most paintings before 1900?SELECT Artists.title FROM Artists WHERE Artists.artistID = (SELECT MAX(Artists.artistID) FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.year < 1900);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the first name of the artist who has the highest number of sculptures?SELECT Artists.title FROM Artists WHERE Artists.artistID = (SELECT Sculptures.sculptorID FROM Sculptures GROUP BY Sculptures.sculptorID ORDER BY COUNT(Sculptures.sculptorID) DESC LIMIT 1);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the first name of the sculptor with the greatest number of works?SELECT Artists.location FROM Artists WHERE Artists.artistID IN (SELECT Sculptures.sculptorID FROM Sculptures GROUP BY Sculptures.sculptorID HAVING COUNT(Sculptures.sculptorID)= (SELECT MAX(COUNT(Sculptures.sculptorID)) FROM Sculptures));
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of paintings whose width is less than 600 or height is larger than 800?SELECT title FROM Paintings WHERE width < 600 OR height > 800;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the titles of paintings that have a width less than 600 or a height taller taller than 800?SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which locations have paintings created before 1885 or after 1930?SELECT location FROM Paintings WHERE year < 1885 OR year > 1930;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What locations have works painted before 1885 or after 1930?SELECT location FROM Paintings WHERE year < 1885 OR year > 1930;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the ids of paintings whose height is bigger than 500 and less than 2000?SELECT Paintings.title FROM Paintings WHERE Paintings.height_mm > 500 AND Paintings.height_mm < 2000;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the ids of paintings that are taller than 500 and shorter than 2000?SELECT Paintings.title FROM Paintings WHERE Paintings.height_mm > 500 AND Paintings.height_mm < 2000;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which locations have paintings in the mediums of on panel and on canvas?SELECT location FROM Paintings WHERE medium = 'on panel' OR medium = 'on canvas';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the locations that have paintings in the mediums of on panels and on canvas?SELECT location FROM Paintings WHERE medium = 'on panel' OR medium = 'on canvas';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the locations that have paintings created before 1885 and after 1930?SELECT location FROM Paintings WHERE year < 1885 AND year > 1930;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the locations that have works painted before 1885 and after 1930?SELECT location FROM Paintings WHERE year < 1885 OR year > 1930;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the average height and width of paintings that are oil medium in the place of gallery 241?SELECT Artists.location, AVG(Paintings.height_mm), AVG(Paintings.width_mm)
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the average height and width of paintings that are oil medium in gallery 241?SELECT Artists.location, AVG(Paintings.height_mm), AVG(Paintings.width_mm)
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the maximum height and id of paintings painted before 1900?SELECT Paintings.year, MAX(Height_mm), PaintingID FROM Paintings WHERE Paintings.year < 1900 GROUP BY Paintings.year;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the height and id of the tallest painting created before 1900?SELECT Paintings.title, Painting.height_mm FROM Painting WHERE Painting.year < 1900 ORDER BY Painting.height_mm DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the maximum height and width of paintings for each year?SELECT year, MAX(height_mm), MAX(width_mm)
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are largest height and width dimensions for paintings in each year?SELECT year, MAX(height_mm), MAX(width_mm) FROM Paintings GROUP BY year;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the average height and width of paintings grouped by painters and ordered by name?SELECT Artists.location, AVG(Paintings.height_mm), AVG(Paintings.width_mm)
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the average height and width of paintings grouped by painters and ordered by nameSELECT Artists.location, AVG(Paintings.height_mm), AVG(Paintings.width_mm)
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the first names and number of works of all artists who have at least two paintings?SELECT Artists.location, COUNT(Paintings.title) AS num_paintings FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY Artists.location HAVING COUNT(Paintings.title) >= 2 ORDER BY num_paintings DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the first names of all artists who have at least two paintings, and how many works did each create?SELECT Artists.location, COUNT(Paintings.title) AS num_paintings FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY Artists.location HAVING COUNT(Paintings.title) >= 2 ORDER BY num_paintings DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the death year of all artists who have at most 3 paintings?SELECT Artists.year FROM Artists WHERE Artists.artistID IN (SELECT Painting.painterID FROM Painting GROUP BY Painting.painterID HAVING COUNT(Painting.painterID) <= 3);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: When did each artist who created less than 4 paintings die?SELECT Artists.location, Artists.fname, Artists.birthYear, Artists.deathYear FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.paintingID IN (SELECT PaintingID FROM Paintings GROUP BY PainterID HAVING COUNT(PaintingID) < 4);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the death year of the artist who made the least number of sculptures?SELECT Artists.year FROM Artists WHERE Artists.artistID = (SELECT Sculptures.sculptorID FROM Sculptures GROUP BY Sculptures.sculptorID HAVING COUNT(Sculptures.sculptorID) = (SELECT MIN(COUNT(Sculptures.sculptorID)) FROM Sculptures));
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: When did the artist who made the fewest sculptures die?SELECT Artists.location, Artists.deathYear
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the id and height of the painting with the longest width in gallery 240?SELECT Paintings.sculptureID, Paintings.height_mm FROM Paintings WHERE Paintings.width_mm = (SELECT MAX(Paintings.width_mm) FROM Paintings WHERE Paintings.location = 'gallery 240');
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Tell me the height and id number of the widest painting in gallery 240.SELECT Paintings.title,Paintings.height_mm FROM Paintings WHERE Paintings.location = 'Gallery 240' ORDER BY Paintings.width_mm DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the ids of the paintings created before all of the paintings in gallery 240?SELECT Paintings.title FROM Paintings WHERE Paintings.year < ALL(SELECT Paintings.year FROM Paintings JOIN Galleries ON Paintings.location = Galleries.name WHERE Galleries.galeryID = 240);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the id of every painting created before the oldest painting in gallery 240?SELECT Paintings.sculptureID FROM Paintings WHERE Paintings.year < (SELECT MIN(Paintings.year) FROM Paintings JOIN Galleries ON Paintings.location = Galleries.name WHERE Galleries.galeryID = 240);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the ids of the paintings whose height is longer than the height of all paintings created after 1900?SELECT Paintings.title FROM Paintings WHERE Paintings.height_mm > (SELECT MAX(Paintings.height_mm) FROM Paintings WHERE Paintings.year > 1900);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the ids of all paintings that are taller than the longest painting created after 1900.SELECT Paintings.title FROM Paintings WHERE Paintings.height_mm > (SELECT MAX(Paintings.height_mm) FROM Paintings WHERE Paintings.year > 1900);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the top 3 artists who have the biggest number of painting works whose medium is oil?SELECT Artists.location, COUNT(Paintings.title) AS num_paintings FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.medium = 'oil' GROUP BY Artists.location ORDER BY num_paintings DESC LIMIT 3;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which artists have the most paintings in oil?SELECT Artists.location FROM Artists WHERE Artists.artistID IN (SELECT Painting.painterID FROM Painting WHERE Painting.medium = 'oil') ORDER BY COUNT(Painting.painterID) DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the painting id, location and title of the medium oil paintings ordered by year.SELECT Paintings.title,Paintings.location,Paintings.paintingID FROM Paintings WHERE Paintings.medium = 'oil' ORDER BY Paintings.year ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Order all of the oil paintings by date of creation and list their ids, locations, and titles.SELECT Paintings.location, Painting.title FROM Painting ORDER BY Painting.year ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the year, location and title of paintings whose height is longer than 1000 ordered by title.SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the year, location, and name of all paintings that are taller than 1000 in alphabetical order.SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the first and last name of artists who have painting but no sculpture work.SELECT Artists.location, Artists.fname, Artists.lname FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE NOT EXISTS(SELECT * FROM Sculptures WHERE Sculptures.sculptorID = Artists.artistID);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the first and last names of the artists who did not sculpt but could paint.SELECT Artists.location, Artists.fname, Artists.lname FROM Artists WHERE NOT EXISTS(SELECT * FROM Sculptures WHERE Sculptures.sculptorID = Artists.artistID);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the locations that have paintings before 1885 and no work with medium on canvas?SELECT location FROM Paintings WHERE year < 1885 AND NOT EXISTS(SELECT * FROM Paintings WHERE medium = 'canvas' AND location = Paintings.location);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Where do you have paintings that were created before 1885 that are not on canvas?SELECT Paintings.title FROM Paintings WHERE Paintings.year < 1885 AND Paintings.medium!= 'canvas' ORDER BY Painting.title ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many races are there?SELECT Road FROM race
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Count the number of races.SELECT Road FROM race WHERE Winning_driver IS NOT NULL;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the winning drivers and winning teams of races in ascending alphabetical order of winning team.SELECT driver.Driver_ID, driver.Driver_Name, race.Winning_driver, race.Winning_team FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID WHERE race.Report LIKE '%win%' ORDER BY race.Winning_team ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the winning drivers and teams of races, ordered alphabetically by team?SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which winning drivers of races had pole position that is not "Junior Strous"?SELECT Winning_driver FROM race WHERE Pole_Position!= 'Junior Strous' AND Winning_driver = Winning_driver;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the winning drivers of races who did not have the pole position of Junior Strous.SELECT Winning_driver FROM race WHERE Driver_ID NOT IN (SELECT Driver_ID FROM driver WHERE Entrant = 'Junior Strous') AND Winning_driver IS NOT NULL;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Who are the constructors of drivers sorted by drivers' age in ascending order?SELECT driver.Driver_ID, driver.Driver_Name, driver.Age, constructor.Constructor FROM driver JOIN constructor ON driver.Constructor = constructor.Constructor ORDER BY driver.Age ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the different constructors of drivers, ordered by age ascending.SELECT Driver_ID, Constructor FROM driver ORDER BY Age ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the distinct entrant types of drivers aged 20 or older?SELECT Driver_ID, Entrant FROM driver WHERE Age >= 20 GROUP BY Entrant HAVING COUNT(Driver_ID) = 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Give the different entrant types for drivers at least 20 years old.SELECT Driver_ID, Entrant FROM driver WHERE Age >= 20 GROUP BY Entrant HAVING COUNT(Driver_ID) > 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the maximum and minimum age of driver?SELECT Driver_ID, MAX(Age) AS Max_Age, MIN(Age) AS Min_Age FROM driver GROUP BY Driver_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the maximum and minimum age across drivers.SELECT Driver_ID, MAX(Age) AS Max_Age, MIN(Age) AS Min_Age FROM driver GROUP BY Driver_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many different engines are used by drivers with age older than 30 or younger than 20?SELECT Driver_ID, Engine FROM driver WHERE Age > 30 OR Age < 20 GROUP BY Driver_ID HAVING COUNT(DISTINCT Engine) = 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Count the number of different engines used by drivers who had an age either over 30 or under 20.SELECT Driver_ID, COUNT(DISTINCT Engine) AS num_engines FROM driver WHERE Age > 30 OR Age < 20 GROUP BY Driver_ID HAVING COUNT(DISTINCT Engine) = (SELECT MAX(num_engines) FROM (SELECT Driver_ID, COUNT(DISTINCT Engine) AS num_engines FROM driver WHERE Age > 30 OR Age < 20 GROUP BY Driver_ID));
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List all names of drivers in descending alphabetical order.SELECT Driver_ID, Driver_Name FROM driver ORDER BY Driver_Name DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of drivers, ordered descending alphabetically?SELECT Driver_ID, Driver_Name FROM driver ORDER BY Driver_Name DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Please show the names of drivers and the names of races they participate in.SELECT driver.Driver_ID, race.Race_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of drivers and the names of the races they took part in?SELECT driver.Driver_ID, race.Race_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Please show the names of drivers and the number of races they participate in.SELECT driver.Driver_ID, COUNT(driver.Driver_ID) AS num_races FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many races did each driver participate in?SELECT Driver_ID, COUNT(*) AS num_races FROM race GROUP BY Driver_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Please show the age of the driver who participated in the most number of races.SELECT Driver_ID, COUNT(*) AS num_races FROM race GROUP BY Driver_ID ORDER BY num_races DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the age of the driver who raced in the most races?SELECT Driver_ID FROM race WHERE Road = (SELECT MAX(Road) FROM race);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Please show the names and ages of the drivers who participated in at least two races.SELECT driver.Driver_ID, driver.Driver_Name, driver.Age FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID HAVING COUNT(race.Road) >= 2;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names and ages of drivers who raced in two or more races?SELECT driver.Driver_ID, driver.Driver_Name, driver.Age FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID HAVING COUNT(race.Road) >= 2;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Please list the names of races with drivers aged 26 or older participating.SELECT race.Race_Name FROM driver
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of races in which drivers 26 or older took part?SELECT race.Race_Name FROM driver
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the names of drivers whose constructor is not "Bugatti".SELECT Driver_ID, Driver_Name FROM driver WHERE Constructor!= 'Bugatti';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names od drivers who did not have the constructor Bugatti?SELECT Driver_ID, Driver_Name FROM driver WHERE Constructor!= 'Bugatti';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List different constructors and the number of drivers that use each constructor.SELECT Driver_ID, Constructor FROM driver GROUP BY Driver_ID HAVING COUNT(Driver_ID) > 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many drivers use each constructor?SELECT Driver_ID, Constructor FROM driver GROUP BY Constructor;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the most common type of engine used by drivers.SELECT Driver_ID, Engine FROM driver GROUP BY Driver_ID ORDER BY COUNT(Engine) DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the most common type of engine?SELECT Driver_ID, Engine FROM driver GROUP BY Driver_ID ORDER BY COUNT(Engine) DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the types of engines that are used by at least two drivers.SELECT race.Driver_ID, race.Race_Name, driver.Engine FROM race JOIN driver ON race.Driver_ID = driver.Driver_ID GROUP BY race.Driver_ID HAVING COUNT(driver.Engine) > 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the engine types that are used by two or more drivers?SELECT race.Driver_ID, driver.Engine FROM race JOIN driver ON race.Driver_ID = driver.Driver_ID GROUP BY race.Driver_ID HAVING COUNT(*) > 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the names of drivers that do not participate in any race.SELECT Driver_ID FROM driver WHERE Driver_ID NOT IN (SELECT DISTINCT Driver_ID FROM race);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are names of drivers who did not take part in a race?SELECT Driver_ID FROM driver WHERE Driver_ID NOT IN (SELECT DISTINCT Driver_ID FROM race);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the constructors that are used both by drivers with age lower than 20 and drivers with age over than 30.SELECT Driver_ID FROM driver WHERE Age < 20 OR Age > 30;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the constructors who are used by both drivers who are younger than 20 and drivers older than 30?SELECT Driver_ID FROM driver WHERE Age < 20 OR Age > 30;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the teams that won more than once.SELECT race.Winning_team FROM race WHERE race.Road IN (SELECT road FROM race GROUP BY road HAVING COUNT(*) > 1) ORDER BY race.Road ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which teams won more than 1 race?SELECT race.Winning_team FROM driver
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the names of drivers who were in both "James Hinchcliffe" and "Carl Skerlong" pole positions before.SELECT driver.Driver_ID, driver.Driver_Name FROM driver WHERE driver.Driver_ID IN (SELECT race.Driver_ID FROM race WHERE race.Pole_Position = 'James Hinchcliffe' OR race.Pole_Position = 'Carl Skerlong') GROUP BY driver.Driver_ID HAVING COUNT(driver.Driver_ID) > 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of drivers who had both the pole position James Hinchcliffe and the pole position Carl Skerlong?SELECT Driver_ID FROM driver WHERE Driver_Name = 'James Hinchcliffe' AND Driver_Name = 'Carl Skerlong'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: find the name of drivers who were never in "James Hinchcliffe" pole position before.SELECT Driver_ID FROM driver WHERE Driver_Name = 'James Hinchcliffe';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of drivers except for those who had the pole position James Hinchcliffe?SELECT Driver_ID, Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe');
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many languages are there?SELECT countries.country_id FROM countries WHERE country_name = 'United States' AND overall_score > 0.5;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Count the number of languages.SELECT countries.country_id FROM countries WHERE country_name = 'United States' AND overall_score > 0.5
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the name of languages in ascending alphabetical order.SELECT languages.language_id, languages.name FROM official_languages INNER JOIN countries ON official_languages.country_id = countries.id INNER JOIN languages ON official_languages.language_id = languages.id WHERE countries.overall_score > 0 ORDER BY languages.name ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of languages, in alphabetical order?SELECT languages.language_id, languages.name FROM official_languages INNER JOIN countries ON official_languages.country_id = countries.id INNER JOIN languages ON official_languages.language_id = languages.id ORDER BY languages.name ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of languages that contain the word "ish"?SELECT languages.language_id, languages.name FROM official_languages INNER JOIN countries ON official_languages.country_id = countries.id INNER JOIN languages ON official_languages.language_id = languages.id WHERE countries.name LIKE '%ish%';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the names of langauges that contain the substring "ish".SELECT languages.language_id, languages.name FROM official_languages INNER JOIN countries ON official_languages.country_id = countries.id INNER JOIN languages ON official_languages.language_id = languages.id WHERE languages.name LIKE '%ish%';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the names of countries in descending order of overall scores.SELECT countries.country_id, countries.name FROM countries ORDER BY countries.overall_score DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of the countries, ordered descending by overall score?SELECT countries.country_id, countries.name FROM official_languages INNER JOIN languages ON official_languages.language_id = languages.id INNER JOIN countries ON official_languages.country_id = countries.id ORDER BY countries.overall_score DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the average justice scores among countries?SELECT countries.country_id, AVG(countries.justice_score) AS avg_justice_score FROM countries GROUP BY country_id ORDER BY avg_justice_score DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Give the average justice scores across all countries.SELECT languages.language_id, AVG(countries.justice_score) AS avg_justice_score FROM official_languages INNER JOIN countries ON official_languages.country_id = countries.id GROUP BY languages.language_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the maximum and minimum health scores among countries that are not "Norway".SELECT countries.country_id, MAX(countries.health_score) AS max_health_score, MIN(countries.health_score) AS min_health_score FROM countries WHERE countries.name!= 'Norway' GROUP BY countries.country_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the maximum and minimum health scores across all countries other than Norway.SELECT countries.country_id, MAX(countries.health_score), MIN(countries.health_score) FROM countries WHERE countries.name!= 'Norway' GROUP BY countries.country_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many different official languages are there?SELECT countries.country_id FROM countries WHERE country_name = 'United States' AND overall_score > 0.5;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Count the number of different official languages.SELECT countries.country_id FROM countries WHERE country_name = 'United States' AND overall_score > 0.5;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List names of countries in descending order of education_score.SELECT countries.country_id, countries.name FROM official_languages INNER JOIN languages ON official_languages.language_id = languages.id INNER JOIN countries ON official_languages.country_id = countries.id WHERE languages.name = 'English' ORDER BY countries.education_score DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of the countries, ordered descending by education score?SELECT countries.country_id, countries.name FROM official_languages INNER JOIN languages ON official_languages.language_id = languages.id INNER JOIN countries ON official_languages.country_id = countries.id ORDER BY countries.education_score DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the name of the country with the biggest score in politics.SELECT countries.country_id, countries.name FROM countries INNER JOIN official_languages ON countries.id = official_languages.country_id WHERE official_languages.language_id IN (SELECT languages.id FROM languages WHERE languages.name = 'English') ORDER BY countries.politics_score DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the name of the country with the highest politics score?SELECT countries.country_id, countries.name FROM official_languages INNER JOIN languages ON official_languages.language_id = languages.id INNER JOIN countries ON official_languages.country_id = countries.id WHERE languages.name = 'English' AND countries.politics_score > 0 ORDER BY countries.politics_score DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the names of countries and their official languages.SELECT countries.country_id, countries.name, languages.name FROM countries INNER JOIN official_languages ON countries.id = official_languages.country_id INNER JOIN languages ON official_languages.language_id = languages.id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of the countries, as well as the names of their official langauges?SELECT countries.country_id, languages.name FROM countries INNER JOIN official_languages ON countries.id = official_languages.country_id INNER JOIN languages ON official_languages.language_id = languages.id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the official languages and the number of countries speaking each language.SELECT languages.language_id, COUNT(countries.country_id) AS num_countries FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.language_id ORDER BY num_countries DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of the different official languages, as well as the number of countries that speak each?SELECT languages.language_id, languages.name, COUNT(countries.id) AS num_countries FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.language_id ORDER BY num_countries DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the official language spoken by the most number of countries.SELECT languages.language_id, languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id WHERE official_languages.country_id IN (SELECT country_id FROM countries ORDER BY overall_score DESC LIMIT 1) GROUP BY languages.language_id HAVING COUNT(*) > 0;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the official language that is most common?SELECT languages.language_id, languages.name FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id WHERE official_languages.country_id IN ( SELECT countries.id FROM countries ORDER BY overall_score DESC LIMIT 1 ) GROUP BY languages.language_id HAVING COUNT(*) > 1 ORDER BY COUNT(*) DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the official languages spoken by at least two countries.SELECT languages.language_id, languages.name FROM official_languages INNER JOIN languages ON official_languages.language_id = languages.id GROUP BY languages.language_id HAVING COUNT(official_languages.country_id) >= 2;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which official languages are spoken in two or more countries?SELECT languages.language_id, languages.name FROM official_languages INNER JOIN languages ON official_languages.language_id = languages.id GROUP BY languages.language_id HAVING COUNT(official_languages.country_id) > 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the average overall scores of countries whose official language is "English".SELECT countries.country_id, AVG(countries.overall_score) AS avg_overall_score FROM countries INNER JOIN official_languages ON countries.id = official_languages.country_id WHERE languages.name = 'English' GROUP BY countries.country_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the average overall score across countries with English as their official language?SELECT languages.language_id, AVG(countries.overall_score) AS avg_overall_score FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id INNER JOIN countries ON official_languages.country_id = countries.id WHERE languages.name = 'English' GROUP BY languages.language_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the three official languages that are most commonly spoken.SELECT languages.language_id, languages.name FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id WHERE official_languages.country_id IN ( SELECT countries.id FROM countries ORDER BY overall_score DESC LIMIT 3 ) ORDER BY languages.name ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of the three official languages spoken in the most countries?SELECT languages.language_id, languages.name FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id WHERE official_languages.country_id IN ( SELECT countries.id FROM countries ORDER BY overall_score DESC LIMIT 3 ) GROUP BY languages.language_id HAVING COUNT(*) >= 3
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the official languages sorted in descending order by the average overall scores among countries speaking them.SELECT languages.language_id, languages.name, AVG(countries.overall_score) AS avg_overall_score FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id INNER JOIN countries ON official_languages.country_id = countries.id GROUP BY languages.language_id ORDER BY avg_overall_score DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of the official languages, sorted descending by the average overall scores across the countries that correspond to each?SELECT languages.language_id, languages.name FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.language_id ORDER BY AVG(countries.overall_score) DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the name of the country that has the greatest number of official languages.SELECT countries.country_id, COUNT(official_languages.language_id) AS num_of_official_languages FROM countries JOIN official_languages ON countries.id = official_languages.country_id GROUP BY countries.country_id ORDER BY num_of_official_languages DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which country has the greatest number of official languages?SELECT countries.country_id FROM countries WHERE countries.id = (SELECT MAX(countries.id) FROM countries);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the names of languages that are not the official language of any countries.SELECT languages.language_id, languages.name FROM languages LEFT JOIN official_languages ON languages.language_id = official_languages.language_id WHERE official_languages.country_id IS NULL;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of languages that are not the official language of any country?SELECT languages.language_id, languages.name FROM languages LEFT JOIN official_languages ON languages.language_id = official_languages.language_id WHERE official_languages.country_id IS NULL;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the names of countries that do not have any official language.SELECT countries.country_id, countries.name FROM countries LEFT JOIN official_languages ON countries.id = official_languages.country_id WHERE official_languages.language_id IS NULL;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of countries that do not have an official language?SELECT countries.country_id, countries.name FROM countries LEFT JOIN official_languages ON countries.id = official_languages.country_id WHERE official_languages.language_id IS NULL;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the names of languages that are the official language for both countries with overall score greater than 95 and countries with overall score less than than 90.SELECT languages.language_id, languages.name FROM languages INNER JOIN official_languages ON languages.language_id = official_languages.language_id WHERE (countries.overall_score > 95) AND (countries.overall_score < 90);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of languages that are the official language not only for countries that have an overall score of above 95, but also for countries that have an overall score below 90?SELECT languages.language_id, languages.name FROM languages INNER JOIN official_languages ON languages.language_id = official_languages.language_id WHERE official_languages.country_id IN (SELECT country_id FROM countries WHERE overall_score > 95) AND official_languages.country_id IN (SELECT country_id FROM countries WHERE overall_score < 90);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which countries and cities are included in addresses?SELECT Addresses.search_string FROM Addresses WHERE Addresses.search_string LIKE '%country%' OR Addresses.search_string LIKE '%city%'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the countries and cities for each address?SELECT Addresses.search_string FROM User_Searches WHERE search_string LIKE '%London%';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: In which states are each of the the properties located?SELECT Addresses.search_string FROM Addresses WHERE Addresses.state IN (SELECT Properties.state FROM Properties);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Give the states or provinces corresponding to each property.SELECT Addresses.search_string FROM User_Searches WHERE user_id = 100 AND search_string LIKE '%state%';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How is the feature rooftop described?SELECT Features.search_string FROM User_Searches WHERE user_id = '1234' AND search_string LIKE '%rooftop%';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the description of the feature 'rooftop'.SELECT Ref_Age_Categories.user_id FROM Users WHERE age_category_code = 'A' AND user_category_code = 'B';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the feature name and description of the most commonly seen feature across properties?SELECT Features.search_string FROM User_Searches WHERE search_string LIKE '%feature%';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Give the feature name and description for the most common feature across all properties.SELECT Features.search_string FROM User_Searches WHERE search_string ='most common feature' ORDER BY count(*) DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the minimum number of rooms in a property?SELECT Rooms.search_seq FROM Rooms WHERE Rooms.room_size = (SELECT MIN(Rooms.room_size) FROM Rooms);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the lowest room count across all the properties?SELECT Rooms.search_seq FROM Rooms WHERE Room_count = (SELECT MIN(Room_count) FROM Rooms);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many properties have 1 parking lot or 1 garage?SELECT Property_Features.search_seq FROM Property_Features WHERE feature_id = (SELECT feature_id from Features where feature_name = 'Parking Lot') OR feature_id = (SELECT feature_id from Features where feature_name = 'Garage')
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Count the number of properties that have 1 parking lot or 1 garage.SELECT Properties.user_id, COUNT(*) AS num_properties
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: For users whose description contain the string 'Mother', which age categories are they in?SELECT Ref_Age_Categories.user_id FROM Users WHERE middle_name LIKE '%Mother%' AND user_category_code = 'MOTHER' ORDER BY Ref_Age_Categories.age_category_code ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the age categories for users whose description contains the string Mother?SELECT Ref_Age_Categories.user_id FROM Users WHERE Users.user_category_code = 'Mother' AND Users.age_category_code = Ref_Age_Categories.age_category_code;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the first name of the user who owns the greatest number of properties?SELECT Users.user_id, Users.first_name FROM Users INNER JOIN Properties ON Users.user_id = Properties.owner_user_id GROUP BY Users.user_id ORDER BY COUNT(*) DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the first name of the user who owns the most properties.SELECT Users.user_id, Users.first_name FROM Users INNER JOIN Properties ON Users.user_id = Properties.owner_user_id GROUP BY Users.user_id ORDER BY COUNT(*) DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the average room count of the properties with gardens.SELECT Rooms.search_string
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: On average, how many rooms do properties with garden features have?SELECT Rooms.user_id, Rooms.property_id, Rooms.room_number, Rooms.room_type_code, Rooms.room_size, Rooms.other_room_details, Features.feature_name, Features.feature_description FROM Users INNER JOIN User_Property_History ON Users.user_id = User_Property_History.user_id INNER JOIN Properties ON User_Property_History.property_id = Properties.property_id INNER JOIN Rooms ON Properties.property_id = Rooms.property_id INNER JOIN Property_Features ON Properties.property_id = Property_Features.property_id INNER JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE Features.feature_name = 'Garden' GROUP BY Rooms.user_id, Rooms.property_id, Rooms.room_number, Rooms.room_type_code, Rooms.room_size, Rooms.other_room_details, Features.feature_name, Features.feature_description HAVING COUNT(*) > 0 ORDER BY Rooms.user_id ASC, Rooms.property_id ASC, Rooms.room_number ASC, Rooms.room_type_code ASC, Rooms.room_size ASC, Rooms.other_room_details ASC, Features.feature_name ASC, Features.feature
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: In which cities are there any properties equipped with a swimming pool?SELECT Addresses.search_string FROM User_Searches WHERE search_string LIKE '%swimming%pool%' AND search_string LIKE '%city%'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the cities in which there exist properties that have swimming pools.SELECT Addresses.search_string FROM User_Searches WHERE search_string LIKE '%swimming pool%'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which property had the lowest price requested by the vendor? List the id and the price.SELECT Property_Features.user_id, Property_Features.property_id, Property_Features.feature_id, Property_Features.feature_value, Property_Features.property_feature_description FROM Property_Features INNER JOIN Users ON Property_Features.user_id = Users.user_id WHERE (Users.age_category_code = 'A') AND (Users.user_category_code = 'B') ORDER BY Users.user_id ASC LIMIT 5 OFFSET 0;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the id of the property that had the lowest requested price from the vendor, and what was that price?SELECT Property_Features.user_id, Property_Features.property_id, Property_Features.feature_id, Property_Features.feature_value, Property_Features.property_feature_description FROM Property_Features INNER JOIN Users ON Property_Features.user_id = Users.user_id WHERE (Users.age_category_code = 'A') AND (Users.user_category_code = 'C') ORDER BY Property_Features.property_id ASC LIMIT 5 OFFSET 0;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: On average, how many rooms does a property have?SELECT Rooms.user_id, Rooms.property_id, Rooms.room_number, Rooms.room_type_code, Rooms.room_size, Rooms.other_room_details, Properties.property_name, Properties.property_description, Properties.garage_yn, Properties.parking_lots, Properties.room_count, Properties.vendor_requested_price, Properties.price_min, Properties.price_max, Properties.other_property_details, Addresses.line_1_number_building, Addresses.line_2_number_street, Addresses.line_3_area_locality, Addresses.town_city, Addresses.zip_postcode, Addresses.county_state_province, Addresses.country, Addresses.other_address_details, Users.age_category_code, Users.user_category_code, Users.is_buyer, Users.is_seller, Users.login_name, Users.password, Users.date_registered, Users.first_name, Users.middle_name, Users.last_name, Users.other_user_details, Ref_Property_Types.property_type_code, Ref_Property_Types.property_type_description, Ref_Room_Types.room_type_code, Ref_Room_Types.room_type_description FROM
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the average number of rooms in a property?SELECT Rooms.user_id, Rooms.property_id, Rooms.room_number, Rooms.room_type_code, Rooms.room_size, Rooms.other_room_details, Properties.property_name, Properties.property_description, Properties.garage_yn, Properties.parking_lots, Properties.room_count, Properties.vendor_requested_price, Properties.price_min, Properties.price_max, Properties.other_property_details, Addresses.line_1_number_building, Addresses.line_2_number_street, Addresses.line_3_area_locality, Addresses.town_city, Addresses.zip_postcode, Addresses.county_state_province, Addresses.country, Addresses.other_address_details, Users.age_category_code, Users.user_category_code, Users.is_buyer, Users.is_seller, Users.login_name, Users.password, Users.date_registered, Users.first_name, Users.middle_name, Users.last_name, Users.other_user_details, Ref_Property_Types.property_type_code, Ref_Property_Types.property_type_description, Ref_Room_Types.room_type_code, Ref_Room_Types.room_type_description,
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many kinds of room sizes are listed?SELECT Rooms.user_id, Rooms.property_id, Rooms.room_number, Rooms.room_type_code, Rooms.room_size, Rooms.other_room_details FROM Users INNER JOIN User_Property_History ON Users.user_id = User_Property_History.user_id INNER JOIN Properties ON User_Property_History.property_id = Properties.property_id INNER JOIN Rooms ON Properties.property_id = Rooms.property_id WHERE (Rooms.room_size IS NOT NULL);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the number of different room sizes.SELECT Rooms.user_id, Rooms.property_id, Rooms.room_number, Rooms.room_type_code, Rooms.room_size, Rooms.other_room_details FROM Rooms WHERE Rooms.room_size IS NOT NULL GROUP BY Room_size HAVING COUNT(Rooms.room_size) > 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the ids of users who have searched at least twice, and what did they search?SELECT user_id FROM User_Searches WHERE search_seq > 1 GROUP BY user_id HAVING COUNT(*)>1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the ids of users who have performed two or more searches, as well as their search sequence.SELECT user_id FROM User_Searches WHERE search_seq > 1 GROUP BY user_id HAVING COUNT(search_seq) >= 2;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: When was the time of the latest search by a user?SELECT Users.user_id, Users.first_name, Users.last_name, User_Searches.search_datetime
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What was the time of the most recent search?SELECT user_id, MAX(search_datetime) AS max_search_time FROM User_Searches GROUP BY user_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are all the user searches time and content? Sort the result descending by content.SELECT search_datetime, search_string FROM User_Searches ORDER BY search_string DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the search strings and corresonding time stamps for all user searches, sorted by search string descending.SELECT search_string, search_datetime FROM User_Searches ORDER BY search_string DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the zip codes of properties which do not belong to users who own at most 2 properties?SELECT Addresses.search_string FROM User_Searches WHERE search_string = '12345' AND user_id IN (SELECT user_id FROM Users WHERE user_id NOT IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) > 2)) AND address_id IN (SELECT property_address_id FROM Properties WHERE property_id NOT IN (SELECT property_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Features WHERE feature_name = 'Zip Code')))
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the zip codes for properties not belonging to users who own two or fewer properties.SELECT Addresses.search_string FROM User_Searches WHERE search_string LIKE '%two%' AND search_string LIKE '%or%fewer%'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the users making only one search? List both category and user id.SELECT user_id, user_category_code FROM Users WHERE user_id IN ( SELECT DISTINCT user_id FROM User_Searches )
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the ids of users who have only made one search, and what are their category codes?SELECT user_id, user_category_code FROM Users WHERE user_id IN ( SELECT DISTINCT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) = 1 )
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the age range category of the user who made the first search?SELECT Ref_Age_Categories.user_id FROM Users WHERE Users.login_name = 'joe' AND Users.date_registered = (SELECT MIN(User_Searches.search_datetime) FROM User_Searches WHERE User_Searches.user_id = 1);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the age category for the user who made the earliest search.SELECT Ref_Age_Categories.user_id FROM Users WHERE Users.user_id = (SELECT User_Searches.user_id FROM User_Searches ORDER BY User_Searches.search_datetime ASC LIMIT 1);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the login names of all senior citizen users ordered by their first names.SELECT Users.user_id, Users.login_name FROM Users INNER JOIN Ref_Age_Categories ON Users.age_category_code = Ref_Age_Categories.age_category_code WHERE Ref_Age_Categories.age_category_description = 'Senior Citizen' ORDER BY Users.first_name ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the login names of all senior citizens, sorted by first name?SELECT Users.user_id, Users.login_name FROM Users WHERE Users.age_category_code = 'Senior Citizen' ORDER BY Users.first_name ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many searches do buyers make in total?SELECT Users.user_id, COUNT(User_Searches.search_seq) AS search_count FROM Users INNER JOIN User_Searches ON Users.user_id = User_Searches.user_id WHERE Users.is_buyer = 'Y' GROUP BY Users.user_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Count the number of searches made by buyers.SELECT Users.user_id, COUNT(User_Searches.search_seq) AS search_count FROM Users INNER JOIN User_Searches ON Users.user_id = User_Searches.user_id WHERE Users.is_buyer = 'Y' GROUP BY Users.user_id ORDER BY search_count DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: When did the user with login name ratione register?SELECT Users.user_id, Users.login_name, Users.date_registered FROM Users WHERE Users.login_name = 'ratione';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What was the registration date for the user whose login name is ratione?SELECT Users.user_id, Users.date_registered FROM Users WHERE Users.login_name = 'ratione';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the first name, middle name and last name, and log in name of all the seller users, whose seller value is 1.SELECT Users.user_id, Users.first_name, Users.middle_name, Users.last_name, Users.login_name FROM Users WHERE Users.is_seller = '1';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the first, middle, last, and login names for all users who are sellers?SELECT Users.user_id, Users.first_name, Users.middle_name, Users.last_name, Users.login_name FROM Users WHERE Users.is_seller = 'Y'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Where do the Senior Citizens live? List building, street, and the city.SELECT Addresses.search_string FROM Users WHERE age_category_code = 'Senior Citizen' AND user_category_code = 'Buyer';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the buildings, streets, and cities corresponding to the addresses of senior citizens?SELECT Addresses.search_string FROM Users WHERE age_category_code = 'Senior Citizen' AND user_category_code = 'Buyer'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many properties are there with at least 2 features?SELECT Property_Features.user_id, COUNT(Property_Features.property_id) AS num_properties FROM Property_Features GROUP BY Property_Features.user_id HAVING COUNT(Property_Features.property_id)>1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Count the number of properties with at least two features.SELECT Property_Features.user_id, COUNT(Property_Features.property_id) AS num_properties_with_at_least_two_features FROM Property_Features GROUP BY Property_Features.user_id HAVING COUNT(Property_Features.property_id) >= 2;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many photos does each property have?SELECT Property_Photos.user_id, COUNT(PROPERTY_PHOTOS.property_id) AS num_photos FROM Property_Photos GROUP BY user_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Count the number of property photos each property has by id.SELECT Property_Photos.user_id, COUNT(PROPERTY_PHOTOS.property_id) AS num_photos FROM Property_Photos GROUP BY user_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many photos does each owner has of his or her properties? List user id and number of photos.SELECT Users.user_id, COUNT(Property_Photos.photo_seq) AS num_photos FROM Users INNER JOIN Properties ON Users.user_id = Properties.owner_user_id INNER JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY Users.user_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the user ids of property owners who have property photos, and how many do each of them have?SELECT Users.user_id, COUNT(Property_Photos.property_id) AS num_photos FROM Users INNER JOIN Properties ON Users.user_id = Properties.owner_user_id INNER JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY Users.user_id HAVING COUNT(Property_Photos.property_id) > 0 ORDER BY Users.user_id ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the total max price of the properties owned by single mothers or students?SELECT Properties.user_id, Properties.property_id, Properties.price_max FROM Users INNER JOIN Addresses ON Users.user_address_id = Addresses.address_id INNER JOIN Properties ON Users.user_id = Properties.owner_user_id WHERE (Users.user_category_code = 'SM' OR Users.user_category_code = 'ST') AND Properties.price_max IS NOT NULL GROUP BY Properties.user_id HAVING COUNT(*) > 1 ORDER BY Properties.price_max DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Give the total max price corresponding to any properties owned by single mothers or students.SELECT Properties.user_id, Properties.property_id, Properties.price_max FROM Users INNER JOIN Addresses ON Users.user_address_id = Addresses.address_id INNER JOIN Properties ON Users.user_id = Properties.owner_user_id WHERE (Users.age_category_code = 'Single Mother' OR Users.user_category_code = 'Student') AND Properties.price_max IS NOT NULL GROUP BY Properties.user_id HAVING COUNT(Properties.user_id) = 1 ORDER BY Properties.price_max DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the date stamps and property names for each item of property history, ordered by date stamp?SELECT User_Property_History.user_id, User_Property_History.property_id, User_Property_History.datestamp, Properties.property_name FROM User_Property_History INNER JOIN Properties ON User_Property_History.property_id = Properties.property_id ORDER BY User_Property_History.datestamp ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the date stamp and property name for each property history event, sorted by date stamp.SELECT User_Property_History.user_id, User_Property_History.property_id, User_Property_History.datestamp, Properties.property_name FROM User_Property_History INNER JOIN Properties ON User_Property_History.property_id = Properties.property_id ORDER BY User_Property_History.datestamp ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the description of the most common property type? List the description and code.SELECT Ref_Property_Types.user_id FROM Users WHERE user_id = 1000;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the most common property type, and what is its description.SELECT Ref_Property_Types.user_id FROM Users WHERE user_id = 1000;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the detailed description of the age category code 'Over 60'?SELECT Ref_Age_Categories.user_id FROM Users WHERE age_category_code = 'Over 60';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Give the category description of the age category 'Over 60'.SELECT Ref_Age_Categories.user_id FROM Users WHERE age_category_code = 'Over 60';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the different room sizes, and how many of each are there?SELECT Rooms.search_string, COUNT(Rooms.search_string) AS count FROM Rooms GROUP BY search_string ORDER BY count DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the number of rooms with each different room size.SELECT Rooms.search_string, COUNT(Rooms.search_string) AS count FROM Rooms GROUP BY search_string ORDER BY count DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: In which country does the user with first name Robbie live?SELECT Addresses.user_id, Users.first_name, Addresses.country FROM User_Address INNER JOIN Addresses ON User_Address.address_id = Addresses.address_id INNER JOIN Users ON Addresses.user_id = Users.user_id WHERE Users.first_name = 'Robbie' GROUP BY Addresses.country HAVING COUNT(*) > 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the country in which the user with first name Robbie lives.SELECT Addresses.search_string FROM Users WHERE first_name = 'Robbie' AND seaarch_string IN (SELECT Addresses.country FROM Addresses);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the first, middle and last names of users who own the property they live in?SELECT Users.user_id, Users.first_name, Users.middle_name, Users.last_name FROM Users INNER JOIN Properties ON Users.user_id = Properties.owner_user_id WHERE Users.user_address_id = Properties.property_address_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the full names of users who live in properties that they own.SELECT Users.user_id, CONCAT(Users.first_name,'', Users.middle_name,'', Users.last_name) AS Full_Name FROM Users INNER JOIN Properties ON Users.user_id = Properties.owner_user_id WHERE Properties.property_address_id IN (SELECT Addresses.address_id FROM Addresses INNER JOIN Properties ON Addresses.address_id = Properties.property_address_id);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the search content of the users who do not own a single property.SELECT user_id, search_string FROM User_Searches WHERE user_id NOT IN ( SELECT user_id FROM Users INNER JOIN Properties ON Users.user_id = Properties.owner_user_id GROUP BY user_id HAVING COUNT(*)=0 )
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What search strings were entered by users who do not own any properties?SELECT user_id, search_string FROM User_Searches WHERE user_id NOT IN (SELECT user_id FROM Users WHERE user_id IN (SELECT owner_user_id FROM Properties));
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the last names and ids of users who have at least 2 properties and searched at most twice.SELECT Users.user_id, Users.last_name FROM Users WHERE (SELECT COUNT(*) FROM User_Property_History WHERE User_Property_History.user_id = Users.user_id) >= 2 AND (SELECT COUNT(*) FROM User_Searches WHERE User_Searches.user_id = Users.user_id) <= 2;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the last names and ids of users who have searched two or fewer times, and own two or more properties?SELECT Users.user_id, Users.last_name FROM Users WHERE (SELECT COUNT(*) FROM User_Searches WHERE User_Searches.user_id = Users.user_id) <= 2 AND (SELECT COUNT(*) FROM User_Property_History WHERE User_Property_History.user_id = Users.user_id) >= 2;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many bikes are heavier than 780 grams?SELECT bike_id FROM bike WHERE weight > 780;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the product names and weights of the bikes in ascending order of price.SELECT bike_id, product_name, weight FROM bike ORDER BY price ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the heat, name, and nation for all the cyclists.SELECT cyclist.cyclist_id, cyclist.name, cyclist.nation FROM cyclist
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the maximum and minimum weight of all bikes?SELECT bike_id, MAX(weight) AS max_weight, MIN(weight) AS min_weight FROM cyclists_own_bikes GROUP BY bike_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the average price of the bikes made of material 'Carbon CC'?SELECT bike_id, AVG(price) FROM cyclists_own_bikes JOIN bike ON cyclists_own_bikes.bike_id = bike.id WHERE material='Carbon CC' GROUP BY bike_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the name and result of the cyclists not from 'Russia'?SELECT cyclist.cyclist_id, cyclist.name, cyclist.result FROM cyclist WHERE cyclist.nation!= 'Russia'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the distinct ids and product names of the bikes that are purchased after year 2015?SELECT bike_id, product_name FROM cyclists_own_bikes WHERE purchase_year > 2015 GROUP BY bike_id, product_name;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the ids and names of racing bikes that are purchased by at least 4 cyclists?SELECT bike_id, product_name FROM bike WHERE id IN (SELECT DISTINCT cyclist_id FROM cyclists_own_bikes GROUP BY cyclist_id HAVING COUNT(*) >= 4);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the id and name of the cyclist who owns the most bikes?SELECT cyclist_id, name FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY COUNT(*) DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the distinct product names of bikes owned by cyclists from 'Russia' or cyclists from 'Great Britain'?SELECT bike_id FROM cyclist WHERE nation = 'Russia' OR nation = 'Great Britain'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many different levels of heat are there for the cyclists?SELECT cyclist.cyclist_id, cyclist.name, cyclist.nation, cyclist.result, bike.product_name, bike.weight, bike.price, bike.material FROM cyclist INNER JOIN cyclists_own_bikes ON cyclist.id = cyclists_own_bikes.cyclist_id INNER JOIN bike ON cyclists_own_bikes.bike_id = bike.id WHERE cyclist.heat > 0 ORDER BY cyclist.heat DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many cyclists did not purchase any bike after year 2015?SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year > 2015;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of distinct racing bikes that are purchased by the cyclists with better results than '4:21.558'?SELECT bike_id FROM cyclist WHERE result > 421.558;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Antonio Tauler'.SELECT bike_id, product_name, price FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE name = 'Bradley Wiggins') AND cyclist_id IN (SELECT id FROM cyclist WHERE name = 'Antonio Tauler')) ORDER BY bike_id ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the name, nation and result for the cyclists who did not purchase any racing bike.SELECT cyclist.cyclist_id, cyclist.name, cyclist.nation, cyclist.result FROM cyclist LEFT JOIN cyclists_own_bikes ON cyclist.id = cyclists_own_bikes.cyclist_id WHERE cyclists_own_bikes.bike_id IS NULL;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of the bikes that have substring 'fiber' in their material?SELECT bike_id FROM bike WHERE material LIKE '%fiber%';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many bikes does each cyclist own? Order by cyclist id.SELECT bike_id, COUNT(*) AS num_bikes FROM cyclists_own_bikes GROUP BY bike_id ORDER BY cyclist_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the most expensive cake and its flavor?SELECT goods.ReceiptNumber, good.Flavor FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods as good ON items.Item = good.Id WHERE good.Food = 'cake' ORDER BY good.Price DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Give the id and flavor of the most expensive cake.SELECT goods.ReceiptNumber, goods.Flavor FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'cake' ORDER BY goods.Price DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the cheapest cookie and its flavor?SELECT goods.ReceiptNumber, items.Item, goods.Price FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'cookie' ORDER BY goods.Price ASC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the id and flavor of the cheapest cookie?SELECT items.ReceiptNumber, goods.Flavor FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'cookie' AND goods.Price = (SELECT MIN(goods.Price) FROM goods WHERE goods.Food = 'cookie');
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the ids of goods that have apple flavor.SELECT goods.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the ids with apple flavor?SELECT items.ReceiptNumber FROM receipts 
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the ids of goods that cost less than 3 dollars?SELECT goods.ReceiptNumber FROM receipts WHERE receipts.Price < 3;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Give the ids of goods that cost less than 3 dollars.SELECT goods.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 1 AND receipts.Date >= '2019-01-01' AND receipts.Date <= '2019-12-31';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the distinct ids of all customers who bought a cake with lemon flavor?SELECT customers.CustomerId FROM receipts 
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the distinct ids of customers who bought lemon flavored cake?SELECT customers.CustomerId FROM receipts 
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: For each type of food, tell me how many customers have ever bought it.SELECT customers.CustomerId, COUNT(*) AS Count FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Food IS NOT NULL GROUP BY customers.CustomerId ORDER BY Count DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many customers have bought each food?SELECT customers.CustomerId, COUNT(*) AS Count FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id GROUP BY customers.CustomerId HAVING goods.Food IS NOT NULL ORDER BY Count DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the id of customers who shopped at the bakery at least 15 times.SELECT customers.CustomerId FROM receipts WHERE receipts.ReceiptNumber IN (SELECT items.Receipt FROM items INNER JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'bakery') GROUP BY customerid HAVING COUNT(*) >= 15;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the customer ids of customers who have at least 15 receipts?SELECT CustomerId FROM receipts WHERE ReceiptNumber >= 15;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the last name of the customers who shopped at the bakery more than 10 times?SELECT customers.CustomerId, customers.LastName FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'bakery' GROUP BY customers.CustomerId HAVING COUNT(*) > 10;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Give the last names of customers who have been to the bakery more than 10 times?SELECT customers.CustomerId, customers.LastName FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'bakery' GROUP BY customers.CustomerId HAVING COUNT(*) > 10;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many types of Cake does this bakery sell?SELECT goods.CustomerId, COUNT(*) AS CountOfGoods FROM items JOIN goods ON items.Item = goods.Id GROUP BY goods.CustomerId HAVING CountOfGoods > 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Count the number of types of cake this bakery sells.SELECT goods.ReceiptNumber, COUNT(DISTINCT goods.Flavor) AS CakeTypes FROM items JOIN goods ON items.Item = goods.Id GROUP BY ReceiptNumber HAVING COUNT(DISTINCT goods.Flavor) > 1 ORDER BY ReceiptNumber ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List all the flavors of Croissant available in this bakery.SELECT goods.ReceiptNumber FROM items WHERE Item = 'Croissant' AND ReceiptNumber IN (SELECT receipts.ReceiptNumber FROM receipts INNER JOIN customers ON receipts.CustomerId = customers.Id WHERE customers.LastName = 'Smith') GROUP BY goodss.ReceiptNumber HAVING COUNT(*) > 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are all the flavors of croissant?SELECT goods.ReceiptNumber FROM items WHERE Item = 'croissant' AND ReceiptNumber IN (SELECT receipts.ReceiptNumber FROM receipts INNER JOIN customers ON receipts.CustomerId = customers.Id WHERE customers.LastName = 'Smith') ORDER BY good.ReceiptNumber ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Give me a list of all the distinct items bought by the customer number 15.SELECT items.ReceiptNumber, items.Item FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt WHERE receipts.CustomerId = 15 GROUP BY items.ReceiptNumber, items.Item HAVING COUNT(*) > 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are all the distinct items bought by customer 15?SELECT items.ReceiptNumber, receipts.Date, customers.LastName, customers.FirstName, items.Item FROM customers INNER JOIN receipts ON customers.Id = receipts.CustomerId INNER JOIN items ON receipts.ReceiptNumber = items.Receipt WHERE customers.Id = 15;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: For each type of food, what are the average, maximum and minimum price?SELECT ReceiptNumber, Date, CustomerId, LastName, FirstName, Flavor, Food, Price FROM receipts JOIN items ON Receipt = ReceiptNumber JOIN goods ON Item = Id WHERE Food IN ('Pizza', 'Burger', 'Salad') ORDER BY ReceiptNumber ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the average, minimum and maximum prices for each food?SELECT goods.ReceiptNumber, AVG(goods.Price), MIN(goods.Price), MAX(goods.Price)
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the receipt numbers where both Cake and Cookie were bought.SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE FirstName = 'John' OR LastName = 'Smith') AND Date >= '2019-01-01';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the receipt numbers for instances where both cakes and cookies were purchased?SELECT ReceiptNumber FROM receipts WHERE Id IN (SELECT Item FROM items WHERE Item IN ('cake', 'cookie'));
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find all the receipt numbers in which customer with last name LOGAN purchased Croissant.SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE LastName = 'LOGAN') AND EXISTS (SELECT * FROM items WHERE Item = 'Croissant' AND Receipt = ReceiptNumber)
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the receipt numbers for a customer with the last name Logan who purchased a croissant?SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE LastName = 'Logan') AND EXISTS (SELECT * FROM items WHERE Item = 'croissant' AND ReceiptNumber = receipts.ReceiptNumber);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the receipt number and date of the receipt in which the most expensive item was bought?SELECT ReceiptNumber, Date FROM receipts WHERE Id IN (SELECT Item FROM items ORDER BY Price DESC LIMIT 1);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the receipt number and date corresponding to the receipt for which the most expensive item was purchased?SELECT receipts.ReceiptNumber, receipts.Date FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Price = (SELECT MAX(goods.Price) FROM goods);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the item that was bought the least number of times?SELECT items.ReceiptNumber, COUNT(items.Item) AS Count FROM items GROUP BY items.ReceiptNumber ORDER BY Count ASC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which item was bought the fewest times?SELECT items.ReceiptNumber, COUNT(items.Item) AS Count FROM items GROUP BY items.ReceiptNumber ORDER BY Count ASC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many goods are available for each food type?SELECT goods.ReceiptNumber, COUNT(goods.Id) AS count FROM items JOIN goods ON items.Item = goods.Id GROUP BY ReceiptNumber;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Count the number of goods for each food type.SELECT goods.ReceiptNumber, COUNT(goods.Id) AS count FROM items JOIN goods ON items.Item = goods.Id GROUP BY goods.Food;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the average price for each food type?SELECT goods.ReceiptNumber, good.Food, AVG(goods.Price) AS AveragePrice FROM items INNER JOIN goods ON items.Item = goods.Id GROUP BY Food ORDER BY AveragePrice DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Give the average price for each food type.SELECT goods.ReceiptNumber, AVG(goods.Price) AS avg_price FROM items JOIN goods ON items.Item = goods.Id GROUP BY goods.Food;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are ids of the goods that have Apricot flavor and are cheaper than 5 dollars?SELECT goods.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 1 AND receipts.Date >= '2019-01-01' AND receipts.Date <= '2020-12-31'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Give the ids for goods that have Apricot flavor and have a price lower than 5 dollars.SELECT goods.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 1 AND receipts.Date >= '2019-01-01' AND receipts.Date <= '2019-12-31';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find flavor of cakes that cost more than 10 dollars.SELECT goods.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 1 AND receipts.ReceiptNumber IN (SELECT items.Receipt FROM items WHERE items.Item = 'cake' AND items.Price > 10);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the flavors of cakes that cost more than 10 dollars?SELECT goods.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 1 AND receipts.ReceiptNumber IN (SELECT items.ReceiptNumber FROM items WHERE items.Item = 'cake' AND items.Price > 10);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Give me the distinct id and price for all goods whose price is below the average of all goods?SELECT goods.ReceiptNumber, goods.Price FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Price < (SELECT AVG(goods.Price) FROM goods);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the distinct ids and prices for goods that cost less than the average good?SELECT goods.ReceiptNumber, goods.Price FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Price < (SELECT AVG(goods.Price) FROM goods);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the distinct ids of all goods that are cheaper than some goods of type Tart?SELECT goods.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 1 AND receipts.ReceiptNumber IN (SELECT items.Item FROM items WHERE items.Ordinal = 2);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Give the distinct ids for goods that cost less than any Tart.SELECT goods.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 1 AND receipts.Date >= '2019-01-01' AND receipts.Date <= '2020-12-31'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List distinct receipt numbers for which someone bought a good that costs more than 13 dollars.SELECT ReceiptNumber FROM receipts WHERE EXISTS (SELECT * FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Price > 13.0 AND receipts.ReceiptNumber = items.Receipt);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What distinct receipt numbers correspond to someone who bought a good that costs more than 13 dollars?SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE FirstName = 'John' AND LastName = 'Doe') INTERSECT SELECT ReceiptNumber FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > 13.0)
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: On which date did some customer buy a good that costs more than 15 dollars?SELECT receipts.Date FROM receipts WHERE receipts.CustomerId IN (SELECT customers.Id FROM customers JOIN items ON customers.Id = items.Receipt AND items.Item = 'Chocolate' WHERE items.Ordinal = 1) AND receipts.ReceiptNumber IN (SELECT receipts.ReceiptNumber FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt AND items.Item = 'Chocolate' WHERE items.Ordinal = 2) AND receipts.Price > 15;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which date corresponds to when a customer purchased a good costing over 15 dollars?SELECT receipts.Date FROM receipts WHERE receipts.CustomerId = (SELECT customers.Id FROM customers WHERE customers.FirstName = 'John' AND customers.LastName = 'Doe') AND EXISTS (SELECT items.Item FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Price > 15.0);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Give me the list of ids of all goods whose id has "APP".SELECT goods.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are all the ids of goods with an id which contains "APP"?SELECT items.ReceiptNumber FROM items WHERE items.Item IN (SELECT goods.Id FROM goods WHERE goods.Id LIKE '%APP%');
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which good has "70" in its id? And what is its price?SELECT goods.ReceiptNumber, items.Item, goods.Price FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Id LIKE '%70%';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the id and price for the good with "70" in its id?SELECT items.ReceiptNumber, items.Item, goods.Price FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Id LIKE '70%';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the last names of all customers in an alphabetical order.SELECT customers.CustomerId, customers.LastName FROM customers ORDER BY LastName ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the last names of the customers in alphabetical order?SELECT customers.CustomerId, customers.LastName FROM customers ORDER BY LastName ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the ordered list of all good ids.SELECT items.ReceiptNumber, items.Item FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt WHERE receipts.CustomerId = 1 ORDER BY items.ReceiptNumber ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Order the distinct good ids.SELECT items.ReceiptNumber, items.Item FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt WHERE receipts.CustomerId = 1 ORDER BY items.ReceiptNumber ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find all receipts in which either apple flavor pie was bought or customer id 12 shopped.SELECT ReceiptNumber FROM receipts WHERE CustomerId = 12 OR EXISTS(SELECT * FROM items JOIN goods ON items.Item = goods.Id WHERE Flavor = 'apple' AND Food = 'pie')
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the receipt numbers for which either an apple flavor pie was purchased or the customer with id 12 shopped?SELECT ReceiptNumber FROM receipts WHERE CustomerId = 12 OR EXISTS(SELECT * FROM items JOIN goods ON items.Item = goods.Id WHERE Flavor = 'apple' AND Food = 'pie')
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find all receipts which has the latest date. Also tell me that date.SELECT receipts.ReceiptNumber, MAX(receipts.Date) FROM receipts GROUP BY receipts.ReceiptNumber;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the receipt number with the latest date, and what is that date?SELECT ReceiptNumber FROM receipts WHERE Date = (SELECT MAX(Date) FROM receipts);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find all receipts which either has the earliest date or has a good with price above 10.SELECT receipts.ReceiptNumber FROM receipts WHERE receipts.Date = (SELECT MIN(receipts.Date) FROM receipts) OR EXISTS(SELECT * FROM items JOIN goods ON items.Item=goods.Id WHERE goods.Price > 10);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are all the receipt numbers that have a good with a price above 10 or have the earliest date?SELECT ReceiptNumber FROM receipts WHERE Date = (SELECT MIN(Date) FROM receipts) OR Price > 10;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the ids of Cookie and Cake that cost between 3 and 7 dollars.SELECT goods.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 1 AND receipts.ReceiptNumber IN (SELECT items.Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Price BETWEEN 3 AND 7);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Give the ids of Cookies or Cakes that cost between 3 and 7 dollars.SELECT goods.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 1 AND receipts.Date >= '2019-01-01' AND receipts.Date <= '2019-12-31'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the first name and last name of a customer who visited on the earliest date.SELECT customers.CustomerId, customers.FirstName, customers.LastName FROM receipts INNER JOIN customers ON receipts.CustomerId = customers.Id WHERE receipts.ReceiptNumber IN (SELECT MIN(receipts.ReceiptNumber) FROM receipts GROUP BY receipts.CustomerId);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the full name of the customer who visited on the earliest date?SELECT customers.CustomerId, customers.FirstName, customers.LastName FROM receipts INNER JOIN customers ON receipts.CustomerId = customers.Id WHERE receipts.Date = (SELECT MIN(receipts.Date) FROM receipts);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is average price of goods whose flavor is blackberry or blueberry?SELECT ReceiptNumber, AVG(Price) AS AveragePrice FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE Flavor IN ('blackberry', 'blueberry') GROUP BY ReceiptNumber;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the average prices of goods with blackberry or blueberry flavor?SELECT goods.ReceiptNumber, AVG(goods.Price) AS AveragePrice FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Flavor IN ('blackberry', 'blueberry') GROUP BY ReceiptNumber;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the cheapest price for goods with cheese flavor.SELECT receipts.ReceiptNumber, MIN(goods.Price) AS Price FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Flavor = 'cheese' GROUP BY receipts.ReceiptNumber;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the cheapest good with cheese flavor?SELECT goods.ReceiptNumber, items.Item, receipts.Date, receipts.CustomerId, receipts.ReceiptNumber, receipts.Date, receipts.CustomerId, receipts.ReceiptNumber, receipts.Date, receipts.CustomerId, receipts.ReceiptNumber, receipts.Date, receipts.CustomerId, receipts.ReceiptNumber, receipts.Date, receipts.CustomerId, receipts.ReceiptNumber, receipts.Date, receipts.CustomerId, receipts.ReceiptNumber, receipts.Date, receipts.CustomerId, receipts.ReceiptNumber, receipts.Date, receipts.CustomerId, receipts.ReceiptNumber, receipts.Date, receipts.CustomerId, receipts.ReceiptNumber, receipts.Date, receipts.CustomerId, receipts.ReceiptNumber, receipts.Date, receipts.CustomerId, receipts.ReceiptNumber, receipts.Date, receipts.CustomerId, receipts.ReceiptNumber, receipts.Date, receipts.CustomerId, receipts.ReceiptNumber, receipts.Date, receipts.CustomerId, receipts.ReceiptNumber, receipts.Date, receipts.CustomerId, receipts.ReceiptNumber, receipts.Date, receipts.CustomerId, receipts.Re
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are highest, lowest, and average prices of goods, grouped and ordered by flavor?SELECT goods.ReceiptNumber, good.Flavor, MAX(goods.Price), MIN(goods.Price), AVG(goods.Price)
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the maximum, minimum, and average prices of goods of each flavor, ordered by flavor?SELECT goods.ReceiptNumber, good.Flavor, MAX(goods.Price), MIN(goods.Price), AVG(goods.Price)
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the lowest and highest prices of goods grouped and ordered by food type.SELECT goods.ReceiptNumber, MIN(goods.Price), MAX(goods.Price)
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the minimum and maximum prices of food goods, ordered by food?SELECT goods.ReceiptNumber, MIN(goods.Price), MAX(goods.Price)
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the top three dates with the most receipts.SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts GROUP BY ReceiptNumber ORDER BY COUNT(*) DESC LIMIT 3);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the three dates for which the most receipts were given?SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts GROUP BY ReceiptNumber ORDER BY COUNT(*) DESC LIMIT 3);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which customer shopped most often? How many times?SELECT customers.CustomerId, COUNT(receipts.ReceiptNumber) AS count FROM receipts INNER JOIN customers ON receipts.CustomerId = customers.Id GROUP BY receipts.CustomerId ORDER BY count DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Give the customer id of the customer that made the most purchases, as well as the number of purchases made.SELECT customers.CustomerId, COUNT(receipts.ReceiptNumber) AS NumberOfPurchases FROM receipts INNER JOIN customer ON receipts.customerid = customer.id GROUP BY customer.id ORDER BY NumberOfPurchases DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: For each date, return how many distinct customers visited on that day.SELECT Date, COUNT(DISTINCT CustomerId) FROM receipts GROUP BY Date;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many cusomters visited on each date?SELECT receipts.Date, COUNT(*) AS Count FROM receipts GROUP BY Date ORDER BY Date ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Give me the first name and last name of customers who have bought apple flavor Tart.SELECT customers.CustomerId, customers.FirstName, customers.LastName FROM customers INNER JOIN receipts ON customers.Id = receipts.CustomerId INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Flavor = 'apple' AND goods.Food = 'Tart';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the full names of customers who bought apple flavored Tarts?SELECT customers.CustomerId, customers.LastName, customers.FirstName FROM customers INNER JOIN receipts ON customers.Id = receipts.CustomerId WHERE receipts.ReceiptNumber IN (SELECT ReceiptNumber FROM items INNER JOIN goods ON items.Item = goods.Id WHERE goods.Flavor = 'apple' AND goods.Food = 'Tart') ORDER BY customers.LastName ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the ids of Cookies whose price is lower than any Croissant?SELECT items.ReceiptNumber FROM items WHERE items.Item = 'Cookies' AND items.Price < ANY (SELECT goods.Price FROM goods WHERE goods.Food = 'Croissant');
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Give the ids of cookes that are cheaper than any croissant.SELECT items.ReceiptNumber FROM items WHERE items.Item IN (SELECT goods.Id FROM goods WHERE goods.Food = 'cookie') AND items.Price < ANY (SELECT goods.Price FROM goods WHERE goods.Food = 'croissant')
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Give me the ids of Cakes whose price is at least as much as the average price of Tart?SELECT items.ReceiptNumber FROM items WHERE items.Item = 'Cake' AND items.Price >= (SELECT AVG(goods.Price) FROM goods WHERE goods.Food = 'Tart');
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the ids of cakes that are at least as expensive as the average Tart?SELECT items.ReceiptNumber FROM items WHERE items.Item = 'Tart' AND items.Price >= (SELECT AVG(goods.Price) FROM goods WHERE goods.Food = 'Cake');
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the ids of goods whose price is above twice the average price of all goods?SELECT goods.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Give the ids of goods that are more than twice as expensive as the average good.SELECT goods.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the id, flavor and type of food of goods ordered by price.SELECT items.ReceiptNumber, goods.Flavor, goods.Food FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id ORDER BY goods.Price DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the ids, flavors, and food types of goods, ordered by price?SELECT goods.ReceiptNumber, goods.Flavor, goods.Food FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id ORDER BY goods.Price DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return a list of the id and flavor for Cakes ordered by flavor.SELECT items.ReceiptNumber, goods.Flavor FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'Cake' ORDER BY goods.Flavor;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the ids and flavors of cakes, ordered by flavor?SELECT items.ReceiptNumber, items.Item FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt WHERE items.Item IN (SELECT Id FROM goods WHERE Flavor LIKE 'cake') ORDER BY items.Item ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find all the items that have chocolate flavor but were not bought more than 10 times.SELECT items.ReceiptNumber FROM items WHERE items.Item IN (SELECT goods.Id FROM goods WHERE goods.Flavor = 'chocolate') AND items.ReceiptNumber NOT IN (SELECT receipts.ReceiptNumber FROM receipts GROUP BY receipts.ReceiptNumber HAVING COUNT(receipts.ReceiptNumber)>10);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the items with chocolate flavor that were purchased at most 10 times.SELECT items.ReceiptNumber, items.Item FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt WHERE items.Item IN (SELECT Id FROM goods WHERE Flavor = 'chocolate') GROUP BY ReceiptNumber HAVING COUNT(*) <= 10;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the flavors available for Cake but not for Tart?SELECT goods.ReceiptNumber FROM items WHERE Item = 'Cake' AND good.Id NOT IN (SELECT Id FROM items WHERE Item = 'Tart')
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Give the flavors of Cakes that are not available for Tart.SELECT goods.ReceiptNumber FROM items WHERE items.Item = 'Tart' AND good.Id NOT IN (SELECT Id FROM goods WHERE Flavor = 'Cake')
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the three most popular goods in this bakery?SELECT goods.ReceiptNumber, goodss.Flavor, COUNT(goods.Id) AS Count FROM items INNER JOIN goods ON items.Item = goods.Id GROUP BY ReceiptNumber ORDER BY Count DESC LIMIT 3;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Give the three most purchased items at this bakery.SELECT goods.ReceiptNumber, goodss.Flavor, COUNT(goods.ReceiptNumber) AS Count FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id GROUP BY ReceiptNumber ORDER BY Count DESC LIMIT 3;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the ids of customers who have spent more than 150 dollars in total.SELECT customers.CustomerId FROM receipts 
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the ids of customers who have spent over 150 dollars in total?SELECT customers.CustomerId FROM receipts 
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the ids of customers whose average spending for each good is above 5.SELECT customers.CustomerId FROM customers WHERE customerid IN (SELECT receipts.customerid FROM receipts JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id GROUP BY receipts.customerid HAVING AVG(goods.price) > 5);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the ids of customers who spend more than 5 on average for each good?SELECT customers.CustomerId FROM receipts 
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: On which day did the bakery sell more than 100 dollars in total.SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM items GROUP BY ReceiptNumber HAVING SUM(goods.Price) > 100);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: On what dates did the bakery sell more than 100 dollars worth of goods in total?SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM items GROUP BY ReceiptNumber HAVING SUM(goods.Price) > 100);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many drivers are there?SELECT country.Driver_ID FROM driver WHERE country.Country = 'United States' AND age > 30
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the total number of drivers.SELECT country.Driver_ID FROM driver WHERE country.Country = 'United States' AND driver.Age > 30;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the number of drivers whose points are greater than 150 for each make.SELECT driver.Driver_ID, COUNT(driver.Make) AS Count FROM driver JOIN team_driver ON driver.Driver_ID = team_driver.Driver_ID WHERE driver.Points > 150 GROUP BY driver.Make;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many drivers receive points greater than 150 for each make? Show the make and the count.SELECT team_driver.Driver_ID, driver.Make, COUNT(driver.Points) AS Count FROM team_driver JOIN driver ON team_driver.Driver_ID = driver.Driver_ID WHERE driver.Points > 150 GROUP BY driver.Make;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the average age of drivers for each make.SELECT driver.Driver_ID, driver.Make, AVG(driver.Age) AS Average_Age FROM driver GROUP BY driver.Make;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the average age of drivers for each make? Return the average age and make.SELECT Driver_ID, Driver, Age, Make FROM driver WHERE Driver_ID IN (SELECT Team_ID FROM team_driver) GROUP BY Make ORDER BY Make ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the average laps of all the drivers who are younger than 20?SELECT driver.Driver_ID, AVG(driver.Laps) AS Average_Laps FROM driver WHERE driver.Age < 20 GROUP BY driver.Driver_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Compute the average laps of drivers under the age of 20.SELECT driver.Driver_ID, AVG(driver.Laps) AS Average_Laps FROM driver WHERE driver.Age < 20 GROUP BY driver.Driver_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the managers and sponsors of teams? Sort the results by Car Owners.SELECT team.Team_ID, team.Manager, team.Sponsor FROM team ORDER BY car_owner;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the manager and sponsor for each team and order them by the car owner.SELECT team.Team_ID, team.Manager, team.Sponsor FROM team ORDER BY Car_Owner;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the make that has more than one team.SELECT Team_ID FROM team WHERE Make = 'Ferrari' AND Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(DISTINCT Driver_ID) > 1);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which make has more than one team?SELECT team.Team_ID, team.Make FROM team WHERE team.Make IN (SELECT team.Make FROM team GROUP BY team.Make HAVING COUNT(team.Make) > 1);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the makes of the teams with car owner "Buddy Arrington"?SELECT team.Team_ID, team.Make FROM team INNER JOIN team_driver ON team.Team_ID = team_driver.Team_ID WHERE team_car_owner = 'Buddy Arrington';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the make of the team whose car owner is "Buddy Arrington".SELECT team.Team_ID, team.Make FROM team INNER JOIN team_driver ON team.Team_ID = team_driver.Team_ID WHERE team_car_owner = 'Buddy Arrington' GROUP BY team.Team_ID HAVING COUNT(*) > 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the maximum and minimum points of drivers.SELECT Driver_ID, MAX(Points), MIN(Points) FROM driver GROUP BY Driver_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the highest and lowest points of drivers.SELECT Driver_ID, MAX(Points) as Max_Points, MIN(Points) as Min_Points FROM driver GROUP BY Driver_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many drivers have points smaller than 150?SELECT country.Driver_ID FROM driver WHERE country.Country = 'United Kingdom' AND driver.Points < 150;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Count the number of drivers whose points are below 150.SELECT country.Driver_ID FROM driver WHERE country.Country = 'United States' AND driver.Points < 150;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List all the driver names in ascending order of age.SELECT Driver_ID, Driver FROM driver ORDER BY Age ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Sort the driver names by age in ascending order.SELECT Driver_ID, Driver FROM driver ORDER BY Age ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List all the driver names in descending order of points.SELECT Driver_ID, Driver FROM driver ORDER BY Points DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the list of drivers ordered by points in descending order?SELECT Driver_ID FROM driver WHERE Points IS NOT NULL ORDER BY Points DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Please show the names of drivers, and countries they are from.SELECT driver.Driver_ID, country.Country FROM driver INNER JOIN team_driver ON driver.Driver_ID = team_driver.Driver_ID INNER JOIN team ON team_driver.Team_ID = team.Team_ID INNER JOIN country ON driver.Country = country.Country_Id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: For each driver, return his or her name and country.SELECT Driver_ID, Driver, Country FROM driver;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the maximum points of the drivers from countries with capital "Dublin"SELECT driver.Driver_ID, MAX(driver.Points) FROM driver JOIN country ON driver.Country = country.Country_Id WHERE country.Capital = 'Dublin' GROUP BY driver.Driver_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the maximum points of the drivers from a country whose capital is "Dublin"?SELECT driver.Driver_ID, MAX(driver.Points) FROM driver JOIN team_driver ON driver.Driver_ID = team_driver.Driver_ID JOIN team ON team_driver.Team_ID = team.Team_ID WHERE country.Country = 'Ireland' GROUP BY driver.Driver_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the average age of drivers from countries with official native language "English"SELECT Driver_ID, Driver, Age FROM driver WHERE Country IN (SELECT Country_Id FROM country WHERE Official_native_language = 'English') ORDER BY Age DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the average age of the drivers from the countries that use "English" as official native language.SELECT Driver_ID, AVG(Age) AS Average_Age FROM driver WHERE Country IN (SELECT Country_Id FROM country WHERE Official_native_language = 'English') GROUP BY Driver_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the countries that have drivers with points larger than 150?SELECT country.Driver_ID FROM driver WHERE Driver.Points > 150;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find all the countries where some drivers have points above 150.SELECT country.Driver_ID FROM driver WHERE Driver_ID IN (SELECT team_driver.Driver_ID FROM team_driver WHERE team_driver.Team_ID IN (SELECT team.Team_ID FROM team WHERE team.Make = 'Ferrari') AND team_driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Points > 150)) GROUP BY country.Country_Id HAVING COUNT(country.Country_Id) > 0;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the capital of the country where the driver with the most points is from?SELECT country.Driver_ID, country.Capital FROM driver INNER JOIN team_driver ON driver.Driver_ID = team_driver.Driver_ID INNER JOIN country ON driver.Country = country.Country_Id WHERE driver.Points = (SELECT MAX(driver.Points) FROM driver);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which country is the driver with the highest points from? Give me the capital of the country.SELECT country.Team_ID, team.Team, team.Make, team.Manager, team.Sponsor, team.Car_Owner, driver.Driver_ID, driver.Driver, driver.Country, driver.Age, driver.Car_#, driver.Make, driver.Points, driver.Laps, driver.Winnings FROM team INNER JOIN team_driver ON team.Team_ID = team_driver.Team_ID INNER JOIN driver ON team_driver.Driver_ID = driver.Driver_ID WHERE (driver.Points > ALL (SELECT driver.Points FROM driver)) AND (driver.Country = (SELECT country.Capital FROM country));
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List each make with the number of drivers with that make.SELECT team.Driver_ID, driver.Make FROM team INNER JOIN driver ON team.Team_ID = driver.Team_ID GROUP BY team.Driver_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: For each make, return the make and the count of drivers with that make.SELECT team.Driver_ID, driver.Make FROM team INNER JOIN driver ON team.Team_ID = driver.Team_ID WHERE driver.Make = 'Mercedes' ORDER BY driver.Make ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the make that are associated with most drivers.SELECT team.Driver_ID, driver.Make FROM team INNER JOIN driver ON team.Team_ID = driver.Team_ID GROUP BY team.Driver_ID ORDER BY COUNT(driver.Make) DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which make does the most drivers have?SELECT team.Driver_ID, driver.Make FROM team INNER JOIN team_driver ON team.Team_ID = team_driver.Team_ID INNER JOIN driver ON team_driver.Driver_ID = driver.Driver_ID GROUP BY team.Driver_ID ORDER BY COUNT(driver.Make) DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the driver makes that are associated with at least three drivers.SELECT Driver_ID FROM driver WHERE Make IN (SELECT DISTINCT Make FROM team_driver GROUP BY Make HAVING COUNT(DISTINCT Team_ID) >= 3);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which make is associated with 3 or more drivers?SELECT team.Driver_ID, driver.Make FROM team INNER JOIN team_driver ON team.Team_ID = team_driver.Team_ID INNER JOIN driver ON team_driver.Driver_ID = driver.Driver_ID WHERE (driver.Make IN (SELECT Make FROM driver GROUP BY Make HAVING COUNT(Make) >= 3)) ORDER BY team.Driver_ID ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the names of teams that do not have any drivers.SELECT Team_ID FROM team WHERE NOT EXISTS (SELECT * FROM team_driver WHERE team.Team_ID = team_driver.Team_ID);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which team does not have drivers?SELECT Team_ID FROM team WHERE Driver_ID NOT IN (SELECT Driver_ID FROM team_driver);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which country has both drivers with make "Dodge" and drivers with make "Chevrolet"?SELECT country.Driver_ID FROM driver WHERE Driver.make = 'Dodge' AND Driver.make = 'Chevrolet';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the countries in which there are both drivers with make "Dodge" and drivers with make "Chevrolet".SELECT country.Driver_ID FROM driver WHERE Driver.Make = 'Dodge' AND Driver.Make = 'Chevrolet';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show total and average points of all drivers.SELECT driver.Driver_ID, SUM(driver.Points) AS Total_Points, AVG(driver.Points) AS Average_Points FROM driver GROUP BY driver.Driver_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the total and average points of drivers?SELECT driver.Driver_ID, SUM(driver.Points) AS Total_Points, AVG(driver.Points) AS Average_Points FROM driver GROUP BY driver.Driver_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the countries where no driver come from.SELECT country.Driver_ID FROM country WHERE NOT EXISTS (SELECT * FROM driver WHERE driver.Country = country.Country_Id);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which countries do not have any drivers?SELECT country.Driver_ID FROM driver WHERE Driver_ID NOT IN (SELECT team_driver.Driver_ID FROM team_driver);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the manager and sponsor of the team that has the most drivers?SELECT team.Team_ID, team.Manager, team.Sponsor FROM team INNER JOIN (SELECT Team_ID, COUNT(*) AS num_drivers FROM team_driver GROUP BY Team_ID ORDER BY num_drivers DESC LIMIT 1) as td ON team.Team_ID = td.Team_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the manager and sponsor of the team that has the most drivers.SELECT team.Team_ID, team.Manager, team.Sponsor FROM team INNER JOIN team_driver ON team.Team_ID = team_driver.Team_ID GROUP BY team.Team_ID HAVING COUNT(team_driver.Driver_ID) > (SELECT MAX(COUNT(driver.Driver_ID)) FROM driver INNER JOIN team_driver ON driver.Driver_ID = team_driver.Driver_ID);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the manager and car owner of the team that has at least 2 drivers?SELECT team.Team_ID, team.Manager, team.Car_Owner FROM team INNER JOIN team_driver ON team.Team_ID = team_driver.Team_ID WHERE (team_driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Country IN (SELECT country.Country_Id FROM country WHERE country.Official_native_language = 'English'))) GROUP BY team.Team_ID HAVING COUNT(team_driver.Driver_ID) >= 2;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the team with two or more drivers and return the the manager and car owner of the team.SELECT team.Team_ID, team.Manager, team.Car_owner FROM team INNER JOIN team_driver ON team.Team_ID = team_driver.Team_ID WHERE (team_driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver INNER JOIN team_driver ON driver.Driver_ID = team_driver.Driver_ID GROUP BY driver.Driver_ID HAVING COUNT(driver.Driver_ID) > 1)) ORDER BY team.Team_ID ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many institutions are there?SELECT Institution_ID FROM institution
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Count the number of institutions.SELECT Institution_ID FROM institution
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the names of institutions in ascending alphabetical order.SELECT institution.Institution_ID, institution.Name FROM institution ORDER BY institution.Name ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of institutions, ordered alphabetically?SELECT institution.Institution_ID, institution.Name FROM institution ORDER BY institution.Name ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the names of institutions in ascending order of founded year.SELECT institution.Institution_ID, institution.Name FROM institution ORDER BY Founded ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of institutions, ordered by the years in which they were founded?SELECT institution.Institution_ID, institution.Name FROM institution ORDER BY Founded ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the cities and provinces of institutions?SELECT institution.Institution_ID, institution.City, institution.Province FROM institution WHERE institution.Institution_ID IN (SELECT Championship.Institution_ID FROM Championship);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the cities and provinces of institutions.SELECT institution.Institution_ID, institution.City, institution.Province FROM institution WHERE institution.Team = 'Rugby' AND institution.Founded > 1900 ORDER BY institution.Institution_ID ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the maximum and minimum enrollment of all institutions?SELECT Institution_ID, MAX(Enrollment) AS Max_Enrollment, MIN(Enrollment) AS Min_Enrollment FROM institution GROUP BY Institution_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the maximum and minimum enrollment across all institutions.SELECT Institution_ID, MAX(Enrollment), MIN(Enrollment) FROM institution GROUP BY Institution_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the affiliations of institutions that are not in city "Vancouver"?SELECT institution.Nickname, affiliation.Affiliation FROM institution JOIN affiliation ON institution.Institution_ID = affiliation.Institution_ID WHERE institution.City!= 'Vancouver' ORDER BY institution.Nickname ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the affiliations of instituions that are not in the city of Vancouver.SELECT institution.Nickname FROM institution WHERE institution.City!= 'Vancouver' AND institution.Affiliation IS NOT NULL;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the stadiums of institutions in descending order of the capacity.SELECT institution.Institution_ID, stadium.Stadium FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID JOIN stadium ON institution.Institution_ID = stadium.Institution_ID ORDER BY Capacity DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the stadiums of institutions, ordered by capacity descending.SELECT institution.Institution_ID, stadium.Stadium FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID JOIN stadium ON institution.Institution_ID = stadium.Institution_ID ORDER BY Capacity DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the stadium of the institution with the largest enrollment?SELECT Institution_ID, Stadium FROM institution WHERE Enrollment = (SELECT MAX(Enrollment) FROM institution);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Give the stadium of the institution which is the greatest enrollment.SELECT Institution_ID, Stadium FROM institution WHERE Enrollment = (SELECT MAX(Enrollment) FROM institution);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names and nicknames of institutions?SELECT institution.Institution_ID, institution.Name, Championship.Nickname FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the names of institutions, as well as their nicknames.SELECT institution.Institution_ID, institution.Name, Championship.Nickname FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the nickname of the institution with the smallest enrollment?SELECT Nickname FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution ORDER BY Enrollment ASC LIMIT 1);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the nickname of the institution with the lowest enrollment.SELECT Nickname FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution ORDER BY Enrollment ASC LIMIT 1);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the names of institutions in descending order of the number of championships.SELECT institution.Institution_ID, institution.Name FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID ORDER BY Number_of_Championships DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of institutions, ordered descending by their number of championships?SELECT institution.Institution_ID, institution.Name FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID ORDER BY Number_of_Championships DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the names of institutions with at least one championship.SELECT institution.Institution_ID, institution.Name FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID WHERE Number_of_Championships > 0;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of institutions that have 1 or more championships?SELECT institution.Institution_ID, institution.Name FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID WHERE Number_of_Championships > 0;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the total number of championship of institution with public affiliation?SELECT Institution_ID, SUM(Number_of_Championships) AS Total_Number_of_Championships FROM Championship WHERE Affiliation = 'Public' GROUP BY Institution_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the total number of championships of institutions that have a Public affiliation.SELECT Institution_ID, SUM(Number_of_Championships) AS Total_Number_of_Championships FROM Championship GROUP BY Institution_ID HAVING Affiliation = 'Public' ORDER BY Total_Number_of_Championships DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are different types of affiliations of institutions and the corresponding number of institutions?SELECT Institution_ID, Affiliation, COUNT(*) AS Number_of_Institutions FROM institution GROUP BY Institution_ID, Affiliation ORDER BY Number_of_Institutions DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many institutions are there for each type of affiliation?SELECT institution.Nickname, COUNT(institution.Affiliation) AS Affiliations FROM institution GROUP BY institution.Nickname ORDER BY Affiliations DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the most common type of affiliation for institutions?SELECT Institution_ID, Affiliation FROM institution GROUP BY Institution_ID ORDER BY COUNT(Affiliation) DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the most common type of affiliation across all institutions.SELECT Institution_ID, Affiliation FROM institution GROUP BY Institution_ID ORDER BY COUNT(Affiliation) DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: In which years were more than one institution founded?SELECT Institution_ID FROM institution WHERE Founded IN (SELECT Founded FROM institution GROUP BY Founded HAVING COUNT(*) > 1);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the years in which more than 1 institution was founded, as well as the number of institutions founded in each of those.SELECT Institution_ID, COUNT(Institution_ID) AS Number_of_Institutions FROM institution GROUP BY Institution_ID HAVING COUNT(Institution_ID)>1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the nicknames of institutions in descending order of capacity.SELECT Nickname FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution ORDER BY Capacity DESC);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the nicknames of institutions, ordered descending by their capacities?SELECT Nickname FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution ORDER BY Capacity DESC);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the total enrollment of institutions in city `` Vancouver '' or `` Calgary ''?SELECT institution.Institution_ID, SUM(institution.Enrollment) AS Total_Enrollment FROM institution WHERE institution.City = 'Vancouver' OR institution.City = 'Calgary' GROUP BY institution.Institution_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return all the enrollments of institutions in either the city of Vancouver or the city of Calgary.SELECT institution.Institution_ID, enrollment
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the provinces that have both institutions founded before 1920 and institutions founded after 1950.SELECT institution.Institution_ID, institution.Name, institution.Province FROM institution WHERE institution.Founded < 1920 OR institution.Founded > 1950;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the provinces that have not only institutions founded before 1920, but also institutions founded after 1950?SELECT Institution_ID FROM institution WHERE Founded < 1920 AND Founded > 1950;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many distinct provinces are the institutions in?SELECT institution.Institution_ID, institution.Province FROM institution GROUP BY Province HAVING COUNT(Province) = 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Count the number of different provinces that have institutions.SELECT institution.Institution_ID, institution.Province FROM institution GROUP BY Province HAVING COUNT(*) > 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Select all details of all warehouses.SELECT Warehouses.Code, Warehouses.Location, Warehouses.Capacity FROM Warehouses;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is all the information about the warehouses?SELECT Warehouses.Code, Warehouses.Location, Warehouses.Capacity FROM Warehouses;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find all different contents stored in New York.SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York') GROUP BY Contents HAVING COUNT(*)=1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are all the different contents stored in boxes in New York?SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York') GROUP BY Contents HAVING COUNT(*) > 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Select contents of all boxes with a value larger than $150.SELECT Boxes.Contents FROM Boxes WHERE Boxes.Value > 150.0;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the contents of boxes with value greater than 150?SELECT Boxes.Contents FROM Boxes WHERE Boxes.Value > 150;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Select the warehouse code and the average value of the boxes in each warehouse.SELECT Warehouses.Code, AVG(Boxes.Value) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the average value of boxes for each warehouse?SELECT Warehouses.Code, AVG(Boxes.Value) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the average and total values of all boxes.SELECT Warehouse, AVG(Value), SUM(Value) FROM Boxes GROUP BY Warehouse;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the average and total values across all boxes?SELECT Warehouse, AVG(Value), SUM(Value)
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the average and total capacity of all warehouses.SELECT Warehouse, AVG(Capacity), SUM(Capacity)
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the average and total capacities across all warehouses?SELECT Warehouse, AVG(Capacity), SUM(Capacity)
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the average and maximum value for each different content.SELECT Contents, AVG(Value), MAX(Value) FROM Boxes GROUP BY Contents;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the average and maximum values for each type of content in boxes?SELECT Contents, AVG(Value), MAX(Value) FROM Boxes GROUP BY Contents;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the content that has the highest total values in all boxes.SELECT Contents FROM Boxes WHERE Code IN (SELECT Code FROM Boxes GROUP BY Code HAVING SUM(Value) = (SELECT MAX(SUM(Value)) FROM Boxes));
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the content with the greatest value across all boxes?SELECT Contents FROM Boxes WHERE Value = (SELECT MAX(Value) FROM Boxes);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Select the average value of all the boxes.SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the average value of boxes?SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Select all distinct contents in all the boxes.SELECT Contents FROM Boxes WHERE Contents IS DISTINCT FROM ALL(SELECT Contents FROM Boxes);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the different contents in boxes?SELECT Warehouses.Code, Warehouses.Location, Boxes.Contents FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the number of all distinct contents in all the boxes.SELECT Warehouses.Code, COUNT(DISTINCT Boxes.Contents) AS DistinctContents FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many different contents are stored in boxes?SELECT Warehouses.Code, COUNT(DISTINCT Boxes.Contents) AS CountOfContents FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find all distinct locations of warehouses.SELECT Warehouses.Code, Warehouses.Location FROM Warehouses GROUP BY Warehouses.Location HAVING COUNT(*) = 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the different locations of warehouses?SELECT Warehouses.Code, Warehouses.Location FROM Warehouses;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the code of boxes that are stored at the warehouses located at Chicago or New York.SELECT Boxes.Code FROM Warehouses WHERE Warehouses.Location = 'Chicago' OR Warehouses.Location = 'New York'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the codes of boxes stored in warehouses in either Chicago or New York?SELECT Boxes.Code FROM Warehouses 
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the total value of boxes in the warehouses located at Chicago or New York.SELECT Warehouses.Code, SUM(Boxes.Value) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Warehouses.Location IN ('Chicago', 'New York') GROUP BY Warehouses.Code;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the total value of boxes located in Chicago or New York?SELECT Warehouses.Code, SUM(Boxes.Value) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Warehouses.Location IN ('Chicago', 'New York') GROUP BY Warehouses.Code;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find all contents present in warehouses located in Chicago and those located in New York.SELECT Boxes.Contents FROM Warehouses 
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the contents that are stored in both Chicago and New York.SELECT Boxes.Contents FROM Boxes WHERE Boxes.Warehouse IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location = 'Chicago') AND Boxes.Warehouse IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location = 'New York');
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the type of contents that are not in the warehouses located at New York.SELECT Contents FROM Boxes WHERE Code NOT IN (SELECT Box.Code FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'New York');
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What types of contents cannot be found in warehouses in New York?SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York') EXCEPT SELECT DISTINCT Contents FROM Boxes;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the location of the warehouses which have contents Rocks but not Scissors.SELECT Warehouses.Code, Warehouses.Location FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents = 'Rocks' AND Boxes.Contents!= 'Scissors';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the locations of warehouses that have boxes containing Rocks but not Scissors?SELECT Warehouses.Code, Warehouses.Location FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents LIKE '%Rocks%' AND Boxes.Contents NOT LIKE '%Scissors%';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the warehouses which store contents Rocks or Scissors.SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location IN 
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the distinct warehouses that have boxes with Rocks or Scissors as contents?SELECT Warehouses.Code FROM Warehouses 
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the location of the warehouses which store contents Rocks and Scissors.SELECT Warehouses.Code, Warehouses.Location FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents IN ('Rocks', 'Scissors') ORDER BY Warehouses.Code ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the locations of warehouses in which boxes that contain Rocks and Scissors are kept?SELECT Warehouses.Code, Warehouses.Location FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents LIKE '%Rocks%' AND Boxes.Contents LIKE '%Scissors%';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the code and contents of all boxes sorted by their values.SELECT Boxes.Code, Boxes.Contents FROM Boxes ORDER BY Boxes.Value;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the codes and corresponding contents of all the boxes, ordered by their values?SELECT Boxes.Code, Boxes.Contents FROM Boxes ORDER BY Boxes.Value;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the code and contents of the box with the lowest value.SELECT Boxes.Code, Boxes.Contents FROM Boxes WHERE Boxes.Value = (SELECT MIN(Boxes.Value) FROM Boxes);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the code and contents for the box that has the smallest value?SELECT Boxes.Code, Boxes.Contents FROM Boxes WHERE Boxes.Value = (SELECT MIN(Boxes.Value) FROM Boxes);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the unique contents of all boxes whose value is higher than the average value of all boxes.SELECT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the different contents of boxes for which the value is higher than the average value across all boxes?SELECT Boxes.Contents FROM Boxes WHERE Boxes.Value > (SELECT AVG(Boxes.Value) FROM Boxes);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List all different types of contents ordered by contents.SELECT Warehouses.Code, Warehouses.Location, Warehouses.Capacity, Boxes.Contents, Boxes.Value FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse ORDER BY Boxes.Contents ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the different contents of boxes, ordered alphabetically?SELECT Contents FROM Boxes WHERE Code IN (SELECT DISTINCT Box FROM Boxes GROUP BY Box HAVING COUNT(*) > 1);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the code of all boxes whose value is higher than the value of any boxes with Rocks as content.SELECT Boxes.Code FROM Boxes WHERE Boxes.Value > (SELECT MAX(Boxes2.Value) FROM Boxes AS Boxes2 WHERE Boxes2.Contents = 'Rocks');
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the codes of boxes for which the value is greater than the value of any box that contains Rocks?SELECT Boxes.Code FROM Boxes WHERE Boxes.Value > (SELECT MAX(Boxes2.Value) FROM Boxes AS Boxes2 WHERE Boxes2.Contents = 'Rocks');
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the code and content of all boxes whose value is higher than the value of all boxes with Scissors as content.SELECT Boxes.Code, Boxes.Contents FROM Boxes WHERE Boxes.Value > (SELECT MAX(Boxes2.Value) FROM Boxes AS Boxes2 WHERE Boxes2.Contents = 'Scissors');
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the codes and corresponding contents of boxes for which their value is higher than the values of all boxes containing Scissors?SELECT Boxes.Code, Boxes.Contents FROM Boxes WHERE Boxes.Value > (SELECT MAX(Boxes2.Value) FROM Boxes AS Boxes2 WHERE Boxes2.Contents = 'Scissors') AND Boxes.Contents!= 'Scissors';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the total value of boxes stored in the warehouse with the largest capacity.SELECT Warehouses.Code, SUM(Boxes.Value) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code ORDER BY Warehouses.Capacity DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the total value of boxes kept in the warehouse with the greatest capacity?SELECT Warehouses.Code, SUM(Boxes.Value) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code ORDER BY Warehouses.Capacity DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Select the warehouse code and the average value of the boxes only for those warehouses where the average value of the boxes is greater than 150.SELECT Warehouses.Code, AVG(Boxes.Value) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code HAVING AVG(Boxes.Value)>150;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the average values of boxes for each warehouse than has an average value greater than 150?SELECT Warehouses.Code, AVG(Boxes.Value) AS AverageValue FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code HAVING AVG(Boxes.Value) > 150;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the total value and number of boxes for each content type.SELECT Contents, SUM(Value), COUNT(*) FROM Boxes GROUP BY Contents;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: For each content, what is the total value and number of boxes?SELECT Contents, SUM(Value), COUNT(*) FROM Boxes GROUP BY Content;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the total, average, and maximum capacity for different locations.SELECT Warehouses.Code, SUM(Warehouses.Capacity), AVG(Warehouses.Capacity), MAX(Warehouses.Capacity)
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: For each location, what are the total, average, and maximum capacities of warehouses?SELECT Warehouses.Code, SUM(Warehouses.Capacity), AVG(Warehouses.Capacity), MAX(Warehouses.Capacity)
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the total capacity of all warehouse locations.SELECT Warehouses.Code, SUM(Warehouses.Capacity) AS TotalCapacity FROM Warehouses GROUP BY Warehouses.Code;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the total capacity of all warehouses?SELECT Warehouses.Code, SUM(Warehouses.Capacity) AS TotalCapacity FROM Warehouses GROUP BY Warehouses.Code;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the value of the most expensive boxes saved in each warehouse location.SELECT Warehouses.Code, Warehouses.Location, MAX(Boxes.Value) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code, Warehouses.Location;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: For each warehouse location, what is the value of the most expensive box?SELECT Warehouses.Code, Warehouses.Location, MAX(Boxes.Value) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code, Warehouses.Location;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Select the warehouse codes along with the number of boxes in each warehouse.SELECT Warehouses.Code, COUNT(Boxes.Code) AS BoxCount FROM Warehouses LEFT JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code ORDER BY BoxCount DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many boxes are there with each warehouse?SELECT Warehouses.Code, COUNT(Boxes.Code) AS BoxCount FROM Warehouses LEFT JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the number of different locations where Rocks are stored.SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location IN 
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: In how many different warehouses are Rocks stored within boxes?SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Code IN (SELECT Boxes.Warehouse FROM Boxes WHERE Boxes.Contents = 'Rocks');
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Select the code of each box, along with the name of the city the box is located in.SELECT Boxes.Code, Warehouses.Location FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the codes of all boxes, as well as the locations of the warehouses they are in?SELECT Boxes.Code, Warehouses.Location FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Select the codes of all the boxes located in Chicago.SELECT Boxes.Code FROM Boxes WHERE Boxes.Warehouse = 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the codes of boxes stored in warehouses in Chicago?SELECT Boxes.Code FROM Warehouses WHERE Warehouses.Location = 'Chicago' AND Warehouses.Code = Boxes.Warehouse;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the number of boxes saved in each warehouse.SELECT Warehouses.Code, COUNT(Boxes.Code) AS NumBoxes FROM Warehouses LEFT JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many boxes are stored in each warehouse?SELECT Warehouses.Code, COUNT(Boxes.Code) AS BoxCount FROM Warehouses LEFT JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the number of distinct types of contents in each warehouse.SELECT Warehouse, COUNT(DISTINCT Contents) AS DistinctContentsCount FROM Boxes GROUP BY Warehouse;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many different types of contents are stored in each warehouse?SELECT Warehouses.Code, COUNT(DISTINCT Boxes.Contents) AS DifferentTypesOfContents FROM Warehouses LEFT JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Select the codes of all warehouses that are above capacity.SELECT Code FROM Warehouses WHERE Capacity > (SELECT SUM(Value) FROM Boxes WHERE Warehouse = Warehouses.Code);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the codes of warehouses that have more boxes than their capacity?SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Capacity < (SELECT COUNT(*) FROM Boxes WHERE Boxes.Warehouse = Warehouses.Code);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the total values of boxes that are not in the warehouses located at Chicago.SELECT Boxes.Value FROM Boxes WHERE Boxes.Warehouse NOT IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location = 'Chicago');
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the total value of boxes contained in any location but Chicago?SELECT Warehouses.Code, SUM(Boxes.Value) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Warehouses.Location!= 'Chicago' GROUP BY Warehouses.Code;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show name, city, and state for all universities in  alphabetical order of university name.SELECT University_ID, University_Name, City, State FROM university ORDER BY University_Name ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names, cities, and states of all universities in alphabetical order (by name of the university).SELECT University_ID, University_Name, City, State FROM university ORDER BY University_Name ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many universities are in Illinois or Ohio?SELECT University_ID FROM university WHERE State = 'Illinois' OR State = 'Ohio';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the total number of universities located in Illinois or Ohio?SELECT University_ID FROM university WHERE State = 'Illinois' OR State = 'Ohio';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the maximum, average, and minimum enrollment for universities?SELECT University_ID, MAX(Enrollment), AVG(Enrollment), MIN(Enrollment) FROM university GROUP BY University_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the maximum, average, and minimum enrollment for all universities?SELECT University_ID, MAX(Enrollment), AVG(Enrollment), MIN(Enrollment) FROM university GROUP BY University_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List team name for all universities with enrollments above the average.SELECT University_ID, Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of all teams from universities that have more people enrolled than average?SELECT University_ID, Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show all home conferences.SELECT University_ID, Home_Conference FROM university;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the different home conferences from the university table?SELECT University_ID, Home_Conference FROM university GROUP BY University_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show all home conferences and the number of universities in each conference.SELECT University_ID, Home_Conference, COUNT(University_ID) AS num_universities FROM university GROUP BY Home_Conference ORDER BY num_universities DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: For every home conference, how many universities attended that conference?SELECT University_ID, COUNT(*) AS num_universities FROM university GROUP BY University_ID HAVING Home_Conference IS NOT NULL;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which state has most number of universities?SELECT University_ID, State FROM university GROUP BY State ORDER BY COUNT(University_ID) DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the state with the most universities?SELECT university.University_ID, university.State FROM university GROUP BY university.State ORDER BY COUNT(university.University_ID) DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show all home conferences with average enrollment of universities above 2000.SELECT University_ID, Home_Conference, AVG(Enrollment) AS Average_Enrollment FROM university GROUP BY Home_Conference HAVING AVG(Enrollment)>2000 ORDER BY Average_Enrollment DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the home conferences that have an average university enrollment above 2000?SELECT University_ID, Home_Conference FROM university WHERE Enrollment > 2000 GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which conference has the least number of total enrollment?SELECT University_ID, City, State, Team_Name, Affiliation, Enrollment, Home_Conference FROM university WHERE Home_Conference = (SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING MIN(Enrollment));
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the home conferences with the fewest number of people enrolled?SELECT University_ID, City, State, Team_Name, Affiliation, Enrollment, Home_Conference FROM university WHERE Home_Conference IN (SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM university GROUP BY Home_Conference));
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List all major name and major code in the order of their major codeSELECT Major_ID,Major_Name FROM major ORDER BY Major_Code ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names and codes for all majors ordered by their code?SELECT Major_ID, Major_Name, Major_Code FROM major ORDER BY Major_Code ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show all majors and major ranks for the university with name Augustana College.SELECT major.Major_ID, major.Major_Name, major_ranking.Rank FROM major INNER JOIN major_ranking ON major.Major_ID = major_ranking.Major_ID WHERE university.University_Name = 'Augustana College';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the ranks and names of all majors at Augustana College?SELECT major.Major_ID, major.Major_Name FROM major JOIN major_ranking ON major.Major_ID = major_ranking.Major_ID WHERE university.University_Name = 'Augustana College' ORDER BY major.Major_ID ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the name, city, state of the university with a rank 1 on Accounting major?SELECT University_ID, University_Name, City, State FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank = 1) AND Major_ID IN (SELECT Major_ID FROM major_ranking WHERE Rank = 1 AND Major_Name = 'Accounting') ORDER BY University_ID ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the name, city, and state of the university with number 1 ranked Accounting major?SELECT University_ID, Major_ID FROM major_ranking WHERE Rank = 1 AND Major_Name = 'Accounting';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the name of the university that has most number of majors with rank 1?SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID HAVING COUNT(*) > (SELECT MAX(COUNT(*)) FROM major_ranking);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the name of the university with the most majors ranked number 1?SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID HAVING COUNT(*) > (SELECT MAX(COUNT(*)) FROM major_ranking);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show all university names without a major with rank 1?SELECT University_ID, University_Name FROM university WHERE University_ID NOT IN (SELECT Major_ID FROM major_ranking WHERE Rank = 1);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of all universities without any majors ranked number 1?SELECT University_ID, University_Name FROM university WHERE University_ID NOT IN (SELECT Major_ID FROM major_ranking WHERE Rank = 1);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show all university names with both major Accounting and major Urban Education.SELECT University_ID, University_Name FROM university WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Urban Education');
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of all universities that have both Accounting and Urban Education majors?SELECT University_ID, University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID = 1 OR Major_ID = 2);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the name and overall ranking of universities in Wisconsin state?SELECT university.University_ID, university.University_Name, overall_ranking.Rank FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE university.State = 'Wisconsin' ORDER BY overall_ranking.Rank ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the name and rank of every university in Wisconsin?SELECT University_ID, University_Name, Rank FROM overall_ranking INNER JOIN university ON overall_ranking.University_ID = university.University_ID WHERE State = 'Wisconsin' ORDER BY Rank ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the university name with highest research point?SELECT University_ID, University_Name FROM overall_ranking WHERE Reputation_point = (SELECT MAX(Reputation_point) FROM overall_ranking);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the name of the university with the most research points?SELECT University_ID, Reputation_point, Research_point, Citation_point, Total FROM overall_ranking ORDER BY Total DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List all university names in ascending order of their reputation points.SELECT University_ID, University_Name FROM overall_ranking ORDER BY Reputation_point ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of all universities in ascending order of reputation points?SELECT University_ID, University_Name FROM university ORDER BY Reputation_point ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the name of university with major Accounting ranked 3 or above?SELECT University_ID, Major_ID FROM major_ranking WHERE Rank >= 3;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of the university with an Accounting major ranked 3 or higher?SELECT University_ID, Major_ID FROM major_ranking WHERE Rank >= 3 AND Major_Name = 'Accounting';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the total enrollment of universities with a overall rank 5 or below?SELECT university.University_ID, SUM(overall_ranking.Enrollment) AS Total_Enrollment FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE overall_ranking.Rank <= 5 GROUP BY university.University_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the total number of students enrolled in an university with a rank of 5 or below?SELECT University_ID, SUM(Enrollment) AS Total_Students FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE Rank <= 5 GROUP BY University_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the name and Citation point of the universities whose reputation points are top 3 and above.SELECT University_ID, Reputation_point FROM overall_ranking WHERE Rank <= 3 AND Reputation_point > 0 ORDER BY Reputation_point DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the name and citation point of the unversities with the top 3 reputation points?SELECT University_ID, Major_ID FROM major_ranking WHERE Rank = 1 ORDER BY Reputation_point DESC LIMIT 3;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: which states do have more than two universities with enrollment smaller than 3000?SELECT University_ID FROM university WHERE State IN (SELECT State FROM university GROUP BY State HAVING COUNT(*) > 2) AND Enrollment < 3000;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the states that have more than 2 universities with an enrollment less than 3000?SELECT University_ID FROM university WHERE Enrollment < 3000;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the titles of movies that don’t have any rating.SELECT Movies.Code, Movies.Title FROM Movies WHERE Movies.Rating IS NULL;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of movies that do not have any ratings?SELECT Movies.Name FROM Movies WHERE Movies.Rating IS NULL;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the names of movies whose rating is ‘G’.SELECT Movies.Name FROM Movies WHERE Movies.Rating = 'G'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are names of movies that have a 'G' ratings?SELECT Movies.Name FROM Movies WHERE Movies.Rating = 'G'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the title of the movie that is played in the Odeon theater.SELECT Movies.Code, Movies.Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name = 'Odeon'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the movie titles for ones that are played in the Odeon theater?SELECT Movies.Code, Movies.Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name = 'Odeon'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the names of movies that are played in any theater and the name of the corresponding theater.SELECT Movies.Name, MovieTheater.Name FROM Movies INNER JOIN MovieTheater ON Movies.Code = MovieTheater.Movie;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of the movies that are played in any theater and the name of the corresponding theater?SELECT Movies.Name FROM Movies WHERE Movies.Code = MovieTheater.Movie AND MovieTheater.Name = 'Cineplex'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the number of movies whose rating is ‘G’.SELECT Movies.Code FROM Movies WHERE Movies.Rating = 'G';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many movies had a 'G' rating?SELECT Movies.Code FROM Movies WHERE Movies.Rating = 'G';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many movies are playing across all theaters?SELECT Movies.Code FROM Movies WHERE Movies.Rating = 'PG' AND Movies.Title LIKE '%Star%' ORDER BY Movies.Code DESC LIMIT 1 OFFSET 2;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many movies are playing in theaters?SELECT Movies.Code FROM Movies WHERE Movies.Rating = 'PG' AND EXISTS(SELECT * FROM MovieTheaters WHERE MovieTheaters.Movie = Movies.Code);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many distinct movies are on in theaters?SELECT Movies.Code FROM Movies WHERE Movies.Rating = 'PG' AND EXISTS(SELECT * FROM MovieTheaters WHERE MovieTheaters.Movie = Movies.Code);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many different movies are playing?SELECT Movies.Code FROM Movies WHERE Movies.Rating = 'PG' AND Movies.Title LIKE '%Star%' OR Movies.Title LIKE '%War%';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many distinct movie theaters are there?SELECT Name FROM MovieTheaters WHERE Code IN (SELECT DISTINCT Movie FROM MovieTheaters);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many different movie theaters exist?SELECT Name FROM MovieTheaters WHERE Code IN (SELECT DISTINCT Movie FROM MovieTheaters);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the rating of the movie whose name includes the word ‘Citizen’.SELECT Movies.Code, Movies.Title, Movies.Rating FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE Movies.Title LIKE '%Citizen%';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the rating of the movie what has a name including a word like 'Citizen'?SELECT Movies.Code, Movies.Title, Movies.Rating FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE Movies.Title LIKE '%Citizen%';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the name of the cinemas that are playing movies with either rating ‘G’ or rating ‘PG’.SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G' OR Rating = 'PG') ORDER BY Name ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of the movie theaters that are playing 'G' or 'PG' rated movies?SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G' OR Rating = 'PG')
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the name of the movies that are played in either cinema Odeon or Imperial.SELECT Movies.Code, Movies.Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name IN ('Odeon', 'Imperial');
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the titles of all the movies that played at the Odeon or Imperial theater?SELECT Movies.Code, Movies.Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name IN ('Odeon', 'Imperial');
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the name of the movie that is on in both Odeon and Imperial theaters.SELECT Movies.Code, Movies.Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name IN ('Odeon', 'Imperial') ORDER BY Movies.Code ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What movie is playing at both the Odeon and Imperial theater?SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon' AND Name = 'Imperial'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the name of all movies that are not played in Odeon theater.SELECT Movies.Code, Movies.Title FROM Movies WHERE Movies.Code NOT IN (SELECT MovieTheaters.Movie FROM MovieTheaters WHERE MovieTheaters.Name = 'Odeon')
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of every movie that is not playing at the Odeon theater?SELECT Movies.Name FROM Movies WHERE Movies.Code!= MovieTheater.Movie AND MovieTheater.Name = 'Odeon'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List in alphabetical order the titles of all movies.SELECT Movies.Code, Movies.Title FROM Movies ORDER BY Movies.Title ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the movie names in alphabetical order?SELECT Movies.Code, Movies.Title FROM Movies ORDER BY Movies.Title ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the titles of all movies sorted by their ratings.SELECT Movies.Code, Movies.Title FROM Movies ORDER BY Movies.Rating DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the movie names sorted by rating?SELECT Movies.Code, Movies.Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie ORDER BY Movies.Rating DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the name of the theater that is playing the most number of movies.SELECT Name FROM MovieTheaters WHERE Code IN (SELECT Movie FROM Movies GROUP BY Movie ORDER BY COUNT(Movie) DESC LIMIT 1);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the name of the theater playing the most movies?SELECT Name FROM MovieTheaters WHERE Code IN (SELECT Movie FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(Movie) DESC LIMIT 1);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the name of the movie that is played in the most number of theaters.SELECT Movies.Code, Movies.Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE Movies.Rating = 'PG' AND MovieTheaters.Name = 'Cineplex'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the name of the film playing at the most number of theaters?SELECT Name FROM MovieTheaters WHERE Code IN (SELECT Movie FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(Movie) DESC LIMIT 1);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the number of movies in each rating.SELECT Movies.Code, COUNT(Movies.Rating) AS Count FROM Movies GROUP BY Movies.Code ORDER BY Movies.Code ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many movies exist for each rating?SELECT Movies.Code, Movies.Title, Movies.Rating FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE Movies.Rating IS NOT NULL GROUP BY Movies.Code, Movies.Title, Movies.Rating ORDER BY Movies.Code ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the number of movies whose rating is not null.SELECT Movies.Code, COUNT(Movies.Title) FROM Movies WHERE Movies.Rating IS NOT NULL GROUP BY Movies.Code;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many movies have a rating that is not null?SELECT Code FROM Movies WHERE Rating IS NOT NULL;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the name of theaters that has at least one movie playing.SELECT Name FROM MovieTheaters WHERE EXISTS(SELECT * FROM Movies WHERE MovieTheaters.Movie = Movies.Code);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of every theater with at least one movie playing?SELECT Name FROM MovieTheaters WHERE EXISTS(SELECT * FROM Movies WHERE MovieTheaters.Movie = Movies.Code);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Select the name of all movie theaters that are not currently showing a movie.SELECT Name FROM MovieTheaters WHERE Movie IS NULL;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of all cinemas not showing any movies?SELECT Name FROM MovieTheaters WHERE Movie IS NULL;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the name of the movie theaters that are playing the movies whose rating is ‘G’.SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G');
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of theaters playing 'G' rated movies?SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G');
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Select the title of all movies.SELECT Movies.Code, Movies.Title FROM Movies;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are all of the movie names?SELECT Movies.Code, Movies.Title FROM Movies WHERE Movies.Rating = 'PG-13' AND Movies.Movie IN (SELECT MovieTheaters.Movie FROM MovieTheaters);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show all the distinct ratings in the database.SELECT Movies.Code, Movies.Title, Movies.Rating FROM Movies;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the different movie ratings?SELECT Movies.Code, Movies.Title, Movies.Rating FROM Movies;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show all information of all unrated movies.SELECT MovieTheaters.Name, Movies.Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE Movies.Rating IS NULL;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is all the information about the unrated movies?SELECT MovieTheaters.Name, Movies.Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE Movies.Rating IS NULL;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the titles of movies not currently being shown in any theaters.SELECT Movies.Code, Movies.Title FROM Movies WHERE Movies.Code NOT IN (SELECT MovieTheater.Movie FROM MovieTheater);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of the movies not being shown in any theaters?SELECT Movies.Code, Movies.Title FROM Movies LEFT JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Movie IS NULL;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Who receieved the heaviest package?SELECT Recipient FROM Package WHERE Weight = (SELECT MAX(Weight) FROM Package);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the name of the client who received the heaviest package?SELECT Client.Recipient FROM Package WHERE Package.Weight = (SELECT MAX(Package.Weight) FROM Package);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the total weight of all the packages that customer Leo Wong sent?SELECT Weight FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') GROUP BY Weight HAVING SUM(Weight) > 1000
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the total weight for all packages that Leo Wong sent?SELECT Weight FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') AND Recipient!= (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the position of Amy Wong?SELECT Employee.Recipient FROM Employee WHERE Employee.Name = 'Amy Wong' AND Employee.Position IS NOT NULL;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What position does Amy Wong have?SELECT Employee.Recipient FROM Employee WHERE Employee.Name = 'Amy Wong' AND Employee.Position = 'Recruiter';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is Turanga Leela's salary and position?SELECT Employee.Sender, Employee.Recipient FROM Package WHERE Package.Contents = 'Turanga Leela' AND Package.Weight > 1000;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the salary and position of the employee named Turanga Leela?SELECT Employee.Sender, Employee.Recipient FROM Package WHERE Package.Contents = 'Bender' AND Package.Weight > 1000;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the average salary of all intern jobs?SELECT Employee.Sender, SUM(Package.Weight) AS TotalWeight FROM Employee JOIN Package ON Employee.EmployeeID = Package.Recipient GROUP BY Employee.Sender HAVING COUNT(*) > 1 ORDER BY TotalWeight DESC LIMIT 10;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the average salary of an intern?SELECT Employee.Sender, AVG(Package.Weight) AS AverageWeight FROM Employee JOIN Has_Clearance ON Employee.EmployeeID = Has_Clearance.Employee JOIN Package ON Package.Recipient = Has_Clearance.Level WHERE Employee.Position = 'Intern' GROUP BY Employee.Sender;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What level is Physician?SELECT Has_Clearance.Recipient, Has_Clearance.Level FROM Has_Clearance INNER JOIN Employee ON Has_Clearance.Employee = Employee.EmployeeID WHERE Employee.Name = 'Physician' AND Has_Clearance.Level > 0;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the clearance level of a physician?SELECT Employee.Sender, Employee.Recipient, Package.Contents, Package.Weight, Has_Clearance.Level FROM Employee INNER JOIN Package ON Employee.EmployeeID = Package.Sender INNER JOIN Has_Clearance ON Employee.EmployeeID = Has_Clearance.Employee AND Has_Clearance.Planet = Package.Shipment WHERE Employee.Position = 'Physician' ORDER BY Employee.Name ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List Package Number of all package sent by Leo Wong?SELECT Package.PackageNumber FROM Package WHERE Package.Recipient = 'Leo Wong' AND Package.Sender!= 'Leo Wong';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the number of all packages that Leo Wong sent?SELECT Package.PackageNumber FROM Package WHERE Package.Sender = 'Leo Wong';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List all package numbers received by Leo Wong?SELECT Package.PackageNumber FROM Package WHERE Package.Recipient = 'Leo Wong';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are all of the package numbers received by Leo Wong?SELECT Package.PackageNumber FROM Package WHERE Package.Recipient = 'Leo Wong';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List all package sent or received by Leo Wong.SELECT Package.PackageNumber FROM Package WHERE Package.Recipient = 'Leo Wong' OR Package.Sender = 'Leo Wong';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are all the different package numbers that Leo Wong sent or received?SELECT Package.PackageNumber FROM Package WHERE Package.Recipient = 'Leo Wong' OR Package.Sender = 'Leo Wong';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Count the number of packages sent by Ogden Wernstrom and received by Leo Wong.SELECT Package.PackageNumber FROM Package WHERE Package.Recipient = 'Leo Wong' AND Package.Sender = 'Ogden Wernstrom';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many packages sent by Ogden Wernstrom and received by Leo Wong?SELECT Package.PackageNumber FROM Package WHERE Package.Sender = (SELECT Client.AccountNumber FROM Client WHERE Client.Name = 'Ogden Wernstrom') AND Package.Recipient = (SELECT Client.AccountNumber FROM Client WHERE Client.Name = 'Leo Wong');
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the contents of package sent by John Zoidfarb?SELECT Package.Contents FROM Package WHERE Package.Sender = (SELECT Client.AccountNumber FROM Client JOIN Employee ON Client.Name = Employee.Name WHERE Employee.Name = 'John Zoidfarb') AND Package.Recipient = (SELECT Client.AccountNumber FROM Client JOIN Employee ON Client.Name = Employee.Name WHERE Employee.Name = 'John Zoidfarb');
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the package contents of all those sent by John Zoidfarb?SELECT Package.Contents FROM Package WHERE Package.Sender = (SELECT Client.AccountNumber FROM Client WHERE Client.Name = 'John Zoidfarb');
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the heaviest package sent by the clients which 'John' is part of their name? List package number and weight.SELECT Package.PackageNumber, Package.Weight FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber WHERE Client.Name LIKE '%John%' ORDER BY Package.Weight DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the package number and weight of the heaviest package that was sent by a client named John or something similar?SELECT Package.PackageNumber, Package.Weight FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber WHERE Client.Name LIKE 'John%' ORDER BY Package.Weight DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List package number and weight of top 3 lightest packages.SELECT Package.PackageNumber, Package.Weight FROM Package ORDER BY Package.Weight ASC LIMIT 3;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the package number and weight of the 3 lightest packages?SELECT Package.PackageNumber, Package.Weight FROM Package WHERE Package.Weight IN (SELECT MIN(Package.Weight) FROM Package);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Who sent most number of packages? List client name and number of packages sent by that client.SELECT Client.Recipient, COUNT(*) AS NumberOfPackagesSent FROM Package JOIN Client ON Package.Sender = Client.AccountNumber GROUP BY Client.Recipient ORDER BY NumberOfPackagesSent DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the name of the client who sent the most packages and how many were there?SELECT Client.Recipient, COUNT(*) AS NumberOfPackages FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID WHERE Package.Sender = Client.AccountNumber GROUP BY Client.Recipient ORDER BY NumberOfPackages DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Who received least number of packages? List client name and number of packages received by that client.SELECT Client.Recipient, COUNT(*) AS NumberOfPackagesReceived FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Client ON Package.Recipient = Client.AccountNumber GROUP BY Client.Recipient ORDER BY NumberOfPackagesReceived ASC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the smallest number of packages received and by whom?SELECT Package.PackageNumber, Client.Name FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber WHERE Package.Weight < 100 ORDER BY Package.PackageNumber ASC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Who sent more than one packages? List the client's name.SELECT Client.Recipient FROM Client WHERE Client.AccountNumber IN (SELECT Package.Recipient FROM Package GROUP BY Package.Recipient HAVING COUNT(Package.Recipient)>1);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the name of all clients who sent more than one package?SELECT Client.Recipient FROM Client WHERE EXISTS (SELECT * FROM Package WHERE Package.Recipient = Client.AccountNumber AND COUNT(Package.PackageNumber) > 1);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the Coordinates of planet Mars?SELECT Planet.Contents FROM Planet WHERE Planet.Name = 'Mars'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the coordinates of the planet named Mars?SELECT Planet.Contents FROM Planet WHERE Planet.Name = 'Mars';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List all Planets' names and coordinates in alphabetical order of name.SELECT Planet.PackageNumber, Package.Contents, Package.Weight FROM Package INNER JOIN Shipment ON Package.Shipment = Shipment.ShipmentID WHERE Shipment.Manager = 1 AND Shipment.Date > '2022-01-01'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names and coordinates of all planets in alphabetical order by name?SELECT Planet.PackageNumber, Package.Contents, Package.Weight, Package.Sender, Package.Recipient FROM Package INNER JOIN Shipment ON Package.Shipment = Shipment.ShipmentID WHERE Shipment.Manager = 1 AND Shipment.Date > '2022-01-01' ORDER BY Package.PackageNumber ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List all shipment id under Phillip J. Fry's management.SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Manager = (SELECT Employee.EmployeeID FROM Employee WHERE Employee.Name = 'Phillip J. Fry');
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the shipment IDs of every delivery managed by Phillip J Fry?SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Manager = (SELECT Employee.EmployeeID FROM Employee WHERE Employee.Name = 'Phillip J Fry');
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the dates of all shipments.SELECT Shipment.Shipment FROM Shipment
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the dates of every shipment in the database?SELECT Shipment.Shipment FROM Shipment
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List all shipment ids for the planet Mars.SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Planet = (SELECT PlanetID FROM Planet WHERE Planet.Name = 'Mars')
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the shipment ids for the planet Mars?SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Planet = (SELECT PlanetID FROM Planet WHERE Planet.Name = 'Mars')
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List all shipment ids for the planet Mars and under the management of Turanga Leela.SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Planet = (SELECT PlanetID FROM Planet WHERE Planet.Name = 'Mars') AND Shipment.Manager = (SELECT Employee.EmployeeID FROM Employee WHERE Employee.Name = 'Turanga Leela');
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the ids of all shipments on the planet Mars that are managed by Turanga Leela?SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Manager = (SELECT Employee.EmployeeID FROM Employee WHERE Employee.Name = 'Turanga Leela') AND Shipment.Planet = (SELECT Planet.PlanetID FROM Planet WHERE Planet.Name = 'Mars')
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List all shipment ids on the planet Mars or under the management of Turanga Leela.SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Planet = 'Mars' OR Shipment.Manager = 'Turanga Leela'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the ids for all shipments on the planet Mars that Turanga Leela manages?SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Manager = (SELECT Employee.EmployeeID FROM Employee WHERE Employee.Name = 'Turanga Leela') AND Shipment.Planet = (SELECT Planet.PlanetID FROM Planet WHERE Planet.Name = 'Mars')
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the total shipments in each planet? List the planet name and total shipments.SELECT Planet.PackageNumber, COUNT(*) AS TotalShipments FROM Package INNER JOIN Shipment ON Package.Shipment = Shipment.ShipmentID INNER JOIN Planet ON Shipment.Planet = Planet.PlanetID GROUP BY Planet.PlanetID ORDER BY TotalShipments DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many shipments take place on each planet?SELECT Planet.PackageNumber, COUNT(*) AS NumberOfShipments FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID GROUP BY Planet.PackagaeNumber;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which planet has most shipments? List the planet name.SELECT Planet.PackageNumber FROM Shipment WHERE Shipment.Manager = 'John' AND Shipment.Date > '2022-01-01';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the name of the planet with the most shipments?SELECT Planet.Recipient FROM Planet WHERE Planet.Name = 'Earth' AND Planet.Coordinates > 0 ORDER BY Planet.Coordinates DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the manger's name and number of shipments under his management.SELECT Employee.Recipient, COUNT(*) AS NumShipments FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID GROUP BY Shipment.Manager HAVING COUNT(*) > 1 ORDER BY NumShipments DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the number of shipments managed and names of each manager?SELECT Shipment.Shipment, COUNT(*) AS NumShipmentsManaged, Employee.Name FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID GROUP BY Shipment.Shipment ORDER BY Shipment.Shipment ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Calculate total weight of package shipped on Mars.SELECT Package.Weight FROM Package WHERE Shipment.Manager = (SELECT Employee.EmployeeID FROM Employee JOIN Has_Clearance ON Employee.EmployeeID = Has_Clearance.Employee AND Has_Clearance.Level >= 3 JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars') AND Package.Recipient IN (SELECT Client.AccountNumber FROM Client JOIN Package ON Client.AccountNumber = Package.Sender);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: what is the total weight of all packages shipped on Mars?SELECT Weight FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'));
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Calculate total weight of package shipped in each planet. show the name of each planet.SELECT Planet.PackageNumber, SUM(Package.Weight) AS TotalWeight FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID GROUP BY Planet.PlanetID ORDER BY TotalWeight DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: what is the total package weight for each planet, list its name?SELECT Planet.PackageNumber, SUM(Package.Weight) AS TotalWeight FROM Package INNER JOIN Shipment ON Package.Shipment = Shipment.ShipmentID INNER JOIN Planet ON Shipment.Planet = Planet.PlanetID GROUP BY Planet.PlanetID ORDER BY TotalWeight DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which planet has total weight of shipment greater than 30? List planet name.SELECT Planet.PackageNumber FROM Planet WHERE Planet.Name = 'Earth' AND Package.Weight > 30;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of all planets tjat have a total shipment weight greater than 30?SELECT Planet.PackageNumber FROM Package WHERE Package.Weight > 30;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List package number of package shipped in planet Omicron Persei 8 and sent by Zapp Brannigan.SELECT Package.PackageNumber FROM Package WHERE Package.Shipment IN (SELECT Shipment.ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Omicron Persei 8') AND Package.Sender IN (SELECT Client.AccountNumber FROM Client JOIN Employee ON Client.AccountNumber = Employee.EmployeeID WHERE Employee.Name = 'Zapp Brannigan');
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the number of packages sent by Zapp Brannigan and shipped on the Omicron Persei 8?SELECT Package.PackageNumber FROM Package WHERE Package.Sender = 'Zapp Brannigan' AND Package.Shipment IN (SELECT ShipmentID FROM Shipment WHERE Shipment.Planet = 'Omicron Persei 8');
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List package number of packages shipped in Omicron Persei 8 planet or sent by Zapp Brannigan.SELECT Package.PackageNumber FROM Package WHERE Package.Shipment IN (SELECT Shipment.ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Omicron Persei 8') OR Package.Sender IN (SELECT Client.AccountNumber FROM Client JOIN Employee ON Client.AccountNumber = Employee.EmployeeID WHERE Employee.Name = 'Zapp Brannigan')
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the number of packages shipped on Omicron Persei 8 planet or sent by Zapp Brannigan?SELECT Shipment.Shipment, COUNT(*) AS NumberOfPackages FROM Shipment JOIN Package ON Shipment.Shipment = Package.Shipment WHERE Shipment.Planet = 'Omicron Persei 8' OR Package.Sender = 'Zapp Brannigan' GROUP BY Shipment.Shipment;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which packages have weight between 10 and 30? List the package number and weight.SELECT Package.PackageNumber, Package.Weight FROM Package WHERE Package.Weight BETWEEN 10 AND 30;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the package numbers and weights that are between 10 and 30?SELECT Package.PackageNumber, Package.Weight FROM Package WHERE Package.Weight BETWEEN 10 AND 30;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which employees do not have clearance in Mars? List employee's name.SELECT Employee.Recipient FROM Employee WHERE Employee.EmployeeID IN (SELECT Has_Clearance.Employee FROM Has_Clearance WHERE Has_Clearance.Level = 'Mars' AND Has_Clearance.Employee NOT IN (SELECT Has_Clearance.Employee FROM Has_Clearance WHERE Has_Clearance.Level = 'Mars')) ORDER BY Employee.Recipient ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of all employees who don't have clearance on Mars?SELECT Employee.Recipient FROM Employee WHERE Employee.EmployeeID IN (SELECT Has_Clearance.Employee FROM Has_Clearance WHERE Has_Clearance.Level = 'Mars' AND Has_Clearance.Employee!= Has_Clearance.Recipient);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which employees have clearance in Omega III? List employees' name.SELECT Employee.Recipient FROM Has_Clearance WHERE Planet = 'Omega III'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of all employees with clearance on Omega III?SELECT Employee.Recipient FROM Employee WHERE Employee.EmployeeID IN (SELECT Has_Clearance.Employee FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Omega III') AND Employee.Position!= 'CEO' ORDER BY Employee.Recipient ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which planets that have exact one employee has clearance? List planets' name.SELECT Planet.PackageNumber FROM Package WHERE Package.PackageNumber = '1'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of all planets with one employee that has clearance?SELECT Planet.PackageNumber FROM Package WHERE Package.PackageNumber = '1' AND Package.Sender = '2'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which employees have salaries between 5000 and 10000? List employees' name.SELECT Employee.Recipient FROM Package WHERE Package.Weight > 10 AND Package.Sender = 'A1234'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the employees's names for those that have salaries between 5000 and 10000?SELECT Employee.Recipient FROM Employee WHERE Employee.Salary BETWEEN 5000 AND 10000;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the name of employees whose salary is above the average salary or more than 5000.SELECT Employee.Recipient FROM Package WHERE Package.Weight > 100 AND Package.Sender = 'A' OR Package.Recipient = 'B';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of all employees who have a salary greater than average or more than 5000?SELECT Employee.Recipient FROM Package WHERE Package.Sender = 'AccountNumber' AND Package.Recipient = 'AccountNumber';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the number of employees who do not have clearance in Mars.SELECT Employee.Recipient FROM Employee WHERE Employee.EmployeeID IN (SELECT Has_Clearance.Employee FROM Has_Clearance WHERE Has_Clearance.Level = 'Mars' AND Has_Clearance.Employee!= Has_Clearance.Recipient);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the number of employees that do not have clearance on Mars?SELECT Employee.Recipient FROM Employee WHERE Employee.EmployeeID = Has_Clearance.Employee AND Has_Clearance.Level > 0 AND Has_Clearance.Planet = 'Mars' GROUP BY Employee.Recipient HAVING COUNT(*)=0;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many games are there?SELECT Game_ID FROM game
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Count the number of games.SELECT Game_ID FROM game WHERE Units_sold_Millions > 1000
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the Title and Developers of all games ordered by units sold from large to small.SELECT game.Game_ID, ga.me.Title, ga.me.Developers FROM game ga.me ORDER BY ga.me.Units_sold_Millions DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the titles and developers of all games, sorted by units sold descending?SELECT game.Game_ID, ga.me.Title, ga.me.Developers FROM game ga.me ORDER BY ga.me.Units_sold_Millions DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the average units sold in millions of the games that are not developed by Nintendo?SELECT Game_ID, AVG(Units_sold_Millions) AS Average_units_sold_in_millions
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the average number of units sold in millions for games not developed by Nintendo.SELECT platform.Player_ID, AVG(game.Units_sold_Millions) AS Average_units_sold
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names and market districts of all platforms?SELECT platform.Player_ID, platform.Market_district FROM platform;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return all platform names and corresponding market districts.SELECT platform.Player_ID, platform.Platform_name, platform.Market_district FROM platform;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names and id of platforms whose download rank is 1?SELECT platform.Player_ID, plattform.Platform_name FROM platform WHERE Platform.Download_rank = 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the names and ids of all platforms with the download rank of 1.SELECT platform.Player_ID, plarform.Platform_name FROM platform WHERE Platform.Download_rank = 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the maximum and minimum rank of the year of players.SELECT Player_ID, MAX(Rank_of_the_year) AS Max_Rank, MIN(Rank_of_the_year) AS Min_Rank FROM player GROUP BY Player_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Give the maximum and minimum rank of the year across all players.SELECT Player_ID, MAX(Rank_of_the_year) AS Max_Rank, MIN(Rank_of_the_year) AS Min_Rank FROM player GROUP BY Player_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many players have rank of the year smaller than 3?SELECT Player_ID FROM player WHERE Rank_of_the_year < 3;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Count the number of players that have a rank of year of at most 3.SELECT Player_ID FROM player WHERE Rank_of_the_year <= 3;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List all player names in ascending alphabetical order.SELECT Player_ID, Player_name FROM player ORDER BY Player_name ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of all players in alphabetical order?SELECT Player_ID, Player_name FROM player ORDER BY Player_name ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List names and colleges of all players in descending order of rank of the year.SELECT player.Player_ID, player.Player_name, player.College FROM player WHERE player.Rank_of_the_year > 0 ORDER BY Rank_of_the_year DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names and colleges of all players, ordered by rank of year descending?SELECT player.Player_ID, player.Player_name, player.College FROM player INNER JOIN game_player ON player.Player_ID = game_player.Player_ID WHERE game_player.If_active = 1 ORDER BY player.Rank_of_the_year DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Please show the names and rank of players that have played the game titled "Super Mario World".SELECT player.Player_ID, plater.Rank_of_the_year FROM player AS plater JOIN game_player AS gp ON plater.Player_ID = gp.Player_ID JOIN game AS g ON gp.Game_ID = g.Game_ID WHERE g.Title = 'Super Mario World';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names and ranks of players who have played the game with the title "Super Mario World"?SELECT player.Player_ID, plater.Rank_of_the_year FROM player AS plater JOIN game_player AS gp ON plater.Player_ID = gp.Player_ID WHERE gp.Game_ID IN (SELECT Game_ID FROM game WHERE Title = 'Super Mario World') ORDER BY Rank_of_the_year DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the distinct developer of games played by players that go to college "Auburn".SELECT game.Game_ID, game.Developers FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID WHERE game_player.Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Auburn') GROUP BY game.Developers HAVING COUNT(game.Developers) > 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the different developers of games that are played by players that attend Auburn college?SELECT game.Game_ID, game.Title, game.Developers FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College = 'Auburn' GROUP BY game.Game_ID, game.Title, game.Developers HAVING COUNT(*) > 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the average number of units sold in millions of games played by players with position "Guard"?SELECT Game_ID, AVG(Units_sold_Millions) AS Average_units_sold
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the average number of units sold in millions among games played by players who have the position Guard.SELECT Game_ID, AVG(Units_sold_Millions) AS Average_units_sold_in_millions
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Please list the title and platform name of games.SELECT game.Game_ID, ga.me.Title, pl.form_name FROM game AS ga.me INNER JOIN platform as pl ON ga.me.Platform_ID = pl.Platform_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the titles and platform names of all games?SELECT game.Game_ID, game.Title, platform.Platform_name FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Please list the title of games with platforms that have market district in Asia or USA.SELECT game.Game_ID, game.Title FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID WHERE platform.Market_district IN ('Asia', 'USA');
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the titles of games that have platforms in the market districts of Asia or the USA?SELECT game.Game_ID, game.Title FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID WHERE platform.Market_district IN ('Asia', 'USA');
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the name of each franchise and the number of games belonging to that franchise.SELECT game.Game_ID, gaem.Title, gaem.Release_Date, gaem.Franchise, gaem.Developers, gaem.Platform_ID, gaem.Units_sold_Millions, pla.Player_ID, pla.Rank_of_the_year, pla.Player_name, pla.Position, pla.College FROM game AS gaem INNER JOIN player AS pla ON gaem.Platform_ID = pla.Platform_ID WHERE gaem.Platform_ID = 1 AND gaem.Platform_ID = 2 AND gaem.Platform_ID = 3 AND gaem.Platform_ID = 4 AND gaem.Platform_ID = 5 AND gaem.Platform_ID = 6 AND gaem.Platform_ID = 7 AND gaem.Platform_ID = 8 AND gaem.Platform_ID = 9 AND gaem.Platform_ID = 10 AND gaem.Platform_ID = 11 AND gaem.Platform_ID = 12 AND gaem.Platform_ID = 13 AND gaem.Platform_ID = 14 AND gaem.Platform_ID =
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many games are there from each Franchise?SELECT Game_ID, COUNT(Game_ID) AS Count FROM game GROUP BY Franchise;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the name of franchise that have the most number of games.SELECT Game_ID FROM game WHERE Franchise = 'Mario' AND Units_sold_Millions > 1000;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which franchise has the most games?SELECT Game_ID, Franchise FROM game GROUP BY Franchise ORDER BY COUNT(Game_ID) DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the names of franchises that have at least two games.SELECT game.Game_ID, game.Title, game.Release_Date, game.Franchise, game.Developers, game.Platform_ID, game.Units_sold_Millions FROM game WHERE game.Franchise IN (SELECT DISTINCT game.Franchise FROM game GROUP BY game.Franchise HAVING COUNT(game.Franchise) >= 2);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of franchises that have two or more games?SELECT Game_ID, Title, Release_Date, Franchise, Developers, Platform_ID, Units_sold_Millions FROM game WHERE Franchise IN (SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(Franchise) >= 2);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the name of players that do not play any game.SELECT Player_ID, Player_name FROM player WHERE NOT EXISTS (SELECT * FROM game_player WHERE game_player.Player_ID = player.Player_ID);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of players who do not play any games?SELECT Player_ID, Player_name FROM player WHERE NOT EXISTS (SELECT * FROM game_player WHERE game_player.Player_ID = player.Player_ID);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the title of games that are played by both players from college "Oklahoma" and players from college "Auburn".SELECT game.Game_ID, game.Title FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College IN ('Oklahoma', 'Auburn') GROUP BY game.Game_ID HAVING COUNT(DISTINCT player.Player_ID) > 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the titles of games that are played by players from Oklahoma college or Auburn college?SELECT game.Game_ID, game.Title FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College IN ('Oklahoma', 'Auburn') GROUP BY game.Game_ID HAVING COUNT(*) > 1
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show all distinct franchises of games.SELECT game.Game_ID, game.Title, game.Release_Date, game.Franchise, game.Developers, game.Platform_ID, game.Units_sold_Millions, platform.Platform_ID, platform.Platform_name, platform.Market_district, platform.Download_rank FROM game INNER JOIN platform ON game.Platform_ID = platform.Platform_ID WHERE game.Franchise IS NOT NULL ORDER BY game.Franchise ASC
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are all the distinct franchises?SELECT game.Game_ID, game.Title, game.Release_Date, game.Franchise, game.Developers, game.Platform_ID, game.Units_sold_Millions FROM game WHERE game.Franchise IS NOT NULL
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the title of games that are not played by any player who is in the Guard position.SELECT game.Game_ID, game.Title FROM game LEFT JOIN game_player ON game.Game_ID = game_player.Game_ID WHERE game_player.Player_ID IS NULL AND game_player.Position = 'Guard';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the titles of games not played by any players who play the Guard position?SELECT game.Game_ID, game.Title FROM game LEFT JOIN game_player ON game.Game_ID = game_player.Game_ID WHERE game_player.Player_ID IS NULL AND game_player.Position = 'Guard';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: list all the names of press in descending order of the profit of the year.SELECT press.Press_ID, press.Name FROM press ORDER BY Year_Profits DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Sorted all the press by year profits in descending order, and return press names.SELECT press.Press_ID, press.Name FROM press ORDER BY Year_Profits_billion DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of the publishers that made more than 15 billion profits each year or 1 billion each month?SELECT press.Press_ID, press.Name FROM press WHERE (press.Month_Profits_billion > 1 OR press.Year_Profits_billion > 15) ORDER BY press.Press_ID ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the press whose yearly profit is more than 15 billion or whose monthly profit is more than 1 billion. Return the press names.SELECT Press_ID FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: what are the average and maximum profit of a year for all presses?SELECT Press_ID, AVG(Year_Profits_billion), MAX(Year_Profits_billion) FROM press GROUP BY Press_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the average and maximum yearly profit for each press.SELECT Press_ID, AVG(Year_Profits_billion) AS Average_Yearly_Profit, MAX(Year_Profits_billion) AS Maximum_Yearly_Profit FROM press GROUP BY Press_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the name of the publisher whose monthly profit is the highest.SELECT press.Press_ID, press.Name FROM press WHERE press.Month_Profits_billion = (SELECT MAX(press.Month_Profits_billion) FROM press);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which press has the largest monthly profit? Give me the press name.SELECT press.Press_ID, press.Name FROM press WHERE press.Month_Profits_billion = (SELECT MAX(press.Month_Profits_billion) FROM press);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the name of the publisher whose monthly profit is the highest or the lowest.SELECT press.Press_ID, press.Name FROM press WHERE press.Month_Profits_billion = (SELECT MAX(press.Month_Profits_billion) FROM press);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the names of the press that makes the highest monthly profit or the lowest monthly profit?SELECT Press_ID FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) OR Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: how many authors are under age 30?SELECT Author_ID FROM author WHERE Age < 30;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Count the number of authors of age below 30.SELECT Author_ID FROM author WHERE Age < 30;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: find the average age of authors for each gender.SELECT Author_ID, Gender, AVG(Age) AS Average_Age FROM author GROUP BY Gender;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: For each gender, return gender and the average age of authors.SELECT Author_ID, Name, Age, Gender FROM author;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: find the number of authors who are older than 30 for each gender.SELECT Author_ID, Gender, COUNT(*) AS Count FROM author WHERE Age > 30 GROUP BY Gender;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many authors are of age above 30 for each gender?SELECT Author_ID, Gender, COUNT(*) AS Count FROM author WHERE Age > 30 GROUP BY Gender;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List all book titles in the order of their release date from the most recent to the past.SELECT Title FROM book WHERE Release_date = (SELECT MAX(Release_date) FROM book);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Sort all the books in descending order of release date, and return the book titles.SELECT Title FROM book WHERE Release_date IS NOT NULL ORDER BY Release_date DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the number of books for each series.SELECT Book_Series, COUNT(*) AS num_books FROM book GROUP BY Book_Series;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many books does each book series have? Return the counts and book series.SELECT Book_Series, COUNT(*) AS Count FROM book GROUP BY Book_Series;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the titles and publish dates of the top 5 best sale books.SELECT book.Title, book.Release_date FROM book WHERE book.Sale_Amount = (SELECT MAX(book.Sale_Amount) FROM book);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the 5 best books in terms of sale amount? Give me their titles and release dates.SELECT book.Title, book.Release_date FROM book WHERE book.Sale_Amount = (SELECT MAX(book.Sale_Amount) FROM book) LIMIT 5;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the book series that have some book selling more than 1000 and some book less 500.SELECT Book_Series FROM book WHERE Sale_Amount > '1000' AND Sale_Amount < '500'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which book series contain both books with sale amount above 1000 and books with sale amount below 500?SELECT Book_Series FROM book WHERE Sale_Amount > 1000 OR Sale_Amount < 500;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the name of authors who publish their books in both "MM" and "LT" series.SELECT author.Author_ID, author.Name FROM author JOIN book ON author.Author_ID = book.Author_ID WHERE book.Book_Series IN ('MM', 'LT') GROUP BY author.Author_ID HAVING COUNT(DISTINCT book.Book_Series) > 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which authors publish books in both "MM" and "LT" series? Give me the author names.SELECT Author_ID FROM book WHERE Book_Series IN ('MM', 'LT') GROUP BY Author_ID HAVING COUNT(DISTINCT Book_Series) = 2;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the name and age of the authors who do not have any book in the record.SELECT author.Author_ID, author.Name, author.Age FROM author LEFT JOIN book ON author.Author_ID = book.Author_ID WHERE book.Book_ID IS NULL;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which authors in the record have not published any books? Give me their names.SELECT author.Author_ID, author.Name FROM author LEFT JOIN book ON author.Author_ID = book.Author_ID WHERE book.Book_ID IS NULL;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the names of authors who have more than one book in the database.SELECT author.Author_ID, author.Name FROM author JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Author_ID HAVING COUNT(book.Book_ID) > 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which authors have published more than 1 book according to the database? Give me their names.SELECT author.Author_ID, author.Name FROM author JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Author_ID HAVING COUNT(book.Book_ID) > 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the title, author name, and publisher name for the top 3 best sales books.SELECT book.Title, author.Name, press.Name FROM book JOIN author ON book.Author_ID = author.Author_ID JOIN press ON book.Press_ID = press.Press_ID ORDER BY Sale_Amount DESC LIMIT 3;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the 3 best selling books? Show their titles, author names, and press names.SELECT book.Title, author.Name, press.Name FROM book JOIN author ON book.Author_ID = author.Author_ID JOIN press ON book.Press_ID = press.Press_ID ORDER BY Sale_Amount DESC LIMIT 3;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the name and total book sale amount of each press.SELECT press.Press_ID, press.Name, SUM(book.Sale_Amount) AS Total_Book_Sales FROM author JOIN book ON author.Author_ID = book.Author_ID JOIN press ON book.Press_ID = press.Press_ID GROUP BY press.Press_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the name and total book sale amount of each press?SELECT press.Press_ID, SUM(book.Sale_Amount) AS Total_Book_Sales FROM author JOIN book ON author.Author_ID = book.Author_ID JOIN press ON book.Press_ID = press.Press_ID GROUP BY press.Press_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the number of books that are sold more than 1000 for each publisher. List the press name as well.SELECT Press_ID, Name, COUNT(*) AS Book_Count FROM book GROUP BY Press_ID HAVING Sale_Amount > '1000' ORDER BY Press_ID ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: For each press, return its name and the number of books that have sale amount above 1000.SELECT press.Press_ID, press.Name, COUNT(*) AS num_books FROM book JOIN press ON book.Press_ID = press.Press_ID WHERE book.Sale_Amount > 1000 GROUP BY press.Press_ID;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the name of the author of best selling book?SELECT Author_ID FROM book WHERE Sale_Amount = (SELECT MAX(Sale_Amount) FROM book);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Who wrote the best selling book? Give me the author name.SELECT Author_ID FROM author WHERE Name = 'J.K. Rowling' AND Age = 54 AND Gender = 'Female'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: find the name and gender of the author who published the most books.SELECT author.Author_ID, author.Name, author.Gender FROM author INNER JOIN book ON author.Author_ID = book.Author_ID WHERE book.Book_ID IN (SELECT Book_ID FROM book GROUP BY Author_ID ORDER BY COUNT(*) DESC LIMIT 1) ORDER BY author.Author_ID ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Who wrote the largest number of books? Give me the author name and gender.SELECT Author_ID, Name, Gender FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID ORDER BY COUNT(*) DESC LIMIT 1);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the names of the authors who did not have any book with the "Accor" press.SELECT author.Author_ID, author.Name FROM author LEFT JOIN book ON author.Author_ID = book.Author_ID WHERE book.Press_ID IS NULL AND author.Gender = 'Male' ORDER BY author.Age DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Which authors have never published under the "Accor" press? Give me their names.SELECT author.Author_ID, author.Name FROM author LEFT JOIN book ON author.Author_ID = book.Author_ID WHERE book.Press_ID IS NULL AND author.Gender = 'Male' ORDER BY author.Age DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the name and the yearly profit in billion for press that published more than two books.SELECT press.Press_ID, press.Name, press.Year_Profits_billion FROM book JOIN press ON book.Press_ID = press.Press_ID GROUP BY Press_ID HAVING COUNT(*) > 2;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Find the press that published more than two books, and return its name and yearly profit in billion.SELECT press.Press_ID, press.Name, press.Year_Profits_billion FROM book JOIN author ON book.Author_ID = author.Author_ID JOIN press ON book.Press_ID = press.Press_ID WHERE book.Sale_Amount > 2 GROUP BY press.Press_ID HAVING COUNT(book.Book_ID) > 1 ORDER BY press.Year_Profits_billion DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many authors do we have?SELECT Authors.other_details FROM Authors
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show all author names.SELECT Authors.other_details FROM Authors
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the names and other details for all authors.SELECT Authors.other_details FROM Authors
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the other details for the author Addison Denesik.SELECT other_details FROM Authors WHERE author_name = 'Addison Denesik';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the number of documents.SELECT document_id FROM Documents
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Who is the author of the document with id 4?SELECT Authors.other_details FROM Documents_Processes 
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Who is the author of the document "Travel to Brazil"?SELECT Authors.other_details FROM Documents_Processes 
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many documents does has the author Era Kerluke written?SELECT document_id FROM Documents WHERE author_name = 'Era Kerluke';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the names and descriptions for all documents.SELECT document_id, author_name, document_name, document_description FROM Documents;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the ids and names for all documents by author Bianka Cummings.SELECT document_id, document_name FROM Documents WHERE author_name = 'Bianka Cummings';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the author name and details for the document "Travel to China".SELECT Authors.other_details FROM Documents_Processes
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show all author names and number of documents corresponding to each.SELECT Authors.other_details, COUNT(DISTINCT Documents.document_id) AS num_docs FROM Authors JOIN Documents ON Authors.author_name = Documents.author_name GROUP BY Author.name ORDER BY num_docs DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the name of the author with most number of documents?SELECT document_id FROM Documents WHERE author_name = 'John Doe' AND document_name LIKE '%Report%';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the names for authors with at least two documents.SELECT document_id FROM Documents WHERE author_name IN (SELECT author_name FROM Documents GROUP BY author_name HAVING COUNT(*) >= 2);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many business processes do we have?SELECT Business_Processes.process_id FROM Business_Processes
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the next process id, process name, process description for process with id 9.SELECT Business_Processes.process_id, Business_Processes.next_process_id, Business_Processes.process_name, Business_Processes.process_description FROM Business_Processes WHERE Business_Processes.process_id = 9;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the process name for the next process of the process with id 9?SELECT process_id FROM Business_Processes WHERE process_id = 9;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the number of process outcomes.SELECT process_id, COUNT(process_outcome_code) AS num_of_process_outcomes FROM Documents_Processes GROUP BY process_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the codes and descriptions for all process outcomes.SELECT process_id, process_outcome_code, process_outcome_description FROM Business_Processes JOIN Documents_Processes ON Business_Processes.process_id = Documents_Processes.process_id JOIN Process_Outcomes ON Documents_Processes.process_outcome_code = Process_Outcomes.process_outcome_code;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the description for the process outcome code working?SELECT process_id, process_outcome_code, process_outcome_description FROM Business_Processes JOIN Documents_Processes ON Business_Processes.process_id = Documents_Processes.process_id JOIN Process_Outcomes ON Documents_Processes.process_outcome_code = Process_Outcomes.process_outcome_code WHERE process_outcome_code = 'working' ORDER BY process_id ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the number of process status.SELECT process_id, COUNT(process_status_code) AS num_processes FROM Documents_Processes GROUP BY process_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the codes and descriptions for all process status.SELECT process_id, process_status_code, process_status_description FROM Business_Processes INNER JOIN Documents_Processes ON Business_Processes.process_id = Documents_Processes.process_id INNER JOIN Process_Status ON Documents_Processes.process_status_code = Process_Status.process_status_code;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the description for process status code ct?SELECT process_id, process_status_description FROM Business_Processes JOIN Documents_Processes ON Business_Processes.process_id = Documents_Processes.process_id WHERE process_status_code = 'ct' AND document_id IN (SELECT document_id FROM Documents WHERE author_name = 'John Smith') ORDER BY process_id ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many staff do we have?SELECT Staff.staff_id, COUNT(*) AS num_staff
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the ids and details for all staff.SELECT staff_id, staff_details FROM Staff;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the details for the staff member with id 100.SELECT staff_id, staff_details FROM Staff WHERE staff_id = 100;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the number of staff roles.SELECT Ref_Staff_Roles.staff_role_code, COUNT(*) AS num_staff_roles FROM Staff_in_Processes INNER JOIN Ref_Staff_Roles ON Staff_in_Processes.staff_role_code = Ref_Staff_Roles.staff_role_code GROUP BY Ref_Staff_Roles.staff_role_code ORDER BY num_staff_roles DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the codes and descriptions for all staff roles.SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the description for staff role code HR?SELECT Ref_Staff_Roles.staff_role_code, Ref_Staff_Roles.staff_role_description FROM Staff_in_Processes INNER JOIN Ref_Staff_Roles ON Staff_in_Processes.staff_role_code = Ref_Staff_Roles.staff_role_code WHERE Staff_in_Processes.staff_id = 1 AND Staff_in_Processes.date_from <= '2022-01-31' AND Staff_in_Processes.date_to >= '2022-01-31'
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many documents have a process?SELECT document_id FROM Documents_Processes WHERE process_id IS NOT NULL;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List all process ids with a document.SELECT process_id FROM Documents_Processes WHERE document_id IN (SELECT document_id FROM Documents);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show all document ids without a process.SELECT document_id FROM Documents WHERE document_id NOT IN (SELECT document_id FROM Documents_Processes);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List all process ids with no document.SELECT process_id FROM Business_Processes WHERE process_id NOT IN (SELECT DISTINCT process_id FROM Documents_Processes);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the process outcome description and process status description for the document with id 0?SELECT process_id, process_outcome_code, process_status_code FROM Documents_Processes WHERE document_id = 0;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the process name for the document "Travel to Brazil"?SELECT process_id FROM Business_Processes WHERE process_name = 'Travel to Brazil';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show all process ids and the number of documents in each process.SELECT process_id, COUNT(document_id) FROM Documents_Processes GROUP BY process_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many staff are the document with id 0 and process with id 9.SELECT staff_id FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show all staff ids and the number of document processes for each staff.SELECT staff_id, COUNT(*) AS num_processes FROM Staff_in_Processes GROUP BY staff_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show all staff role codes and the number of document processes for each role.SELECT staff_role_code, COUNT(*) AS num_processes FROM Staff_in_Processes GROUP BY staff_role_code ORDER BY num_processes DESC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many different roles does the staff with id 3 have?SELECT staff_role_code FROM Staff_in_Processes WHERE staff_id = 3 GROUP BY staff_role_code HAVING COUNT(*) > 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many agencies do we have?SELECT Agencies.staff_id FROM Agencies WHERE Agencies.agency_id = Staff.agency_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Count the number of agencies.SELECT Agencies.staff_id FROM Agencies WHERE Agencies.agency_id = Staff.agency_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show all agency ids and details.SELECT Agencies.staff_id, Agencies.agency_details FROM Staff INNER JOIN Agencies ON Staff.agency_id = Agencies.agency_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are all the agency ids and details?SELECT Agencies.staff_id, Agencies.agency_details FROM Staff INNER JOIN Agencies ON Staff.agency_id = Agencies.agency_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the number of clients.SELECT Clients.meeting_id, COUNT(Clients.meeting_id) AS num_clients FROM Clients GROUP BY Clients.meeting_id HAVING num_clients > 2;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many clients are there?SELECT Clients.meeting_id FROM Clients WHERE Clients.client_id = Meetings.client_id AND Meetings.meeting_id IS NOT NULL;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List all client ids and client details.SELECT Clients.meeting_id, Clients.client_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are all the client ids and details?SELECT Clients.meeting_id, Clients.client_id, Clients.client_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show agency ids and the number of clients for each agency.SELECT Agencies.staff_id, COUNT(Clients.client_id) AS num_clients FROM Clients JOIN Staff ON Clients.agency_id = Staff.agency_id GROUP BY Agencies.staff_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many clients does each agency have?SELECT Agencies.staff_id, COUNT(Clients.client_id) AS num_clients FROM Clients JOIN Staff ON Clients.agency_id = Staff.agency_id GROUP BY Agencies.staff_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the agency id and details with most number of clients?SELECT Agencies.staff_id, Agencies.agency_details FROM Staff INNER JOIN Clients ON Staff.staff_id = Clients.client_id GROUP BY Agencies.agency_id HAVING COUNT(Clients.client_id) > 0 ORDER BY COUNT(Clients.client_id) DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the agency id and details for the agency with the greatest number of clients.SELECT Agencies.staff_id, Agencies.agency_details FROM Staff INNER JOIN Agencies ON Staff.agency_id = Agencies.agency_id WHERE (Staff.staff_id IN (SELECT Staff.staff_id FROM Staff INNER JOIN Meetings ON Staff.staff_id = Meetings.staff_id GROUP BY Staff.staff_id HAVING COUNT(Meetings.meeting_id) > 0)) ORDER BY Agencies.agency_details ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show agency ids and details with at least 2 clients.SELECT Agencies.staff_id, Agencies.agency_details FROM Staff INNER JOIN Clients ON Staff.staff_id = Clients.client_id WHERE Clients.sic_code LIKE 'A%' OR Clients.sic_code LIKE 'B%';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the agency ids and details agencies with at least 2 clients?SELECT Agencies.staff_id, Agencies.agency_details FROM Staff INNER JOIN Clients ON Staff.staff_id = Clients.client_id GROUP BY Clients.client_id HAVING COUNT(Clients.client_id) >= 2;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show agency details for client with detail 'Mac'.SELECT Agencies.staff_id FROM Clients WHERE Clients.client_details = 'Mac' AND Clients.agency_id = Agencies.agency_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the agency details for clients with the detail Mac?SELECT Agencies.staff_id FROM Clients WHERE Clients.client_details = 'Mac' AND Clients.agency_id = Agencies.agency_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show details for all clients and the details of their corresponding agents.SELECT Clients.staff_id, Staff.staff_details FROM Clients INNER JOIN Staff ON Clients.agency_id = Staff.agency_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the client details for each client and the corresponding details of their agencies?SELECT Clients.staff_id, Staff.staff_details FROM Clients INNER JOIN Staff ON Clients.agency_id = Staff.agency_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show all sic codes and the number of clients with each code.SELECT Staff.staff_id, Staff.agency_id, Staff.staff_details, Agencies.agency_details FROM Staff INNER JOIN Agencies ON Staff.agency_id = Agencies.agency_id WHERE Agencies.agency_id = 2;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many clients are there for each sic code?SELECT Clients.staff_id, COUNT(Clients.sic_code) AS num_clients FROM Clients GROUP BY Clients.sic_code;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show all client ids and details with sic code "Bad".SELECT Clients.meeting_id, Clients.client_id, Clients.sic_code, Clients.client_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id WHERE Sic_code = 'Bad' AND Meeting_outcome = 'Good';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the client ideas and details for clients with the sic code Bad?SELECT Clients.staff_id, Staff.staff_details FROM Clients INNER JOIN Staff ON Clients.agency_id = Staff.agency_id WHERE Clients.sic_code = 'Bad' AND Clients.client_details LIKE '%idea%';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show all agency ids and details for agencies with a client.SELECT Agencies.staff_id, Agencies.agency_details FROM Staff INNER JOIN Clients ON Staff.agency_id = Clients.agency_id WHERE Clients.client_id IS NOT NULL;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the agency ids and agency details for all agencies who have a client?SELECT Agencies.staff_id, Agencies.agency_details FROM Staff INNER JOIN Clients ON Staff.staff_id = Clients.client_id WHERE Clients.sic_code = '12345' AND Clients.client_details LIKE '%ABC%';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show all agency ids without any client.SELECT Agencies.staff_id FROM Staff WHERE Clients.client_id IS NULL;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are ids of agencies that do not have any clients?SELECT Agencies.staff_id FROM Staff WHERE Staff.agency_id = Agencies.agency_id AND Clients.agency_id IS NULL;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many invoices do we have?SELECT Invoices.meeting_id FROM Meetings WHERE MeetingOutcome = 'Successful' AND BillableYN = 'Y';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Count the number of invoices.SELECT Invoices.meeting_id FROM Invoices WHERE InvoiceStatus = 'Paid' AND ClientID IN (SELECT Clients.ClientID FROM Clients INNER JOIN Staff_In_Meetings ON Clients.ClientID = Staff_In_Meetings.ClientID WHERE Staff_In_Meetings.StaffID IN (SELECT Staff.StaffID FROM Staff INNER JOIN Agencies ON Staff.AgencyID = Agencies.AgencyID WHERE Agencies.AgencyDetails LIKE '%Agency%')) GROUP BY InvoiceID HAVING COUNT(*) > 0;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show ids, status codes, and details for all invoices for clients.SELECT Invoices.meeting_id, Invoices.invoice_status, Invoices.invoice_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id INNER JOIN Invoices ON Clients.client_id = Invoices.client_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the ids, statuses, and details for all invoices?SELECT Invoices.meeting_id, Invoices.invoice_status, Invoices.invoice_details FROM Meetings INNER JOIN Payments ON Meetings.meeting_id = Payments.payment_id INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show all client ids and the number of invoices for each client.SELECT Clients.meeting_id, COUNT(*) AS num_invoices FROM Meetings JOIN Clients ON Meetings.client_id = Clients.client_id GROUP BY Clients.meeting_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many invoices are there for each client id?SELECT Invoices.meeting_id, COUNT(*) AS num_invoices FROM Invoices GROUP BY Invoice.id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the client id and detail with most number of invoices.SELECT Clients.meeting_id, Clients.client_details FROM Meetings INNER JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id WHERE Meetings.billable_yn = 'Y' AND Meetings.start_date_time >= '2019-01-01 00:00:00' AND Meetings.end_date_time <= '2020-12-31 23:59:59';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the client id and details for the client with the most invoices?SELECT Clients.meeting_id, Clients.client_details FROM Meetings INNER JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id WHERE Meetings.billable_yn = 'Y' AND Meetings.start_date_time >= '2019-01-01 00:00:00' AND Meetings.end_date_time <= '2020-12-31 23:59:59';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are client ids for clients with at least 2 invoices.SELECT Clients.meeting_id FROM Meetings WHERE Meeting.meeting_outcome = 'Successful' AND Meeting.billable_yn = 'Y';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the client ids for clients with two or more invoices?SELECT Clients.meeting_id FROM Meetings WHERE Meeting.meeting_outcome = 'Successful' AND Meeting.billable_yn = 'Y';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show all invoice status codes and the number of invoices with each status.SELECT Invoices.meeting_id, Invoices.invoice_status, COUNT(*) AS num_invoices FROM Meetings INNER JOIN Invoices ON Meetings.client_id = Invoices.client_id GROUP BY Invoice_status ORDER BY Invoice_status ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many invoices are there for each status code?SELECT Invoices.meeting_id, COUNT(*) AS num_invoices FROM Invoices GROUP BY InvoiceStatus;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the invoice status code with most number of invoices.SELECT Invoices.meeting_id, COUNT(*) AS count FROM Invoices INNER JOIN Meetings ON Invoices.client_id = Meetings.client_id GROUP BY InvoiceStatus ORDER BY count DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the invoice status that has the most invoices.SELECT Invoices.meeting_id, InvoiceStatus.invoice_status FROM Invoices INNER JOIN Payments ON Invoices.invoice_id = Payments.invoice_id INNER JOIN Meetings ON Invoices.client_id = Meetings.client_id INNER JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id INNER JOIN Clients ON Meetings.client_id = Clients.client_id INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id INNER JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id INNER JOIN InvoiceStatus ON Invoices.invoice_status = InvoiceStatus.invoice_status GROUP BY InvoiceStatus.invoice_status ORDER BY COUNT(*) DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show all invoice status codes and details and the corresponding client id and details and agency id and details.SELECT Invoices.meeting_id, Clients.client_id, Agencies.agency_id, Invoices.invoice_status, Invoices.invoice_details FROM Invoices INNER JOIN Clients ON Invoices.client_id = Clients.client_id INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the invoice status, invoice details, and corresponding client ids and details and agency id and details?SELECT Invoices.meeting_id, Invoices.invoice_status, Invoices.invoice_details, Clients.client_id, Clients.client_details, Agencies.agency_id, Agencies.agency_details FROM Meetings INNER JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id INNER JOIN Clients ON Meetings.client_id = Clients.client_id INNER JOIN Payments ON Meetings.meeting_id = Payments.payment_id INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id WHERE Meetings.billable_yn = 'Y' AND Meetings.start_date_time >= '2022-01-01 00:00:00' AND Meetings.end_date_time <= '2022-12-31 23:59:59';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List all meeting type codes and details.SELECT meeting_id, meeting_type, purpose_of_meeting FROM Meetings;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are all meeting types and other details?SELECT meeting_id, meeting_type, purpose_of_meeting, other_details FROM Meetings;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show all meeting outcomes and purposes.SELECT meeting_id, meeting_outcome, purpose_of_meeting FROM Meetings;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are all meeting outcomes and purposes?SELECT meeting_id, meeting_outcome, purpose_of_meeting FROM Meetings;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show all payment ids and details for invoices whose status is 'Working'.SELECT Payments.meeting_id, Payments.payment_details FROM Payments WHERE Invoices.invoice_status = 'Working';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are all payment ids and payment details for invoices with status Working?SELECT Payments.meeting_id, Payments.payment_details FROM Payments WHERE Invoices.invoice_status = 'Working';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show all invoice ids and statuses without a payment.SELECT Invoices.meeting_id, Invoices.invoice_status FROM Meetings INNER JOIN Payments ON Meetings.meeting_id = Payments.payment_id WHERE Payments.payment_id IS NULL;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the invoice ids and statuses for invoices without a payment?SELECT Invoices.meeting_id, Invoices.invoice_status FROM Meetings INNER JOIN Payments ON Meetings.meeting_id = Payments.payment_id WHERE Payments.payment_id IS NULL;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many payments do we have?SELECT Payments.meeting_id, COUNT(Payments.payment_id) AS payment_count FROM Payments GROUP BY Payments.meeting_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Count the number of payments.SELECT Payments.meeting_id, COUNT(Payments.payment_id) AS payment_count FROM Payments GROUP BY Payments.meeting_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List all payment ids and its corresponding invoice ids and details.SELECT Payments.meeting_id, Payments.payment_id, Invoices.invoice_id, Invoices.invoice_details FROM Payments INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the payment ids, invoice ids, and payment details for all payments?SELECT Payments.meeting_id, Payments.invoice_id, Payments.payment_details FROM Payments;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show all the different invoice ids and statuses of the paymentsSELECT Payments.meeting_id, Payments.invoice_id, Payments.payment_details FROM Payments WHERE Payments.invoice_id = Invoices.invoice_id AND Payments.payment_details = 'Paid' ORDER BY Payments.meeting_id ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the distinct invoice ids and statuses for all payments?SELECT Invoices.meeting_id, InvoiceStatuses.invoice_status FROM Payments INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id INNER JOIN InvoiceStatuses ON Invoices.invoice_status = InvoiceStatuses.invoice_status;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show all invoice ids and the number of payments for each invoice.SELECT Payments.meeting_id, COUNT(Payments.payment_id) AS num_payments FROM Payments GROUP BY Payments.meeting_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many payments are there for each invoice?SELECT Payments.meeting_id, COUNT(Payments.payment_id) AS payment_count FROM Payments GROUP BY Payments.meeting_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the invoice id, status code, and details for the invoice with most number of payments.SELECT Invoices.meeting_id, Invoices.invoice_status, Invoices.invoice_details FROM Payments INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id WHERE Payments.payment_id IN (SELECT MAX(Payments.payment_id) FROM Payments GROUP BY Payments.invoice_id);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the invoice ids, statuses, and details for invoices with the most payments?SELECT Invoices.meeting_id, Invoices.invoice_status, Invoices.invoice_details FROM Payments INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id WHERE Payments.payment_id IN (SELECT MAX(Payments.payment_id) FROM Payments GROUP BY Payments.invoice_id);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many staff do we have?SELECT Staff.staff_id FROM Staff
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Count the number of staff.SELECT Staff.staff_id, COUNT(*) AS num_staff FROM Staff GROUP BY Staff.staff_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the agency ids and the number of staff in each agent?SELECT Agencies.staff_id, COUNT(*) FROM Staff GROUP BY Agencies.agency_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the agency ids and number of staff in each.SELECT Agencies.staff_id, COUNT(*) AS num_staff FROM Staff INNER JOIN Agencies ON Staff.agency_id = Agencies.agency_id GROUP BY Agencies.staff_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the agent id and details for the agency with most staff?SELECT Agencies.staff_id, Agencies.agency_details FROM Staff INNER JOIN Agencies ON Staff.agency_id = Agencies.agency_id GROUP BY Agencies.agency_id ORDER BY COUNT(Agencies.agency_id) DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the id and detail for the agency with the most staff.SELECT Agencies.staff_id, Agencies.agency_details FROM Staff INNER JOIN Agencies ON Staff.agency_id = Agencies.agency_id GROUP BY Agencies.agency_id ORDER BY COUNT(Agencies.agency_id) DESC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show meeting outcome codes and the number of meeting in each outcome.SELECT meeting_id, meeting_outcome, COUNT(*) AS num_meetings FROM Meetings GROUP BY meeting_outcome ORDER BY meeting_outcome ASC;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many meetings had each meeting outcome?SELECT meeting_id, COUNT(*) AS num_meetings FROM Meetings GROUP BY meeting_outcome;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the client ids and the number of meeting for each client.SELECT Clients.meeting_id, COUNT(*) AS num_meetings FROM Meetings JOIN Clients ON Meetings.client_id = Clients.client_id GROUP BY Clients.meeting_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many meetings are there for each client id?SELECT meeting_id, COUNT(*) AS num_meetings FROM Meetings GROUP BY meeting_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the meeting type codes and the number of meeting for each client.SELECT meeting_id, meeting_type FROM Meetings;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many meetings are there for each meeting type?SELECT meeting_id, COUNT(*) AS num_meetings FROM Meetings GROUP BY meeting_type;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show all meeting ids, meeting outcomes, meeting types and the details of the client atttending it.SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the meeting ids, meeting outcomes, meeting types, and client details for all meetings?SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the meeting ids and the number of staff in each meeting.SELECT meeting_id, COUNT(staff_id) AS num_staff FROM Staff_in_Meetings GROUP BY meeting_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Count the number of staff in each meeting by meeting id.SELECT meeting_id, COUNT(staff_id) AS num_staff FROM Staff_in_Meetings GROUP BY meeting_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Show the staff id and the number of meetings attended by the staff who attended some meeting but had the lowest attendance.SELECT Staff.staff_id, COUNT(Meetings.meeting_id) AS num_meetings_attended FROM Meetings JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id GROUP BY Staff.staff_id HAVING COUNT(Meetings.meeting_id) > 0 ORDER BY num_meetings_attended ASC LIMIT 1;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What is the staff id of the staff who attended the least meetings but attended some meeting?SELECT staff_id FROM Staff WHERE staff_id IN (SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Staff_in_Meetings));
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many staff have attended a meeting?SELECT Staff.staff_id FROM Meetings 
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the number of distinct staff who have attended a meeting?SELECT Staff.staff_id FROM Staff 
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: How many staff did not attend any meeting?SELECT Staff.staff_id FROM Staff WHERE Staff.staff_id NOT IN (SELECT Staff_in_Meetings.staff_id FROM Staff_in_Meetings);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Count the number of staff who did not attend any meeting.SELECT Staff.staff_id, COUNT(*) AS num_meetings FROM Staff LEFT JOIN Meetings ON Staff.staff_id = Meetings.staff_id WHERE Meetings.meeting_id IS NULL GROUP BY Staff.staff_id HAVING num_meetings=0;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the ids and details of the clients who have attended any meeting or have any invoice?SELECT Clients.meeting_id, Clients.client_details FROM Meetings INNER JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id INNER JOIN Clients ON Meetings.client_id = Clients.client_id UNION SELECT Invoices.invoice_id, Invoices.client_details FROM Payments INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id INNER JOIN Clients ON Invoices.client_id = Clients.client_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the ids and details of clients who have attended a meeting or had an invoice.SELECT Clients.meeting_id, Clients.client_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id UNION SELECT Invoices.invoice_id, Invoices.client_details FROM Payments INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the ids and details of the staff who have attended at least 1 meetings and have the detail with letter's'?SELECT Staff.staff_id, Staff.staff_details FROM Staff INNER JOIN Staff_in_Meetings ON Staff.staff_id = Staff_in_Meetings.staff_id WHERE Staff_in_Meetings.meeting_id IN (SELECT meeting_id FROM Meetings WHERE billable_yn='Y') AND Staff.staff_details LIKE '%s%';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the ids and details of staff who have attended at least 1 meeting and have an s in their staff details?SELECT Staff.staff_id, Staff.staff_details FROM Staff INNER JOIN Staff_in_Meetings ON Staff.staff_id = Staff_in_Meetings.staff_id WHERE Staff_in_Meetings.meeting_id IN (SELECT Meetings.meeting_id FROM Meetings WHERE Meetings.billable_yn='Y') AND Staff.staff_details LIKE '%s%';
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the id, sic code and agency id of the client who has attended 1 meeting and has any invoice.SELECT Clients.meeting_id, Clients.sic_code, Agencies.agency_id FROM Meetings INNER JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id INNER JOIN Clients ON Meetings.client_id = Clients.client_id INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id WHERE (Clients.invoice_id IS NOT NULL AND COUNT(Meetings.meeting_id) = 1);
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: Return the ids, sic codes, and agency ids of clients who have attended 1 meeting and had an invoice.SELECT Clients.meeting_id, Clients.sic_code, Agencies.agency_id FROM Meetings INNER JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id INNER JOIN Clients ON Meetings.client_id = Clients.client_id INNER JOIN Payments ON Clients.invoice_id = Payments.invoice_id INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id WHERE (Clients.client_id IN (SELECT Clients.client_id FROM Meetings INNER JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id INNER JOIN Clients ON Meetings.client_id = Clients.client_id INNER JOIN Payments ON Clients.invoice_id = Payments.invoice_id INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id GROUP BY Clients.client_id HAVING COUNT(*)=1)) AND (Clients.client_id IN (SELECT Clients.client_id FROM Meetings INNER JOIN Staff
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: List the start time, end time of each meeting, and the corresponding client detail and staff detail.SELECT Meetings.meeting_id, Meetings.start_date_time, Meetings.end_date_time, Clients.client_details, Staff.staff_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id INNER JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id INNER JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id;
Your role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.For the given schema, output the SQL query you need to answer the problem.The problem is given below in natural language.Additionally, here are the CREATE TABLE statements for the schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))Do not write anything after the SQL query.Do not write anything other than the SQL query - no comments, no newlines, no print statements.Problem: What are the start and end times of each meeting, as well as the corresponding client and staff details the attendees?SELECT meeting_id, start_date_time, end_date_time, client.client_details, staff.staff_details FROM Meetings AS meetings INNER JOIN Staff_in_Meetings ON meetings.meeting_id = Staff_in_Meetings.meeting_id INNER JOIN Clients AS clients ON meetings.client_id = clients.client_id INNER JOIN Staff AS staff ON Staff_in_Meetings.staff_id = staff.staff_id;
